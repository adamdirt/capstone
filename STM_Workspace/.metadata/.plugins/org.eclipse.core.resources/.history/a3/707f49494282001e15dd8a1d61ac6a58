/*
 * tof_lib.c
 *
 *  Created on: Nov 7, 2023
 *      Author: adam
 */

#include "tof_lib.h"

#ifdef DO_MOTION_TEST
extern VL53L5CX_Motion_Configuration Sensor1MotionCfg;
#endif

#ifdef DO_GESTURE_TEST
extern GW_proc_t gest_predictor;
extern HT_proc_t hand_tracker;
extern SEN_data_t sensor_data;
#endif

uint8_t init_tof(VL53L5CX_Configuration	*config){
	uint8_t status = VL53L5CX_STATUS_OK;
	status |= vl53l5cx_init(config);
	HAL_Delay(1000);
	//@todo more initialization
	status |= vl53l5cx_set_ranging_frequency_hz(config, 10);
	HAL_Delay(500);
#ifdef DO_MOTION_TEST
	status |= vl53l5cx_motion_indicator_init(config, &Sensor1MotionCfg, VL53L5CX_RESOLUTION_4X4);
	HAL_Delay(100);
#endif

#ifdef DO_GESTURE_TEST
	status |= GW_init(&gest_predictor, &hand_tracker, &sensor_data);
	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53L5CX_RESOLUTION_8X8);
	status |= GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0/50);
#endif

	return status;
}


uint8_t sample_once(VL53L5CX_Configuration* config, VL53L5CX_ResultsData* results){
	uint8_t status = VL53L5CX_STATUS_OK;
	uint8_t is_ready = 0;

	while(is_ready == 0){ // poll ;)
		status |= vl53l5cx_check_data_ready(config, &is_ready);
	}
	vl53l5cx_get_ranging_data(config, results);

	return status;
}

uint8_t detect_motion(VL53L5CX_ResultsData *results){
	uint8_t i;
	uint8_t cur_motion;
	uint8_t frame_has_motion = 0;

	for (i = 0; i < 32; i++){
		cur_motion = results->motion_indicator.motion[i];
		frame_has_motion |= (cur_motion < 500 && cur_motion > 100);
	}

	return frame_has_motion;
}

int* select_target_index(int *target_indices, int zone_index, VL53L5CX_ResultsData *pRangingData)
{
	(void)pRangingData;
	target_indices[0] = zone_index * VL53LMZ_NB_TARGET_PER_ZONE;
	return target_indices;
}

uint8_t SEN_CopyRangingData(SEN_data_t* pDest, VL53L5CX_ResultsData *results)
{
	float ranging, peak;
	uint8_t valid;
	int idx, result, nb_targets, target_idx[3], target_status;

//	if (pDest == NULL || results == NULL) return -1;

	pDest->timestamp_ms = GET_TIME_STAMP();

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
	{
		select_target_index(target_idx, idx, results);

		ranging = results->distance_mm[target_idx[0]]/4.0; // Signed 14.2

		peak = results->signal_per_spad[target_idx[0]]/2048.0; // Unsigned 21.11
		nb_targets = results->nb_target_detected[idx];
		target_status = results->target_status[target_idx[0]];

		valid = (nb_targets > 0)
				&& (target_status == 4 || target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10);
		result = SEN_set_data(pDest, idx, ranging, peak, valid);

		if (result != 0) return result;
	}

	return 0;
}
