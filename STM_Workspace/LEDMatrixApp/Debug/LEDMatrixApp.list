
LEDMatrixApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015b3c  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b024  0801b024  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b024  0801b024  0002b024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b02c  0801b02c  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b02c  0801b02c  0002b02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b030  0801b030  0002b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801b034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002488  2000000c  0801b040  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002494  0801b040  00032494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf67  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f62  00000000  00000000  0003cfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0003ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ce  00000000  00000000  0003fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001739c  00000000  00000000  00040356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f645  00000000  00000000  000576f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a05a  00000000  00000000  00066d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ea0  00000000  00000000  000f0d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000f3c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080054d0 	.word	0x080054d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080054d0 	.word	0x080054d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb12 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80a 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8cc 	bl	8000678 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f872 	bl	80005c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f89e 	bl	8000624 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  matrix_app_main();
 80004e8:	f000 facc 	bl	8000a84 <matrix_app_main>
 80004ec:	e7fc      	b.n	80004e8 <main+0x18>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 ffac 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <SystemClock_Config+0xd0>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a28      	ldr	r2, [pc, #160]	; (80005c0 <SystemClock_Config+0xd0>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <SystemClock_Config+0xd0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <SystemClock_Config+0xd4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd4>)
 800053e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000558:	2310      	movs	r3, #16
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000560:	2300      	movs	r3, #0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000564:	2310      	movs	r3, #16
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800056e:	2304      	movs	r3, #4
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4618      	mov	r0, r3
 800057c:	f001 ffe0 	bl	8002540 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000586:	f000 f939 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fa42 	bl	8002a30 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005b2:	f000 f923 	bl	80007fc <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 fe75 	bl	80012f4 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f8f4 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	40005400 	.word	0x40005400
 8000620:	00061a80 	.word	0x00061a80

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART2_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000630:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800065c:	f002 fc08 	bl	8002e70 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f8c9 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000007c 	.word	0x2000007c
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b56      	ldr	r3, [pc, #344]	; (80007ec <MX_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a55      	ldr	r2, [pc, #340]	; (80007ec <MX_GPIO_Init+0x174>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b53      	ldr	r3, [pc, #332]	; (80007ec <MX_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b4f      	ldr	r3, [pc, #316]	; (80007ec <MX_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a4e      	ldr	r2, [pc, #312]	; (80007ec <MX_GPIO_Init+0x174>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <MX_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b48      	ldr	r3, [pc, #288]	; (80007ec <MX_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a47      	ldr	r2, [pc, #284]	; (80007ec <MX_GPIO_Init+0x174>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b45      	ldr	r3, [pc, #276]	; (80007ec <MX_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b41      	ldr	r3, [pc, #260]	; (80007ec <MX_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a40      	ldr	r2, [pc, #256]	; (80007ec <MX_GPIO_Init+0x174>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <MX_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLEX_SPI_I2C_N_Pin|LPn1_Pin|LPn2_Pin|LPn3_Pin
 80006fe:	2200      	movs	r2, #0
 8000700:	f242 010f 	movw	r1, #8207	; 0x200f
 8000704:	483a      	ldr	r0, [pc, #232]	; (80007f0 <MX_GPIO_Init+0x178>)
 8000706:	f000 fdb7 	bl	8001278 <HAL_GPIO_WritePin>
                          |LPn4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	4839      	ldr	r0, [pc, #228]	; (80007f4 <MX_GPIO_Init+0x17c>)
 8000710:	f000 fdb2 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2111      	movs	r1, #17
 8000718:	4837      	ldr	r0, [pc, #220]	; (80007f8 <MX_GPIO_Init+0x180>)
 800071a:	f000 fdad 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_C_GPIO_Port, I2C_RST_C_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2108      	movs	r1, #8
 8000722:	4835      	ldr	r0, [pc, #212]	; (80007f8 <MX_GPIO_Init+0x180>)
 8000724:	f000 fda8 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLEX_SPI_I2C_N_Pin LPn3_Pin */
  GPIO_InitStruct.Pin = FLEX_SPI_I2C_N_Pin|LPn3_Pin;
 8000728:	f242 0304 	movw	r3, #8196	; 0x2004
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	482b      	ldr	r0, [pc, #172]	; (80007f0 <MX_GPIO_Init+0x178>)
 8000742:	f000 fc15 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn4_Pin;
 8000746:	230b      	movs	r3, #11
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4824      	ldr	r0, [pc, #144]	; (80007f0 <MX_GPIO_Init+0x178>)
 800075e:	f000 fc07 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_C_Pin INT1_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8000762:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8000766:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000768:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <MX_GPIO_Init+0x17c>)
 800077a:	f000 fbf9 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077e:	2320      	movs	r3, #32
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <MX_GPIO_Init+0x17c>)
 8000796:	f000 fbeb 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_C_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|LPn_C_Pin;
 800079a:	2311      	movs	r3, #17
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_GPIO_Init+0x180>)
 80007b2:	f000 fbdd 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_C_Pin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 80007b6:	2308      	movs	r3, #8
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007be:	2302      	movs	r3, #2
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480a      	ldr	r0, [pc, #40]	; (80007f8 <MX_GPIO_Init+0x180>)
 80007ce:	f000 fbcf 	bl	8000f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	200a      	movs	r0, #10
 80007d8:	f000 fb01 	bl	8000dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007dc:	200a      	movs	r0, #10
 80007de:	f000 fb1a 	bl	8000e16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000846:	2007      	movs	r0, #7
 8000848:	f000 fabe 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_I2C_MspInit+0x84>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12c      	bne.n	80008d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000896:	f44f 7340 	mov.w	r3, #768	; 0x300
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <HAL_I2C_MspInit+0x8c>)
 80008b4:	f000 fb5c 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 80008c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <HAL_UART_MspInit+0x94>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d133      	bne.n	8000972 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_UART_MspInit+0x98>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <HAL_UART_MspInit+0x98>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_UART_MspInit+0x98>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a14      	ldr	r2, [pc, #80]	; (8000980 <HAL_UART_MspInit+0x98>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_UART_MspInit+0x98>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <HAL_UART_MspInit+0x9c>)
 800095e:	f000 fb07 	bl	8000f70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2026      	movs	r0, #38	; 0x26
 8000968:	f000 fa39 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096c:	2026      	movs	r0, #38	; 0x26
 800096e:	f000 fa52 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004400 	.word	0x40004400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f8e4 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 80009e0:	2010      	movs	r0, #16
 80009e2:	f000 fc63 	bl	80012ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <USART2_IRQHandler+0x10>)
 80009f2:	f002 fa8b 	bl	8002f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000007c 	.word	0x2000007c

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <init_tof>:

VL53LMZ_Configuration Sensor1Cfg;
VL53LMZ_ResultsData Sensor1Results;


uint8_t init_tof(VL53LMZ_Configuration	*config){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

	config->platform.address = VL53LMZ_DEFAULT_I2C_ADDRESS;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2252      	movs	r2, #82	; 0x52
 8000a34:	801a      	strh	r2, [r3, #0]

	status |= vl53lmz_init(config);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f003 fdcc 	bl	80045d4 <vl53lmz_init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1000);
 8000a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4a:	f000 f8c9 	bl	8000be0 <HAL_Delay>
	//TODO more initialization
	status |= vl53lmz_set_resolution(config, VL53LMZ_RESOLUTION_8X8);
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f004 fab7 	bl	8004fc4 <vl53lmz_set_resolution>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73fb      	strb	r3, [r7, #15]
	status |= vl53lmz_set_ranging_frequency_hz(config, 15);
 8000a60:	210f      	movs	r1, #15
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f004 fb82 	bl	800516c <vl53lmz_set_ranging_frequency_hz>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(500);
 8000a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a76:	f000 f8b3 	bl	8000be0 <HAL_Delay>

	return status;
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <matrix_app_main>:

uint8_t matrix_app_main(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	// variables
	uint8_t status = VL53LMZ_STATUS_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t ranging = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71bb      	strb	r3, [r7, #6]

	// initialization
    status |= init_tof(&Sensor1Cfg);
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <matrix_app_main+0x20>)
 8000a94:	f7ff ffc6 	bl	8000a24 <init_tof>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	71fb      	strb	r3, [r7, #7]

    // begin app
    while (1){
 8000aa2:	e7fe      	b.n	8000aa2 <matrix_app_main+0x1e>
 8000aa4:	200000c0 	.word	0x200000c0

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad2:	f7ff ff95 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f004 fcc9 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fcf9 	bl	80004d0 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	0801b034 	.word	0x0801b034
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	20002494 	.word	0x20002494

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f94f 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe6a 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f967 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f000 f92f 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20002490 	.word	0x20002490

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20002490 	.word	0x20002490

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff feb6 	bl	8000bc8 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d008      	beq.n	8000e7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e052      	b.n	8000f22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0216 	bic.w	r2, r2, #22
 8000e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d103      	bne.n	8000eac <HAL_DMA_Abort+0x62>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0208 	bic.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ecc:	e013      	b.n	8000ef6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ece:	f7ff fe7b 	bl	8000bc8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d90c      	bls.n	8000ef6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e015      	b.n	8000f22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e4      	bne.n	8000ece <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f08:	223f      	movs	r2, #63	; 0x3f
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d004      	beq.n	8000f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e00c      	b.n	8000f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2205      	movs	r2, #5
 8000f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e159      	b.n	8001240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8148 	bne.w	800123a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80a2 	beq.w	800123a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a56      	ldr	r2, [pc, #344]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_GPIO_Init+0x2ec>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <HAL_GPIO_Init+0x2f0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x202>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_GPIO_Init+0x2f4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x1fe>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a47      	ldr	r2, [pc, #284]	; (8001268 <HAL_GPIO_Init+0x2f8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x1fa>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a46      	ldr	r2, [pc, #280]	; (800126c <HAL_GPIO_Init+0x2fc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x1f6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <HAL_GPIO_Init+0x300>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x1f2>
 800115e:	2304      	movs	r3, #4
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001162:	2307      	movs	r3, #7
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x204>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x204>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x2ec>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a24      	ldr	r2, [pc, #144]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x304>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f aea2 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f806 	bl	80012dc <HAL_GPIO_EXTI_Callback>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e12b      	b.n	800155e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fa9c 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2224      	movs	r2, #36	; 0x24
 8001324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001358:	f001 fd62 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 800135c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a81      	ldr	r2, [pc, #516]	; (8001568 <HAL_I2C_Init+0x274>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d807      	bhi.n	8001378 <HAL_I2C_Init+0x84>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4a80      	ldr	r2, [pc, #512]	; (800156c <HAL_I2C_Init+0x278>)
 800136c:	4293      	cmp	r3, r2
 800136e:	bf94      	ite	ls
 8001370:	2301      	movls	r3, #1
 8001372:	2300      	movhi	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	e006      	b.n	8001386 <HAL_I2C_Init+0x92>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a7d      	ldr	r2, [pc, #500]	; (8001570 <HAL_I2C_Init+0x27c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	bf94      	ite	ls
 8001380:	2301      	movls	r3, #1
 8001382:	2300      	movhi	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0e7      	b.n	800155e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a78      	ldr	r2, [pc, #480]	; (8001574 <HAL_I2C_Init+0x280>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a6a      	ldr	r2, [pc, #424]	; (8001568 <HAL_I2C_Init+0x274>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d802      	bhi.n	80013c8 <HAL_I2C_Init+0xd4>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3301      	adds	r3, #1
 80013c6:	e009      	b.n	80013dc <HAL_I2C_Init+0xe8>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_I2C_Init+0x284>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	3301      	adds	r3, #1
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	495c      	ldr	r1, [pc, #368]	; (8001568 <HAL_I2C_Init+0x274>)
 80013f8:	428b      	cmp	r3, r1
 80013fa:	d819      	bhi.n	8001430 <HAL_I2C_Init+0x13c>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1e59      	subs	r1, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fbb1 f3f3 	udiv	r3, r1, r3
 800140a:	1c59      	adds	r1, r3, #1
 800140c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001410:	400b      	ands	r3, r1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <HAL_I2C_Init+0x138>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1e59      	subs	r1, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fbb1 f3f3 	udiv	r3, r1, r3
 8001424:	3301      	adds	r3, #1
 8001426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142a:	e051      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 800142c:	2304      	movs	r3, #4
 800142e:	e04f      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d111      	bne.n	800145c <HAL_I2C_Init+0x168>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e58      	subs	r0, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	440b      	add	r3, r1
 8001446:	fbb0 f3f3 	udiv	r3, r0, r3
 800144a:	3301      	adds	r3, #1
 800144c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	e012      	b.n	8001482 <HAL_I2C_Init+0x18e>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1e58      	subs	r0, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	0099      	lsls	r1, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf0c      	ite	eq
 800147c:	2301      	moveq	r3, #1
 800147e:	2300      	movne	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Init+0x196>
 8001486:	2301      	movs	r3, #1
 8001488:	e022      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10e      	bne.n	80014b0 <HAL_I2C_Init+0x1bc>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e58      	subs	r0, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	440b      	add	r3, r1
 80014a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ae:	e00f      	b.n	80014d0 <HAL_I2C_Init+0x1dc>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	6809      	ldr	r1, [r1, #0]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6911      	ldr	r1, [r2, #16]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68d2      	ldr	r2, [r2, #12]
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2220      	movs	r2, #32
 800154a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	000186a0 	.word	0x000186a0
 800156c:	001e847f 	.word	0x001e847f
 8001570:	003d08ff 	.word	0x003d08ff
 8001574:	431bde83 	.word	0x431bde83
 8001578:	10624dd3 	.word	0x10624dd3

0800157c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	461a      	mov	r2, r3
 8001588:	460b      	mov	r3, r1
 800158a:	817b      	strh	r3, [r7, #10]
 800158c:	4613      	mov	r3, r2
 800158e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fb1a 	bl	8000bc8 <HAL_GetTick>
 8001594:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b20      	cmp	r3, #32
 80015a0:	f040 80e0 	bne.w	8001764 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2319      	movs	r3, #25
 80015aa:	2201      	movs	r2, #1
 80015ac:	4970      	ldr	r1, [pc, #448]	; (8001770 <HAL_I2C_Master_Transmit+0x1f4>)
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fde8 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
 80015bc:	e0d3      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_I2C_Master_Transmit+0x50>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e0cc      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1ea>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d007      	beq.n	80015f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2221      	movs	r2, #33	; 0x21
 8001606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2210      	movs	r2, #16
 800160e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	893a      	ldrh	r2, [r7, #8]
 8001622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a50      	ldr	r2, [pc, #320]	; (8001774 <HAL_I2C_Master_Transmit+0x1f8>)
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fbbc 	bl	8001db8 <I2C_MasterRequestWrite>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e08d      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001660:	e066      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	6a39      	ldr	r1, [r7, #32]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 fe62 	bl	8002330 <I2C_WaitOnTXEFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00d      	beq.n	800168e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2b04      	cmp	r3, #4
 8001678:	d107      	bne.n	800168a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06b      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d11b      	bne.n	8001704 <HAL_I2C_Master_Transmit+0x188>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d017      	beq.n	8001704 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	6a39      	ldr	r1, [r7, #32]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fe52 	bl	80023b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2b04      	cmp	r3, #4
 800171a:	d107      	bne.n	800172c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800172a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e01a      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d194      	bne.n	8001662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001764:	2302      	movs	r3, #2
  }
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	00100002 	.word	0x00100002
 8001774:	ffff0000 	.word	0xffff0000

08001778 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	460b      	mov	r3, r1
 8001786:	817b      	strh	r3, [r7, #10]
 8001788:	4613      	mov	r3, r2
 800178a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff fa1c 	bl	8000bc8 <HAL_GetTick>
 8001790:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	f040 820b 	bne.w	8001bb6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2319      	movs	r3, #25
 80017a6:	2201      	movs	r2, #1
 80017a8:	497c      	ldr	r1, [pc, #496]	; (800199c <HAL_I2C_Master_Receive+0x224>)
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fcea 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
 80017b8:	e1fe      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2C_Master_Receive+0x50>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e1f7      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d007      	beq.n	80017ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2222      	movs	r2, #34	; 0x22
 8001802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2210      	movs	r2, #16
 800180a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	893a      	ldrh	r2, [r7, #8]
 800181e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4a5c      	ldr	r2, [pc, #368]	; (80019a0 <HAL_I2C_Master_Receive+0x228>)
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fb40 	bl	8001ebc <I2C_MasterRequestRead>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1b8      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	d113      	bne.n	8001876 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	623b      	str	r3, [r7, #32]
 8001862:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e18c      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	2b01      	cmp	r3, #1
 800187c:	d11b      	bne.n	80018b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e16c      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d11b      	bne.n	80018f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	e14c      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800191c:	e138      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001922:	2b03      	cmp	r3, #3
 8001924:	f200 80f1 	bhi.w	8001b0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	2b01      	cmp	r3, #1
 800192e:	d123      	bne.n	8001978 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fd7d 	bl	8002434 <I2C_WaitOnRXNEFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e139      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001976:	e10b      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	2b02      	cmp	r3, #2
 800197e:	d14e      	bne.n	8001a1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	2200      	movs	r2, #0
 8001988:	4906      	ldr	r1, [pc, #24]	; (80019a4 <HAL_I2C_Master_Receive+0x22c>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fbfa 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e10e      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
 800199a:	bf00      	nop
 800199c:	00100002 	.word	0x00100002
 80019a0:	ffff0000 	.word	0xffff0000
 80019a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a1c:	e0b8      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	2200      	movs	r2, #0
 8001a26:	4966      	ldr	r1, [pc, #408]	; (8001bc0 <HAL_I2C_Master_Receive+0x448>)
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fbab 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0bf      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	2200      	movs	r2, #0
 8001a82:	494f      	ldr	r1, [pc, #316]	; (8001bc0 <HAL_I2C_Master_Receive+0x448>)
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 fb7d 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e091      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b08:	e042      	b.n	8001b90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fc90 	bl	8002434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e04c      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d118      	bne.n	8001b90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f47f aec2 	bne.w	800191e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	00010004 	.word	0x00010004

08001bc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	817b      	strh	r3, [r7, #10]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	813b      	strh	r3, [r7, #8]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bde:	f7fe fff3 	bl	8000bc8 <HAL_GetTick>
 8001be2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	f040 80d9 	bne.w	8001da4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2319      	movs	r3, #25
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	496d      	ldr	r1, [pc, #436]	; (8001db0 <HAL_I2C_Mem_Write+0x1ec>)
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fac1 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0cc      	b.n	8001da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_Mem_Write+0x56>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e0c5      	b.n	8001da6 <HAL_I2C_Mem_Write+0x1e2>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d007      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2221      	movs	r2, #33	; 0x21
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a3a      	ldr	r2, [r7, #32]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_I2C_Mem_Write+0x1f0>)
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c82:	88f8      	ldrh	r0, [r7, #6]
 8001c84:	893a      	ldrh	r2, [r7, #8]
 8001c86:	8979      	ldrh	r1, [r7, #10]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4603      	mov	r3, r0
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f9e0 	bl	8002058 <I2C_RequestMemoryWrite>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d052      	beq.n	8001d44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e081      	b.n	8001da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fb42 	bl	8002330 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d11b      	bne.n	8001d44 <HAL_I2C_Mem_Write+0x180>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d017      	beq.n	8001d44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1aa      	bne.n	8001ca2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fb2e 	bl	80023b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00d      	beq.n	8001d78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d107      	bne.n	8001d74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e016      	b.n	8001da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00100002 	.word	0x00100002
 8001db4:	ffff0000 	.word	0xffff0000

08001db8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d006      	beq.n	8001de2 <I2C_MasterRequestWrite+0x2a>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d003      	beq.n	8001de2 <I2C_MasterRequestWrite+0x2a>
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de0:	d108      	bne.n	8001df4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e00b      	b.n	8001e0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	2b12      	cmp	r3, #18
 8001dfa:	d107      	bne.n	8001e0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f9b3 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e32:	d103      	bne.n	8001e3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e035      	b.n	8001eac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e48:	d108      	bne.n	8001e5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e4a:	897b      	ldrh	r3, [r7, #10]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e58:	611a      	str	r2, [r3, #16]
 8001e5a:	e01b      	b.n	8001e94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	11db      	asrs	r3, r3, #7
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 0306 	and.w	r3, r3, #6
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f063 030f 	orn	r3, r3, #15
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <I2C_MasterRequestWrite+0xfc>)
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f9d9 	bl	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e010      	b.n	8001eac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e8a:	897b      	ldrh	r3, [r7, #10]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <I2C_MasterRequestWrite+0x100>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f9c9 	bl	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	00010008 	.word	0x00010008
 8001eb8:	00010002 	.word	0x00010002

08001ebc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d006      	beq.n	8001ef6 <I2C_MasterRequestRead+0x3a>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d003      	beq.n	8001ef6 <I2C_MasterRequestRead+0x3a>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ef4:	d108      	bne.n	8001f08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e00b      	b.n	8001f20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	2b11      	cmp	r3, #17
 8001f0e:	d107      	bne.n	8001f20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f929 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f46:	d103      	bne.n	8001f50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e079      	b.n	8002048 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f5c:	d108      	bne.n	8001f70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	e05f      	b.n	8002030 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f70:	897b      	ldrh	r3, [r7, #10]
 8001f72:	11db      	asrs	r3, r3, #7
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f003 0306 	and.w	r3, r3, #6
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f063 030f 	orn	r3, r3, #15
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4930      	ldr	r1, [pc, #192]	; (8002050 <I2C_MasterRequestRead+0x194>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f94f 	bl	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e054      	b.n	8002048 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4929      	ldr	r1, [pc, #164]	; (8002054 <I2C_MasterRequestRead+0x198>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f93f 	bl	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e044      	b.n	8002048 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f8c7 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800200a:	d103      	bne.n	8002014 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e017      	b.n	8002048 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002018:	897b      	ldrh	r3, [r7, #10]
 800201a:	11db      	asrs	r3, r3, #7
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f003 0306 	and.w	r3, r3, #6
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f063 030e 	orn	r3, r3, #14
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4907      	ldr	r1, [pc, #28]	; (8002054 <I2C_MasterRequestRead+0x198>)
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f8fb 	bl	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	00010008 	.word	0x00010008
 8002054:	00010002 	.word	0x00010002

08002058 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	4608      	mov	r0, r1
 8002062:	4611      	mov	r1, r2
 8002064:	461a      	mov	r2, r3
 8002066:	4603      	mov	r3, r0
 8002068:	817b      	strh	r3, [r7, #10]
 800206a:	460b      	mov	r3, r1
 800206c:	813b      	strh	r3, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002080:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	2200      	movs	r2, #0
 800208a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f878 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a8:	d103      	bne.n	80020b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e05f      	b.n	8002176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	6a3a      	ldr	r2, [r7, #32]
 80020ca:	492d      	ldr	r1, [pc, #180]	; (8002180 <I2C_RequestMemoryWrite+0x128>)
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f8b0 	bl	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e04c      	b.n	8002176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	6a39      	ldr	r1, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f91a 	bl	8002330 <I2C_WaitOnTXEFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00d      	beq.n	800211e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b04      	cmp	r3, #4
 8002108:	d107      	bne.n	800211a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002118:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e02b      	b.n	8002176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002124:	893b      	ldrh	r3, [r7, #8]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e021      	b.n	8002174 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f8f4 	bl	8002330 <I2C_WaitOnTXEFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b04      	cmp	r3, #4
 8002154:	d107      	bne.n	8002166 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002164:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e005      	b.n	8002176 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800216a:	893b      	ldrh	r3, [r7, #8]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	00010002 	.word	0x00010002

08002184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002194:	e025      	b.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219c:	d021      	beq.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219e:	f7fe fd13 	bl	8000bc8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d116      	bne.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e023      	b.n	800222a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10d      	bne.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4013      	ands	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	e00c      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4013      	ands	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	429a      	cmp	r2, r3
 8002226:	d0b6      	beq.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002240:	e051      	b.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002250:	d123      	bne.n	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002260:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800226a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0204 	orr.w	r2, r3, #4
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e046      	b.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a0:	d021      	beq.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7fe fc91 	bl	8000bc8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d116      	bne.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0220 	orr.w	r2, r3, #32
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e020      	b.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10c      	bne.n	800230a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e00b      	b.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d18d      	bne.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233c:	e02d      	b.n	800239a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f8ce 	bl	80024e0 <I2C_IsAcknowledgeFailed>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e02d      	b.n	80023aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002354:	d021      	beq.n	800239a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002356:	f7fe fc37 	bl	8000bc8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d302      	bcc.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d116      	bne.n	800239a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0220 	orr.w	r2, r3, #32
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e007      	b.n	80023aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d1ca      	bne.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023be:	e02d      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f88d 	bl	80024e0 <I2C_IsAcknowledgeFailed>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e02d      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d6:	d021      	beq.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d8:	f7fe fbf6 	bl	8000bc8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d302      	bcc.n	80023ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d116      	bne.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e007      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b04      	cmp	r3, #4
 8002428:	d1ca      	bne.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002440:	e042      	b.n	80024c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d119      	bne.n	8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0210 	mvn.w	r2, #16
 8002458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e029      	b.n	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7fe fba0 	bl	8000bc8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d1b5      	bne.n	8002442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d11b      	bne.n	8002530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e267      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d075      	beq.n	800264a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800255e:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d00c      	beq.n	8002584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d112      	bne.n	800259c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002582:	d10b      	bne.n	800259c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	4b7e      	ldr	r3, [pc, #504]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d05b      	beq.n	8002648 <HAL_RCC_OscConfig+0x108>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d157      	bne.n	8002648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e242      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x74>
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a75      	ldr	r2, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0xb0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x98>
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6f      	ldr	r2, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xb0>
 80025d8:	4b69      	ldr	r3, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a68      	ldr	r2, [pc, #416]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b66      	ldr	r3, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a65      	ldr	r2, [pc, #404]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fae6 	bl	8000bc8 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fae2 	bl	8000bc8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e207      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0xc0>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fad2 	bl	8000bc8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe face 	bl	8000bc8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1f3      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0xe8>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d063      	beq.n	800271e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266a:	2b08      	cmp	r3, #8
 800266c:	d11c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b44      	ldr	r3, [pc, #272]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x152>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1c7      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4937      	ldr	r1, [pc, #220]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	e03a      	b.n	800271e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_RCC_OscConfig+0x244>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fa87 	bl	8000bc8 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026be:	f7fe fa83 	bl	8000bc8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1a8      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4925      	ldr	r1, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
 80026f0:	e015      	b.n	800271e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x244>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fa66 	bl	8000bc8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002700:	f7fe fa62 	bl	8000bc8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e187      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d036      	beq.n	8002798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x248>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fa46 	bl	8000bc8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002740:	f7fe fa42 	bl	8000bc8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e167      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x240>)
 8002754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x200>
 800275e:	e01b      	b.n	8002798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_OscConfig+0x248>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe fa2f 	bl	8000bc8 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e00e      	b.n	800278c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fa2b 	bl	8000bc8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d907      	bls.n	800278c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e150      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
 8002780:	40023800 	.word	0x40023800
 8002784:	42470000 	.word	0x42470000
 8002788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ea      	bne.n	800276e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8097 	beq.w	80028d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027aa:	4b81      	ldr	r3, [pc, #516]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b7d      	ldr	r3, [pc, #500]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a7c      	ldr	r2, [pc, #496]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b7a      	ldr	r3, [pc, #488]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b77      	ldr	r3, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x474>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e2:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a73      	ldr	r2, [pc, #460]	; (80029b4 <HAL_RCC_OscConfig+0x474>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7fe f9eb 	bl	8000bc8 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe f9e7 	bl	8000bc8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e10c      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <HAL_RCC_OscConfig+0x474>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x2ea>
 800281c:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a63      	ldr	r2, [pc, #396]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e01c      	b.n	8002864 <HAL_RCC_OscConfig+0x324>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b05      	cmp	r3, #5
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x30c>
 8002832:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a5e      	ldr	r2, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a5b      	ldr	r2, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0x324>
 800284c:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0304 	bic.w	r3, r3, #4
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe f9ac 	bl	8000bc8 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	e00a      	b.n	800288a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f7fe f9a8 	bl	8000bc8 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0cb      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ee      	beq.n	8002874 <HAL_RCC_OscConfig+0x334>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe f996 	bl	8000bc8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe f992 	bl	8000bc8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0b5      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ee      	bne.n	80028a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a38      	ldr	r2, [pc, #224]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a1 	beq.w	8002a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028de:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d05c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d141      	bne.n	8002976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_OscConfig+0x478>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe f966 	bl	8000bc8 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe f962 	bl	8000bc8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e087      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	3b01      	subs	r3, #1
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	491b      	ldr	r1, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x478>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fe f93b 	bl	8000bc8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe f937 	bl	8000bc8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e05c      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x416>
 8002974:	e054      	b.n	8002a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x478>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe f924 	bl	8000bc8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe f920 	bl	8000bc8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e045      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x470>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x444>
 80029a2:	e03d      	b.n	8002a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e038      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCC_OscConfig+0x4ec>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d028      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d121      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d11a      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d111      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	3b01      	subs	r3, #1
 8002a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0cc      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d90c      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b8      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a84:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	494d      	ldr	r1, [pc, #308]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d044      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d119      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b3f      	ldr	r3, [pc, #252]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e067      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4934      	ldr	r1, [pc, #208]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b20:	f7fe f852 	bl	8000bc8 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe f84e 	bl	8000bc8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e04f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20c      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e032      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bb6:	f000 f821 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd ffb2 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08005544 	.word	0x08005544
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c00:	b094      	sub	sp, #80	; 0x50
 8002c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	647b      	str	r3, [r7, #68]	; 0x44
 8002c08:	2300      	movs	r3, #0
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c14:	4b79      	ldr	r3, [pc, #484]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d00d      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x40>
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	f200 80e1 	bhi.w	8002de8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c2e:	e0db      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b73      	ldr	r3, [pc, #460]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c34:	e0db      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c36:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c3a:	e0d8      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c46:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c52:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	099b      	lsrs	r3, r3, #6
 8002c58:	2200      	movs	r2, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
 8002c66:	2300      	movs	r3, #0
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c6e:	4622      	mov	r2, r4
 8002c70:	462b      	mov	r3, r5
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	0159      	lsls	r1, r3, #5
 8002c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c80:	0150      	lsls	r0, r2, #5
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4621      	mov	r1, r4
 8002c88:	1a51      	subs	r1, r2, r1
 8002c8a:	6139      	str	r1, [r7, #16]
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	018b      	lsls	r3, r1, #6
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002caa:	4651      	mov	r1, sl
 8002cac:	018a      	lsls	r2, r1, #6
 8002cae:	4651      	mov	r1, sl
 8002cb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cce:	4690      	mov	r8, r2
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	eb18 0303 	adds.w	r3, r8, r3
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	462b      	mov	r3, r5
 8002cdc:	eb49 0303 	adc.w	r3, r9, r3
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cee:	4629      	mov	r1, r5
 8002cf0:	024b      	lsls	r3, r1, #9
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	024a      	lsls	r2, r1, #9
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d02:	2200      	movs	r2, #0
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d0c:	f7fd fa62 	bl	80001d4 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4613      	mov	r3, r2
 8002d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d18:	e058      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	4611      	mov	r1, r2
 8002d26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	f04f 0000 	mov.w	r0, #0
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	0159      	lsls	r1, r3, #5
 8002d42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d46:	0150      	lsls	r0, r2, #5
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d52:	4649      	mov	r1, r9
 8002d54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d70:	eb63 050b 	sbc.w	r5, r3, fp
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	00eb      	lsls	r3, r5, #3
 8002d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d82:	00e2      	lsls	r2, r4, #3
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	18e3      	adds	r3, r4, r3
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	464b      	mov	r3, r9
 8002d90:	eb45 0303 	adc.w	r3, r5, r3
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002da2:	4629      	mov	r1, r5
 8002da4:	028b      	lsls	r3, r1, #10
 8002da6:	4621      	mov	r1, r4
 8002da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dac:	4621      	mov	r1, r4
 8002dae:	028a      	lsls	r2, r1, #10
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	2200      	movs	r2, #0
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	61fa      	str	r2, [r7, #28]
 8002dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc0:	f7fd fa08 	bl	80001d4 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de6:	e002      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3750      	adds	r7, #80	; 0x50
 8002df4:	46bd      	mov	sp, r7
 8002df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	00f42400 	.word	0x00f42400
 8002e04:	007a1200 	.word	0x007a1200

08002e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e24:	f7ff fff0 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0a9b      	lsrs	r3, r3, #10
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4903      	ldr	r1, [pc, #12]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08005554 	.word	0x08005554

08002e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e4c:	f7ff ffdc 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0b5b      	lsrs	r3, r3, #13
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08005554 	.word	0x08005554

08002e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e03f      	b.n	8002f02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fd26 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fc7b 	bl	80037b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b0ba      	sub	sp, #232	; 0xe8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_UART_IRQHandler+0x66>
 8002f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fb65 	bl	800363a <UART_Receive_IT>
      return;
 8002f70:	e256      	b.n	8003420 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80de 	beq.w	8003138 <HAL_UART_IRQHandler+0x22c>
 8002f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80d1 	beq.w	8003138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_UART_IRQHandler+0xae>
 8002fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_UART_IRQHandler+0xd2>
 8002fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_UART_IRQHandler+0xf6>
 8002fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0204 	orr.w	r2, r3, #4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d011      	beq.n	8003032 <HAL_UART_IRQHandler+0x126>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0208 	orr.w	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 81ed 	beq.w	8003416 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_UART_IRQHandler+0x14e>
 8003048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 faf0 	bl	800363a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <HAL_UART_IRQHandler+0x17a>
 800307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04f      	beq.n	8003126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9f8 	bl	800347c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d141      	bne.n	800311e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3314      	adds	r3, #20
 80030c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1d9      	bne.n	800309a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	4a7d      	ldr	r2, [pc, #500]	; (80032e8 <HAL_UART_IRQHandler+0x3dc>)
 80030f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd ff15 	bl	8000f2a <HAL_DMA_Abort_IT>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003110:	4610      	mov	r0, r2
 8003112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	e00e      	b.n	8003134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f99a 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	e00a      	b.n	8003134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f996 	bl	8003450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	e006      	b.n	8003134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f992 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003132:	e170      	b.n	8003416 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	bf00      	nop
    return;
 8003136:	e16e      	b.n	8003416 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 814a 	bne.w	80033d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8143 	beq.w	80033d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 813c 	beq.w	80033d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	f040 80b4 	bne.w	80032ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8140 	beq.w	800341a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800319e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031a2:	429a      	cmp	r2, r3
 80031a4:	f080 8139 	bcs.w	800341a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ba:	f000 8088 	beq.w	80032ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	330c      	adds	r3, #12
 80031e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1d9      	bne.n	80031be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3314      	adds	r3, #20
 8003210:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800321a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3314      	adds	r3, #20
 800322a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800322e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003232:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003236:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e1      	bne.n	800320a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3314      	adds	r3, #20
 800324c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800326a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800326c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e3      	bne.n	8003246 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800329c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329e:	f023 0310 	bic.w	r3, r3, #16
 80032a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80032b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e3      	bne.n	800328c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fdbe 	bl	8000e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8c0 	bl	8003464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032e4:	e099      	b.n	800341a <HAL_UART_IRQHandler+0x50e>
 80032e6:	bf00      	nop
 80032e8:	08003543 	.word	0x08003543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 808b 	beq.w	800341e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8086 	beq.w	800341e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003336:	647a      	str	r2, [r7, #68]	; 0x44
 8003338:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800333c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e3      	bne.n	8003312 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	623b      	str	r3, [r7, #32]
   return(result);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800336e:	633a      	str	r2, [r7, #48]	; 0x30
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e3      	bne.n	800334a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	60fb      	str	r3, [r7, #12]
   return(result);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0310 	bic.w	r3, r3, #16
 80033a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033b4:	61fa      	str	r2, [r7, #28]
 80033b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	617b      	str	r3, [r7, #20]
   return(result);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e3      	bne.n	8003390 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f848 	bl	8003464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d4:	e023      	b.n	800341e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_UART_IRQHandler+0x4ea>
 80033e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8bb 	bl	800356a <UART_Transmit_IT>
    return;
 80033f4:	e014      	b.n	8003420 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <HAL_UART_IRQHandler+0x514>
 8003402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8fb 	bl	800360a <UART_EndTransmit_IT>
    return;
 8003414:	e004      	b.n	8003420 <HAL_UART_IRQHandler+0x514>
    return;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <HAL_UART_IRQHandler+0x514>
      return;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_UART_IRQHandler+0x514>
      return;
 800341e:	bf00      	nop
  }
}
 8003420:	37e8      	adds	r7, #232	; 0xe8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b095      	sub	sp, #84	; 0x54
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	330c      	adds	r3, #12
 80034a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034a4:	643a      	str	r2, [r7, #64]	; 0x40
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e5      	bne.n	8003484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3314      	adds	r3, #20
 80034d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d119      	bne.n	8003528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	60bb      	str	r3, [r7, #8]
   return(result);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f023 0310 	bic.w	r3, r3, #16
 800350a:	647b      	str	r3, [r7, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003514:	61ba      	str	r2, [r7, #24]
 8003516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	613b      	str	r3, [r7, #16]
   return(result);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003536:	bf00      	nop
 8003538:	3754      	adds	r7, #84	; 0x54
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ff77 	bl	8003450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b21      	cmp	r3, #33	; 0x21
 800357c:	d13e      	bne.n	80035fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d114      	bne.n	80035b2 <UART_Transmit_IT+0x48>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	621a      	str	r2, [r3, #32]
 80035b0:	e008      	b.n	80035c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	1c59      	adds	r1, r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6211      	str	r1, [r2, #32]
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4619      	mov	r1, r3
 80035d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fefc 	bl	8003428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b08c      	sub	sp, #48	; 0x30
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b22      	cmp	r3, #34	; 0x22
 800364c:	f040 80ab 	bne.w	80037a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d117      	bne.n	800368a <UART_Receive_IT+0x50>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003678:	b29a      	uxth	r2, r3
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
 8003688:	e026      	b.n	80036d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369c:	d007      	beq.n	80036ae <UART_Receive_IT+0x74>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <UART_Receive_IT+0x82>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e008      	b.n	80036ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4619      	mov	r1, r3
 80036e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d15a      	bne.n	80037a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0220 	bic.w	r2, r2, #32
 80036fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800370a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	2b01      	cmp	r3, #1
 800372a:	d135      	bne.n	8003798 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	613b      	str	r3, [r7, #16]
   return(result);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f023 0310 	bic.w	r3, r3, #16
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	623a      	str	r2, [r7, #32]
 8003754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	69f9      	ldr	r1, [r7, #28]
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e5      	bne.n	8003732 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b10      	cmp	r3, #16
 8003772:	d10a      	bne.n	800378a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fe67 	bl	8003464 <HAL_UARTEx_RxEventCallback>
 8003796:	e002      	b.n	800379e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fe4f 	bl	800343c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e002      	b.n	80037a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3730      	adds	r7, #48	; 0x30
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b4:	b0c0      	sub	sp, #256	; 0x100
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	68d9      	ldr	r1, [r3, #12]
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	ea40 0301 	orr.w	r3, r0, r1
 80037d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003808:	f021 010c 	bic.w	r1, r1, #12
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003816:	430b      	orrs	r3, r1
 8003818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382a:	6999      	ldr	r1, [r3, #24]
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	ea40 0301 	orr.w	r3, r0, r1
 8003836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b8f      	ldr	r3, [pc, #572]	; (8003a7c <UART_SetConfig+0x2cc>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d005      	beq.n	8003850 <UART_SetConfig+0xa0>
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <UART_SetConfig+0x2d0>)
 800384c:	429a      	cmp	r2, r3
 800384e:	d104      	bne.n	800385a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003850:	f7ff fafa 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 8003854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003858:	e003      	b.n	8003862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800385a:	f7ff fae1 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 800385e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386c:	f040 810c 	bne.w	8003a88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800387a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800387e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	1891      	adds	r1, r2, r2
 8003888:	65b9      	str	r1, [r7, #88]	; 0x58
 800388a:	415b      	adcs	r3, r3
 800388c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003892:	4621      	mov	r1, r4
 8003894:	eb12 0801 	adds.w	r8, r2, r1
 8003898:	4629      	mov	r1, r5
 800389a:	eb43 0901 	adc.w	r9, r3, r1
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038b2:	4690      	mov	r8, r2
 80038b4:	4699      	mov	r9, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	eb18 0303 	adds.w	r3, r8, r3
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038c0:	462b      	mov	r3, r5
 80038c2:	eb49 0303 	adc.w	r3, r9, r3
 80038c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038de:	460b      	mov	r3, r1
 80038e0:	18db      	adds	r3, r3, r3
 80038e2:	653b      	str	r3, [r7, #80]	; 0x50
 80038e4:	4613      	mov	r3, r2
 80038e6:	eb42 0303 	adc.w	r3, r2, r3
 80038ea:	657b      	str	r3, [r7, #84]	; 0x54
 80038ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038f4:	f7fc fc6e 	bl	80001d4 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <UART_SetConfig+0x2d4>)
 80038fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	011c      	lsls	r4, r3, #4
 8003906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003920:	415b      	adcs	r3, r3
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003928:	4641      	mov	r1, r8
 800392a:	eb12 0a01 	adds.w	sl, r2, r1
 800392e:	4649      	mov	r1, r9
 8003930:	eb43 0b01 	adc.w	fp, r3, r1
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003948:	4692      	mov	sl, r2
 800394a:	469b      	mov	fp, r3
 800394c:	4643      	mov	r3, r8
 800394e:	eb1a 0303 	adds.w	r3, sl, r3
 8003952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003956:	464b      	mov	r3, r9
 8003958:	eb4b 0303 	adc.w	r3, fp, r3
 800395c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800396c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003974:	460b      	mov	r3, r1
 8003976:	18db      	adds	r3, r3, r3
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
 800397a:	4613      	mov	r3, r2
 800397c:	eb42 0303 	adc.w	r3, r2, r3
 8003980:	647b      	str	r3, [r7, #68]	; 0x44
 8003982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800398a:	f7fc fc23 	bl	80001d4 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4611      	mov	r1, r2
 8003994:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <UART_SetConfig+0x2d4>)
 8003996:	fba3 2301 	umull	r2, r3, r3, r1
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2264      	movs	r2, #100	; 0x64
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	1acb      	subs	r3, r1, r3
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <UART_SetConfig+0x2d4>)
 80039ac:	fba3 2302 	umull	r2, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b8:	441c      	add	r4, r3
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d4:	415b      	adcs	r3, r3
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6339      	str	r1, [r7, #48]	; 0x30
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a10:	464b      	mov	r3, r9
 8003a12:	460a      	mov	r2, r1
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a30:	460b      	mov	r3, r1
 8003a32:	18db      	adds	r3, r3, r3
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a36:	4613      	mov	r3, r2
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a46:	f7fc fbc5 	bl	80001d4 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <UART_SetConfig+0x2d4>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <UART_SetConfig+0x2d4>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 0207 	and.w	r2, r3, #7
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4422      	add	r2, r4
 8003a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a78:	e106      	b.n	8003c88 <UART_SetConfig+0x4d8>
 8003a7a:	bf00      	nop
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40011400 	.word	0x40011400
 8003a84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a9a:	4642      	mov	r2, r8
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	1891      	adds	r1, r2, r2
 8003aa0:	6239      	str	r1, [r7, #32]
 8003aa2:	415b      	adcs	r3, r3
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aaa:	4641      	mov	r1, r8
 8003aac:	1854      	adds	r4, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb43 0501 	adc.w	r5, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	00eb      	lsls	r3, r5, #3
 8003abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac2:	00e2      	lsls	r2, r4, #3
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	461d      	mov	r5, r3
 8003ac8:	4643      	mov	r3, r8
 8003aca:	18e3      	adds	r3, r4, r3
 8003acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	eb45 0303 	adc.w	r3, r5, r3
 8003ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003af6:	4629      	mov	r1, r5
 8003af8:	008b      	lsls	r3, r1, #2
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b00:	4621      	mov	r1, r4
 8003b02:	008a      	lsls	r2, r1, #2
 8003b04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b08:	f7fc fb64 	bl	80001d4 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4b60      	ldr	r3, [pc, #384]	; (8003c94 <UART_SetConfig+0x4e4>)
 8003b12:	fba3 2302 	umull	r2, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	011c      	lsls	r4, r3, #4
 8003b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	61b9      	str	r1, [r7, #24]
 8003b34:	415b      	adcs	r3, r3
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	1851      	adds	r1, r2, r1
 8003b40:	6139      	str	r1, [r7, #16]
 8003b42:	4649      	mov	r1, r9
 8003b44:	414b      	adcs	r3, r1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b54:	4659      	mov	r1, fp
 8003b56:	00cb      	lsls	r3, r1, #3
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5e:	4651      	mov	r1, sl
 8003b60:	00ca      	lsls	r2, r1, #3
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b70:	464b      	mov	r3, r9
 8003b72:	460a      	mov	r2, r1
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b94:	4649      	mov	r1, r9
 8003b96:	008b      	lsls	r3, r1, #2
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	008a      	lsls	r2, r1, #2
 8003ba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ba6:	f7fc fb15 	bl	80001d4 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <UART_SetConfig+0x4e4>)
 8003bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2264      	movs	r2, #100	; 0x64
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	1acb      	subs	r3, r1, r3
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	3332      	adds	r3, #50	; 0x32
 8003bc4:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <UART_SetConfig+0x4e4>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd0:	441c      	add	r4, r3
 8003bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	673b      	str	r3, [r7, #112]	; 0x70
 8003bda:	677a      	str	r2, [r7, #116]	; 0x74
 8003bdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	1891      	adds	r1, r2, r2
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	415b      	adcs	r3, r3
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	1851      	adds	r1, r2, r1
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	414b      	adcs	r3, r1
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c08:	4659      	mov	r1, fp
 8003c0a:	00cb      	lsls	r3, r1, #3
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c12:	4651      	mov	r1, sl
 8003c14:	00ca      	lsls	r2, r1, #3
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c22:	464b      	mov	r3, r9
 8003c24:	460a      	mov	r2, r1
 8003c26:	eb42 0303 	adc.w	r3, r2, r3
 8003c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	663b      	str	r3, [r7, #96]	; 0x60
 8003c36:	667a      	str	r2, [r7, #100]	; 0x64
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c44:	4649      	mov	r1, r9
 8003c46:	008b      	lsls	r3, r1, #2
 8003c48:	4641      	mov	r1, r8
 8003c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4e:	4641      	mov	r1, r8
 8003c50:	008a      	lsls	r2, r1, #2
 8003c52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c56:	f7fc fabd 	bl	80001d4 <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <UART_SetConfig+0x4e4>)
 8003c60:	fba3 1302 	umull	r1, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	2164      	movs	r1, #100	; 0x64
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	3332      	adds	r3, #50	; 0x32
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <UART_SetConfig+0x4e4>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	f003 020f 	and.w	r2, r3, #15
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4422      	add	r2, r4
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c94:	51eb851f 	.word	0x51eb851f

08003c98 <RdByte>:

uint8_t RdByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003caa:	897b      	ldrh	r3, [r7, #10]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8003cb4:	897b      	ldrh	r3, [r7, #10]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8819      	ldrh	r1, [r3, #0]
 8003cbe:	f107 0214 	add.w	r2, r7, #20
 8003cc2:	2364      	movs	r3, #100	; 0x64
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	480c      	ldr	r0, [pc, #48]	; (8003cfc <RdByte+0x64>)
 8003cca:	f7fd fc57 	bl	800157c <HAL_I2C_Master_Transmit>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8819      	ldrh	r1, [r3, #0]
 8003cd6:	f107 0210 	add.w	r2, r7, #16
 8003cda:	2364      	movs	r3, #100	; 0x64
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4806      	ldr	r0, [pc, #24]	; (8003cfc <RdByte+0x64>)
 8003ce2:	f7fd fd49 	bl	8001778 <HAL_I2C_Master_Receive>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8003cea:	7c3a      	ldrb	r2, [r7, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");
	return status;
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000028 	.word	0x20000028

08003d00 <WrByte>:

uint8_t WrByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 3, 100);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8819      	ldrh	r1, [r3, #0]
 8003d2c:	f107 020c 	add.w	r2, r7, #12
 8003d30:	2364      	movs	r3, #100	; 0x64
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2303      	movs	r3, #3
 8003d36:	4805      	ldr	r0, [pc, #20]	; (8003d4c <WrByte+0x4c>)
 8003d38:	f7fd fc20 	bl	800157c <HAL_I2C_Master_Transmit>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
	//uart_printf("write 1 byte\n");
	return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000028 	.word	0x20000028

08003d50 <WrMulti>:
uint8_t WrMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af04      	add	r7, sp, #16
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8819      	ldrh	r1, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	897a      	ldrh	r2, [r7, #10]
 8003d6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d6e:	9002      	str	r0, [sp, #8]
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2310      	movs	r3, #16
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <WrMulti+0x3c>)
 8003d7a:	f7fd ff23 	bl	8001bc4 <HAL_I2C_Mem_Write>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000028 	.word	0x20000028

08003d90 <RdMulti>:
uint8_t RdMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8003da0:	897b      	ldrh	r3, [r7, #10]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 10);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8819      	ldrh	r1, [r3, #0]
 8003db4:	f107 0214 	add.w	r2, r7, #20
 8003db8:	230a      	movs	r3, #10
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	480d      	ldr	r0, [pc, #52]	; (8003df4 <RdMulti+0x64>)
 8003dc0:	f7fd fbdc 	bl	800157c <HAL_I2C_Master_Transmit>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 400);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8819      	ldrh	r1, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003dd4:	9200      	str	r2, [sp, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4806      	ldr	r0, [pc, #24]	; (8003df4 <RdMulti+0x64>)
 8003dda:	f7fd fccd 	bl	8001778 <HAL_I2C_Master_Receive>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	4413      	add	r3, r2
 8003de6:	75fb      	strb	r3, [r7, #23]
    //uart_printf("read %d bytes\n",size);

	return status;
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000028 	.word	0x20000028

08003df8 <SwapBuffer>:


void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e021      	b.n	8003e4e <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	440b      	add	r3, r1
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3302      	adds	r3, #2
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	440b      	add	r3, r1
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	3203      	adds	r2, #3
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	440a      	add	r2, r1
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	4313      	orrs	r3, r2
		tmp = (
 8003e3c:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d3d9      	bcc.n	8003e0a <SwapBuffer+0x12>
	}
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <WaitMs>:

uint8_t WaitMs(
		VL53LMZ_Platform *p_platform,
		uint32_t TimeMs)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8003e6e:	6838      	ldr	r0, [r7, #0]
 8003e70:	f7fc feb6 	bl	8000be0 <HAL_Delay>
	return 0;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_vl53lmz_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	70fb      	strb	r3, [r7, #3]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70bb      	strb	r3, [r7, #2]
 8003e94:	4613      	mov	r3, r2
 8003e96:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8003ea0:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), address,
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	8839      	ldrh	r1, [r7, #0]
 8003eac:	f7ff ff70 	bl	8003d90 <RdMulti>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	210a      	movs	r1, #10
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ffd0 	bl	8003e64 <WaitMs>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	2bc7      	cmp	r3, #199	; 0xc7
 8003ed2:	d904      	bls.n	8003ede <_vl53lmz_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53LMZ_STATUS_TIMEOUT_ERROR;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
			break;
 8003edc:	e01a      	b.n	8003f14 <_vl53lmz_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d909      	bls.n	8003ef8 <_vl53lmz_poll_for_answer+0x7a>
						 && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8003eea:	2b7e      	cmp	r3, #126	; 0x7e
 8003eec:	d904      	bls.n	8003ef8 <_vl53lmz_poll_for_answer+0x7a>
		{
			status |= VL53LMZ_MCU_ERROR;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ef4:	73fb      	strb	r3, [r7, #15]
			break;
 8003ef6:	e00d      	b.n	8003f14 <_vl53lmz_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	3301      	adds	r3, #1
 8003efc:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8003efe:	78bb      	ldrb	r3, [r7, #2]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8003f08:	7e3b      	ldrb	r3, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	7f3a      	ldrb	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1c5      	bne.n	8003ea0 <_vl53lmz_poll_for_answer+0x22>

	return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_vl53lmz_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53lmz_poll_for_mcu_boot(
			  VL53LMZ_Configuration		 *p_dev)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53LMZ_STATUS_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f107 020b 	add.w	r2, r7, #11
 8003f34:	2106      	movs	r1, #6
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff feae 	bl	8003c98 <RdByte>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da10      	bge.n	8003f70 <_vl53lmz_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f107 020a 	add.w	r2, r7, #10
 8003f54:	2107      	movs	r1, #7
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fe9e 	bl	8003c98 <RdByte>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	73fb      	strb	r3, [r7, #15]
			if(go2_status1 & (uint8_t)0x01)
 8003f66:	7abb      	ldrb	r3, [r7, #10]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <_vl53lmz_poll_for_mcu_boot+0x76>
			{
				status |= VL53LMZ_STATUS_OK;
				break;
			}
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff75 	bl	8003e64 <WaitMs>
		timeout++;
 8003f7a:	89bb      	ldrh	r3, [r7, #12]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8003f80:	7afb      	ldrb	r3, [r7, #11]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <_vl53lmz_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
 8003f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f90:	d3cd      	bcc.n	8003f2e <_vl53lmz_poll_for_mcu_boot+0x10>
 8003f92:	e002      	b.n	8003f9a <_vl53lmz_poll_for_mcu_boot+0x7c>
				break;
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <_vl53lmz_poll_for_mcu_boot+0x7c>
			break;
 8003f98:	bf00      	nop

   return status;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_vl53lmz_send_offset_data>:
 */

static uint8_t _vl53lmz_send_offset_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t						resolution)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0ea      	sub	sp, #424	; 0x1a8
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003fae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fb2:	6018      	str	r0, [r3, #0]
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003fba:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8003fc6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003fca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003fce:	4ad9      	ldr	r2, [pc, #868]	; (8004334 <_vl53lmz_send_offset_data+0x390>)
 8003fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8003fd8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003fdc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fe0:	4ad5      	ldr	r2, [pc, #852]	; (8004338 <_vl53lmz_send_offset_data+0x394>)
 8003fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fe6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8003fea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003fee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f203 5004 	addw	r0, r3, #1284	; 0x504
			   p_dev->offset_data, VL53LMZ_OFFSET_BUFFER_SIZE);
 8003ff8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003ffc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
	(void)memcpy(p_dev->temp_buffer,
 8004004:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004008:	4619      	mov	r1, r3
 800400a:	f001 fa53 	bl	80054b4 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4){
 800400e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004012:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b10      	cmp	r3, #16
 800401a:	f040 8122 	bne.w	8004262 <_vl53lmz_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800401e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004022:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f203 5214 	addw	r2, r3, #1300	; 0x514
 800402c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004030:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004034:	cb03      	ldmia	r3!, {r0, r1}
 8004036:	6010      	str	r0, [r2, #0]
 8004038:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 800403a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800403e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8004048:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fed3 	bl	8003df8 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8004052:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004056:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
 8004060:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fa23 	bl	80054b4 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800406e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004072:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f203 6144 	addw	r1, r3, #1604	; 0x644
 800407c:	f107 0318 	add.w	r3, r7, #24
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fa16 	bl	80054b4 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8004088:	2300      	movs	r3, #0
 800408a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800408e:	e0ac      	b.n	80041ea <_vl53lmz_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8004096:	e09c      	b.n	80041d2 <_vl53lmz_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8004098:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800409c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	005a      	lsls	r2, r3, #1
 80040a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80040aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80040b2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80040b6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	1c59      	adds	r1, r3, #1
 80040c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80040c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040ce:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80040d0:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80040d4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	440b      	add	r3, r1
 80040dc:	3304      	adds	r3, #4
 80040de:	0059      	lsls	r1, r3, #1
 80040e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80040e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040ec:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80040ee:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80040f2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	f103 0109 	add.w	r1, r3, #9
 8004100:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004108:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800410c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800410e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004112:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	440a      	add	r2, r1
								  /(uint32_t)4;
 800411a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800411c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8004128:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800412c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	005a      	lsls	r2, r3, #1
 8004136:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800413a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800413e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004142:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8004144:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8004148:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004158:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800415c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004160:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8004162:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004166:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800416a:	00d2      	lsls	r2, r2, #3
 800416c:	440a      	add	r2, r1
 800416e:	3204      	adds	r2, #4
 8004170:	0051      	lsls	r1, r2, #1
 8004172:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004176:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800417a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800417e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8004180:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004184:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8004188:	00d2      	lsls	r2, r2, #3
 800418a:	440a      	add	r2, r1
 800418c:	0052      	lsls	r2, r2, #1
 800418e:	f102 0109 	add.w	r1, r2, #9
 8004192:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004196:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800419a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800419e:	4413      	add	r3, r2
								  /(int16_t)4;
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da00      	bge.n	80041a6 <_vl53lmz_send_offset_data+0x202>
 80041a4:	3303      	adds	r3, #3
 80041a6:	109b      	asrs	r3, r3, #2
 80041a8:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80041aa:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80041ae:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	b209      	sxth	r1, r1
 80041b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80041bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80041c4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80041d2:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	f77f af5e 	ble.w	8004098 <_vl53lmz_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80041dc:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80041ea:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	f77f af4e 	ble.w	8004090 <_vl53lmz_send_offset_data+0xec>
			}
		}
		(void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80041f4:	f107 0318 	add.w	r3, r7, #24
 80041f8:	3320      	adds	r3, #32
 80041fa:	2260      	movs	r2, #96	; 0x60
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f92c 	bl	800545c <memset>
		(void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8004204:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004208:	3340      	adds	r3, #64	; 0x40
 800420a:	22c0      	movs	r2, #192	; 0xc0
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f001 f924 	bl	800545c <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8004214:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004218:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8004222:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f942 	bl	80054b4 <memcpy>
					signal_grid, sizeof(signal_grid));
		(void)memcpy(&(p_dev->temp_buffer[0x140]),
 8004230:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004234:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800423e:	f107 0118 	add.w	r1, r7, #24
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	4618      	mov	r0, r3
 8004246:	f001 f935 	bl	80054b4 <memcpy>
					range_grid, sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 800424a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800424e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8004258:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fdcb 	bl	8003df8 <SwapBuffer>
	}

	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8004262:	2300      	movs	r3, #0
 8004264:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8004268:	e01b      	b.n	80042a2 <_vl53lmz_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800426a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800426e:	f103 0208 	add.w	r2, r3, #8
 8004272:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8004276:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800427a:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800427e:	6809      	ldr	r1, [r1, #0]
 8004280:	440a      	add	r2, r1
 8004282:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 8004286:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800428a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	4413      	add	r3, r2
 8004292:	460a      	mov	r2, r1
 8004294:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8004298:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800429c:	3301      	adds	r3, #1
 800429e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80042a2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80042a6:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 80042aa:	d3de      	bcc.n	800426a <_vl53lmz_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80042ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80042b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f203 62e4 	addw	r2, r3, #1764	; 0x6e4
 80042ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80042be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80042c2:	cb03      	ldmia	r3!, {r0, r1}
 80042c4:	6010      	str	r0, [r2, #0]
 80042c6:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80042c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80042cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80042d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f203 5204 	addw	r2, r3, #1284	; 0x504
 80042e0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80042e4:	f642 6118 	movw	r1, #11800	; 0x2e18
 80042e8:	f7ff fd32 	bl	8003d50 <WrMulti>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 80042fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80042fe:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8004302:	2303      	movs	r3, #3
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	23ff      	movs	r3, #255	; 0xff
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800430e:	2201      	movs	r2, #1
 8004310:	2104      	movs	r1, #4
 8004312:	6800      	ldr	r0, [r0, #0]
 8004314:	f7ff fdb3 	bl	8003e7e <_vl53lmz_poll_for_answer>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8004320:	4313      	orrs	r3, r2
 8004322:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8004326:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 800432a:	4618      	mov	r0, r3
 800432c:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080054e8 	.word	0x080054e8
 8004338:	080054f0 	.word	0x080054f0

0800433c <_vl53lmz_send_xtalk_data>:
 */

static uint8_t _vl53lmz_send_xtalk_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				resolution)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b0ca      	sub	sp, #296	; 0x128
 8004340:	af02      	add	r7, sp, #8
 8004342:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004346:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800434a:	6018      	str	r0, [r3, #0]
 800434c:	460a      	mov	r2, r1
 800434e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004352:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8004356:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800435e:	4a9a      	ldr	r2, [pc, #616]	; (80045c8 <_vl53lmz_send_xtalk_data+0x28c>)
 8004360:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004368:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800436c:	4a97      	ldr	r2, [pc, #604]	; (80045cc <_vl53lmz_send_xtalk_data+0x290>)
 800436e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004372:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004376:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800437a:	4b95      	ldr	r3, [pc, #596]	; (80045d0 <_vl53lmz_send_xtalk_data+0x294>)
 800437c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8004380:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004384:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f203 5004 	addw	r0, r3, #1284	; 0x504
 800438e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004392:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800439c:	f44f 7242 	mov.w	r2, #776	; 0x308
 80043a0:	4619      	mov	r1, r3
 80043a2:	f001 f887 	bl	80054b4 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4)
 80043a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80043aa:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	f040 80d2 	bne.w	800455a <_vl53lmz_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80043b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80043ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80043c4:	461a      	mov	r2, r3
 80043c6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80043ca:	cb03      	ldmia	r3!, {r0, r1}
 80043cc:	6010      	str	r0, [r2, #0]
 80043ce:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80043d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80043d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80043de:	461a      	mov	r2, r3
 80043e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80043e4:	cb03      	ldmia	r3!, {r0, r1}
 80043e6:	6010      	str	r0, [r2, #0]
 80043e8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80043ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80043ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80043f8:	f44f 7142 	mov.w	r1, #776	; 0x308
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fcfb 	bl	8003df8 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8004402:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004406:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f84b 	bl	80054b4 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800441e:	2300      	movs	r3, #0
 8004420:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004424:	e05d      	b.n	80044e2 <_vl53lmz_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004426:	2300      	movs	r3, #0
 8004428:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800442c:	e04e      	b.n	80044cc <_vl53lmz_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800442e:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8004432:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	005a      	lsls	r2, r3, #1
 800443c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004440:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004444:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8004448:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800444c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800445c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004464:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8004466:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800446a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	440b      	add	r3, r1
 8004472:	3304      	adds	r3, #4
 8004474:	0059      	lsls	r1, r3, #1
 8004476:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800447a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800447e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004482:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8004484:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8004488:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	f103 0109 	add.w	r1, r3, #9
 8004496:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800449a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800449e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044a2:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80044a4:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80044a8:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80044b0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80044b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80044be:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80044cc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	ddac      	ble.n	800442e <_vl53lmz_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80044d4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80044e2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	dd9d      	ble.n	8004426 <_vl53lmz_send_xtalk_data+0xea>
			}
		}
		(void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	3340      	adds	r3, #64	; 0x40
 80044f0:	22c0      	movs	r2, #192	; 0xc0
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 ffb1 	bl	800545c <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x34]),
 80044fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80044fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8004508:	f107 0108 	add.w	r1, r7, #8
 800450c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004510:	4618      	mov	r0, r3
 8004512:	f000 ffcf 	bl	80054b4 <memcpy>
				  signal_grid, sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8004516:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800451a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8004524:	f44f 7142 	mov.w	r1, #776	; 0x308
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fc65 	bl	8003df8 <SwapBuffer>
		(void)memcpy(&(p_dev->temp_buffer[0x134]),
 800452e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004532:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800453c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004540:	601a      	str	r2, [r3, #0]
		profile_4x4, sizeof(profile_4x4));
		(void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8004542:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004546:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8004550:	2204      	movs	r2, #4
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f000 ff81 	bl	800545c <memset>
						 (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800455a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800455e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004562:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8004564:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004568:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8004572:	f44f 7342 	mov.w	r3, #776	; 0x308
 8004576:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800457a:	f7ff fbe9 	bl	8003d50 <WrMulti>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004586:	4313      	orrs	r3, r2
 8004588:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 800458c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004590:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8004594:	2303      	movs	r3, #3
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	23ff      	movs	r3, #255	; 0xff
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80045a0:	2201      	movs	r2, #1
 80045a2:	2104      	movs	r1, #4
 80045a4:	6800      	ldr	r0, [r0, #0]
 80045a6:	f7ff fc6a 	bl	8003e7e <_vl53lmz_poll_for_answer>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80045b8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 80045bc:	4618      	mov	r0, r3
 80045be:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	080054f8 	.word	0x080054f8
 80045cc:	08005500 	.word	0x08005500
 80045d0:	0001fca0 	.word	0x0001fca0

080045d4 <vl53lmz_init>:
	return status;
}

uint8_t vl53lmz_init(
		VL53LMZ_Configuration		*p_dev)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53LMZ_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80045e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80045e4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80045e6:	2301      	movs	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]

	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	/* method below copied from vl52l5cx_is_alive() */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb7e 	bl	8003d00 <WrByte>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	4313      	orrs	r3, r2
 800460c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0, &(p_dev->device_id));
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8004616:	330d      	adds	r3, #13
 8004618:	461a      	mov	r2, r3
 800461a:	2100      	movs	r1, #0
 800461c:	f7ff fb3c 	bl	8003c98 <RdByte>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	4313      	orrs	r3, r2
 8004628:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 1, &(p_dev->revision_id));
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8004632:	330e      	adds	r3, #14
 8004634:	461a      	mov	r2, r3
 8004636:	2101      	movs	r1, #1
 8004638:	f7ff fb2e 	bl	8003c98 <RdByte>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	4313      	orrs	r3, r2
 8004644:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fb56 	bl	8003d00 <WrByte>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	4313      	orrs	r3, r2
 800465c:	75fb      	strb	r3, [r7, #23]
	if((p_dev->device_id!=(uint8_t)0xF0)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004664:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8004668:	2bf0      	cmp	r3, #240	; 0xf0
 800466a:	d114      	bne.n	8004696 <vl53lmz_init+0xc2>
		|| ((p_dev->revision_id!=(uint8_t)REVISION_CUT11) && (p_dev->revision_id!=(uint8_t)REVISION_CUT12) && (p_dev->revision_id!=(uint8_t)REVISION_L8))) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004672:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8004676:	2b01      	cmp	r3, #1
 8004678:	d011      	beq.n	800469e <vl53lmz_init+0xca>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004680:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8004684:	2b02      	cmp	r3, #2
 8004686:	d00a      	beq.n	800469e <vl53lmz_init+0xca>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800468e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d003      	beq.n	800469e <vl53lmz_init+0xca>
		/* unexpected combination of device and revision IDs */
		status = VL53LMZ_STATUS_UNKNOWN_DEVICE;
 8004696:	2304      	movs	r3, #4
 8004698:	75fb      	strb	r3, [r7, #23]
		goto exit;
 800469a:	f000 bc8c 	b.w	8004fb6 <vl53lmz_init+0x9e2>
	}

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fb2a 	bl	8003d00 <WrByte>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2204      	movs	r2, #4
 80046ba:	2109      	movs	r1, #9
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fb1f 	bl	8003d00 <WrByte>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2240      	movs	r2, #64	; 0x40
 80046d0:	210f      	movs	r1, #15
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb14 	bl	8003d00 <WrByte>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	4313      	orrs	r3, r2
 80046e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2203      	movs	r2, #3
 80046e6:	210a      	movs	r1, #10
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fb09 	bl	8003d00 <WrByte>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f107 0216 	add.w	r2, r7, #22
 80046fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fac8 	bl	8003c98 <RdByte>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	4313      	orrs	r3, r2
 8004710:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	210c      	movs	r1, #12
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff faf1 	bl	8003d00 <WrByte>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	4313      	orrs	r3, r2
 8004726:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f240 1101 	movw	r1, #257	; 0x101
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fae5 	bl	8003d00 <WrByte>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	4313      	orrs	r3, r2
 800473e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fad9 	bl	8003d00 <WrByte>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	4313      	orrs	r3, r2
 8004756:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff facd 	bl	8003d00 <WrByte>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	4313      	orrs	r3, r2
 800476e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f244 0102 	movw	r1, #16386	; 0x4002
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fac1 	bl	8003d00 <WrByte>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	4313      	orrs	r3, r2
 8004786:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f244 0102 	movw	r1, #16386	; 0x4002
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fab5 	bl	8003d00 <WrByte>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	4313      	orrs	r3, r2
 800479e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff faa9 	bl	8003d00 <WrByte>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461a      	mov	r2, r3
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f240 1103 	movw	r1, #259	; 0x103
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fa9d 	bl	8003d00 <WrByte>
 80047c6:	4603      	mov	r3, r0
 80047c8:	461a      	mov	r2, r3
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	210c      	movs	r1, #12
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fa92 	bl	8003d00 <WrByte>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2243      	movs	r2, #67	; 0x43
 80047ea:	210f      	movs	r1, #15
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fa87 	bl	8003d00 <WrByte>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fb2f 	bl	8003e64 <WaitMs>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	4313      	orrs	r3, r2
 800480e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	210f      	movs	r1, #15
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fa72 	bl	8003d00 <WrByte>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	4313      	orrs	r3, r2
 8004824:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	210a      	movs	r1, #10
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fa67 	bl	8003d00 <WrByte>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	4313      	orrs	r3, r2
 800483a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fb0f 	bl	8003e64 <WaitMs>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	4313      	orrs	r3, r2
 800484e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fa51 	bl	8003d00 <WrByte>
 800485e:	4603      	mov	r3, r0
 8004860:	461a      	mov	r2, r3
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	4313      	orrs	r3, r2
 8004866:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8004868:	2301      	movs	r3, #1
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	23ff      	movs	r3, #255	; 0xff
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2306      	movs	r3, #6
 8004872:	2200      	movs	r2, #0
 8004874:	2101      	movs	r1, #1
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fb01 	bl	8003e7e <_vl53lmz_poll_for_answer>
 800487c:	4603      	mov	r3, r0
 800487e:	461a      	mov	r2, r3
 8004880:	7dfb      	ldrb	r3, [r7, #23]
 8004882:	4313      	orrs	r3, r2
 8004884:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 838f 	bne.w	8004fac <vl53lmz_init+0x9d8>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	210e      	movs	r1, #14
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fa33 	bl	8003d00 <WrByte>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80048aa:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d126      	bne.n	8004900 <vl53lmz_init+0x32c>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fa20 	bl	8003d00 <WrByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	2106      	movs	r1, #6
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fa15 	bl	8003d00 <WrByte>
 80048d6:	4603      	mov	r3, r0
 80048d8:	461a      	mov	r2, r3
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	4313      	orrs	r3, r2
 80048de:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 80048e0:	2304      	movs	r3, #4
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	23ff      	movs	r3, #255	; 0xff
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2321      	movs	r3, #33	; 0x21
 80048ea:	2200      	movs	r2, #0
 80048ec:	2101      	movs	r1, #1
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fac5 	bl	8003e7e <_vl53lmz_poll_for_answer>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	75fb      	strb	r3, [r7, #23]
 80048fe:	e031      	b.n	8004964 <vl53lmz_init+0x390>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f9f9 	bl	8003d00 <WrByte>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	4313      	orrs	r3, r2
 8004916:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	220d      	movs	r2, #13
 800491c:	2103      	movs	r1, #3
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f9ee 	bl	8003d00 <WrByte>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	4313      	orrs	r3, r2
 800492c:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff f9e2 	bl	8003d00 <WrByte>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	4313      	orrs	r3, r2
 8004944:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004946:	2310      	movs	r3, #16
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2310      	movs	r3, #16
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2321      	movs	r3, #33	; 0x21
 8004950:	2200      	movs	r2, #0
 8004952:	2101      	movs	r1, #1
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fa92 	bl	8003e7e <_vl53lmz_poll_for_answer>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	4313      	orrs	r3, r2
 8004962:	75fb      	strb	r3, [r7, #23]
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff f9c7 	bl	8003d00 <WrByte>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	4313      	orrs	r3, r2
 800497a:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f107 0216 	add.w	r2, r7, #22
 8004982:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff f986 	bl	8003c98 <RdByte>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	4313      	orrs	r3, r2
 8004994:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	210c      	movs	r1, #12
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff f9af 	bl	8003d00 <WrByte>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff f9a3 	bl	8003d00 <WrByte>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f240 1101 	movw	r1, #257	; 0x101
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff f997 	bl	8003d00 <WrByte>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461a      	mov	r2, r3
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	4313      	orrs	r3, r2
 80049da:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f98b 	bl	8003d00 <WrByte>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f97f 	bl	8003d00 <WrByte>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f244 0102 	movw	r1, #16386	; 0x4002
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff f973 	bl	8003d00 <WrByte>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f244 0102 	movw	r1, #16386	; 0x4002
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f967 	bl	8003d00 <WrByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff f95b 	bl	8003d00 <WrByte>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f240 1103 	movw	r1, #259	; 0x103
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff f94f 	bl	8003d00 <WrByte>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f244 010f 	movw	r1, #16399	; 0x400f
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff f943 	bl	8003d00 <WrByte>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2243      	movs	r2, #67	; 0x43
 8004a88:	f240 211a 	movw	r1, #538	; 0x21a
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff f937 	bl	8003d00 <WrByte>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	f240 211a 	movw	r1, #538	; 0x21a
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff f92b 	bl	8003d00 <WrByte>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f240 211a 	movw	r1, #538	; 0x21a
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f91f 	bl	8003d00 <WrByte>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f240 211a 	movw	r1, #538	; 0x21a
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff f913 	bl	8003d00 <WrByte>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f240 2119 	movw	r1, #537	; 0x219
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f907 	bl	8003d00 <WrByte>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f240 211b 	movw	r1, #539	; 0x21b
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff f8fb 	bl	8003d00 <WrByte>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff f8ef 	bl	8003d00 <WrByte>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f107 0216 	add.w	r2, r7, #22
 8004b32:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff f8ae 	bl	8003c98 <RdByte>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff f8d6 	bl	8003d00 <WrByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2207      	movs	r2, #7
 8004b62:	2120      	movs	r1, #32
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff f8cb 	bl	8003d00 <WrByte>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2206      	movs	r2, #6
 8004b78:	2120      	movs	r1, #32
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff f8c0 	bl	8003d00 <WrByte>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53LMZ */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2209      	movs	r2, #9
 8004b8e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff f8b4 	bl	8003d00 <WrByte>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba8:	4adc      	ldr	r2, [pc, #880]	; (8004f1c <vl53lmz_init+0x948>)
 8004baa:	2100      	movs	r1, #0
 8004bac:	f7ff f8d0 	bl	8003d50 <WrMulti>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	220a      	movs	r2, #10
 8004bbe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff f89c 	bl	8003d00 <WrByte>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd8:	4ad1      	ldr	r2, [pc, #836]	; (8004f20 <vl53lmz_init+0x94c>)
 8004bda:	2100      	movs	r1, #0
 8004bdc:	f7ff f8b8 	bl	8003d50 <WrMulti>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	220b      	movs	r2, #11
 8004bee:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff f884 	bl	8003d00 <WrByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004c08:	4ac6      	ldr	r2, [pc, #792]	; (8004f24 <vl53lmz_init+0x950>)
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	f7ff f8a0 	bl	8003d50 <WrMulti>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff f86c 	bl	8003d00 <WrByte>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004c38:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d121      	bne.n	8004c84 <vl53lmz_init+0x6b0>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f859 	bl	8003d00 <WrByte>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	2106      	movs	r1, #6
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff f84e 	bl	8003d00 <WrByte>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	75fb      	strb	r3, [r7, #23]
		status |= WaitMs(&(p_dev->platform), 5);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2105      	movs	r1, #5
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff f8f6 	bl	8003e64 <WaitMs>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	75fb      	strb	r3, [r7, #23]
 8004c82:	e031      	b.n	8004ce8 <vl53lmz_init+0x714>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff f837 	bl	8003d00 <WrByte>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	220d      	movs	r2, #13
 8004ca0:	2103      	movs	r1, #3
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff f82c 	bl	8003d00 <WrByte>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff f820 	bl	8003d00 <WrByte>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004cca:	2310      	movs	r3, #16
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	2310      	movs	r3, #16
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2321      	movs	r3, #33	; 0x21
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff f8d0 	bl	8003e7e <_vl53lmz_poll_for_answer>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	75fb      	strb	r3, [r7, #23]
	}
	if(status != (uint8_t)0) {
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 8160 	bne.w	8004fb0 <vl53lmz_init+0x9dc>
		goto exit;
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff f801 	bl	8003d00 <WrByte>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f107 0216 	add.w	r2, r7, #22
 8004d0e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe ffc0 	bl	8003c98 <RdByte>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	210c      	movs	r1, #12
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe ffe9 	bl	8003d00 <WrByte>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe ffdd 	bl	8003d00 <WrByte>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461a      	mov	r2, r3
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe ffd1 	bl	8003d00 <WrByte>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f240 1115 	movw	r1, #277	; 0x115
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe ffc5 	bl	8003d00 <WrByte>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2242      	movs	r2, #66	; 0x42
 8004d84:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe ffb9 	bl	8003d00 <WrByte>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f240 1117 	movw	r1, #279	; 0x117
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe ffad 	bl	8003d00 <WrByte>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461a      	mov	r2, r3
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	210b      	movs	r1, #11
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe ffa2 	bl	8003d00 <WrByte>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f107 0216 	add.w	r2, r7, #22
 8004dcc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fe ff61 	bl	8003c98 <RdByte>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	210c      	movs	r1, #12
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe ff8a 	bl	8003d00 <WrByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	210b      	movs	r1, #11
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe ff7f 	bl	8003d00 <WrByte>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	75fb      	strb	r3, [r7, #23]

	status |= _vl53lmz_poll_for_mcu_boot(p_dev);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff f886 	bl	8003f1e <_vl53lmz_poll_for_mcu_boot>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 80c8 	bne.w	8004fb4 <vl53lmz_init+0x9e0>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe ff67 	bl	8003d00 <WrByte>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	2328      	movs	r3, #40	; 0x28
 8004e40:	4a39      	ldr	r2, [pc, #228]	; (8004f28 <vl53lmz_init+0x954>)
 8004e42:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8004e46:	f7fe ff83 	bl	8003d50 <WrMulti>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53LMZ_GET_NVM_CMD, sizeof(VL53LMZ_GET_NVM_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 0,
 8004e54:	2302      	movs	r3, #2
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	23ff      	movs	r3, #255	; 0xff
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004e60:	2200      	movs	r2, #0
 8004e62:	2104      	movs	r1, #4
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff f80a 	bl	8003e7e <_vl53lmz_poll_for_answer>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	75fb      	strb	r3, [r7, #23]
		VL53LMZ_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8004e74:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53LMZ_NVM_DATA_SIZE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8004e7c:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8004e80:	f642 4104 	movw	r1, #11268	; 0x2c04
 8004e84:	f7fe ff84 	bl	8003d90 <RdMulti>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f103 0014 	add.w	r0, r3, #20
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8004e9e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f000 fb06 	bl	80054b4 <memcpy>
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |= _vl53lmz_send_offset_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff f87a 	bl	8003fa4 <_vl53lmz_send_offset_data>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	p_dev->default_xtalk = (uint8_t*)VL53LMZ_DEFAULT_XTALK;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <vl53lmz_init+0x958>)
 8004ebe:	611a      	str	r2, [r3, #16]
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53LMZ_DEFAULT_XTALK,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004ec6:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <vl53lmz_init+0x958>)
 8004ec8:	4618      	mov	r0, r3
 8004eca:	4611      	mov	r1, r2
 8004ecc:	f44f 7342 	mov.w	r3, #776	; 0x308
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f000 faef 	bl	80054b4 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);
	status |= _vl53lmz_send_xtalk_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8004ed6:	2110      	movs	r1, #16
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fa2f 	bl	800433c <_vl53lmz_send_xtalk_data>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004eee:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d11e      	bne.n	8004f34 <vl53lmz_init+0x960>
		p_dev->default_configuration = (uint8_t*)VL53L8_DEFAULT_CONFIGURATION;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <vl53lmz_init+0x95c>)
 8004efa:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8004f06:	f642 4134 	movw	r1, #11316	; 0x2c34
 8004f0a:	f7fe ff21 	bl	8003d50 <WrMulti>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	461a      	mov	r2, r3
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	75fb      	strb	r3, [r7, #23]
 8004f18:	e01d      	b.n	8004f56 <vl53lmz_init+0x982>
 8004f1a:	bf00      	nop
 8004f1c:	0800555c 	.word	0x0800555c
 8004f20:	0800d55c 	.word	0x0800d55c
 8004f24:	0801555c 	.word	0x0801555c
 8004f28:	0801affc 	.word	0x0801affc
 8004f2c:	0801acf4 	.word	0x0801acf4
 8004f30:	0801a55c 	.word	0x0801a55c
							p_dev->default_configuration,
							sizeof(VL53L8_DEFAULT_CONFIGURATION));
	}
	else {
		p_dev->default_configuration = (uint8_t*)VL53L7_DEFAULT_CONFIGURATION;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <vl53lmz_init+0x9ec>)
 8004f38:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8004f44:	f642 4134 	movw	r1, #11316	; 0x2c34
 8004f48:	f7fe ff02 	bl	8003d50 <WrMulti>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	75fb      	strb	r3, [r7, #23]
							p_dev->default_configuration,
							sizeof(VL53L7_DEFAULT_CONFIGURATION));
	}

	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1, VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);
 8004f56:	2303      	movs	r3, #3
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	23ff      	movs	r3, #255	; 0xff
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004f62:	2201      	movs	r2, #1
 8004f64:	2104      	movs	r1, #4
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fe ff89 	bl	8003e7e <_vl53lmz_poll_for_answer>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8004f76:	f107 0110 	add.w	r1, r7, #16
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	f64d 3280 	movw	r2, #56192	; 0xdb80
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f99f 	bl	80052c4 <vl53lmz_dci_write_data>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53LMZ_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 8004f90:	f107 010c 	add.w	r1, r7, #12
 8004f94:	2304      	movs	r3, #4
 8004f96:	f64d 1264 	movw	r2, #55652	; 0xd964
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f992 	bl	80052c4 <vl53lmz_dci_write_data>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	75fb      	strb	r3, [r7, #23]
 8004faa:	e004      	b.n	8004fb6 <vl53lmz_init+0x9e2>
		goto exit;
 8004fac:	bf00      	nop
 8004fae:	e002      	b.n	8004fb6 <vl53lmz_init+0x9e2>
		goto exit;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <vl53lmz_init+0x9e2>
		goto exit;
 8004fb4:	bf00      	nop
			VL53LMZ_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	0801a928 	.word	0x0801a928

08004fc4 <vl53lmz_set_resolution>:


uint8_t vl53lmz_set_resolution(
		VL53LMZ_Configuration		 *p_dev,
		uint8_t				resolution)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d002      	beq.n	8004fe0 <vl53lmz_set_resolution+0x1c>
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d055      	beq.n	800508a <vl53lmz_set_resolution+0xc6>
 8004fde:	e0a9      	b.n	8005134 <vl53lmz_set_resolution+0x170>
		case VL53LMZ_RESOLUTION_4X4:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	f64a 5238 	movw	r2, #44344	; 0xad38
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8df 	bl	80051b0 <vl53lmz_dci_read_data>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2240      	movs	r2, #64	; 0x40
 8005000:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 64;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2240      	movs	r2, #64	; 0x40
 8005008:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 4;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2204      	movs	r2, #4
 8005010:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 800501a:	2310      	movs	r3, #16
 800501c:	f64a 5238 	movw	r2, #44344	; 0xad38
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f94f 	bl	80052c4 <vl53lmz_dci_write_data>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	4313      	orrs	r3, r2
 800502e:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8005036:	2308      	movs	r3, #8
 8005038:	f245 4250 	movw	r2, #21584	; 0x5450
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8b7 	bl	80051b0 <vl53lmz_dci_read_data>
 8005042:	4603      	mov	r3, r0
 8005044:	461a      	mov	r2, r3
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	4313      	orrs	r3, r2
 800504a:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 4;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2204      	movs	r2, #4
 8005058:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 8;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2208      	movs	r2, #8
 8005060:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 8;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2208      	movs	r2, #8
 8005068:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8005072:	2308      	movs	r3, #8
 8005074:	f245 4250 	movw	r2, #21584	; 0x5450
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f923 	bl	80052c4 <vl53lmz_dci_write_data>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	4313      	orrs	r3, r2
 8005086:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			break;
 8005088:	e057      	b.n	800513a <vl53lmz_set_resolution+0x176>

		case VL53LMZ_RESOLUTION_8X8:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8005090:	2310      	movs	r3, #16
 8005092:	f64a 5238 	movw	r2, #44344	; 0xad38
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f88a 	bl	80051b0 <vl53lmz_dci_read_data>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2210      	movs	r2, #16
 80050aa:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 16;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2210      	movs	r2, #16
 80050b2:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80050c4:	2310      	movs	r3, #16
 80050c6:	f64a 5238 	movw	r2, #44344	; 0xad38
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8fa 	bl	80052c4 <vl53lmz_dci_write_data>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80050e0:	2308      	movs	r3, #8
 80050e2:	f245 4250 	movw	r2, #21584	; 0x5450
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f862 	bl	80051b0 <vl53lmz_dci_read_data>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2208      	movs	r2, #8
 80050fa:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 8;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2208      	movs	r2, #8
 8005102:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 4;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2204      	movs	r2, #4
 800510a:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 4;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2204      	movs	r2, #4
 8005112:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 800511c:	2308      	movs	r3, #8
 800511e:	f245 4250 	movw	r2, #21584	; 0x5450
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8ce 	bl	80052c4 <vl53lmz_dci_write_data>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	4313      	orrs	r3, r2
 8005130:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);

			break;
 8005132:	e002      	b.n	800513a <vl53lmz_set_resolution+0x176>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 8005134:	237f      	movs	r3, #127	; 0x7f
 8005136:	73fb      	strb	r3, [r7, #15]
			break;
 8005138:	bf00      	nop
		}

	status |= _vl53lmz_send_offset_data(p_dev, resolution);
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fe ff30 	bl	8003fa4 <_vl53lmz_send_offset_data>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	4313      	orrs	r3, r2
 800514c:	73fb      	strb	r3, [r7, #15]
	status |= _vl53lmz_send_xtalk_data(p_dev, resolution);
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff f8f2 	bl	800433c <_vl53lmz_send_xtalk_data>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4313      	orrs	r3, r2
 8005160:	73fb      	strb	r3, [r7, #15]

	return status;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <vl53lmz_set_ranging_frequency_hz>:
}

uint8_t vl53lmz_set_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af04      	add	r7, sp, #16
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8005182:	2301      	movs	r3, #1
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	2301      	movs	r3, #1
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	1cfb      	adds	r3, r7, #3
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2304      	movs	r3, #4
 8005190:	f245 4258 	movw	r2, #21592	; 0x5458
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f935 	bl	8005404 <vl53lmz_dci_replace_data>
 800519a:	4603      	mov	r3, r0
 800519c:	461a      	mov	r2, r3
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <vl53lmz_dci_read_data>:
uint8_t vl53lmz_dci_read_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08c      	sub	sp, #48	; 0x30
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53LMZ_STATUS_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80051c4:	887b      	ldrh	r3, [r7, #2]
 80051c6:	330c      	adds	r3, #12
 80051c8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80051ca:	4a3d      	ldr	r2, [pc, #244]	; (80052c0 <vl53lmz_dci_read_data+0x110>)
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80051d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 80051dc:	4293      	cmp	r3, r2
 80051de:	d903      	bls.n	80051e8 <vl53lmz_dci_read_data+0x38>
	{
		status |= VL53LMZ_STATUS_ERROR;
 80051e0:	23ff      	movs	r3, #255	; 0xff
 80051e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80051e6:	e065      	b.n	80052b4 <vl53lmz_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	111b      	asrs	r3, r3, #4
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	b2db      	uxtb	r3, r3
 8005206:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f107 0214 	add.w	r2, r7, #20
 800520e:	230c      	movs	r3, #12
 8005210:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8005214:	f7fe fd9c 	bl	8003d50 <WrMulti>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005220:	4313      	orrs	r3, r2
 8005222:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53LMZ_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8005226:	2303      	movs	r3, #3
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	23ff      	movs	r3, #255	; 0xff
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005232:	2201      	movs	r2, #1
 8005234:	2104      	movs	r1, #4
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7fe fe21 	bl	8003e7e <_vl53lmz_poll_for_answer>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005244:	4313      	orrs	r3, r2
 8005246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53LMZ_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800524a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f642 4104 	movw	r1, #11268	; 0x2c04
 8005258:	f7fe fd9a 	bl	8003d90 <RdMulti>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005264:	4313      	orrs	r3, r2
 8005266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	330c      	adds	r3, #12
 8005274:	b29b      	uxth	r3, r3
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7fe fdbd 	bl	8003df8 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800527e:	2300      	movs	r3, #0
 8005280:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005282:	e011      	b.n	80052a8 <vl53lmz_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8005284:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005288:	1d1a      	adds	r2, r3, #4
 800528a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	440b      	add	r3, r1
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	440a      	add	r2, r1
 8005296:	f892 2504 	ldrb.w	r2, [r2, #1284]	; 0x504
 800529a:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800529c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052ac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80052b0:	429a      	cmp	r2, r3
 80052b2:	dbe7      	blt.n	8005284 <vl53lmz_dci_read_data+0xd4>
		}
	}

	return status;
 80052b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3728      	adds	r7, #40	; 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08005508 	.word	0x08005508

080052c4 <vl53lmz_dci_write_data>:
uint8_t vl53lmz_dci_write_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80052dc:	2300      	movs	r3, #0
 80052de:	753b      	strb	r3, [r7, #20]
 80052e0:	2300      	movs	r3, #0
 80052e2:	757b      	strb	r3, [r7, #21]
 80052e4:	2300      	movs	r3, #0
 80052e6:	75bb      	strb	r3, [r7, #22]
 80052e8:	230f      	movs	r3, #15
 80052ea:	75fb      	strb	r3, [r7, #23]
 80052ec:	2305      	movs	r3, #5
 80052ee:	763b      	strb	r3, [r7, #24]
 80052f0:	2301      	movs	r3, #1
 80052f2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	3308      	adds	r3, #8
 80052f8:	121b      	asrs	r3, r3, #8
 80052fa:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80052fc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80052fe:	887b      	ldrh	r3, [r7, #2]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	3308      	adds	r3, #8
 8005304:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005306:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53LMZ_UI_CMD_END -
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 800530e:	3334      	adds	r3, #52	; 0x34
 8005310:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8005312:	887b      	ldrh	r3, [r7, #2]
 8005314:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 8005318:	4293      	cmp	r3, r2
 800531a:	d903      	bls.n	8005324 <vl53lmz_dci_write_data+0x60>
		   > (uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53LMZ_STATUS_ERROR;
 800531c:	23ff      	movs	r3, #255	; 0xff
 800531e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005322:	e069      	b.n	80053f8 <vl53lmz_dci_write_data+0x134>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	b2db      	uxtb	r3, r3
 800532a:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	111b      	asrs	r3, r3, #4
 8005336:	b2db      	uxtb	r3, r3
 8005338:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	b2db      	uxtb	r3, r3
 8005342:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	4619      	mov	r1, r3
 8005348:	68b8      	ldr	r0, [r7, #8]
 800534a:	f7fe fd55 	bl	8003df8 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800534e:	887b      	ldrh	r3, [r7, #2]
 8005350:	3b01      	subs	r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005356:	e012      	b.n	800537e <vl53lmz_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8005358:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	441a      	add	r2, r3
 8005360:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005364:	3304      	adds	r3, #4
 8005366:	7811      	ldrb	r1, [r2, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	460a      	mov	r2, r1
 800536e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005372:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29b      	uxth	r3, r3
 800537c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800537e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	dae8      	bge.n	8005358 <vl53lmz_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f203 5304 	addw	r3, r3, #1284	; 0x504
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8005390:	887b      	ldrh	r3, [r7, #2]
 8005392:	3304      	adds	r3, #4
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	3304      	adds	r3, #4
 800539e:	461a      	mov	r2, r3
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	cb03      	ldmia	r3!, {r0, r1}
 80053a6:	6010      	str	r0, [r2, #0]
 80053a8:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80053aa:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f203 5204 	addw	r2, r3, #1284	; 0x504
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80053b2:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80053b4:	330c      	adds	r3, #12
 80053b6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80053b8:	f7fe fcca 	bl	8003d50 <WrMulti>
 80053bc:	4603      	mov	r3, r0
 80053be:	461a      	mov	r2, r3
 80053c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 80053ca:	2303      	movs	r3, #3
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	23ff      	movs	r3, #255	; 0xff
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80053d6:	2201      	movs	r2, #1
 80053d8:	2104      	movs	r1, #4
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7fe fd4f 	bl	8003e7e <_vl53lmz_poll_for_answer>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80053ee:	887b      	ldrh	r3, [r7, #2]
 80053f0:	4619      	mov	r1, r3
 80053f2:	68b8      	ldr	r0, [r7, #8]
 80053f4:	f7fe fd00 	bl	8003df8 <SwapBuffer>
	}

	return status;
 80053f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3728      	adds	r7, #40	; 0x28
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <vl53lmz_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_read_data(p_dev, data, index, data_size);
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff fec7 	bl	80051b0 <vl53lmz_dci_read_data>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	4313      	orrs	r3, r2
 800542a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 800542c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4413      	add	r3, r2
 8005432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005434:	6a39      	ldr	r1, [r7, #32]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f83c 	bl	80054b4 <memcpy>
	status |= vl53lmz_dci_write_data(p_dev, data, index, data_size);
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff3e 	bl	80052c4 <vl53lmz_dci_write_data>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	4313      	orrs	r3, r2
 8005450:	75fb      	strb	r3, [r7, #23]

	return status;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <memset>:
 800545c:	4402      	add	r2, r0
 800545e:	4603      	mov	r3, r0
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	f803 1b01 	strb.w	r1, [r3], #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 f826 	bl	80054d0 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	0801b02c 	.word	0x0801b02c
 80054a8:	0801b02c 	.word	0x0801b02c
 80054ac:	0801b02c 	.word	0x0801b02c
 80054b0:	0801b030 	.word	0x0801b030

080054b4 <memcpy>:
 80054b4:	440a      	add	r2, r1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054bc:	d100      	bne.n	80054c0 <memcpy+0xc>
 80054be:	4770      	bx	lr
 80054c0:	b510      	push	{r4, lr}
 80054c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ca:	4291      	cmp	r1, r2
 80054cc:	d1f9      	bne.n	80054c2 <memcpy+0xe>
 80054ce:	bd10      	pop	{r4, pc}

080054d0 <_init>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr

080054dc <_fini>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr
