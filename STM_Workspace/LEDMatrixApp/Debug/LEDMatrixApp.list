
LEDMatrixApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b328  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015d80  0800b4c0  0800b4c0  0001b4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021240  08021240  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  08021240  08021240  00031240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021248  08021248  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021248  08021248  00031248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802124c  0802124c  0003124c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08021250  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050d8  20000080  080212d0  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005158  080212d0  00045158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5a0  00000000  00000000  00040143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f7  00000000  00000000  0004e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  000508e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091e  00000000  00000000  00051480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001744e  00000000  00000000  00051d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa47  00000000  00000000  000691ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008aa02  00000000  00000000  00078c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003968  00000000  00000000  00103638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00106fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b4a8 	.word	0x0800b4a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	0800b4a8 	.word	0x0800b4a8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b970 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14a      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4694      	mov	ip, r2
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0xe2>
 8000c26:	fab2 f382 	clz	r3, r2
 8000c2a:	b143      	cbz	r3, 8000c3e <__udivmoddi4+0x2e>
 8000c2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c30:	f1c3 0220 	rsb	r2, r3, #32
 8000c34:	409f      	lsls	r7, r3
 8000c36:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3a:	4317      	orrs	r7, r2
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c42:	fa1f f58c 	uxth.w	r5, ip
 8000c46:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4a:	0c22      	lsrs	r2, r4, #16
 8000c4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	fb01 f005 	mul.w	r0, r1, r5
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x62>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c64:	f080 811c 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f240 8119 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4462      	add	r2, ip
 8000c72:	1a12      	subs	r2, r2, r0
 8000c74:	b2a4      	uxth	r4, r4
 8000c76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	fb00 f505 	mul.w	r5, r0, r5
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x90>
 8000c8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x294>
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x294>
 8000c9c:	4464      	add	r4, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11e      	cbz	r6, 8000cb2 <__udivmoddi4+0xa2>
 8000caa:	40dc      	lsrs	r4, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0xbc>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80ed 	beq.w	8000e9a <__udivmoddi4+0x28a>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d149      	bne.n	8000d68 <__udivmoddi4+0x158>
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	d302      	bcc.n	8000cde <__udivmoddi4+0xce>
 8000cd8:	4282      	cmp	r2, r0
 8000cda:	f200 80f8 	bhi.w	8000ece <__udivmoddi4+0x2be>
 8000cde:	1a84      	subs	r4, r0, r2
 8000ce0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d0e2      	beq.n	8000cb2 <__udivmoddi4+0xa2>
 8000cec:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf0:	e7df      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xe6>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d00:	1a8a      	subs	r2, r1, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d10:	fb07 2015 	mls	r0, r7, r5, r2
 8000d14:	0c22      	lsrs	r2, r4, #16
 8000d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1a:	fb0e f005 	mul.w	r0, lr, r5
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d22:	eb1c 0202 	adds.w	r2, ip, r2
 8000d26:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2b8>
 8000d32:	4645      	mov	r5, r8
 8000d34:	1a12      	subs	r2, r2, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d3c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x14e>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x14c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2c2>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d66:	e79f      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000d68:	f1c1 0720 	rsb	r7, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7e:	40fd      	lsrs	r5, r7
 8000d80:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d84:	4323      	orrs	r3, r4
 8000d86:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d92:	0c1c      	lsrs	r4, r3, #16
 8000d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d98:	fb08 f50e 	mul.w	r5, r8, lr
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	fa00 f001 	lsl.w	r0, r0, r1
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2b4>
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2b4>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4464      	add	r4, ip
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	b29d      	uxth	r5, r3
 8000dc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dcc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2ac>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2ac>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dee:	fba3 9502 	umull	r9, r5, r3, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46ae      	mov	lr, r5
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x29c>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x298>
 8000e00:	b156      	cbz	r6, 8000e18 <__udivmoddi4+0x208>
 8000e02:	ebb0 0208 	subs.w	r2, r0, r8
 8000e06:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0e:	40ca      	lsrs	r2, r1
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	4317      	orrs	r7, r2
 8000e14:	e9c6 7400 	strd	r7, r4, [r6]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	f1c3 0120 	rsb	r1, r3, #32
 8000e24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e28:	fa20 f201 	lsr.w	r2, r0, r1
 8000e2c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e30:	409d      	lsls	r5, r3
 8000e32:	432a      	orrs	r2, r5
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e40:	fb07 1510 	mls	r5, r7, r0, r1
 8000e44:	0c11      	lsrs	r1, r2, #16
 8000e46:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4e:	428d      	cmp	r5, r1
 8000e50:	fa04 f403 	lsl.w	r4, r4, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x258>
 8000e56:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e60:	428d      	cmp	r5, r1
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	1b49      	subs	r1, r1, r5
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e70:	fb07 1115 	mls	r1, r7, r5, r1
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	fb05 f10e 	mul.w	r1, r5, lr
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x282>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a52      	subs	r2, r2, r1
 8000e94:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0xfc>
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	e6e6      	b.n	8000c72 <__udivmoddi4+0x62>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x90>
 8000ea8:	4548      	cmp	r0, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb8:	4645      	mov	r5, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x282>
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x258>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec8:	3d02      	subs	r5, #2
 8000eca:	4462      	add	r2, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e70a      	b.n	8000ce8 <__udivmoddi4+0xd8>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x14e>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 ff3e 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f80a 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f8cc 	bl	8001084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eec:	f000 f872 	bl	8000fd4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ef0:	f000 f89e 	bl	8001030 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  status |= HAL_I2C_Master_Transmit(&hi2c2, 0x08 << 1, buff, 5, 100);
	  matrix_app_main();
 8000ef4:	f000 fe5a 	bl	8001bac <matrix_app_main>
 8000ef8:	e7fc      	b.n	8000ef4 <main+0x18>
	...

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f008 f8be 	bl	800908c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f70:	2310      	movs	r3, #16
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fc1a 	bl	80037c0 <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f92:	f000 f973 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fe7c 	bl	8003cb0 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fbe:	f000 f95d 	bl	800127c <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_I2C1_Init+0x54>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_I2C1_Init+0x58>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_I2C1_Init+0x50>)
 8001012:	f001 faaf 	bl	8002574 <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800101c:	f000 f92e 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000009c 	.word	0x2000009c
 8001028:	40005400 	.word	0x40005400
 800102c:	00061a80 	.word	0x00061a80

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f003 f842 	bl	80040f0 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f903 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000f0 	.word	0x200000f0
 8001080:	40004400 	.word	0x40004400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a61      	ldr	r2, [pc, #388]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b54      	ldr	r3, [pc, #336]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a53      	ldr	r2, [pc, #332]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPn1_GPIO_Port, LPn1_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2101      	movs	r1, #1
 800110e:	4847      	ldr	r0, [pc, #284]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001110:	f001 f9e4 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LPn2_Pin|LPn3_Pin|LPn4_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	210e      	movs	r1, #14
 8001118:	4844      	ldr	r0, [pc, #272]	; (800122c <MX_GPIO_Init+0x1a8>)
 800111a:	f001 f9df 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4843      	ldr	r0, [pc, #268]	; (8001230 <MX_GPIO_Init+0x1ac>)
 8001124:	f001 f9da 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2111      	movs	r1, #17
 800112c:	4841      	ldr	r0, [pc, #260]	; (8001234 <MX_GPIO_Init+0x1b0>)
 800112e:	f001 f9d5 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_C_GPIO_Port, I2C_RST_C_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	483f      	ldr	r0, [pc, #252]	; (8001234 <MX_GPIO_Init+0x1b0>)
 8001138:	f001 f9d0 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4836      	ldr	r0, [pc, #216]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001154:	f001 f83e 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn4_Pin;
 8001158:	230b      	movs	r3, #11
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001170:	f001 f830 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPn3_Pin */
  GPIO_InitStruct.Pin = LPn3_Pin;
 8001174:	2304      	movs	r3, #4
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPn3_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4828      	ldr	r0, [pc, #160]	; (800122c <MX_GPIO_Init+0x1a8>)
 800118c:	f001 f822 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_C_Pin INT1_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8001190:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8001194:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <MX_GPIO_Init+0x1ac>)
 80011a8:	f001 f814 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ac:	2320      	movs	r3, #32
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	481b      	ldr	r0, [pc, #108]	; (8001230 <MX_GPIO_Init+0x1ac>)
 80011c4:	f001 f806 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_C_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|LPn_C_Pin;
 80011c8:	2311      	movs	r3, #17
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <MX_GPIO_Init+0x1b0>)
 80011e0:	f000 fff8 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_C_Pin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 80011e4:	2308      	movs	r3, #8
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_GPIO_Init+0x1b0>)
 80011fc:	f000 ffea 	bl	80021d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200a      	movs	r0, #10
 8001206:	f000 ff1c 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800120a:	200a      	movs	r0, #10
 800120c:	f000 ff35 	bl	800207a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	f000 ff14 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f000 ff2d 	bl	800207a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40020800 	.word	0x40020800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001248:	d10d      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0x2e>
	  if (ranging == 1){
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_GPIO_EXTI_Callback+0x38>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_GPIO_EXTI_Callback+0x26>
		  vl53lmz_stop_ranging(&Sensor1Cfg);
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001254:	f005 f810 	bl	8006278 <vl53lmz_stop_ranging>
//		  vl53lmz_stop_ranging(&Sensor1Cfg);
//		  vl53lmz_stop_ranging(&Sensor2Cfg);
		  ranging = 0;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_GPIO_EXTI_Callback+0x38>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	  }
	  restart_state = 1;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_GPIO_EXTI_Callback+0x40>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001264:	e000      	b.n	8001268 <HAL_GPIO_EXTI_Callback+0x30>
      __NOP();
 8001266:	bf00      	nop
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000134 	.word	0x20000134
 8001274:	20000138 	.word	0x20000138
 8001278:	20000135 	.word	0x20000135

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012c6:	2007      	movs	r0, #7
 80012c8:	f000 feb0 	bl	800202c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_I2C_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12c      	bne.n	8001354 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_I2C_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_I2C_MspInit+0x88>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_I2C_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131c:	2312      	movs	r3, #18
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001328:	2304      	movs	r3, #4
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <HAL_I2C_MspInit+0x8c>)
 8001334:	f000 ff4e 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_I2C_MspInit+0x88>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_I2C_MspInit+0x88>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_I2C_MspInit+0x88>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020400 	.word	0x40020400

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_UART_MspInit+0x94>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d133      	bne.n	80013f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_UART_MspInit+0x98>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_UART_MspInit+0x98>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x98>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_UART_MspInit+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_UART_MspInit+0x98>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_UART_MspInit+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c2:	230c      	movs	r3, #12
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d2:	2307      	movs	r3, #7
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <HAL_UART_MspInit+0x9c>)
 80013de:	f000 fef9 	bl	80021d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2026      	movs	r0, #38	; 0x26
 80013e8:	f000 fe2b 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013ec:	2026      	movs	r0, #38	; 0x26
 80013ee:	f000 fe44 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40004400 	.word	0x40004400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f000 fcd6 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8001460:	2010      	movs	r0, #16
 8001462:	f001 f86f 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <USART2_IRQHandler+0x10>)
 8001472:	f002 fe8b 	bl	800418c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000f0 	.word	0x200000f0

08001480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001484:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001488:	f001 f85c 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <init_tof>:
//led_color cur_color;
LED reset_command;

brush my_brush;

uint8_t init_tof(VL53LMZ_Configuration	*config){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

	config->platform.address = VL53LMZ_DEFAULT_I2C_ADDRESS;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2252      	movs	r2, #82	; 0x52
 80014c4:	801a      	strh	r2, [r3, #0]

	status |= vl53lmz_init(config);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f004 f9c4 	bl	8005854 <vl53lmz_init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014da:	f000 fcb3 	bl	8001e44 <HAL_Delay>
	//TODO more initialization
	status |= vl53lmz_set_resolution(config, VL53LMZ_RESOLUTION_8X8);
 80014de:	2140      	movs	r1, #64	; 0x40
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f005 f98b 	bl	80067fc <vl53lmz_set_resolution>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	73fb      	strb	r3, [r7, #15]
	status |= vl53lmz_set_ranging_frequency_hz(config, 15);
 80014f0:	210f      	movs	r1, #15
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f005 fa56 	bl	80069a4 <vl53lmz_set_ranging_frequency_hz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	4313      	orrs	r3, r2
 8001500:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(500);
 8001502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001506:	f000 fc9d 	bl	8001e44 <HAL_Delay>

	return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <init_tracking>:

uint8_t init_tracking(){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]

	status |= GW_init(&gest_predictor, &hand_tracker, &sensor_data);
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <init_tracking+0x78>)
 8001520:	491b      	ldr	r1, [pc, #108]	; (8001590 <init_tracking+0x7c>)
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <init_tracking+0x80>)
 8001524:	f005 fe68 	bl	80071f8 <GW_init>
 8001528:	4603      	mov	r3, r0
 800152a:	b25a      	sxtb	r2, r3
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4313      	orrs	r3, r2
 8001532:	b25b      	sxtb	r3, r3
 8001534:	71fb      	strb	r3, [r7, #7]

	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53LMZ_RESOLUTION_8X8);
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	4914      	ldr	r1, [pc, #80]	; (800158c <init_tracking+0x78>)
 800153a:	4815      	ldr	r0, [pc, #84]	; (8001590 <init_tracking+0x7c>)
 800153c:	f006 fdba 	bl	80080b4 <HT_set_square_resolution>
 8001540:	4603      	mov	r3, r0
 8001542:	b25a      	sxtb	r2, r3
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4313      	orrs	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	71fb      	strb	r3, [r7, #7]

	status |= GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 15);
 800154e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <init_tracking+0x78>)
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <init_tracking+0x7c>)
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <init_tracking+0x80>)
 8001558:	f005 ff28 	bl	80073ac <GW_set_frequency>
 800155c:	4603      	mov	r3, r0
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	71fb      	strb	r3, [r7, #7]

	//fortest
	status |= SEN_set_orientation(&sensor_data, 4);
 800156a:	2104      	movs	r1, #4
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <init_tracking+0x78>)
 800156e:	f007 fb4f 	bl	8008c10 <SEN_set_orientation>
 8001572:	4603      	mov	r3, r0
 8001574:	b25a      	sxtb	r2, r3
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	4313      	orrs	r3, r2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	71fb      	strb	r3, [r7, #7]
	return status;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20004170 	.word	0x20004170
 8001590:	200039b8 	.word	0x200039b8
 8001594:	20002a58 	.word	0x20002a58

08001598 <init_matrix>:

void init_matrix(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	my_brush.cur_led = &LEDMatrix[0][0];
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <init_matrix+0x70>)
 80015a0:	4a1a      	ldr	r2, [pc, #104]	; (800160c <init_matrix+0x74>)
 80015a2:	605a      	str	r2, [r3, #4]
	my_brush.last_led = &LEDMatrix[0][0];
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <init_matrix+0x70>)
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <init_matrix+0x74>)
 80015a8:	609a      	str	r2, [r3, #8]

	my_brush.cur_color = Red;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <init_matrix+0x70>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
	my_brush.last_color = Red;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <init_matrix+0x70>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	705a      	strb	r2, [r3, #1]

//	reset_command = {255, 255, Black, 0, 0, 0};
	reset_command.row = 255;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <init_matrix+0x78>)
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	701a      	strb	r2, [r3, #0]
	reset_command.column = 255;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <init_matrix+0x78>)
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	705a      	strb	r2, [r3, #1]
	set_led_color(&reset_command, Black);
 80015c2:	2100      	movs	r1, #0
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <init_matrix+0x78>)
 80015c6:	f000 f827 	bl	8001618 <set_led_color>
	reset_command.color = Black;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <init_matrix+0x78>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	709a      	strb	r2, [r3, #2]


//	LEDMatrix[0][0].brightness = 255;
	set_led_color(&LEDMatrix[0][0], my_brush.cur_color);
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <init_matrix+0x70>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <init_matrix+0x74>)
 80015d8:	f000 f81e 	bl	8001618 <set_led_color>

	reset_matrix();
 80015dc:	f000 fa74 	bl	8001ac8 <reset_matrix>

	LED pack_command = {254, 254, Black, 0, 0, 0};
 80015e0:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <init_matrix+0x7c>)
 80015e2:	463b      	mov	r3, r7
 80015e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e8:	6018      	str	r0, [r3, #0]
 80015ea:	3304      	adds	r3, #4
 80015ec:	8019      	strh	r1, [r3, #0]

	send_led_data(&pack_command);
 80015ee:	463b      	mov	r3, r7
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f867 	bl	80016c4 <send_led_data>
	HAL_Delay(500);
 80015f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fa:	f000 fc23 	bl	8001e44 <HAL_Delay>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20004f90 	.word	0x20004f90
 800160c:	200043d0 	.word	0x200043d0
 8001610:	20004f88 	.word	0x20004f88
 8001614:	0800b4c0 	.word	0x0800b4c0

08001618 <set_led_color>:

void set_led_color(LED* led_to_change, led_color new_color){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	led_to_change->color = new_color;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	709a      	strb	r2, [r3, #2]
	switch (new_color)
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d83f      	bhi.n	80016b0 <set_led_color+0x98>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <set_led_color+0x20>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001661 	.word	0x08001661
 8001640:	08001675 	.word	0x08001675
 8001644:	08001689 	.word	0x08001689
 8001648:	0800169d 	.word	0x0800169d
	{
	case Black:
		led_to_change->R = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	70da      	strb	r2, [r3, #3]
		led_to_change->G = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	711a      	strb	r2, [r3, #4]
		led_to_change->B = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	715a      	strb	r2, [r3, #5]
		break;
 800165e:	e027      	b.n	80016b0 <set_led_color+0x98>
	case Red:
		led_to_change->R = MAX_BRIGHTNESS;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	70da      	strb	r2, [r3, #3]
		led_to_change->G = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	711a      	strb	r2, [r3, #4]
		led_to_change->B = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	715a      	strb	r2, [r3, #5]
		break;
 8001672:	e01d      	b.n	80016b0 <set_led_color+0x98>
	case Green:
		led_to_change->R = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	70da      	strb	r2, [r3, #3]
		led_to_change->G = MAX_BRIGHTNESS;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	22ff      	movs	r2, #255	; 0xff
 800167e:	711a      	strb	r2, [r3, #4]
		led_to_change->B = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	715a      	strb	r2, [r3, #5]
		break;
 8001686:	e013      	b.n	80016b0 <set_led_color+0x98>
	case Blue:
		led_to_change->R = 0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	70da      	strb	r2, [r3, #3]
		led_to_change->G = 0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	711a      	strb	r2, [r3, #4]
		led_to_change->B = MAX_BRIGHTNESS;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	715a      	strb	r2, [r3, #5]
		break;
 800169a:	e009      	b.n	80016b0 <set_led_color+0x98>
	case White:
		led_to_change->R = MAX_BRIGHTNESS;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	70da      	strb	r2, [r3, #3]
		led_to_change->G = MAX_BRIGHTNESS;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	22ff      	movs	r2, #255	; 0xff
 80016a6:	711a      	strb	r2, [r3, #4]
		led_to_change->B = MAX_BRIGHTNESS;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	22ff      	movs	r2, #255	; 0xff
 80016ac:	715a      	strb	r2, [r3, #5]
		break;
 80016ae:	bf00      	nop
	}
	led_to_change->color = new_color;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	709a      	strb	r2, [r3, #2]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <send_led_data>:

uint8_t send_led_data(LED* updated_LED){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
//							updated_LED->color == Green ? updated_LED->brightness : 0,
//							updated_LED->color == Blue ? updated_LED->brightness : 0,
//	};


	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	723b      	strb	r3, [r7, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	727b      	strb	r3, [r7, #9]
								updated_LED->R, updated_LED->G, updated_LED->B};
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	78db      	ldrb	r3, [r3, #3]
	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 80016e0:	72bb      	strb	r3, [r7, #10]
								updated_LED->R, updated_LED->G, updated_LED->B};
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	791b      	ldrb	r3, [r3, #4]
	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 80016e6:	72fb      	strb	r3, [r7, #11]
								updated_LED->R, updated_LED->G, updated_LED->B};
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	795b      	ldrb	r3, [r3, #5]
	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 80016ec:	733b      	strb	r3, [r7, #12]
//								rgb_buffer[0], rgb_buffer[1], rgb_buffer[2]};

	status |= HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDR, data_buffer, 5, 100);
 80016ee:	f107 0208 	add.w	r2, r7, #8
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2305      	movs	r3, #5
 80016f8:	2110      	movs	r1, #16
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <send_led_data+0x58>)
 80016fc:	f001 f87e 	bl	80027fc <HAL_I2C_Master_Transmit>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	4313      	orrs	r3, r2
 8001708:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(5);
 800170a:	2005      	movs	r0, #5
 800170c:	f000 fb9a 	bl	8001e44 <HAL_Delay>
	return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000009c 	.word	0x2000009c

08001720 <select_target_index>:

int* select_target_index(int *target_indices, int zone_index, VL53LMZ_ResultsData *pRangingData)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	(void) pRangingData;
	target_indices[0] = zone_index * VL53LMZ_NB_TARGET_PER_ZONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	601a      	str	r2, [r3, #0]
	return target_indices;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <sample_once>:

uint8_t sample_once(VL53LMZ_Configuration* config, VL53LMZ_ResultsData* results){
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
	uint8_t is_ready = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	73bb      	strb	r3, [r7, #14]

	while(is_ready == 0){ // poll ;)
 8001752:	e00a      	b.n	800176a <sample_once+0x2a>
		status |= vl53lmz_check_data_ready(config, &is_ready);
 8001754:	f107 030e 	add.w	r3, r7, #14
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f004 fe5e 	bl	800641c <vl53lmz_check_data_ready>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	4313      	orrs	r3, r2
 8001768:	73fb      	strb	r3, [r7, #15]
	while(is_ready == 0){ // poll ;)
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f1      	beq.n	8001754 <sample_once+0x14>
	}
	vl53lmz_get_ranging_data(config, results);
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f004 fea8 	bl	80064c8 <vl53lmz_get_ranging_data>

	return status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <SEN_CopyRangingData>:

uint8_t SEN_CopyRangingData(SEN_data_t* pDest, VL53LMZ_ResultsData *pRangingData)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	float ranging, peak;
	bool valid;
	int idx, result, nb_targets, target_idx[3], target_status;

	if (pDest == NULL || pRangingData == NULL) return -1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <SEN_CopyRangingData+0x16>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <SEN_CopyRangingData+0x1a>
 800179a:	23ff      	movs	r3, #255	; 0xff
 800179c:	e07e      	b.n	800189c <SEN_CopyRangingData+0x118>

	pDest->timestamp_ms = GET_TIME_STAMP();
 800179e:	f000 fb45 	bl	8001e2c <HAL_GetTick>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	61da      	str	r2, [r3, #28]

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ae:	e06f      	b.n	8001890 <SEN_CopyRangingData+0x10c>
	{
		select_target_index(target_idx, idx, pRangingData);
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ffb1 	bl	8001720 <select_target_index>

		ranging = pRangingData->distance_mm[target_idx[0]]/4.0; // Signed 14.2
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe54 	bl	800047c <__aeabi_i2d>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <SEN_CopyRangingData+0x120>)
 80017da:	f7fe ffe3 	bl	80007a4 <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9ab 	bl	8000b40 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28

		peak = pRangingData->signal_per_spad[target_idx[0]]/2048.0; // Unsigned 21.11
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	3390      	adds	r3, #144	; 0x90
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe2e 	bl	800045c <__aeabi_ui2d>
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <SEN_CopyRangingData+0x124>)
 8001806:	f7fe ffcd 	bl	80007a4 <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f995 	bl	8000b40 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
		nb_targets = pRangingData->nb_target_detected[idx];
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	4413      	add	r3, r2
 8001820:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	623b      	str	r3, [r7, #32]
		target_status = pRangingData->target_status[target_idx[0]];
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8001832:	61fb      	str	r3, [r7, #28]

		valid = (nb_targets > 0)
				&& (target_status == 4 || target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10);
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	2b00      	cmp	r3, #0
 8001838:	dd10      	ble.n	800185c <SEN_CopyRangingData+0xd8>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	2b04      	cmp	r3, #4
 800183e:	d00b      	beq.n	8001858 <SEN_CopyRangingData+0xd4>
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d008      	beq.n	8001858 <SEN_CopyRangingData+0xd4>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d005      	beq.n	8001858 <SEN_CopyRangingData+0xd4>
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b09      	cmp	r3, #9
 8001850:	d002      	beq.n	8001858 <SEN_CopyRangingData+0xd4>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d101      	bne.n	800185c <SEN_CopyRangingData+0xd8>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <SEN_CopyRangingData+0xda>
 800185c:	2300      	movs	r3, #0
		valid = (nb_targets > 0)
 800185e:	76fb      	strb	r3, [r7, #27]
 8001860:	7efb      	ldrb	r3, [r7, #27]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	76fb      	strb	r3, [r7, #27]
//		valid &= (ranging < 600);
		result = SEN_set_data(pDest, idx, ranging, peak, valid);
 8001868:	7efb      	ldrb	r3, [r7, #27]
 800186a:	461a      	mov	r2, r3
 800186c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001870:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f007 fa1d 	bl	8008cb6 <SEN_set_data>
 800187c:	6178      	str	r0, [r7, #20]

		if (result != 0) return result;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <SEN_CopyRangingData+0x106>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	e008      	b.n	800189c <SEN_CopyRangingData+0x118>
	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	3301      	adds	r3, #1
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001896:	429a      	cmp	r2, r3
 8001898:	db8a      	blt.n	80017b0 <SEN_CopyRangingData+0x2c>
	}

	return 0;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40100000 	.word	0x40100000
 80018a8:	40a00000 	.word	0x40a00000
 80018ac:	00000000 	.word	0x00000000

080018b0 <convertSingleSensorPos>:

void convertSingleSensorPos(int x, int y, int z, uint8_t *pos_buffer) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
	float maxX = z*SINE_VALUE;
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe fddc 	bl	800047c <__aeabi_i2d>
 80018c4:	a34a      	add	r3, pc, #296	; (adr r3, 80019f0 <convertSingleSensorPos+0x140>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe41 	bl	8000550 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f933 	bl	8000b40 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	61fb      	str	r3, [r7, #28]
	float maxY = z*SINE_VALUE;
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7fe fdcc 	bl	800047c <__aeabi_i2d>
 80018e4:	a342      	add	r3, pc, #264	; (adr r3, 80019f0 <convertSingleSensorPos+0x140>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe31 	bl	8000550 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f923 	bl	8000b40 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
	float Xinterval = (maxX*2)/MAX_QUADRANT_X; // divide by 13 and we can overlap column 13 of left sensor with column 1 of right sensor
 80018fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001902:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001906:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800190a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]
	float Yinterval = (maxY*2)/MAX_QUADRANT_Y;
 8001912:	edd7 7a06 	vldr	s15, [r7, #24]
 8001916:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800191a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800191e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001922:	edc7 7a04 	vstr	s15, [r7, #16]

	//test

	Xinterval *= 0.85;
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7fe fdba 	bl	80004a0 <__aeabi_f2d>
 800192c:	a332      	add	r3, pc, #200	; (adr r3, 80019f8 <convertSingleSensorPos+0x148>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe0d 	bl	8000550 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f8ff 	bl	8000b40 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	617b      	str	r3, [r7, #20]
	Yinterval *= 0.83;
 8001946:	6938      	ldr	r0, [r7, #16]
 8001948:	f7fe fdaa 	bl	80004a0 <__aeabi_f2d>
 800194c:	a32c      	add	r3, pc, #176	; (adr r3, 8001a00 <convertSingleSensorPos+0x150>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fdfd 	bl	8000550 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f8ef 	bl	8000b40 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	613b      	str	r3, [r7, #16]

	int row = -1*(y/Yinterval);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001970:	ed97 7a04 	vldr	s14, [r7, #16]
 8001974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001978:	eef1 7a67 	vneg.f32	s15, s15
 800197c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
	int col = x/Xinterval;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001990:	ed97 7a05 	vldr	s14, [r7, #20]
 8001994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	623b      	str	r3, [r7, #32]
	row += (int) (MAX_QUADRANT_Y/2);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	330a      	adds	r3, #10
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
	col += (int) (MAX_QUADRANT_X/2);
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	330c      	adds	r3, #12
 80019ac:	623b      	str	r3, [r7, #32]
	if (row > MATRIX_HEIGHT-1) {
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	2b13      	cmp	r3, #19
 80019b2:	dd01      	ble.n	80019b8 <convertSingleSensorPos+0x108>
		row = MATRIX_HEIGHT-1;
 80019b4:	2313      	movs	r3, #19
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (row < 0) {
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da01      	bge.n	80019c2 <convertSingleSensorPos+0x112>
		row = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (col > MATRIX_WIDTH-1) {
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	2b18      	cmp	r3, #24
 80019c6:	dd01      	ble.n	80019cc <convertSingleSensorPos+0x11c>
		col = MATRIX_WIDTH-1;
 80019c8:	2318      	movs	r3, #24
 80019ca:	623b      	str	r3, [r7, #32]
	}
	if (col < 0) {
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da01      	bge.n	80019d6 <convertSingleSensorPos+0x126>
		col = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
	}
	pos_buffer[0] = (uint8_t) row;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	701a      	strb	r2, [r3, #0]
	pos_buffer[1] = (uint8_t) col;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	99fc1567 	.word	0x99fc1567
 80019f4:	3fda8279 	.word	0x3fda8279
 80019f8:	33333333 	.word	0x33333333
 80019fc:	3feb3333 	.word	0x3feb3333
 8001a00:	28f5c28f 	.word	0x28f5c28f
 8001a04:	3fea8f5c 	.word	0x3fea8f5c

08001a08 <update_led_matrix>:
//
//	return 0;
//}


void update_led_matrix(HT_hand_t* cur_hand, led_color new_color){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
	uint8_t led_index[2];
	uint8_t row, col;

//	uint8_t out_of_bounds;

	convertSingleSensorPos(cur_hand->hand_x, cur_hand->hand_y, cur_hand->hand_z, led_index);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a24:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	ee17 2a90 	vmov	r2, s15
 8001a3a:	ee16 1a90 	vmov	r1, s13
 8001a3e:	ee17 0a10 	vmov	r0, s14
 8001a42:	f7ff ff35 	bl	80018b0 <convertSingleSensorPos>
//	out_of_bounds = adamsConversion(cur_hand->hand_x, cur_hand->hand_y, led_index);

//	if (out_of_bounds){return;}

	row = led_index[0];
 8001a46:	7b3b      	ldrb	r3, [r7, #12]
 8001a48:	73fb      	strb	r3, [r7, #15]
	col = led_index[1];
 8001a4a:	7b7b      	ldrb	r3, [r7, #13]
 8001a4c:	73bb      	strb	r3, [r7, #14]

//	send_led_data(&LEDMatrix[row][col]);
//	LastLED = &LEDMatrix[row][col];

	if (LEDMatrix[row][col].color != new_color){ //new led
 8001a4e:	7bf9      	ldrb	r1, [r7, #15]
 8001a50:	7bba      	ldrb	r2, [r7, #14]
 8001a52:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <update_led_matrix+0xbc>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2296      	movs	r2, #150	; 0x96
 8001a5e:	fb01 f202 	mul.w	r2, r1, r2
 8001a62:	4413      	add	r3, r2
 8001a64:	4403      	add	r3, r0
 8001a66:	3302      	adds	r3, #2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d025      	beq.n	8001abc <update_led_matrix+0xb4>
		if (row > 1 && col > 1){
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d922      	bls.n	8001abc <update_led_matrix+0xb4>
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d91f      	bls.n	8001abc <update_led_matrix+0xb4>
//			set_led_color(&LEDMatrix[row][col], new_color);
//			FIFO_add(&activeLEDs, &LEDMatrix[row][col]);
			set_led_color(&LEDMatrix[row][col], new_color);
 8001a7c:	7bf9      	ldrb	r1, [r7, #15]
 8001a7e:	7bba      	ldrb	r2, [r7, #14]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2296      	movs	r2, #150	; 0x96
 8001a8a:	fb01 f202 	mul.w	r2, r1, r2
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <update_led_matrix+0xbc>)
 8001a92:	4413      	add	r3, r2
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fdbd 	bl	8001618 <set_led_color>
//			LEDMatrix[row][col].color = new_color;
//			LEDMatrix[row][col].brightness = 255;
			send_led_data(&LEDMatrix[row][col]);
 8001a9e:	7bf9      	ldrb	r1, [r7, #15]
 8001aa0:	7bba      	ldrb	r2, [r7, #14]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2296      	movs	r2, #150	; 0x96
 8001aac:	fb01 f202 	mul.w	r2, r1, r2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <update_led_matrix+0xbc>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fe04 	bl	80016c4 <send_led_data>
		}
	}
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200043d0 	.word	0x200043d0

08001ac8 <reset_matrix>:


void reset_matrix(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	uint8_t row, col;
	send_led_data(&reset_command);
 8001ace:	4831      	ldr	r0, [pc, #196]	; (8001b94 <reset_matrix+0xcc>)
 8001ad0:	f7ff fdf8 	bl	80016c4 <send_led_data>
	gest_predictor.gesture.label = GW_NONE;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <reset_matrix+0xd0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2f1c 	strb.w	r2, [r3, #3868]	; 0xf1c
	HAL_Delay(100);
 8001adc:	2064      	movs	r0, #100	; 0x64
 8001ade:	f000 f9b1 	bl	8001e44 <HAL_Delay>

	for (row = 0; row < MAX_QUADRANT_Y; row++){
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e038      	b.n	8001b5a <reset_matrix+0x92>
			for (col = 0; col < MAX_QUADRANT_X; col++){
 8001ae8:	2300      	movs	r3, #0
 8001aea:	71bb      	strb	r3, [r7, #6]
 8001aec:	e02f      	b.n	8001b4e <reset_matrix+0x86>
				LEDMatrix[row][col].row = row;
 8001aee:	79f9      	ldrb	r1, [r7, #7]
 8001af0:	79ba      	ldrb	r2, [r7, #6]
 8001af2:	482a      	ldr	r0, [pc, #168]	; (8001b9c <reset_matrix+0xd4>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2296      	movs	r2, #150	; 0x96
 8001afe:	fb01 f202 	mul.w	r2, r1, r2
 8001b02:	4413      	add	r3, r2
 8001b04:	4403      	add	r3, r0
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	701a      	strb	r2, [r3, #0]
				LEDMatrix[row][col].column = col;
 8001b0a:	79f9      	ldrb	r1, [r7, #7]
 8001b0c:	79ba      	ldrb	r2, [r7, #6]
 8001b0e:	4823      	ldr	r0, [pc, #140]	; (8001b9c <reset_matrix+0xd4>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2296      	movs	r2, #150	; 0x96
 8001b1a:	fb01 f202 	mul.w	r2, r1, r2
 8001b1e:	4413      	add	r3, r2
 8001b20:	4403      	add	r3, r0
 8001b22:	3301      	adds	r3, #1
 8001b24:	79ba      	ldrb	r2, [r7, #6]
 8001b26:	701a      	strb	r2, [r3, #0]
//					LEDMatrix[row][col].G = MAX_BRIGHTNESS;
//					LEDMatrix[row][col].B = MAX_BRIGHTNESS;
//					send_led_data(&LEDMatrix[row][col]);
//					continue;
//				}
				set_led_color(&LEDMatrix[row][col], Black);
 8001b28:	79f9      	ldrb	r1, [r7, #7]
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2296      	movs	r2, #150	; 0x96
 8001b36:	fb01 f202 	mul.w	r2, r1, r2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <reset_matrix+0xd4>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fd68 	bl	8001618 <set_led_color>
			for (col = 0; col < MAX_QUADRANT_X; col++){
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	71bb      	strb	r3, [r7, #6]
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	2b18      	cmp	r3, #24
 8001b52:	d9cc      	bls.n	8001aee <reset_matrix+0x26>
	for (row = 0; row < MAX_QUADRANT_Y; row++){
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3301      	adds	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b13      	cmp	r3, #19
 8001b5e:	d9c3      	bls.n	8001ae8 <reset_matrix+0x20>
//				LEDMatrix[row][col].color = Black;
//				LEDMatrix[row][col].brightness = 0;
			}
	}
	set_led_color(&LEDMatrix[0][1], White);
 8001b60:	2104      	movs	r1, #4
 8001b62:	480f      	ldr	r0, [pc, #60]	; (8001ba0 <reset_matrix+0xd8>)
 8001b64:	f7ff fd58 	bl	8001618 <set_led_color>
	set_led_color(&LEDMatrix[1][0], White);
 8001b68:	2104      	movs	r1, #4
 8001b6a:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <reset_matrix+0xdc>)
 8001b6c:	f7ff fd54 	bl	8001618 <set_led_color>
	set_led_color(&LEDMatrix[1][1], White);
 8001b70:	2104      	movs	r1, #4
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <reset_matrix+0xe0>)
 8001b74:	f7ff fd50 	bl	8001618 <set_led_color>
	send_led_data(&LEDMatrix[0][1]);
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <reset_matrix+0xd8>)
 8001b7a:	f7ff fda3 	bl	80016c4 <send_led_data>
	send_led_data(&LEDMatrix[1][0]);
 8001b7e:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <reset_matrix+0xdc>)
 8001b80:	f7ff fda0 	bl	80016c4 <send_led_data>
	send_led_data(&LEDMatrix[1][1]);
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <reset_matrix+0xe0>)
 8001b86:	f7ff fd9d 	bl	80016c4 <send_led_data>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20004f88 	.word	0x20004f88
 8001b98:	20002a58 	.word	0x20002a58
 8001b9c:	200043d0 	.word	0x200043d0
 8001ba0:	200043d6 	.word	0x200043d6
 8001ba4:	20004466 	.word	0x20004466
 8001ba8:	2000446c 	.word	0x2000446c

08001bac <matrix_app_main>:

uint8_t matrix_app_main(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	// variables
	uint8_t status = VL53LMZ_STATUS_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]
//	uint32_t rot_percent = 0;

	// initialization
    status |= init_tof(&Sensor1Cfg);
 8001bb6:	484a      	ldr	r0, [pc, #296]	; (8001ce0 <matrix_app_main+0x134>)
 8001bb8:	f7ff fc7c 	bl	80014b4 <init_tof>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	71fb      	strb	r3, [r7, #7]

    status |= init_tracking();
 8001bc6:	f7ff fca5 	bl	8001514 <init_tracking>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	71fb      	strb	r3, [r7, #7]

    init_matrix();
 8001bd4:	f7ff fce0 	bl	8001598 <init_matrix>

	status |= vl53lmz_start_ranging(&Sensor1Cfg);
 8001bd8:	4841      	ldr	r0, [pc, #260]	; (8001ce0 <matrix_app_main+0x134>)
 8001bda:	f004 fb33 	bl	8006244 <vl53lmz_start_ranging>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	71fb      	strb	r3, [r7, #7]
	ranging = 1;
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <matrix_app_main+0x138>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]

    // begin app
    while (1){
    	status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8001bee:	493e      	ldr	r1, [pc, #248]	; (8001ce8 <matrix_app_main+0x13c>)
 8001bf0:	483b      	ldr	r0, [pc, #236]	; (8001ce0 <matrix_app_main+0x134>)
 8001bf2:	f7ff fda5 	bl	8001740 <sample_once>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	71fb      	strb	r3, [r7, #7]

    	status |= SEN_CopyRangingData(&sensor_data, &Sensor1Results);
 8001c00:	4939      	ldr	r1, [pc, #228]	; (8001ce8 <matrix_app_main+0x13c>)
 8001c02:	483a      	ldr	r0, [pc, #232]	; (8001cec <matrix_app_main+0x140>)
 8001c04:	f7ff fdbe 	bl	8001784 <SEN_CopyRangingData>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	71fb      	strb	r3, [r7, #7]

		status |= GW_run(&gest_predictor, &hand_tracker, &sensor_data);
 8001c12:	4a36      	ldr	r2, [pc, #216]	; (8001cec <matrix_app_main+0x140>)
 8001c14:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <matrix_app_main+0x144>)
 8001c16:	4837      	ldr	r0, [pc, #220]	; (8001cf4 <matrix_app_main+0x148>)
 8001c18:	f006 f958 	bl	8007ecc <GW_run>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	71fb      	strb	r3, [r7, #7]
//
		if (gest_predictor.gesture.label == GW_TOWARD){ // brush change
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <matrix_app_main+0x148>)
 8001c2c:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d111      	bne.n	8001c58 <matrix_app_main+0xac>
			if (++my_brush.cur_color == 4){my_brush.cur_color = 0;}
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <matrix_app_main+0x14c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <matrix_app_main+0x14c>)
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <matrix_app_main+0x14c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d102      	bne.n	8001c4e <matrix_app_main+0xa2>
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <matrix_app_main+0x14c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
			gest_predictor.gesture.label = GW_NONE;
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <matrix_app_main+0x148>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2f1c 	strb.w	r2, [r3, #3868]	; 0xf1c
 8001c56:	e00b      	b.n	8001c70 <matrix_app_main+0xc4>
		}
		else if (gest_predictor.gesture.label == GW_UP){
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <matrix_app_main+0x148>)
 8001c5a:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d106      	bne.n	8001c70 <matrix_app_main+0xc4>
			reset_matrix();
 8001c62:	f7ff ff31 	bl	8001ac8 <reset_matrix>
			gest_predictor.gesture.label = GW_NONE;
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <matrix_app_main+0x148>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2f1c 	strb.w	r2, [r3, #3868]	; 0xf1c
			continue;
 8001c6e:	e035      	b.n	8001cdc <matrix_app_main+0x130>
		}
//		if (ranging % 3 == 0) {do_decay();}
//		do_decay();
		if(hand_tracker.hand.found && hand_tracker.hand.hand_z < 600){
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <matrix_app_main+0x144>)
 8001c72:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01e      	beq.n	8001cb8 <matrix_app_main+0x10c>
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <matrix_app_main+0x144>)
 8001c7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c80:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001cfc <matrix_app_main+0x150>
 8001c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d514      	bpl.n	8001cb8 <matrix_app_main+0x10c>
			update_led_matrix(&hand_tracker.hand, my_brush.cur_color);
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <matrix_app_main+0x14c>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	481a      	ldr	r0, [pc, #104]	; (8001d00 <matrix_app_main+0x154>)
 8001c96:	f7ff feb7 	bl	8001a08 <update_led_matrix>
			set_led_color(&LEDMatrix[0][0], my_brush.cur_color);
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <matrix_app_main+0x14c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4818      	ldr	r0, [pc, #96]	; (8001d04 <matrix_app_main+0x158>)
 8001ca2:	f7ff fcb9 	bl	8001618 <set_led_color>
			send_led_data(&LEDMatrix[0][0]);
 8001ca6:	4817      	ldr	r0, [pc, #92]	; (8001d04 <matrix_app_main+0x158>)
 8001ca8:	f7ff fd0c 	bl	80016c4 <send_led_data>
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2120      	movs	r1, #32
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <matrix_app_main+0x15c>)
 8001cb2:	f000 fc13 	bl	80024dc <HAL_GPIO_WritePin>
 8001cb6:	e004      	b.n	8001cc2 <matrix_app_main+0x116>
//    			rot_percent = gest_predictor.gesture.lc_currentLevel;
//    		}

		}
		else {
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2120      	movs	r1, #32
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <matrix_app_main+0x15c>)
 8001cbe:	f000 fc0d 	bl	80024dc <HAL_GPIO_WritePin>
		}


    	if(!ranging){
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <matrix_app_main+0x138>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d191      	bne.n	8001bee <matrix_app_main+0x42>
    		while(1){
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001cca:	2120      	movs	r1, #32
 8001ccc:	480e      	ldr	r0, [pc, #56]	; (8001d08 <matrix_app_main+0x15c>)
 8001cce:	f000 fc1e 	bl	800250e <HAL_GPIO_TogglePin>
    			HAL_Delay(1000);
 8001cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd6:	f000 f8b5 	bl	8001e44 <HAL_Delay>
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001cda:	e7f6      	b.n	8001cca <matrix_app_main+0x11e>
    	status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8001cdc:	e787      	b.n	8001bee <matrix_app_main+0x42>
 8001cde:	bf00      	nop
 8001ce0:	20000138 	.word	0x20000138
 8001ce4:	20000134 	.word	0x20000134
 8001ce8:	20002508 	.word	0x20002508
 8001cec:	20004170 	.word	0x20004170
 8001cf0:	200039b8 	.word	0x200039b8
 8001cf4:	20002a58 	.word	0x20002a58
 8001cf8:	20004f90 	.word	0x20004f90
 8001cfc:	44160000 	.word	0x44160000
 8001d00:	200039d4 	.word	0x200039d4
 8001d04:	200043d0 	.word	0x200043d0
 8001d08:	40020000 	.word	0x40020000

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d28:	4c0b      	ldr	r4, [pc, #44]	; (8001d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d36:	f7ff fbab 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f007 f9b5 	bl	80090a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff f8cd 	bl	8000edc <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d50:	08021250 	.word	0x08021250
  ldr r2, =_sbss
 8001d54:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d58:	20005158 	.word	0x20005158

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 f94f 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fa78 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f967 	bl	8002096 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de0:	f000 f92f 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20004f9c 	.word	0x20004f9c

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20004f9c 	.word	0x20004f9c

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff29 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff3e 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff31 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff feb6 	bl	8001e2c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e052      	b.n	8002186 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0216 	bic.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <HAL_DMA_Abort+0x62>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0208 	bic.w	r2, r2, #8
 800211e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002130:	e013      	b.n	800215a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002132:	f7ff fe7b 	bl	8001e2c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b05      	cmp	r3, #5
 800213e:	d90c      	bls.n	800215a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2203      	movs	r2, #3
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e015      	b.n	8002186 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e4      	bne.n	8002132 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	223f      	movs	r2, #63	; 0x3f
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d004      	beq.n	80021ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e00c      	b.n	80021c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2205      	movs	r2, #5
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e159      	b.n	80024a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8148 	bne.w	800249e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a2 	beq.w	800249e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_GPIO_Init+0x2ec>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a49      	ldr	r2, [pc, #292]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x202>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <HAL_GPIO_Init+0x2f4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x1fe>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a47      	ldr	r2, [pc, #284]	; (80024cc <HAL_GPIO_Init+0x2f8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x1fa>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a46      	ldr	r2, [pc, #280]	; (80024d0 <HAL_GPIO_Init+0x2fc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x1f6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <HAL_GPIO_Init+0x300>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x1f2>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	; (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_GPIO_Init+0x304>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x304>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_GPIO_Init+0x304>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_GPIO_Init+0x304>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_GPIO_Init+0x304>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f aea2 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	619a      	str	r2, [r3, #24]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	041a      	lsls	r2, r3, #16
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43d9      	mvns	r1, r3
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	400b      	ands	r3, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fe68 	bl	8001238 <HAL_GPIO_EXTI_Callback>
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e12b      	b.n	80027de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fe9c 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d8:	f001 fd62 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 80025dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a81      	ldr	r2, [pc, #516]	; (80027e8 <HAL_I2C_Init+0x274>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d807      	bhi.n	80025f8 <HAL_I2C_Init+0x84>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a80      	ldr	r2, [pc, #512]	; (80027ec <HAL_I2C_Init+0x278>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e006      	b.n	8002606 <HAL_I2C_Init+0x92>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a7d      	ldr	r2, [pc, #500]	; (80027f0 <HAL_I2C_Init+0x27c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e7      	b.n	80027de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a78      	ldr	r2, [pc, #480]	; (80027f4 <HAL_I2C_Init+0x280>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a6a      	ldr	r2, [pc, #424]	; (80027e8 <HAL_I2C_Init+0x274>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d802      	bhi.n	8002648 <HAL_I2C_Init+0xd4>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3301      	adds	r3, #1
 8002646:	e009      	b.n	800265c <HAL_I2C_Init+0xe8>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_I2C_Init+0x284>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	3301      	adds	r3, #1
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800266e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	495c      	ldr	r1, [pc, #368]	; (80027e8 <HAL_I2C_Init+0x274>)
 8002678:	428b      	cmp	r3, r1
 800267a:	d819      	bhi.n	80026b0 <HAL_I2C_Init+0x13c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e59      	subs	r1, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb1 f3f3 	udiv	r3, r1, r3
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002690:	400b      	ands	r3, r1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_I2C_Init+0x138>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e59      	subs	r1, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026aa:	e051      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e04f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HAL_I2C_Init+0x168>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e012      	b.n	8002702 <HAL_I2C_Init+0x18e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x196>
 8002706:	2301      	movs	r3, #1
 8002708:	e022      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <HAL_I2C_Init+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e58      	subs	r0, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	fbb0 f3f3 	udiv	r3, r0, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6809      	ldr	r1, [r1, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800277e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6911      	ldr	r1, [r2, #16]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	000186a0 	.word	0x000186a0
 80027ec:	001e847f 	.word	0x001e847f
 80027f0:	003d08ff 	.word	0x003d08ff
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fb0c 	bl	8001e2c <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 80e0 	bne.w	80029e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	4970      	ldr	r1, [pc, #448]	; (80029f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fde8 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e0d3      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Master_Transmit+0x50>
 8002848:	2302      	movs	r3, #2
 800284a:	e0cc      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fbbc 	bl	8003038 <I2C_MasterRequestWrite>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e08d      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e0:	e066      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	6a39      	ldr	r1, [r7, #32]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fe62 	bl	80035b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d107      	bne.n	800290a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d11b      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x188>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fe52 	bl	8003632 <I2C_WaitOnBTFFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01a      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d194      	bne.n	80028e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	00100002 	.word	0x00100002
 80029f4:	ffff0000 	.word	0xffff0000

080029f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	461a      	mov	r2, r3
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff fa0e 	bl	8001e2c <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	f040 820b 	bne.w	8002e36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	497c      	ldr	r1, [pc, #496]	; (8002c1c <HAL_I2C_Master_Receive+0x224>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fcea 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	e1fe      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2C_Master_Receive+0x50>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e1f7      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d007      	beq.n	8002a6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2222      	movs	r2, #34	; 0x22
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a5c      	ldr	r2, [pc, #368]	; (8002c20 <HAL_I2C_Master_Receive+0x228>)
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fb40 	bl	800313c <I2C_MasterRequestRead>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1b8      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d113      	bne.n	8002af6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e18c      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d11b      	bne.n	8002b36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e16c      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d11b      	bne.n	8002b76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	e14c      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b9c:	e138      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	f200 80f1 	bhi.w	8002d8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d123      	bne.n	8002bf8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fd7d 	bl	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e139      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf6:	e10b      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d14e      	bne.n	8002c9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	2200      	movs	r2, #0
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <HAL_I2C_Master_Receive+0x22c>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fbfa 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e10e      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
 8002c1a:	bf00      	nop
 8002c1c:	00100002 	.word	0x00100002
 8002c20:	ffff0000 	.word	0xffff0000
 8002c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c9c:	e0b8      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4966      	ldr	r1, [pc, #408]	; (8002e40 <HAL_I2C_Master_Receive+0x448>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fbab 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0bf      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2200      	movs	r2, #0
 8002d02:	494f      	ldr	r1, [pc, #316]	; (8002e40 <HAL_I2C_Master_Receive+0x448>)
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb7d 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e091      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d88:	e042      	b.n	8002e10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fc90 	bl	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e04c      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d118      	bne.n	8002e10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f aec2 	bne.w	8002b9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	00010004 	.word	0x00010004

08002e44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	817b      	strh	r3, [r7, #10]
 8002e56:	460b      	mov	r3, r1
 8002e58:	813b      	strh	r3, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5e:	f7fe ffe5 	bl	8001e2c <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	f040 80d9 	bne.w	8003024 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2319      	movs	r3, #25
 8002e78:	2201      	movs	r2, #1
 8002e7a:	496d      	ldr	r1, [pc, #436]	; (8003030 <HAL_I2C_Mem_Write+0x1ec>)
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fac1 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0cc      	b.n	8003026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_Mem_Write+0x56>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0c5      	b.n	8003026 <HAL_I2C_Mem_Write+0x1e2>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d007      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2221      	movs	r2, #33	; 0x21
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2240      	movs	r2, #64	; 0x40
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_I2C_Mem_Write+0x1f0>)
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f02:	88f8      	ldrh	r0, [r7, #6]
 8002f04:	893a      	ldrh	r2, [r7, #8]
 8002f06:	8979      	ldrh	r1, [r7, #10]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4603      	mov	r3, r0
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f9e0 	bl	80032d8 <I2C_RequestMemoryWrite>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d052      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e081      	b.n	8003026 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb42 	bl	80035b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d107      	bne.n	8002f4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06b      	b.n	8003026 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x180>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d017      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1aa      	bne.n	8002f22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb2e 	bl	8003632 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00d      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d107      	bne.n	8002ff4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e016      	b.n	8003026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	00100002 	.word	0x00100002
 8003034:	ffff0000 	.word	0xffff0000

08003038 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d006      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d003      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003060:	d108      	bne.n	8003074 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e00b      	b.n	800308c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b12      	cmp	r3, #18
 800307a:	d107      	bne.n	800308c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f9b3 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d103      	bne.n	80030bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e035      	b.n	800312c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c8:	d108      	bne.n	80030dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	e01b      	b.n	8003114 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030dc:	897b      	ldrh	r3, [r7, #10]
 80030de:	11db      	asrs	r3, r3, #7
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f063 030f 	orn	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	490e      	ldr	r1, [pc, #56]	; (8003134 <I2C_MasterRequestWrite+0xfc>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f9d9 	bl	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e010      	b.n	800312c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4907      	ldr	r1, [pc, #28]	; (8003138 <I2C_MasterRequestWrite+0x100>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f9c9 	bl	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	00010008 	.word	0x00010008
 8003138:	00010002 	.word	0x00010002

0800313c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003160:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d006      	beq.n	8003176 <I2C_MasterRequestRead+0x3a>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d003      	beq.n	8003176 <I2C_MasterRequestRead+0x3a>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003174:	d108      	bne.n	8003188 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e00b      	b.n	80031a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	2b11      	cmp	r3, #17
 800318e:	d107      	bne.n	80031a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f929 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	d103      	bne.n	80031d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e079      	b.n	80032c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031dc:	d108      	bne.n	80031f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	611a      	str	r2, [r3, #16]
 80031ee:	e05f      	b.n	80032b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031f0:	897b      	ldrh	r3, [r7, #10]
 80031f2:	11db      	asrs	r3, r3, #7
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0306 	and.w	r3, r3, #6
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f063 030f 	orn	r3, r3, #15
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4930      	ldr	r1, [pc, #192]	; (80032d0 <I2C_MasterRequestRead+0x194>)
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f94f 	bl	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e054      	b.n	80032c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4929      	ldr	r1, [pc, #164]	; (80032d4 <I2C_MasterRequestRead+0x198>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f93f 	bl	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e044      	b.n	80032c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003262:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f8c7 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d103      	bne.n	8003294 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e017      	b.n	80032c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003298:	897b      	ldrh	r3, [r7, #10]
 800329a:	11db      	asrs	r3, r3, #7
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f003 0306 	and.w	r3, r3, #6
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f063 030e 	orn	r3, r3, #14
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <I2C_MasterRequestRead+0x198>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f8fb 	bl	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010008 	.word	0x00010008
 80032d4:	00010002 	.word	0x00010002

080032d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	2200      	movs	r2, #0
 800330a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f878 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003328:	d103      	bne.n	8003332 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e05f      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003344:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	492d      	ldr	r1, [pc, #180]	; (8003400 <I2C_RequestMemoryWrite+0x128>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f8b0 	bl	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e04c      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f91a 	bl	80035b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b04      	cmp	r3, #4
 8003388:	d107      	bne.n	800339a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e02b      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	e021      	b.n	80033f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033b0:	893b      	ldrh	r3, [r7, #8]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	6a39      	ldr	r1, [r7, #32]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8f4 	bl	80035b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d107      	bne.n	80033e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e005      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00010002 	.word	0x00010002

08003404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003414:	e025      	b.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341c:	d021      	beq.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fe fd05 	bl	8001e2c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d116      	bne.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e023      	b.n	80034aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10d      	bne.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x84>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	e00c      	b.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d0b6      	beq.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c0:	e051      	b.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d123      	bne.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0204 	orr.w	r2, r3, #4
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e046      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003520:	d021      	beq.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe fc83 	bl	8001e2c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d116      	bne.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e020      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10c      	bne.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	e00b      	b.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d18d      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035bc:	e02d      	b.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f8ce 	bl	8003760 <I2C_IsAcknowledgeFailed>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e02d      	b.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d4:	d021      	beq.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fe fc29 	bl	8001e2c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d116      	bne.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e007      	b.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d1ca      	bne.n	80035be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800363e:	e02d      	b.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f88d 	bl	8003760 <I2C_IsAcknowledgeFailed>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e02d      	b.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d021      	beq.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fe fbe8 	bl	8001e2c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e007      	b.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d1ca      	bne.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c0:	e042      	b.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d119      	bne.n	8003704 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0210 	mvn.w	r2, #16
 80036d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e029      	b.n	8003758 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003704:	f7fe fb92 	bl	8001e2c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e007      	b.n	8003758 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d1b5      	bne.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d11b      	bne.n	80037b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003780:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e267      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d075      	beq.n	80038ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d00c      	beq.n	8003804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ea:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d112      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4b82      	ldr	r3, [pc, #520]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d10b      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	4b7e      	ldr	r3, [pc, #504]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x108>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d157      	bne.n	80038c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e242      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x74>
 8003826:	4b76      	ldr	r3, [pc, #472]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a75      	ldr	r2, [pc, #468]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x98>
 800383e:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6f      	ldr	r2, [pc, #444]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6c      	ldr	r2, [pc, #432]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003858:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a68      	ldr	r2, [pc, #416]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe fad8 	bl	8001e2c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003880:	f7fe fad4 	bl	8001e2c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e207      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b5b      	ldr	r3, [pc, #364]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xc0>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe fac4 	bl	8001e2c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fe fac0 	bl	8001e2c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1f3      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0xe8>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11c      	bne.n	8003928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x152>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1c7      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4937      	ldr	r1, [pc, #220]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	e03a      	b.n	800399e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <HAL_RCC_OscConfig+0x244>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe fa79 	bl	8001e2c <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe fa75 	bl	8001e2c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1a8      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4925      	ldr	r1, [pc, #148]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e015      	b.n	800399e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCC_OscConfig+0x244>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fa58 	bl	8001e2c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003980:	f7fe fa54 	bl	8001e2c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e187      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d036      	beq.n	8003a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_RCC_OscConfig+0x248>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe fa38 	bl	8001e2c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fe fa34 	bl	8001e2c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e167      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x200>
 80039de:	e01b      	b.n	8003a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_OscConfig+0x248>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fa21 	bl	8001e2c <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ec:	e00e      	b.n	8003a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ee:	f7fe fa1d 	bl	8001e2c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d907      	bls.n	8003a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e150      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
 8003a00:	40023800 	.word	0x40023800
 8003a04:	42470000 	.word	0x42470000
 8003a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ea      	bne.n	80039ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8097 	beq.w	8003b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2a:	4b81      	ldr	r3, [pc, #516]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	4b7d      	ldr	r3, [pc, #500]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b7a      	ldr	r3, [pc, #488]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b77      	ldr	r3, [pc, #476]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b74      	ldr	r3, [pc, #464]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a73      	ldr	r2, [pc, #460]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe f9dd 	bl	8001e2c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fe f9d9 	bl	8001e2c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e10c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d106      	bne.n	8003aaa <HAL_RCC_OscConfig+0x2ea>
 8003a9c:	4b64      	ldr	r3, [pc, #400]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a63      	ldr	r2, [pc, #396]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	e01c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x324>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x30c>
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a5e      	ldr	r2, [pc, #376]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	4b5c      	ldr	r3, [pc, #368]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a5b      	ldr	r2, [pc, #364]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x324>
 8003acc:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a57      	ldr	r2, [pc, #348]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ade:	f023 0304 	bic.w	r3, r3, #4
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe f99e 	bl	8001e2c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fe f99a 	bl	8001e2c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0cb      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0a:	4b49      	ldr	r3, [pc, #292]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ee      	beq.n	8003af4 <HAL_RCC_OscConfig+0x334>
 8003b16:	e014      	b.n	8003b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fe f988 	bl	8001e2c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fe f984 	bl	8001e2c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0b5      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ee      	bne.n	8003b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a1 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b5e:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d05c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d141      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCC_OscConfig+0x478>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe f958 	bl	8001e2c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe f954 	bl	8001e2c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e087      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	019b      	lsls	r3, r3, #6
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	491b      	ldr	r1, [pc, #108]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x478>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe f92d 	bl	8001e2c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe f929 	bl	8001e2c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e05c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x416>
 8003bf4:	e054      	b.n	8003ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_RCC_OscConfig+0x478>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe f916 	bl	8001e2c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe f912 	bl	8001e2c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e045      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x444>
 8003c22:	e03d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e038      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40007000 	.word	0x40007000
 8003c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <HAL_RCC_OscConfig+0x4ec>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d028      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d121      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d11a      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d111      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	3b01      	subs	r3, #1
 8003c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800

08003cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0cc      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b68      	ldr	r3, [pc, #416]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d90c      	bls.n	8003cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d044      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d119      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e067      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4934      	ldr	r1, [pc, #208]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da0:	f7fe f844 	bl	8001e2c <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fe f840 	bl	8001e2c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e04f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d20c      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd ffa4 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	0800b524 	.word	0x0800b524
 8003e74:	20000000 	.word	0x20000000
 8003e78:	20000004 	.word	0x20000004

08003e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b094      	sub	sp, #80	; 0x50
 8003e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	647b      	str	r3, [r7, #68]	; 0x44
 8003e88:	2300      	movs	r3, #0
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e94:	4b79      	ldr	r3, [pc, #484]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x40>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	f200 80e1 	bhi.w	8004068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eae:	e0db      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b73      	ldr	r3, [pc, #460]	; (8004080 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003eb4:	e0db      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb6:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_RCC_GetSysClockFreq+0x208>)
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eba:	e0d8      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ebc:	4b6f      	ldr	r3, [pc, #444]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec6:	4b6d      	ldr	r3, [pc, #436]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d063      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	2200      	movs	r2, #0
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4621      	mov	r1, r4
 8003f08:	1a51      	subs	r1, r2, r1
 8003f0a:	6139      	str	r1, [r7, #16]
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f20:	4659      	mov	r1, fp
 8003f22:	018b      	lsls	r3, r1, #6
 8003f24:	4651      	mov	r1, sl
 8003f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	018a      	lsls	r2, r1, #6
 8003f2e:	4651      	mov	r1, sl
 8003f30:	ebb2 0801 	subs.w	r8, r2, r1
 8003f34:	4659      	mov	r1, fp
 8003f36:	eb63 0901 	sbc.w	r9, r3, r1
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4699      	mov	r9, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	eb18 0303 	adds.w	r3, r8, r3
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	eb49 0303 	adc.w	r3, r9, r3
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	024b      	lsls	r3, r1, #9
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f78:	4621      	mov	r1, r4
 8003f7a:	024a      	lsls	r2, r1, #9
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f8c:	f7fc fe28 	bl	8000be0 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f98:	e058      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0159      	lsls	r1, r3, #5
 8003fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc6:	0150      	lsls	r0, r2, #5
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fec:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	464b      	mov	r3, r9
 8004010:	eb45 0303 	adc.w	r3, r5, r3
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004022:	4629      	mov	r1, r5
 8004024:	028b      	lsls	r3, r1, #10
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800402c:	4621      	mov	r1, r4
 800402e:	028a      	lsls	r2, r1, #10
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004036:	2200      	movs	r2, #0
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	61fa      	str	r2, [r7, #28]
 800403c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004040:	f7fc fdce 	bl	8000be0 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_GetSysClockFreq+0x200>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800405c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800405e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004066:	e002      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetSysClockFreq+0x204>)
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800406c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004070:	4618      	mov	r0, r3
 8004072:	3750      	adds	r7, #80	; 0x50
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	00f42400 	.word	0x00f42400
 8004084:	007a1200 	.word	0x007a1200

08004088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_RCC_GetHCLKFreq+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000000 	.word	0x20000000

080040a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a4:	f7ff fff0 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	0a9b      	lsrs	r3, r3, #10
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800b534 	.word	0x0800b534

080040c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040cc:	f7ff ffdc 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0b5b      	lsrs	r3, r3, #13
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	0800b534 	.word	0x0800b534

080040f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e03f      	b.n	8004182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd f926 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fc7b 	bl	8004a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b0ba      	sub	sp, #232	; 0xe8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
 80041de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fb65 	bl	80048ba <UART_Receive_IT>
      return;
 80041f0:	e256      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80de 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80d1 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 81ed 	beq.w	8004696 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 faf0 	bl	80048ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_UART_IRQHandler+0x17a>
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04f      	beq.n	80043a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f9f8 	bl	80046fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d141      	bne.n	800439e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800434a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1d9      	bne.n	800431a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	4a7d      	ldr	r2, [pc, #500]	; (8004568 <HAL_UART_IRQHandler+0x3dc>)
 8004374:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd ff07 	bl	800218e <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e00e      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f99a 	bl	80046d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00a      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f996 	bl	80046d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e006      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f992 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043b2:	e170      	b.n	8004696 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	bf00      	nop
    return;
 80043b6:	e16e      	b.n	8004696 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 814a 	bne.w	8004656 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8143 	beq.w	8004656 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 813c 	beq.w	8004656 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	f040 80b4 	bne.w	800456c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8140 	beq.w	800469a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004422:	429a      	cmp	r2, r3
 8004424:	f080 8139 	bcs.w	800469a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	f000 8088 	beq.w	800454e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800446a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800446e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1d9      	bne.n	800443e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800449a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e1      	bne.n	800448a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e3      	bne.n	80044c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800451c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004530:	65ba      	str	r2, [r7, #88]	; 0x58
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e3      	bne.n	800450c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd fdb0 	bl	80020ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004556:	b29b      	uxth	r3, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	b29b      	uxth	r3, r3
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8c0 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004564:	e099      	b.n	800469a <HAL_UART_IRQHandler+0x50e>
 8004566:	bf00      	nop
 8004568:	080047c3 	.word	0x080047c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 808b 	beq.w	800469e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8086 	beq.w	800469e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045b6:	647a      	str	r2, [r7, #68]	; 0x44
 80045b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	623b      	str	r3, [r7, #32]
   return(result);
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045ee:	633a      	str	r2, [r7, #48]	; 0x30
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e3      	bne.n	80045ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004634:	61fa      	str	r2, [r7, #28]
 8004636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	617b      	str	r3, [r7, #20]
   return(result);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e3      	bne.n	8004610 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f848 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004654:	e023      	b.n	800469e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_UART_IRQHandler+0x4ea>
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8bb 	bl	80047ea <UART_Transmit_IT>
    return;
 8004674:	e014      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <HAL_UART_IRQHandler+0x514>
 8004682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8fb 	bl	800488a <UART_EndTransmit_IT>
    return;
 8004694:	e004      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
      return;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
      return;
 800469e:	bf00      	nop
  }
}
 80046a0:	37e8      	adds	r7, #232	; 0xe8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop

080046a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b095      	sub	sp, #84	; 0x54
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004724:	643a      	str	r2, [r7, #64]	; 0x40
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800472a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e5      	bne.n	8004704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3314      	adds	r3, #20
 800473e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	61fb      	str	r3, [r7, #28]
   return(result);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3314      	adds	r3, #20
 8004756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e5      	bne.n	8004738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	2b01      	cmp	r3, #1
 8004772:	d119      	bne.n	80047a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60bb      	str	r3, [r7, #8]
   return(result);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	647b      	str	r3, [r7, #68]	; 0x44
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004794:	61ba      	str	r2, [r7, #24]
 8004796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6979      	ldr	r1, [r7, #20]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	613b      	str	r3, [r7, #16]
   return(result);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e5      	bne.n	8004774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047b6:	bf00      	nop
 80047b8:	3754      	adds	r7, #84	; 0x54
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff ff77 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b21      	cmp	r3, #33	; 0x21
 80047fc:	d13e      	bne.n	800487c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	d114      	bne.n	8004832 <UART_Transmit_IT+0x48>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d110      	bne.n	8004832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	621a      	str	r2, [r3, #32]
 8004830:	e008      	b.n	8004844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6211      	str	r1, [r2, #32]
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29b      	uxth	r3, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4619      	mov	r1, r3
 8004852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fefc 	bl	80046a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08c      	sub	sp, #48	; 0x30
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b22      	cmp	r3, #34	; 0x22
 80048cc:	f040 80ab 	bne.w	8004a26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d8:	d117      	bne.n	800490a <UART_Receive_IT+0x50>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d113      	bne.n	800490a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	1c9a      	adds	r2, r3, #2
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
 8004908:	e026      	b.n	8004958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	d007      	beq.n	800492e <UART_Receive_IT+0x74>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <UART_Receive_IT+0x82>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e008      	b.n	800494e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004948:	b2da      	uxtb	r2, r3
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4619      	mov	r1, r3
 8004966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004968:	2b00      	cmp	r3, #0
 800496a:	d15a      	bne.n	8004a22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0220 	bic.w	r2, r2, #32
 800497a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d135      	bne.n	8004a18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	613b      	str	r3, [r7, #16]
   return(result);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	623a      	str	r2, [r7, #32]
 80049d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d10a      	bne.n	8004a0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fe67 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
 8004a16:	e002      	b.n	8004a1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fe4f 	bl	80046bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e002      	b.n	8004a28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3730      	adds	r7, #48	; 0x30
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b0c0      	sub	sp, #256	; 0x100
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	68d9      	ldr	r1, [r3, #12]
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	ea40 0301 	orr.w	r3, r0, r1
 8004a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a88:	f021 010c 	bic.w	r1, r1, #12
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a96:	430b      	orrs	r3, r1
 8004a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	6999      	ldr	r1, [r3, #24]
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	ea40 0301 	orr.w	r3, r0, r1
 8004ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b8f      	ldr	r3, [pc, #572]	; (8004cfc <UART_SetConfig+0x2cc>)
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d005      	beq.n	8004ad0 <UART_SetConfig+0xa0>
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b8d      	ldr	r3, [pc, #564]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d104      	bne.n	8004ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7ff fafa 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8004ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ad8:	e003      	b.n	8004ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ada:	f7ff fae1 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8004ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	f040 810c 	bne.w	8004d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b02:	4622      	mov	r2, r4
 8004b04:	462b      	mov	r3, r5
 8004b06:	1891      	adds	r1, r2, r2
 8004b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b0a:	415b      	adcs	r3, r3
 8004b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b12:	4621      	mov	r1, r4
 8004b14:	eb12 0801 	adds.w	r8, r2, r1
 8004b18:	4629      	mov	r1, r5
 8004b1a:	eb43 0901 	adc.w	r9, r3, r1
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b32:	4690      	mov	r8, r2
 8004b34:	4699      	mov	r9, r3
 8004b36:	4623      	mov	r3, r4
 8004b38:	eb18 0303 	adds.w	r3, r8, r3
 8004b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b40:	462b      	mov	r3, r5
 8004b42:	eb49 0303 	adc.w	r3, r9, r3
 8004b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b5e:	460b      	mov	r3, r1
 8004b60:	18db      	adds	r3, r3, r3
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
 8004b64:	4613      	mov	r3, r2
 8004b66:	eb42 0303 	adc.w	r3, r2, r3
 8004b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b74:	f7fc f834 	bl	8000be0 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b61      	ldr	r3, [pc, #388]	; (8004d04 <UART_SetConfig+0x2d4>)
 8004b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	011c      	lsls	r4, r3, #4
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ba8:	4641      	mov	r1, r8
 8004baa:	eb12 0a01 	adds.w	sl, r2, r1
 8004bae:	4649      	mov	r1, r9
 8004bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc8:	4692      	mov	sl, r2
 8004bca:	469b      	mov	fp, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	eb1a 0303 	adds.w	r3, sl, r3
 8004bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	18db      	adds	r3, r3, r3
 8004bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	eb42 0303 	adc.w	r3, r2, r3
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
 8004c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c0a:	f7fb ffe9 	bl	8000be0 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <UART_SetConfig+0x2d4>)
 8004c16:	fba3 2301 	umull	r2, r3, r3, r1
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2264      	movs	r2, #100	; 0x64
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	1acb      	subs	r3, r1, r3
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c2a:	4b36      	ldr	r3, [pc, #216]	; (8004d04 <UART_SetConfig+0x2d4>)
 8004c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c38:	441c      	add	r4, r3
 8004c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c54:	415b      	adcs	r3, r3
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	1851      	adds	r1, r2, r1
 8004c60:	6339      	str	r1, [r7, #48]	; 0x30
 8004c62:	4649      	mov	r1, r9
 8004c64:	414b      	adcs	r3, r1
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c74:	4659      	mov	r1, fp
 8004c76:	00cb      	lsls	r3, r1, #3
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7e:	4651      	mov	r1, sl
 8004c80:	00ca      	lsls	r2, r1, #3
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c90:	464b      	mov	r3, r9
 8004c92:	460a      	mov	r2, r1
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	18db      	adds	r3, r3, r3
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	eb42 0303 	adc.w	r3, r2, r3
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cc6:	f7fb ff8b 	bl	8000be0 <__aeabi_uldivmod>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <UART_SetConfig+0x2d4>)
 8004cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	2164      	movs	r1, #100	; 0x64
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	3332      	adds	r3, #50	; 0x32
 8004ce2:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <UART_SetConfig+0x2d4>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	f003 0207 	and.w	r2, r3, #7
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4422      	add	r2, r4
 8004cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cf8:	e106      	b.n	8004f08 <UART_SetConfig+0x4d8>
 8004cfa:	bf00      	nop
 8004cfc:	40011000 	.word	0x40011000
 8004d00:	40011400 	.word	0x40011400
 8004d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	1891      	adds	r1, r2, r2
 8004d20:	6239      	str	r1, [r7, #32]
 8004d22:	415b      	adcs	r3, r3
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	1854      	adds	r4, r2, r1
 8004d2e:	4649      	mov	r1, r9
 8004d30:	eb43 0501 	adc.w	r5, r3, r1
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	00eb      	lsls	r3, r5, #3
 8004d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d42:	00e2      	lsls	r2, r4, #3
 8004d44:	4614      	mov	r4, r2
 8004d46:	461d      	mov	r5, r3
 8004d48:	4643      	mov	r3, r8
 8004d4a:	18e3      	adds	r3, r4, r3
 8004d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d50:	464b      	mov	r3, r9
 8004d52:	eb45 0303 	adc.w	r3, r5, r3
 8004d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d76:	4629      	mov	r1, r5
 8004d78:	008b      	lsls	r3, r1, #2
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d80:	4621      	mov	r1, r4
 8004d82:	008a      	lsls	r2, r1, #2
 8004d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d88:	f7fb ff2a 	bl	8000be0 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4b60      	ldr	r3, [pc, #384]	; (8004f14 <UART_SetConfig+0x4e4>)
 8004d92:	fba3 2302 	umull	r2, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	011c      	lsls	r4, r3, #4
 8004d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	61b9      	str	r1, [r7, #24]
 8004db4:	415b      	adcs	r3, r3
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	1851      	adds	r1, r2, r1
 8004dc0:	6139      	str	r1, [r7, #16]
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	414b      	adcs	r3, r1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	00cb      	lsls	r3, r1, #3
 8004dd8:	4651      	mov	r1, sl
 8004dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dde:	4651      	mov	r1, sl
 8004de0:	00ca      	lsls	r2, r1, #3
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	4642      	mov	r2, r8
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df0:	464b      	mov	r3, r9
 8004df2:	460a      	mov	r2, r1
 8004df4:	eb42 0303 	adc.w	r3, r2, r3
 8004df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e14:	4649      	mov	r1, r9
 8004e16:	008b      	lsls	r3, r1, #2
 8004e18:	4641      	mov	r1, r8
 8004e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1e:	4641      	mov	r1, r8
 8004e20:	008a      	lsls	r2, r1, #2
 8004e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e26:	f7fb fedb 	bl	8000be0 <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	4b38      	ldr	r3, [pc, #224]	; (8004f14 <UART_SetConfig+0x4e4>)
 8004e32:	fba3 2301 	umull	r2, r3, r3, r1
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	2264      	movs	r2, #100	; 0x64
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	1acb      	subs	r3, r1, r3
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	3332      	adds	r3, #50	; 0x32
 8004e44:	4a33      	ldr	r2, [pc, #204]	; (8004f14 <UART_SetConfig+0x4e4>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e50:	441c      	add	r4, r3
 8004e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e56:	2200      	movs	r2, #0
 8004e58:	673b      	str	r3, [r7, #112]	; 0x70
 8004e5a:	677a      	str	r2, [r7, #116]	; 0x74
 8004e5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e70:	4641      	mov	r1, r8
 8004e72:	1851      	adds	r1, r2, r1
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	4649      	mov	r1, r9
 8004e78:	414b      	adcs	r3, r1
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e88:	4659      	mov	r1, fp
 8004e8a:	00cb      	lsls	r3, r1, #3
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e92:	4651      	mov	r1, sl
 8004e94:	00ca      	lsls	r2, r1, #3
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	460a      	mov	r2, r1
 8004ea6:	eb42 0303 	adc.w	r3, r2, r3
 8004eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb6:	667a      	str	r2, [r7, #100]	; 0x64
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	008b      	lsls	r3, r1, #2
 8004ec8:	4641      	mov	r1, r8
 8004eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ece:	4641      	mov	r1, r8
 8004ed0:	008a      	lsls	r2, r1, #2
 8004ed2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ed6:	f7fb fe83 	bl	8000be0 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <UART_SetConfig+0x4e4>)
 8004ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	2164      	movs	r1, #100	; 0x64
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	3332      	adds	r3, #50	; 0x32
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <UART_SetConfig+0x4e4>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f003 020f 	and.w	r2, r3, #15
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4422      	add	r2, r4
 8004f06:	609a      	str	r2, [r3, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f14:	51eb851f 	.word	0x51eb851f

08004f18 <RdByte>:

uint8_t RdByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	460b      	mov	r3, r1
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8004f34:	897b      	ldrh	r3, [r7, #10]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8819      	ldrh	r1, [r3, #0]
 8004f3e:	f107 0214 	add.w	r2, r7, #20
 8004f42:	2364      	movs	r3, #100	; 0x64
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2302      	movs	r3, #2
 8004f48:	480c      	ldr	r0, [pc, #48]	; (8004f7c <RdByte+0x64>)
 8004f4a:	f7fd fc57 	bl	80027fc <HAL_I2C_Master_Transmit>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8819      	ldrh	r1, [r3, #0]
 8004f56:	f107 0210 	add.w	r2, r7, #16
 8004f5a:	2364      	movs	r3, #100	; 0x64
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4806      	ldr	r0, [pc, #24]	; (8004f7c <RdByte+0x64>)
 8004f62:	f7fd fd49 	bl	80029f8 <HAL_I2C_Master_Receive>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8004f6a:	7c3a      	ldrb	r2, [r7, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");
	return status;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	2000009c 	.word	0x2000009c

08004f80 <WrByte>:

uint8_t WrByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8004fa4:	787b      	ldrb	r3, [r7, #1]
 8004fa6:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 3, 100);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8819      	ldrh	r1, [r3, #0]
 8004fac:	f107 020c 	add.w	r2, r7, #12
 8004fb0:	2364      	movs	r3, #100	; 0x64
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	4805      	ldr	r0, [pc, #20]	; (8004fcc <WrByte+0x4c>)
 8004fb8:	f7fd fc20 	bl	80027fc <HAL_I2C_Master_Transmit>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73fb      	strb	r3, [r7, #15]
	//uart_printf("write 1 byte\n");
	return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000009c 	.word	0x2000009c

08004fd0 <WrMulti>:
uint8_t WrMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8819      	ldrh	r1, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	897a      	ldrh	r2, [r7, #10]
 8004fea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004fee:	9002      	str	r0, [sp, #8]
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	4804      	ldr	r0, [pc, #16]	; (800500c <WrMulti+0x3c>)
 8004ffa:	f7fd ff23 	bl	8002e44 <HAL_I2C_Mem_Write>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	2000009c 	.word	0x2000009c

08005010 <RdMulti>:
uint8_t RdMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	460b      	mov	r3, r1
 800501e:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8005020:	897b      	ldrh	r3, [r7, #10]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	b29b      	uxth	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 800502a:	897b      	ldrh	r3, [r7, #10]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 10);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8819      	ldrh	r1, [r3, #0]
 8005034:	f107 0214 	add.w	r2, r7, #20
 8005038:	230a      	movs	r3, #10
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2302      	movs	r3, #2
 800503e:	480d      	ldr	r0, [pc, #52]	; (8005074 <RdMulti+0x64>)
 8005040:	f7fd fbdc 	bl	80027fc <HAL_I2C_Master_Transmit>
 8005044:	4603      	mov	r3, r0
 8005046:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 400);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8819      	ldrh	r1, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005054:	9200      	str	r2, [sp, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4806      	ldr	r0, [pc, #24]	; (8005074 <RdMulti+0x64>)
 800505a:	f7fd fccd 	bl	80029f8 <HAL_I2C_Master_Receive>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	4413      	add	r3, r2
 8005066:	75fb      	strb	r3, [r7, #23]
    //uart_printf("read %d bytes\n",size);

	return status;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	2000009c 	.word	0x2000009c

08005078 <SwapBuffer>:


void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e021      	b.n	80050ce <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	440b      	add	r3, r1
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3302      	adds	r3, #2
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	440b      	add	r3, r1
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	3203      	adds	r2, #3
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	440a      	add	r2, r1
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	4313      	orrs	r3, r2
		tmp = (
 80050bc:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3d9      	bcc.n	800508a <SwapBuffer+0x12>
	}
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <WaitMs>:

uint8_t WaitMs(
		VL53LMZ_Platform *p_platform,
		uint32_t TimeMs)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 80050ee:	6838      	ldr	r0, [r7, #0]
 80050f0:	f7fc fea8 	bl	8001e44 <HAL_Delay>
	return 0;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_vl53lmz_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	461a      	mov	r2, r3
 800510c:	4603      	mov	r3, r0
 800510e:	70fb      	strb	r3, [r7, #3]
 8005110:	460b      	mov	r3, r1
 8005112:	70bb      	strb	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8005120:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), address,
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	8839      	ldrh	r1, [r7, #0]
 800512c:	f7ff ff70 	bl	8005010 <RdMulti>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	4313      	orrs	r3, r2
 8005138:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	210a      	movs	r1, #10
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff ffd0 	bl	80050e4 <WaitMs>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	4313      	orrs	r3, r2
 800514c:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 800514e:	7bbb      	ldrb	r3, [r7, #14]
 8005150:	2bc7      	cmp	r3, #199	; 0xc7
 8005152:	d904      	bls.n	800515e <_vl53lmz_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53LMZ_STATUS_TIMEOUT_ERROR;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
			break;
 800515c:	e01a      	b.n	8005194 <_vl53lmz_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d909      	bls.n	8005178 <_vl53lmz_poll_for_answer+0x7a>
						 && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 800516a:	2b7e      	cmp	r3, #126	; 0x7e
 800516c:	d904      	bls.n	8005178 <_vl53lmz_poll_for_answer+0x7a>
		{
			status |= VL53LMZ_MCU_ERROR;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005174:	73fb      	strb	r3, [r7, #15]
			break;
 8005176:	e00d      	b.n	8005194 <_vl53lmz_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	3301      	adds	r3, #1
 800517c:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800517e:	78bb      	ldrb	r3, [r7, #2]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8005188:	7e3b      	ldrb	r3, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	b2db      	uxtb	r3, r3
 800518e:	7f3a      	ldrb	r2, [r7, #28]
 8005190:	429a      	cmp	r2, r3
 8005192:	d1c5      	bne.n	8005120 <_vl53lmz_poll_for_answer+0x22>

	return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_vl53lmz_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53lmz_poll_for_mcu_boot(
			  VL53LMZ_Configuration		 *p_dev)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53LMZ_STATUS_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f107 020b 	add.w	r2, r7, #11
 80051b4:	2106      	movs	r1, #6
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff feae 	bl	8004f18 <RdByte>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da10      	bge.n	80051f0 <_vl53lmz_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f107 020a 	add.w	r2, r7, #10
 80051d4:	2107      	movs	r1, #7
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fe9e 	bl	8004f18 <RdByte>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	73fb      	strb	r3, [r7, #15]
			if(go2_status1 & (uint8_t)0x01)
 80051e6:	7abb      	ldrb	r3, [r7, #10]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d111      	bne.n	8005214 <_vl53lmz_poll_for_mcu_boot+0x76>
			{
				status |= VL53LMZ_STATUS_OK;
				break;
			}
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ff75 	bl	80050e4 <WaitMs>
		timeout++;
 80051fa:	89bb      	ldrh	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8005200:	7afb      	ldrb	r3, [r7, #11]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <_vl53lmz_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 800520a:	89bb      	ldrh	r3, [r7, #12]
 800520c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005210:	d3cd      	bcc.n	80051ae <_vl53lmz_poll_for_mcu_boot+0x10>
 8005212:	e002      	b.n	800521a <_vl53lmz_poll_for_mcu_boot+0x7c>
				break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <_vl53lmz_poll_for_mcu_boot+0x7c>
			break;
 8005218:	bf00      	nop

   return status;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <_vl53lmz_send_offset_data>:
 */

static uint8_t _vl53lmz_send_offset_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t						resolution)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0ea      	sub	sp, #424	; 0x1a8
 8005228:	af02      	add	r7, sp, #8
 800522a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800522e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005232:	6018      	str	r0, [r3, #0]
 8005234:	460a      	mov	r2, r1
 8005236:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800523a:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 800523e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8005246:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800524a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800524e:	4ad9      	ldr	r2, [pc, #868]	; (80055b4 <_vl53lmz_send_offset_data+0x390>)
 8005250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005254:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8005258:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800525c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005260:	4ad5      	ldr	r2, [pc, #852]	; (80055b8 <_vl53lmz_send_offset_data+0x394>)
 8005262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005266:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800526a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800526e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f203 5004 	addw	r0, r3, #1284	; 0x504
			   p_dev->offset_data, VL53LMZ_OFFSET_BUFFER_SIZE);
 8005278:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800527c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
	(void)memcpy(p_dev->temp_buffer,
 8005284:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005288:	4619      	mov	r1, r3
 800528a:	f003 ff31 	bl	80090f0 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4){
 800528e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005292:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b10      	cmp	r3, #16
 800529a:	f040 8122 	bne.w	80054e2 <_vl53lmz_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800529e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80052a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f203 5214 	addw	r2, r3, #1300	; 0x514
 80052ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80052b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052b4:	cb03      	ldmia	r3!, {r0, r1}
 80052b6:	6010      	str	r0, [r2, #0]
 80052b8:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 80052ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80052be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80052c8:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fed3 	bl	8005078 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80052d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80052d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
 80052e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e8:	4618      	mov	r0, r3
 80052ea:	f003 ff01 	bl	80090f0 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80052ee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80052f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f203 6144 	addw	r1, r3, #1604	; 0x644
 80052fc:	f107 0318 	add.w	r3, r7, #24
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	4618      	mov	r0, r3
 8005304:	f003 fef4 	bl	80090f0 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8005308:	2300      	movs	r3, #0
 800530a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800530e:	e0ac      	b.n	800546a <_vl53lmz_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8005310:	2300      	movs	r3, #0
 8005312:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8005316:	e09c      	b.n	8005452 <_vl53lmz_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8005318:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800531c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	4413      	add	r3, r2
 8005324:	005a      	lsls	r2, r3, #1
 8005326:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800532a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8005332:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005336:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800534e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8005350:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005354:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	3304      	adds	r3, #4
 800535e:	0059      	lsls	r1, r3, #1
 8005360:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800536c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800536e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005372:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	f103 0109 	add.w	r1, r3, #9
 8005380:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800538c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800538e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005392:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	440a      	add	r2, r1
								  /(uint32_t)4;
 800539a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800539c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80053a8:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80053ac:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	005a      	lsls	r2, r3, #1
 80053b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80053c2:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80053c4:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80053c8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80053e0:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80053e2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80053e6:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80053ea:	00d2      	lsls	r2, r2, #3
 80053ec:	440a      	add	r2, r1
 80053ee:	3204      	adds	r2, #4
 80053f0:	0051      	lsls	r1, r2, #1
 80053f2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80053f6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80053fa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80053fe:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8005400:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005404:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8005408:	00d2      	lsls	r2, r2, #3
 800540a:	440a      	add	r2, r1
 800540c:	0052      	lsls	r2, r2, #1
 800540e:	f102 0109 	add.w	r1, r2, #9
 8005412:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8005416:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800541a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800541e:	4413      	add	r3, r2
								  /(int16_t)4;
 8005420:	2b00      	cmp	r3, #0
 8005422:	da00      	bge.n	8005426 <_vl53lmz_send_offset_data+0x202>
 8005424:	3303      	adds	r3, #3
 8005426:	109b      	asrs	r3, r3, #2
 8005428:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800542a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800542e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	b209      	sxth	r1, r1
 8005438:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800543c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8005444:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	3301      	adds	r3, #1
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8005452:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8005456:	2b03      	cmp	r3, #3
 8005458:	f77f af5e 	ble.w	8005318 <_vl53lmz_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800545c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005460:	b2db      	uxtb	r3, r3
 8005462:	3301      	adds	r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800546a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800546e:	2b03      	cmp	r3, #3
 8005470:	f77f af4e 	ble.w	8005310 <_vl53lmz_send_offset_data+0xec>
			}
		}
		(void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8005474:	f107 0318 	add.w	r3, r7, #24
 8005478:	3320      	adds	r3, #32
 800547a:	2260      	movs	r2, #96	; 0x60
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f003 fe04 	bl	800908c <memset>
		(void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8005484:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005488:	3340      	adds	r3, #64	; 0x40
 800548a:	22c0      	movs	r2, #192	; 0xc0
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f003 fdfc 	bl	800908c <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8005494:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005498:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80054a2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80054a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054aa:	4618      	mov	r0, r3
 80054ac:	f003 fe20 	bl	80090f0 <memcpy>
					signal_grid, sizeof(signal_grid));
		(void)memcpy(&(p_dev->temp_buffer[0x140]),
 80054b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80054b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80054be:	f107 0118 	add.w	r1, r7, #24
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	4618      	mov	r0, r3
 80054c6:	f003 fe13 	bl	80090f0 <memcpy>
					range_grid, sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 80054ca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80054ce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80054d8:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fdcb 	bl	8005078 <SwapBuffer>
	}

	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80054e8:	e01b      	b.n	8005522 <_vl53lmz_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80054ea:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80054ee:	f103 0208 	add.w	r2, r3, #8
 80054f2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80054f6:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 80054fa:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 80054fe:	6809      	ldr	r1, [r1, #0]
 8005500:	440a      	add	r2, r1
 8005502:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 8005506:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800550a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	4413      	add	r3, r2
 8005512:	460a      	mov	r2, r1
 8005514:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8005518:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800551c:	3301      	adds	r3, #1
 800551e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8005522:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8005526:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800552a:	d3de      	bcc.n	80054ea <_vl53lmz_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800552c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005530:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f203 62e4 	addw	r2, r3, #1764	; 0x6e4
 800553a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800553e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005542:	cb03      	ldmia	r3!, {r0, r1}
 8005544:	6010      	str	r0, [r2, #0]
 8005546:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8005548:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800554c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005556:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8005560:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8005564:	f642 6118 	movw	r1, #11800	; 0x2e18
 8005568:	f7ff fd32 	bl	8004fd0 <WrMulti>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8005574:	4313      	orrs	r3, r2
 8005576:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 800557a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800557e:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8005582:	2303      	movs	r3, #3
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	23ff      	movs	r3, #255	; 0xff
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800558e:	2201      	movs	r2, #1
 8005590:	2104      	movs	r1, #4
 8005592:	6800      	ldr	r0, [r0, #0]
 8005594:	f7ff fdb3 	bl	80050fe <_vl53lmz_poll_for_answer>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80055a6:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	0800b4c8 	.word	0x0800b4c8
 80055b8:	0800b4d0 	.word	0x0800b4d0

080055bc <_vl53lmz_send_xtalk_data>:
 */

static uint8_t _vl53lmz_send_xtalk_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				resolution)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0ca      	sub	sp, #296	; 0x128
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055ca:	6018      	str	r0, [r3, #0]
 80055cc:	460a      	mov	r2, r1
 80055ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055d2:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80055d6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80055de:	4a9a      	ldr	r2, [pc, #616]	; (8005848 <_vl53lmz_send_xtalk_data+0x28c>)
 80055e0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80055e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80055ec:	4a97      	ldr	r2, [pc, #604]	; (800584c <_vl53lmz_send_xtalk_data+0x290>)
 80055ee:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80055f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055f6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80055fa:	4b95      	ldr	r3, [pc, #596]	; (8005850 <_vl53lmz_send_xtalk_data+0x294>)
 80055fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8005600:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005604:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f203 5004 	addw	r0, r3, #1284	; 0x504
 800560e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005612:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800561c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005620:	4619      	mov	r1, r3
 8005622:	f003 fd65 	bl	80090f0 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4)
 8005626:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800562a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b10      	cmp	r3, #16
 8005632:	f040 80d2 	bne.w	80057da <_vl53lmz_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8005636:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800563a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8005644:	461a      	mov	r2, r3
 8005646:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800564a:	cb03      	ldmia	r3!, {r0, r1}
 800564c:	6010      	str	r0, [r2, #0]
 800564e:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8005650:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005654:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800565e:	461a      	mov	r2, r3
 8005660:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005664:	cb03      	ldmia	r3!, {r0, r1}
 8005666:	6010      	str	r0, [r2, #0]
 8005668:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 800566a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800566e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005678:	f44f 7142 	mov.w	r1, #776	; 0x308
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fcfb 	bl	8005078 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8005682:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005686:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005698:	4618      	mov	r0, r3
 800569a:	f003 fd29 	bl	80090f0 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80056a4:	e05d      	b.n	8005762 <_vl53lmz_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80056ac:	e04e      	b.n	800574c <_vl53lmz_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80056ae:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 80056b2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	005a      	lsls	r2, r3, #1
 80056bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80056c8:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80056cc:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	440b      	add	r3, r1
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	1c59      	adds	r1, r3, #1
 80056d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056e4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80056e6:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80056ea:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	440b      	add	r3, r1
 80056f2:	3304      	adds	r3, #4
 80056f4:	0059      	lsls	r1, r3, #1
 80056f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005702:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8005704:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8005708:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	440b      	add	r3, r1
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	f103 0109 	add.w	r1, r3, #9
 8005716:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800571a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800571e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005722:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8005724:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8005728:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8005730:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8005732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005736:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800573a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800573e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005742:	b2db      	uxtb	r3, r3
 8005744:	3301      	adds	r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800574c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005750:	2b03      	cmp	r3, #3
 8005752:	ddac      	ble.n	80056ae <_vl53lmz_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8005754:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005758:	b2db      	uxtb	r3, r3
 800575a:	3301      	adds	r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005762:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005766:	2b03      	cmp	r3, #3
 8005768:	dd9d      	ble.n	80056a6 <_vl53lmz_send_xtalk_data+0xea>
			}
		}
		(void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	3340      	adds	r3, #64	; 0x40
 8005770:	22c0      	movs	r2, #192	; 0xc0
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f003 fc89 	bl	800908c <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x34]),
 800577a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800577e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005788:	f107 0108 	add.w	r1, r7, #8
 800578c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005790:	4618      	mov	r0, r3
 8005792:	f003 fcad 	bl	80090f0 <memcpy>
				  signal_grid, sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8005796:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800579a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80057a4:	f44f 7142 	mov.w	r1, #776	; 0x308
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fc65 	bl	8005078 <SwapBuffer>
		(void)memcpy(&(p_dev->temp_buffer[0x134]),
 80057ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 80057bc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80057c0:	601a      	str	r2, [r3, #0]
		profile_4x4, sizeof(profile_4x4));
		(void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80057c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80057d0:	2204      	movs	r2, #4
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f003 fc59 	bl	800908c <memset>
						 (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80057da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057e2:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80057e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80057f2:	f44f 7342 	mov.w	r3, #776	; 0x308
 80057f6:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 80057fa:	f7ff fbe9 	bl	8004fd0 <WrMulti>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005806:	4313      	orrs	r3, r2
 8005808:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 800580c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005810:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8005814:	2303      	movs	r3, #3
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	23ff      	movs	r3, #255	; 0xff
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005820:	2201      	movs	r2, #1
 8005822:	2104      	movs	r1, #4
 8005824:	6800      	ldr	r0, [r0, #0]
 8005826:	f7ff fc6a 	bl	80050fe <_vl53lmz_poll_for_answer>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005832:	4313      	orrs	r3, r2
 8005834:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8005838:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 800583c:	4618      	mov	r0, r3
 800583e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	0800b4d8 	.word	0x0800b4d8
 800584c:	0800b4e0 	.word	0x0800b4e0
 8005850:	0001fca0 	.word	0x0001fca0

08005854 <vl53lmz_init>:
	return status;
}

uint8_t vl53lmz_init(
		VL53LMZ_Configuration		*p_dev)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af02      	add	r7, sp, #8
 800585a:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53LMZ_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8005860:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005864:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8005866:	2301      	movs	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]

	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005870:	2200      	movs	r2, #0
 8005872:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	/* method below copied from vl52l5cx_is_alive() */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fb7e 	bl	8004f80 <WrByte>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	4313      	orrs	r3, r2
 800588c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0, &(p_dev->device_id));
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8005896:	330d      	adds	r3, #13
 8005898:	461a      	mov	r2, r3
 800589a:	2100      	movs	r1, #0
 800589c:	f7ff fb3c 	bl	8004f18 <RdByte>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 1, &(p_dev->revision_id));
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 80058b2:	330e      	adds	r3, #14
 80058b4:	461a      	mov	r2, r3
 80058b6:	2101      	movs	r1, #1
 80058b8:	f7ff fb2e 	bl	8004f18 <RdByte>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fb56 	bl	8004f80 <WrByte>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	4313      	orrs	r3, r2
 80058dc:	75fb      	strb	r3, [r7, #23]
	if((p_dev->device_id!=(uint8_t)0xF0)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058e4:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 80058e8:	2bf0      	cmp	r3, #240	; 0xf0
 80058ea:	d114      	bne.n	8005916 <vl53lmz_init+0xc2>
		|| ((p_dev->revision_id!=(uint8_t)REVISION_CUT11) && (p_dev->revision_id!=(uint8_t)REVISION_CUT12) && (p_dev->revision_id!=(uint8_t)REVISION_L8))) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058f2:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d011      	beq.n	800591e <vl53lmz_init+0xca>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005900:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005904:	2b02      	cmp	r3, #2
 8005906:	d00a      	beq.n	800591e <vl53lmz_init+0xca>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800590e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005912:	2b0c      	cmp	r3, #12
 8005914:	d003      	beq.n	800591e <vl53lmz_init+0xca>
		/* unexpected combination of device and revision IDs */
		status = VL53LMZ_STATUS_UNKNOWN_DEVICE;
 8005916:	2304      	movs	r3, #4
 8005918:	75fb      	strb	r3, [r7, #23]
		goto exit;
 800591a:	f000 bc8c 	b.w	8006236 <vl53lmz_init+0x9e2>
	}

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff fb2a 	bl	8004f80 <WrByte>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	4313      	orrs	r3, r2
 8005934:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2204      	movs	r2, #4
 800593a:	2109      	movs	r1, #9
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff fb1f 	bl	8004f80 <WrByte>
 8005942:	4603      	mov	r3, r0
 8005944:	461a      	mov	r2, r3
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	4313      	orrs	r3, r2
 800594a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2240      	movs	r2, #64	; 0x40
 8005950:	210f      	movs	r1, #15
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fb14 	bl	8004f80 <WrByte>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	4313      	orrs	r3, r2
 8005960:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2203      	movs	r2, #3
 8005966:	210a      	movs	r1, #10
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fb09 	bl	8004f80 <WrByte>
 800596e:	4603      	mov	r3, r0
 8005970:	461a      	mov	r2, r3
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	4313      	orrs	r3, r2
 8005976:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f107 0216 	add.w	r2, r7, #22
 800597e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fac8 	bl	8004f18 <RdByte>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	4313      	orrs	r3, r2
 8005990:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	210c      	movs	r1, #12
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff faf1 	bl	8004f80 <WrByte>
 800599e:	4603      	mov	r3, r0
 80059a0:	461a      	mov	r2, r3
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f240 1101 	movw	r1, #257	; 0x101
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fae5 	bl	8004f80 <WrByte>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	4313      	orrs	r3, r2
 80059be:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fad9 	bl	8004f80 <WrByte>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff facd 	bl	8004f80 <WrByte>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f244 0102 	movw	r1, #16386	; 0x4002
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fac1 	bl	8004f80 <WrByte>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f244 0102 	movw	r1, #16386	; 0x4002
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fab5 	bl	8004f80 <WrByte>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2203      	movs	r2, #3
 8005a24:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff faa9 	bl	8004f80 <WrByte>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461a      	mov	r2, r3
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f240 1103 	movw	r1, #259	; 0x103
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fa9d 	bl	8004f80 <WrByte>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	210c      	movs	r1, #12
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fa92 	bl	8004f80 <WrByte>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2243      	movs	r2, #67	; 0x43
 8005a6a:	210f      	movs	r1, #15
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fa87 	bl	8004f80 <WrByte>
 8005a72:	4603      	mov	r3, r0
 8005a74:	461a      	mov	r2, r3
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fb2f 	bl	80050e4 <WaitMs>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2240      	movs	r2, #64	; 0x40
 8005a94:	210f      	movs	r1, #15
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fa72 	bl	8004f80 <WrByte>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	210a      	movs	r1, #10
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fa67 	bl	8004f80 <WrByte>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fb0f 	bl	80050e4 <WaitMs>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	461a      	mov	r2, r3
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fa51 	bl	8004f80 <WrByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8005ae8:	2301      	movs	r3, #1
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	23ff      	movs	r3, #255	; 0xff
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2306      	movs	r3, #6
 8005af2:	2200      	movs	r2, #0
 8005af4:	2101      	movs	r1, #1
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fb01 	bl	80050fe <_vl53lmz_poll_for_answer>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f040 838f 	bne.w	800622c <vl53lmz_init+0x9d8>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	210e      	movs	r1, #14
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fa33 	bl	8004f80 <WrByte>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b2a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d126      	bne.n	8005b80 <vl53lmz_init+0x32c>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fa20 	bl	8004f80 <WrByte>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	2106      	movs	r1, #6
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fa15 	bl	8004f80 <WrByte>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8005b60:	2304      	movs	r3, #4
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	23ff      	movs	r3, #255	; 0xff
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2321      	movs	r3, #33	; 0x21
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fac5 	bl	80050fe <_vl53lmz_poll_for_answer>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	75fb      	strb	r3, [r7, #23]
 8005b7e:	e031      	b.n	8005be4 <vl53lmz_init+0x390>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff f9f9 	bl	8004f80 <WrByte>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	220d      	movs	r2, #13
 8005b9c:	2103      	movs	r1, #3
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff f9ee 	bl	8004f80 <WrByte>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f9e2 	bl	8004f80 <WrByte>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	2310      	movs	r3, #16
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	2321      	movs	r3, #33	; 0x21
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fa92 	bl	80050fe <_vl53lmz_poll_for_answer>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	75fb      	strb	r3, [r7, #23]
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff f9c7 	bl	8004f80 <WrByte>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f107 0216 	add.w	r2, r7, #22
 8005c02:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f986 	bl	8004f18 <RdByte>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	210c      	movs	r1, #12
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff f9af 	bl	8004f80 <WrByte>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff f9a3 	bl	8004f80 <WrByte>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f240 1101 	movw	r1, #257	; 0x101
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f997 	bl	8004f80 <WrByte>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff f98b 	bl	8004f80 <WrByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff f97f 	bl	8004f80 <WrByte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f244 0102 	movw	r1, #16386	; 0x4002
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff f973 	bl	8004f80 <WrByte>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f244 0102 	movw	r1, #16386	; 0x4002
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f967 	bl	8004f80 <WrByte>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff f95b 	bl	8004f80 <WrByte>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f240 1103 	movw	r1, #259	; 0x103
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff f94f 	bl	8004f80 <WrByte>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f244 010f 	movw	r1, #16399	; 0x400f
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff f943 	bl	8004f80 <WrByte>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2243      	movs	r2, #67	; 0x43
 8005d08:	f240 211a 	movw	r1, #538	; 0x21a
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff f937 	bl	8004f80 <WrByte>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2203      	movs	r2, #3
 8005d20:	f240 211a 	movw	r1, #538	; 0x21a
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff f92b 	bl	8004f80 <WrByte>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f240 211a 	movw	r1, #538	; 0x21a
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff f91f 	bl	8004f80 <WrByte>
 8005d42:	4603      	mov	r3, r0
 8005d44:	461a      	mov	r2, r3
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f240 211a 	movw	r1, #538	; 0x21a
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff f913 	bl	8004f80 <WrByte>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f240 2119 	movw	r1, #537	; 0x219
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff f907 	bl	8004f80 <WrByte>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f240 211b 	movw	r1, #539	; 0x21b
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff f8fb 	bl	8004f80 <WrByte>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff f8ef 	bl	8004f80 <WrByte>
 8005da2:	4603      	mov	r3, r0
 8005da4:	461a      	mov	r2, r3
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f107 0216 	add.w	r2, r7, #22
 8005db2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff f8ae 	bl	8004f18 <RdByte>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff f8d6 	bl	8004f80 <WrByte>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2207      	movs	r2, #7
 8005de2:	2120      	movs	r1, #32
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff f8cb 	bl	8004f80 <WrByte>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2206      	movs	r2, #6
 8005df8:	2120      	movs	r1, #32
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff f8c0 	bl	8004f80 <WrByte>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53LMZ */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2209      	movs	r2, #9
 8005e0e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f8b4 	bl	8004f80 <WrByte>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e28:	4adc      	ldr	r2, [pc, #880]	; (800619c <vl53lmz_init+0x948>)
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f7ff f8d0 	bl	8004fd0 <WrMulti>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	220a      	movs	r2, #10
 8005e3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff f89c 	bl	8004f80 <WrByte>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e58:	4ad1      	ldr	r2, [pc, #836]	; (80061a0 <vl53lmz_init+0x94c>)
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	f7ff f8b8 	bl	8004fd0 <WrMulti>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	220b      	movs	r2, #11
 8005e6e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff f884 	bl	8004f80 <WrByte>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8005e88:	4ac6      	ldr	r2, [pc, #792]	; (80061a4 <vl53lmz_init+0x950>)
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f7ff f8a0 	bl	8004fd0 <WrMulti>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f86c 	bl	8004f80 <WrByte>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005eb8:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d121      	bne.n	8005f04 <vl53lmz_init+0x6b0>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff f859 	bl	8004f80 <WrByte>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2203      	movs	r2, #3
 8005edc:	2106      	movs	r1, #6
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f84e 	bl	8004f80 <WrByte>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	75fb      	strb	r3, [r7, #23]
		status |= WaitMs(&(p_dev->platform), 5);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2105      	movs	r1, #5
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff f8f6 	bl	80050e4 <WaitMs>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	75fb      	strb	r3, [r7, #23]
 8005f02:	e031      	b.n	8005f68 <vl53lmz_init+0x714>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff f837 	bl	8004f80 <WrByte>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	220d      	movs	r2, #13
 8005f20:	2103      	movs	r1, #3
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff f82c 	bl	8004f80 <WrByte>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f820 	bl	8004f80 <WrByte>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8005f4a:	2310      	movs	r3, #16
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	2310      	movs	r3, #16
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2321      	movs	r3, #33	; 0x21
 8005f54:	2200      	movs	r2, #0
 8005f56:	2101      	movs	r1, #1
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff f8d0 	bl	80050fe <_vl53lmz_poll_for_answer>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	461a      	mov	r2, r3
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	75fb      	strb	r3, [r7, #23]
	}
	if(status != (uint8_t)0) {
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f040 8160 	bne.w	8006230 <vl53lmz_init+0x9dc>
		goto exit;
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff f801 	bl	8004f80 <WrByte>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f107 0216 	add.w	r2, r7, #22
 8005f8e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe ffc0 	bl	8004f18 <RdByte>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	210c      	movs	r1, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe ffe9 	bl	8004f80 <WrByte>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe ffdd 	bl	8004f80 <WrByte>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe ffd1 	bl	8004f80 <WrByte>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f240 1115 	movw	r1, #277	; 0x115
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe ffc5 	bl	8004f80 <WrByte>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2242      	movs	r2, #66	; 0x42
 8006004:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe ffb9 	bl	8004f80 <WrByte>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	4313      	orrs	r3, r2
 8006016:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f240 1117 	movw	r1, #279	; 0x117
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe ffad 	bl	8004f80 <WrByte>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	4313      	orrs	r3, r2
 800602e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	210b      	movs	r1, #11
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe ffa2 	bl	8004f80 <WrByte>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	7dfb      	ldrb	r3, [r7, #23]
 8006042:	4313      	orrs	r3, r2
 8006044:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f107 0216 	add.w	r2, r7, #22
 800604c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe ff61 	bl	8004f18 <RdByte>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	4313      	orrs	r3, r2
 800605e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	210c      	movs	r1, #12
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe ff8a 	bl	8004f80 <WrByte>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	4313      	orrs	r3, r2
 8006074:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	210b      	movs	r1, #11
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe ff7f 	bl	8004f80 <WrByte>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	4313      	orrs	r3, r2
 800608a:	75fb      	strb	r3, [r7, #23]

	status |= _vl53lmz_poll_for_mcu_boot(p_dev);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f886 	bl	800519e <_vl53lmz_poll_for_mcu_boot>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	4313      	orrs	r3, r2
 800609a:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 80c8 	bne.w	8006234 <vl53lmz_init+0x9e0>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe ff67 	bl	8004f80 <WrByte>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	2328      	movs	r3, #40	; 0x28
 80060c0:	4a39      	ldr	r2, [pc, #228]	; (80061a8 <vl53lmz_init+0x954>)
 80060c2:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 80060c6:	f7fe ff83 	bl	8004fd0 <WrMulti>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53LMZ_GET_NVM_CMD, sizeof(VL53LMZ_GET_NVM_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 0,
 80060d4:	2302      	movs	r3, #2
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	23ff      	movs	r3, #255	; 0xff
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80060e0:	2200      	movs	r2, #0
 80060e2:	2104      	movs	r1, #4
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff f80a 	bl	80050fe <_vl53lmz_poll_for_answer>
 80060ea:	4603      	mov	r3, r0
 80060ec:	461a      	mov	r2, r3
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	75fb      	strb	r3, [r7, #23]
		VL53LMZ_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 80060f4:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53LMZ_NVM_DATA_SIZE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 80060fc:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8006100:	f642 4104 	movw	r1, #11268	; 0x2c04
 8006104:	f7fe ff84 	bl	8005010 <RdMulti>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	4313      	orrs	r3, r2
 8006110:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f103 0014 	add.w	r0, r3, #20
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f203 5304 	addw	r3, r3, #1284	; 0x504
 800611e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006122:	4619      	mov	r1, r3
 8006124:	f002 ffe4 	bl	80090f0 <memcpy>
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |= _vl53lmz_send_offset_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8006128:	2110      	movs	r1, #16
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff f87a 	bl	8005224 <_vl53lmz_send_offset_data>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	4313      	orrs	r3, r2
 8006138:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	p_dev->default_xtalk = (uint8_t*)VL53LMZ_DEFAULT_XTALK;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <vl53lmz_init+0x958>)
 800613e:	611a      	str	r2, [r3, #16]
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53LMZ_DEFAULT_XTALK,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <vl53lmz_init+0x958>)
 8006148:	4618      	mov	r0, r3
 800614a:	4611      	mov	r1, r2
 800614c:	f44f 7342 	mov.w	r3, #776	; 0x308
 8006150:	461a      	mov	r2, r3
 8006152:	f002 ffcd 	bl	80090f0 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);
	status |= _vl53lmz_send_xtalk_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8006156:	2110      	movs	r1, #16
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fa2f 	bl	80055bc <_vl53lmz_send_xtalk_data>
 800615e:	4603      	mov	r3, r0
 8006160:	461a      	mov	r2, r3
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	4313      	orrs	r3, r2
 8006166:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800616e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d11e      	bne.n	80061b4 <vl53lmz_init+0x960>
		p_dev->default_configuration = (uint8_t*)VL53L8_DEFAULT_CONFIGURATION;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <vl53lmz_init+0x95c>)
 800617a:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8006186:	f642 4134 	movw	r1, #11316	; 0x2c34
 800618a:	f7fe ff21 	bl	8004fd0 <WrMulti>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	4313      	orrs	r3, r2
 8006196:	75fb      	strb	r3, [r7, #23]
 8006198:	e01d      	b.n	80061d6 <vl53lmz_init+0x982>
 800619a:	bf00      	nop
 800619c:	0800b53c 	.word	0x0800b53c
 80061a0:	0801353c 	.word	0x0801353c
 80061a4:	0801b53c 	.word	0x0801b53c
 80061a8:	08020fdc 	.word	0x08020fdc
 80061ac:	08020cd4 	.word	0x08020cd4
 80061b0:	0802053c 	.word	0x0802053c
							p_dev->default_configuration,
							sizeof(VL53L8_DEFAULT_CONFIGURATION));
	}
	else {
		p_dev->default_configuration = (uint8_t*)VL53L7_DEFAULT_CONFIGURATION;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a22      	ldr	r2, [pc, #136]	; (8006240 <vl53lmz_init+0x9ec>)
 80061b8:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 80061c4:	f642 4134 	movw	r1, #11316	; 0x2c34
 80061c8:	f7fe ff02 	bl	8004fd0 <WrMulti>
 80061cc:	4603      	mov	r3, r0
 80061ce:	461a      	mov	r2, r3
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	75fb      	strb	r3, [r7, #23]
							p_dev->default_configuration,
							sizeof(VL53L7_DEFAULT_CONFIGURATION));
	}

	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1, VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);
 80061d6:	2303      	movs	r3, #3
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	23ff      	movs	r3, #255	; 0xff
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80061e2:	2201      	movs	r2, #1
 80061e4:	2104      	movs	r1, #4
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fe ff89 	bl	80050fe <_vl53lmz_poll_for_answer>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80061f6:	f107 0110 	add.w	r1, r7, #16
 80061fa:	2304      	movs	r3, #4
 80061fc:	f64d 3280 	movw	r2, #56192	; 0xdb80
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fc7b 	bl	8006afc <vl53lmz_dci_write_data>
 8006206:	4603      	mov	r3, r0
 8006208:	461a      	mov	r2, r3
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	4313      	orrs	r3, r2
 800620e:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53LMZ_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 8006210:	f107 010c 	add.w	r1, r7, #12
 8006214:	2304      	movs	r3, #4
 8006216:	f64d 1264 	movw	r2, #55652	; 0xd964
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fc6e 	bl	8006afc <vl53lmz_dci_write_data>
 8006220:	4603      	mov	r3, r0
 8006222:	461a      	mov	r2, r3
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	4313      	orrs	r3, r2
 8006228:	75fb      	strb	r3, [r7, #23]
 800622a:	e004      	b.n	8006236 <vl53lmz_init+0x9e2>
		goto exit;
 800622c:	bf00      	nop
 800622e:	e002      	b.n	8006236 <vl53lmz_init+0x9e2>
		goto exit;
 8006230:	bf00      	nop
 8006232:	e000      	b.n	8006236 <vl53lmz_init+0x9e2>
		goto exit;
 8006234:	bf00      	nop
			VL53LMZ_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	08020908 	.word	0x08020908

08006244 <vl53lmz_start_ranging>:
	return status;
}

uint8_t vl53lmz_start_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]

	status = vl53lmz_create_output_config( p_dev );
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd1f 	bl	8006c94 <vl53lmz_create_output_config>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
	if (status != VL53LMZ_STATUS_OK)
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <vl53lmz_start_ranging+0x20>
		return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	e005      	b.n	8006270 <vl53lmz_start_ranging+0x2c>

	status = vl53lmz_send_output_config_and_start( p_dev );
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fd83 	bl	8006d70 <vl53lmz_send_output_config_and_start>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]

	return status;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <vl53lmz_stop_ranging>:

uint8_t vl53lmz_stop_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53LMZ_STATUS_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	74fb      	strb	r3, [r7, #19]
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f107 020c 	add.w	r2, r7, #12
 8006296:	2304      	movs	r3, #4
 8006298:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 800629c:	f7fe feb8 	bl	8005010 <RdMulti>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	75fb      	strb	r3, [r7, #23]
						  0x2FFC, (uint8_t*)&auto_stop_flag, 4);

	if((auto_stop_flag != (uint32_t)0x4FF)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f240 42ff 	movw	r2, #1279	; 0x4ff
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d04f      	beq.n	8006354 <vl53lmz_stop_ranging+0xdc>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062ba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d148      	bne.n	8006354 <vl53lmz_stop_ranging+0xdc>
	{
			status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fe58 	bl	8004f80 <WrByte>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461a      	mov	r2, r3
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	75fb      	strb	r3, [r7, #23]

			/* Provoke MCU stop */
			status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2216      	movs	r2, #22
 80062de:	2115      	movs	r1, #21
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fe4d 	bl	8004f80 <WrByte>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	75fb      	strb	r3, [r7, #23]
			status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	2114      	movs	r1, #20
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fe42 	bl	8004f80 <WrByte>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	4313      	orrs	r3, r2
 8006304:	75fb      	strb	r3, [r7, #23]

			/* Poll for G02 status 0 MCU stop */
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8006306:	e021      	b.n	800634c <vl53lmz_stop_ranging+0xd4>
			{
				status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f107 0213 	add.w	r2, r7, #19
 800630e:	2106      	movs	r1, #6
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fe01 	bl	8004f18 <RdByte>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	4313      	orrs	r3, r2
 800631e:	75fb      	strb	r3, [r7, #23]
				status |= WaitMs(&(p_dev->platform), 10);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	210a      	movs	r1, #10
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fedd 	bl	80050e4 <WaitMs>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	4313      	orrs	r3, r2
 8006332:	75fb      	strb	r3, [r7, #23]
				timeout++;	/* Timeout reached after 5 seconds */
 8006334:	8abb      	ldrh	r3, [r7, #20]
 8006336:	3301      	adds	r3, #1
 8006338:	82bb      	strh	r3, [r7, #20]

				if(timeout > (uint16_t)500)
 800633a:	8abb      	ldrh	r3, [r7, #20]
 800633c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006340:	d904      	bls.n	800634c <vl53lmz_stop_ranging+0xd4>
				{
					status |= tmp;
 8006342:	7cfa      	ldrb	r2, [r7, #19]
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	4313      	orrs	r3, r2
 8006348:	75fb      	strb	r3, [r7, #23]
					break;
 800634a:	e003      	b.n	8006354 <vl53lmz_stop_ranging+0xdc>
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	b25b      	sxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	dad9      	bge.n	8006308 <vl53lmz_stop_ranging+0x90>
				}
			}
		}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f107 0213 	add.w	r2, r7, #19
 800635a:	2106      	movs	r1, #6
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fddb 	bl	8004f18 <RdByte>
 8006362:	4603      	mov	r3, r0
 8006364:	461a      	mov	r2, r3
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	4313      	orrs	r3, r2
 800636a:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	b25b      	sxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	da15      	bge.n	80063a0 <vl53lmz_stop_ranging+0x128>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f107 0213 	add.w	r2, r7, #19
 800637a:	2107      	movs	r1, #7
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fdcb 	bl	8004f18 <RdByte>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	4313      	orrs	r3, r2
 800638a:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	2b84      	cmp	r3, #132	; 0x84
 8006390:	d006      	beq.n	80063a0 <vl53lmz_stop_ranging+0x128>
 8006392:	7cfb      	ldrb	r3, [r7, #19]
 8006394:	2b85      	cmp	r3, #133	; 0x85
 8006396:	d003      	beq.n	80063a0 <vl53lmz_stop_ranging+0x128>
		   status |= tmp;
 8006398:	7cfa      	ldrb	r2, [r7, #19]
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	4313      	orrs	r3, r2
 800639e:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe fde9 	bl	8004f80 <WrByte>
 80063ae:	4603      	mov	r3, r0
 80063b0:	461a      	mov	r2, r3
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	2114      	movs	r1, #20
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fdde 	bl	8004f80 <WrByte>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2115      	movs	r1, #21
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fdd3 	bl	8004f80 <WrByte>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2204      	movs	r2, #4
 80063e8:	2109      	movs	r1, #9
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fdc8 	bl	8004f80 <WrByte>
 80063f0:	4603      	mov	r3, r0
 80063f2:	461a      	mov	r2, r3
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fdbc 	bl	8004f80 <WrByte>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	4313      	orrs	r3, r2
 8006410:	75fb      	strb	r3, [r7, #23]

	return status;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <vl53lmz_check_data_ready>:

uint8_t vl53lmz_check_data_ready(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
	*p_isReady = 0;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8006438:	2304      	movs	r3, #4
 800643a:	2100      	movs	r1, #0
 800643c:	f7fe fde8 	bl	8005010 <RdMulti>
 8006440:	4603      	mov	r3, r0
 8006442:	461a      	mov	r2, r3
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	4313      	orrs	r3, r2
 8006448:	73fb      	strb	r3, [r7, #15]

	if ( status == VL53LMZ_STATUS_OK ){
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d136      	bne.n	80064be <vl53lmz_check_data_ready+0xa2>
		if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	791b      	ldrb	r3, [r3, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d020      	beq.n	80064a0 <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[0] != (uint8_t)255)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8006464:	2bff      	cmp	r3, #255	; 0xff
 8006466:	d01b      	beq.n	80064a0 <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 800646e:	2b05      	cmp	r3, #5
 8006470:	d116      	bne.n	80064a0 <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8006478:	f003 0305 	and.w	r3, r3, #5
 800647c:	2b05      	cmp	r3, #5
 800647e:	d10f      	bne.n	80064a0 <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <vl53lmz_check_data_ready+0x84>
				)
		{
			*p_isReady = (uint8_t)1;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
			 p_dev->streamcount = p_dev->temp_buffer[0];
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	711a      	strb	r2, [r3, #4]
 800649e:	e00e      	b.n	80064be <vl53lmz_check_data_ready+0xa2>
		}
		else
		{
			if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 80064a6:	b25b      	sxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	da05      	bge.n	80064b8 <vl53lmz_check_data_ready+0x9c>
			{
				status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 2506 	ldrb.w	r2, [r3, #1286]	; 0x506
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	73fb      	strb	r3, [r7, #15]
			}

			*p_isReady = 0;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <vl53lmz_get_ranging_data>:

uint8_t vl53lmz_get_ranging_data(
		VL53LMZ_Configuration		*p_dev,
		VL53LMZ_ResultsData		*p_results)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 80064d6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), 0x0,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2100      	movs	r1, #0
 80064e4:	f7fe fd94 	bl	8005010 <RdMulti>
 80064e8:	4603      	mov	r3, r0
 80064ea:	461a      	mov	r2, r3
 80064ec:	7ffb      	ldrb	r3, [r7, #31]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	711a      	strb	r2, [r3, #4]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	b29b      	uxth	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f7fe fdb4 	bl	8005078 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8006510:	2310      	movs	r3, #16
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e118      	b.n	8006748 <vl53lmz_get_ranging_data+0x280>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	3304      	adds	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d915      	bls.n	800655e <vl53lmz_get_ranging_data+0x96>
					&& (bh_ptr->type < (uint32_t)0xd))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b0c      	cmp	r3, #12
 800653e:	d80e      	bhi.n	800655e <vl53lmz_get_ranging_data+0x96>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8006554:	b29b      	uxth	r3, r3
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e005      	b.n	800656a <vl53lmz_get_ranging_data+0xa2>
		}
		else
		{
			msize = bh_ptr->size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8006566:	b29b      	uxth	r3, r3
 8006568:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	f24e 0284 	movw	r2, #57476	; 0xe084
 8006572:	4293      	cmp	r3, r2
 8006574:	f000 80c2 	beq.w	80066fc <vl53lmz_get_ranging_data+0x234>
 8006578:	f24e 0284 	movw	r2, #57476	; 0xe084
 800657c:	4293      	cmp	r3, r2
 800657e:	f300 80db 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 8006582:	f24e 0244 	movw	r2, #57412	; 0xe044
 8006586:	4293      	cmp	r3, r2
 8006588:	f000 80a9 	beq.w	80066de <vl53lmz_get_ranging_data+0x216>
 800658c:	f24e 0244 	movw	r2, #57412	; 0xe044
 8006590:	4293      	cmp	r3, r2
 8006592:	f300 80d1 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 8006596:	f64d 7244 	movw	r2, #57156	; 0xdf44
 800659a:	4293      	cmp	r3, r2
 800659c:	f000 8090 	beq.w	80066c0 <vl53lmz_get_ranging_data+0x1f8>
 80065a0:	f64d 7244 	movw	r2, #57156	; 0xdf44
 80065a4:	4293      	cmp	r3, r2
 80065a6:	f300 80c7 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 80065aa:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d077      	beq.n	80066a2 <vl53lmz_get_ranging_data+0x1da>
 80065b2:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f300 80be 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 80065bc:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d05f      	beq.n	8006684 <vl53lmz_get_ranging_data+0x1bc>
 80065c4:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80065c8:	4293      	cmp	r3, r2
 80065ca:	f300 80b5 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 80065ce:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d047      	beq.n	8006666 <vl53lmz_get_ranging_data+0x19e>
 80065d6:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80065da:	4293      	cmp	r3, r2
 80065dc:	f300 80ac 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 80065e0:	f64d 0258 	movw	r2, #55384	; 0xd858
 80065e4:	4293      	cmp	r3, r2
 80065e6:	f000 8098 	beq.w	800671a <vl53lmz_get_ranging_data+0x252>
 80065ea:	f64d 0258 	movw	r2, #55384	; 0xd858
 80065ee:	4293      	cmp	r3, r2
 80065f0:	f300 80a2 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 80065f4:	f245 52d0 	movw	r2, #21968	; 0x55d0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d025      	beq.n	8006648 <vl53lmz_get_ranging_data+0x180>
 80065fc:	f245 52d0 	movw	r2, #21968	; 0x55d0
 8006600:	4293      	cmp	r3, r2
 8006602:	f300 8099 	bgt.w	8006738 <vl53lmz_get_ranging_data+0x270>
 8006606:	f245 42b4 	movw	r2, #21684	; 0x54b4
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <vl53lmz_get_ranging_data+0x150>
 800660e:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8006612:	4293      	cmp	r3, r2
 8006614:	d00a      	beq.n	800662c <vl53lmz_get_ranging_data+0x164>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8006616:	e08f      	b.n	8006738 <vl53lmz_get_ranging_data+0x270>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	330c      	adds	r3, #12
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8006624:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	701a      	strb	r2, [r3, #0]
				break;
 800662a:	e086      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->ambient_per_spad,
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	3304      	adds	r3, #4
 8006634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4413      	add	r3, r2
 800663c:	3304      	adds	r3, #4
				(void)memcpy(p_results->ambient_per_spad,
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4619      	mov	r1, r3
 8006642:	f002 fd55 	bl	80090f0 <memcpy>
				break;
 8006646:	e078      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_spads_enabled,
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	3304      	adds	r3, #4
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_spads_enabled,
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4619      	mov	r1, r3
 8006660:	f002 fd46 	bl	80090f0 <memcpy>
				break;
 8006664:	e069      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_target_detected,
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	3304      	adds	r3, #4
 8006670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_target_detected,
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4619      	mov	r1, r3
 800667e:	f002 fd37 	bl	80090f0 <memcpy>
				break;
 8006682:	e05a      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->signal_per_spad,
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	3304      	adds	r3, #4
 800668e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	3304      	adds	r3, #4
				(void)memcpy(p_results->signal_per_spad,
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4619      	mov	r1, r3
 800669c:	f002 fd28 	bl	80090f0 <memcpy>
				break;
 80066a0:	e04b      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->range_sigma_mm,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	3304      	adds	r3, #4
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	3304      	adds	r3, #4
				(void)memcpy(p_results->range_sigma_mm,
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f002 fd19 	bl	80090f0 <memcpy>
				break;
 80066be:	e03c      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->distance_mm,
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	3304      	adds	r3, #4
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	3304      	adds	r3, #4
				(void)memcpy(p_results->distance_mm,
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4619      	mov	r1, r3
 80066d8:	f002 fd0a 	bl	80090f0 <memcpy>
				break;
 80066dc:	e02d      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->reflectance,
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f203 4044 	addw	r0, r3, #1092	; 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	3304      	adds	r3, #4
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	4413      	add	r3, r2
 80066f0:	3304      	adds	r3, #4
				(void)memcpy(p_results->reflectance,
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4619      	mov	r1, r3
 80066f6:	f002 fcfb 	bl	80090f0 <memcpy>
				break;
 80066fa:	e01e      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->target_status,
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f203 4084 	addw	r0, r3, #1156	; 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	3304      	adds	r3, #4
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
				(void)memcpy(p_results->target_status,
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4619      	mov	r1, r3
 8006714:	f002 fcec 	bl	80090f0 <memcpy>
				break;
 8006718:	e00f      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(&p_results->motion_indicator,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	f203 40c4 	addw	r0, r3, #1220	; 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	3304      	adds	r3, #4
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4413      	add	r3, r2
 800672c:	3304      	adds	r3, #4
				(void)memcpy(&p_results->motion_indicator,
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4619      	mov	r1, r3
 8006732:	f002 fcdd 	bl	80090f0 <memcpy>
				break;
 8006736:	e000      	b.n	800673a <vl53lmz_get_ranging_data+0x272>
				break;
 8006738:	bf00      	nop
		}
		i += msize;
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	4413      	add	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	3304      	adds	r3, #4
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	429a      	cmp	r2, r3
 8006750:	f4ff aee1 	bcc.w	8006516 <vl53lmz_get_ranging_data+0x4e>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 800675a:	b29b      	uxth	r3, r3
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	827b      	strh	r3, [r7, #18]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8006766:	b29a      	uxth	r2, r3
 8006768:	8a7b      	ldrh	r3, [r7, #18]
 800676a:	4313      	orrs	r3, r2
 800676c:	827b      	strh	r3, [r7, #18]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8006772:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800677c:	b29b      	uxth	r3, r3
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	823b      	strh	r3, [r7, #16]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)3])) & 0xFFU;
 8006786:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8006790:	b29a      	uxth	r2, r3
 8006792:	8a3b      	ldrh	r3, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	823b      	strh	r3, [r7, #16]

	if(header_id != footer_id)
 8006798:	8a7a      	ldrh	r2, [r7, #18]
 800679a:	8a3b      	ldrh	r3, [r7, #16]
 800679c:	429a      	cmp	r2, r3
 800679e:	d003      	beq.n	80067a8 <vl53lmz_get_ranging_data+0x2e0>
	{
		status |= VL53LMZ_STATUS_CORRUPTED_FRAME;
 80067a0:	7ffb      	ldrb	r3, [r7, #31]
 80067a2:	f043 0302 	orr.w	r3, r3, #2
 80067a6:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <vl53lmz_get_resolution>:

uint8_t vl53lmz_get_resolution(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80067c6:	2308      	movs	r3, #8
 80067c8:	f245 4250 	movw	r2, #21584	; 0x5450
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f90b 	bl	80069e8 <vl53lmz_dci_read_data>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	4313      	orrs	r3, r2
 80067da:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 80067e8:	fb12 f303 	smulbb	r3, r2, r3
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	701a      	strb	r2, [r3, #0]

	return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <vl53lmz_set_resolution>:


uint8_t vl53lmz_set_resolution(
		VL53LMZ_Configuration		 *p_dev,
		uint8_t				resolution)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	2b10      	cmp	r3, #16
 8006810:	d002      	beq.n	8006818 <vl53lmz_set_resolution+0x1c>
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d055      	beq.n	80068c2 <vl53lmz_set_resolution+0xc6>
 8006816:	e0a9      	b.n	800696c <vl53lmz_set_resolution+0x170>
		case VL53LMZ_RESOLUTION_4X4:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 800681e:	2310      	movs	r3, #16
 8006820:	f64a 5238 	movw	r2, #44344	; 0xad38
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8df 	bl	80069e8 <vl53lmz_dci_read_data>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	4313      	orrs	r3, r2
 8006832:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2240      	movs	r2, #64	; 0x40
 8006838:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 64;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2240      	movs	r2, #64	; 0x40
 8006840:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 4;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8006852:	2310      	movs	r3, #16
 8006854:	f64a 5238 	movw	r2, #44344	; 0xad38
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f94f 	bl	8006afc <vl53lmz_dci_write_data>
 800685e:	4603      	mov	r3, r0
 8006860:	461a      	mov	r2, r3
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	4313      	orrs	r3, r2
 8006866:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 800686e:	2308      	movs	r3, #8
 8006870:	f245 4250 	movw	r2, #21584	; 0x5450
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8b7 	bl	80069e8 <vl53lmz_dci_read_data>
 800687a:	4603      	mov	r3, r0
 800687c:	461a      	mov	r2, r3
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	4313      	orrs	r3, r2
 8006882:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2204      	movs	r2, #4
 8006888:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 4;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2204      	movs	r2, #4
 8006890:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 8;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2208      	movs	r2, #8
 8006898:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 8;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2208      	movs	r2, #8
 80068a0:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80068aa:	2308      	movs	r3, #8
 80068ac:	f245 4250 	movw	r2, #21584	; 0x5450
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f923 	bl	8006afc <vl53lmz_dci_write_data>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	4313      	orrs	r3, r2
 80068be:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			break;
 80068c0:	e057      	b.n	8006972 <vl53lmz_set_resolution+0x176>

		case VL53LMZ_RESOLUTION_8X8:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80068c8:	2310      	movs	r3, #16
 80068ca:	f64a 5238 	movw	r2, #44344	; 0xad38
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f88a 	bl	80069e8 <vl53lmz_dci_read_data>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	4313      	orrs	r3, r2
 80068dc:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2210      	movs	r2, #16
 80068e2:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 16;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2210      	movs	r2, #16
 80068ea:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80068fc:	2310      	movs	r3, #16
 80068fe:	f64a 5238 	movw	r2, #44344	; 0xad38
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8fa 	bl	8006afc <vl53lmz_dci_write_data>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	4313      	orrs	r3, r2
 8006910:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8006918:	2308      	movs	r3, #8
 800691a:	f245 4250 	movw	r2, #21584	; 0x5450
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f862 	bl	80069e8 <vl53lmz_dci_read_data>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	4313      	orrs	r3, r2
 800692c:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2208      	movs	r2, #8
 8006932:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 8;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2208      	movs	r2, #8
 800693a:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 4;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2204      	movs	r2, #4
 8006942:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 4;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2204      	movs	r2, #4
 800694a:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8006954:	2308      	movs	r3, #8
 8006956:	f245 4250 	movw	r2, #21584	; 0x5450
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8ce 	bl	8006afc <vl53lmz_dci_write_data>
 8006960:	4603      	mov	r3, r0
 8006962:	461a      	mov	r2, r3
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	4313      	orrs	r3, r2
 8006968:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);

			break;
 800696a:	e002      	b.n	8006972 <vl53lmz_set_resolution+0x176>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 800696c:	237f      	movs	r3, #127	; 0x7f
 800696e:	73fb      	strb	r3, [r7, #15]
			break;
 8006970:	bf00      	nop
		}

	status |= _vl53lmz_send_offset_data(p_dev, resolution);
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe fc54 	bl	8005224 <_vl53lmz_send_offset_data>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	4313      	orrs	r3, r2
 8006984:	73fb      	strb	r3, [r7, #15]
	status |= _vl53lmz_send_xtalk_data(p_dev, resolution);
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fe fe16 	bl	80055bc <_vl53lmz_send_xtalk_data>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	4313      	orrs	r3, r2
 8006998:	73fb      	strb	r3, [r7, #15]

	return status;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <vl53lmz_set_ranging_frequency_hz>:
}

uint8_t vl53lmz_set_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80069ba:	2301      	movs	r3, #1
 80069bc:	9302      	str	r3, [sp, #8]
 80069be:	2301      	movs	r3, #1
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	1cfb      	adds	r3, r7, #3
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	2304      	movs	r3, #4
 80069c8:	f245 4258 	movw	r2, #21592	; 0x5458
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f935 	bl	8006c3c <vl53lmz_dci_replace_data>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	4313      	orrs	r3, r2
 80069da:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <vl53lmz_dci_read_data>:
uint8_t vl53lmz_dci_read_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08c      	sub	sp, #48	; 0x30
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53LMZ_STATUS_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	330c      	adds	r3, #12
 8006a00:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8006a02:	4a3d      	ldr	r2, [pc, #244]	; (8006af8 <vl53lmz_dci_read_data+0x110>)
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d903      	bls.n	8006a20 <vl53lmz_dci_read_data+0x38>
	{
		status |= VL53LMZ_STATUS_ERROR;
 8006a18:	23ff      	movs	r3, #255	; 0xff
 8006a1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006a1e:	e065      	b.n	8006aec <vl53lmz_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8006a2e:	887b      	ldrh	r3, [r7, #2]
 8006a30:	111b      	asrs	r3, r3, #4
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f107 0214 	add.w	r2, r7, #20
 8006a46:	230c      	movs	r3, #12
 8006a48:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8006a4c:	f7fe fac0 	bl	8004fd0 <WrMulti>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53LMZ_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006a5e:	2303      	movs	r3, #3
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	23ff      	movs	r3, #255	; 0xff
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	2104      	movs	r1, #4
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7fe fb45 	bl	80050fe <_vl53lmz_poll_for_answer>
 8006a74:	4603      	mov	r3, r0
 8006a76:	461a      	mov	r2, r3
 8006a78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53LMZ_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8006a82:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f642 4104 	movw	r1, #11268	; 0x2c04
 8006a90:	f7fe fabe 	bl	8005010 <RdMulti>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8006aa8:	887b      	ldrh	r3, [r7, #2]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f7fe fae1 	bl	8005078 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006aba:	e011      	b.n	8006ae0 <vl53lmz_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8006abc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ac0:	1d1a      	adds	r2, r3, #4
 8006ac2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	440b      	add	r3, r1
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	440a      	add	r2, r1
 8006ace:	f892 2504 	ldrb.w	r2, [r2, #1284]	; 0x504
 8006ad2:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006ad4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3301      	adds	r3, #1
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ae4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	dbe7      	blt.n	8006abc <vl53lmz_dci_read_data+0xd4>
		}
	}

	return status;
 8006aec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3728      	adds	r7, #40	; 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	0800b4e8 	.word	0x0800b4e8

08006afc <vl53lmz_dci_write_data>:
uint8_t vl53lmz_dci_write_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08c      	sub	sp, #48	; 0x30
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8006b10:	2300      	movs	r3, #0
 8006b12:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006b14:	2300      	movs	r3, #0
 8006b16:	753b      	strb	r3, [r7, #20]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	757b      	strb	r3, [r7, #21]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	75bb      	strb	r3, [r7, #22]
 8006b20:	230f      	movs	r3, #15
 8006b22:	75fb      	strb	r3, [r7, #23]
 8006b24:	2305      	movs	r3, #5
 8006b26:	763b      	strb	r3, [r7, #24]
 8006b28:	2301      	movs	r3, #1
 8006b2a:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8006b2c:	887b      	ldrh	r3, [r7, #2]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	121b      	asrs	r3, r3, #8
 8006b32:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006b34:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8006b36:	887b      	ldrh	r3, [r7, #2]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006b3e:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53LMZ_UI_CMD_END -
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8006b46:	3334      	adds	r3, #52	; 0x34
 8006b48:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8006b4a:	887b      	ldrh	r3, [r7, #2]
 8006b4c:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d903      	bls.n	8006b5c <vl53lmz_dci_write_data+0x60>
		   > (uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53LMZ_STATUS_ERROR;
 8006b54:	23ff      	movs	r3, #255	; 0xff
 8006b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b5a:	e069      	b.n	8006c30 <vl53lmz_dci_write_data+0x134>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8006b6a:	887b      	ldrh	r3, [r7, #2]
 8006b6c:	111b      	asrs	r3, r3, #4
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006b72:	887b      	ldrh	r3, [r7, #2]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8006b7c:	887b      	ldrh	r3, [r7, #2]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f7fe fa79 	bl	8005078 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006b86:	887b      	ldrh	r3, [r7, #2]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b8e:	e012      	b.n	8006bb6 <vl53lmz_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8006b90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	441a      	add	r2, r3
 8006b98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	7811      	ldrb	r1, [r2, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006baa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006bb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dae8      	bge.n	8006b90 <vl53lmz_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8006bc8:	887b      	ldrh	r3, [r7, #2]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f107 0314 	add.w	r3, r7, #20
 8006bdc:	cb03      	ldmia	r3!, {r0, r1}
 8006bde:	6010      	str	r0, [r2, #0]
 8006be0:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8006be2:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f203 5204 	addw	r2, r3, #1284	; 0x504
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8006bea:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8006bec:	330c      	adds	r3, #12
 8006bee:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8006bf0:	f7fe f9ee 	bl	8004fd0 <WrMulti>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006c02:	2303      	movs	r3, #3
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	23ff      	movs	r3, #255	; 0xff
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006c0e:	2201      	movs	r2, #1
 8006c10:	2104      	movs	r1, #4
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7fe fa73 	bl	80050fe <_vl53lmz_poll_for_answer>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8006c26:	887b      	ldrh	r3, [r7, #2]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68b8      	ldr	r0, [r7, #8]
 8006c2c:	f7fe fa24 	bl	8005078 <SwapBuffer>
	}

	return status;
 8006c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3728      	adds	r7, #40	; 0x28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <vl53lmz_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_read_data(p_dev, data, index, data_size);
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fec7 	bl	80069e8 <vl53lmz_dci_read_data>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8006c64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c6c:	6a39      	ldr	r1, [r7, #32]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f002 fa3e 	bl	80090f0 <memcpy>
	status |= vl53lmz_dci_write_data(p_dev, data, index, data_size);
 8006c74:	887b      	ldrh	r3, [r7, #2]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff ff3e 	bl	8006afc <vl53lmz_dci_write_data>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	75fb      	strb	r3, [r7, #23]

	return status;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <vl53lmz_create_output_config>:
uint8_t vl53lmz_create_output_config(
		VL53LMZ_Configuration	  *p_dev ) {
 8006c94:	b5b0      	push	{r4, r5, r7, lr}
 8006c96:	b090      	sub	sp, #64	; 0x40
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

	uint8_t status = VL53LMZ_STATUS_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Send addresses of possible output */
	uint32_t default_output_config[] ={
 8006ca2:	4b30      	ldr	r3, [pc, #192]	; (8006d64 <vl53lmz_create_output_config+0xd0>)
 8006ca4:	f107 040c 	add.w	r4, r7, #12
 8006ca8:	461d      	mov	r5, r3
 8006caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53LMZ_DISTANCE_BH,
		VL53LMZ_REFLECTANCE_BH,
		VL53LMZ_TARGET_STATUS_BH,
		VL53LMZ_MOTION_DETECT_BH };

	memset(g_output_config, 0x00, sizeof(g_output_config));
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	482a      	ldr	r0, [pc, #168]	; (8006d68 <vl53lmz_create_output_config+0xd4>)
 8006cc0:	f002 f9e4 	bl	800908c <memset>
	memcpy(g_output_config, default_output_config, sizeof(default_output_config));
 8006cc4:	4b28      	ldr	r3, [pc, #160]	; (8006d68 <vl53lmz_create_output_config+0xd4>)
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	f107 040c 	add.w	r4, r7, #12
 8006ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006cd8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	/* Enable mandatory output (meta and common data) */
	g_output_bh_enable[0] = 0x00000007U;
 8006cdc:	4b23      	ldr	r3, [pc, #140]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006cde:	2207      	movs	r2, #7
 8006ce0:	601a      	str	r2, [r3, #0]
	g_output_bh_enable[1] = 0x00000000U;
 8006ce2:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	605a      	str	r2, [r3, #4]
	g_output_bh_enable[2] = 0x00000000U;
 8006ce8:	4b20      	ldr	r3, [pc, #128]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	609a      	str	r2, [r3, #8]
	g_output_bh_enable[3] = 0x00000000U;
 8006cee:	4b1f      	ldr	r3, [pc, #124]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	60da      	str	r2, [r3, #12]

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53LMZ_DISABLE_AMBIENT_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)8;
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006cfc:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_SPADS_ENABLED
	g_output_bh_enable[0] += (uint32_t)16;
 8006cfe:	4b1b      	ldr	r3, [pc, #108]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3310      	adds	r3, #16
 8006d04:	4a19      	ldr	r2, [pc, #100]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d06:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_TARGET_DETECTED
	g_output_bh_enable[0] += (uint32_t)32;
 8006d08:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3320      	adds	r3, #32
 8006d0e:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d10:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_SIGNAL_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)64;
 8006d12:	4b16      	ldr	r3, [pc, #88]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3340      	adds	r3, #64	; 0x40
 8006d18:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d1a:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_RANGE_SIGMA_MM
	g_output_bh_enable[0] += (uint32_t)128;
 8006d1c:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3380      	adds	r3, #128	; 0x80
 8006d22:	4a12      	ldr	r2, [pc, #72]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d24:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_DISTANCE_MM
	g_output_bh_enable[0] += (uint32_t)256;
 8006d26:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d2e:	4a0f      	ldr	r2, [pc, #60]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d30:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_REFLECTANCE_PERCENT
	g_output_bh_enable[0] += (uint32_t)512;
 8006d32:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d3a:	4a0c      	ldr	r2, [pc, #48]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d3c:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_TARGET_STATUS
	g_output_bh_enable[0] += (uint32_t)1024;
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d46:	4a09      	ldr	r2, [pc, #36]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d48:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_MOTION_INDICATOR
	g_output_bh_enable[0] += (uint32_t)2048;
 8006d4a:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <vl53lmz_create_output_config+0xd8>)
 8006d54:	6013      	str	r3, [r2, #0]
#endif

	return status;
 8006d56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3740      	adds	r7, #64	; 0x40
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bdb0      	pop	{r4, r5, r7, pc}
 8006d62:	bf00      	nop
 8006d64:	0800b4f4 	.word	0x0800b4f4
 8006d68:	20004fa0 	.word	0x20004fa0
 8006d6c:	2000000c 	.word	0x2000000c

08006d70 <vl53lmz_send_output_config_and_start>:


uint8_t vl53lmz_send_output_config_and_start(
		VL53LMZ_Configuration	  *p_dev ) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08c      	sub	sp, #48	; 0x30
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	6078      	str	r0, [r7, #4]

	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8006d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d8a:	60fb      	str	r3, [r7, #12]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8006d8c:	f107 031b 	add.w	r3, r7, #27
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fd0d 	bl	80067b2 <vl53lmz_get_resolution>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da0:	4313      	orrs	r3, r2
 8006da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	p_dev->data_read_size = 0;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	609a      	str	r2, [r3, #8]
	p_dev->streamcount = 255;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	22ff      	movs	r2, #255	; 0xff
 8006db0:	711a      	strb	r2, [r3, #4]

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	e072      	b.n	8006e9e <vl53lmz_send_output_config_and_start+0x12e>
	{
		if ((g_output_config[i] == (uint8_t)0)
 8006db8:	4a93      	ldr	r2, [pc, #588]	; (8007008 <vl53lmz_send_output_config_and_start+0x298>)
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d068      	beq.n	8006e96 <vl53lmz_send_output_config_and_start+0x126>
					|| ((g_output_bh_enable[i/(uint32_t)32]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	4a90      	ldr	r2, [pc, #576]	; (800700c <vl53lmz_send_output_config_and_start+0x29c>)
 8006dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						 &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	f003 0301 	and.w	r3, r3, #1
					|| ((g_output_bh_enable[i/(uint32_t)32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05a      	beq.n	8006e96 <vl53lmz_send_output_config_and_start+0x126>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(g_output_config[i]);
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4a88      	ldr	r2, [pc, #544]	; (8007008 <vl53lmz_send_output_config_and_start+0x298>)
 8006de6:	4413      	add	r3, r2
 8006de8:	61fb      	str	r3, [r7, #28]
		if ( (bh_ptr->type >= 0x1) && (bh_ptr->type < 0x0d))
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d03e      	beq.n	8006e76 <vl53lmz_send_output_config_and_start+0x106>
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b0c      	cmp	r3, #12
 8006e04:	d837      	bhi.n	8006e76 <vl53lmz_send_output_config_and_start+0x106>
		{
			if ( bh_ptr->idx >= 0x54d0 ) {
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d91e      	bls.n	8006e50 <vl53lmz_send_output_config_and_start+0xe0>
				/* might be a zone or target data block */
				if ( bh_ptr->idx < (0x5890) )
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	f645 028f 	movw	r2, #22671	; 0x588f
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d809      	bhi.n	8006e32 <vl53lmz_send_output_config_and_start+0xc2>
				{
					/* it is zone data (does not depend on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution;
 8006e1e:	7efb      	ldrb	r3, [r7, #27]
 8006e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e24:	b299      	uxth	r1, r3
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	8813      	ldrh	r3, [r2, #0]
 8006e2a:	f361 130f 	bfi	r3, r1, #4, #12
 8006e2e:	8013      	strh	r3, [r2, #0]
 8006e30:	e00e      	b.n	8006e50 <vl53lmz_send_output_config_and_start+0xe0>
				}
				else if (bh_ptr->idx < (uint16_t)(0x6C90))
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	885b      	ldrh	r3, [r3, #2]
 8006e36:	f646 428f 	movw	r2, #27791	; 0x6c8f
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d808      	bhi.n	8006e50 <vl53lmz_send_output_config_and_start+0xe0>
				{
					/* it is a per-target data block (depends on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution * VL53LMZ_NB_TARGET_PER_ZONE;
 8006e3e:	7efb      	ldrb	r3, [r7, #27]
 8006e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e44:	b299      	uxth	r1, r3
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	8813      	ldrh	r3, [r2, #0]
 8006e4a:	f361 130f 	bfi	r3, r1, #4, #12
 8006e4e:	8013      	strh	r3, [r2, #0]
				}
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	4611      	mov	r1, r2
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	8812      	ldrh	r2, [r2, #0]
 8006e64:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	fb01 f202 	mul.w	r2, r1, r2
 8006e6e:	441a      	add	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	609a      	str	r2, [r3, #8]
 8006e74:	e009      	b.n	8006e8a <vl53lmz_send_output_config_and_start+0x11a>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	8812      	ldrh	r2, [r2, #0]
 8006e7e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006e82:	b292      	uxth	r2, r2
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	609a      	str	r2, [r3, #8]
		}
		p_dev->data_read_size += (uint32_t)4;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	e000      	b.n	8006e98 <vl53lmz_send_output_config_and_start+0x128>
			continue;
 8006e96:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	2b1f      	cmp	r3, #31
 8006ea2:	d989      	bls.n	8006db8 <vl53lmz_send_output_config_and_start+0x48>
	}
	p_dev->data_read_size += (uint32_t)24;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f103 0218 	add.w	r2, r3, #24
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]


	if (p_dev->data_read_size > VL53LMZ_MAX_RESULTS_SIZE) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f641 62c8 	movw	r2, #7880	; 0x1ec8
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d905      	bls.n	8006ec8 <vl53lmz_send_output_config_and_start+0x158>
		status |= VL53LMZ_STATUS_ERROR;
 8006ebc:	23ff      	movs	r3, #255	; 0xff
 8006ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return status;
 8006ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec6:	e09b      	b.n	8007000 <vl53lmz_send_output_config_and_start+0x290>
	}

	status |= vl53lmz_dci_write_data(p_dev,
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	f64d 1280 	movw	r2, #55680	; 0xd980
 8006ece:	494e      	ldr	r1, [pc, #312]	; (8007008 <vl53lmz_send_output_config_and_start+0x298>)
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fe13 	bl	8006afc <vl53lmz_dci_write_data>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_config), VL53LMZ_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(g_output_config));

	header_config[0] = p_dev->data_read_size;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	613b      	str	r3, [r7, #16]
	header_config[1] = i + (uint32_t)1;
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	3301      	adds	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]

	status |= vl53lmz_dci_write_data(p_dev,
 8006ef0:	f107 0110 	add.w	r1, r7, #16
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f64d 1268 	movw	r2, #55656	; 0xd968
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fdfe 	bl	8006afc <vl53lmz_dci_write_data>
 8006f00:	4603      	mov	r3, r0
 8006f02:	461a      	mov	r2, r3
 8006f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(header_config), VL53LMZ_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53lmz_dci_write_data(p_dev,
 8006f0e:	2310      	movs	r3, #16
 8006f10:	f64d 1270 	movw	r2, #55664	; 0xd970
 8006f14:	493d      	ldr	r1, [pc, #244]	; (800700c <vl53lmz_send_output_config_and_start+0x29c>)
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fdf0 	bl	8006afc <vl53lmz_dci_write_data>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_bh_enable), VL53LMZ_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(g_output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe f824 	bl	8004f80 <WrByte>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f40:	4313      	orrs	r3, r2
 8006f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2205      	movs	r2, #5
 8006f4a:	2109      	movs	r1, #9
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe f817 	bl	8004f80 <WrByte>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe f809 	bl	8004f80 <WrByte>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	461a      	mov	r2, r3
 8006f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53LMZ_UI_CMD_END -
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f107 020c 	add.w	r2, r7, #12
 8006f82:	2304      	movs	r3, #4
 8006f84:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8006f88:	f7fe f822 	bl	8004fd0 <WrMulti>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	23ff      	movs	r3, #255	; 0xff
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	2104      	movs	r1, #4
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe f8a7 	bl	80050fe <_vl53lmz_poll_for_answer>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53lmz_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f203 5104 	addw	r1, r3, #1284	; 0x504
	status |= vl53lmz_dci_read_data(p_dev,
 8006fc4:	230c      	movs	r3, #12
 8006fc6:	f245 4240 	movw	r2, #21568	; 0x5440
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fd0c 	bl	80069e8 <vl53lmz_dci_read_data>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	833b      	strh	r3, [r7, #24]
	if(tmp != p_dev->data_read_size) {
 8006fea:	8b3b      	ldrh	r3, [r7, #24]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d002      	beq.n	8006ffc <vl53lmz_send_output_config_and_start+0x28c>
		status |= VL53LMZ_STATUS_ERROR;
 8006ff6:	23ff      	movs	r3, #255	; 0xff
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8006ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007000:	4618      	mov	r0, r3
 8007002:	3728      	adds	r7, #40	; 0x28
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20004fa0 	.word	0x20004fa0
 800700c:	2000000c 	.word	0x2000000c

08007010 <GW_set_params>:
 8007010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8007018:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
 800701c:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
 8007020:	e9dd c615 	ldrd	ip, r6, [sp, #84]	; 0x54
 8007024:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8007028:	4604      	mov	r4, r0
 800702a:	2800      	cmp	r0, #0
 800702c:	f000 80d4 	beq.w	80071d8 <GW_set_params+0x1c8>
 8007030:	2900      	cmp	r1, #0
 8007032:	bfb8      	it	lt
 8007034:	215f      	movlt	r1, #95	; 0x5f
 8007036:	2a00      	cmp	r2, #0
 8007038:	bfb8      	it	lt
 800703a:	22c8      	movlt	r2, #200	; 0xc8
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfb8      	it	lt
 8007040:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 8007044:	f1bb 0f00 	cmp.w	fp, #0
 8007048:	bfb8      	it	lt
 800704a:	f44f 7b16 	movlt.w	fp, #600	; 0x258
 800704e:	f1ba 0f00 	cmp.w	sl, #0
 8007052:	bfb8      	it	lt
 8007054:	f04f 0a14 	movlt.w	sl, #20
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	6103      	str	r3, [r0, #16]
 800705e:	bfb8      	it	lt
 8007060:	f44f 79fa 	movlt.w	r9, #500	; 0x1f4
 8007064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007066:	6082      	str	r2, [r0, #8]
 8007068:	f1b8 0f00 	cmp.w	r8, #0
 800706c:	bfb8      	it	lt
 800706e:	f44f 7816 	movlt.w	r8, #600	; 0x258
 8007072:	f1be 0f00 	cmp.w	lr, #0
 8007076:	bfb8      	it	lt
 8007078:	f44f 7e16 	movlt.w	lr, #600	; 0x258
 800707c:	2b00      	cmp	r3, #0
 800707e:	bfb8      	it	lt
 8007080:	f44f 63fa 	movlt.w	r3, #2000	; 0x7d0
 8007084:	6283      	str	r3, [r0, #40]	; 0x28
 8007086:	930f      	str	r3, [sp, #60]	; 0x3c
 8007088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800708a:	6001      	str	r1, [r0, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	bfb8      	it	lt
 8007090:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 8007094:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007096:	9312      	str	r3, [sp, #72]	; 0x48
 8007098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800709a:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bfb8      	it	lt
 80070a2:	f44f 6396 	movlt.w	r3, #1200	; 0x4b0
 80070a6:	6503      	str	r3, [r0, #80]	; 0x50
 80070a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80070aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ac:	f8c0 8020 	str.w	r8, [r0, #32]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b6:	bfb8      	it	lt
 80070b8:	2396      	movlt	r3, #150	; 0x96
 80070ba:	60c2      	str	r2, [r0, #12]
 80070bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070be:	6543      	str	r3, [r0, #84]	; 0x54
 80070c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80070c4:	9314      	str	r3, [sp, #80]	; 0x50
 80070c6:	f240 3352 	movw	r3, #850	; 0x352
 80070ca:	ea32 0222 	bics.w	r2, r2, r2, asr #32
 80070ce:	bf28      	it	cs
 80070d0:	461a      	movcs	r2, r3
 80070d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80070da:	bfb8      	it	lt
 80070dc:	ed9f 0a40 	vldrlt	s0, [pc, #256]	; 80071e0 <GW_set_params+0x1d0>
 80070e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070e2:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
 80070e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ea:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80070ee:	bfb8      	it	lt
 80070f0:	eef7 0a00 	vmovlt.f32	s1, #112	; 0x3f800000  1.0
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 80070fc:	bfb8      	it	lt
 80070fe:	ed9f 1a39 	vldrlt	s2, [pc, #228]	; 80071e4 <GW_set_params+0x1d4>
 8007102:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
 8007106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800710e:	bfb8      	it	lt
 8007110:	eddf 1a35 	vldrlt	s3, [pc, #212]	; 80071e8 <GW_set_params+0x1d8>
 8007114:	ed80 1a0e 	vstr	s2, [r0, #56]	; 0x38
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8007120:	bfb8      	it	lt
 8007122:	eeb0 2a00 	vmovlt.f32	s4, #0	; 0x40000000  2.0
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	bfb8      	it	lt
 800712c:	eddf 2a2f 	vldrlt	s5, [pc, #188]	; 80071ec <GW_set_params+0x1dc>
 8007130:	edc0 1a0f 	vstr	s3, [r0, #60]	; 0x3c
 8007134:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8007138:	2b00      	cmp	r3, #0
 800713a:	bfd4      	ite	le
 800713c:	2300      	movle	r3, #0
 800713e:	2301      	movgt	r3, #1
 8007140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007144:	bfd8      	it	le
 8007146:	ed9f 3a2a 	vldrle	s6, [pc, #168]	; 80071f0 <GW_set_params+0x1e0>
 800714a:	ed80 2a10 	vstr	s4, [r0, #64]	; 0x40
 800714e:	f1bc 0f00 	cmp.w	ip, #0
 8007152:	bfd8      	it	le
 8007154:	f44f 7c7a 	movle.w	ip, #1000	; 0x3e8
 8007158:	2e00      	cmp	r6, #0
 800715a:	bfd8      	it	le
 800715c:	f44f 76c8 	movle.w	r6, #400	; 0x190
 8007160:	2d00      	cmp	r5, #0
 8007162:	bfd8      	it	le
 8007164:	2564      	movle	r5, #100	; 0x64
 8007166:	43c9      	mvns	r1, r1
 8007168:	edc0 2a11 	vstr	s5, [r0, #68]	; 0x44
 800716c:	62c2      	str	r2, [r0, #44]	; 0x2c
 800716e:	6041      	str	r1, [r0, #4]
 8007170:	9210      	str	r2, [sp, #64]	; 0x40
 8007172:	f8c0 b014 	str.w	fp, [r0, #20]
 8007176:	f8c0 a018 	str.w	sl, [r0, #24]
 800717a:	f8c0 901c 	str.w	r9, [r0, #28]
 800717e:	f500 682f 	add.w	r8, r0, #2800	; 0xaf0
 8007182:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 8007186:	ed80 3a16 	vstr	s6, [r0, #88]	; 0x58
 800718a:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
 800718e:	6606      	str	r6, [r0, #96]	; 0x60
 8007190:	6645      	str	r5, [r0, #100]	; 0x64
 8007192:	1b70      	subs	r0, r6, r5
 8007194:	f7f9 f972 	bl	800047c <__aeabi_i2d>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	2000      	movs	r0, #0
 800719e:	4915      	ldr	r1, [pc, #84]	; (80071f4 <GW_set_params+0x1e4>)
 80071a0:	f7f9 fb00 	bl	80007a4 <__aeabi_ddiv>
 80071a4:	f7f9 fccc 	bl	8000b40 <__aeabi_d2f>
 80071a8:	2105      	movs	r1, #5
 80071aa:	f8c8 0000 	str.w	r0, [r8]
 80071ae:	f604 00dc 	addw	r0, r4, #2268	; 0x8dc
 80071b2:	f001 fc6e 	bl	8008a92 <RFBVM_init>
 80071b6:	2105      	movs	r1, #5
 80071b8:	f604 20f4 	addw	r0, r4, #2804	; 0xaf4
 80071bc:	f001 fc69 	bl	8008a92 <RFBVM_init>
 80071c0:	2105      	movs	r1, #5
 80071c2:	f604 5008 	addw	r0, r4, #3336	; 0xd08
 80071c6:	f001 fc64 	bl	8008a92 <RFBVM_init>
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	bfd8      	it	le
 80071ce:	27fa      	movle	r7, #250	; 0xfa
 80071d0:	66a7      	str	r7, [r4, #104]	; 0x68
 80071d2:	2000      	movs	r0, #0
 80071d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d8:	f06f 0001 	mvn.w	r0, #1
 80071dc:	e7fa      	b.n	80071d4 <GW_set_params+0x1c4>
 80071de:	bf00      	nop
 80071e0:	3ed58106 	.word	0x3ed58106
 80071e4:	3fcf7cee 	.word	0x3fcf7cee
 80071e8:	3f99999a 	.word	0x3f99999a
 80071ec:	3f8f1aa0 	.word	0x3f8f1aa0
 80071f0:	451c4000 	.word	0x451c4000
 80071f4:	40590000 	.word	0x40590000

080071f8 <GW_init>:
 80071f8:	b530      	push	{r4, r5, lr}
 80071fa:	460d      	mov	r5, r1
 80071fc:	b091      	sub	sp, #68	; 0x44
 80071fe:	4611      	mov	r1, r2
 8007200:	4604      	mov	r4, r0
 8007202:	2800      	cmp	r0, #0
 8007204:	d04c      	beq.n	80072a0 <GW_init+0xa8>
 8007206:	2d00      	cmp	r5, #0
 8007208:	d04a      	beq.n	80072a0 <GW_init+0xa8>
 800720a:	2a00      	cmp	r2, #0
 800720c:	d048      	beq.n	80072a0 <GW_init+0xa8>
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fe97 	bl	8007f42 <HT_init>
 8007214:	2800      	cmp	r0, #0
 8007216:	d141      	bne.n	800729c <GW_init+0xa4>
 8007218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800721c:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 8007220:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8007224:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8007228:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800722c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007230:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007234:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007238:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	eef0 2a43 	vmov.f32	s5, s6
 8007242:	eeb0 2a43 	vmov.f32	s4, s6
 8007246:	eef0 1a43 	vmov.f32	s3, s6
 800724a:	eeb0 1a43 	vmov.f32	s2, s6
 800724e:	eef0 0a43 	vmov.f32	s1, s6
 8007252:	eeb0 0a43 	vmov.f32	s0, s6
 8007256:	461a      	mov	r2, r3
 8007258:	4619      	mov	r1, r3
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff fed8 	bl	8007010 <GW_set_params>
 8007260:	b9e0      	cbnz	r0, 800729c <GW_init+0xa4>
 8007262:	f884 0f1c 	strb.w	r0, [r4, #3868]	; 0xf1c
 8007266:	edd5 7a02 	vldr	s15, [r5, #8]
 800726a:	f8c4 0f20 	str.w	r0, [r4, #3872]	; 0xf20
 800726e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007272:	f604 732c 	addw	r3, r4, #3884	; 0xf2c
 8007276:	f8c4 0f24 	str.w	r0, [r4, #3876]	; 0xf24
 800727a:	f8a4 0f28 	strh.w	r0, [r4, #3880]	; 0xf28
 800727e:	edc3 7a00 	vstr	s15, [r3]
 8007282:	2300      	movs	r3, #0
 8007284:	6723      	str	r3, [r4, #112]	; 0x70
 8007286:	6763      	str	r3, [r4, #116]	; 0x74
 8007288:	67a3      	str	r3, [r4, #120]	; 0x78
 800728a:	2364      	movs	r3, #100	; 0x64
 800728c:	f8c4 0f30 	str.w	r0, [r4, #3888]	; 0xf30
 8007290:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8007294:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8007298:	f8c4 0f40 	str.w	r0, [r4, #3904]	; 0xf40
 800729c:	b011      	add	sp, #68	; 0x44
 800729e:	bd30      	pop	{r4, r5, pc}
 80072a0:	f06f 0001 	mvn.w	r0, #1
 80072a4:	e7fa      	b.n	800729c <GW_init+0xa4>
	...

080072a8 <GW_set_buffer_length>:
 80072a8:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
 80072ac:	ed2d 8b02 	vpush	{d8}
 80072b0:	4683      	mov	fp, r0
 80072b2:	b083      	sub	sp, #12
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d071      	beq.n	800739c <GW_set_buffer_length+0xf4>
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d06f      	beq.n	800739c <GW_set_buffer_length+0xf4>
 80072bc:	edd0 7a02 	vldr	s15, [r0, #8]
 80072c0:	ed91 7a03 	vldr	s14, [r1, #12]
 80072c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072c8:	f10b 077c 	add.w	r7, fp, #124	; 0x7c
 80072cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072d0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80073a4 <GW_set_buffer_length+0xfc>
 80072d4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80072d8:	ee17 0a90 	vmov	r0, s15
 80072dc:	f7f9 f8e0 	bl	80004a0 <__aeabi_f2d>
 80072e0:	ec41 0b10 	vmov	d0, r0, r1
 80072e4:	f002 f914 	bl	8009510 <ceil>
 80072e8:	ec51 0b10 	vmov	r0, r1, d0
 80072ec:	f7f9 fbe0 	bl	8000ab0 <__aeabi_d2iz>
 80072f0:	2801      	cmp	r0, #1
 80072f2:	bfd6      	itet	le
 80072f4:	2302      	movle	r3, #2
 80072f6:	f8cb 000c 	strgt.w	r0, [fp, #12]
 80072fa:	f8cb 300c 	strle.w	r3, [fp, #12]
 80072fe:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007302:	4638      	mov	r0, r7
 8007304:	f001 fbc5 	bl	8008a92 <RFBVM_init>
 8007308:	4604      	mov	r4, r0
 800730a:	bb28      	cbnz	r0, 8007358 <GW_set_buffer_length+0xb0>
 800730c:	f50b 7824 	add.w	r8, fp, #656	; 0x290
 8007310:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007314:	4640      	mov	r0, r8
 8007316:	f001 fbbc 	bl	8008a92 <RFBVM_init>
 800731a:	4604      	mov	r4, r0
 800731c:	b9e0      	cbnz	r0, 8007358 <GW_set_buffer_length+0xb0>
 800731e:	f20b 49a4 	addw	r9, fp, #1188	; 0x4a4
 8007322:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007326:	4648      	mov	r0, r9
 8007328:	f001 fbb3 	bl	8008a92 <RFBVM_init>
 800732c:	4604      	mov	r4, r0
 800732e:	b998      	cbnz	r0, 8007358 <GW_set_buffer_length+0xb0>
 8007330:	f50b 6ad7 	add.w	sl, fp, #1720	; 0x6b8
 8007334:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007338:	4650      	mov	r0, sl
 800733a:	f001 fbaa 	bl	8008a92 <RFBVM_init>
 800733e:	4604      	mov	r4, r0
 8007340:	b950      	cbnz	r0, 8007358 <GW_set_buffer_length+0xb0>
 8007342:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80073a8 <GW_set_buffer_length+0x100>
 8007346:	4603      	mov	r3, r0
 8007348:	f8db 200c 	ldr.w	r2, [fp, #12]
 800734c:	429a      	cmp	r2, r3
 800734e:	dc09      	bgt.n	8007364 <GW_set_buffer_length+0xbc>
 8007350:	2c00      	cmp	r4, #0
 8007352:	bf18      	it	ne
 8007354:	f06f 0407 	mvnne.w	r4, #7
 8007358:	4620      	mov	r0, r4
 800735a:	b003      	add	sp, #12
 800735c:	ecbd 8b02 	vpop	{d8}
 8007360:	e8bd 8f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, pc}
 8007364:	eeb0 0a48 	vmov.f32	s0, s16
 8007368:	4638      	mov	r0, r7
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	f001 fba8 	bl	8008ac0 <RFBVM_push>
 8007370:	eeb0 0a48 	vmov.f32	s0, s16
 8007374:	4404      	add	r4, r0
 8007376:	4640      	mov	r0, r8
 8007378:	f001 fba2 	bl	8008ac0 <RFBVM_push>
 800737c:	eeb0 0a48 	vmov.f32	s0, s16
 8007380:	4404      	add	r4, r0
 8007382:	4648      	mov	r0, r9
 8007384:	f001 fb9c 	bl	8008ac0 <RFBVM_push>
 8007388:	eeb0 0a48 	vmov.f32	s0, s16
 800738c:	4404      	add	r4, r0
 800738e:	4650      	mov	r0, sl
 8007390:	f001 fb96 	bl	8008ac0 <RFBVM_push>
 8007394:	9b01      	ldr	r3, [sp, #4]
 8007396:	4404      	add	r4, r0
 8007398:	3301      	adds	r3, #1
 800739a:	e7d5      	b.n	8007348 <GW_set_buffer_length+0xa0>
 800739c:	f06f 0401 	mvn.w	r4, #1
 80073a0:	e7da      	b.n	8007358 <GW_set_buffer_length+0xb0>
 80073a2:	bf00      	nop
 80073a4:	447a0000 	.word	0x447a0000
 80073a8:	00000000 	.word	0x00000000

080073ac <GW_set_frequency>:
 80073ac:	b513      	push	{r0, r1, r4, lr}
 80073ae:	460b      	mov	r3, r1
 80073b0:	4604      	mov	r4, r0
 80073b2:	4611      	mov	r1, r2
 80073b4:	b190      	cbz	r0, 80073dc <GW_set_frequency+0x30>
 80073b6:	b18b      	cbz	r3, 80073dc <GW_set_frequency+0x30>
 80073b8:	b182      	cbz	r2, 80073dc <GW_set_frequency+0x30>
 80073ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	d90f      	bls.n	80073e4 <GW_set_frequency+0x38>
 80073c4:	4618      	mov	r0, r3
 80073c6:	9201      	str	r2, [sp, #4]
 80073c8:	f000 fe00 	bl	8007fcc <HT_set_frequency>
 80073cc:	b940      	cbnz	r0, 80073e0 <GW_set_frequency+0x34>
 80073ce:	9901      	ldr	r1, [sp, #4]
 80073d0:	4620      	mov	r0, r4
 80073d2:	b002      	add	sp, #8
 80073d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d8:	f7ff bf66 	b.w	80072a8 <GW_set_buffer_length>
 80073dc:	f06f 0001 	mvn.w	r0, #1
 80073e0:	b002      	add	sp, #8
 80073e2:	bd10      	pop	{r4, pc}
 80073e4:	f06f 0005 	mvn.w	r0, #5
 80073e8:	e7fa      	b.n	80073e0 <GW_set_frequency+0x34>

080073ea <GW_update_hand_buffers>:
 80073ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ee:	460d      	mov	r5, r1
 80073f0:	ed2d 8b04 	vpush	{d8-d9}
 80073f4:	4616      	mov	r6, r2
 80073f6:	4607      	mov	r7, r0
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f000 8082 	beq.w	8007502 <GW_update_hand_buffers+0x118>
 80073fe:	2900      	cmp	r1, #0
 8007400:	d07f      	beq.n	8007502 <GW_update_hand_buffers+0x118>
 8007402:	f8d1 4178 	ldr.w	r4, [r1, #376]	; 0x178
 8007406:	2c00      	cmp	r4, #0
 8007408:	d04b      	beq.n	80074a2 <GW_update_hand_buffers+0xb8>
 800740a:	68c3      	ldr	r3, [r0, #12]
 800740c:	429c      	cmp	r4, r3
 800740e:	dc7b      	bgt.n	8007508 <GW_update_hand_buffers+0x11e>
 8007410:	f8d1 1388 	ldr.w	r1, [r1, #904]	; 0x388
 8007414:	f505 70be 	add.w	r0, r5, #380	; 0x17c
 8007418:	1b09      	subs	r1, r1, r4
 800741a:	f001 fbb9 	bl	8008b90 <RFBVM_get_element_value>
 800741e:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 8007422:	f8d5 159c 	ldr.w	r1, [r5, #1436]	; 0x59c
 8007426:	f505 7064 	add.w	r0, r5, #912	; 0x390
 800742a:	1ac9      	subs	r1, r1, r3
 800742c:	eef0 9a40 	vmov.f32	s19, s0
 8007430:	f001 fbae 	bl	8008b90 <RFBVM_get_element_value>
 8007434:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 8007438:	f8d5 17b0 	ldr.w	r1, [r5, #1968]	; 0x7b0
 800743c:	f205 50a4 	addw	r0, r5, #1444	; 0x5a4
 8007440:	1ac9      	subs	r1, r1, r3
 8007442:	eeb0 9a40 	vmov.f32	s18, s0
 8007446:	f001 fba3 	bl	8008b90 <RFBVM_get_element_value>
 800744a:	edd5 7a5b 	vldr	s15, [r5, #364]	; 0x16c
 800744e:	f895 3168 	ldrb.w	r3, [r5, #360]	; 0x168
 8007452:	eef0 8a40 	vmov.f32	s17, s0
 8007456:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800745a:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800745e:	f507 7924 	add.w	r9, r7, #656	; 0x290
 8007462:	f207 48a4 	addw	r8, r7, #1188	; 0x4a4
 8007466:	eeb0 0a69 	vmov.f32	s0, s19
 800746a:	b39b      	cbz	r3, 80074d4 <GW_update_hand_buffers+0xea>
 800746c:	f895 3169 	ldrb.w	r3, [r5, #361]	; 0x169
 8007470:	b383      	cbz	r3, 80074d4 <GW_update_hand_buffers+0xea>
 8007472:	f001 fba4 	bl	8008bbe <RFBVM_fill>
 8007476:	eeb0 0a49 	vmov.f32	s0, s18
 800747a:	4604      	mov	r4, r0
 800747c:	4648      	mov	r0, r9
 800747e:	f001 fb9e 	bl	8008bbe <RFBVM_fill>
 8007482:	eeb0 0a68 	vmov.f32	s0, s17
 8007486:	4404      	add	r4, r0
 8007488:	4640      	mov	r0, r8
 800748a:	f001 fb98 	bl	8008bbe <RFBVM_fill>
 800748e:	2500      	movs	r5, #0
 8007490:	4404      	add	r4, r0
 8007492:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8007496:	f507 69d7 	add.w	r9, r7, #1720	; 0x6b8
 800749a:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800749e:	42a9      	cmp	r1, r5
 80074a0:	dc04      	bgt.n	80074ac <GW_update_hand_buffers+0xc2>
 80074a2:	ecbd 8b04 	vpop	{d8-d9}
 80074a6:	4620      	mov	r0, r4
 80074a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ac:	fb08 f305 	mul.w	r3, r8, r5
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	ed96 7a03 	vldr	s14, [r6, #12]
 80074b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074bc:	3901      	subs	r1, #1
 80074be:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80074c2:	1b49      	subs	r1, r1, r5
 80074c4:	4648      	mov	r0, r9
 80074c6:	3501      	adds	r5, #1
 80074c8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80074cc:	f001 fb6c 	bl	8008ba8 <RFBVM_set_element_value>
 80074d0:	4404      	add	r4, r0
 80074d2:	e7e2      	b.n	800749a <GW_update_hand_buffers+0xb0>
 80074d4:	f001 faf4 	bl	8008ac0 <RFBVM_push>
 80074d8:	eeb0 0a49 	vmov.f32	s0, s18
 80074dc:	4604      	mov	r4, r0
 80074de:	4648      	mov	r0, r9
 80074e0:	f001 faee 	bl	8008ac0 <RFBVM_push>
 80074e4:	eeb0 0a68 	vmov.f32	s0, s17
 80074e8:	4404      	add	r4, r0
 80074ea:	4640      	mov	r0, r8
 80074ec:	f001 fae8 	bl	8008ac0 <RFBVM_push>
 80074f0:	eeb0 0a48 	vmov.f32	s0, s16
 80074f4:	4404      	add	r4, r0
 80074f6:	f507 60d7 	add.w	r0, r7, #1720	; 0x6b8
 80074fa:	f001 fae1 	bl	8008ac0 <RFBVM_push>
 80074fe:	4404      	add	r4, r0
 8007500:	e7cf      	b.n	80074a2 <GW_update_hand_buffers+0xb8>
 8007502:	f06f 0401 	mvn.w	r4, #1
 8007506:	e7cc      	b.n	80074a2 <GW_update_hand_buffers+0xb8>
 8007508:	2400      	movs	r4, #0
 800750a:	e7ca      	b.n	80074a2 <GW_update_hand_buffers+0xb8>

0800750c <GW_compute_speeds>:
 800750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	ed2d 8b0c 	vpush	{d8-d13}
 8007516:	2800      	cmp	r0, #0
 8007518:	f000 80cb 	beq.w	80076b2 <GW_compute_speeds+0x1a6>
 800751c:	2900      	cmp	r1, #0
 800751e:	f000 80c8 	beq.w	80076b2 <GW_compute_speeds+0x1a6>
 8007522:	f890 6048 	ldrb.w	r6, [r0, #72]	; 0x48
 8007526:	68c5      	ldr	r5, [r0, #12]
 8007528:	2e00      	cmp	r6, #0
 800752a:	f040 80a3 	bne.w	8007674 <GW_compute_speeds+0x168>
 800752e:	edd1 6a03 	vldr	s13, [r1, #12]
 8007532:	eddf 8a61 	vldr	s17, [pc, #388]	; 80076b8 <GW_compute_speeds+0x1ac>
 8007536:	ee07 5a10 	vmov	s14, r5
 800753a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800753e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007546:	fb05 f305 	mul.w	r3, r5, r5
 800754a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800754e:	3b01      	subs	r3, #1
 8007550:	f100 077c 	add.w	r7, r0, #124	; 0x7c
 8007554:	f500 7824 	add.w	r8, r0, #656	; 0x290
 8007558:	f200 49a4 	addw	r9, r0, #1188	; 0x4a4
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007564:	1c6b      	adds	r3, r5, #1
 8007566:	ee86 9a27 	vdiv.f32	s18, s12, s15
 800756a:	eef9 7a08 	vmov.f32	s15, #152	; 0xc0c00000 -6.0
 800756e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	ee86 6a87 	vdiv.f32	s12, s13, s14
 800757a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800757e:	eef0 9a68 	vmov.f32	s19, s17
 8007582:	eec6 aa27 	vdiv.f32	s21, s12, s15
 8007586:	eeb0 aa68 	vmov.f32	s20, s17
 800758a:	42ae      	cmp	r6, r5
 800758c:	da67      	bge.n	800765e <GW_compute_speeds+0x152>
 800758e:	ee07 6a90 	vmov	s15, r6
 8007592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007596:	eeb0 8a6a 	vmov.f32	s16, s21
 800759a:	eea7 8a89 	vfma.f32	s16, s15, s18
 800759e:	4631      	mov	r1, r6
 80075a0:	4638      	mov	r0, r7
 80075a2:	f001 faf5 	bl	8008b90 <RFBVM_get_element_value>
 80075a6:	4631      	mov	r1, r6
 80075a8:	4640      	mov	r0, r8
 80075aa:	eea8 aa00 	vfma.f32	s20, s16, s0
 80075ae:	f001 faef 	bl	8008b90 <RFBVM_get_element_value>
 80075b2:	4631      	mov	r1, r6
 80075b4:	4648      	mov	r0, r9
 80075b6:	eee8 9a00 	vfma.f32	s19, s16, s0
 80075ba:	f001 fae9 	bl	8008b90 <RFBVM_get_element_value>
 80075be:	3601      	adds	r6, #1
 80075c0:	eee8 8a00 	vfma.f32	s17, s16, s0
 80075c4:	e7e1      	b.n	800758a <GW_compute_speeds+0x7e>
 80075c6:	4631      	mov	r1, r6
 80075c8:	4638      	mov	r0, r7
 80075ca:	f001 fae1 	bl	8008b90 <RFBVM_get_element_value>
 80075ce:	4631      	mov	r1, r6
 80075d0:	4640      	mov	r0, r8
 80075d2:	eeb0 ba40 	vmov.f32	s22, s0
 80075d6:	f001 fadb 	bl	8008b90 <RFBVM_get_element_value>
 80075da:	4631      	mov	r1, r6
 80075dc:	f204 40a4 	addw	r0, r4, #1188	; 0x4a4
 80075e0:	eef0 aa40 	vmov.f32	s21, s0
 80075e4:	f001 fad4 	bl	8008b90 <RFBVM_get_element_value>
 80075e8:	4631      	mov	r1, r6
 80075ea:	f504 60d7 	add.w	r0, r4, #1720	; 0x6b8
 80075ee:	eeb0 aa40 	vmov.f32	s20, s0
 80075f2:	f001 facd 	bl	8008b90 <RFBVM_get_element_value>
 80075f6:	eec0 7a2d 	vdiv.f32	s15, s0, s27
 80075fa:	3601      	adds	r6, #1
 80075fc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8007600:	eea7 daa7 	vfma.f32	s26, s15, s15
 8007604:	eeeb ca27 	vfma.f32	s25, s22, s15
 8007608:	eeaa caa7 	vfma.f32	s24, s21, s15
 800760c:	eeea ba27 	vfma.f32	s23, s20, s15
 8007610:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8007614:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8007618:	ee38 8a0a 	vadd.f32	s16, s16, s20
 800761c:	42ae      	cmp	r6, r5
 800761e:	dbd2      	blt.n	80075c6 <GW_compute_speeds+0xba>
 8007620:	ee07 5a90 	vmov	s15, r5
 8007624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007628:	ee68 7ae8 	vnmul.f32	s15, s17, s17
 800762c:	eee7 7a0d 	vfma.f32	s15, s14, s26
 8007630:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007638:	d034      	beq.n	80076a4 <GW_compute_speeds+0x198>
 800763a:	ee69 9ae8 	vnmul.f32	s19, s19, s17
 800763e:	ee29 9a68 	vnmul.f32	s18, s18, s17
 8007642:	ee28 8a68 	vnmul.f32	s16, s16, s17
 8007646:	eee7 9a2c 	vfma.f32	s19, s14, s25
 800764a:	eea7 9a0c 	vfma.f32	s18, s14, s24
 800764e:	eea7 8a2b 	vfma.f32	s16, s14, s23
 8007652:	ee89 aaa7 	vdiv.f32	s20, s19, s15
 8007656:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800765a:	eec9 9a27 	vdiv.f32	s19, s18, s15
 800765e:	2000      	movs	r0, #0
 8007660:	ed84 aa1c 	vstr	s20, [r4, #112]	; 0x70
 8007664:	edc4 9a1d 	vstr	s19, [r4, #116]	; 0x74
 8007668:	edc4 8a1e 	vstr	s17, [r4, #120]	; 0x78
 800766c:	ecbd 8b0c 	vpop	{d8-d13}
 8007670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007674:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80076b8 <GW_compute_speeds+0x1ac>
 8007678:	eddf da10 	vldr	s27, [pc, #64]	; 80076bc <GW_compute_speeds+0x1b0>
 800767c:	eeb0 9a48 	vmov.f32	s18, s16
 8007680:	eef0 9a48 	vmov.f32	s19, s16
 8007684:	eef0 ba48 	vmov.f32	s23, s16
 8007688:	eeb0 ca48 	vmov.f32	s24, s16
 800768c:	eef0 ca48 	vmov.f32	s25, s16
 8007690:	eeb0 da48 	vmov.f32	s26, s16
 8007694:	eef0 8a48 	vmov.f32	s17, s16
 8007698:	2600      	movs	r6, #0
 800769a:	f100 077c 	add.w	r7, r0, #124	; 0x7c
 800769e:	f500 7824 	add.w	r8, r0, #656	; 0x290
 80076a2:	e7bb      	b.n	800761c <GW_compute_speeds+0x110>
 80076a4:	eddf 8a04 	vldr	s17, [pc, #16]	; 80076b8 <GW_compute_speeds+0x1ac>
 80076a8:	eef0 9a68 	vmov.f32	s19, s17
 80076ac:	eeb0 aa68 	vmov.f32	s20, s17
 80076b0:	e7d5      	b.n	800765e <GW_compute_speeds+0x152>
 80076b2:	f06f 0001 	mvn.w	r0, #1
 80076b6:	e7d9      	b.n	800766c <GW_compute_speeds+0x160>
 80076b8:	00000000 	.word	0x00000000
 80076bc:	447a0000 	.word	0x447a0000

080076c0 <GW_interpret_speeds>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	ed2d 8b06 	vpush	{d8-d10}
 80076c8:	4604      	mov	r4, r0
 80076ca:	b087      	sub	sp, #28
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f000 81cc 	beq.w	8007a6a <GW_interpret_speeds+0x3aa>
 80076d2:	6803      	ldr	r3, [r0, #0]
 80076d4:	f003 060c 	and.w	r6, r3, #12
 80076d8:	f003 0570 	and.w	r5, r3, #112	; 0x70
 80076dc:	079b      	lsls	r3, r3, #30
 80076de:	d051      	beq.n	8007784 <GW_interpret_speeds+0xc4>
 80076e0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80076e2:	f7f8 fedd 	bl	80004a0 <__aeabi_f2d>
 80076e6:	ec41 0b18 	vmov	d8, r0, r1
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d051      	beq.n	8007792 <GW_interpret_speeds+0xd2>
 80076ee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80076f0:	f7f8 fed6 	bl	80004a0 <__aeabi_f2d>
 80076f4:	ec41 0b19 	vmov	d9, r0, r1
 80076f8:	2d00      	cmp	r5, #0
 80076fa:	d051      	beq.n	80077a0 <GW_interpret_speeds+0xe0>
 80076fc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80076fe:	f7f8 fecf 	bl	80004a0 <__aeabi_f2d>
 8007702:	e9cd 0100 	strd	r0, r1, [sp]
 8007706:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007708:	f7f8 feb8 	bl	800047c <__aeabi_i2d>
 800770c:	2300      	movs	r3, #0
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8007716:	ec51 0b18 	vmov	r0, r1, d8
 800771a:	ec53 2b18 	vmov	r2, r3, d8
 800771e:	f7f8 ff17 	bl	8000550 <__aeabi_dmul>
 8007722:	ec53 2b19 	vmov	r2, r3, d9
 8007726:	4680      	mov	r8, r0
 8007728:	4689      	mov	r9, r1
 800772a:	ec51 0b19 	vmov	r0, r1, d9
 800772e:	f7f8 ff0f 	bl	8000550 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fd53 	bl	80001e4 <__adddf3>
 800773e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	4610      	mov	r0, r2
 8007748:	4619      	mov	r1, r3
 800774a:	f7f8 ff01 	bl	8000550 <__aeabi_dmul>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f8 fd45 	bl	80001e4 <__adddf3>
 800775a:	4632      	mov	r2, r6
 800775c:	ec41 0b1a 	vmov	d10, r0, r1
 8007760:	463b      	mov	r3, r7
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f8 fef3 	bl	8000550 <__aeabi_dmul>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	ec51 0b1a 	vmov	r0, r1, d10
 8007772:	f7f9 f95f 	bl	8000a34 <__aeabi_dcmplt>
 8007776:	b9c0      	cbnz	r0, 80077aa <GW_interpret_speeds+0xea>
 8007778:	2000      	movs	r0, #0
 800777a:	b007      	add	sp, #28
 800777c:	ecbd 8b06 	vpop	{d8-d10}
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007784:	ed9f 7bbe 	vldr	d7, [pc, #760]	; 8007a80 <GW_interpret_speeds+0x3c0>
 8007788:	eeb0 8a47 	vmov.f32	s16, s14
 800778c:	eef0 8a67 	vmov.f32	s17, s15
 8007790:	e7ab      	b.n	80076ea <GW_interpret_speeds+0x2a>
 8007792:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 8007a80 <GW_interpret_speeds+0x3c0>
 8007796:	eeb0 9a47 	vmov.f32	s18, s14
 800779a:	eef0 9a67 	vmov.f32	s19, s15
 800779e:	e7ab      	b.n	80076f8 <GW_interpret_speeds+0x38>
 80077a0:	ed9f 7bb7 	vldr	d7, [pc, #732]	; 8007a80 <GW_interpret_speeds+0x3c0>
 80077a4:	ed8d 7b00 	vstr	d7, [sp]
 80077a8:	e7ad      	b.n	8007706 <GW_interpret_speeds+0x46>
 80077aa:	ee18 3a90 	vmov	r3, s17
 80077ae:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80077b2:	ee19 3a90 	vmov	r3, s19
 80077b6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80077ba:	ee19 0a10 	vmov	r0, s18
 80077be:	2200      	movs	r2, #0
 80077c0:	2300      	movs	r3, #0
 80077c2:	4659      	mov	r1, fp
 80077c4:	ee18 6a10 	vmov	r6, s16
 80077c8:	ee19 aa10 	vmov	sl, s18
 80077cc:	f7f9 f950 	bl	8000a70 <__aeabi_dcmpgt>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f000 80ff 	beq.w	80079d4 <GW_interpret_speeds+0x314>
 80077d6:	ee19 2a10 	vmov	r2, s18
 80077da:	ee18 0a10 	vmov	r0, s16
 80077de:	465b      	mov	r3, fp
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 ffdf 	bl	80007a4 <__aeabi_ddiv>
 80077e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ea:	e9dd 8300 	ldrd	r8, r3, [sp]
 80077ee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80077f2:	2200      	movs	r2, #0
 80077f4:	2300      	movs	r3, #0
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f9 f939 	bl	8000a70 <__aeabi_dcmpgt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f000 80ed 	beq.w	80079de <GW_interpret_speeds+0x31e>
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f8 ffca 	bl	80007a4 <__aeabi_ddiv>
 8007810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007814:	69e0      	ldr	r0, [r4, #28]
 8007816:	f7f8 fe31 	bl	800047c <__aeabi_i2d>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f9 f925 	bl	8000a70 <__aeabi_dcmpgt>
 8007826:	b1f8      	cbz	r0, 8007868 <GW_interpret_speeds+0x1a8>
 8007828:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800782a:	f7f8 fe39 	bl	80004a0 <__aeabi_f2d>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007836:	f7f9 f91b 	bl	8000a70 <__aeabi_dcmpgt>
 800783a:	b1a8      	cbz	r0, 8007868 <GW_interpret_speeds+0x1a8>
 800783c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800783e:	f7f8 fe2f 	bl	80004a0 <__aeabi_f2d>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800784a:	f7f9 f911 	bl	8000a70 <__aeabi_dcmpgt>
 800784e:	b158      	cbz	r0, 8007868 <GW_interpret_speeds+0x1a8>
 8007850:	ec51 0b18 	vmov	r0, r1, d8
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	f7f9 f90a 	bl	8000a70 <__aeabi_dcmpgt>
 800785c:	2800      	cmp	r0, #0
 800785e:	f000 80c3 	beq.w	80079e8 <GW_interpret_speeds+0x328>
 8007862:	2302      	movs	r3, #2
 8007864:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f9 f8fe 	bl	8000a70 <__aeabi_dcmpgt>
 8007874:	2800      	cmp	r0, #0
 8007876:	f000 80c2 	beq.w	80079fe <GW_interpret_speeds+0x33e>
 800787a:	4632      	mov	r2, r6
 800787c:	463b      	mov	r3, r7
 800787e:	4650      	mov	r0, sl
 8007880:	4659      	mov	r1, fp
 8007882:	f7f8 ff8f 	bl	80007a4 <__aeabi_ddiv>
 8007886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	2300      	movs	r3, #0
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f9 f8ed 	bl	8000a70 <__aeabi_dcmpgt>
 8007896:	2800      	cmp	r0, #0
 8007898:	f000 80b6 	beq.w	8007a08 <GW_interpret_speeds+0x348>
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	f7f8 ff7e 	bl	80007a4 <__aeabi_ddiv>
 80078a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078ac:	6a20      	ldr	r0, [r4, #32]
 80078ae:	f7f8 fde5 	bl	800047c <__aeabi_i2d>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4650      	mov	r0, sl
 80078b8:	4659      	mov	r1, fp
 80078ba:	f7f9 f8d9 	bl	8000a70 <__aeabi_dcmpgt>
 80078be:	b1f8      	cbz	r0, 8007900 <GW_interpret_speeds+0x240>
 80078c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80078c2:	f7f8 fded 	bl	80004a0 <__aeabi_f2d>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ce:	f7f9 f8cf 	bl	8000a70 <__aeabi_dcmpgt>
 80078d2:	b1a8      	cbz	r0, 8007900 <GW_interpret_speeds+0x240>
 80078d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80078d6:	f7f8 fde3 	bl	80004a0 <__aeabi_f2d>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078e2:	f7f9 f8c5 	bl	8000a70 <__aeabi_dcmpgt>
 80078e6:	b158      	cbz	r0, 8007900 <GW_interpret_speeds+0x240>
 80078e8:	ec51 0b19 	vmov	r0, r1, d9
 80078ec:	2200      	movs	r2, #0
 80078ee:	2300      	movs	r3, #0
 80078f0:	f7f9 f8be 	bl	8000a70 <__aeabi_dcmpgt>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f000 808c 	beq.w	8007a12 <GW_interpret_speeds+0x352>
 80078fa:	2304      	movs	r3, #4
 80078fc:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f9 f8b2 	bl	8000a70 <__aeabi_dcmpgt>
 800790c:	2800      	cmp	r0, #0
 800790e:	f000 808b 	beq.w	8007a28 <GW_interpret_speeds+0x368>
 8007912:	4632      	mov	r2, r6
 8007914:	463b      	mov	r3, r7
 8007916:	4640      	mov	r0, r8
 8007918:	4649      	mov	r1, r9
 800791a:	f7f8 ff43 	bl	80007a4 <__aeabi_ddiv>
 800791e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	2300      	movs	r3, #0
 8007926:	4650      	mov	r0, sl
 8007928:	4659      	mov	r1, fp
 800792a:	f7f9 f8a1 	bl	8000a70 <__aeabi_dcmpgt>
 800792e:	2800      	cmp	r0, #0
 8007930:	d07f      	beq.n	8007a32 <GW_interpret_speeds+0x372>
 8007932:	4652      	mov	r2, sl
 8007934:	465b      	mov	r3, fp
 8007936:	4640      	mov	r0, r8
 8007938:	4649      	mov	r1, r9
 800793a:	f7f8 ff33 	bl	80007a4 <__aeabi_ddiv>
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007944:	f7f8 fd9a 	bl	800047c <__aeabi_i2d>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f9 f88e 	bl	8000a70 <__aeabi_dcmpgt>
 8007954:	b328      	cbz	r0, 80079a2 <GW_interpret_speeds+0x2e2>
 8007956:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007958:	f7f8 fda2 	bl	80004a0 <__aeabi_f2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007964:	f7f9 f884 	bl	8000a70 <__aeabi_dcmpgt>
 8007968:	b1d8      	cbz	r0, 80079a2 <GW_interpret_speeds+0x2e2>
 800796a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800796c:	f7f8 fd98 	bl	80004a0 <__aeabi_f2d>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f7f9 f87a 	bl	8000a70 <__aeabi_dcmpgt>
 800797c:	b188      	cbz	r0, 80079a2 <GW_interpret_speeds+0x2e2>
 800797e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	f8d4 5f48 	ldr.w	r5, [r4, #3912]	; 0xf48
 800798a:	f7f9 f871 	bl	8000a70 <__aeabi_dcmpgt>
 800798e:	2800      	cmp	r0, #0
 8007990:	d053      	beq.n	8007a3a <GW_interpret_speeds+0x37a>
 8007992:	2301      	movs	r3, #1
 8007994:	f8c4 3f58 	str.w	r3, [r4, #3928]	; 0xf58
 8007998:	f8c4 5f50 	str.w	r5, [r4, #3920]	; 0xf50
 800799c:	2306      	movs	r3, #6
 800799e:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 80079a2:	f894 2f3c 	ldrb.w	r2, [r4, #3900]	; 0xf3c
 80079a6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d160      	bne.n	8007a70 <GW_interpret_speeds+0x3b0>
 80079ae:	2bc8      	cmp	r3, #200	; 0xc8
 80079b0:	f47f aee2 	bne.w	8007778 <GW_interpret_speeds+0xb8>
 80079b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b6:	f7f8 fd73 	bl	80004a0 <__aeabi_f2d>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	ec51 0b1a 	vmov	r0, r1, d10
 80079c2:	f7f9 f837 	bl	8000a34 <__aeabi_dcmplt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f43f aed6 	beq.w	8007778 <GW_interpret_speeds+0xb8>
 80079cc:	2301      	movs	r3, #1
 80079ce:	f884 3f3c 	strb.w	r3, [r4, #3900]	; 0xf3c
 80079d2:	e6d1      	b.n	8007778 <GW_interpret_speeds+0xb8>
 80079d4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8007a88 <GW_interpret_speeds+0x3c8>
 80079d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079dc:	e705      	b.n	80077ea <GW_interpret_speeds+0x12a>
 80079de:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8007a88 <GW_interpret_speeds+0x3c8>
 80079e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80079e6:	e715      	b.n	8007814 <GW_interpret_speeds+0x154>
 80079e8:	ec51 0b18 	vmov	r0, r1, d8
 80079ec:	2200      	movs	r2, #0
 80079ee:	2300      	movs	r3, #0
 80079f0:	f7f9 f820 	bl	8000a34 <__aeabi_dcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f43f af37 	beq.w	8007868 <GW_interpret_speeds+0x1a8>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e732      	b.n	8007864 <GW_interpret_speeds+0x1a4>
 80079fe:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007a88 <GW_interpret_speeds+0x3c8>
 8007a02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a06:	e740      	b.n	800788a <GW_interpret_speeds+0x1ca>
 8007a08:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8007a88 <GW_interpret_speeds+0x3c8>
 8007a0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a10:	e74c      	b.n	80078ac <GW_interpret_speeds+0x1ec>
 8007a12:	ec51 0b19 	vmov	r0, r1, d9
 8007a16:	2200      	movs	r2, #0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f7f9 f80b 	bl	8000a34 <__aeabi_dcmplt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f af6e 	beq.w	8007900 <GW_interpret_speeds+0x240>
 8007a24:	2303      	movs	r3, #3
 8007a26:	e769      	b.n	80078fc <GW_interpret_speeds+0x23c>
 8007a28:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8007a88 <GW_interpret_speeds+0x3c8>
 8007a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a30:	e777      	b.n	8007922 <GW_interpret_speeds+0x262>
 8007a32:	4f17      	ldr	r7, [pc, #92]	; (8007a90 <GW_interpret_speeds+0x3d0>)
 8007a34:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 8007a38:	e783      	b.n	8007942 <GW_interpret_speeds+0x282>
 8007a3a:	f8d4 3f58 	ldr.w	r3, [r4, #3928]	; 0xf58
 8007a3e:	f8c4 5f4c 	str.w	r5, [r4, #3916]	; 0xf4c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10f      	bne.n	8007a66 <GW_interpret_speeds+0x3a6>
 8007a46:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8007a4a:	f8c4 0f58 	str.w	r0, [r4, #3928]	; 0xf58
 8007a4e:	1aad      	subs	r5, r5, r2
 8007a50:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007a52:	f8c4 5f54 	str.w	r5, [r4, #3924]	; 0xf54
 8007a56:	4295      	cmp	r5, r2
 8007a58:	dc03      	bgt.n	8007a62 <GW_interpret_speeds+0x3a2>
 8007a5a:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
 8007a5e:	2307      	movs	r3, #7
 8007a60:	e79d      	b.n	800799e <GW_interpret_speeds+0x2de>
 8007a62:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
 8007a66:	2305      	movs	r3, #5
 8007a68:	e799      	b.n	800799e <GW_interpret_speeds+0x2de>
 8007a6a:	f06f 0001 	mvn.w	r0, #1
 8007a6e:	e684      	b.n	800777a <GW_interpret_speeds+0xba>
 8007a70:	2bc8      	cmp	r3, #200	; 0xc8
 8007a72:	f43f ae81 	beq.w	8007778 <GW_interpret_speeds+0xb8>
 8007a76:	2000      	movs	r0, #0
 8007a78:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8007a7c:	e67d      	b.n	800777a <GW_interpret_speeds+0xba>
 8007a7e:	bf00      	nop
	...
 8007a88:	e0000000 	.word	0xe0000000
 8007a8c:	47efffff 	.word	0x47efffff
 8007a90:	47efffff 	.word	0x47efffff
 8007a94:	00000000 	.word	0x00000000

08007a98 <GW_update_prediction>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f000 80b7 	beq.w	8007c12 <GW_update_prediction+0x17a>
 8007aa4:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
 8007aa8:	f001 f848 	bl	8008b3c <RFBVM_mean>
 8007aac:	f504 660d 	add.w	r6, r4, #2256	; 0x8d0
 8007ab0:	ed86 0a00 	vstr	s0, [r6]
 8007ab4:	f894 38cc 	ldrb.w	r3, [r4, #2252]	; 0x8cc
 8007ab8:	f894 cf1c 	ldrb.w	ip, [r4, #3868]	; 0xf1c
 8007abc:	6920      	ldr	r0, [r4, #16]
 8007abe:	ebac 0103 	sub.w	r1, ip, r3
 8007ac2:	424a      	negs	r2, r1
 8007ac4:	414a      	adcs	r2, r1
 8007ac6:	f604 772c 	addw	r7, r4, #3884	; 0xf2c
 8007aca:	f894 1f28 	ldrb.w	r1, [r4, #3880]	; 0xf28
 8007ace:	edd7 7a00 	vldr	s15, [r7]
 8007ad2:	f884 28d8 	strb.w	r2, [r4, #2264]	; 0x8d8
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	bf08      	it	eq
 8007ada:	2200      	moveq	r2, #0
 8007adc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007ae0:	edd4 7a06 	vldr	s15, [r4, #24]
 8007ae4:	f884 28d5 	strb.w	r2, [r4, #2261]	; 0x8d5
 8007ae8:	f8d4 2f24 	ldr.w	r2, [r4, #3876]	; 0xf24
 8007aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007af0:	1aaa      	subs	r2, r5, r2
 8007af2:	4282      	cmp	r2, r0
 8007af4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007af8:	bfd4      	ite	le
 8007afa:	2200      	movle	r2, #0
 8007afc:	2201      	movgt	r2, #1
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	f884 28d6 	strb.w	r2, [r4, #2262]	; 0x8d6
 8007b06:	bfcc      	ite	gt
 8007b08:	2201      	movgt	r2, #1
 8007b0a:	2200      	movle	r2, #0
 8007b0c:	f884 28d4 	strb.w	r2, [r4, #2260]	; 0x8d4
 8007b10:	1e58      	subs	r0, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d06e      	beq.n	8007bf4 <GW_update_prediction+0x15c>
 8007b16:	4218      	tst	r0, r3
 8007b18:	bf0c      	ite	eq
 8007b1a:	2201      	moveq	r2, #1
 8007b1c:	2200      	movne	r2, #0
 8007b1e:	459c      	cmp	ip, r3
 8007b20:	f884 28d9 	strb.w	r2, [r4, #2265]	; 0x8d9
 8007b24:	d003      	beq.n	8007b2e <GW_update_prediction+0x96>
 8007b26:	b111      	cbz	r1, 8007b2e <GW_update_prediction+0x96>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f884 2f28 	strb.w	r2, [r4, #3880]	; 0xf28
 8007b2e:	fab3 f383 	clz	r3, r3
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	f884 38d7 	strb.w	r3, [r4, #2263]	; 0x8d7
 8007b38:	f7f8 fca0 	bl	800047c <__aeabi_i2d>
 8007b3c:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8007c18 <GW_update_prediction+0x180>
 8007b40:	ec41 0b11 	vmov	d1, r0, r1
 8007b44:	f001 fb2c 	bl	80091a0 <pow>
 8007b48:	ec51 0b10 	vmov	r0, r1, d0
 8007b4c:	f7f8 ffd8 	bl	8000b00 <__aeabi_d2uiz>
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	4218      	tst	r0, r3
 8007b54:	f894 38d7 	ldrb.w	r3, [r4, #2263]	; 0x8d7
 8007b58:	bf18      	it	ne
 8007b5a:	f043 0301 	orrne.w	r3, r3, #1
 8007b5e:	f884 38d7 	strb.w	r3, [r4, #2263]	; 0x8d7
 8007b62:	bb53      	cbnz	r3, 8007bba <GW_update_prediction+0x122>
 8007b64:	f894 38d5 	ldrb.w	r3, [r4, #2261]	; 0x8d5
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d145      	bne.n	8007bf8 <GW_update_prediction+0x160>
 8007b6c:	f8d4 38d4 	ldr.w	r3, [r4, #2260]	; 0x8d4
 8007b70:	f013 1fff 	tst.w	r3, #16711935	; 0xff00ff
 8007b74:	d102      	bne.n	8007b7c <GW_update_prediction+0xe4>
 8007b76:	f894 38d8 	ldrb.w	r3, [r4, #2264]	; 0x8d8
 8007b7a:	b1f3      	cbz	r3, 8007bba <GW_update_prediction+0x122>
 8007b7c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007b80:	ed96 7a00 	vldr	s14, [r6]
 8007b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b90:	d513      	bpl.n	8007bba <GW_update_prediction+0x122>
 8007b92:	f894 38cc 	ldrb.w	r3, [r4, #2252]	; 0x8cc
 8007b96:	f884 3f1c 	strb.w	r3, [r4, #3868]	; 0xf1c
 8007b9a:	f8d4 3f5c 	ldr.w	r3, [r4, #3932]	; 0xf5c
 8007b9e:	b113      	cbz	r3, 8007ba6 <GW_update_prediction+0x10e>
 8007ba0:	2307      	movs	r3, #7
 8007ba2:	f884 3f1c 	strb.w	r3, [r4, #3868]	; 0xf1c
 8007ba6:	f240 1301 	movw	r3, #257	; 0x101
 8007baa:	f8c4 5f20 	str.w	r5, [r4, #3872]	; 0xf20
 8007bae:	f8c4 5f24 	str.w	r5, [r4, #3876]	; 0xf24
 8007bb2:	f8a4 3f28 	strh.w	r3, [r4, #3880]	; 0xf28
 8007bb6:	ed87 7a00 	vstr	s14, [r7]
 8007bba:	f8d4 2f20 	ldr.w	r2, [r4, #3872]	; 0xf20
 8007bbe:	6963      	ldr	r3, [r4, #20]
 8007bc0:	1aad      	subs	r5, r5, r2
 8007bc2:	429d      	cmp	r5, r3
 8007bc4:	bfcc      	ite	gt
 8007bc6:	2301      	movgt	r3, #1
 8007bc8:	2300      	movle	r3, #0
 8007bca:	f884 38da 	strb.w	r3, [r4, #2266]	; 0x8da
 8007bce:	dd16      	ble.n	8007bfe <GW_update_prediction+0x166>
 8007bd0:	f894 3f29 	ldrb.w	r3, [r4, #3881]	; 0xf29
 8007bd4:	b19b      	cbz	r3, 8007bfe <GW_update_prediction+0x166>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 8007bdc:	f894 3f1c 	ldrb.w	r3, [r4, #3868]	; 0xf1c
 8007be0:	2000      	movs	r0, #0
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	f884 0f29 	strb.w	r0, [r4, #3881]	; 0xf29
 8007be8:	d003      	beq.n	8007bf2 <GW_update_prediction+0x15a>
 8007bea:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
 8007bee:	f8c4 0f58 	str.w	r0, [r4, #3928]	; 0xf58
 8007bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	e792      	b.n	8007b1e <GW_update_prediction+0x86>
 8007bf8:	f8c4 5f24 	str.w	r5, [r4, #3876]	; 0xf24
 8007bfc:	e7dd      	b.n	8007bba <GW_update_prediction+0x122>
 8007bfe:	f894 2f2a 	ldrb.w	r2, [r4, #3882]	; 0xf2a
 8007c02:	2300      	movs	r3, #0
 8007c04:	b10a      	cbz	r2, 8007c0a <GW_update_prediction+0x172>
 8007c06:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
 8007c0a:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e7ef      	b.n	8007bf2 <GW_update_prediction+0x15a>
 8007c12:	f06f 0001 	mvn.w	r0, #1
 8007c16:	e7ec      	b.n	8007bf2 <GW_update_prediction+0x15a>
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	40000000 	.word	0x40000000

08007c20 <GW_filter_prediction>:
 8007c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c24:	f600 7444 	addw	r4, r0, #3908	; 0xf44
 8007c28:	2500      	movs	r5, #0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007c30:	6025      	str	r5, [r4, #0]
 8007c32:	f102 0720 	add.w	r7, r2, #32
 8007c36:	461e      	mov	r6, r3
 8007c38:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8007c3c:	f501 7e94 	add.w	lr, r1, #296	; 0x128
 8007c40:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007c44:	45b4      	cmp	ip, r6
 8007c46:	dc46      	bgt.n	8007cd6 <GW_filter_prediction+0xb6>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d069      	beq.n	8007d20 <GW_filter_prediction+0x100>
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	edd4 6a00 	vldr	s13, [r4]
 8007c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5c:	f890 3f2a 	ldrb.w	r3, [r0, #3882]	; 0xf2a
 8007c60:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 8007c64:	ed84 7a00 	vstr	s14, [r4]
 8007c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c74:	bfc2      	ittt	gt
 8007c76:	ed90 7a14 	vldrgt	s14, [r0, #80]	; 0x50
 8007c7a:	eeb8 7ac7 	vcvtgt.f32.s32	s14, s14
 8007c7e:	ed84 7a00 	vstrgt	s14, [r4]
 8007c82:	ed90 7a15 	vldr	s14, [r0, #84]	; 0x54
 8007c86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007c8a:	ed94 7a00 	vldr	s14, [r4]
 8007c8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007c92:	b15b      	cbz	r3, 8007cac <GW_filter_prediction+0x8c>
 8007c94:	f600 732c 	addw	r3, r0, #3884	; 0xf2c
 8007c98:	edd3 6a00 	vldr	s13, [r3]
 8007c9c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca4:	bfc4      	itt	gt
 8007ca6:	2300      	movgt	r3, #0
 8007ca8:	f880 3f2a 	strbgt.w	r3, [r0, #3882]	; 0xf2a
 8007cac:	edd1 6a09 	vldr	s13, [r1, #36]	; 0x24
 8007cb0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb8:	dd0a      	ble.n	8007cd0 <GW_filter_prediction+0xb0>
 8007cba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	d505      	bpl.n	8007cd0 <GW_filter_prediction+0xb0>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f881 3168 	strb.w	r3, [r1, #360]	; 0x168
 8007cca:	61cd      	str	r5, [r1, #28]
 8007ccc:	620d      	str	r5, [r1, #32]
 8007cce:	624d      	str	r5, [r1, #36]	; 0x24
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd6:	f812 8b01 	ldrb.w	r8, [r2], #1
 8007cda:	f1b8 0f00 	cmp.w	r8, #0
 8007cde:	d016      	beq.n	8007d0e <GW_filter_prediction+0xee>
 8007ce0:	ed90 7a14 	vldr	s14, [r0, #80]	; 0x50
 8007ce4:	edd7 7a00 	vldr	s15, [r7]
 8007ce8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf4:	d50b      	bpl.n	8007d0e <GW_filter_prediction+0xee>
 8007cf6:	f81e 8006 	ldrb.w	r8, [lr, r6]
 8007cfa:	ed94 7a00 	vldr	s14, [r4]
 8007cfe:	f1b8 0f00 	cmp.w	r8, #0
 8007d02:	d007      	beq.n	8007d14 <GW_filter_prediction+0xf4>
 8007d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d08:	3301      	adds	r3, #1
 8007d0a:	edc4 7a00 	vstr	s15, [r4]
 8007d0e:	3601      	adds	r6, #1
 8007d10:	3704      	adds	r7, #4
 8007d12:	e797      	b.n	8007c44 <GW_filter_prediction+0x24>
 8007d14:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007d18:	330a      	adds	r3, #10
 8007d1a:	ed84 7a00 	vstr	s14, [r4]
 8007d1e:	e7f6      	b.n	8007d0e <GW_filter_prediction+0xee>
 8007d20:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007d28 <GW_filter_prediction+0x108>
 8007d24:	e79a      	b.n	8007c5c <GW_filter_prediction+0x3c>
 8007d26:	bf00      	nop
 8007d28:	00000000 	.word	0x00000000

08007d2c <setLevelController>:
 8007d2c:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8007d30:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d36:	b538      	push	{r3, r4, r5, lr}
 8007d38:	ee17 3a90 	vmov	r3, s15
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	4604      	mov	r4, r0
 8007d40:	f600 05dc 	addw	r5, r0, #2268	; 0x8dc
 8007d44:	da0e      	bge.n	8007d64 <setLevelController+0x38>
 8007d46:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8007d90 <setLevelController+0x64>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 feb8 	bl	8008ac0 <RFBVM_push>
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 fef3 	bl	8008b3c <RFBVM_mean>
 8007d56:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8007d5a:	ee10 3a10 	vmov	r3, s0
 8007d5e:	f8c4 3f30 	str.w	r3, [r4, #3888]	; 0xf30
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007d66:	429a      	cmp	r2, r3
 8007d68:	dd02      	ble.n	8007d70 <setLevelController+0x44>
 8007d6a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007d94 <setLevelController+0x68>
 8007d6e:	e7ec      	b.n	8007d4a <setLevelController+0x1e>
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	ee00 3a10 	vmov	s0, r3
 8007d76:	f500 632f 	add.w	r3, r0, #2800	; 0xaf0
 8007d7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007d8a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007d8e:	e7dc      	b.n	8007d4a <setLevelController+0x1e>
 8007d90:	42c80000 	.word	0x42c80000
 8007d94:	00000000 	.word	0x00000000

08007d98 <setPolarLevelController>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	ed91 0a08 	vldr	s0, [r1, #32]
 8007d9e:	edd1 7a07 	vldr	s15, [r1, #28]
 8007da2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007da6:	ed2d 8b02 	vpush	{d8}
 8007daa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8007dae:	460c      	mov	r4, r1
 8007db0:	4605      	mov	r5, r0
 8007db2:	f000 fe3d 	bl	8008a30 <taylor_sqrt>
 8007db6:	edd4 7a07 	vldr	s15, [r4, #28]
 8007dba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc2:	eef0 8a40 	vmov.f32	s17, s0
 8007dc6:	d032      	beq.n	8007e2e <setPolarLevelController+0x96>
 8007dc8:	ed94 0a08 	vldr	s0, [r4, #32]
 8007dcc:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007dd0:	f000 fdb6 	bl	8008940 <taylor_atan>
 8007dd4:	ee10 0a10 	vmov	r0, s0
 8007dd8:	f7f8 fb62 	bl	80004a0 <__aeabi_f2d>
 8007ddc:	a321      	add	r3, pc, #132	; (adr r3, 8007e64 <setPolarLevelController+0xcc>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fbb5 	bl	8000550 <__aeabi_dmul>
 8007de6:	f7f8 feab 	bl	8000b40 <__aeabi_d2f>
 8007dea:	ee08 0a10 	vmov	s16, r0
 8007dee:	edd4 7a07 	vldr	s15, [r4, #28]
 8007df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfa:	d51b      	bpl.n	8007e34 <setPolarLevelController+0x9c>
 8007dfc:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007e58 <setPolarLevelController+0xc0>
 8007e00:	ee38 8a27 	vadd.f32	s16, s16, s15
 8007e04:	f605 24f4 	addw	r4, r5, #2804	; 0xaf4
 8007e08:	eeb0 0a68 	vmov.f32	s0, s17
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fe57 	bl	8008ac0 <RFBVM_push>
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fe92 	bl	8008b3c <RFBVM_mean>
 8007e18:	f605 7334 	addw	r3, r5, #3892	; 0xf34
 8007e1c:	f605 7538 	addw	r5, r5, #3896	; 0xf38
 8007e20:	ed83 0a00 	vstr	s0, [r3]
 8007e24:	ed85 8a00 	vstr	s16, [r5]
 8007e28:	ecbd 8b02 	vpop	{d8}
 8007e2c:	bd38      	pop	{r3, r4, r5, pc}
 8007e2e:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8007e5c <setPolarLevelController+0xc4>
 8007e32:	e7dc      	b.n	8007dee <setPolarLevelController+0x56>
 8007e34:	ed94 7a08 	vldr	s14, [r4, #32]
 8007e38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e40:	d5e0      	bpl.n	8007e04 <setPolarLevelController+0x6c>
 8007e42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4a:	dddb      	ble.n	8007e04 <setPolarLevelController+0x6c>
 8007e4c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8007e60 <setPolarLevelController+0xc8>
 8007e50:	e7d6      	b.n	8007e00 <setPolarLevelController+0x68>
 8007e52:	bf00      	nop
 8007e54:	f3af 8000 	nop.w
 8007e58:	43340000 	.word	0x43340000
 8007e5c:	42b40000 	.word	0x42b40000
 8007e60:	43b40000 	.word	0x43b40000
 8007e64:	7a711848 	.word	0x7a711848
 8007e68:	404ca5dc 	.word	0x404ca5dc

08007e6c <GW_level_control>:
 8007e6c:	b513      	push	{r0, r1, r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	b348      	cbz	r0, 8007ec6 <GW_level_control+0x5a>
 8007e72:	f891 0168 	ldrb.w	r0, [r1, #360]	; 0x168
 8007e76:	b918      	cbnz	r0, 8007e80 <GW_level_control+0x14>
 8007e78:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8007e7c:	b002      	add	sp, #8
 8007e7e:	bd10      	pop	{r4, pc}
 8007e80:	f894 3f3c 	ldrb.w	r3, [r4, #3900]	; 0xf3c
 8007e84:	b91b      	cbnz	r3, 8007e8e <GW_level_control+0x22>
 8007e86:	f8c4 3f40 	str.w	r3, [r4, #3904]	; 0xf40
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e7f6      	b.n	8007e7c <GW_level_control+0x10>
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d116      	bne.n	8007ec0 <GW_level_control+0x54>
 8007e92:	f8d4 3f40 	ldr.w	r3, [r4, #3904]	; 0xf40
 8007e96:	b90b      	cbnz	r3, 8007e9c <GW_level_control+0x30>
 8007e98:	f8c4 2f40 	str.w	r2, [r4, #3904]	; 0xf40
 8007e9c:	f8d4 3f40 	ldr.w	r3, [r4, #3904]	; 0xf40
 8007ea0:	1ad2      	subs	r2, r2, r3
 8007ea2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	ddf0      	ble.n	8007e8a <GW_level_control+0x1e>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	f884 3f3c 	strb.w	r3, [r4, #3900]	; 0xf3c
 8007eae:	4620      	mov	r0, r4
 8007eb0:	9101      	str	r1, [sp, #4]
 8007eb2:	f7ff ff3b 	bl	8007d2c <setLevelController>
 8007eb6:	9901      	ldr	r1, [sp, #4]
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7ff ff6d 	bl	8007d98 <setPolarLevelController>
 8007ebe:	e7e4      	b.n	8007e8a <GW_level_control+0x1e>
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d1e2      	bne.n	8007e8a <GW_level_control+0x1e>
 8007ec4:	e7f3      	b.n	8007eae <GW_level_control+0x42>
 8007ec6:	f06f 0001 	mvn.w	r0, #1
 8007eca:	e7d7      	b.n	8007e7c <GW_level_control+0x10>

08007ecc <GW_run>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	460e      	mov	r6, r1
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	b390      	cbz	r0, 8007f3c <GW_run+0x70>
 8007ed6:	b389      	cbz	r1, 8007f3c <GW_run+0x70>
 8007ed8:	b382      	cbz	r2, 8007f3c <GW_run+0x70>
 8007eda:	69d3      	ldr	r3, [r2, #28]
 8007edc:	f8c0 3f48 	str.w	r3, [r0, #3912]	; 0xf48
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 fd1c 	bl	8008920 <HT_run>
 8007ee8:	bb50      	cbnz	r0, 8007f40 <GW_run+0x74>
 8007eea:	f896 3168 	ldrb.w	r3, [r6, #360]	; 0x168
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	23c8      	movne	r3, #200	; 0xc8
 8007ef4:	2364      	moveq	r3, #100	; 0x64
 8007ef6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8007efa:	462a      	mov	r2, r5
 8007efc:	4631      	mov	r1, r6
 8007efe:	4620      	mov	r0, r4
 8007f00:	f7ff fa73 	bl	80073ea <GW_update_hand_buffers>
 8007f04:	b9e0      	cbnz	r0, 8007f40 <GW_run+0x74>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7ff faff 	bl	800750c <GW_compute_speeds>
 8007f0e:	b9b8      	cbnz	r0, 8007f40 <GW_run+0x74>
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7ff fbd5 	bl	80076c0 <GW_interpret_speeds>
 8007f16:	b998      	cbnz	r0, 8007f40 <GW_run+0x74>
 8007f18:	69ea      	ldr	r2, [r5, #28]
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f7ff fdbb 	bl	8007a98 <GW_update_prediction>
 8007f22:	b968      	cbnz	r0, 8007f40 <GW_run+0x74>
 8007f24:	462a      	mov	r2, r5
 8007f26:	4631      	mov	r1, r6
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f7ff fe79 	bl	8007c20 <GW_filter_prediction>
 8007f2e:	b938      	cbnz	r0, 8007f40 <GW_run+0x74>
 8007f30:	69ea      	ldr	r2, [r5, #28]
 8007f32:	4620      	mov	r0, r4
 8007f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f38:	f7ff bf98 	b.w	8007e6c <GW_level_control>
 8007f3c:	f06f 0001 	mvn.w	r0, #1
 8007f40:	bd70      	pop	{r4, r5, r6, pc}

08007f42 <HT_init>:
 8007f42:	b410      	push	{r4}
 8007f44:	b1f0      	cbz	r0, 8007f84 <HT_init+0x42>
 8007f46:	b1e9      	cbz	r1, 8007f84 <HT_init+0x42>
 8007f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f4c:	22fa      	movs	r2, #250	; 0xfa
 8007f4e:	e9c0 3200 	strd	r3, r2, [r0]
 8007f52:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8007f56:	2301      	movs	r3, #1
 8007f58:	e9c0 4302 	strd	r4, r3, [r0, #8]
 8007f5c:	7603      	strb	r3, [r0, #24]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2464      	movs	r4, #100	; 0x64
 8007f62:	61c3      	str	r3, [r0, #28]
 8007f64:	6203      	str	r3, [r0, #32]
 8007f66:	6243      	str	r3, [r0, #36]	; 0x24
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e9c0 4204 	strd	r4, r2, [r0, #16]
 8007f6e:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
 8007f72:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 8007f76:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
 8007f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f7e:	4608      	mov	r0, r1
 8007f80:	f000 be32 	b.w	8008be8 <SEN_init>
 8007f84:	f06f 0001 	mvn.w	r0, #1
 8007f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <HT_set_path_length>:
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	b1a8      	cbz	r0, 8007fc0 <HT_set_path_length+0x32>
 8007f94:	2900      	cmp	r1, #0
 8007f96:	db16      	blt.n	8007fc6 <HT_set_path_length+0x38>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6001      	str	r1, [r0, #0]
 8007f9c:	6083      	str	r3, [r0, #8]
 8007f9e:	300c      	adds	r0, #12
 8007fa0:	f000 fd77 	bl	8008a92 <RFBVM_init>
 8007fa4:	b970      	cbnz	r0, 8007fc4 <HT_set_path_length+0x36>
 8007fa6:	6821      	ldr	r1, [r4, #0]
 8007fa8:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8007fac:	f000 fd71 	bl	8008a92 <RFBVM_init>
 8007fb0:	b940      	cbnz	r0, 8007fc4 <HT_set_path_length+0x36>
 8007fb2:	6821      	ldr	r1, [r4, #0]
 8007fb4:	f204 4034 	addw	r0, r4, #1076	; 0x434
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f000 bd69 	b.w	8008a92 <RFBVM_init>
 8007fc0:	f06f 0001 	mvn.w	r0, #1
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	f06f 0003 	mvn.w	r0, #3
 8007fca:	e7fb      	b.n	8007fc4 <HT_set_path_length+0x36>

08007fcc <HT_set_frequency>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	460d      	mov	r5, r1
 8007fd0:	ed2d 8b02 	vpush	{d8}
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d044      	beq.n	8008064 <HT_set_frequency+0x98>
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d042      	beq.n	8008064 <HT_set_frequency+0x98>
 8007fde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe6:	d942      	bls.n	800806e <HT_set_frequency+0xa2>
 8007fe8:	4608      	mov	r0, r1
 8007fea:	f000 fe1b 	bl	8008c24 <SEN_set_frequency>
 8007fee:	bbd8      	cbnz	r0, 8008068 <HT_set_frequency+0x9c>
 8007ff0:	edd4 7a00 	vldr	s15, [r4]
 8007ff4:	edd5 8a03 	vldr	s17, [r5, #12]
 8007ff8:	ed9f 8a20 	vldr	s16, [pc, #128]	; 800807c <HT_set_frequency+0xb0>
 8007ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008000:	ee27 7a28 	vmul.f32	s14, s14, s17
 8008004:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8008008:	ee17 0a90 	vmov	r0, s15
 800800c:	f7f8 fa48 	bl	80004a0 <__aeabi_f2d>
 8008010:	ec41 0b10 	vmov	d0, r0, r1
 8008014:	f001 fa7c 	bl	8009510 <ceil>
 8008018:	ec51 0b10 	vmov	r0, r1, d0
 800801c:	f7f8 fd48 	bl	8000ab0 <__aeabi_d2iz>
 8008020:	edd4 7a01 	vldr	s15, [r4, #4]
 8008024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008028:	4605      	mov	r5, r0
 800802a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800802e:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8008032:	ee17 0a90 	vmov	r0, s15
 8008036:	f7f8 fa33 	bl	80004a0 <__aeabi_f2d>
 800803a:	ec41 0b10 	vmov	d0, r0, r1
 800803e:	f001 fa67 	bl	8009510 <ceil>
 8008042:	ec51 0b10 	vmov	r0, r1, d0
 8008046:	f7f8 fd33 	bl	8000ab0 <__aeabi_d2iz>
 800804a:	4285      	cmp	r5, r0
 800804c:	db12      	blt.n	8008074 <HT_set_frequency+0xa8>
 800804e:	ecbd 8b02 	vpop	{d8}
 8008052:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
 8008056:	4629      	mov	r1, r5
 8008058:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 800805c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008060:	f7ff bf95 	b.w	8007f8e <HT_set_path_length>
 8008064:	f06f 0001 	mvn.w	r0, #1
 8008068:	ecbd 8b02 	vpop	{d8}
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	f06f 0005 	mvn.w	r0, #5
 8008072:	e7f9      	b.n	8008068 <HT_set_frequency+0x9c>
 8008074:	f06f 0006 	mvn.w	r0, #6
 8008078:	e7f6      	b.n	8008068 <HT_set_frequency+0x9c>
 800807a:	bf00      	nop
 800807c:	447a0000 	.word	0x447a0000

08008080 <HT_struct_init>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	460d      	mov	r5, r1
 8008084:	4604      	mov	r4, r0
 8008086:	b178      	cbz	r0, 80080a8 <HT_struct_init+0x28>
 8008088:	1e4b      	subs	r3, r1, #1
 800808a:	2b3f      	cmp	r3, #63	; 0x3f
 800808c:	d80f      	bhi.n	80080ae <HT_struct_init+0x2e>
 800808e:	008a      	lsls	r2, r1, #2
 8008090:	300c      	adds	r0, #12
 8008092:	2100      	movs	r1, #0
 8008094:	f000 fffa 	bl	800908c <memset>
 8008098:	462a      	mov	r2, r5
 800809a:	2100      	movs	r1, #0
 800809c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80080a0:	f000 fff4 	bl	800908c <memset>
 80080a4:	2000      	movs	r0, #0
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	f06f 0001 	mvn.w	r0, #1
 80080ac:	e7fb      	b.n	80080a6 <HT_struct_init+0x26>
 80080ae:	f06f 0003 	mvn.w	r0, #3
 80080b2:	e7f8      	b.n	80080a6 <HT_struct_init+0x26>

080080b4 <HT_set_square_resolution>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	4605      	mov	r5, r0
 80080ba:	4611      	mov	r1, r2
 80080bc:	b168      	cbz	r0, 80080da <HT_set_square_resolution+0x26>
 80080be:	b164      	cbz	r4, 80080da <HT_set_square_resolution+0x26>
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	dd0d      	ble.n	80080e0 <HT_set_square_resolution+0x2c>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fdd1 	bl	8008c6c <SEN_set_square_resolution>
 80080ca:	b940      	cbnz	r0, 80080de <HT_set_square_resolution+0x2a>
 80080cc:	68a1      	ldr	r1, [r4, #8]
 80080ce:	f105 001c 	add.w	r0, r5, #28
 80080d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d6:	f7ff bfd3 	b.w	8008080 <HT_struct_init>
 80080da:	f06f 0001 	mvn.w	r0, #1
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	f06f 0003 	mvn.w	r0, #3
 80080e4:	e7fb      	b.n	80080de <HT_set_square_resolution+0x2a>
	...

080080e8 <HT_find_hand>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	ed2d 8b08 	vpush	{d8-d11}
 80080f0:	468a      	mov	sl, r1
 80080f2:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 80080f6:	4604      	mov	r4, r0
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f000 8334 	beq.w	8008766 <HT_find_hand+0x67e>
 80080fe:	2900      	cmp	r1, #0
 8008100:	f000 8331 	beq.w	8008766 <HT_find_hand+0x67e>
 8008104:	688b      	ldr	r3, [r1, #8]
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f340 832f 	ble.w	800876c <HT_find_hand+0x684>
 800810e:	f501 7308 	add.w	r3, r1, #544	; 0x220
 8008112:	9306      	str	r3, [sp, #24]
 8008114:	69cb      	ldr	r3, [r1, #28]
 8008116:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	ed9f 8a35 	vldr	s16, [pc, #212]	; 80081f4 <HT_find_hand+0x10c>
 8008120:	edd0 9a07 	vldr	s19, [r0, #28]
 8008124:	ed90 aa08 	vldr	s20, [r0, #32]
 8008128:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 800812c:	ed80 8a07 	vstr	s16, [r0, #28]
 8008130:	009e      	lsls	r6, r3, #2
 8008132:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8008136:	2700      	movs	r7, #0
 8008138:	f101 0920 	add.w	r9, r1, #32
 800813c:	4632      	mov	r2, r6
 800813e:	ed80 8a08 	vstr	s16, [r0, #32]
 8008142:	ed80 8a09 	vstr	s16, [r0, #36]	; 0x24
 8008146:	f8a0 7168 	strh.w	r7, [r0, #360]	; 0x168
 800814a:	4629      	mov	r1, r5
 800814c:	a8e8      	add	r0, sp, #928	; 0x3a0
 800814e:	f000 ffcf 	bl	80090f0 <memcpy>
 8008152:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8008156:	4619      	mov	r1, r3
 8008158:	9a01      	ldr	r2, [sp, #4]
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
 8008160:	f000 ffc6 	bl	80090f0 <memcpy>
 8008164:	9a04      	ldr	r2, [sp, #16]
 8008166:	9209      	str	r2, [sp, #36]	; 0x24
 8008168:	f20a 231f 	addw	r3, sl, #543	; 0x21f
 800816c:	4611      	mov	r1, r2
 800816e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008172:	444e      	add	r6, r9
 8008174:	4618      	mov	r0, r3
 8008176:	464a      	mov	r2, r9
 8008178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8008180:	ecf2 7a01 	vldmia	r2!, {s15}
 8008184:	f1bc 0f00 	cmp.w	ip, #0
 8008188:	bf0c      	ite	eq
 800818a:	eeb0 7a48 	vmoveq.f32	s14, s16
 800818e:	eeb0 7a66 	vmovne.f32	s14, s13
 8008192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008196:	42b2      	cmp	r2, r6
 8008198:	ece5 7a01 	vstmia	r5!, {s15}
 800819c:	f801 7b01 	strb.w	r7, [r1], #1
 80081a0:	d1ec      	bne.n	800817c <HT_find_hand+0x94>
 80081a2:	4649      	mov	r1, r9
 80081a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80081a8:	2200      	movs	r2, #0
 80081aa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80081ae:	b168      	cbz	r0, 80081cc <HT_find_hand+0xe4>
 80081b0:	1c70      	adds	r0, r6, #1
 80081b2:	d01b      	beq.n	80081ec <HT_find_hand+0x104>
 80081b4:	eb09 0086 	add.w	r0, r9, r6, lsl #2
 80081b8:	ed91 7a00 	vldr	s14, [r1]
 80081bc:	edd0 7a00 	vldr	s15, [r0]
 80081c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80081c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c8:	bf48      	it	mi
 80081ca:	4616      	movmi	r6, r2
 80081cc:	9801      	ldr	r0, [sp, #4]
 80081ce:	3201      	adds	r2, #1
 80081d0:	4290      	cmp	r0, r2
 80081d2:	f101 0104 	add.w	r1, r1, #4
 80081d6:	d1e8      	bne.n	80081aa <HT_find_hand+0xc2>
 80081d8:	1c73      	adds	r3, r6, #1
 80081da:	d10d      	bne.n	80081f8 <HT_find_hand+0x110>
 80081dc:	2500      	movs	r5, #0
 80081de:	4628      	mov	r0, r5
 80081e0:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80081e4:	ecbd 8b08 	vpop	{d8-d11}
 80081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	4616      	mov	r6, r2
 80081ee:	e7ed      	b.n	80081cc <HT_find_hand+0xe4>
 80081f0:	43c80000 	.word	0x43c80000
 80081f4:	00000000 	.word	0x00000000
 80081f8:	4652      	mov	r2, sl
 80081fa:	eeb0 1a49 	vmov.f32	s2, s18
 80081fe:	eef0 0a4a 	vmov.f32	s1, s20
 8008202:	eeb0 0a69 	vmov.f32	s0, s19
 8008206:	a919      	add	r1, sp, #100	; 0x64
 8008208:	a818      	add	r0, sp, #96	; 0x60
 800820a:	f000 febf 	bl	8008f8c <SEN_mm_to_col_row>
 800820e:	1cc7      	adds	r7, r0, #3
 8008210:	4605      	mov	r5, r0
 8008212:	d02b      	beq.n	800826c <HT_find_hand+0x184>
 8008214:	2800      	cmp	r0, #0
 8008216:	d1e2      	bne.n	80081de <HT_find_hand+0xf6>
 8008218:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 800821c:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8008220:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008228:	ee17 2a10 	vmov	r2, s14
 800822c:	ee17 1a90 	vmov	r1, s15
 8008230:	4653      	mov	r3, sl
 8008232:	a816      	add	r0, sp, #88	; 0x58
 8008234:	f000 fd96 	bl	8008d64 <SEN_col_row_to_idx>
 8008238:	4605      	mov	r5, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d1cf      	bne.n	80081de <HT_find_hand+0xf6>
 800823e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008240:	9a06      	ldr	r2, [sp, #24]
 8008242:	5cd2      	ldrb	r2, [r2, r3]
 8008244:	b192      	cbz	r2, 800826c <HT_find_hand+0x184>
 8008246:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800824a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 800824e:	edd2 7a00 	vldr	s15, [r2]
 8008252:	ed93 7a00 	vldr	s14, [r3]
 8008256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800825a:	edd4 7a04 	vldr	s15, [r4, #16]
 800825e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826a:	d400      	bmi.n	800826e <HT_find_hand+0x186>
 800826c:	9616      	str	r6, [sp, #88]	; 0x58
 800826e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008270:	9325      	str	r3, [sp, #148]	; 0x94
 8008272:	18e1      	adds	r1, r4, r3
 8008274:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008278:	2201      	movs	r2, #1
 800827a:	ed93 8a00 	vldr	s16, [r3]
 800827e:	f881 2128 	strb.w	r2, [r1, #296]	; 0x128
 8008282:	2300      	movs	r3, #0
 8008284:	9202      	str	r2, [sp, #8]
 8008286:	9305      	str	r3, [sp, #20]
 8008288:	9a05      	ldr	r2, [sp, #20]
 800828a:	ab25      	add	r3, sp, #148	; 0x94
 800828c:	ae17      	add	r6, sp, #92	; 0x5c
 800828e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008292:	4631      	mov	r1, r6
 8008294:	4653      	mov	r3, sl
 8008296:	462a      	mov	r2, r5
 8008298:	a815      	add	r0, sp, #84	; 0x54
 800829a:	f000 fd23 	bl	8008ce4 <SEN_idx_to_col_row>
 800829e:	9000      	str	r0, [sp, #0]
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f040 8266 	bne.w	8008772 <HT_find_hand+0x68a>
 80082a6:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 80082aa:	9312      	str	r3, [sp, #72]	; 0x48
 80082ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b0:	4680      	mov	r8, r0
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	9613      	str	r6, [sp, #76]	; 0x4c
 80082b6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80082ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082bc:	9807      	ldr	r0, [sp, #28]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80082c2:	4653      	mov	r3, sl
 80082c4:	4401      	add	r1, r0
 80082c6:	445a      	add	r2, fp
 80082c8:	a816      	add	r0, sp, #88	; 0x58
 80082ca:	f000 fd4b 	bl	8008d64 <SEN_col_row_to_idx>
 80082ce:	1cc6      	adds	r6, r0, #3
 80082d0:	4605      	mov	r5, r0
 80082d2:	d018      	beq.n	8008306 <HT_find_hand+0x21e>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d182      	bne.n	80081de <HT_find_hand+0xf6>
 80082d8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80082da:	19a3      	adds	r3, r4, r6
 80082dc:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80082e0:	9308      	str	r3, [sp, #32]
 80082e2:	b983      	cbnz	r3, 8008306 <HT_find_hand+0x21e>
 80082e4:	9b06      	ldr	r3, [sp, #24]
 80082e6:	5d9b      	ldrb	r3, [r3, r6]
 80082e8:	930a      	str	r3, [sp, #40]	; 0x28
 80082ea:	b163      	cbz	r3, 8008306 <HT_find_hand+0x21e>
 80082ec:	af1c      	add	r7, sp, #112	; 0x70
 80082ee:	4545      	cmp	r5, r8
 80082f0:	f040 817a 	bne.w	80085e8 <HT_find_hand+0x500>
 80082f4:	9b08      	ldr	r3, [sp, #32]
 80082f6:	b103      	cbz	r3, 80082fa <HT_find_hand+0x212>
 80082f8:	9616      	str	r6, [sp, #88]	; 0x58
 80082fa:	aa1c      	add	r2, sp, #112	; 0x70
 80082fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082fe:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 8008302:	f108 0801 	add.w	r8, r8, #1
 8008306:	f10b 0b01 	add.w	fp, fp, #1
 800830a:	f1bb 0f02 	cmp.w	fp, #2
 800830e:	d1d4      	bne.n	80082ba <HT_find_hand+0x1d2>
 8008310:	9b07      	ldr	r3, [sp, #28]
 8008312:	3301      	adds	r3, #1
 8008314:	2b02      	cmp	r3, #2
 8008316:	9307      	str	r3, [sp, #28]
 8008318:	d1cd      	bne.n	80082b6 <HT_find_hand+0x1ce>
 800831a:	2500      	movs	r5, #0
 800831c:	9516      	str	r5, [sp, #88]	; 0x58
 800831e:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8008322:	462b      	mov	r3, r5
 8008324:	2701      	movs	r7, #1
 8008326:	4545      	cmp	r5, r8
 8008328:	f040 8194 	bne.w	8008654 <HT_find_hand+0x56c>
 800832c:	b103      	cbz	r3, 8008330 <HT_find_hand+0x248>
 800832e:	9516      	str	r5, [sp, #88]	; 0x58
 8008330:	9b05      	ldr	r3, [sp, #20]
 8008332:	3301      	adds	r3, #1
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	9a05      	ldr	r2, [sp, #20]
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	4293      	cmp	r3, r2
 800833c:	dca4      	bgt.n	8008288 <HT_find_hand+0x1a0>
 800833e:	edd4 7a02 	vldr	s15, [r4, #8]
 8008342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008346:	eef4 7ac8 	vcmpe.f32	s15, s16
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	f53f af45 	bmi.w	80081dc <HT_find_hand+0xf4>
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	9a02      	ldr	r2, [sp, #8]
 8008356:	4293      	cmp	r3, r2
 8008358:	f6bf af40 	bge.w	80081dc <HT_find_hand+0xf4>
 800835c:	6963      	ldr	r3, [r4, #20]
 800835e:	eddd 7a01 	vldr	s15, [sp, #4]
 8008362:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800836e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008372:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837a:	bfdf      	itttt	le
 800837c:	435b      	mulle	r3, r3
 800837e:	ee07 3a90 	vmovle	s15, r3
 8008382:	ee68 6a08 	vmulle.f32	s13, s16, s16
 8008386:	eef8 7ae7 	vcvtle.f32.s32	s15, s15
 800838a:	bfcf      	iteee	gt
 800838c:	ee36 7a07 	vaddgt.f32	s14, s12, s14
 8008390:	eec6 5aa7 	vdivle.f32	s11, s13, s15
 8008394:	eec6 7a25 	vdivle.f32	s15, s12, s11
 8008398:	ee37 7a87 	vaddle.f32	s14, s15, s14
 800839c:	eddd 7a02 	vldr	s15, [sp, #8]
 80083a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ac:	dd07      	ble.n	80083be <HT_find_hand+0x2d6>
 80083ae:	ed5f 7a70 	vldr	s15, [pc, #-448]	; 80081f0 <HT_find_hand+0x108>
 80083b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80083b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ba:	f53f af0f 	bmi.w	80081dc <HT_find_hand+0xf4>
 80083be:	2301      	movs	r3, #1
 80083c0:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
 80083c4:	f50d 7825 	add.w	r8, sp, #660	; 0x294
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	464f      	mov	r7, r9
 80083ce:	46c3      	mov	fp, r8
 80083d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80083d4:	9a02      	ldr	r2, [sp, #8]
 80083d6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80083da:	9202      	str	r2, [sp, #8]
 80083dc:	b1f3      	cbz	r3, 800841c <HT_find_hand+0x334>
 80083de:	9a00      	ldr	r2, [sp, #0]
 80083e0:	ed97 0a00 	vldr	s0, [r7]
 80083e4:	ad65      	add	r5, sp, #404	; 0x194
 80083e6:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 80083ea:	4653      	mov	r3, sl
 80083ec:	4659      	mov	r1, fp
 80083ee:	f000 fdae 	bl	8008f4e <SEN_idx_to_mm>
 80083f2:	4605      	mov	r5, r0
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f47f aef2 	bne.w	80081de <HT_find_hand+0xf6>
 80083fa:	1c70      	adds	r0, r6, #1
 80083fc:	f000 8167 	beq.w	80086ce <HT_find_hand+0x5e6>
 8008400:	aba5      	add	r3, sp, #660	; 0x294
 8008402:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008406:	ed93 7a00 	vldr	s14, [r3]
 800840a:	eddb 7a00 	vldr	s15, [fp]
 800840e:	9b00      	ldr	r3, [sp, #0]
 8008410:	eeb4 7a67 	vcmp.f32	s14, s15
 8008414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008418:	bf48      	it	mi
 800841a:	461e      	movmi	r6, r3
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008426:	4293      	cmp	r3, r2
 8008428:	f10b 0b04 	add.w	fp, fp, #4
 800842c:	f107 0704 	add.w	r7, r7, #4
 8008430:	dcd0      	bgt.n	80083d4 <HT_find_hand+0x2ec>
 8008432:	1c71      	adds	r1, r6, #1
 8008434:	f43f aed2 	beq.w	80081dc <HT_find_hand+0xf4>
 8008438:	4652      	mov	r2, sl
 800843a:	eeb0 0a48 	vmov.f32	s0, s16
 800843e:	a91a      	add	r1, sp, #104	; 0x68
 8008440:	a81b      	add	r0, sp, #108	; 0x6c
 8008442:	f000 fcd2 	bl	8008dea <SEN_zone_size>
 8008446:	2800      	cmp	r0, #0
 8008448:	f040 8195 	bne.w	8008776 <HT_find_hand+0x68e>
 800844c:	6963      	ldr	r3, [r4, #20]
 800844e:	435b      	muls	r3, r3
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	ee28 8a08 	vmul.f32	s16, s16, s16
 8008458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800845c:	ad65      	add	r5, sp, #404	; 0x194
 800845e:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8008462:	ed1f 8a9c 	vldr	s16, [pc, #-624]	; 80081f4 <HT_find_hand+0x10c>
 8008466:	ee17 0a90 	vmov	r0, s15
 800846a:	f7f8 f819 	bl	80004a0 <__aeabi_f2d>
 800846e:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 8008780 <HT_find_hand+0x698>
 8008472:	ec41 0b11 	vmov	d1, r0, r1
 8008476:	f000 fe93 	bl	80091a0 <pow>
 800847a:	49c3      	ldr	r1, [pc, #780]	; (8008788 <HT_find_hand+0x6a0>)
 800847c:	ec53 2b10 	vmov	r2, r3, d0
 8008480:	2000      	movs	r0, #0
 8008482:	f7f7 fead 	bl	80001e0 <__aeabi_dsub>
 8008486:	460b      	mov	r3, r1
 8008488:	4602      	mov	r2, r0
 800848a:	f7f7 feab 	bl	80001e4 <__adddf3>
 800848e:	f7f8 fb57 	bl	8000b40 <__aeabi_d2f>
 8008492:	aba5      	add	r3, sp, #660	; 0x294
 8008494:	ee0a 0a90 	vmov	s21, r0
 8008498:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800849c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800849e:	f812 3b01 	ldrb.w	r3, [r2], #1
 80084a2:	9209      	str	r2, [sp, #36]	; 0x24
 80084a4:	b3db      	cbz	r3, 800851e <HT_find_hand+0x436>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 80084ac:	7e23      	ldrb	r3, [r4, #24]
 80084ae:	b1db      	cbz	r3, 80084e8 <HT_find_hand+0x400>
 80084b0:	ed96 7a00 	vldr	s14, [r6]
 80084b4:	edd8 7a00 	vldr	s15, [r8]
 80084b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084bc:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80084c0:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80084c4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80084c8:	ee17 0a90 	vmov	r0, s15
 80084cc:	f7f7 ffe8 	bl	80004a0 <__aeabi_f2d>
 80084d0:	ec41 0b10 	vmov	d0, r0, r1
 80084d4:	f000 fe1c 	bl	8009110 <exp>
 80084d8:	ec51 0b10 	vmov	r0, r1, d0
 80084dc:	f7f8 fb30 	bl	8000b40 <__aeabi_d2f>
 80084e0:	ee07 0a90 	vmov	s15, r0
 80084e4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80084e8:	ed95 7a00 	vldr	s14, [r5]
 80084ec:	edd4 7a07 	vldr	s15, [r4, #28]
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	eee7 7a28 	vfma.f32	s15, s14, s17
 80084f6:	ed98 7a00 	vldr	s14, [r8]
 80084fa:	edc4 7a07 	vstr	s15, [r4, #28]
 80084fe:	edd4 7a08 	vldr	s15, [r4, #32]
 8008502:	eee7 7a28 	vfma.f32	s15, s14, s17
 8008506:	ee38 8a28 	vadd.f32	s16, s16, s17
 800850a:	edc4 7a08 	vstr	s15, [r4, #32]
 800850e:	ed93 7a00 	vldr	s14, [r3]
 8008512:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8008516:	eee7 7a28 	vfma.f32	s15, s14, s17
 800851a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	9a01      	ldr	r2, [sp, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	1b1b      	subs	r3, r3, r4
 800852a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800852e:	429a      	cmp	r2, r3
 8008530:	f105 0504 	add.w	r5, r5, #4
 8008534:	f108 0804 	add.w	r8, r8, #4
 8008538:	dcb0      	bgt.n	800849c <HT_find_hand+0x3b4>
 800853a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	d011      	beq.n	8008568 <HT_find_hand+0x480>
 8008544:	ed94 7a07 	vldr	s14, [r4, #28]
 8008548:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800854c:	ed94 7a08 	vldr	s14, [r4, #32]
 8008550:	edc4 7a07 	vstr	s15, [r4, #28]
 8008554:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8008558:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800855c:	edc4 7a08 	vstr	s15, [r4, #32]
 8008560:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8008564:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 8008568:	4651      	mov	r1, sl
 800856a:	eeb0 1a49 	vmov.f32	s2, s18
 800856e:	eef0 0a4a 	vmov.f32	s1, s20
 8008572:	eeb0 0a69 	vmov.f32	s0, s19
 8008576:	a816      	add	r0, sp, #88	; 0x58
 8008578:	f000 fd69 	bl	800904e <SEN_mm_to_idx>
 800857c:	1cc2      	adds	r2, r0, #3
 800857e:	4605      	mov	r5, r0
 8008580:	f000 80e6 	beq.w	8008750 <HT_find_hand+0x668>
 8008584:	2800      	cmp	r0, #0
 8008586:	f47f ae2a 	bne.w	80081de <HT_find_hand+0xf6>
 800858a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800858c:	18e2      	adds	r2, r4, r3
 800858e:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 8008592:	2a00      	cmp	r2, #0
 8008594:	f47f ae22 	bne.w	80081dc <HT_find_hand+0xf4>
 8008598:	9a06      	ldr	r2, [sp, #24]
 800859a:	5cd2      	ldrb	r2, [r2, r3]
 800859c:	2a00      	cmp	r2, #0
 800859e:	f000 8098 	beq.w	80086d2 <HT_find_hand+0x5ea>
 80085a2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	f7f7 ff7a 	bl	80004a0 <__aeabi_f2d>
 80085ac:	4606      	mov	r6, r0
 80085ae:	ee19 0a10 	vmov	r0, s18
 80085b2:	460f      	mov	r7, r1
 80085b4:	f7f7 ff74 	bl	80004a0 <__aeabi_f2d>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f7 fe0e 	bl	80001e0 <__aeabi_dsub>
 80085c4:	4606      	mov	r6, r0
 80085c6:	6920      	ldr	r0, [r4, #16]
 80085c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80085cc:	f7f7 ff56 	bl	800047c <__aeabi_i2d>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f7f8 fa2c 	bl	8000a34 <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d078      	beq.n	80086d2 <HT_find_hand+0x5ea>
 80085e0:	2301      	movs	r3, #1
 80085e2:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
 80085e6:	e5f9      	b.n	80081dc <HT_find_hand+0xf4>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	f7f7 ff56 	bl	80004a0 <__aeabi_f2d>
 80085f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80085fa:	ec41 0b1b 	vmov	d11, r0, r1
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	f7f7 ff4e 	bl	80004a0 <__aeabi_f2d>
 8008604:	ec53 2b1b 	vmov	r2, r3, d11
 8008608:	f7f7 fdea 	bl	80001e0 <__aeabi_dsub>
 800860c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008610:	930d      	str	r3, [sp, #52]	; 0x34
 8008612:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8008616:	900c      	str	r0, [sp, #48]	; 0x30
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	f7f7 ff41 	bl	80004a0 <__aeabi_f2d>
 800861e:	ec53 2b1b 	vmov	r2, r3, d11
 8008622:	f7f7 fddd 	bl	80001e0 <__aeabi_dsub>
 8008626:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800862a:	900e      	str	r0, [sp, #56]	; 0x38
 800862c:	930f      	str	r3, [sp, #60]	; 0x3c
 800862e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008636:	f7f8 fa1b 	bl	8000a70 <__aeabi_dcmpgt>
 800863a:	b140      	cbz	r0, 800864e <HT_find_hand+0x566>
 800863c:	aa1c      	add	r2, sp, #112	; 0x70
 800863e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008640:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 8008644:	603e      	str	r6, [r7, #0]
 8008646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008648:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 800864c:	9308      	str	r3, [sp, #32]
 800864e:	3501      	adds	r5, #1
 8008650:	3704      	adds	r7, #4
 8008652:	e64c      	b.n	80082ee <HT_find_hand+0x206>
 8008654:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008658:	ee18 0a10 	vmov	r0, s16
 800865c:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8008660:	edd3 8a00 	vldr	s17, [r3]
 8008664:	f7f7 ff1c 	bl	80004a0 <__aeabi_f2d>
 8008668:	ec41 0b1b 	vmov	d11, r0, r1
 800866c:	ee18 0a90 	vmov	r0, s17
 8008670:	f7f7 ff16 	bl	80004a0 <__aeabi_f2d>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	ec51 0b1b 	vmov	r0, r1, d11
 800867c:	f7f7 fdb0 	bl	80001e0 <__aeabi_dsub>
 8008680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008684:	9010      	str	r0, [sp, #64]	; 0x40
 8008686:	6920      	ldr	r0, [r4, #16]
 8008688:	9311      	str	r3, [sp, #68]	; 0x44
 800868a:	f7f7 fef7 	bl	800047c <__aeabi_i2d>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008696:	f7f8 f9cd 	bl	8000a34 <__aeabi_dcmplt>
 800869a:	b1a8      	cbz	r0, 80086c8 <HT_find_hand+0x5e0>
 800869c:	9a02      	ldr	r2, [sp, #8]
 800869e:	19a3      	adds	r3, r4, r6
 80086a0:	ee07 2a90 	vmov	s15, r2
 80086a4:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ae:	3301      	adds	r3, #1
 80086b0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80086b4:	a925      	add	r1, sp, #148	; 0x94
 80086b6:	9302      	str	r3, [sp, #8]
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086c0:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
 80086c4:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 80086c8:	3501      	adds	r5, #1
 80086ca:	2301      	movs	r3, #1
 80086cc:	e62b      	b.n	8008326 <HT_find_hand+0x23e>
 80086ce:	9e00      	ldr	r6, [sp, #0]
 80086d0:	e6a4      	b.n	800841c <HT_find_hand+0x334>
 80086d2:	ed94 1a09 	vldr	s2, [r4, #36]	; 0x24
 80086d6:	edd4 0a08 	vldr	s1, [r4, #32]
 80086da:	ed94 0a07 	vldr	s0, [r4, #28]
 80086de:	4651      	mov	r1, sl
 80086e0:	a816      	add	r0, sp, #88	; 0x58
 80086e2:	f000 fcb4 	bl	800904e <SEN_mm_to_idx>
 80086e6:	1cc3      	adds	r3, r0, #3
 80086e8:	f43f ad79 	beq.w	80081de <HT_find_hand+0xf6>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d142      	bne.n	8008776 <HT_find_hand+0x68e>
 80086f0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80086f2:	9b06      	ldr	r3, [sp, #24]
 80086f4:	5d5b      	ldrb	r3, [r3, r5]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f43f ad70 	beq.w	80081dc <HT_find_hand+0xf4>
 80086fc:	abe5      	add	r3, sp, #916	; 0x394
 80086fe:	442b      	add	r3, r5
 8008700:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008704:	2b00      	cmp	r3, #0
 8008706:	f47f ad69 	bne.w	80081dc <HT_find_hand+0xf4>
 800870a:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	f7f7 fec6 	bl	80004a0 <__aeabi_f2d>
 8008714:	abe5      	add	r3, sp, #916	; 0x394
 8008716:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800871a:	4606      	mov	r6, r0
 800871c:	68d8      	ldr	r0, [r3, #12]
 800871e:	460f      	mov	r7, r1
 8008720:	f7f7 febe 	bl	80004a0 <__aeabi_f2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fd58 	bl	80001e0 <__aeabi_dsub>
 8008730:	4606      	mov	r6, r0
 8008732:	6920      	ldr	r0, [r4, #16]
 8008734:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008738:	f7f7 fea0 	bl	800047c <__aeabi_i2d>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f8 f976 	bl	8000a34 <__aeabi_dcmplt>
 8008748:	2800      	cmp	r0, #0
 800874a:	f47f af49 	bne.w	80085e0 <HT_find_hand+0x4f8>
 800874e:	e545      	b.n	80081dc <HT_find_hand+0xf4>
 8008750:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 8008754:	2b00      	cmp	r3, #0
 8008756:	f77f af43 	ble.w	80085e0 <HT_find_hand+0x4f8>
 800875a:	f8d4 2174 	ldr.w	r2, [r4, #372]	; 0x174
 800875e:	4293      	cmp	r3, r2
 8008760:	f73f af3e 	bgt.w	80085e0 <HT_find_hand+0x4f8>
 8008764:	e53a      	b.n	80081dc <HT_find_hand+0xf4>
 8008766:	f06f 0501 	mvn.w	r5, #1
 800876a:	e538      	b.n	80081de <HT_find_hand+0xf6>
 800876c:	f06f 0503 	mvn.w	r5, #3
 8008770:	e535      	b.n	80081de <HT_find_hand+0xf6>
 8008772:	9d00      	ldr	r5, [sp, #0]
 8008774:	e533      	b.n	80081de <HT_find_hand+0xf6>
 8008776:	4605      	mov	r5, r0
 8008778:	e531      	b.n	80081de <HT_find_hand+0xf6>
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w
 8008780:	00000000 	.word	0x00000000
 8008784:	3fe00000 	.word	0x3fe00000
 8008788:	3ff00000 	.word	0x3ff00000

0800878c <HT_path_interpolate>:
 800878c:	e92d 4f58 	stmdb	sp!, {r3, r4, r6, r8, r9, sl, fp, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	ed2d 8b08 	vpush	{d8-d11}
 8008796:	eeb0 8a40 	vmov.f32	s16, s0
 800879a:	eef0 8a60 	vmov.f32	s17, s1
 800879e:	eeb0 9a41 	vmov.f32	s18, s2
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d072      	beq.n	800888c <HT_path_interpolate+0x100>
 80087a6:	6883      	ldr	r3, [r0, #8]
 80087a8:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
 80087ac:	f100 0b0c 	add.w	fp, r0, #12
 80087b0:	1ac9      	subs	r1, r1, r3
 80087b2:	4658      	mov	r0, fp
 80087b4:	f000 f9ec 	bl	8008b90 <RFBVM_get_element_value>
 80087b8:	68a3      	ldr	r3, [r4, #8]
 80087ba:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 80087be:	f504 7908 	add.w	r9, r4, #544	; 0x220
 80087c2:	1ac9      	subs	r1, r1, r3
 80087c4:	4648      	mov	r0, r9
 80087c6:	eef0 9a40 	vmov.f32	s19, s0
 80087ca:	f000 f9e1 	bl	8008b90 <RFBVM_get_element_value>
 80087ce:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	f204 4a34 	addw	sl, r4, #1076	; 0x434
 80087d8:	1ac9      	subs	r1, r1, r3
 80087da:	4650      	mov	r0, sl
 80087dc:	eeb0 aa40 	vmov.f32	s20, s0
 80087e0:	f000 f9d6 	bl	8008b90 <RFBVM_get_element_value>
 80087e4:	2600      	movs	r6, #0
 80087e6:	eef0 aa40 	vmov.f32	s21, s0
 80087ea:	f04f 0801 	mov.w	r8, #1
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	4543      	cmp	r3, r8
 80087f2:	dc08      	bgt.n	8008806 <HT_path_interpolate+0x7a>
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	bf18      	it	ne
 80087f8:	f06f 0607 	mvnne.w	r6, #7
 80087fc:	ecbd 8b08 	vpop	{d8-d11}
 8008800:	4630      	mov	r0, r6
 8008802:	e8bd 8f58 	ldmia.w	sp!, {r3, r4, r6, r8, r9, sl, fp, pc}
 8008806:	ee07 8a90 	vmov	s15, r8
 800880a:	ee39 7ac8 	vsub.f32	s14, s19, s16
 800880e:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800881a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800881e:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8008822:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008826:	eba1 0108 	sub.w	r1, r1, r8
 800882a:	4658      	mov	r0, fp
 800882c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008830:	f000 f9ba 	bl	8008ba8 <RFBVM_set_element_value>
 8008834:	edd4 7a02 	vldr	s15, [r4, #8]
 8008838:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 800883c:	ee3a 7a68 	vsub.f32	s14, s20, s17
 8008840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008844:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8008848:	eba1 0108 	sub.w	r1, r1, r8
 800884c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008850:	4406      	add	r6, r0
 8008852:	4648      	mov	r0, r9
 8008854:	ee30 0a28 	vadd.f32	s0, s0, s17
 8008858:	f000 f9a6 	bl	8008ba8 <RFBVM_set_element_value>
 800885c:	edd4 7a02 	vldr	s15, [r4, #8]
 8008860:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 8008864:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8008868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800886c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8008870:	4406      	add	r6, r0
 8008872:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008876:	eba1 0108 	sub.w	r1, r1, r8
 800887a:	4650      	mov	r0, sl
 800887c:	f108 0801 	add.w	r8, r8, #1
 8008880:	ee30 0a09 	vadd.f32	s0, s0, s18
 8008884:	f000 f990 	bl	8008ba8 <RFBVM_set_element_value>
 8008888:	4406      	add	r6, r0
 800888a:	e7b0      	b.n	80087ee <HT_path_interpolate+0x62>
 800888c:	f06f 0601 	mvn.w	r6, #1
 8008890:	e7b4      	b.n	80087fc <HT_path_interpolate+0x70>

08008892 <HT_update_path>:
 8008892:	b510      	push	{r4, lr}
 8008894:	4604      	mov	r4, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	d03f      	beq.n	800891a <HT_update_path+0x88>
 800889a:	f890 2168 	ldrb.w	r2, [r0, #360]	; 0x168
 800889e:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
 80088a2:	b37a      	cbz	r2, 8008904 <HT_update_path+0x72>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	dc18      	bgt.n	80088da <HT_update_path+0x48>
 80088a8:	2301      	movs	r3, #1
 80088aa:	ed94 0a07 	vldr	s0, [r4, #28]
 80088ae:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 80088b2:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 80088b6:	f000 f903 	bl	8008ac0 <RFBVM_push>
 80088ba:	bb10      	cbnz	r0, 8008902 <HT_update_path+0x70>
 80088bc:	ed94 0a08 	vldr	s0, [r4, #32]
 80088c0:	f504 7064 	add.w	r0, r4, #912	; 0x390
 80088c4:	f000 f8fc 	bl	8008ac0 <RFBVM_push>
 80088c8:	b9d8      	cbnz	r0, 8008902 <HT_update_path+0x70>
 80088ca:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80088ce:	f204 50a4 	addw	r0, r4, #1444	; 0x5a4
 80088d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d6:	f000 b8f3 	b.w	8008ac0 <RFBVM_push>
 80088da:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
 80088de:	429a      	cmp	r2, r3
 80088e0:	dbe2      	blt.n	80088a8 <HT_update_path+0x16>
 80088e2:	f890 3169 	ldrb.w	r3, [r0, #361]	; 0x169
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1de      	bne.n	80088a8 <HT_update_path+0x16>
 80088ea:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 80088ee:	edd0 0a08 	vldr	s1, [r0, #32]
 80088f2:	ed90 0a07 	vldr	s0, [r0, #28]
 80088f6:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 80088fa:	f7ff ff47 	bl	800878c <HT_path_interpolate>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0d2      	beq.n	80088a8 <HT_update_path+0x16>
 8008902:	bd10      	pop	{r4, pc}
 8008904:	2b00      	cmp	r3, #0
 8008906:	dd06      	ble.n	8008916 <HT_update_path+0x84>
 8008908:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
 800890c:	1ad2      	subs	r2, r2, r3
 800890e:	2a00      	cmp	r2, #0
 8008910:	dd01      	ble.n	8008916 <HT_update_path+0x84>
 8008912:	3301      	adds	r3, #1
 8008914:	e7c9      	b.n	80088aa <HT_update_path+0x18>
 8008916:	2300      	movs	r3, #0
 8008918:	e7c7      	b.n	80088aa <HT_update_path+0x18>
 800891a:	f06f 0001 	mvn.w	r0, #1
 800891e:	e7f0      	b.n	8008902 <HT_update_path+0x70>

08008920 <HT_run>:
 8008920:	b510      	push	{r4, lr}
 8008922:	4604      	mov	r4, r0
 8008924:	b140      	cbz	r0, 8008938 <HT_run+0x18>
 8008926:	b139      	cbz	r1, 8008938 <HT_run+0x18>
 8008928:	f7ff fbde 	bl	80080e8 <HT_find_hand>
 800892c:	b930      	cbnz	r0, 800893c <HT_run+0x1c>
 800892e:	4620      	mov	r0, r4
 8008930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008934:	f7ff bfad 	b.w	8008892 <HT_update_path>
 8008938:	f06f 0001 	mvn.w	r0, #1
 800893c:	bd10      	pop	{r4, pc}
	...

08008940 <taylor_atan>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	ee10 0a10 	vmov	r0, s0
 8008946:	ed2d 8b02 	vpush	{d8}
 800894a:	eeb0 8a40 	vmov.f32	s16, s0
 800894e:	f7f7 fda7 	bl	80004a0 <__aeabi_f2d>
 8008952:	ee68 7a08 	vmul.f32	s15, s16, s16
 8008956:	4606      	mov	r6, r0
 8008958:	ee67 7a88 	vmul.f32	s15, s15, s16
 800895c:	460f      	mov	r7, r1
 800895e:	ee17 0a90 	vmov	r0, s15
 8008962:	f7f7 fd9d 	bl	80004a0 <__aeabi_f2d>
 8008966:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800896a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008972:	4604      	mov	r4, r0
 8008974:	460d      	mov	r5, r1
 8008976:	db23      	blt.n	80089c0 <taylor_atan+0x80>
 8008978:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800897c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008984:	d81c      	bhi.n	80089c0 <taylor_atan+0x80>
 8008986:	a322      	add	r3, pc, #136	; (adr r3, 8008a10 <taylor_atan+0xd0>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fdde 	bl	8000550 <__aeabi_dmul>
 8008994:	a320      	add	r3, pc, #128	; (adr r3, 8008a18 <taylor_atan+0xd8>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	4606      	mov	r6, r0
 800899c:	460f      	mov	r7, r1
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f7 fdd5 	bl	8000550 <__aeabi_dmul>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fc17 	bl	80001e0 <__aeabi_dsub>
 80089b2:	f7f8 f8c5 	bl	8000b40 <__aeabi_d2f>
 80089b6:	ecbd 8b02 	vpop	{d8}
 80089ba:	ee00 0a10 	vmov	s0, r0
 80089be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c0:	4632      	mov	r2, r6
 80089c2:	463b      	mov	r3, r7
 80089c4:	a112      	add	r1, pc, #72	; (adr r1, 8008a10 <taylor_atan+0xd0>)
 80089c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ca:	f7f7 feeb 	bl	80007a4 <__aeabi_ddiv>
 80089ce:	4622      	mov	r2, r4
 80089d0:	462b      	mov	r3, r5
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	a110      	add	r1, pc, #64	; (adr r1, 8008a18 <taylor_atan+0xd8>)
 80089d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089dc:	f7f7 fee2 	bl	80007a4 <__aeabi_ddiv>
 80089e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80089e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	d809      	bhi.n	8008a06 <taylor_atan+0xc6>
 80089f2:	a10b      	add	r1, pc, #44	; (adr r1, 8008a20 <taylor_atan+0xe0>)
 80089f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f8:	f7f7 fbf2 	bl	80001e0 <__aeabi_dsub>
 80089fc:	4622      	mov	r2, r4
 80089fe:	462b      	mov	r3, r5
 8008a00:	f7f7 fbf0 	bl	80001e4 <__adddf3>
 8008a04:	e7d5      	b.n	80089b2 <taylor_atan+0x72>
 8008a06:	a108      	add	r1, pc, #32	; (adr r1, 8008a28 <taylor_atan+0xe8>)
 8008a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0c:	e7f4      	b.n	80089f8 <taylor_atan+0xb8>
 8008a0e:	bf00      	nop
 8008a10:	9ad42c3d 	.word	0x9ad42c3d
 8008a14:	3fef1de6 	.word	0x3fef1de6
 8008a18:	e00d1b71 	.word	0xe00d1b71
 8008a1c:	3fc8902d 	.word	0x3fc8902d
 8008a20:	00000000 	.word	0x00000000
 8008a24:	bff921fb 	.word	0xbff921fb
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	3ff921fb 	.word	0x3ff921fb

08008a30 <taylor_sqrt>:
 8008a30:	2301      	movs	r3, #1
 8008a32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008a36:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008a3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a42:	dc22      	bgt.n	8008a8a <taylor_sqrt+0x5a>
 8008a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a48:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a50:	eef0 6a47 	vmov.f32	s13, s14
 8008a54:	ee07 2a90 	vmov	s15, r2
 8008a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a5c:	1cd1      	adds	r1, r2, #3
 8008a5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008a62:	ee06 1a10 	vmov	s12, r1
 8008a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a6a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008a6e:	3202      	adds	r2, #2
 8008a70:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8008a74:	2a09      	cmp	r2, #9
 8008a76:	ee76 6a87 	vadd.f32	s13, s13, s14
 8008a7a:	d1eb      	bne.n	8008a54 <taylor_sqrt+0x24>
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8008a84:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008a88:	4770      	bx	lr
 8008a8a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	e7d3      	b.n	8008a3a <taylor_sqrt+0xa>

08008a92 <RFBVM_init>:
 8008a92:	2901      	cmp	r1, #1
 8008a94:	460b      	mov	r3, r1
 8008a96:	bfb8      	it	lt
 8008a98:	2301      	movlt	r3, #1
 8008a9a:	2b80      	cmp	r3, #128	; 0x80
 8008a9c:	bfa8      	it	ge
 8008a9e:	2380      	movge	r3, #128	; 0x80
 8008aa0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008aa4:	e9c0 2080 	strd	r2, r0, [r0, #512]	; 0x200
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8008aae:	f8c0 0208 	str.w	r0, [r0, #520]	; 0x208
 8008ab2:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 8008ab6:	1a58      	subs	r0, r3, r1
 8008ab8:	bf18      	it	ne
 8008aba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008abe:	4770      	bx	lr

08008ac0 <RFBVM_push>:
 8008ac0:	b1f0      	cbz	r0, 8008b00 <RFBVM_push+0x40>
 8008ac2:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8008ac6:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 8008aca:	eca3 0a01 	vstmia	r3!, {s0}
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	bf14      	ite	ne
 8008ad2:	4619      	movne	r1, r3
 8008ad4:	4601      	moveq	r1, r0
 8008ad6:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
 8008ada:	e9d0 3183 	ldrd	r3, r1, [r0, #524]	; 0x20c
 8008ade:	428b      	cmp	r3, r1
 8008ae0:	d10a      	bne.n	8008af8 <RFBVM_push+0x38>
 8008ae2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	bf0c      	ite	eq
 8008aec:	f8c0 0204 	streq.w	r0, [r0, #516]	; 0x204
 8008af0:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 8008af4:	2000      	movs	r0, #0
 8008af6:	4770      	bx	lr
 8008af8:	3301      	adds	r3, #1
 8008afa:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
 8008afe:	e7f9      	b.n	8008af4 <RFBVM_push+0x34>
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b04:	4770      	bx	lr
	...

08008b08 <RFBVM_sum>:
 8008b08:	b530      	push	{r4, r5, lr}
 8008b0a:	f8d0 1204 	ldr.w	r1, [r0, #516]	; 0x204
 8008b0e:	f8d0 420c 	ldr.w	r4, [r0, #524]	; 0x20c
 8008b12:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8008b38 <RFBVM_sum+0x30>
 8008b16:	2200      	movs	r2, #0
 8008b18:	4294      	cmp	r4, r2
 8008b1a:	dc00      	bgt.n	8008b1e <RFBVM_sum+0x16>
 8008b1c:	bd30      	pop	{r4, r5, pc}
 8008b1e:	460b      	mov	r3, r1
 8008b20:	ecf3 7a01 	vldmia	r3!, {s15}
 8008b24:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8008b28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b2c:	3201      	adds	r2, #1
 8008b2e:	429d      	cmp	r5, r3
 8008b30:	bf14      	ite	ne
 8008b32:	4619      	movne	r1, r3
 8008b34:	4601      	moveq	r1, r0
 8008b36:	e7ef      	b.n	8008b18 <RFBVM_sum+0x10>
 8008b38:	00000000 	.word	0x00000000

08008b3c <RFBVM_mean>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	f8d0 420c 	ldr.w	r4, [r0, #524]	; 0x20c
 8008b42:	b154      	cbz	r4, 8008b5a <RFBVM_mean+0x1e>
 8008b44:	f7ff ffe0 	bl	8008b08 <RFBVM_sum>
 8008b48:	ee07 4a90 	vmov	s15, r4
 8008b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b50:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8008b54:	eeb0 0a47 	vmov.f32	s0, s14
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008b60 <RFBVM_mean+0x24>
 8008b5e:	e7f9      	b.n	8008b54 <RFBVM_mean+0x18>
 8008b60:	00000000 	.word	0x00000000

08008b64 <RFBVM_get_element_pointer>:
 8008b64:	2900      	cmp	r1, #0
 8008b66:	4602      	mov	r2, r0
 8008b68:	db10      	blt.n	8008b8c <RFBVM_get_element_pointer+0x28>
 8008b6a:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
 8008b6e:	428b      	cmp	r3, r1
 8008b70:	dd0c      	ble.n	8008b8c <RFBVM_get_element_pointer+0x28>
 8008b72:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008b76:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8008b7a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8008b7e:	4298      	cmp	r0, r3
 8008b80:	d305      	bcc.n	8008b8e <RFBVM_get_element_pointer+0x2a>
 8008b82:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8008b86:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8008b8a:	4770      	bx	lr
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	4770      	bx	lr

08008b90 <RFBVM_get_element_value>:
 8008b90:	b508      	push	{r3, lr}
 8008b92:	f7ff ffe7 	bl	8008b64 <RFBVM_get_element_pointer>
 8008b96:	b110      	cbz	r0, 8008b9e <RFBVM_get_element_value+0xe>
 8008b98:	ed90 0a00 	vldr	s0, [r0]
 8008b9c:	bd08      	pop	{r3, pc}
 8008b9e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ba4 <RFBVM_get_element_value+0x14>
 8008ba2:	e7fb      	b.n	8008b9c <RFBVM_get_element_value+0xc>
 8008ba4:	00000000 	.word	0x00000000

08008ba8 <RFBVM_set_element_value>:
 8008ba8:	b508      	push	{r3, lr}
 8008baa:	f7ff ffdb 	bl	8008b64 <RFBVM_get_element_pointer>
 8008bae:	b118      	cbz	r0, 8008bb8 <RFBVM_set_element_value+0x10>
 8008bb0:	ed80 0a00 	vstr	s0, [r0]
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	bd08      	pop	{r3, pc}
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbc:	e7fb      	b.n	8008bb6 <RFBVM_set_element_value+0xe>

08008bbe <RFBVM_fill>:
 8008bbe:	b570      	push	{r4, r5, r6, lr}
 8008bc0:	2400      	movs	r4, #0
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	4625      	mov	r5, r4
 8008bc6:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
 8008bca:	42ab      	cmp	r3, r5
 8008bcc:	dc04      	bgt.n	8008bd8 <RFBVM_fill+0x1a>
 8008bce:	1e20      	subs	r0, r4, #0
 8008bd0:	bf18      	it	ne
 8008bd2:	2001      	movne	r0, #1
 8008bd4:	4240      	negs	r0, r0
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffe4 	bl	8008ba8 <RFBVM_set_element_value>
 8008be0:	3501      	adds	r5, #1
 8008be2:	4404      	add	r4, r0
 8008be4:	e7ef      	b.n	8008bc6 <RFBVM_fill+0x8>
	...

08008be8 <SEN_init>:
 8008be8:	b160      	cbz	r0, 8008c04 <SEN_init+0x1c>
 8008bea:	2200      	movs	r2, #0
 8008bec:	60c2      	str	r2, [r0, #12]
 8008bee:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <SEN_init+0x24>)
 8008bf0:	6102      	str	r2, [r0, #16]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6142      	str	r2, [r0, #20]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	e9c0 3300 	strd	r3, r3, [r0]
 8008bfc:	6083      	str	r3, [r0, #8]
 8008bfe:	7602      	strb	r2, [r0, #24]
 8008c00:	4618      	mov	r0, r3
 8008c02:	4770      	bx	lr
 8008c04:	f06f 0001 	mvn.w	r0, #1
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	3f402037 	.word	0x3f402037

08008c10 <SEN_set_orientation>:
 8008c10:	b128      	cbz	r0, 8008c1e <SEN_set_orientation+0xe>
 8008c12:	2908      	cmp	r1, #8
 8008c14:	bf28      	it	cs
 8008c16:	2101      	movcs	r1, #1
 8008c18:	7601      	strb	r1, [r0, #24]
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	4770      	bx	lr
 8008c1e:	f06f 0001 	mvn.w	r0, #1
 8008c22:	4770      	bx	lr

08008c24 <SEN_set_frequency>:
 8008c24:	b140      	cbz	r0, 8008c38 <SEN_set_frequency+0x14>
 8008c26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2e:	d906      	bls.n	8008c3e <SEN_set_frequency+0x1a>
 8008c30:	ed80 0a03 	vstr	s0, [r0, #12]
 8008c34:	2000      	movs	r0, #0
 8008c36:	4770      	bx	lr
 8008c38:	f06f 0001 	mvn.w	r0, #1
 8008c3c:	4770      	bx	lr
 8008c3e:	f06f 0005 	mvn.w	r0, #5
 8008c42:	4770      	bx	lr

08008c44 <SEN_set_resolution>:
 8008c44:	b160      	cbz	r0, 8008c60 <SEN_set_resolution+0x1c>
 8008c46:	2900      	cmp	r1, #0
 8008c48:	dd0d      	ble.n	8008c66 <SEN_set_resolution+0x22>
 8008c4a:	2a00      	cmp	r2, #0
 8008c4c:	dd0b      	ble.n	8008c66 <SEN_set_resolution+0x22>
 8008c4e:	fb02 f301 	mul.w	r3, r2, r1
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	dc07      	bgt.n	8008c66 <SEN_set_resolution+0x22>
 8008c56:	e9c0 1200 	strd	r1, r2, [r0]
 8008c5a:	6083      	str	r3, [r0, #8]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	4770      	bx	lr
 8008c60:	f06f 0001 	mvn.w	r0, #1
 8008c64:	4770      	bx	lr
 8008c66:	f06f 0003 	mvn.w	r0, #3
 8008c6a:	4770      	bx	lr

08008c6c <SEN_set_square_resolution>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	460c      	mov	r4, r1
 8008c70:	4605      	mov	r5, r0
 8008c72:	b1b8      	cbz	r0, 8008ca4 <SEN_set_square_resolution+0x38>
 8008c74:	2900      	cmp	r1, #0
 8008c76:	dd18      	ble.n	8008caa <SEN_set_square_resolution+0x3e>
 8008c78:	4608      	mov	r0, r1
 8008c7a:	f7f7 fbff 	bl	800047c <__aeabi_i2d>
 8008c7e:	ec41 0b10 	vmov	d0, r0, r1
 8008c82:	f000 fafd 	bl	8009280 <sqrt>
 8008c86:	ec51 0b10 	vmov	r0, r1, d0
 8008c8a:	f7f7 ff11 	bl	8000ab0 <__aeabi_d2iz>
 8008c8e:	fb00 f300 	mul.w	r3, r0, r0
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	4602      	mov	r2, r0
 8008c96:	d10b      	bne.n	8008cb0 <SEN_set_square_resolution+0x44>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca0:	f7ff bfd0 	b.w	8008c44 <SEN_set_resolution>
 8008ca4:	f06f 0001 	mvn.w	r0, #1
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	f06f 0003 	mvn.w	r0, #3
 8008cae:	e7fb      	b.n	8008ca8 <SEN_set_square_resolution+0x3c>
 8008cb0:	f06f 0004 	mvn.w	r0, #4
 8008cb4:	e7f8      	b.n	8008ca8 <SEN_set_square_resolution+0x3c>

08008cb6 <SEN_set_data>:
 8008cb6:	b178      	cbz	r0, 8008cd8 <SEN_set_data+0x22>
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	db10      	blt.n	8008cde <SEN_set_data+0x28>
 8008cbc:	6883      	ldr	r3, [r0, #8]
 8008cbe:	428b      	cmp	r3, r1
 8008cc0:	dd0d      	ble.n	8008cde <SEN_set_data+0x28>
 8008cc2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008cc6:	4408      	add	r0, r1
 8008cc8:	ed83 0a08 	vstr	s0, [r3, #32]
 8008ccc:	edc3 0a48 	vstr	s1, [r3, #288]	; 0x120
 8008cd0:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	4770      	bx	lr
 8008cd8:	f06f 0001 	mvn.w	r0, #1
 8008cdc:	4770      	bx	lr
 8008cde:	f06f 0002 	mvn.w	r0, #2
 8008ce2:	4770      	bx	lr

08008ce4 <SEN_idx_to_col_row>:
 8008ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce6:	b38b      	cbz	r3, 8008d4c <SEN_idx_to_col_row+0x68>
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	db32      	blt.n	8008d52 <SEN_idx_to_col_row+0x6e>
 8008cec:	689c      	ldr	r4, [r3, #8]
 8008cee:	4294      	cmp	r4, r2
 8008cf0:	dd2f      	ble.n	8008d52 <SEN_idx_to_col_row+0x6e>
 8008cf2:	681d      	ldr	r5, [r3, #0]
 8008cf4:	2d00      	cmp	r5, #0
 8008cf6:	dd2f      	ble.n	8008d58 <SEN_idx_to_col_row+0x74>
 8008cf8:	fb92 f6f5 	sdiv	r6, r2, r5
 8008cfc:	7e1f      	ldrb	r7, [r3, #24]
 8008cfe:	fb05 2216 	mls	r2, r5, r6, r2
 8008d02:	4634      	mov	r4, r6
 8008d04:	2f07      	cmp	r7, #7
 8008d06:	d82a      	bhi.n	8008d5e <SEN_idx_to_col_row+0x7a>
 8008d08:	e8df f007 	tbb	[pc, r7]
 8008d0c:	090d070f 	.word	0x090d070f
 8008d10:	1b041613 	.word	0x1b041613
 8008d14:	4614      	mov	r4, r2
 8008d16:	4632      	mov	r2, r6
 8008d18:	e007      	b.n	8008d2a <SEN_idx_to_col_row+0x46>
 8008d1a:	3d01      	subs	r5, #1
 8008d1c:	1aaa      	subs	r2, r5, r2
 8008d1e:	685c      	ldr	r4, [r3, #4]
 8008d20:	3c01      	subs	r4, #1
 8008d22:	1ba4      	subs	r4, r4, r6
 8008d24:	e001      	b.n	8008d2a <SEN_idx_to_col_row+0x46>
 8008d26:	3d01      	subs	r5, #1
 8008d28:	1aaa      	subs	r2, r5, r2
 8008d2a:	6002      	str	r2, [r0, #0]
 8008d2c:	600c      	str	r4, [r1, #0]
 8008d2e:	2000      	movs	r0, #0
 8008d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d32:	1e6c      	subs	r4, r5, #1
 8008d34:	1aa4      	subs	r4, r4, r2
 8008d36:	e7ee      	b.n	8008d16 <SEN_idx_to_col_row+0x32>
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	1b9a      	subs	r2, r3, r6
 8008d40:	e7f3      	b.n	8008d2a <SEN_idx_to_col_row+0x46>
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	1e6c      	subs	r4, r5, #1
 8008d46:	3b01      	subs	r3, #1
 8008d48:	1aa4      	subs	r4, r4, r2
 8008d4a:	e7f8      	b.n	8008d3e <SEN_idx_to_col_row+0x5a>
 8008d4c:	f06f 0001 	mvn.w	r0, #1
 8008d50:	e7ee      	b.n	8008d30 <SEN_idx_to_col_row+0x4c>
 8008d52:	f06f 0002 	mvn.w	r0, #2
 8008d56:	e7eb      	b.n	8008d30 <SEN_idx_to_col_row+0x4c>
 8008d58:	f06f 0003 	mvn.w	r0, #3
 8008d5c:	e7e8      	b.n	8008d30 <SEN_idx_to_col_row+0x4c>
 8008d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d62:	e7e5      	b.n	8008d30 <SEN_idx_to_col_row+0x4c>

08008d64 <SEN_col_row_to_idx>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d036      	beq.n	8008dd8 <SEN_col_row_to_idx+0x74>
 8008d6a:	7e1c      	ldrb	r4, [r3, #24]
 8008d6c:	2c07      	cmp	r4, #7
 8008d6e:	d836      	bhi.n	8008dde <SEN_col_row_to_idx+0x7a>
 8008d70:	e8df f004 	tbb	[pc, r4]
 8008d74:	0b0f0812 	.word	0x0b0f0812
 8008d78:	2b042721 	.word	0x2b042721
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4622      	mov	r2, r4
 8008d82:	e009      	b.n	8008d98 <SEN_col_row_to_idx+0x34>
 8008d84:	681c      	ldr	r4, [r3, #0]
 8008d86:	3c01      	subs	r4, #1
 8008d88:	1a61      	subs	r1, r4, r1
 8008d8a:	685c      	ldr	r4, [r3, #4]
 8008d8c:	3c01      	subs	r4, #1
 8008d8e:	1aa2      	subs	r2, r4, r2
 8008d90:	e002      	b.n	8008d98 <SEN_col_row_to_idx+0x34>
 8008d92:	681c      	ldr	r4, [r3, #0]
 8008d94:	3c01      	subs	r4, #1
 8008d96:	1a61      	subs	r1, r4, r1
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	db23      	blt.n	8008de4 <SEN_col_row_to_idx+0x80>
 8008d9c:	681c      	ldr	r4, [r3, #0]
 8008d9e:	428c      	cmp	r4, r1
 8008da0:	dd20      	ble.n	8008de4 <SEN_col_row_to_idx+0x80>
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	db1e      	blt.n	8008de4 <SEN_col_row_to_idx+0x80>
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	dd1b      	ble.n	8008de4 <SEN_col_row_to_idx+0x80>
 8008dac:	fb02 1104 	mla	r1, r2, r4, r1
 8008db0:	6001      	str	r1, [r0, #0]
 8008db2:	2000      	movs	r0, #0
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	681c      	ldr	r4, [r3, #0]
 8008db8:	3c01      	subs	r4, #1
 8008dba:	1aa4      	subs	r4, r4, r2
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	e7ea      	b.n	8008d98 <SEN_col_row_to_idx+0x34>
 8008dc2:	685c      	ldr	r4, [r3, #4]
 8008dc4:	3c01      	subs	r4, #1
 8008dc6:	1a64      	subs	r4, r4, r1
 8008dc8:	e7d9      	b.n	8008d7e <SEN_col_row_to_idx+0x1a>
 8008dca:	681c      	ldr	r4, [r3, #0]
 8008dcc:	3c01      	subs	r4, #1
 8008dce:	1aa4      	subs	r4, r4, r2
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	3a01      	subs	r2, #1
 8008dd4:	1a52      	subs	r2, r2, r1
 8008dd6:	e7f2      	b.n	8008dbe <SEN_col_row_to_idx+0x5a>
 8008dd8:	f06f 0001 	mvn.w	r0, #1
 8008ddc:	e7ea      	b.n	8008db4 <SEN_col_row_to_idx+0x50>
 8008dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008de2:	e7e7      	b.n	8008db4 <SEN_col_row_to_idx+0x50>
 8008de4:	f06f 0002 	mvn.w	r0, #2
 8008de8:	e7e4      	b.n	8008db4 <SEN_col_row_to_idx+0x50>

08008dea <SEN_zone_size>:
 8008dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	4680      	mov	r8, r0
 8008df0:	ed2d 8b04 	vpush	{d8-d9}
 8008df4:	460f      	mov	r7, r1
 8008df6:	4614      	mov	r4, r2
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	d04e      	beq.n	8008e9a <SEN_zone_size+0xb0>
 8008dfc:	6816      	ldr	r6, [r2, #0]
 8008dfe:	2e00      	cmp	r6, #0
 8008e00:	dd4e      	ble.n	8008ea0 <SEN_zone_size+0xb6>
 8008e02:	6855      	ldr	r5, [r2, #4]
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	dd4b      	ble.n	8008ea0 <SEN_zone_size+0xb6>
 8008e08:	edd2 7a04 	vldr	s15, [r2, #16]
 8008e0c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008e10:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008e14:	ee30 8a00 	vadd.f32	s16, s0, s0
 8008e18:	ee17 0a90 	vmov	r0, s15
 8008e1c:	f7f7 fb40 	bl	80004a0 <__aeabi_f2d>
 8008e20:	ec41 0b10 	vmov	d0, r0, r1
 8008e24:	f000 fa58 	bl	80092d8 <tan>
 8008e28:	ec51 0b10 	vmov	r0, r1, d0
 8008e2c:	f7f7 fe88 	bl	8000b40 <__aeabi_d2f>
 8008e30:	ee07 0a90 	vmov	s15, r0
 8008e34:	ee27 7a88 	vmul.f32	s14, s15, s16
 8008e38:	ee07 6a90 	vmov	s15, r6
 8008e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e40:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8008e44:	edd4 7a05 	vldr	s15, [r4, #20]
 8008e48:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008e4c:	ee17 0a90 	vmov	r0, s15
 8008e50:	f7f7 fb26 	bl	80004a0 <__aeabi_f2d>
 8008e54:	ec41 0b10 	vmov	d0, r0, r1
 8008e58:	f000 fa3e 	bl	80092d8 <tan>
 8008e5c:	ec51 0b10 	vmov	r0, r1, d0
 8008e60:	f7f7 fe6e 	bl	8000b40 <__aeabi_d2f>
 8008e64:	ee07 0a90 	vmov	s15, r0
 8008e68:	ee27 8a88 	vmul.f32	s16, s15, s16
 8008e6c:	ee07 5a90 	vmov	s15, r5
 8008e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e74:	7e23      	ldrb	r3, [r4, #24]
 8008e76:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	f04f 0000 	mov.w	r0, #0
 8008e80:	bf95      	itete	ls
 8008e82:	edc8 8a00 	vstrls	s17, [r8]
 8008e86:	ed88 7a00 	vstrhi	s14, [r8]
 8008e8a:	ed87 7a00 	vstrls	s14, [r7]
 8008e8e:	edc7 8a00 	vstrhi	s17, [r7]
 8008e92:	ecbd 8b04 	vpop	{d8-d9}
 8008e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9a:	f06f 0001 	mvn.w	r0, #1
 8008e9e:	e7f8      	b.n	8008e92 <SEN_zone_size+0xa8>
 8008ea0:	f06f 0003 	mvn.w	r0, #3
 8008ea4:	e7f5      	b.n	8008e92 <SEN_zone_size+0xa8>

08008ea6 <SEN_actual_res>:
 8008ea6:	b162      	cbz	r2, 8008ec2 <SEN_actual_res+0x1c>
 8008ea8:	7e13      	ldrb	r3, [r2, #24]
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	bf95      	itete	ls
 8008eae:	6813      	ldrls	r3, [r2, #0]
 8008eb0:	6853      	ldrhi	r3, [r2, #4]
 8008eb2:	6003      	strls	r3, [r0, #0]
 8008eb4:	6003      	strhi	r3, [r0, #0]
 8008eb6:	bf94      	ite	ls
 8008eb8:	6853      	ldrls	r3, [r2, #4]
 8008eba:	6813      	ldrhi	r3, [r2, #0]
 8008ebc:	600b      	str	r3, [r1, #0]
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	4770      	bx	lr
 8008ec2:	f06f 0001 	mvn.w	r0, #1
 8008ec6:	4770      	bx	lr

08008ec8 <SEN_col_row_to_mm>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	ed2d 8b02 	vpush	{d8}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	ee08 2a90 	vmov	s17, r2
 8008ed4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ed6:	ee08 3a10 	vmov	s16, r3
 8008eda:	4605      	mov	r5, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	b39e      	cbz	r6, 8008f48 <SEN_col_row_to_mm+0x80>
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	a901      	add	r1, sp, #4
 8008ee4:	4668      	mov	r0, sp
 8008ee6:	f7ff ff80 	bl	8008dea <SEN_zone_size>
 8008eea:	bb48      	cbnz	r0, 8008f40 <SEN_col_row_to_mm+0x78>
 8008eec:	4632      	mov	r2, r6
 8008eee:	a903      	add	r1, sp, #12
 8008ef0:	a802      	add	r0, sp, #8
 8008ef2:	f7ff ffd8 	bl	8008ea6 <SEN_actual_res>
 8008ef6:	bb18      	cbnz	r0, 8008f40 <SEN_col_row_to_mm+0x78>
 8008ef8:	eddd 7a02 	vldr	s15, [sp, #8]
 8008efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f08:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8008f0c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008f10:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8008f14:	eddd 7a00 	vldr	s15, [sp]
 8008f18:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8008f1c:	eddd 7a03 	vldr	s15, [sp, #12]
 8008f20:	edc5 8a00 	vstr	s17, [r5]
 8008f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f28:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8008f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f30:	eddd 7a01 	vldr	s15, [sp, #4]
 8008f34:	eea7 8a26 	vfma.f32	s16, s14, s13
 8008f38:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008f3c:	ed84 8a00 	vstr	s16, [r4]
 8008f40:	b004      	add	sp, #16
 8008f42:	ecbd 8b02 	vpop	{d8}
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	f06f 0001 	mvn.w	r0, #1
 8008f4c:	e7f8      	b.n	8008f40 <SEN_col_row_to_mm+0x78>

08008f4e <SEN_idx_to_mm>:
 8008f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f50:	4606      	mov	r6, r0
 8008f52:	b085      	sub	sp, #20
 8008f54:	460f      	mov	r7, r1
 8008f56:	461c      	mov	r4, r3
 8008f58:	b193      	cbz	r3, 8008f80 <SEN_idx_to_mm+0x32>
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	db13      	blt.n	8008f86 <SEN_idx_to_mm+0x38>
 8008f5e:	6899      	ldr	r1, [r3, #8]
 8008f60:	4291      	cmp	r1, r2
 8008f62:	dd10      	ble.n	8008f86 <SEN_idx_to_mm+0x38>
 8008f64:	a903      	add	r1, sp, #12
 8008f66:	a802      	add	r0, sp, #8
 8008f68:	f7ff febc 	bl	8008ce4 <SEN_idx_to_col_row>
 8008f6c:	b930      	cbnz	r0, 8008f7c <SEN_idx_to_mm+0x2e>
 8008f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f72:	9400      	str	r4, [sp, #0]
 8008f74:	4639      	mov	r1, r7
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff ffa6 	bl	8008ec8 <SEN_col_row_to_mm>
 8008f7c:	b005      	add	sp, #20
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f80:	f06f 0001 	mvn.w	r0, #1
 8008f84:	e7fa      	b.n	8008f7c <SEN_idx_to_mm+0x2e>
 8008f86:	f06f 0002 	mvn.w	r0, #2
 8008f8a:	e7f7      	b.n	8008f7c <SEN_idx_to_mm+0x2e>

08008f8c <SEN_mm_to_col_row>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	ed2d 8b02 	vpush	{d8}
 8008f92:	4606      	mov	r6, r0
 8008f94:	eef0 8a40 	vmov.f32	s17, s0
 8008f98:	b084      	sub	sp, #16
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	eeb0 8a60 	vmov.f32	s16, s1
 8008fa0:	eeb0 0a41 	vmov.f32	s0, s2
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	d04e      	beq.n	8009048 <SEN_mm_to_col_row+0xbc>
 8008faa:	a901      	add	r1, sp, #4
 8008fac:	4668      	mov	r0, sp
 8008fae:	f7ff ff1c 	bl	8008dea <SEN_zone_size>
 8008fb2:	b940      	cbnz	r0, 8008fc6 <SEN_mm_to_col_row+0x3a>
 8008fb4:	eddd 7a00 	vldr	s15, [sp]
 8008fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	d805      	bhi.n	8008fce <SEN_mm_to_col_row+0x42>
 8008fc2:	f06f 0002 	mvn.w	r0, #2
 8008fc6:	b004      	add	sp, #16
 8008fc8:	ecbd 8b02 	vpop	{d8}
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	eddd 7a01 	vldr	s15, [sp, #4]
 8008fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fda:	d9f2      	bls.n	8008fc2 <SEN_mm_to_col_row+0x36>
 8008fdc:	4622      	mov	r2, r4
 8008fde:	a903      	add	r1, sp, #12
 8008fe0:	a802      	add	r0, sp, #8
 8008fe2:	f7ff ff60 	bl	8008ea6 <SEN_actual_res>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d1ed      	bne.n	8008fc6 <SEN_mm_to_col_row+0x3a>
 8008fea:	eddd 7a02 	vldr	s15, [sp, #8]
 8008fee:	ed9d 5a01 	vldr	s10, [sp, #4]
 8008ff2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008ff6:	eddd 7a00 	vldr	s15, [sp]
 8008ffa:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8008ffe:	eddd 7a03 	vldr	s15, [sp, #12]
 8009002:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009006:	eec8 7a05 	vdiv.f32	s15, s16, s10
 800900a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800900e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009012:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8009016:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800901a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901e:	d4d0      	bmi.n	8008fc2 <SEN_mm_to_col_row+0x36>
 8009020:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	d9cb      	bls.n	8008fc2 <SEN_mm_to_col_row+0x36>
 800902a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800902e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009032:	d4c6      	bmi.n	8008fc2 <SEN_mm_to_col_row+0x36>
 8009034:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903c:	d9c1      	bls.n	8008fc2 <SEN_mm_to_col_row+0x36>
 800903e:	ed86 7a00 	vstr	s14, [r6]
 8009042:	edc5 7a00 	vstr	s15, [r5]
 8009046:	e7be      	b.n	8008fc6 <SEN_mm_to_col_row+0x3a>
 8009048:	f06f 0001 	mvn.w	r0, #1
 800904c:	e7bb      	b.n	8008fc6 <SEN_mm_to_col_row+0x3a>

0800904e <SEN_mm_to_idx>:
 800904e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009050:	4604      	mov	r4, r0
 8009052:	b1c1      	cbz	r1, 8009086 <SEN_mm_to_idx+0x38>
 8009054:	460a      	mov	r2, r1
 8009056:	9101      	str	r1, [sp, #4]
 8009058:	a802      	add	r0, sp, #8
 800905a:	a903      	add	r1, sp, #12
 800905c:	f7ff ff96 	bl	8008f8c <SEN_mm_to_col_row>
 8009060:	b978      	cbnz	r0, 8009082 <SEN_mm_to_idx+0x34>
 8009062:	eddd 7a03 	vldr	s15, [sp, #12]
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800906c:	4620      	mov	r0, r4
 800906e:	ee17 2a90 	vmov	r2, s15
 8009072:	eddd 7a02 	vldr	s15, [sp, #8]
 8009076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800907a:	ee17 1a90 	vmov	r1, s15
 800907e:	f7ff fe71 	bl	8008d64 <SEN_col_row_to_idx>
 8009082:	b004      	add	sp, #16
 8009084:	bd10      	pop	{r4, pc}
 8009086:	f06f 0001 	mvn.w	r0, #1
 800908a:	e7fa      	b.n	8009082 <SEN_mm_to_idx+0x34>

0800908c <memset>:
 800908c:	4402      	add	r2, r0
 800908e:	4603      	mov	r3, r0
 8009090:	4293      	cmp	r3, r2
 8009092:	d100      	bne.n	8009096 <memset+0xa>
 8009094:	4770      	bx	lr
 8009096:	f803 1b01 	strb.w	r1, [r3], #1
 800909a:	e7f9      	b.n	8009090 <memset+0x4>

0800909c <__errno>:
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <__errno+0x8>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000068 	.word	0x20000068

080090a8 <__libc_init_array>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4d0d      	ldr	r5, [pc, #52]	; (80090e0 <__libc_init_array+0x38>)
 80090ac:	4c0d      	ldr	r4, [pc, #52]	; (80090e4 <__libc_init_array+0x3c>)
 80090ae:	1b64      	subs	r4, r4, r5
 80090b0:	10a4      	asrs	r4, r4, #2
 80090b2:	2600      	movs	r6, #0
 80090b4:	42a6      	cmp	r6, r4
 80090b6:	d109      	bne.n	80090cc <__libc_init_array+0x24>
 80090b8:	4d0b      	ldr	r5, [pc, #44]	; (80090e8 <__libc_init_array+0x40>)
 80090ba:	4c0c      	ldr	r4, [pc, #48]	; (80090ec <__libc_init_array+0x44>)
 80090bc:	f002 f9f4 	bl	800b4a8 <_init>
 80090c0:	1b64      	subs	r4, r4, r5
 80090c2:	10a4      	asrs	r4, r4, #2
 80090c4:	2600      	movs	r6, #0
 80090c6:	42a6      	cmp	r6, r4
 80090c8:	d105      	bne.n	80090d6 <__libc_init_array+0x2e>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d0:	4798      	blx	r3
 80090d2:	3601      	adds	r6, #1
 80090d4:	e7ee      	b.n	80090b4 <__libc_init_array+0xc>
 80090d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090da:	4798      	blx	r3
 80090dc:	3601      	adds	r6, #1
 80090de:	e7f2      	b.n	80090c6 <__libc_init_array+0x1e>
 80090e0:	08021248 	.word	0x08021248
 80090e4:	08021248 	.word	0x08021248
 80090e8:	08021248 	.word	0x08021248
 80090ec:	0802124c 	.word	0x0802124c

080090f0 <memcpy>:
 80090f0:	440a      	add	r2, r1
 80090f2:	4291      	cmp	r1, r2
 80090f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80090f8:	d100      	bne.n	80090fc <memcpy+0xc>
 80090fa:	4770      	bx	lr
 80090fc:	b510      	push	{r4, lr}
 80090fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009106:	4291      	cmp	r1, r2
 8009108:	d1f9      	bne.n	80090fe <memcpy+0xe>
 800910a:	bd10      	pop	{r4, pc}
 800910c:	0000      	movs	r0, r0
	...

08009110 <exp>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	ed2d 8b02 	vpush	{d8}
 8009116:	ec55 4b10 	vmov	r4, r5, d0
 800911a:	f000 fc85 	bl	8009a28 <__ieee754_exp>
 800911e:	eeb0 8a40 	vmov.f32	s16, s0
 8009122:	eef0 8a60 	vmov.f32	s17, s1
 8009126:	ec45 4b10 	vmov	d0, r4, r5
 800912a:	f000 f909 	bl	8009340 <finite>
 800912e:	b168      	cbz	r0, 800914c <exp+0x3c>
 8009130:	a317      	add	r3, pc, #92	; (adr r3, 8009190 <exp+0x80>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 fc99 	bl	8000a70 <__aeabi_dcmpgt>
 800913e:	b160      	cbz	r0, 800915a <exp+0x4a>
 8009140:	f7ff ffac 	bl	800909c <__errno>
 8009144:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8009180 <exp+0x70>
 8009148:	2322      	movs	r3, #34	; 0x22
 800914a:	6003      	str	r3, [r0, #0]
 800914c:	eeb0 0a48 	vmov.f32	s0, s16
 8009150:	eef0 0a68 	vmov.f32	s1, s17
 8009154:	ecbd 8b02 	vpop	{d8}
 8009158:	bd38      	pop	{r3, r4, r5, pc}
 800915a:	a30f      	add	r3, pc, #60	; (adr r3, 8009198 <exp+0x88>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	4620      	mov	r0, r4
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 fc66 	bl	8000a34 <__aeabi_dcmplt>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0ef      	beq.n	800914c <exp+0x3c>
 800916c:	f7ff ff96 	bl	800909c <__errno>
 8009170:	2322      	movs	r3, #34	; 0x22
 8009172:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8009188 <exp+0x78>
 8009176:	6003      	str	r3, [r0, #0]
 8009178:	e7e8      	b.n	800914c <exp+0x3c>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
 8009180:	00000000 	.word	0x00000000
 8009184:	7ff00000 	.word	0x7ff00000
	...
 8009190:	fefa39ef 	.word	0xfefa39ef
 8009194:	40862e42 	.word	0x40862e42
 8009198:	d52d3051 	.word	0xd52d3051
 800919c:	c0874910 	.word	0xc0874910

080091a0 <pow>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	ed2d 8b02 	vpush	{d8}
 80091a6:	eeb0 8a40 	vmov.f32	s16, s0
 80091aa:	eef0 8a60 	vmov.f32	s17, s1
 80091ae:	ec55 4b11 	vmov	r4, r5, d1
 80091b2:	f000 fdbd 	bl	8009d30 <__ieee754_pow>
 80091b6:	4622      	mov	r2, r4
 80091b8:	462b      	mov	r3, r5
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	ec57 6b10 	vmov	r6, r7, d0
 80091c2:	f7f7 fc5f 	bl	8000a84 <__aeabi_dcmpun>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d13b      	bne.n	8009242 <pow+0xa2>
 80091ca:	ec51 0b18 	vmov	r0, r1, d8
 80091ce:	2200      	movs	r2, #0
 80091d0:	2300      	movs	r3, #0
 80091d2:	f7f7 fc25 	bl	8000a20 <__aeabi_dcmpeq>
 80091d6:	b1b8      	cbz	r0, 8009208 <pow+0x68>
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 fc1e 	bl	8000a20 <__aeabi_dcmpeq>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d146      	bne.n	8009276 <pow+0xd6>
 80091e8:	ec45 4b10 	vmov	d0, r4, r5
 80091ec:	f000 f8a8 	bl	8009340 <finite>
 80091f0:	b338      	cbz	r0, 8009242 <pow+0xa2>
 80091f2:	2200      	movs	r2, #0
 80091f4:	2300      	movs	r3, #0
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 fc1b 	bl	8000a34 <__aeabi_dcmplt>
 80091fe:	b300      	cbz	r0, 8009242 <pow+0xa2>
 8009200:	f7ff ff4c 	bl	800909c <__errno>
 8009204:	2322      	movs	r3, #34	; 0x22
 8009206:	e01b      	b.n	8009240 <pow+0xa0>
 8009208:	ec47 6b10 	vmov	d0, r6, r7
 800920c:	f000 f898 	bl	8009340 <finite>
 8009210:	b9e0      	cbnz	r0, 800924c <pow+0xac>
 8009212:	eeb0 0a48 	vmov.f32	s0, s16
 8009216:	eef0 0a68 	vmov.f32	s1, s17
 800921a:	f000 f891 	bl	8009340 <finite>
 800921e:	b1a8      	cbz	r0, 800924c <pow+0xac>
 8009220:	ec45 4b10 	vmov	d0, r4, r5
 8009224:	f000 f88c 	bl	8009340 <finite>
 8009228:	b180      	cbz	r0, 800924c <pow+0xac>
 800922a:	4632      	mov	r2, r6
 800922c:	463b      	mov	r3, r7
 800922e:	4630      	mov	r0, r6
 8009230:	4639      	mov	r1, r7
 8009232:	f7f7 fc27 	bl	8000a84 <__aeabi_dcmpun>
 8009236:	2800      	cmp	r0, #0
 8009238:	d0e2      	beq.n	8009200 <pow+0x60>
 800923a:	f7ff ff2f 	bl	800909c <__errno>
 800923e:	2321      	movs	r3, #33	; 0x21
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	ecbd 8b02 	vpop	{d8}
 8009246:	ec47 6b10 	vmov	d0, r6, r7
 800924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 fbe4 	bl	8000a20 <__aeabi_dcmpeq>
 8009258:	2800      	cmp	r0, #0
 800925a:	d0f2      	beq.n	8009242 <pow+0xa2>
 800925c:	eeb0 0a48 	vmov.f32	s0, s16
 8009260:	eef0 0a68 	vmov.f32	s1, s17
 8009264:	f000 f86c 	bl	8009340 <finite>
 8009268:	2800      	cmp	r0, #0
 800926a:	d0ea      	beq.n	8009242 <pow+0xa2>
 800926c:	ec45 4b10 	vmov	d0, r4, r5
 8009270:	f000 f866 	bl	8009340 <finite>
 8009274:	e7c3      	b.n	80091fe <pow+0x5e>
 8009276:	4f01      	ldr	r7, [pc, #4]	; (800927c <pow+0xdc>)
 8009278:	2600      	movs	r6, #0
 800927a:	e7e2      	b.n	8009242 <pow+0xa2>
 800927c:	3ff00000 	.word	0x3ff00000

08009280 <sqrt>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	ed2d 8b02 	vpush	{d8}
 8009286:	ec55 4b10 	vmov	r4, r5, d0
 800928a:	f000 f865 	bl	8009358 <__ieee754_sqrt>
 800928e:	4622      	mov	r2, r4
 8009290:	462b      	mov	r3, r5
 8009292:	4620      	mov	r0, r4
 8009294:	4629      	mov	r1, r5
 8009296:	eeb0 8a40 	vmov.f32	s16, s0
 800929a:	eef0 8a60 	vmov.f32	s17, s1
 800929e:	f7f7 fbf1 	bl	8000a84 <__aeabi_dcmpun>
 80092a2:	b990      	cbnz	r0, 80092ca <sqrt+0x4a>
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f7 fbc2 	bl	8000a34 <__aeabi_dcmplt>
 80092b0:	b158      	cbz	r0, 80092ca <sqrt+0x4a>
 80092b2:	f7ff fef3 	bl	800909c <__errno>
 80092b6:	2321      	movs	r3, #33	; 0x21
 80092b8:	6003      	str	r3, [r0, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	2300      	movs	r3, #0
 80092be:	4610      	mov	r0, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	f7f7 fa6f 	bl	80007a4 <__aeabi_ddiv>
 80092c6:	ec41 0b18 	vmov	d8, r0, r1
 80092ca:	eeb0 0a48 	vmov.f32	s0, s16
 80092ce:	eef0 0a68 	vmov.f32	s1, s17
 80092d2:	ecbd 8b02 	vpop	{d8}
 80092d6:	bd38      	pop	{r3, r4, r5, pc}

080092d8 <tan>:
 80092d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092da:	ec53 2b10 	vmov	r2, r3, d0
 80092de:	4816      	ldr	r0, [pc, #88]	; (8009338 <tan+0x60>)
 80092e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092e4:	4281      	cmp	r1, r0
 80092e6:	dc07      	bgt.n	80092f8 <tan+0x20>
 80092e8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8009330 <tan+0x58>
 80092ec:	2001      	movs	r0, #1
 80092ee:	b005      	add	sp, #20
 80092f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f4:	f000 b98c 	b.w	8009610 <__kernel_tan>
 80092f8:	4810      	ldr	r0, [pc, #64]	; (800933c <tan+0x64>)
 80092fa:	4281      	cmp	r1, r0
 80092fc:	dd09      	ble.n	8009312 <tan+0x3a>
 80092fe:	ee10 0a10 	vmov	r0, s0
 8009302:	4619      	mov	r1, r3
 8009304:	f7f6 ff6c 	bl	80001e0 <__aeabi_dsub>
 8009308:	ec41 0b10 	vmov	d0, r0, r1
 800930c:	b005      	add	sp, #20
 800930e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009312:	4668      	mov	r0, sp
 8009314:	f001 fa38 	bl	800a788 <__ieee754_rem_pio2>
 8009318:	0040      	lsls	r0, r0, #1
 800931a:	f000 0002 	and.w	r0, r0, #2
 800931e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009322:	ed9d 0b00 	vldr	d0, [sp]
 8009326:	f1c0 0001 	rsb	r0, r0, #1
 800932a:	f000 f971 	bl	8009610 <__kernel_tan>
 800932e:	e7ed      	b.n	800930c <tan+0x34>
	...
 8009338:	3fe921fb 	.word	0x3fe921fb
 800933c:	7fefffff 	.word	0x7fefffff

08009340 <finite>:
 8009340:	b082      	sub	sp, #8
 8009342:	ed8d 0b00 	vstr	d0, [sp]
 8009346:	9801      	ldr	r0, [sp, #4]
 8009348:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800934c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009350:	0fc0      	lsrs	r0, r0, #31
 8009352:	b002      	add	sp, #8
 8009354:	4770      	bx	lr
	...

08009358 <__ieee754_sqrt>:
 8009358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	ec55 4b10 	vmov	r4, r5, d0
 8009360:	4e67      	ldr	r6, [pc, #412]	; (8009500 <__ieee754_sqrt+0x1a8>)
 8009362:	43ae      	bics	r6, r5
 8009364:	ee10 0a10 	vmov	r0, s0
 8009368:	ee10 2a10 	vmov	r2, s0
 800936c:	4629      	mov	r1, r5
 800936e:	462b      	mov	r3, r5
 8009370:	d10d      	bne.n	800938e <__ieee754_sqrt+0x36>
 8009372:	f7f7 f8ed 	bl	8000550 <__aeabi_dmul>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4620      	mov	r0, r4
 800937c:	4629      	mov	r1, r5
 800937e:	f7f6 ff31 	bl	80001e4 <__adddf3>
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	ec45 4b10 	vmov	d0, r4, r5
 800938a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	2d00      	cmp	r5, #0
 8009390:	dc0b      	bgt.n	80093aa <__ieee754_sqrt+0x52>
 8009392:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009396:	4326      	orrs	r6, r4
 8009398:	d0f5      	beq.n	8009386 <__ieee754_sqrt+0x2e>
 800939a:	b135      	cbz	r5, 80093aa <__ieee754_sqrt+0x52>
 800939c:	f7f6 ff20 	bl	80001e0 <__aeabi_dsub>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	f7f7 f9fe 	bl	80007a4 <__aeabi_ddiv>
 80093a8:	e7eb      	b.n	8009382 <__ieee754_sqrt+0x2a>
 80093aa:	1509      	asrs	r1, r1, #20
 80093ac:	f000 808d 	beq.w	80094ca <__ieee754_sqrt+0x172>
 80093b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093b4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80093b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093bc:	07c9      	lsls	r1, r1, #31
 80093be:	bf5c      	itt	pl
 80093c0:	005b      	lslpl	r3, r3, #1
 80093c2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80093c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80093ca:	bf58      	it	pl
 80093cc:	0052      	lslpl	r2, r2, #1
 80093ce:	2500      	movs	r5, #0
 80093d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80093d4:	1076      	asrs	r6, r6, #1
 80093d6:	0052      	lsls	r2, r2, #1
 80093d8:	f04f 0e16 	mov.w	lr, #22
 80093dc:	46ac      	mov	ip, r5
 80093de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093e2:	eb0c 0001 	add.w	r0, ip, r1
 80093e6:	4298      	cmp	r0, r3
 80093e8:	bfde      	ittt	le
 80093ea:	1a1b      	suble	r3, r3, r0
 80093ec:	eb00 0c01 	addle.w	ip, r0, r1
 80093f0:	186d      	addle	r5, r5, r1
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	f1be 0e01 	subs.w	lr, lr, #1
 80093f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80093fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009400:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009404:	d1ed      	bne.n	80093e2 <__ieee754_sqrt+0x8a>
 8009406:	4674      	mov	r4, lr
 8009408:	2720      	movs	r7, #32
 800940a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800940e:	4563      	cmp	r3, ip
 8009410:	eb01 000e 	add.w	r0, r1, lr
 8009414:	dc02      	bgt.n	800941c <__ieee754_sqrt+0xc4>
 8009416:	d113      	bne.n	8009440 <__ieee754_sqrt+0xe8>
 8009418:	4290      	cmp	r0, r2
 800941a:	d811      	bhi.n	8009440 <__ieee754_sqrt+0xe8>
 800941c:	2800      	cmp	r0, #0
 800941e:	eb00 0e01 	add.w	lr, r0, r1
 8009422:	da57      	bge.n	80094d4 <__ieee754_sqrt+0x17c>
 8009424:	f1be 0f00 	cmp.w	lr, #0
 8009428:	db54      	blt.n	80094d4 <__ieee754_sqrt+0x17c>
 800942a:	f10c 0801 	add.w	r8, ip, #1
 800942e:	eba3 030c 	sub.w	r3, r3, ip
 8009432:	4290      	cmp	r0, r2
 8009434:	bf88      	it	hi
 8009436:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800943a:	1a12      	subs	r2, r2, r0
 800943c:	440c      	add	r4, r1
 800943e:	46c4      	mov	ip, r8
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	3f01      	subs	r7, #1
 8009444:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009448:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800944c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009450:	d1dd      	bne.n	800940e <__ieee754_sqrt+0xb6>
 8009452:	4313      	orrs	r3, r2
 8009454:	d01b      	beq.n	800948e <__ieee754_sqrt+0x136>
 8009456:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009504 <__ieee754_sqrt+0x1ac>
 800945a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009508 <__ieee754_sqrt+0x1b0>
 800945e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009462:	e9db 2300 	ldrd	r2, r3, [fp]
 8009466:	f7f6 febb 	bl	80001e0 <__aeabi_dsub>
 800946a:	e9da 8900 	ldrd	r8, r9, [sl]
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f7 fae7 	bl	8000a48 <__aeabi_dcmple>
 800947a:	b140      	cbz	r0, 800948e <__ieee754_sqrt+0x136>
 800947c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009480:	e9da 0100 	ldrd	r0, r1, [sl]
 8009484:	e9db 2300 	ldrd	r2, r3, [fp]
 8009488:	d126      	bne.n	80094d8 <__ieee754_sqrt+0x180>
 800948a:	3501      	adds	r5, #1
 800948c:	463c      	mov	r4, r7
 800948e:	106a      	asrs	r2, r5, #1
 8009490:	0863      	lsrs	r3, r4, #1
 8009492:	07e9      	lsls	r1, r5, #31
 8009494:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009498:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800949c:	bf48      	it	mi
 800949e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80094a2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80094a6:	461c      	mov	r4, r3
 80094a8:	e76d      	b.n	8009386 <__ieee754_sqrt+0x2e>
 80094aa:	0ad3      	lsrs	r3, r2, #11
 80094ac:	3815      	subs	r0, #21
 80094ae:	0552      	lsls	r2, r2, #21
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0fa      	beq.n	80094aa <__ieee754_sqrt+0x152>
 80094b4:	02dc      	lsls	r4, r3, #11
 80094b6:	d50a      	bpl.n	80094ce <__ieee754_sqrt+0x176>
 80094b8:	f1c1 0420 	rsb	r4, r1, #32
 80094bc:	fa22 f404 	lsr.w	r4, r2, r4
 80094c0:	1e4d      	subs	r5, r1, #1
 80094c2:	408a      	lsls	r2, r1
 80094c4:	4323      	orrs	r3, r4
 80094c6:	1b41      	subs	r1, r0, r5
 80094c8:	e772      	b.n	80093b0 <__ieee754_sqrt+0x58>
 80094ca:	4608      	mov	r0, r1
 80094cc:	e7f0      	b.n	80094b0 <__ieee754_sqrt+0x158>
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	3101      	adds	r1, #1
 80094d2:	e7ef      	b.n	80094b4 <__ieee754_sqrt+0x15c>
 80094d4:	46e0      	mov	r8, ip
 80094d6:	e7aa      	b.n	800942e <__ieee754_sqrt+0xd6>
 80094d8:	f7f6 fe84 	bl	80001e4 <__adddf3>
 80094dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	f7f7 faa4 	bl	8000a34 <__aeabi_dcmplt>
 80094ec:	b120      	cbz	r0, 80094f8 <__ieee754_sqrt+0x1a0>
 80094ee:	1ca0      	adds	r0, r4, #2
 80094f0:	bf08      	it	eq
 80094f2:	3501      	addeq	r5, #1
 80094f4:	3402      	adds	r4, #2
 80094f6:	e7ca      	b.n	800948e <__ieee754_sqrt+0x136>
 80094f8:	3401      	adds	r4, #1
 80094fa:	f024 0401 	bic.w	r4, r4, #1
 80094fe:	e7c6      	b.n	800948e <__ieee754_sqrt+0x136>
 8009500:	7ff00000 	.word	0x7ff00000
 8009504:	20000070 	.word	0x20000070
 8009508:	20000078 	.word	0x20000078
 800950c:	00000000 	.word	0x00000000

08009510 <ceil>:
 8009510:	ec51 0b10 	vmov	r0, r1, d0
 8009514:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009520:	2e13      	cmp	r6, #19
 8009522:	ee10 5a10 	vmov	r5, s0
 8009526:	ee10 8a10 	vmov	r8, s0
 800952a:	460c      	mov	r4, r1
 800952c:	dc2f      	bgt.n	800958e <ceil+0x7e>
 800952e:	2e00      	cmp	r6, #0
 8009530:	da12      	bge.n	8009558 <ceil+0x48>
 8009532:	a333      	add	r3, pc, #204	; (adr r3, 8009600 <ceil+0xf0>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f6 fe54 	bl	80001e4 <__adddf3>
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	f7f7 fa96 	bl	8000a70 <__aeabi_dcmpgt>
 8009544:	b128      	cbz	r0, 8009552 <ceil+0x42>
 8009546:	2c00      	cmp	r4, #0
 8009548:	db51      	blt.n	80095ee <ceil+0xde>
 800954a:	432c      	orrs	r4, r5
 800954c:	d053      	beq.n	80095f6 <ceil+0xe6>
 800954e:	4c2e      	ldr	r4, [pc, #184]	; (8009608 <ceil+0xf8>)
 8009550:	2500      	movs	r5, #0
 8009552:	4621      	mov	r1, r4
 8009554:	4628      	mov	r0, r5
 8009556:	e024      	b.n	80095a2 <ceil+0x92>
 8009558:	4f2c      	ldr	r7, [pc, #176]	; (800960c <ceil+0xfc>)
 800955a:	4137      	asrs	r7, r6
 800955c:	ea01 0307 	and.w	r3, r1, r7
 8009560:	4303      	orrs	r3, r0
 8009562:	d01e      	beq.n	80095a2 <ceil+0x92>
 8009564:	a326      	add	r3, pc, #152	; (adr r3, 8009600 <ceil+0xf0>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fe3b 	bl	80001e4 <__adddf3>
 800956e:	2200      	movs	r2, #0
 8009570:	2300      	movs	r3, #0
 8009572:	f7f7 fa7d 	bl	8000a70 <__aeabi_dcmpgt>
 8009576:	2800      	cmp	r0, #0
 8009578:	d0eb      	beq.n	8009552 <ceil+0x42>
 800957a:	2c00      	cmp	r4, #0
 800957c:	bfc2      	ittt	gt
 800957e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8009582:	4133      	asrgt	r3, r6
 8009584:	18e4      	addgt	r4, r4, r3
 8009586:	ea24 0407 	bic.w	r4, r4, r7
 800958a:	2500      	movs	r5, #0
 800958c:	e7e1      	b.n	8009552 <ceil+0x42>
 800958e:	2e33      	cmp	r6, #51	; 0x33
 8009590:	dd0b      	ble.n	80095aa <ceil+0x9a>
 8009592:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009596:	d104      	bne.n	80095a2 <ceil+0x92>
 8009598:	ee10 2a10 	vmov	r2, s0
 800959c:	460b      	mov	r3, r1
 800959e:	f7f6 fe21 	bl	80001e4 <__adddf3>
 80095a2:	ec41 0b10 	vmov	d0, r0, r1
 80095a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095aa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80095ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095b2:	40df      	lsrs	r7, r3
 80095b4:	4238      	tst	r0, r7
 80095b6:	d0f4      	beq.n	80095a2 <ceil+0x92>
 80095b8:	a311      	add	r3, pc, #68	; (adr r3, 8009600 <ceil+0xf0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f6 fe11 	bl	80001e4 <__adddf3>
 80095c2:	2200      	movs	r2, #0
 80095c4:	2300      	movs	r3, #0
 80095c6:	f7f7 fa53 	bl	8000a70 <__aeabi_dcmpgt>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d0c1      	beq.n	8009552 <ceil+0x42>
 80095ce:	2c00      	cmp	r4, #0
 80095d0:	dd0a      	ble.n	80095e8 <ceil+0xd8>
 80095d2:	2e14      	cmp	r6, #20
 80095d4:	d101      	bne.n	80095da <ceil+0xca>
 80095d6:	3401      	adds	r4, #1
 80095d8:	e006      	b.n	80095e8 <ceil+0xd8>
 80095da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095de:	2301      	movs	r3, #1
 80095e0:	40b3      	lsls	r3, r6
 80095e2:	441d      	add	r5, r3
 80095e4:	45a8      	cmp	r8, r5
 80095e6:	d8f6      	bhi.n	80095d6 <ceil+0xc6>
 80095e8:	ea25 0507 	bic.w	r5, r5, r7
 80095ec:	e7b1      	b.n	8009552 <ceil+0x42>
 80095ee:	2500      	movs	r5, #0
 80095f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80095f4:	e7ad      	b.n	8009552 <ceil+0x42>
 80095f6:	4625      	mov	r5, r4
 80095f8:	e7ab      	b.n	8009552 <ceil+0x42>
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w
 8009600:	8800759c 	.word	0x8800759c
 8009604:	7e37e43c 	.word	0x7e37e43c
 8009608:	3ff00000 	.word	0x3ff00000
 800960c:	000fffff 	.word	0x000fffff

08009610 <__kernel_tan>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b06 	vpush	{d8-d10}
 8009618:	ec5b ab10 	vmov	sl, fp, d0
 800961c:	4be0      	ldr	r3, [pc, #896]	; (80099a0 <__kernel_tan+0x390>)
 800961e:	b083      	sub	sp, #12
 8009620:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009624:	429f      	cmp	r7, r3
 8009626:	ec59 8b11 	vmov	r8, r9, d1
 800962a:	4606      	mov	r6, r0
 800962c:	f8cd b000 	str.w	fp, [sp]
 8009630:	dc61      	bgt.n	80096f6 <__kernel_tan+0xe6>
 8009632:	ee10 0a10 	vmov	r0, s0
 8009636:	4659      	mov	r1, fp
 8009638:	f7f7 fa3a 	bl	8000ab0 <__aeabi_d2iz>
 800963c:	4605      	mov	r5, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	f040 8083 	bne.w	800974a <__kernel_tan+0x13a>
 8009644:	1c73      	adds	r3, r6, #1
 8009646:	4652      	mov	r2, sl
 8009648:	4313      	orrs	r3, r2
 800964a:	433b      	orrs	r3, r7
 800964c:	d112      	bne.n	8009674 <__kernel_tan+0x64>
 800964e:	ec4b ab10 	vmov	d0, sl, fp
 8009652:	f001 fa9f 	bl	800ab94 <fabs>
 8009656:	49d3      	ldr	r1, [pc, #844]	; (80099a4 <__kernel_tan+0x394>)
 8009658:	ec53 2b10 	vmov	r2, r3, d0
 800965c:	2000      	movs	r0, #0
 800965e:	f7f7 f8a1 	bl	80007a4 <__aeabi_ddiv>
 8009662:	4682      	mov	sl, r0
 8009664:	468b      	mov	fp, r1
 8009666:	ec4b ab10 	vmov	d0, sl, fp
 800966a:	b003      	add	sp, #12
 800966c:	ecbd 8b06 	vpop	{d8-d10}
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	2e01      	cmp	r6, #1
 8009676:	d0f6      	beq.n	8009666 <__kernel_tan+0x56>
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	f7f6 fdb0 	bl	80001e4 <__adddf3>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	460f      	mov	r7, r1
 800968a:	2000      	movs	r0, #0
 800968c:	49c6      	ldr	r1, [pc, #792]	; (80099a8 <__kernel_tan+0x398>)
 800968e:	f7f7 f889 	bl	80007a4 <__aeabi_ddiv>
 8009692:	e9cd 0100 	strd	r0, r1, [sp]
 8009696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800969a:	462e      	mov	r6, r5
 800969c:	4652      	mov	r2, sl
 800969e:	462c      	mov	r4, r5
 80096a0:	4630      	mov	r0, r6
 80096a2:	461d      	mov	r5, r3
 80096a4:	4639      	mov	r1, r7
 80096a6:	465b      	mov	r3, fp
 80096a8:	f7f6 fd9a 	bl	80001e0 <__aeabi_dsub>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f6 fd94 	bl	80001e0 <__aeabi_dsub>
 80096b8:	4632      	mov	r2, r6
 80096ba:	462b      	mov	r3, r5
 80096bc:	f7f6 ff48 	bl	8000550 <__aeabi_dmul>
 80096c0:	4632      	mov	r2, r6
 80096c2:	4680      	mov	r8, r0
 80096c4:	4689      	mov	r9, r1
 80096c6:	462b      	mov	r3, r5
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f6 ff40 	bl	8000550 <__aeabi_dmul>
 80096d0:	4bb4      	ldr	r3, [pc, #720]	; (80099a4 <__kernel_tan+0x394>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	f7f6 fd86 	bl	80001e4 <__adddf3>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f6 fd80 	bl	80001e4 <__adddf3>
 80096e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096e8:	f7f6 ff32 	bl	8000550 <__aeabi_dmul>
 80096ec:	4622      	mov	r2, r4
 80096ee:	462b      	mov	r3, r5
 80096f0:	f7f6 fd78 	bl	80001e4 <__adddf3>
 80096f4:	e7b5      	b.n	8009662 <__kernel_tan+0x52>
 80096f6:	4bad      	ldr	r3, [pc, #692]	; (80099ac <__kernel_tan+0x39c>)
 80096f8:	429f      	cmp	r7, r3
 80096fa:	dd26      	ble.n	800974a <__kernel_tan+0x13a>
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	da09      	bge.n	8009716 <__kernel_tan+0x106>
 8009702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009706:	469b      	mov	fp, r3
 8009708:	ee10 aa10 	vmov	sl, s0
 800970c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009710:	ee11 8a10 	vmov	r8, s2
 8009714:	4699      	mov	r9, r3
 8009716:	4652      	mov	r2, sl
 8009718:	465b      	mov	r3, fp
 800971a:	a183      	add	r1, pc, #524	; (adr r1, 8009928 <__kernel_tan+0x318>)
 800971c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009720:	f7f6 fd5e 	bl	80001e0 <__aeabi_dsub>
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	4604      	mov	r4, r0
 800972a:	460d      	mov	r5, r1
 800972c:	a180      	add	r1, pc, #512	; (adr r1, 8009930 <__kernel_tan+0x320>)
 800972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009732:	f7f6 fd55 	bl	80001e0 <__aeabi_dsub>
 8009736:	4622      	mov	r2, r4
 8009738:	462b      	mov	r3, r5
 800973a:	f7f6 fd53 	bl	80001e4 <__adddf3>
 800973e:	f04f 0800 	mov.w	r8, #0
 8009742:	4682      	mov	sl, r0
 8009744:	468b      	mov	fp, r1
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	4652      	mov	r2, sl
 800974c:	465b      	mov	r3, fp
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	f7f6 fefd 	bl	8000550 <__aeabi_dmul>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	ec43 2b18 	vmov	d8, r2, r3
 800975e:	f7f6 fef7 	bl	8000550 <__aeabi_dmul>
 8009762:	ec53 2b18 	vmov	r2, r3, d8
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	4650      	mov	r0, sl
 800976c:	4659      	mov	r1, fp
 800976e:	f7f6 feef 	bl	8000550 <__aeabi_dmul>
 8009772:	a371      	add	r3, pc, #452	; (adr r3, 8009938 <__kernel_tan+0x328>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	ec41 0b19 	vmov	d9, r0, r1
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 fee6 	bl	8000550 <__aeabi_dmul>
 8009784:	a36e      	add	r3, pc, #440	; (adr r3, 8009940 <__kernel_tan+0x330>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f6 fd2b 	bl	80001e4 <__adddf3>
 800978e:	4622      	mov	r2, r4
 8009790:	462b      	mov	r3, r5
 8009792:	f7f6 fedd 	bl	8000550 <__aeabi_dmul>
 8009796:	a36c      	add	r3, pc, #432	; (adr r3, 8009948 <__kernel_tan+0x338>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fd22 	bl	80001e4 <__adddf3>
 80097a0:	4622      	mov	r2, r4
 80097a2:	462b      	mov	r3, r5
 80097a4:	f7f6 fed4 	bl	8000550 <__aeabi_dmul>
 80097a8:	a369      	add	r3, pc, #420	; (adr r3, 8009950 <__kernel_tan+0x340>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fd19 	bl	80001e4 <__adddf3>
 80097b2:	4622      	mov	r2, r4
 80097b4:	462b      	mov	r3, r5
 80097b6:	f7f6 fecb 	bl	8000550 <__aeabi_dmul>
 80097ba:	a367      	add	r3, pc, #412	; (adr r3, 8009958 <__kernel_tan+0x348>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f7f6 fd10 	bl	80001e4 <__adddf3>
 80097c4:	4622      	mov	r2, r4
 80097c6:	462b      	mov	r3, r5
 80097c8:	f7f6 fec2 	bl	8000550 <__aeabi_dmul>
 80097cc:	a364      	add	r3, pc, #400	; (adr r3, 8009960 <__kernel_tan+0x350>)
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	f7f6 fd07 	bl	80001e4 <__adddf3>
 80097d6:	ec53 2b18 	vmov	r2, r3, d8
 80097da:	f7f6 feb9 	bl	8000550 <__aeabi_dmul>
 80097de:	a362      	add	r3, pc, #392	; (adr r3, 8009968 <__kernel_tan+0x358>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	ec41 0b1a 	vmov	d10, r0, r1
 80097e8:	4620      	mov	r0, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f6 feb0 	bl	8000550 <__aeabi_dmul>
 80097f0:	a35f      	add	r3, pc, #380	; (adr r3, 8009970 <__kernel_tan+0x360>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fcf5 	bl	80001e4 <__adddf3>
 80097fa:	4622      	mov	r2, r4
 80097fc:	462b      	mov	r3, r5
 80097fe:	f7f6 fea7 	bl	8000550 <__aeabi_dmul>
 8009802:	a35d      	add	r3, pc, #372	; (adr r3, 8009978 <__kernel_tan+0x368>)
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 fcec 	bl	80001e4 <__adddf3>
 800980c:	4622      	mov	r2, r4
 800980e:	462b      	mov	r3, r5
 8009810:	f7f6 fe9e 	bl	8000550 <__aeabi_dmul>
 8009814:	a35a      	add	r3, pc, #360	; (adr r3, 8009980 <__kernel_tan+0x370>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fce3 	bl	80001e4 <__adddf3>
 800981e:	4622      	mov	r2, r4
 8009820:	462b      	mov	r3, r5
 8009822:	f7f6 fe95 	bl	8000550 <__aeabi_dmul>
 8009826:	a358      	add	r3, pc, #352	; (adr r3, 8009988 <__kernel_tan+0x378>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fcda 	bl	80001e4 <__adddf3>
 8009830:	4622      	mov	r2, r4
 8009832:	462b      	mov	r3, r5
 8009834:	f7f6 fe8c 	bl	8000550 <__aeabi_dmul>
 8009838:	a355      	add	r3, pc, #340	; (adr r3, 8009990 <__kernel_tan+0x380>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fcd1 	bl	80001e4 <__adddf3>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	ec51 0b1a 	vmov	r0, r1, d10
 800984a:	f7f6 fccb 	bl	80001e4 <__adddf3>
 800984e:	ec53 2b19 	vmov	r2, r3, d9
 8009852:	f7f6 fe7d 	bl	8000550 <__aeabi_dmul>
 8009856:	4642      	mov	r2, r8
 8009858:	464b      	mov	r3, r9
 800985a:	f7f6 fcc3 	bl	80001e4 <__adddf3>
 800985e:	ec53 2b18 	vmov	r2, r3, d8
 8009862:	f7f6 fe75 	bl	8000550 <__aeabi_dmul>
 8009866:	4642      	mov	r2, r8
 8009868:	464b      	mov	r3, r9
 800986a:	f7f6 fcbb 	bl	80001e4 <__adddf3>
 800986e:	a34a      	add	r3, pc, #296	; (adr r3, 8009998 <__kernel_tan+0x388>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	4604      	mov	r4, r0
 8009876:	460d      	mov	r5, r1
 8009878:	ec51 0b19 	vmov	r0, r1, d9
 800987c:	f7f6 fe68 	bl	8000550 <__aeabi_dmul>
 8009880:	4622      	mov	r2, r4
 8009882:	462b      	mov	r3, r5
 8009884:	f7f6 fcae 	bl	80001e4 <__adddf3>
 8009888:	460b      	mov	r3, r1
 800988a:	ec41 0b18 	vmov	d8, r0, r1
 800988e:	4602      	mov	r2, r0
 8009890:	4659      	mov	r1, fp
 8009892:	4650      	mov	r0, sl
 8009894:	f7f6 fca6 	bl	80001e4 <__adddf3>
 8009898:	4b44      	ldr	r3, [pc, #272]	; (80099ac <__kernel_tan+0x39c>)
 800989a:	429f      	cmp	r7, r3
 800989c:	4604      	mov	r4, r0
 800989e:	460d      	mov	r5, r1
 80098a0:	f340 8086 	ble.w	80099b0 <__kernel_tan+0x3a0>
 80098a4:	4630      	mov	r0, r6
 80098a6:	f7f6 fde9 	bl	800047c <__aeabi_i2d>
 80098aa:	4622      	mov	r2, r4
 80098ac:	4680      	mov	r8, r0
 80098ae:	4689      	mov	r9, r1
 80098b0:	462b      	mov	r3, r5
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f6 fe4b 	bl	8000550 <__aeabi_dmul>
 80098ba:	4642      	mov	r2, r8
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	464b      	mov	r3, r9
 80098c2:	4620      	mov	r0, r4
 80098c4:	4629      	mov	r1, r5
 80098c6:	f7f6 fc8d 	bl	80001e4 <__adddf3>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4630      	mov	r0, r6
 80098d0:	4639      	mov	r1, r7
 80098d2:	f7f6 ff67 	bl	80007a4 <__aeabi_ddiv>
 80098d6:	ec53 2b18 	vmov	r2, r3, d8
 80098da:	f7f6 fc81 	bl	80001e0 <__aeabi_dsub>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4650      	mov	r0, sl
 80098e4:	4659      	mov	r1, fp
 80098e6:	f7f6 fc7b 	bl	80001e0 <__aeabi_dsub>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	f7f6 fc79 	bl	80001e4 <__adddf3>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4640      	mov	r0, r8
 80098f8:	4649      	mov	r1, r9
 80098fa:	f7f6 fc71 	bl	80001e0 <__aeabi_dsub>
 80098fe:	9b00      	ldr	r3, [sp, #0]
 8009900:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8009904:	f00a 0a02 	and.w	sl, sl, #2
 8009908:	4604      	mov	r4, r0
 800990a:	f1ca 0001 	rsb	r0, sl, #1
 800990e:	460d      	mov	r5, r1
 8009910:	f7f6 fdb4 	bl	800047c <__aeabi_i2d>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fe18 	bl	8000550 <__aeabi_dmul>
 8009920:	e69f      	b.n	8009662 <__kernel_tan+0x52>
 8009922:	bf00      	nop
 8009924:	f3af 8000 	nop.w
 8009928:	54442d18 	.word	0x54442d18
 800992c:	3fe921fb 	.word	0x3fe921fb
 8009930:	33145c07 	.word	0x33145c07
 8009934:	3c81a626 	.word	0x3c81a626
 8009938:	74bf7ad4 	.word	0x74bf7ad4
 800993c:	3efb2a70 	.word	0x3efb2a70
 8009940:	32f0a7e9 	.word	0x32f0a7e9
 8009944:	3f12b80f 	.word	0x3f12b80f
 8009948:	1a8d1068 	.word	0x1a8d1068
 800994c:	3f3026f7 	.word	0x3f3026f7
 8009950:	fee08315 	.word	0xfee08315
 8009954:	3f57dbc8 	.word	0x3f57dbc8
 8009958:	e96e8493 	.word	0xe96e8493
 800995c:	3f8226e3 	.word	0x3f8226e3
 8009960:	1bb341fe 	.word	0x1bb341fe
 8009964:	3faba1ba 	.word	0x3faba1ba
 8009968:	db605373 	.word	0xdb605373
 800996c:	bef375cb 	.word	0xbef375cb
 8009970:	a03792a6 	.word	0xa03792a6
 8009974:	3f147e88 	.word	0x3f147e88
 8009978:	f2f26501 	.word	0xf2f26501
 800997c:	3f4344d8 	.word	0x3f4344d8
 8009980:	c9560328 	.word	0xc9560328
 8009984:	3f6d6d22 	.word	0x3f6d6d22
 8009988:	8406d637 	.word	0x8406d637
 800998c:	3f9664f4 	.word	0x3f9664f4
 8009990:	1110fe7a 	.word	0x1110fe7a
 8009994:	3fc11111 	.word	0x3fc11111
 8009998:	55555563 	.word	0x55555563
 800999c:	3fd55555 	.word	0x3fd55555
 80099a0:	3e2fffff 	.word	0x3e2fffff
 80099a4:	3ff00000 	.word	0x3ff00000
 80099a8:	bff00000 	.word	0xbff00000
 80099ac:	3fe59427 	.word	0x3fe59427
 80099b0:	2e01      	cmp	r6, #1
 80099b2:	d02f      	beq.n	8009a14 <__kernel_tan+0x404>
 80099b4:	460f      	mov	r7, r1
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4689      	mov	r9, r1
 80099bc:	2000      	movs	r0, #0
 80099be:	4917      	ldr	r1, [pc, #92]	; (8009a1c <__kernel_tan+0x40c>)
 80099c0:	f7f6 fef0 	bl	80007a4 <__aeabi_ddiv>
 80099c4:	2600      	movs	r6, #0
 80099c6:	e9cd 0100 	strd	r0, r1, [sp]
 80099ca:	4652      	mov	r2, sl
 80099cc:	465b      	mov	r3, fp
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f6 fc05 	bl	80001e0 <__aeabi_dsub>
 80099d6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	ec51 0b18 	vmov	r0, r1, d8
 80099e2:	f7f6 fbfd 	bl	80001e0 <__aeabi_dsub>
 80099e6:	4632      	mov	r2, r6
 80099e8:	462b      	mov	r3, r5
 80099ea:	f7f6 fdb1 	bl	8000550 <__aeabi_dmul>
 80099ee:	46b0      	mov	r8, r6
 80099f0:	460f      	mov	r7, r1
 80099f2:	4642      	mov	r2, r8
 80099f4:	462b      	mov	r3, r5
 80099f6:	4634      	mov	r4, r6
 80099f8:	4649      	mov	r1, r9
 80099fa:	4606      	mov	r6, r0
 80099fc:	4640      	mov	r0, r8
 80099fe:	f7f6 fda7 	bl	8000550 <__aeabi_dmul>
 8009a02:	4b07      	ldr	r3, [pc, #28]	; (8009a20 <__kernel_tan+0x410>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	f7f6 fbed 	bl	80001e4 <__adddf3>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	e665      	b.n	80096e0 <__kernel_tan+0xd0>
 8009a14:	4682      	mov	sl, r0
 8009a16:	468b      	mov	fp, r1
 8009a18:	e625      	b.n	8009666 <__kernel_tan+0x56>
 8009a1a:	bf00      	nop
 8009a1c:	bff00000 	.word	0xbff00000
 8009a20:	3ff00000 	.word	0x3ff00000
 8009a24:	00000000 	.word	0x00000000

08009a28 <__ieee754_exp>:
 8009a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	ec55 4b10 	vmov	r4, r5, d0
 8009a30:	49b5      	ldr	r1, [pc, #724]	; (8009d08 <__ieee754_exp+0x2e0>)
 8009a32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009a36:	428a      	cmp	r2, r1
 8009a38:	ed2d 8b04 	vpush	{d8-d9}
 8009a3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009a40:	d93b      	bls.n	8009aba <__ieee754_exp+0x92>
 8009a42:	49b2      	ldr	r1, [pc, #712]	; (8009d0c <__ieee754_exp+0x2e4>)
 8009a44:	428a      	cmp	r2, r1
 8009a46:	d916      	bls.n	8009a76 <__ieee754_exp+0x4e>
 8009a48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009a4c:	4323      	orrs	r3, r4
 8009a4e:	ee10 2a10 	vmov	r2, s0
 8009a52:	d007      	beq.n	8009a64 <__ieee754_exp+0x3c>
 8009a54:	462b      	mov	r3, r5
 8009a56:	4620      	mov	r0, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	f7f6 fbc3 	bl	80001e4 <__adddf3>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	e002      	b.n	8009a6a <__ieee754_exp+0x42>
 8009a64:	b10e      	cbz	r6, 8009a6a <__ieee754_exp+0x42>
 8009a66:	2400      	movs	r4, #0
 8009a68:	2500      	movs	r5, #0
 8009a6a:	ecbd 8b04 	vpop	{d8-d9}
 8009a6e:	ec45 4b10 	vmov	d0, r4, r5
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a76:	a38e      	add	r3, pc, #568	; (adr r3, 8009cb0 <__ieee754_exp+0x288>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	ee10 0a10 	vmov	r0, s0
 8009a80:	4629      	mov	r1, r5
 8009a82:	f7f6 fff5 	bl	8000a70 <__aeabi_dcmpgt>
 8009a86:	4607      	mov	r7, r0
 8009a88:	b130      	cbz	r0, 8009a98 <__ieee754_exp+0x70>
 8009a8a:	ecbd 8b04 	vpop	{d8-d9}
 8009a8e:	2000      	movs	r0, #0
 8009a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	f001 b92d 	b.w	800acf2 <__math_oflow>
 8009a98:	a387      	add	r3, pc, #540	; (adr r3, 8009cb8 <__ieee754_exp+0x290>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	f7f6 ffc7 	bl	8000a34 <__aeabi_dcmplt>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f000 808b 	beq.w	8009bc2 <__ieee754_exp+0x19a>
 8009aac:	ecbd 8b04 	vpop	{d8-d9}
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab6:	f001 b913 	b.w	800ace0 <__math_uflow>
 8009aba:	4b95      	ldr	r3, [pc, #596]	; (8009d10 <__ieee754_exp+0x2e8>)
 8009abc:	429a      	cmp	r2, r3
 8009abe:	f240 80ac 	bls.w	8009c1a <__ieee754_exp+0x1f2>
 8009ac2:	4b94      	ldr	r3, [pc, #592]	; (8009d14 <__ieee754_exp+0x2ec>)
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d87c      	bhi.n	8009bc2 <__ieee754_exp+0x19a>
 8009ac8:	4b93      	ldr	r3, [pc, #588]	; (8009d18 <__ieee754_exp+0x2f0>)
 8009aca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	ee10 0a10 	vmov	r0, s0
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fb82 	bl	80001e0 <__aeabi_dsub>
 8009adc:	4b8f      	ldr	r3, [pc, #572]	; (8009d1c <__ieee754_exp+0x2f4>)
 8009ade:	00f7      	lsls	r7, r6, #3
 8009ae0:	443b      	add	r3, r7
 8009ae2:	ed93 7b00 	vldr	d7, [r3]
 8009ae6:	f1c6 0a01 	rsb	sl, r6, #1
 8009aea:	4680      	mov	r8, r0
 8009aec:	4689      	mov	r9, r1
 8009aee:	ebaa 0a06 	sub.w	sl, sl, r6
 8009af2:	eeb0 8a47 	vmov.f32	s16, s14
 8009af6:	eef0 8a67 	vmov.f32	s17, s15
 8009afa:	ec53 2b18 	vmov	r2, r3, d8
 8009afe:	4640      	mov	r0, r8
 8009b00:	4649      	mov	r1, r9
 8009b02:	f7f6 fb6d 	bl	80001e0 <__aeabi_dsub>
 8009b06:	4604      	mov	r4, r0
 8009b08:	460d      	mov	r5, r1
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 fd1d 	bl	8000550 <__aeabi_dmul>
 8009b16:	a36a      	add	r3, pc, #424	; (adr r3, 8009cc0 <__ieee754_exp+0x298>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460f      	mov	r7, r1
 8009b20:	f7f6 fd16 	bl	8000550 <__aeabi_dmul>
 8009b24:	a368      	add	r3, pc, #416	; (adr r3, 8009cc8 <__ieee754_exp+0x2a0>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fb59 	bl	80001e0 <__aeabi_dsub>
 8009b2e:	4632      	mov	r2, r6
 8009b30:	463b      	mov	r3, r7
 8009b32:	f7f6 fd0d 	bl	8000550 <__aeabi_dmul>
 8009b36:	a366      	add	r3, pc, #408	; (adr r3, 8009cd0 <__ieee754_exp+0x2a8>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 fb52 	bl	80001e4 <__adddf3>
 8009b40:	4632      	mov	r2, r6
 8009b42:	463b      	mov	r3, r7
 8009b44:	f7f6 fd04 	bl	8000550 <__aeabi_dmul>
 8009b48:	a363      	add	r3, pc, #396	; (adr r3, 8009cd8 <__ieee754_exp+0x2b0>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 fb47 	bl	80001e0 <__aeabi_dsub>
 8009b52:	4632      	mov	r2, r6
 8009b54:	463b      	mov	r3, r7
 8009b56:	f7f6 fcfb 	bl	8000550 <__aeabi_dmul>
 8009b5a:	a361      	add	r3, pc, #388	; (adr r3, 8009ce0 <__ieee754_exp+0x2b8>)
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	f7f6 fb40 	bl	80001e4 <__adddf3>
 8009b64:	4632      	mov	r2, r6
 8009b66:	463b      	mov	r3, r7
 8009b68:	f7f6 fcf2 	bl	8000550 <__aeabi_dmul>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4620      	mov	r0, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7f6 fb34 	bl	80001e0 <__aeabi_dsub>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	4620      	mov	r0, r4
 8009b82:	4629      	mov	r1, r5
 8009b84:	f7f6 fce4 	bl	8000550 <__aeabi_dmul>
 8009b88:	ec41 0b19 	vmov	d9, r0, r1
 8009b8c:	f1ba 0f00 	cmp.w	sl, #0
 8009b90:	d15d      	bne.n	8009c4e <__ieee754_exp+0x226>
 8009b92:	2200      	movs	r2, #0
 8009b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	f7f6 fb20 	bl	80001e0 <__aeabi_dsub>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	ec51 0b19 	vmov	r0, r1, d9
 8009ba8:	f7f6 fdfc 	bl	80007a4 <__aeabi_ddiv>
 8009bac:	4622      	mov	r2, r4
 8009bae:	462b      	mov	r3, r5
 8009bb0:	f7f6 fb16 	bl	80001e0 <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	2000      	movs	r0, #0
 8009bba:	4959      	ldr	r1, [pc, #356]	; (8009d20 <__ieee754_exp+0x2f8>)
 8009bbc:	f7f6 fb10 	bl	80001e0 <__aeabi_dsub>
 8009bc0:	e74d      	b.n	8009a5e <__ieee754_exp+0x36>
 8009bc2:	4b58      	ldr	r3, [pc, #352]	; (8009d24 <__ieee754_exp+0x2fc>)
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009bca:	4629      	mov	r1, r5
 8009bcc:	a346      	add	r3, pc, #280	; (adr r3, 8009ce8 <__ieee754_exp+0x2c0>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fcbd 	bl	8000550 <__aeabi_dmul>
 8009bd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bda:	f7f6 fb03 	bl	80001e4 <__adddf3>
 8009bde:	f7f6 ff67 	bl	8000ab0 <__aeabi_d2iz>
 8009be2:	4682      	mov	sl, r0
 8009be4:	f7f6 fc4a 	bl	800047c <__aeabi_i2d>
 8009be8:	a341      	add	r3, pc, #260	; (adr r3, 8009cf0 <__ieee754_exp+0x2c8>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	4606      	mov	r6, r0
 8009bf0:	460f      	mov	r7, r1
 8009bf2:	f7f6 fcad 	bl	8000550 <__aeabi_dmul>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 faef 	bl	80001e0 <__aeabi_dsub>
 8009c02:	a33d      	add	r3, pc, #244	; (adr r3, 8009cf8 <__ieee754_exp+0x2d0>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	4680      	mov	r8, r0
 8009c0a:	4689      	mov	r9, r1
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 fc9e 	bl	8000550 <__aeabi_dmul>
 8009c14:	ec41 0b18 	vmov	d8, r0, r1
 8009c18:	e76f      	b.n	8009afa <__ieee754_exp+0xd2>
 8009c1a:	4b43      	ldr	r3, [pc, #268]	; (8009d28 <__ieee754_exp+0x300>)
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d811      	bhi.n	8009c44 <__ieee754_exp+0x21c>
 8009c20:	a337      	add	r3, pc, #220	; (adr r3, 8009d00 <__ieee754_exp+0x2d8>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	ee10 0a10 	vmov	r0, s0
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	f7f6 fada 	bl	80001e4 <__adddf3>
 8009c30:	4b3b      	ldr	r3, [pc, #236]	; (8009d20 <__ieee754_exp+0x2f8>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	f7f6 ff1c 	bl	8000a70 <__aeabi_dcmpgt>
 8009c38:	b138      	cbz	r0, 8009c4a <__ieee754_exp+0x222>
 8009c3a:	4b39      	ldr	r3, [pc, #228]	; (8009d20 <__ieee754_exp+0x2f8>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	e70a      	b.n	8009a5a <__ieee754_exp+0x32>
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	e75f      	b.n	8009b0a <__ieee754_exp+0xe2>
 8009c4a:	4682      	mov	sl, r0
 8009c4c:	e75d      	b.n	8009b0a <__ieee754_exp+0xe2>
 8009c4e:	4632      	mov	r2, r6
 8009c50:	463b      	mov	r3, r7
 8009c52:	2000      	movs	r0, #0
 8009c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009c58:	f7f6 fac2 	bl	80001e0 <__aeabi_dsub>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	ec51 0b19 	vmov	r0, r1, d9
 8009c64:	f7f6 fd9e 	bl	80007a4 <__aeabi_ddiv>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	ec51 0b18 	vmov	r0, r1, d8
 8009c70:	f7f6 fab6 	bl	80001e0 <__aeabi_dsub>
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	f7f6 fab2 	bl	80001e0 <__aeabi_dsub>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	2000      	movs	r0, #0
 8009c82:	4927      	ldr	r1, [pc, #156]	; (8009d20 <__ieee754_exp+0x2f8>)
 8009c84:	f7f6 faac 	bl	80001e0 <__aeabi_dsub>
 8009c88:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009c8c:	4592      	cmp	sl, r2
 8009c8e:	db02      	blt.n	8009c96 <__ieee754_exp+0x26e>
 8009c90:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009c94:	e6e3      	b.n	8009a5e <__ieee754_exp+0x36>
 8009c96:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009c9a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009ca4:	f7f6 fc54 	bl	8000550 <__aeabi_dmul>
 8009ca8:	e6d9      	b.n	8009a5e <__ieee754_exp+0x36>
 8009caa:	bf00      	nop
 8009cac:	f3af 8000 	nop.w
 8009cb0:	fefa39ef 	.word	0xfefa39ef
 8009cb4:	40862e42 	.word	0x40862e42
 8009cb8:	d52d3051 	.word	0xd52d3051
 8009cbc:	c0874910 	.word	0xc0874910
 8009cc0:	72bea4d0 	.word	0x72bea4d0
 8009cc4:	3e663769 	.word	0x3e663769
 8009cc8:	c5d26bf1 	.word	0xc5d26bf1
 8009ccc:	3ebbbd41 	.word	0x3ebbbd41
 8009cd0:	af25de2c 	.word	0xaf25de2c
 8009cd4:	3f11566a 	.word	0x3f11566a
 8009cd8:	16bebd93 	.word	0x16bebd93
 8009cdc:	3f66c16c 	.word	0x3f66c16c
 8009ce0:	5555553e 	.word	0x5555553e
 8009ce4:	3fc55555 	.word	0x3fc55555
 8009ce8:	652b82fe 	.word	0x652b82fe
 8009cec:	3ff71547 	.word	0x3ff71547
 8009cf0:	fee00000 	.word	0xfee00000
 8009cf4:	3fe62e42 	.word	0x3fe62e42
 8009cf8:	35793c76 	.word	0x35793c76
 8009cfc:	3dea39ef 	.word	0x3dea39ef
 8009d00:	8800759c 	.word	0x8800759c
 8009d04:	7e37e43c 	.word	0x7e37e43c
 8009d08:	40862e41 	.word	0x40862e41
 8009d0c:	7fefffff 	.word	0x7fefffff
 8009d10:	3fd62e42 	.word	0x3fd62e42
 8009d14:	3ff0a2b1 	.word	0x3ff0a2b1
 8009d18:	08021018 	.word	0x08021018
 8009d1c:	08021028 	.word	0x08021028
 8009d20:	3ff00000 	.word	0x3ff00000
 8009d24:	08021008 	.word	0x08021008
 8009d28:	3defffff 	.word	0x3defffff
 8009d2c:	00000000 	.word	0x00000000

08009d30 <__ieee754_pow>:
 8009d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	ed2d 8b06 	vpush	{d8-d10}
 8009d38:	b089      	sub	sp, #36	; 0x24
 8009d3a:	ed8d 1b00 	vstr	d1, [sp]
 8009d3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009d42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009d46:	ea58 0102 	orrs.w	r1, r8, r2
 8009d4a:	ec57 6b10 	vmov	r6, r7, d0
 8009d4e:	d115      	bne.n	8009d7c <__ieee754_pow+0x4c>
 8009d50:	19b3      	adds	r3, r6, r6
 8009d52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009d56:	4152      	adcs	r2, r2
 8009d58:	4299      	cmp	r1, r3
 8009d5a:	4b89      	ldr	r3, [pc, #548]	; (8009f80 <__ieee754_pow+0x250>)
 8009d5c:	4193      	sbcs	r3, r2
 8009d5e:	f080 84d1 	bcs.w	800a704 <__ieee754_pow+0x9d4>
 8009d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 fa3b 	bl	80001e4 <__adddf3>
 8009d6e:	ec41 0b10 	vmov	d0, r0, r1
 8009d72:	b009      	add	sp, #36	; 0x24
 8009d74:	ecbd 8b06 	vpop	{d8-d10}
 8009d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7c:	4b81      	ldr	r3, [pc, #516]	; (8009f84 <__ieee754_pow+0x254>)
 8009d7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009d82:	429c      	cmp	r4, r3
 8009d84:	ee10 aa10 	vmov	sl, s0
 8009d88:	463d      	mov	r5, r7
 8009d8a:	dc06      	bgt.n	8009d9a <__ieee754_pow+0x6a>
 8009d8c:	d101      	bne.n	8009d92 <__ieee754_pow+0x62>
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	d1e7      	bne.n	8009d62 <__ieee754_pow+0x32>
 8009d92:	4598      	cmp	r8, r3
 8009d94:	dc01      	bgt.n	8009d9a <__ieee754_pow+0x6a>
 8009d96:	d10f      	bne.n	8009db8 <__ieee754_pow+0x88>
 8009d98:	b172      	cbz	r2, 8009db8 <__ieee754_pow+0x88>
 8009d9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009d9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009da2:	ea55 050a 	orrs.w	r5, r5, sl
 8009da6:	d1dc      	bne.n	8009d62 <__ieee754_pow+0x32>
 8009da8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dac:	18db      	adds	r3, r3, r3
 8009dae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009db2:	4152      	adcs	r2, r2
 8009db4:	429d      	cmp	r5, r3
 8009db6:	e7d0      	b.n	8009d5a <__ieee754_pow+0x2a>
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	da3b      	bge.n	8009e34 <__ieee754_pow+0x104>
 8009dbc:	4b72      	ldr	r3, [pc, #456]	; (8009f88 <__ieee754_pow+0x258>)
 8009dbe:	4598      	cmp	r8, r3
 8009dc0:	dc51      	bgt.n	8009e66 <__ieee754_pow+0x136>
 8009dc2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009dc6:	4598      	cmp	r8, r3
 8009dc8:	f340 84ab 	ble.w	800a722 <__ieee754_pow+0x9f2>
 8009dcc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009dd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009dd4:	2b14      	cmp	r3, #20
 8009dd6:	dd0f      	ble.n	8009df8 <__ieee754_pow+0xc8>
 8009dd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009ddc:	fa22 f103 	lsr.w	r1, r2, r3
 8009de0:	fa01 f303 	lsl.w	r3, r1, r3
 8009de4:	4293      	cmp	r3, r2
 8009de6:	f040 849c 	bne.w	800a722 <__ieee754_pow+0x9f2>
 8009dea:	f001 0101 	and.w	r1, r1, #1
 8009dee:	f1c1 0302 	rsb	r3, r1, #2
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	b182      	cbz	r2, 8009e18 <__ieee754_pow+0xe8>
 8009df6:	e05f      	b.n	8009eb8 <__ieee754_pow+0x188>
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	d15b      	bne.n	8009eb4 <__ieee754_pow+0x184>
 8009dfc:	f1c3 0314 	rsb	r3, r3, #20
 8009e00:	fa48 f103 	asr.w	r1, r8, r3
 8009e04:	fa01 f303 	lsl.w	r3, r1, r3
 8009e08:	4543      	cmp	r3, r8
 8009e0a:	f040 8487 	bne.w	800a71c <__ieee754_pow+0x9ec>
 8009e0e:	f001 0101 	and.w	r1, r1, #1
 8009e12:	f1c1 0302 	rsb	r3, r1, #2
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	4b5c      	ldr	r3, [pc, #368]	; (8009f8c <__ieee754_pow+0x25c>)
 8009e1a:	4598      	cmp	r8, r3
 8009e1c:	d132      	bne.n	8009e84 <__ieee754_pow+0x154>
 8009e1e:	f1b9 0f00 	cmp.w	r9, #0
 8009e22:	f280 8477 	bge.w	800a714 <__ieee754_pow+0x9e4>
 8009e26:	4959      	ldr	r1, [pc, #356]	; (8009f8c <__ieee754_pow+0x25c>)
 8009e28:	4632      	mov	r2, r6
 8009e2a:	463b      	mov	r3, r7
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f7f6 fcb9 	bl	80007a4 <__aeabi_ddiv>
 8009e32:	e79c      	b.n	8009d6e <__ieee754_pow+0x3e>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d13d      	bne.n	8009eb8 <__ieee754_pow+0x188>
 8009e3c:	4b51      	ldr	r3, [pc, #324]	; (8009f84 <__ieee754_pow+0x254>)
 8009e3e:	4598      	cmp	r8, r3
 8009e40:	d1ea      	bne.n	8009e18 <__ieee754_pow+0xe8>
 8009e42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009e4e:	f000 8459 	beq.w	800a704 <__ieee754_pow+0x9d4>
 8009e52:	4b4f      	ldr	r3, [pc, #316]	; (8009f90 <__ieee754_pow+0x260>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	dd08      	ble.n	8009e6a <__ieee754_pow+0x13a>
 8009e58:	f1b9 0f00 	cmp.w	r9, #0
 8009e5c:	f2c0 8456 	blt.w	800a70c <__ieee754_pow+0x9dc>
 8009e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e64:	e783      	b.n	8009d6e <__ieee754_pow+0x3e>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e7e5      	b.n	8009e36 <__ieee754_pow+0x106>
 8009e6a:	f1b9 0f00 	cmp.w	r9, #0
 8009e6e:	f04f 0000 	mov.w	r0, #0
 8009e72:	f04f 0100 	mov.w	r1, #0
 8009e76:	f6bf af7a 	bge.w	8009d6e <__ieee754_pow+0x3e>
 8009e7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009e7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e82:	e774      	b.n	8009d6e <__ieee754_pow+0x3e>
 8009e84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009e88:	d106      	bne.n	8009e98 <__ieee754_pow+0x168>
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	4639      	mov	r1, r7
 8009e92:	f7f6 fb5d 	bl	8000550 <__aeabi_dmul>
 8009e96:	e76a      	b.n	8009d6e <__ieee754_pow+0x3e>
 8009e98:	4b3e      	ldr	r3, [pc, #248]	; (8009f94 <__ieee754_pow+0x264>)
 8009e9a:	4599      	cmp	r9, r3
 8009e9c:	d10c      	bne.n	8009eb8 <__ieee754_pow+0x188>
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	db0a      	blt.n	8009eb8 <__ieee754_pow+0x188>
 8009ea2:	ec47 6b10 	vmov	d0, r6, r7
 8009ea6:	b009      	add	sp, #36	; 0x24
 8009ea8:	ecbd 8b06 	vpop	{d8-d10}
 8009eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	f7ff ba52 	b.w	8009358 <__ieee754_sqrt>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	9304      	str	r3, [sp, #16]
 8009eb8:	ec47 6b10 	vmov	d0, r6, r7
 8009ebc:	f000 fe6a 	bl	800ab94 <fabs>
 8009ec0:	ec51 0b10 	vmov	r0, r1, d0
 8009ec4:	f1ba 0f00 	cmp.w	sl, #0
 8009ec8:	d129      	bne.n	8009f1e <__ieee754_pow+0x1ee>
 8009eca:	b124      	cbz	r4, 8009ed6 <__ieee754_pow+0x1a6>
 8009ecc:	4b2f      	ldr	r3, [pc, #188]	; (8009f8c <__ieee754_pow+0x25c>)
 8009ece:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d123      	bne.n	8009f1e <__ieee754_pow+0x1ee>
 8009ed6:	f1b9 0f00 	cmp.w	r9, #0
 8009eda:	da05      	bge.n	8009ee8 <__ieee754_pow+0x1b8>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	492a      	ldr	r1, [pc, #168]	; (8009f8c <__ieee754_pow+0x25c>)
 8009ee4:	f7f6 fc5e 	bl	80007a4 <__aeabi_ddiv>
 8009ee8:	2d00      	cmp	r5, #0
 8009eea:	f6bf af40 	bge.w	8009d6e <__ieee754_pow+0x3e>
 8009eee:	9b04      	ldr	r3, [sp, #16]
 8009ef0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ef4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ef8:	431c      	orrs	r4, r3
 8009efa:	d108      	bne.n	8009f0e <__ieee754_pow+0x1de>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4610      	mov	r0, r2
 8009f02:	4619      	mov	r1, r3
 8009f04:	f7f6 f96c 	bl	80001e0 <__aeabi_dsub>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e78f      	b.n	8009e2e <__ieee754_pow+0xfe>
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	f47f af2c 	bne.w	8009d6e <__ieee754_pow+0x3e>
 8009f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	e727      	b.n	8009d6e <__ieee754_pow+0x3e>
 8009f1e:	0feb      	lsrs	r3, r5, #31
 8009f20:	3b01      	subs	r3, #1
 8009f22:	9306      	str	r3, [sp, #24]
 8009f24:	9a06      	ldr	r2, [sp, #24]
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	d102      	bne.n	8009f32 <__ieee754_pow+0x202>
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	463b      	mov	r3, r7
 8009f30:	e7e6      	b.n	8009f00 <__ieee754_pow+0x1d0>
 8009f32:	4b19      	ldr	r3, [pc, #100]	; (8009f98 <__ieee754_pow+0x268>)
 8009f34:	4598      	cmp	r8, r3
 8009f36:	f340 80fb 	ble.w	800a130 <__ieee754_pow+0x400>
 8009f3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f3e:	4598      	cmp	r8, r3
 8009f40:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <__ieee754_pow+0x260>)
 8009f42:	dd0c      	ble.n	8009f5e <__ieee754_pow+0x22e>
 8009f44:	429c      	cmp	r4, r3
 8009f46:	dc0f      	bgt.n	8009f68 <__ieee754_pow+0x238>
 8009f48:	f1b9 0f00 	cmp.w	r9, #0
 8009f4c:	da0f      	bge.n	8009f6e <__ieee754_pow+0x23e>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	b009      	add	sp, #36	; 0x24
 8009f52:	ecbd 8b06 	vpop	{d8-d10}
 8009f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	f000 beca 	b.w	800acf2 <__math_oflow>
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	dbf2      	blt.n	8009f48 <__ieee754_pow+0x218>
 8009f62:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <__ieee754_pow+0x25c>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	dd19      	ble.n	8009f9c <__ieee754_pow+0x26c>
 8009f68:	f1b9 0f00 	cmp.w	r9, #0
 8009f6c:	dcef      	bgt.n	8009f4e <__ieee754_pow+0x21e>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	b009      	add	sp, #36	; 0x24
 8009f72:	ecbd 8b06 	vpop	{d8-d10}
 8009f76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	f000 beb1 	b.w	800ace0 <__math_uflow>
 8009f7e:	bf00      	nop
 8009f80:	fff00000 	.word	0xfff00000
 8009f84:	7ff00000 	.word	0x7ff00000
 8009f88:	433fffff 	.word	0x433fffff
 8009f8c:	3ff00000 	.word	0x3ff00000
 8009f90:	3fefffff 	.word	0x3fefffff
 8009f94:	3fe00000 	.word	0x3fe00000
 8009f98:	41e00000 	.word	0x41e00000
 8009f9c:	4b60      	ldr	r3, [pc, #384]	; (800a120 <__ieee754_pow+0x3f0>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f7f6 f91e 	bl	80001e0 <__aeabi_dsub>
 8009fa4:	a354      	add	r3, pc, #336	; (adr r3, 800a0f8 <__ieee754_pow+0x3c8>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	4604      	mov	r4, r0
 8009fac:	460d      	mov	r5, r1
 8009fae:	f7f6 facf 	bl	8000550 <__aeabi_dmul>
 8009fb2:	a353      	add	r3, pc, #332	; (adr r3, 800a100 <__ieee754_pow+0x3d0>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	4606      	mov	r6, r0
 8009fba:	460f      	mov	r7, r1
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7f6 fac6 	bl	8000550 <__aeabi_dmul>
 8009fc4:	4b57      	ldr	r3, [pc, #348]	; (800a124 <__ieee754_pow+0x3f4>)
 8009fc6:	4682      	mov	sl, r0
 8009fc8:	468b      	mov	fp, r1
 8009fca:	2200      	movs	r2, #0
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fabe 	bl	8000550 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	a14b      	add	r1, pc, #300	; (adr r1, 800a108 <__ieee754_pow+0x3d8>)
 8009fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fde:	f7f6 f8ff 	bl	80001e0 <__aeabi_dsub>
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	f7f6 fab3 	bl	8000550 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	2000      	movs	r0, #0
 8009ff0:	494d      	ldr	r1, [pc, #308]	; (800a128 <__ieee754_pow+0x3f8>)
 8009ff2:	f7f6 f8f5 	bl	80001e0 <__aeabi_dsub>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 faa5 	bl	8000550 <__aeabi_dmul>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4640      	mov	r0, r8
 800a00c:	4649      	mov	r1, r9
 800a00e:	f7f6 fa9f 	bl	8000550 <__aeabi_dmul>
 800a012:	a33f      	add	r3, pc, #252	; (adr r3, 800a110 <__ieee754_pow+0x3e0>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 fa9a 	bl	8000550 <__aeabi_dmul>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4650      	mov	r0, sl
 800a022:	4659      	mov	r1, fp
 800a024:	f7f6 f8dc 	bl	80001e0 <__aeabi_dsub>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4680      	mov	r8, r0
 800a02e:	4689      	mov	r9, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 f8d6 	bl	80001e4 <__adddf3>
 800a038:	2000      	movs	r0, #0
 800a03a:	4632      	mov	r2, r6
 800a03c:	463b      	mov	r3, r7
 800a03e:	4604      	mov	r4, r0
 800a040:	460d      	mov	r5, r1
 800a042:	f7f6 f8cd 	bl	80001e0 <__aeabi_dsub>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4640      	mov	r0, r8
 800a04c:	4649      	mov	r1, r9
 800a04e:	f7f6 f8c7 	bl	80001e0 <__aeabi_dsub>
 800a052:	9b04      	ldr	r3, [sp, #16]
 800a054:	9a06      	ldr	r2, [sp, #24]
 800a056:	3b01      	subs	r3, #1
 800a058:	4313      	orrs	r3, r2
 800a05a:	4682      	mov	sl, r0
 800a05c:	468b      	mov	fp, r1
 800a05e:	f040 81e7 	bne.w	800a430 <__ieee754_pow+0x700>
 800a062:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a118 <__ieee754_pow+0x3e8>
 800a066:	eeb0 8a47 	vmov.f32	s16, s14
 800a06a:	eef0 8a67 	vmov.f32	s17, s15
 800a06e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a072:	2600      	movs	r6, #0
 800a074:	4632      	mov	r2, r6
 800a076:	463b      	mov	r3, r7
 800a078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a07c:	f7f6 f8b0 	bl	80001e0 <__aeabi_dsub>
 800a080:	4622      	mov	r2, r4
 800a082:	462b      	mov	r3, r5
 800a084:	f7f6 fa64 	bl	8000550 <__aeabi_dmul>
 800a088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a08c:	4680      	mov	r8, r0
 800a08e:	4689      	mov	r9, r1
 800a090:	4650      	mov	r0, sl
 800a092:	4659      	mov	r1, fp
 800a094:	f7f6 fa5c 	bl	8000550 <__aeabi_dmul>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4640      	mov	r0, r8
 800a09e:	4649      	mov	r1, r9
 800a0a0:	f7f6 f8a0 	bl	80001e4 <__adddf3>
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	4689      	mov	r9, r1
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f7f6 fa4e 	bl	8000550 <__aeabi_dmul>
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	460d      	mov	r5, r1
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	4649      	mov	r1, r9
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7f6 f890 	bl	80001e4 <__adddf3>
 800a0c4:	4b19      	ldr	r3, [pc, #100]	; (800a12c <__ieee754_pow+0x3fc>)
 800a0c6:	4299      	cmp	r1, r3
 800a0c8:	ec45 4b19 	vmov	d9, r4, r5
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	460f      	mov	r7, r1
 800a0d0:	468b      	mov	fp, r1
 800a0d2:	f340 82f0 	ble.w	800a6b6 <__ieee754_pow+0x986>
 800a0d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a0da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a0de:	4303      	orrs	r3, r0
 800a0e0:	f000 81e4 	beq.w	800a4ac <__ieee754_pow+0x77c>
 800a0e4:	ec51 0b18 	vmov	r0, r1, d8
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f7f6 fca2 	bl	8000a34 <__aeabi_dcmplt>
 800a0f0:	3800      	subs	r0, #0
 800a0f2:	bf18      	it	ne
 800a0f4:	2001      	movne	r0, #1
 800a0f6:	e72b      	b.n	8009f50 <__ieee754_pow+0x220>
 800a0f8:	60000000 	.word	0x60000000
 800a0fc:	3ff71547 	.word	0x3ff71547
 800a100:	f85ddf44 	.word	0xf85ddf44
 800a104:	3e54ae0b 	.word	0x3e54ae0b
 800a108:	55555555 	.word	0x55555555
 800a10c:	3fd55555 	.word	0x3fd55555
 800a110:	652b82fe 	.word	0x652b82fe
 800a114:	3ff71547 	.word	0x3ff71547
 800a118:	00000000 	.word	0x00000000
 800a11c:	bff00000 	.word	0xbff00000
 800a120:	3ff00000 	.word	0x3ff00000
 800a124:	3fd00000 	.word	0x3fd00000
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	408fffff 	.word	0x408fffff
 800a130:	4bd5      	ldr	r3, [pc, #852]	; (800a488 <__ieee754_pow+0x758>)
 800a132:	402b      	ands	r3, r5
 800a134:	2200      	movs	r2, #0
 800a136:	b92b      	cbnz	r3, 800a144 <__ieee754_pow+0x414>
 800a138:	4bd4      	ldr	r3, [pc, #848]	; (800a48c <__ieee754_pow+0x75c>)
 800a13a:	f7f6 fa09 	bl	8000550 <__aeabi_dmul>
 800a13e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a142:	460c      	mov	r4, r1
 800a144:	1523      	asrs	r3, r4, #20
 800a146:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a14a:	4413      	add	r3, r2
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	4bd0      	ldr	r3, [pc, #832]	; (800a490 <__ieee754_pow+0x760>)
 800a150:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a154:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a158:	429c      	cmp	r4, r3
 800a15a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a15e:	dd08      	ble.n	800a172 <__ieee754_pow+0x442>
 800a160:	4bcc      	ldr	r3, [pc, #816]	; (800a494 <__ieee754_pow+0x764>)
 800a162:	429c      	cmp	r4, r3
 800a164:	f340 8162 	ble.w	800a42c <__ieee754_pow+0x6fc>
 800a168:	9b05      	ldr	r3, [sp, #20]
 800a16a:	3301      	adds	r3, #1
 800a16c:	9305      	str	r3, [sp, #20]
 800a16e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a172:	2400      	movs	r4, #0
 800a174:	00e3      	lsls	r3, r4, #3
 800a176:	9307      	str	r3, [sp, #28]
 800a178:	4bc7      	ldr	r3, [pc, #796]	; (800a498 <__ieee754_pow+0x768>)
 800a17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a17e:	ed93 7b00 	vldr	d7, [r3]
 800a182:	4629      	mov	r1, r5
 800a184:	ec53 2b17 	vmov	r2, r3, d7
 800a188:	eeb0 9a47 	vmov.f32	s18, s14
 800a18c:	eef0 9a67 	vmov.f32	s19, s15
 800a190:	4682      	mov	sl, r0
 800a192:	f7f6 f825 	bl	80001e0 <__aeabi_dsub>
 800a196:	4652      	mov	r2, sl
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	462b      	mov	r3, r5
 800a19e:	ec51 0b19 	vmov	r0, r1, d9
 800a1a2:	f7f6 f81f 	bl	80001e4 <__adddf3>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	49bb      	ldr	r1, [pc, #748]	; (800a49c <__ieee754_pow+0x76c>)
 800a1ae:	f7f6 faf9 	bl	80007a4 <__aeabi_ddiv>
 800a1b2:	ec41 0b1a 	vmov	d10, r0, r1
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f7f6 f9c7 	bl	8000550 <__aeabi_dmul>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a1ce:	46ab      	mov	fp, r5
 800a1d0:	106d      	asrs	r5, r5, #1
 800a1d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a1d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a1da:	ec41 0b18 	vmov	d8, r0, r1
 800a1de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	461d      	mov	r5, r3
 800a1ec:	f7f6 f9b0 	bl	8000550 <__aeabi_dmul>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	f7f5 fff2 	bl	80001e0 <__aeabi_dsub>
 800a1fc:	ec53 2b19 	vmov	r2, r3, d9
 800a200:	4606      	mov	r6, r0
 800a202:	460f      	mov	r7, r1
 800a204:	4620      	mov	r0, r4
 800a206:	4629      	mov	r1, r5
 800a208:	f7f5 ffea 	bl	80001e0 <__aeabi_dsub>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4650      	mov	r0, sl
 800a212:	4659      	mov	r1, fp
 800a214:	f7f5 ffe4 	bl	80001e0 <__aeabi_dsub>
 800a218:	4642      	mov	r2, r8
 800a21a:	464b      	mov	r3, r9
 800a21c:	f7f6 f998 	bl	8000550 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	f7f5 ffda 	bl	80001e0 <__aeabi_dsub>
 800a22c:	ec53 2b1a 	vmov	r2, r3, d10
 800a230:	f7f6 f98e 	bl	8000550 <__aeabi_dmul>
 800a234:	ec53 2b18 	vmov	r2, r3, d8
 800a238:	ec41 0b19 	vmov	d9, r0, r1
 800a23c:	ec51 0b18 	vmov	r0, r1, d8
 800a240:	f7f6 f986 	bl	8000550 <__aeabi_dmul>
 800a244:	a37c      	add	r3, pc, #496	; (adr r3, 800a438 <__ieee754_pow+0x708>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4604      	mov	r4, r0
 800a24c:	460d      	mov	r5, r1
 800a24e:	f7f6 f97f 	bl	8000550 <__aeabi_dmul>
 800a252:	a37b      	add	r3, pc, #492	; (adr r3, 800a440 <__ieee754_pow+0x710>)
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f7f5 ffc4 	bl	80001e4 <__adddf3>
 800a25c:	4622      	mov	r2, r4
 800a25e:	462b      	mov	r3, r5
 800a260:	f7f6 f976 	bl	8000550 <__aeabi_dmul>
 800a264:	a378      	add	r3, pc, #480	; (adr r3, 800a448 <__ieee754_pow+0x718>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7f5 ffbb 	bl	80001e4 <__adddf3>
 800a26e:	4622      	mov	r2, r4
 800a270:	462b      	mov	r3, r5
 800a272:	f7f6 f96d 	bl	8000550 <__aeabi_dmul>
 800a276:	a376      	add	r3, pc, #472	; (adr r3, 800a450 <__ieee754_pow+0x720>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7f5 ffb2 	bl	80001e4 <__adddf3>
 800a280:	4622      	mov	r2, r4
 800a282:	462b      	mov	r3, r5
 800a284:	f7f6 f964 	bl	8000550 <__aeabi_dmul>
 800a288:	a373      	add	r3, pc, #460	; (adr r3, 800a458 <__ieee754_pow+0x728>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f5 ffa9 	bl	80001e4 <__adddf3>
 800a292:	4622      	mov	r2, r4
 800a294:	462b      	mov	r3, r5
 800a296:	f7f6 f95b 	bl	8000550 <__aeabi_dmul>
 800a29a:	a371      	add	r3, pc, #452	; (adr r3, 800a460 <__ieee754_pow+0x730>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f7f5 ffa0 	bl	80001e4 <__adddf3>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460f      	mov	r7, r1
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f7f6 f94e 	bl	8000550 <__aeabi_dmul>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	f7f6 f948 	bl	8000550 <__aeabi_dmul>
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	460d      	mov	r5, r1
 800a2c6:	464b      	mov	r3, r9
 800a2c8:	ec51 0b18 	vmov	r0, r1, d8
 800a2cc:	f7f5 ff8a 	bl	80001e4 <__adddf3>
 800a2d0:	ec53 2b19 	vmov	r2, r3, d9
 800a2d4:	f7f6 f93c 	bl	8000550 <__aeabi_dmul>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f7f5 ff82 	bl	80001e4 <__adddf3>
 800a2e0:	4642      	mov	r2, r8
 800a2e2:	4682      	mov	sl, r0
 800a2e4:	468b      	mov	fp, r1
 800a2e6:	464b      	mov	r3, r9
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	f7f6 f930 	bl	8000550 <__aeabi_dmul>
 800a2f0:	4b6b      	ldr	r3, [pc, #428]	; (800a4a0 <__ieee754_pow+0x770>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	f7f5 ff74 	bl	80001e4 <__adddf3>
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	465b      	mov	r3, fp
 800a300:	f7f5 ff70 	bl	80001e4 <__adddf3>
 800a304:	2000      	movs	r0, #0
 800a306:	4604      	mov	r4, r0
 800a308:	460d      	mov	r5, r1
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	f7f6 f91d 	bl	8000550 <__aeabi_dmul>
 800a316:	4b62      	ldr	r3, [pc, #392]	; (800a4a0 <__ieee754_pow+0x770>)
 800a318:	4680      	mov	r8, r0
 800a31a:	4689      	mov	r9, r1
 800a31c:	2200      	movs	r2, #0
 800a31e:	4620      	mov	r0, r4
 800a320:	4629      	mov	r1, r5
 800a322:	f7f5 ff5d 	bl	80001e0 <__aeabi_dsub>
 800a326:	4632      	mov	r2, r6
 800a328:	463b      	mov	r3, r7
 800a32a:	f7f5 ff59 	bl	80001e0 <__aeabi_dsub>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4650      	mov	r0, sl
 800a334:	4659      	mov	r1, fp
 800a336:	f7f5 ff53 	bl	80001e0 <__aeabi_dsub>
 800a33a:	ec53 2b18 	vmov	r2, r3, d8
 800a33e:	f7f6 f907 	bl	8000550 <__aeabi_dmul>
 800a342:	4622      	mov	r2, r4
 800a344:	4606      	mov	r6, r0
 800a346:	460f      	mov	r7, r1
 800a348:	462b      	mov	r3, r5
 800a34a:	ec51 0b19 	vmov	r0, r1, d9
 800a34e:	f7f6 f8ff 	bl	8000550 <__aeabi_dmul>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f5 ff43 	bl	80001e4 <__adddf3>
 800a35e:	4606      	mov	r6, r0
 800a360:	460f      	mov	r7, r1
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	f7f5 ff3b 	bl	80001e4 <__adddf3>
 800a36e:	a33e      	add	r3, pc, #248	; (adr r3, 800a468 <__ieee754_pow+0x738>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	2000      	movs	r0, #0
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	f7f6 f8e9 	bl	8000550 <__aeabi_dmul>
 800a37e:	4642      	mov	r2, r8
 800a380:	ec41 0b18 	vmov	d8, r0, r1
 800a384:	464b      	mov	r3, r9
 800a386:	4620      	mov	r0, r4
 800a388:	4629      	mov	r1, r5
 800a38a:	f7f5 ff29 	bl	80001e0 <__aeabi_dsub>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4630      	mov	r0, r6
 800a394:	4639      	mov	r1, r7
 800a396:	f7f5 ff23 	bl	80001e0 <__aeabi_dsub>
 800a39a:	a335      	add	r3, pc, #212	; (adr r3, 800a470 <__ieee754_pow+0x740>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f6 f8d6 	bl	8000550 <__aeabi_dmul>
 800a3a4:	a334      	add	r3, pc, #208	; (adr r3, 800a478 <__ieee754_pow+0x748>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 f8cd 	bl	8000550 <__aeabi_dmul>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	f7f5 ff11 	bl	80001e4 <__adddf3>
 800a3c2:	9a07      	ldr	r2, [sp, #28]
 800a3c4:	4b37      	ldr	r3, [pc, #220]	; (800a4a4 <__ieee754_pow+0x774>)
 800a3c6:	4413      	add	r3, r2
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f5 ff0a 	bl	80001e4 <__adddf3>
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	9805      	ldr	r0, [sp, #20]
 800a3d4:	468b      	mov	fp, r1
 800a3d6:	f7f6 f851 	bl	800047c <__aeabi_i2d>
 800a3da:	9a07      	ldr	r2, [sp, #28]
 800a3dc:	4b32      	ldr	r3, [pc, #200]	; (800a4a8 <__ieee754_pow+0x778>)
 800a3de:	4413      	add	r3, r2
 800a3e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	460f      	mov	r7, r1
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	465b      	mov	r3, fp
 800a3ec:	ec51 0b18 	vmov	r0, r1, d8
 800a3f0:	f7f5 fef8 	bl	80001e4 <__adddf3>
 800a3f4:	4642      	mov	r2, r8
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	f7f5 fef4 	bl	80001e4 <__adddf3>
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	f7f5 fef0 	bl	80001e4 <__adddf3>
 800a404:	2000      	movs	r0, #0
 800a406:	4632      	mov	r2, r6
 800a408:	463b      	mov	r3, r7
 800a40a:	4604      	mov	r4, r0
 800a40c:	460d      	mov	r5, r1
 800a40e:	f7f5 fee7 	bl	80001e0 <__aeabi_dsub>
 800a412:	4642      	mov	r2, r8
 800a414:	464b      	mov	r3, r9
 800a416:	f7f5 fee3 	bl	80001e0 <__aeabi_dsub>
 800a41a:	ec53 2b18 	vmov	r2, r3, d8
 800a41e:	f7f5 fedf 	bl	80001e0 <__aeabi_dsub>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4650      	mov	r0, sl
 800a428:	4659      	mov	r1, fp
 800a42a:	e610      	b.n	800a04e <__ieee754_pow+0x31e>
 800a42c:	2401      	movs	r4, #1
 800a42e:	e6a1      	b.n	800a174 <__ieee754_pow+0x444>
 800a430:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a480 <__ieee754_pow+0x750>
 800a434:	e617      	b.n	800a066 <__ieee754_pow+0x336>
 800a436:	bf00      	nop
 800a438:	4a454eef 	.word	0x4a454eef
 800a43c:	3fca7e28 	.word	0x3fca7e28
 800a440:	93c9db65 	.word	0x93c9db65
 800a444:	3fcd864a 	.word	0x3fcd864a
 800a448:	a91d4101 	.word	0xa91d4101
 800a44c:	3fd17460 	.word	0x3fd17460
 800a450:	518f264d 	.word	0x518f264d
 800a454:	3fd55555 	.word	0x3fd55555
 800a458:	db6fabff 	.word	0xdb6fabff
 800a45c:	3fdb6db6 	.word	0x3fdb6db6
 800a460:	33333303 	.word	0x33333303
 800a464:	3fe33333 	.word	0x3fe33333
 800a468:	e0000000 	.word	0xe0000000
 800a46c:	3feec709 	.word	0x3feec709
 800a470:	dc3a03fd 	.word	0xdc3a03fd
 800a474:	3feec709 	.word	0x3feec709
 800a478:	145b01f5 	.word	0x145b01f5
 800a47c:	be3e2fe0 	.word	0xbe3e2fe0
 800a480:	00000000 	.word	0x00000000
 800a484:	3ff00000 	.word	0x3ff00000
 800a488:	7ff00000 	.word	0x7ff00000
 800a48c:	43400000 	.word	0x43400000
 800a490:	0003988e 	.word	0x0003988e
 800a494:	000bb679 	.word	0x000bb679
 800a498:	08021038 	.word	0x08021038
 800a49c:	3ff00000 	.word	0x3ff00000
 800a4a0:	40080000 	.word	0x40080000
 800a4a4:	08021058 	.word	0x08021058
 800a4a8:	08021048 	.word	0x08021048
 800a4ac:	a3b3      	add	r3, pc, #716	; (adr r3, 800a77c <__ieee754_pow+0xa4c>)
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	f7f5 fe95 	bl	80001e4 <__adddf3>
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	ec41 0b1a 	vmov	d10, r0, r1
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	f7f5 fe8b 	bl	80001e0 <__aeabi_dsub>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	ec51 0b1a 	vmov	r0, r1, d10
 800a4d2:	f7f6 facd 	bl	8000a70 <__aeabi_dcmpgt>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f47f ae04 	bne.w	800a0e4 <__ieee754_pow+0x3b4>
 800a4dc:	4aa2      	ldr	r2, [pc, #648]	; (800a768 <__ieee754_pow+0xa38>)
 800a4de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	f340 8107 	ble.w	800a6f6 <__ieee754_pow+0x9c6>
 800a4e8:	151b      	asrs	r3, r3, #20
 800a4ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a4ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a4f2:	fa4a fa03 	asr.w	sl, sl, r3
 800a4f6:	44da      	add	sl, fp
 800a4f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a4fc:	489b      	ldr	r0, [pc, #620]	; (800a76c <__ieee754_pow+0xa3c>)
 800a4fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a502:	4108      	asrs	r0, r1
 800a504:	ea00 030a 	and.w	r3, r0, sl
 800a508:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a50c:	f1c1 0114 	rsb	r1, r1, #20
 800a510:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a514:	fa4a fa01 	asr.w	sl, sl, r1
 800a518:	f1bb 0f00 	cmp.w	fp, #0
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	4620      	mov	r0, r4
 800a522:	4629      	mov	r1, r5
 800a524:	bfb8      	it	lt
 800a526:	f1ca 0a00 	rsblt	sl, sl, #0
 800a52a:	f7f5 fe59 	bl	80001e0 <__aeabi_dsub>
 800a52e:	ec41 0b19 	vmov	d9, r0, r1
 800a532:	4642      	mov	r2, r8
 800a534:	464b      	mov	r3, r9
 800a536:	ec51 0b19 	vmov	r0, r1, d9
 800a53a:	f7f5 fe53 	bl	80001e4 <__adddf3>
 800a53e:	a37a      	add	r3, pc, #488	; (adr r3, 800a728 <__ieee754_pow+0x9f8>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	2000      	movs	r0, #0
 800a546:	4604      	mov	r4, r0
 800a548:	460d      	mov	r5, r1
 800a54a:	f7f6 f801 	bl	8000550 <__aeabi_dmul>
 800a54e:	ec53 2b19 	vmov	r2, r3, d9
 800a552:	4606      	mov	r6, r0
 800a554:	460f      	mov	r7, r1
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	f7f5 fe41 	bl	80001e0 <__aeabi_dsub>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4640      	mov	r0, r8
 800a564:	4649      	mov	r1, r9
 800a566:	f7f5 fe3b 	bl	80001e0 <__aeabi_dsub>
 800a56a:	a371      	add	r3, pc, #452	; (adr r3, 800a730 <__ieee754_pow+0xa00>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f5 ffee 	bl	8000550 <__aeabi_dmul>
 800a574:	a370      	add	r3, pc, #448	; (adr r3, 800a738 <__ieee754_pow+0xa08>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	4680      	mov	r8, r0
 800a57c:	4689      	mov	r9, r1
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f7f5 ffe5 	bl	8000550 <__aeabi_dmul>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4640      	mov	r0, r8
 800a58c:	4649      	mov	r1, r9
 800a58e:	f7f5 fe29 	bl	80001e4 <__adddf3>
 800a592:	4604      	mov	r4, r0
 800a594:	460d      	mov	r5, r1
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	f7f5 fe21 	bl	80001e4 <__adddf3>
 800a5a2:	4632      	mov	r2, r6
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	f7f5 fe19 	bl	80001e0 <__aeabi_dsub>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	f7f5 fe13 	bl	80001e0 <__aeabi_dsub>
 800a5ba:	4642      	mov	r2, r8
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	f7f5 ffc3 	bl	8000550 <__aeabi_dmul>
 800a5ca:	a35d      	add	r3, pc, #372	; (adr r3, 800a740 <__ieee754_pow+0xa10>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	f7f5 ffbc 	bl	8000550 <__aeabi_dmul>
 800a5d8:	a35b      	add	r3, pc, #364	; (adr r3, 800a748 <__ieee754_pow+0xa18>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 fdff 	bl	80001e0 <__aeabi_dsub>
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	f7f5 ffb3 	bl	8000550 <__aeabi_dmul>
 800a5ea:	a359      	add	r3, pc, #356	; (adr r3, 800a750 <__ieee754_pow+0xa20>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f5 fdf8 	bl	80001e4 <__adddf3>
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	462b      	mov	r3, r5
 800a5f8:	f7f5 ffaa 	bl	8000550 <__aeabi_dmul>
 800a5fc:	a356      	add	r3, pc, #344	; (adr r3, 800a758 <__ieee754_pow+0xa28>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f5 fded 	bl	80001e0 <__aeabi_dsub>
 800a606:	4622      	mov	r2, r4
 800a608:	462b      	mov	r3, r5
 800a60a:	f7f5 ffa1 	bl	8000550 <__aeabi_dmul>
 800a60e:	a354      	add	r3, pc, #336	; (adr r3, 800a760 <__ieee754_pow+0xa30>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f5 fde6 	bl	80001e4 <__adddf3>
 800a618:	4622      	mov	r2, r4
 800a61a:	462b      	mov	r3, r5
 800a61c:	f7f5 ff98 	bl	8000550 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f5 fdda 	bl	80001e0 <__aeabi_dsub>
 800a62c:	4604      	mov	r4, r0
 800a62e:	460d      	mov	r5, r1
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f5 ff8a 	bl	8000550 <__aeabi_dmul>
 800a63c:	2200      	movs	r2, #0
 800a63e:	ec41 0b19 	vmov	d9, r0, r1
 800a642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a646:	4620      	mov	r0, r4
 800a648:	4629      	mov	r1, r5
 800a64a:	f7f5 fdc9 	bl	80001e0 <__aeabi_dsub>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	ec51 0b19 	vmov	r0, r1, d9
 800a656:	f7f6 f8a5 	bl	80007a4 <__aeabi_ddiv>
 800a65a:	4632      	mov	r2, r6
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	463b      	mov	r3, r7
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f5 ff73 	bl	8000550 <__aeabi_dmul>
 800a66a:	4632      	mov	r2, r6
 800a66c:	463b      	mov	r3, r7
 800a66e:	f7f5 fdb9 	bl	80001e4 <__adddf3>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f5 fdb1 	bl	80001e0 <__aeabi_dsub>
 800a67e:	4642      	mov	r2, r8
 800a680:	464b      	mov	r3, r9
 800a682:	f7f5 fdad 	bl	80001e0 <__aeabi_dsub>
 800a686:	460b      	mov	r3, r1
 800a688:	4602      	mov	r2, r0
 800a68a:	4939      	ldr	r1, [pc, #228]	; (800a770 <__ieee754_pow+0xa40>)
 800a68c:	2000      	movs	r0, #0
 800a68e:	f7f5 fda7 	bl	80001e0 <__aeabi_dsub>
 800a692:	ec41 0b10 	vmov	d0, r0, r1
 800a696:	ee10 3a90 	vmov	r3, s1
 800a69a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a69e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6a2:	da2b      	bge.n	800a6fc <__ieee754_pow+0x9cc>
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	f000 fa7f 	bl	800aba8 <scalbn>
 800a6aa:	ec51 0b10 	vmov	r0, r1, d0
 800a6ae:	ec53 2b18 	vmov	r2, r3, d8
 800a6b2:	f7ff bbee 	b.w	8009e92 <__ieee754_pow+0x162>
 800a6b6:	4b2f      	ldr	r3, [pc, #188]	; (800a774 <__ieee754_pow+0xa44>)
 800a6b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a6bc:	429e      	cmp	r6, r3
 800a6be:	f77f af0d 	ble.w	800a4dc <__ieee754_pow+0x7ac>
 800a6c2:	4b2d      	ldr	r3, [pc, #180]	; (800a778 <__ieee754_pow+0xa48>)
 800a6c4:	440b      	add	r3, r1
 800a6c6:	4303      	orrs	r3, r0
 800a6c8:	d009      	beq.n	800a6de <__ieee754_pow+0x9ae>
 800a6ca:	ec51 0b18 	vmov	r0, r1, d8
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f7f6 f9af 	bl	8000a34 <__aeabi_dcmplt>
 800a6d6:	3800      	subs	r0, #0
 800a6d8:	bf18      	it	ne
 800a6da:	2001      	movne	r0, #1
 800a6dc:	e448      	b.n	8009f70 <__ieee754_pow+0x240>
 800a6de:	4622      	mov	r2, r4
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	f7f5 fd7d 	bl	80001e0 <__aeabi_dsub>
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	f7f6 f9b7 	bl	8000a5c <__aeabi_dcmpge>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f aef4 	beq.w	800a4dc <__ieee754_pow+0x7ac>
 800a6f4:	e7e9      	b.n	800a6ca <__ieee754_pow+0x99a>
 800a6f6:	f04f 0a00 	mov.w	sl, #0
 800a6fa:	e71a      	b.n	800a532 <__ieee754_pow+0x802>
 800a6fc:	ec51 0b10 	vmov	r0, r1, d0
 800a700:	4619      	mov	r1, r3
 800a702:	e7d4      	b.n	800a6ae <__ieee754_pow+0x97e>
 800a704:	491a      	ldr	r1, [pc, #104]	; (800a770 <__ieee754_pow+0xa40>)
 800a706:	2000      	movs	r0, #0
 800a708:	f7ff bb31 	b.w	8009d6e <__ieee754_pow+0x3e>
 800a70c:	2000      	movs	r0, #0
 800a70e:	2100      	movs	r1, #0
 800a710:	f7ff bb2d 	b.w	8009d6e <__ieee754_pow+0x3e>
 800a714:	4630      	mov	r0, r6
 800a716:	4639      	mov	r1, r7
 800a718:	f7ff bb29 	b.w	8009d6e <__ieee754_pow+0x3e>
 800a71c:	9204      	str	r2, [sp, #16]
 800a71e:	f7ff bb7b 	b.w	8009e18 <__ieee754_pow+0xe8>
 800a722:	2300      	movs	r3, #0
 800a724:	f7ff bb65 	b.w	8009df2 <__ieee754_pow+0xc2>
 800a728:	00000000 	.word	0x00000000
 800a72c:	3fe62e43 	.word	0x3fe62e43
 800a730:	fefa39ef 	.word	0xfefa39ef
 800a734:	3fe62e42 	.word	0x3fe62e42
 800a738:	0ca86c39 	.word	0x0ca86c39
 800a73c:	be205c61 	.word	0xbe205c61
 800a740:	72bea4d0 	.word	0x72bea4d0
 800a744:	3e663769 	.word	0x3e663769
 800a748:	c5d26bf1 	.word	0xc5d26bf1
 800a74c:	3ebbbd41 	.word	0x3ebbbd41
 800a750:	af25de2c 	.word	0xaf25de2c
 800a754:	3f11566a 	.word	0x3f11566a
 800a758:	16bebd93 	.word	0x16bebd93
 800a75c:	3f66c16c 	.word	0x3f66c16c
 800a760:	5555553e 	.word	0x5555553e
 800a764:	3fc55555 	.word	0x3fc55555
 800a768:	3fe00000 	.word	0x3fe00000
 800a76c:	fff00000 	.word	0xfff00000
 800a770:	3ff00000 	.word	0x3ff00000
 800a774:	4090cbff 	.word	0x4090cbff
 800a778:	3f6f3400 	.word	0x3f6f3400
 800a77c:	652b82fe 	.word	0x652b82fe
 800a780:	3c971547 	.word	0x3c971547
 800a784:	00000000 	.word	0x00000000

0800a788 <__ieee754_rem_pio2>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	ed2d 8b02 	vpush	{d8}
 800a790:	ec55 4b10 	vmov	r4, r5, d0
 800a794:	4bca      	ldr	r3, [pc, #808]	; (800aac0 <__ieee754_rem_pio2+0x338>)
 800a796:	b08b      	sub	sp, #44	; 0x2c
 800a798:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a79c:	4598      	cmp	r8, r3
 800a79e:	4682      	mov	sl, r0
 800a7a0:	9502      	str	r5, [sp, #8]
 800a7a2:	dc08      	bgt.n	800a7b6 <__ieee754_rem_pio2+0x2e>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	ed80 0b00 	vstr	d0, [r0]
 800a7ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a7b0:	f04f 0b00 	mov.w	fp, #0
 800a7b4:	e028      	b.n	800a808 <__ieee754_rem_pio2+0x80>
 800a7b6:	4bc3      	ldr	r3, [pc, #780]	; (800aac4 <__ieee754_rem_pio2+0x33c>)
 800a7b8:	4598      	cmp	r8, r3
 800a7ba:	dc78      	bgt.n	800a8ae <__ieee754_rem_pio2+0x126>
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	4ec2      	ldr	r6, [pc, #776]	; (800aac8 <__ieee754_rem_pio2+0x340>)
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	ee10 0a10 	vmov	r0, s0
 800a7c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x300>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	dd39      	ble.n	800a844 <__ieee754_rem_pio2+0xbc>
 800a7d0:	f7f5 fd06 	bl	80001e0 <__aeabi_dsub>
 800a7d4:	45b0      	cmp	r8, r6
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	d01b      	beq.n	800a814 <__ieee754_rem_pio2+0x8c>
 800a7dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x308>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 fcfd 	bl	80001e0 <__aeabi_dsub>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	e9ca 2300 	strd	r2, r3, [sl]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f5 fcf5 	bl	80001e0 <__aeabi_dsub>
 800a7f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x308>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fcf0 	bl	80001e0 <__aeabi_dsub>
 800a800:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a804:	f04f 0b01 	mov.w	fp, #1
 800a808:	4658      	mov	r0, fp
 800a80a:	b00b      	add	sp, #44	; 0x2c
 800a80c:	ecbd 8b02 	vpop	{d8}
 800a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a814:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x310>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 fce1 	bl	80001e0 <__aeabi_dsub>
 800a81e:	a3a0      	add	r3, pc, #640	; (adr r3, 800aaa0 <__ieee754_rem_pio2+0x318>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	4604      	mov	r4, r0
 800a826:	460d      	mov	r5, r1
 800a828:	f7f5 fcda 	bl	80001e0 <__aeabi_dsub>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	e9ca 2300 	strd	r2, r3, [sl]
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fcd2 	bl	80001e0 <__aeabi_dsub>
 800a83c:	a398      	add	r3, pc, #608	; (adr r3, 800aaa0 <__ieee754_rem_pio2+0x318>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	e7db      	b.n	800a7fc <__ieee754_rem_pio2+0x74>
 800a844:	f7f5 fcce 	bl	80001e4 <__adddf3>
 800a848:	45b0      	cmp	r8, r6
 800a84a:	4604      	mov	r4, r0
 800a84c:	460d      	mov	r5, r1
 800a84e:	d016      	beq.n	800a87e <__ieee754_rem_pio2+0xf6>
 800a850:	a38f      	add	r3, pc, #572	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x308>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 fcc5 	bl	80001e4 <__adddf3>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	e9ca 2300 	strd	r2, r3, [sl]
 800a862:	4620      	mov	r0, r4
 800a864:	4629      	mov	r1, r5
 800a866:	f7f5 fcbb 	bl	80001e0 <__aeabi_dsub>
 800a86a:	a389      	add	r3, pc, #548	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x308>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fcb8 	bl	80001e4 <__adddf3>
 800a874:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a878:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a87c:	e7c4      	b.n	800a808 <__ieee754_rem_pio2+0x80>
 800a87e:	a386      	add	r3, pc, #536	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x310>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f7f5 fcae 	bl	80001e4 <__adddf3>
 800a888:	a385      	add	r3, pc, #532	; (adr r3, 800aaa0 <__ieee754_rem_pio2+0x318>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	4604      	mov	r4, r0
 800a890:	460d      	mov	r5, r1
 800a892:	f7f5 fca7 	bl	80001e4 <__adddf3>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	e9ca 2300 	strd	r2, r3, [sl]
 800a89e:	4620      	mov	r0, r4
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7f5 fc9d 	bl	80001e0 <__aeabi_dsub>
 800a8a6:	a37e      	add	r3, pc, #504	; (adr r3, 800aaa0 <__ieee754_rem_pio2+0x318>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	e7e0      	b.n	800a870 <__ieee754_rem_pio2+0xe8>
 800a8ae:	4b87      	ldr	r3, [pc, #540]	; (800aacc <__ieee754_rem_pio2+0x344>)
 800a8b0:	4598      	cmp	r8, r3
 800a8b2:	f300 80d8 	bgt.w	800aa66 <__ieee754_rem_pio2+0x2de>
 800a8b6:	f000 f96d 	bl	800ab94 <fabs>
 800a8ba:	ec55 4b10 	vmov	r4, r5, d0
 800a8be:	ee10 0a10 	vmov	r0, s0
 800a8c2:	a379      	add	r3, pc, #484	; (adr r3, 800aaa8 <__ieee754_rem_pio2+0x320>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	f7f5 fe41 	bl	8000550 <__aeabi_dmul>
 800a8ce:	4b80      	ldr	r3, [pc, #512]	; (800aad0 <__ieee754_rem_pio2+0x348>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f7f5 fc87 	bl	80001e4 <__adddf3>
 800a8d6:	f7f6 f8eb 	bl	8000ab0 <__aeabi_d2iz>
 800a8da:	4683      	mov	fp, r0
 800a8dc:	f7f5 fdce 	bl	800047c <__aeabi_i2d>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	ec43 2b18 	vmov	d8, r2, r3
 800a8e8:	a367      	add	r3, pc, #412	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x300>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	f7f5 fe2f 	bl	8000550 <__aeabi_dmul>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f5 fc71 	bl	80001e0 <__aeabi_dsub>
 800a8fe:	a364      	add	r3, pc, #400	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x308>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	4606      	mov	r6, r0
 800a906:	460f      	mov	r7, r1
 800a908:	ec51 0b18 	vmov	r0, r1, d8
 800a90c:	f7f5 fe20 	bl	8000550 <__aeabi_dmul>
 800a910:	f1bb 0f1f 	cmp.w	fp, #31
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	dc0d      	bgt.n	800a936 <__ieee754_rem_pio2+0x1ae>
 800a91a:	4b6e      	ldr	r3, [pc, #440]	; (800aad4 <__ieee754_rem_pio2+0x34c>)
 800a91c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a924:	4543      	cmp	r3, r8
 800a926:	d006      	beq.n	800a936 <__ieee754_rem_pio2+0x1ae>
 800a928:	4622      	mov	r2, r4
 800a92a:	462b      	mov	r3, r5
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 fc56 	bl	80001e0 <__aeabi_dsub>
 800a934:	e00e      	b.n	800a954 <__ieee754_rem_pio2+0x1cc>
 800a936:	462b      	mov	r3, r5
 800a938:	4622      	mov	r2, r4
 800a93a:	4630      	mov	r0, r6
 800a93c:	4639      	mov	r1, r7
 800a93e:	f7f5 fc4f 	bl	80001e0 <__aeabi_dsub>
 800a942:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a94c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a950:	2b10      	cmp	r3, #16
 800a952:	dc02      	bgt.n	800a95a <__ieee754_rem_pio2+0x1d2>
 800a954:	e9ca 0100 	strd	r0, r1, [sl]
 800a958:	e039      	b.n	800a9ce <__ieee754_rem_pio2+0x246>
 800a95a:	a34f      	add	r3, pc, #316	; (adr r3, 800aa98 <__ieee754_rem_pio2+0x310>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	ec51 0b18 	vmov	r0, r1, d8
 800a964:	f7f5 fdf4 	bl	8000550 <__aeabi_dmul>
 800a968:	4604      	mov	r4, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f5 fc34 	bl	80001e0 <__aeabi_dsub>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4680      	mov	r8, r0
 800a97e:	4689      	mov	r9, r1
 800a980:	4630      	mov	r0, r6
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 fc2c 	bl	80001e0 <__aeabi_dsub>
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	f7f5 fc28 	bl	80001e0 <__aeabi_dsub>
 800a990:	a343      	add	r3, pc, #268	; (adr r3, 800aaa0 <__ieee754_rem_pio2+0x318>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	4604      	mov	r4, r0
 800a998:	460d      	mov	r5, r1
 800a99a:	ec51 0b18 	vmov	r0, r1, d8
 800a99e:	f7f5 fdd7 	bl	8000550 <__aeabi_dmul>
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	f7f5 fc1b 	bl	80001e0 <__aeabi_dsub>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	f7f5 fc13 	bl	80001e0 <__aeabi_dsub>
 800a9ba:	9a03      	ldr	r2, [sp, #12]
 800a9bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b31      	cmp	r3, #49	; 0x31
 800a9c4:	dc24      	bgt.n	800aa10 <__ieee754_rem_pio2+0x288>
 800a9c6:	e9ca 0100 	strd	r0, r1, [sl]
 800a9ca:	4646      	mov	r6, r8
 800a9cc:	464f      	mov	r7, r9
 800a9ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f7f5 fc01 	bl	80001e0 <__aeabi_dsub>
 800a9de:	462b      	mov	r3, r5
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	f7f5 fbfd 	bl	80001e0 <__aeabi_dsub>
 800a9e6:	9b02      	ldr	r3, [sp, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9ee:	f6bf af0b 	bge.w	800a808 <__ieee754_rem_pio2+0x80>
 800a9f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a9f6:	f8ca 3004 	str.w	r3, [sl, #4]
 800a9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9fe:	f8ca 8000 	str.w	r8, [sl]
 800aa02:	f8ca 0008 	str.w	r0, [sl, #8]
 800aa06:	f8ca 300c 	str.w	r3, [sl, #12]
 800aa0a:	f1cb 0b00 	rsb	fp, fp, #0
 800aa0e:	e6fb      	b.n	800a808 <__ieee754_rem_pio2+0x80>
 800aa10:	a327      	add	r3, pc, #156	; (adr r3, 800aab0 <__ieee754_rem_pio2+0x328>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	ec51 0b18 	vmov	r0, r1, d8
 800aa1a:	f7f5 fd99 	bl	8000550 <__aeabi_dmul>
 800aa1e:	4604      	mov	r4, r0
 800aa20:	460d      	mov	r5, r1
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4640      	mov	r0, r8
 800aa28:	4649      	mov	r1, r9
 800aa2a:	f7f5 fbd9 	bl	80001e0 <__aeabi_dsub>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4606      	mov	r6, r0
 800aa34:	460f      	mov	r7, r1
 800aa36:	4640      	mov	r0, r8
 800aa38:	4649      	mov	r1, r9
 800aa3a:	f7f5 fbd1 	bl	80001e0 <__aeabi_dsub>
 800aa3e:	4622      	mov	r2, r4
 800aa40:	462b      	mov	r3, r5
 800aa42:	f7f5 fbcd 	bl	80001e0 <__aeabi_dsub>
 800aa46:	a31c      	add	r3, pc, #112	; (adr r3, 800aab8 <__ieee754_rem_pio2+0x330>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	460d      	mov	r5, r1
 800aa50:	ec51 0b18 	vmov	r0, r1, d8
 800aa54:	f7f5 fd7c 	bl	8000550 <__aeabi_dmul>
 800aa58:	4622      	mov	r2, r4
 800aa5a:	462b      	mov	r3, r5
 800aa5c:	f7f5 fbc0 	bl	80001e0 <__aeabi_dsub>
 800aa60:	4604      	mov	r4, r0
 800aa62:	460d      	mov	r5, r1
 800aa64:	e760      	b.n	800a928 <__ieee754_rem_pio2+0x1a0>
 800aa66:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <__ieee754_rem_pio2+0x350>)
 800aa68:	4598      	cmp	r8, r3
 800aa6a:	dd37      	ble.n	800aadc <__ieee754_rem_pio2+0x354>
 800aa6c:	ee10 2a10 	vmov	r2, s0
 800aa70:	462b      	mov	r3, r5
 800aa72:	4620      	mov	r0, r4
 800aa74:	4629      	mov	r1, r5
 800aa76:	f7f5 fbb3 	bl	80001e0 <__aeabi_dsub>
 800aa7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa7e:	e9ca 0100 	strd	r0, r1, [sl]
 800aa82:	e695      	b.n	800a7b0 <__ieee754_rem_pio2+0x28>
 800aa84:	f3af 8000 	nop.w
 800aa88:	54400000 	.word	0x54400000
 800aa8c:	3ff921fb 	.word	0x3ff921fb
 800aa90:	1a626331 	.word	0x1a626331
 800aa94:	3dd0b461 	.word	0x3dd0b461
 800aa98:	1a600000 	.word	0x1a600000
 800aa9c:	3dd0b461 	.word	0x3dd0b461
 800aaa0:	2e037073 	.word	0x2e037073
 800aaa4:	3ba3198a 	.word	0x3ba3198a
 800aaa8:	6dc9c883 	.word	0x6dc9c883
 800aaac:	3fe45f30 	.word	0x3fe45f30
 800aab0:	2e000000 	.word	0x2e000000
 800aab4:	3ba3198a 	.word	0x3ba3198a
 800aab8:	252049c1 	.word	0x252049c1
 800aabc:	397b839a 	.word	0x397b839a
 800aac0:	3fe921fb 	.word	0x3fe921fb
 800aac4:	4002d97b 	.word	0x4002d97b
 800aac8:	3ff921fb 	.word	0x3ff921fb
 800aacc:	413921fb 	.word	0x413921fb
 800aad0:	3fe00000 	.word	0x3fe00000
 800aad4:	08021068 	.word	0x08021068
 800aad8:	7fefffff 	.word	0x7fefffff
 800aadc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800aae0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800aae4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800aae8:	4620      	mov	r0, r4
 800aaea:	460d      	mov	r5, r1
 800aaec:	f7f5 ffe0 	bl	8000ab0 <__aeabi_d2iz>
 800aaf0:	f7f5 fcc4 	bl	800047c <__aeabi_i2d>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab00:	f7f5 fb6e 	bl	80001e0 <__aeabi_dsub>
 800ab04:	4b21      	ldr	r3, [pc, #132]	; (800ab8c <__ieee754_rem_pio2+0x404>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	f7f5 fd22 	bl	8000550 <__aeabi_dmul>
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	4604      	mov	r4, r0
 800ab10:	f7f5 ffce 	bl	8000ab0 <__aeabi_d2iz>
 800ab14:	f7f5 fcb2 	bl	800047c <__aeabi_i2d>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	4629      	mov	r1, r5
 800ab20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab24:	f7f5 fb5c 	bl	80001e0 <__aeabi_dsub>
 800ab28:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <__ieee754_rem_pio2+0x404>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f7f5 fd10 	bl	8000550 <__aeabi_dmul>
 800ab30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab34:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ab38:	2703      	movs	r7, #3
 800ab3a:	2400      	movs	r4, #0
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800ab42:	4622      	mov	r2, r4
 800ab44:	462b      	mov	r3, r5
 800ab46:	46b9      	mov	r9, r7
 800ab48:	3f01      	subs	r7, #1
 800ab4a:	f7f5 ff69 	bl	8000a20 <__aeabi_dcmpeq>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d1f5      	bne.n	800ab3e <__ieee754_rem_pio2+0x3b6>
 800ab52:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <__ieee754_rem_pio2+0x408>)
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	2302      	movs	r3, #2
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	4651      	mov	r1, sl
 800ab60:	a804      	add	r0, sp, #16
 800ab62:	f000 f8d1 	bl	800ad08 <__kernel_rem_pio2>
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	4683      	mov	fp, r0
 800ab6c:	f6bf ae4c 	bge.w	800a808 <__ieee754_rem_pio2+0x80>
 800ab70:	e9da 2100 	ldrd	r2, r1, [sl]
 800ab74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab78:	e9ca 2300 	strd	r2, r3, [sl]
 800ab7c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ab80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab84:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ab88:	e73f      	b.n	800aa0a <__ieee754_rem_pio2+0x282>
 800ab8a:	bf00      	nop
 800ab8c:	41700000 	.word	0x41700000
 800ab90:	080210e8 	.word	0x080210e8

0800ab94 <fabs>:
 800ab94:	ec51 0b10 	vmov	r0, r1, d0
 800ab98:	ee10 2a10 	vmov	r2, s0
 800ab9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aba0:	ec43 2b10 	vmov	d0, r2, r3
 800aba4:	4770      	bx	lr
	...

0800aba8 <scalbn>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	ec55 4b10 	vmov	r4, r5, d0
 800abae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800abb2:	4606      	mov	r6, r0
 800abb4:	462b      	mov	r3, r5
 800abb6:	b999      	cbnz	r1, 800abe0 <scalbn+0x38>
 800abb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abbc:	4323      	orrs	r3, r4
 800abbe:	d03f      	beq.n	800ac40 <scalbn+0x98>
 800abc0:	4b35      	ldr	r3, [pc, #212]	; (800ac98 <scalbn+0xf0>)
 800abc2:	4629      	mov	r1, r5
 800abc4:	ee10 0a10 	vmov	r0, s0
 800abc8:	2200      	movs	r2, #0
 800abca:	f7f5 fcc1 	bl	8000550 <__aeabi_dmul>
 800abce:	4b33      	ldr	r3, [pc, #204]	; (800ac9c <scalbn+0xf4>)
 800abd0:	429e      	cmp	r6, r3
 800abd2:	4604      	mov	r4, r0
 800abd4:	460d      	mov	r5, r1
 800abd6:	da10      	bge.n	800abfa <scalbn+0x52>
 800abd8:	a327      	add	r3, pc, #156	; (adr r3, 800ac78 <scalbn+0xd0>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	e01f      	b.n	800ac20 <scalbn+0x78>
 800abe0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800abe4:	4291      	cmp	r1, r2
 800abe6:	d10c      	bne.n	800ac02 <scalbn+0x5a>
 800abe8:	ee10 2a10 	vmov	r2, s0
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 faf8 	bl	80001e4 <__adddf3>
 800abf4:	4604      	mov	r4, r0
 800abf6:	460d      	mov	r5, r1
 800abf8:	e022      	b.n	800ac40 <scalbn+0x98>
 800abfa:	460b      	mov	r3, r1
 800abfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ac00:	3936      	subs	r1, #54	; 0x36
 800ac02:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ac06:	4296      	cmp	r6, r2
 800ac08:	dd0d      	ble.n	800ac26 <scalbn+0x7e>
 800ac0a:	2d00      	cmp	r5, #0
 800ac0c:	a11c      	add	r1, pc, #112	; (adr r1, 800ac80 <scalbn+0xd8>)
 800ac0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac12:	da02      	bge.n	800ac1a <scalbn+0x72>
 800ac14:	a11c      	add	r1, pc, #112	; (adr r1, 800ac88 <scalbn+0xe0>)
 800ac16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac1a:	a319      	add	r3, pc, #100	; (adr r3, 800ac80 <scalbn+0xd8>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 fc96 	bl	8000550 <__aeabi_dmul>
 800ac24:	e7e6      	b.n	800abf4 <scalbn+0x4c>
 800ac26:	1872      	adds	r2, r6, r1
 800ac28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac2c:	428a      	cmp	r2, r1
 800ac2e:	dcec      	bgt.n	800ac0a <scalbn+0x62>
 800ac30:	2a00      	cmp	r2, #0
 800ac32:	dd08      	ble.n	800ac46 <scalbn+0x9e>
 800ac34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac40:	ec45 4b10 	vmov	d0, r4, r5
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac4a:	da08      	bge.n	800ac5e <scalbn+0xb6>
 800ac4c:	2d00      	cmp	r5, #0
 800ac4e:	a10a      	add	r1, pc, #40	; (adr r1, 800ac78 <scalbn+0xd0>)
 800ac50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac54:	dac0      	bge.n	800abd8 <scalbn+0x30>
 800ac56:	a10e      	add	r1, pc, #56	; (adr r1, 800ac90 <scalbn+0xe8>)
 800ac58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac5c:	e7bc      	b.n	800abd8 <scalbn+0x30>
 800ac5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac62:	3236      	adds	r2, #54	; 0x36
 800ac64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4b0c      	ldr	r3, [pc, #48]	; (800aca0 <scalbn+0xf8>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	e7d5      	b.n	800ac20 <scalbn+0x78>
 800ac74:	f3af 8000 	nop.w
 800ac78:	c2f8f359 	.word	0xc2f8f359
 800ac7c:	01a56e1f 	.word	0x01a56e1f
 800ac80:	8800759c 	.word	0x8800759c
 800ac84:	7e37e43c 	.word	0x7e37e43c
 800ac88:	8800759c 	.word	0x8800759c
 800ac8c:	fe37e43c 	.word	0xfe37e43c
 800ac90:	c2f8f359 	.word	0xc2f8f359
 800ac94:	81a56e1f 	.word	0x81a56e1f
 800ac98:	43500000 	.word	0x43500000
 800ac9c:	ffff3cb0 	.word	0xffff3cb0
 800aca0:	3c900000 	.word	0x3c900000

0800aca4 <with_errno>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	460d      	mov	r5, r1
 800acaa:	4616      	mov	r6, r2
 800acac:	f7fe f9f6 	bl	800909c <__errno>
 800acb0:	4629      	mov	r1, r5
 800acb2:	6006      	str	r6, [r0, #0]
 800acb4:	4620      	mov	r0, r4
 800acb6:	bd70      	pop	{r4, r5, r6, pc}

0800acb8 <xflow>:
 800acb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acba:	4614      	mov	r4, r2
 800acbc:	461d      	mov	r5, r3
 800acbe:	b108      	cbz	r0, 800acc4 <xflow+0xc>
 800acc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acc4:	e9cd 2300 	strd	r2, r3, [sp]
 800acc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fc3e 	bl	8000550 <__aeabi_dmul>
 800acd4:	2222      	movs	r2, #34	; 0x22
 800acd6:	b003      	add	sp, #12
 800acd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acdc:	f7ff bfe2 	b.w	800aca4 <with_errno>

0800ace0 <__math_uflow>:
 800ace0:	b508      	push	{r3, lr}
 800ace2:	2200      	movs	r2, #0
 800ace4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ace8:	f7ff ffe6 	bl	800acb8 <xflow>
 800acec:	ec41 0b10 	vmov	d0, r0, r1
 800acf0:	bd08      	pop	{r3, pc}

0800acf2 <__math_oflow>:
 800acf2:	b508      	push	{r3, lr}
 800acf4:	2200      	movs	r2, #0
 800acf6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800acfa:	f7ff ffdd 	bl	800acb8 <xflow>
 800acfe:	ec41 0b10 	vmov	d0, r0, r1
 800ad02:	bd08      	pop	{r3, pc}
 800ad04:	0000      	movs	r0, r0
	...

0800ad08 <__kernel_rem_pio2>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	ed2d 8b02 	vpush	{d8}
 800ad10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ad14:	f112 0f14 	cmn.w	r2, #20
 800ad18:	9306      	str	r3, [sp, #24]
 800ad1a:	9104      	str	r1, [sp, #16]
 800ad1c:	4bc2      	ldr	r3, [pc, #776]	; (800b028 <__kernel_rem_pio2+0x320>)
 800ad1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ad20:	9009      	str	r0, [sp, #36]	; 0x24
 800ad22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	9b06      	ldr	r3, [sp, #24]
 800ad2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad2e:	bfa8      	it	ge
 800ad30:	1ed4      	subge	r4, r2, #3
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	bfb2      	itee	lt
 800ad36:	2400      	movlt	r4, #0
 800ad38:	2318      	movge	r3, #24
 800ad3a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ad3e:	f06f 0317 	mvn.w	r3, #23
 800ad42:	fb04 3303 	mla	r3, r4, r3, r3
 800ad46:	eb03 0a02 	add.w	sl, r3, r2
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	9a05      	ldr	r2, [sp, #20]
 800ad4e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800b018 <__kernel_rem_pio2+0x310>
 800ad52:	eb03 0802 	add.w	r8, r3, r2
 800ad56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ad58:	1aa7      	subs	r7, r4, r2
 800ad5a:	ae20      	add	r6, sp, #128	; 0x80
 800ad5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ad60:	2500      	movs	r5, #0
 800ad62:	4545      	cmp	r5, r8
 800ad64:	dd13      	ble.n	800ad8e <__kernel_rem_pio2+0x86>
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	aa20      	add	r2, sp, #128	; 0x80
 800ad6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ad6e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	9b00      	ldr	r3, [sp, #0]
 800ad78:	4598      	cmp	r8, r3
 800ad7a:	dc31      	bgt.n	800ade0 <__kernel_rem_pio2+0xd8>
 800ad7c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b018 <__kernel_rem_pio2+0x310>
 800ad80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ad84:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad88:	462f      	mov	r7, r5
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	e01b      	b.n	800adc6 <__kernel_rem_pio2+0xbe>
 800ad8e:	42ef      	cmn	r7, r5
 800ad90:	d407      	bmi.n	800ada2 <__kernel_rem_pio2+0x9a>
 800ad92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad96:	f7f5 fb71 	bl	800047c <__aeabi_i2d>
 800ad9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad9e:	3501      	adds	r5, #1
 800ada0:	e7df      	b.n	800ad62 <__kernel_rem_pio2+0x5a>
 800ada2:	ec51 0b18 	vmov	r0, r1, d8
 800ada6:	e7f8      	b.n	800ad9a <__kernel_rem_pio2+0x92>
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800adb0:	f7f5 fbce 	bl	8000550 <__aeabi_dmul>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adbc:	f7f5 fa12 	bl	80001e4 <__adddf3>
 800adc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc4:	3601      	adds	r6, #1
 800adc6:	9b05      	ldr	r3, [sp, #20]
 800adc8:	429e      	cmp	r6, r3
 800adca:	f1a7 0708 	sub.w	r7, r7, #8
 800adce:	ddeb      	ble.n	800ada8 <__kernel_rem_pio2+0xa0>
 800add0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800add4:	f108 0801 	add.w	r8, r8, #1
 800add8:	ecab 7b02 	vstmia	fp!, {d7}
 800addc:	3508      	adds	r5, #8
 800adde:	e7ca      	b.n	800ad76 <__kernel_rem_pio2+0x6e>
 800ade0:	9b00      	ldr	r3, [sp, #0]
 800ade2:	aa0c      	add	r2, sp, #48	; 0x30
 800ade4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ade8:	930b      	str	r3, [sp, #44]	; 0x2c
 800adea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800adec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adf0:	9c00      	ldr	r4, [sp, #0]
 800adf2:	930a      	str	r3, [sp, #40]	; 0x28
 800adf4:	00e3      	lsls	r3, r4, #3
 800adf6:	9308      	str	r3, [sp, #32]
 800adf8:	ab98      	add	r3, sp, #608	; 0x260
 800adfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ae02:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ae06:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ae0c:	46c3      	mov	fp, r8
 800ae0e:	46a1      	mov	r9, r4
 800ae10:	f1b9 0f00 	cmp.w	r9, #0
 800ae14:	f1a5 0508 	sub.w	r5, r5, #8
 800ae18:	dc77      	bgt.n	800af0a <__kernel_rem_pio2+0x202>
 800ae1a:	ec47 6b10 	vmov	d0, r6, r7
 800ae1e:	4650      	mov	r0, sl
 800ae20:	f7ff fec2 	bl	800aba8 <scalbn>
 800ae24:	ec57 6b10 	vmov	r6, r7, d0
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ae2e:	ee10 0a10 	vmov	r0, s0
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fb8c 	bl	8000550 <__aeabi_dmul>
 800ae38:	ec41 0b10 	vmov	d0, r0, r1
 800ae3c:	f000 fab4 	bl	800b3a8 <floor>
 800ae40:	4b7a      	ldr	r3, [pc, #488]	; (800b02c <__kernel_rem_pio2+0x324>)
 800ae42:	ec51 0b10 	vmov	r0, r1, d0
 800ae46:	2200      	movs	r2, #0
 800ae48:	f7f5 fb82 	bl	8000550 <__aeabi_dmul>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 f9c4 	bl	80001e0 <__aeabi_dsub>
 800ae58:	460f      	mov	r7, r1
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	f7f5 fe28 	bl	8000ab0 <__aeabi_d2iz>
 800ae60:	9002      	str	r0, [sp, #8]
 800ae62:	f7f5 fb0b 	bl	800047c <__aeabi_i2d>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	f7f5 f9b7 	bl	80001e0 <__aeabi_dsub>
 800ae72:	f1ba 0f00 	cmp.w	sl, #0
 800ae76:	4606      	mov	r6, r0
 800ae78:	460f      	mov	r7, r1
 800ae7a:	dd6d      	ble.n	800af58 <__kernel_rem_pio2+0x250>
 800ae7c:	1e61      	subs	r1, r4, #1
 800ae7e:	ab0c      	add	r3, sp, #48	; 0x30
 800ae80:	9d02      	ldr	r5, [sp, #8]
 800ae82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae86:	f1ca 0018 	rsb	r0, sl, #24
 800ae8a:	fa43 f200 	asr.w	r2, r3, r0
 800ae8e:	4415      	add	r5, r2
 800ae90:	4082      	lsls	r2, r0
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	aa0c      	add	r2, sp, #48	; 0x30
 800ae96:	9502      	str	r5, [sp, #8]
 800ae98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ae9c:	f1ca 0217 	rsb	r2, sl, #23
 800aea0:	fa43 fb02 	asr.w	fp, r3, r2
 800aea4:	f1bb 0f00 	cmp.w	fp, #0
 800aea8:	dd65      	ble.n	800af76 <__kernel_rem_pio2+0x26e>
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	2200      	movs	r2, #0
 800aeae:	3301      	adds	r3, #1
 800aeb0:	9302      	str	r3, [sp, #8]
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800aeb8:	4294      	cmp	r4, r2
 800aeba:	f300 809f 	bgt.w	800affc <__kernel_rem_pio2+0x2f4>
 800aebe:	f1ba 0f00 	cmp.w	sl, #0
 800aec2:	dd07      	ble.n	800aed4 <__kernel_rem_pio2+0x1cc>
 800aec4:	f1ba 0f01 	cmp.w	sl, #1
 800aec8:	f000 80c1 	beq.w	800b04e <__kernel_rem_pio2+0x346>
 800aecc:	f1ba 0f02 	cmp.w	sl, #2
 800aed0:	f000 80c7 	beq.w	800b062 <__kernel_rem_pio2+0x35a>
 800aed4:	f1bb 0f02 	cmp.w	fp, #2
 800aed8:	d14d      	bne.n	800af76 <__kernel_rem_pio2+0x26e>
 800aeda:	4632      	mov	r2, r6
 800aedc:	463b      	mov	r3, r7
 800aede:	4954      	ldr	r1, [pc, #336]	; (800b030 <__kernel_rem_pio2+0x328>)
 800aee0:	2000      	movs	r0, #0
 800aee2:	f7f5 f97d 	bl	80001e0 <__aeabi_dsub>
 800aee6:	4606      	mov	r6, r0
 800aee8:	460f      	mov	r7, r1
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	d043      	beq.n	800af76 <__kernel_rem_pio2+0x26e>
 800aeee:	4650      	mov	r0, sl
 800aef0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800b020 <__kernel_rem_pio2+0x318>
 800aef4:	f7ff fe58 	bl	800aba8 <scalbn>
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	ec53 2b10 	vmov	r2, r3, d0
 800af00:	f7f5 f96e 	bl	80001e0 <__aeabi_dsub>
 800af04:	4606      	mov	r6, r0
 800af06:	460f      	mov	r7, r1
 800af08:	e035      	b.n	800af76 <__kernel_rem_pio2+0x26e>
 800af0a:	4b4a      	ldr	r3, [pc, #296]	; (800b034 <__kernel_rem_pio2+0x32c>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	4630      	mov	r0, r6
 800af10:	4639      	mov	r1, r7
 800af12:	f7f5 fb1d 	bl	8000550 <__aeabi_dmul>
 800af16:	f7f5 fdcb 	bl	8000ab0 <__aeabi_d2iz>
 800af1a:	f7f5 faaf 	bl	800047c <__aeabi_i2d>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	ec43 2b18 	vmov	d8, r2, r3
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <__kernel_rem_pio2+0x330>)
 800af28:	2200      	movs	r2, #0
 800af2a:	f7f5 fb11 	bl	8000550 <__aeabi_dmul>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4630      	mov	r0, r6
 800af34:	4639      	mov	r1, r7
 800af36:	f7f5 f953 	bl	80001e0 <__aeabi_dsub>
 800af3a:	f7f5 fdb9 	bl	8000ab0 <__aeabi_d2iz>
 800af3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af42:	f84b 0b04 	str.w	r0, [fp], #4
 800af46:	ec51 0b18 	vmov	r0, r1, d8
 800af4a:	f7f5 f94b 	bl	80001e4 <__adddf3>
 800af4e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800af52:	4606      	mov	r6, r0
 800af54:	460f      	mov	r7, r1
 800af56:	e75b      	b.n	800ae10 <__kernel_rem_pio2+0x108>
 800af58:	d106      	bne.n	800af68 <__kernel_rem_pio2+0x260>
 800af5a:	1e63      	subs	r3, r4, #1
 800af5c:	aa0c      	add	r2, sp, #48	; 0x30
 800af5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af62:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800af66:	e79d      	b.n	800aea4 <__kernel_rem_pio2+0x19c>
 800af68:	4b34      	ldr	r3, [pc, #208]	; (800b03c <__kernel_rem_pio2+0x334>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	f7f5 fd76 	bl	8000a5c <__aeabi_dcmpge>
 800af70:	2800      	cmp	r0, #0
 800af72:	d140      	bne.n	800aff6 <__kernel_rem_pio2+0x2ee>
 800af74:	4683      	mov	fp, r0
 800af76:	2200      	movs	r2, #0
 800af78:	2300      	movs	r3, #0
 800af7a:	4630      	mov	r0, r6
 800af7c:	4639      	mov	r1, r7
 800af7e:	f7f5 fd4f 	bl	8000a20 <__aeabi_dcmpeq>
 800af82:	2800      	cmp	r0, #0
 800af84:	f000 80c1 	beq.w	800b10a <__kernel_rem_pio2+0x402>
 800af88:	1e65      	subs	r5, r4, #1
 800af8a:	462b      	mov	r3, r5
 800af8c:	2200      	movs	r2, #0
 800af8e:	9900      	ldr	r1, [sp, #0]
 800af90:	428b      	cmp	r3, r1
 800af92:	da6d      	bge.n	800b070 <__kernel_rem_pio2+0x368>
 800af94:	2a00      	cmp	r2, #0
 800af96:	f000 808a 	beq.w	800b0ae <__kernel_rem_pio2+0x3a6>
 800af9a:	ab0c      	add	r3, sp, #48	; 0x30
 800af9c:	f1aa 0a18 	sub.w	sl, sl, #24
 800afa0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 80ae 	beq.w	800b106 <__kernel_rem_pio2+0x3fe>
 800afaa:	4650      	mov	r0, sl
 800afac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800b020 <__kernel_rem_pio2+0x318>
 800afb0:	f7ff fdfa 	bl	800aba8 <scalbn>
 800afb4:	1c6b      	adds	r3, r5, #1
 800afb6:	00da      	lsls	r2, r3, #3
 800afb8:	9205      	str	r2, [sp, #20]
 800afba:	ec57 6b10 	vmov	r6, r7, d0
 800afbe:	aa70      	add	r2, sp, #448	; 0x1c0
 800afc0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800b034 <__kernel_rem_pio2+0x32c>
 800afc4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800afc8:	462c      	mov	r4, r5
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	2c00      	cmp	r4, #0
 800afd0:	f280 80d4 	bge.w	800b17c <__kernel_rem_pio2+0x474>
 800afd4:	462c      	mov	r4, r5
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	f2c0 8102 	blt.w	800b1e0 <__kernel_rem_pio2+0x4d8>
 800afdc:	4b18      	ldr	r3, [pc, #96]	; (800b040 <__kernel_rem_pio2+0x338>)
 800afde:	461e      	mov	r6, r3
 800afe0:	ab70      	add	r3, sp, #448	; 0x1c0
 800afe2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800afe6:	1b2b      	subs	r3, r5, r4
 800afe8:	f04f 0900 	mov.w	r9, #0
 800afec:	f04f 0a00 	mov.w	sl, #0
 800aff0:	2700      	movs	r7, #0
 800aff2:	9306      	str	r3, [sp, #24]
 800aff4:	e0e6      	b.n	800b1c4 <__kernel_rem_pio2+0x4bc>
 800aff6:	f04f 0b02 	mov.w	fp, #2
 800affa:	e756      	b.n	800aeaa <__kernel_rem_pio2+0x1a2>
 800affc:	f8d8 3000 	ldr.w	r3, [r8]
 800b000:	bb05      	cbnz	r5, 800b044 <__kernel_rem_pio2+0x33c>
 800b002:	b123      	cbz	r3, 800b00e <__kernel_rem_pio2+0x306>
 800b004:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b008:	f8c8 3000 	str.w	r3, [r8]
 800b00c:	2301      	movs	r3, #1
 800b00e:	3201      	adds	r2, #1
 800b010:	f108 0804 	add.w	r8, r8, #4
 800b014:	461d      	mov	r5, r3
 800b016:	e74f      	b.n	800aeb8 <__kernel_rem_pio2+0x1b0>
	...
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	08021230 	.word	0x08021230
 800b02c:	40200000 	.word	0x40200000
 800b030:	3ff00000 	.word	0x3ff00000
 800b034:	3e700000 	.word	0x3e700000
 800b038:	41700000 	.word	0x41700000
 800b03c:	3fe00000 	.word	0x3fe00000
 800b040:	080211f0 	.word	0x080211f0
 800b044:	1acb      	subs	r3, r1, r3
 800b046:	f8c8 3000 	str.w	r3, [r8]
 800b04a:	462b      	mov	r3, r5
 800b04c:	e7df      	b.n	800b00e <__kernel_rem_pio2+0x306>
 800b04e:	1e62      	subs	r2, r4, #1
 800b050:	ab0c      	add	r3, sp, #48	; 0x30
 800b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b056:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b05a:	a90c      	add	r1, sp, #48	; 0x30
 800b05c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b060:	e738      	b.n	800aed4 <__kernel_rem_pio2+0x1cc>
 800b062:	1e62      	subs	r2, r4, #1
 800b064:	ab0c      	add	r3, sp, #48	; 0x30
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b06e:	e7f4      	b.n	800b05a <__kernel_rem_pio2+0x352>
 800b070:	a90c      	add	r1, sp, #48	; 0x30
 800b072:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b076:	3b01      	subs	r3, #1
 800b078:	430a      	orrs	r2, r1
 800b07a:	e788      	b.n	800af8e <__kernel_rem_pio2+0x286>
 800b07c:	3301      	adds	r3, #1
 800b07e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b082:	2900      	cmp	r1, #0
 800b084:	d0fa      	beq.n	800b07c <__kernel_rem_pio2+0x374>
 800b086:	9a08      	ldr	r2, [sp, #32]
 800b088:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800b08c:	446a      	add	r2, sp
 800b08e:	3a98      	subs	r2, #152	; 0x98
 800b090:	9208      	str	r2, [sp, #32]
 800b092:	9a06      	ldr	r2, [sp, #24]
 800b094:	a920      	add	r1, sp, #128	; 0x80
 800b096:	18a2      	adds	r2, r4, r2
 800b098:	18e3      	adds	r3, r4, r3
 800b09a:	f104 0801 	add.w	r8, r4, #1
 800b09e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b0a2:	9302      	str	r3, [sp, #8]
 800b0a4:	9b02      	ldr	r3, [sp, #8]
 800b0a6:	4543      	cmp	r3, r8
 800b0a8:	da04      	bge.n	800b0b4 <__kernel_rem_pio2+0x3ac>
 800b0aa:	461c      	mov	r4, r3
 800b0ac:	e6a2      	b.n	800adf4 <__kernel_rem_pio2+0xec>
 800b0ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e7e4      	b.n	800b07e <__kernel_rem_pio2+0x376>
 800b0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b0ba:	f7f5 f9df 	bl	800047c <__aeabi_i2d>
 800b0be:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c4:	46ab      	mov	fp, r5
 800b0c6:	461c      	mov	r4, r3
 800b0c8:	f04f 0900 	mov.w	r9, #0
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	2700      	movs	r7, #0
 800b0d0:	9b05      	ldr	r3, [sp, #20]
 800b0d2:	4599      	cmp	r9, r3
 800b0d4:	dd06      	ble.n	800b0e4 <__kernel_rem_pio2+0x3dc>
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b0dc:	f108 0801 	add.w	r8, r8, #1
 800b0e0:	9308      	str	r3, [sp, #32]
 800b0e2:	e7df      	b.n	800b0a4 <__kernel_rem_pio2+0x39c>
 800b0e4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b0e8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b0ec:	f7f5 fa30 	bl	8000550 <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	f7f5 f874 	bl	80001e4 <__adddf3>
 800b0fc:	f109 0901 	add.w	r9, r9, #1
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	e7e4      	b.n	800b0d0 <__kernel_rem_pio2+0x3c8>
 800b106:	3d01      	subs	r5, #1
 800b108:	e747      	b.n	800af9a <__kernel_rem_pio2+0x292>
 800b10a:	ec47 6b10 	vmov	d0, r6, r7
 800b10e:	f1ca 0000 	rsb	r0, sl, #0
 800b112:	f7ff fd49 	bl	800aba8 <scalbn>
 800b116:	ec57 6b10 	vmov	r6, r7, d0
 800b11a:	4ba0      	ldr	r3, [pc, #640]	; (800b39c <__kernel_rem_pio2+0x694>)
 800b11c:	ee10 0a10 	vmov	r0, s0
 800b120:	2200      	movs	r2, #0
 800b122:	4639      	mov	r1, r7
 800b124:	f7f5 fc9a 	bl	8000a5c <__aeabi_dcmpge>
 800b128:	b1f8      	cbz	r0, 800b16a <__kernel_rem_pio2+0x462>
 800b12a:	4b9d      	ldr	r3, [pc, #628]	; (800b3a0 <__kernel_rem_pio2+0x698>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	4630      	mov	r0, r6
 800b130:	4639      	mov	r1, r7
 800b132:	f7f5 fa0d 	bl	8000550 <__aeabi_dmul>
 800b136:	f7f5 fcbb 	bl	8000ab0 <__aeabi_d2iz>
 800b13a:	4680      	mov	r8, r0
 800b13c:	f7f5 f99e 	bl	800047c <__aeabi_i2d>
 800b140:	4b96      	ldr	r3, [pc, #600]	; (800b39c <__kernel_rem_pio2+0x694>)
 800b142:	2200      	movs	r2, #0
 800b144:	f7f5 fa04 	bl	8000550 <__aeabi_dmul>
 800b148:	460b      	mov	r3, r1
 800b14a:	4602      	mov	r2, r0
 800b14c:	4639      	mov	r1, r7
 800b14e:	4630      	mov	r0, r6
 800b150:	f7f5 f846 	bl	80001e0 <__aeabi_dsub>
 800b154:	f7f5 fcac 	bl	8000ab0 <__aeabi_d2iz>
 800b158:	1c65      	adds	r5, r4, #1
 800b15a:	ab0c      	add	r3, sp, #48	; 0x30
 800b15c:	f10a 0a18 	add.w	sl, sl, #24
 800b160:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b164:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b168:	e71f      	b.n	800afaa <__kernel_rem_pio2+0x2a2>
 800b16a:	4630      	mov	r0, r6
 800b16c:	4639      	mov	r1, r7
 800b16e:	f7f5 fc9f 	bl	8000ab0 <__aeabi_d2iz>
 800b172:	ab0c      	add	r3, sp, #48	; 0x30
 800b174:	4625      	mov	r5, r4
 800b176:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b17a:	e716      	b.n	800afaa <__kernel_rem_pio2+0x2a2>
 800b17c:	ab0c      	add	r3, sp, #48	; 0x30
 800b17e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b182:	f7f5 f97b 	bl	800047c <__aeabi_i2d>
 800b186:	4632      	mov	r2, r6
 800b188:	463b      	mov	r3, r7
 800b18a:	f7f5 f9e1 	bl	8000550 <__aeabi_dmul>
 800b18e:	4642      	mov	r2, r8
 800b190:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b194:	464b      	mov	r3, r9
 800b196:	4630      	mov	r0, r6
 800b198:	4639      	mov	r1, r7
 800b19a:	f7f5 f9d9 	bl	8000550 <__aeabi_dmul>
 800b19e:	3c01      	subs	r4, #1
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	460f      	mov	r7, r1
 800b1a4:	e713      	b.n	800afce <__kernel_rem_pio2+0x2c6>
 800b1a6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b1aa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800b1ae:	f7f5 f9cf 	bl	8000550 <__aeabi_dmul>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4648      	mov	r0, r9
 800b1b8:	4651      	mov	r1, sl
 800b1ba:	f7f5 f813 	bl	80001e4 <__adddf3>
 800b1be:	3701      	adds	r7, #1
 800b1c0:	4681      	mov	r9, r0
 800b1c2:	468a      	mov	sl, r1
 800b1c4:	9b00      	ldr	r3, [sp, #0]
 800b1c6:	429f      	cmp	r7, r3
 800b1c8:	dc02      	bgt.n	800b1d0 <__kernel_rem_pio2+0x4c8>
 800b1ca:	9b06      	ldr	r3, [sp, #24]
 800b1cc:	429f      	cmp	r7, r3
 800b1ce:	ddea      	ble.n	800b1a6 <__kernel_rem_pio2+0x49e>
 800b1d0:	9a06      	ldr	r2, [sp, #24]
 800b1d2:	ab48      	add	r3, sp, #288	; 0x120
 800b1d4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800b1d8:	e9c6 9a00 	strd	r9, sl, [r6]
 800b1dc:	3c01      	subs	r4, #1
 800b1de:	e6fa      	b.n	800afd6 <__kernel_rem_pio2+0x2ce>
 800b1e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	dc0b      	bgt.n	800b1fe <__kernel_rem_pio2+0x4f6>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dc39      	bgt.n	800b25e <__kernel_rem_pio2+0x556>
 800b1ea:	d05d      	beq.n	800b2a8 <__kernel_rem_pio2+0x5a0>
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	f003 0007 	and.w	r0, r3, #7
 800b1f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b1f6:	ecbd 8b02 	vpop	{d8}
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b200:	2b03      	cmp	r3, #3
 800b202:	d1f3      	bne.n	800b1ec <__kernel_rem_pio2+0x4e4>
 800b204:	9b05      	ldr	r3, [sp, #20]
 800b206:	9500      	str	r5, [sp, #0]
 800b208:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b20c:	eb0d 0403 	add.w	r4, sp, r3
 800b210:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800b214:	46a2      	mov	sl, r4
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f1aa 0a08 	sub.w	sl, sl, #8
 800b21e:	dc69      	bgt.n	800b2f4 <__kernel_rem_pio2+0x5ec>
 800b220:	46aa      	mov	sl, r5
 800b222:	f1ba 0f01 	cmp.w	sl, #1
 800b226:	f1a4 0408 	sub.w	r4, r4, #8
 800b22a:	f300 8083 	bgt.w	800b334 <__kernel_rem_pio2+0x62c>
 800b22e:	9c05      	ldr	r4, [sp, #20]
 800b230:	ab48      	add	r3, sp, #288	; 0x120
 800b232:	441c      	add	r4, r3
 800b234:	2000      	movs	r0, #0
 800b236:	2100      	movs	r1, #0
 800b238:	2d01      	cmp	r5, #1
 800b23a:	f300 809a 	bgt.w	800b372 <__kernel_rem_pio2+0x66a>
 800b23e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800b242:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b246:	f1bb 0f00 	cmp.w	fp, #0
 800b24a:	f040 8098 	bne.w	800b37e <__kernel_rem_pio2+0x676>
 800b24e:	9b04      	ldr	r3, [sp, #16]
 800b250:	e9c3 7800 	strd	r7, r8, [r3]
 800b254:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b258:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b25c:	e7c6      	b.n	800b1ec <__kernel_rem_pio2+0x4e4>
 800b25e:	9e05      	ldr	r6, [sp, #20]
 800b260:	ab48      	add	r3, sp, #288	; 0x120
 800b262:	441e      	add	r6, r3
 800b264:	462c      	mov	r4, r5
 800b266:	2000      	movs	r0, #0
 800b268:	2100      	movs	r1, #0
 800b26a:	2c00      	cmp	r4, #0
 800b26c:	da33      	bge.n	800b2d6 <__kernel_rem_pio2+0x5ce>
 800b26e:	f1bb 0f00 	cmp.w	fp, #0
 800b272:	d036      	beq.n	800b2e2 <__kernel_rem_pio2+0x5da>
 800b274:	4602      	mov	r2, r0
 800b276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b27a:	9c04      	ldr	r4, [sp, #16]
 800b27c:	e9c4 2300 	strd	r2, r3, [r4]
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b288:	f7f4 ffaa 	bl	80001e0 <__aeabi_dsub>
 800b28c:	ae4a      	add	r6, sp, #296	; 0x128
 800b28e:	2401      	movs	r4, #1
 800b290:	42a5      	cmp	r5, r4
 800b292:	da29      	bge.n	800b2e8 <__kernel_rem_pio2+0x5e0>
 800b294:	f1bb 0f00 	cmp.w	fp, #0
 800b298:	d002      	beq.n	800b2a0 <__kernel_rem_pio2+0x598>
 800b29a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b29e:	4619      	mov	r1, r3
 800b2a0:	9b04      	ldr	r3, [sp, #16]
 800b2a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b2a6:	e7a1      	b.n	800b1ec <__kernel_rem_pio2+0x4e4>
 800b2a8:	9c05      	ldr	r4, [sp, #20]
 800b2aa:	ab48      	add	r3, sp, #288	; 0x120
 800b2ac:	441c      	add	r4, r3
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	da09      	bge.n	800b2ca <__kernel_rem_pio2+0x5c2>
 800b2b6:	f1bb 0f00 	cmp.w	fp, #0
 800b2ba:	d002      	beq.n	800b2c2 <__kernel_rem_pio2+0x5ba>
 800b2bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	e9c3 0100 	strd	r0, r1, [r3]
 800b2c8:	e790      	b.n	800b1ec <__kernel_rem_pio2+0x4e4>
 800b2ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2ce:	f7f4 ff89 	bl	80001e4 <__adddf3>
 800b2d2:	3d01      	subs	r5, #1
 800b2d4:	e7ed      	b.n	800b2b2 <__kernel_rem_pio2+0x5aa>
 800b2d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b2da:	f7f4 ff83 	bl	80001e4 <__adddf3>
 800b2de:	3c01      	subs	r4, #1
 800b2e0:	e7c3      	b.n	800b26a <__kernel_rem_pio2+0x562>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	e7c8      	b.n	800b27a <__kernel_rem_pio2+0x572>
 800b2e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b2ec:	f7f4 ff7a 	bl	80001e4 <__adddf3>
 800b2f0:	3401      	adds	r4, #1
 800b2f2:	e7cd      	b.n	800b290 <__kernel_rem_pio2+0x588>
 800b2f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	4632      	mov	r2, r6
 800b304:	463b      	mov	r3, r7
 800b306:	4640      	mov	r0, r8
 800b308:	4649      	mov	r1, r9
 800b30a:	f7f4 ff6b 	bl	80001e4 <__adddf3>
 800b30e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4640      	mov	r0, r8
 800b318:	4649      	mov	r1, r9
 800b31a:	f7f4 ff61 	bl	80001e0 <__aeabi_dsub>
 800b31e:	4632      	mov	r2, r6
 800b320:	463b      	mov	r3, r7
 800b322:	f7f4 ff5f 	bl	80001e4 <__adddf3>
 800b326:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b32a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b32e:	ed8a 7b00 	vstr	d7, [sl]
 800b332:	e770      	b.n	800b216 <__kernel_rem_pio2+0x50e>
 800b334:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b338:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b33c:	4640      	mov	r0, r8
 800b33e:	4632      	mov	r2, r6
 800b340:	463b      	mov	r3, r7
 800b342:	4649      	mov	r1, r9
 800b344:	f7f4 ff4e 	bl	80001e4 <__adddf3>
 800b348:	e9cd 0100 	strd	r0, r1, [sp]
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4640      	mov	r0, r8
 800b352:	4649      	mov	r1, r9
 800b354:	f7f4 ff44 	bl	80001e0 <__aeabi_dsub>
 800b358:	4632      	mov	r2, r6
 800b35a:	463b      	mov	r3, r7
 800b35c:	f7f4 ff42 	bl	80001e4 <__adddf3>
 800b360:	ed9d 7b00 	vldr	d7, [sp]
 800b364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b368:	ed84 7b00 	vstr	d7, [r4]
 800b36c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b370:	e757      	b.n	800b222 <__kernel_rem_pio2+0x51a>
 800b372:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b376:	f7f4 ff35 	bl	80001e4 <__adddf3>
 800b37a:	3d01      	subs	r5, #1
 800b37c:	e75c      	b.n	800b238 <__kernel_rem_pio2+0x530>
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	9a04      	ldr	r2, [sp, #16]
 800b382:	601f      	str	r7, [r3, #0]
 800b384:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b388:	605c      	str	r4, [r3, #4]
 800b38a:	609d      	str	r5, [r3, #8]
 800b38c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b390:	60d3      	str	r3, [r2, #12]
 800b392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b396:	6110      	str	r0, [r2, #16]
 800b398:	6153      	str	r3, [r2, #20]
 800b39a:	e727      	b.n	800b1ec <__kernel_rem_pio2+0x4e4>
 800b39c:	41700000 	.word	0x41700000
 800b3a0:	3e700000 	.word	0x3e700000
 800b3a4:	00000000 	.word	0x00000000

0800b3a8 <floor>:
 800b3a8:	ec51 0b10 	vmov	r0, r1, d0
 800b3ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b3b8:	2e13      	cmp	r6, #19
 800b3ba:	ee10 5a10 	vmov	r5, s0
 800b3be:	ee10 8a10 	vmov	r8, s0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	dc31      	bgt.n	800b42a <floor+0x82>
 800b3c6:	2e00      	cmp	r6, #0
 800b3c8:	da14      	bge.n	800b3f4 <floor+0x4c>
 800b3ca:	a333      	add	r3, pc, #204	; (adr r3, 800b498 <floor+0xf0>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f4 ff08 	bl	80001e4 <__adddf3>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f7f5 fb4a 	bl	8000a70 <__aeabi_dcmpgt>
 800b3dc:	b138      	cbz	r0, 800b3ee <floor+0x46>
 800b3de:	2c00      	cmp	r4, #0
 800b3e0:	da53      	bge.n	800b48a <floor+0xe2>
 800b3e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b3e6:	4325      	orrs	r5, r4
 800b3e8:	d052      	beq.n	800b490 <floor+0xe8>
 800b3ea:	4c2d      	ldr	r4, [pc, #180]	; (800b4a0 <floor+0xf8>)
 800b3ec:	2500      	movs	r5, #0
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	e024      	b.n	800b43e <floor+0x96>
 800b3f4:	4f2b      	ldr	r7, [pc, #172]	; (800b4a4 <floor+0xfc>)
 800b3f6:	4137      	asrs	r7, r6
 800b3f8:	ea01 0307 	and.w	r3, r1, r7
 800b3fc:	4303      	orrs	r3, r0
 800b3fe:	d01e      	beq.n	800b43e <floor+0x96>
 800b400:	a325      	add	r3, pc, #148	; (adr r3, 800b498 <floor+0xf0>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f4 feed 	bl	80001e4 <__adddf3>
 800b40a:	2200      	movs	r2, #0
 800b40c:	2300      	movs	r3, #0
 800b40e:	f7f5 fb2f 	bl	8000a70 <__aeabi_dcmpgt>
 800b412:	2800      	cmp	r0, #0
 800b414:	d0eb      	beq.n	800b3ee <floor+0x46>
 800b416:	2c00      	cmp	r4, #0
 800b418:	bfbe      	ittt	lt
 800b41a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b41e:	4133      	asrlt	r3, r6
 800b420:	18e4      	addlt	r4, r4, r3
 800b422:	ea24 0407 	bic.w	r4, r4, r7
 800b426:	2500      	movs	r5, #0
 800b428:	e7e1      	b.n	800b3ee <floor+0x46>
 800b42a:	2e33      	cmp	r6, #51	; 0x33
 800b42c:	dd0b      	ble.n	800b446 <floor+0x9e>
 800b42e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b432:	d104      	bne.n	800b43e <floor+0x96>
 800b434:	ee10 2a10 	vmov	r2, s0
 800b438:	460b      	mov	r3, r1
 800b43a:	f7f4 fed3 	bl	80001e4 <__adddf3>
 800b43e:	ec41 0b10 	vmov	d0, r0, r1
 800b442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b446:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b44a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b44e:	40df      	lsrs	r7, r3
 800b450:	4238      	tst	r0, r7
 800b452:	d0f4      	beq.n	800b43e <floor+0x96>
 800b454:	a310      	add	r3, pc, #64	; (adr r3, 800b498 <floor+0xf0>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	f7f4 fec3 	bl	80001e4 <__adddf3>
 800b45e:	2200      	movs	r2, #0
 800b460:	2300      	movs	r3, #0
 800b462:	f7f5 fb05 	bl	8000a70 <__aeabi_dcmpgt>
 800b466:	2800      	cmp	r0, #0
 800b468:	d0c1      	beq.n	800b3ee <floor+0x46>
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	da0a      	bge.n	800b484 <floor+0xdc>
 800b46e:	2e14      	cmp	r6, #20
 800b470:	d101      	bne.n	800b476 <floor+0xce>
 800b472:	3401      	adds	r4, #1
 800b474:	e006      	b.n	800b484 <floor+0xdc>
 800b476:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b47a:	2301      	movs	r3, #1
 800b47c:	40b3      	lsls	r3, r6
 800b47e:	441d      	add	r5, r3
 800b480:	45a8      	cmp	r8, r5
 800b482:	d8f6      	bhi.n	800b472 <floor+0xca>
 800b484:	ea25 0507 	bic.w	r5, r5, r7
 800b488:	e7b1      	b.n	800b3ee <floor+0x46>
 800b48a:	2500      	movs	r5, #0
 800b48c:	462c      	mov	r4, r5
 800b48e:	e7ae      	b.n	800b3ee <floor+0x46>
 800b490:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b494:	e7ab      	b.n	800b3ee <floor+0x46>
 800b496:	bf00      	nop
 800b498:	8800759c 	.word	0x8800759c
 800b49c:	7e37e43c 	.word	0x7e37e43c
 800b4a0:	bff00000 	.word	0xbff00000
 800b4a4:	000fffff 	.word	0x000fffff

0800b4a8 <_init>:
 800b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4aa:	bf00      	nop
 800b4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ae:	bc08      	pop	{r3}
 800b4b0:	469e      	mov	lr, r3
 800b4b2:	4770      	bx	lr

0800b4b4 <_fini>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr
