
GestureTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000158b0  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ed38  0801ed38  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801ed38  0801ed38  0002ed38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ed40  0801ed40  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ed40  0801ed40  0002ed40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ed44  0801ed44  0002ed44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801ed48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  20000070  0801edb8  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c2c  0801edb8  00032c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001111d  00000000  00000000  0003012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e2  00000000  00000000  00041248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00043830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e9  00000000  00000000  000444e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019635  00000000  00000000  00044ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001157d  00000000  00000000  0005e4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c086  00000000  00000000  0006fa7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000330c  00000000  00000000  0010bb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0010ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009470 	.word	0x08009470

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08009470 	.word	0x08009470

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fbb9 	bl	8001b78 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fb09 	bl	8001a28 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fbab 	bl	8001b78 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fba1 	bl	8001b78 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fb31 	bl	8001aac <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb27 	bl	8001aac <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 faa5 	bl	80009c4 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fa31 	bl	80008ec <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fa97 	bl	80009c4 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fa8d 	bl	80009c4 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fa3d 	bl	8000938 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa33 	bl	8000938 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_uldivmod>:
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d10f      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e8:	2900      	cmp	r1, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_uldivmod+0xe>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d002      	beq.n	80004f6 <__aeabi_uldivmod+0x16>
 80004f0:	2100      	movs	r1, #0
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	0008      	movs	r0, r1
 80004f6:	b407      	push	{r0, r1, r2}
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <__aeabi_uldivmod+0x24>)
 80004fa:	a102      	add	r1, pc, #8	; (adr r1, 8000504 <__aeabi_uldivmod+0x24>)
 80004fc:	1840      	adds	r0, r0, r1
 80004fe:	9002      	str	r0, [sp, #8]
 8000500:	bd03      	pop	{r0, r1, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	fffffee9 	.word	0xfffffee9
 8000508:	b403      	push	{r0, r1}
 800050a:	4668      	mov	r0, sp
 800050c:	b501      	push	{r0, lr}
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	f000 f806 	bl	8000520 <__udivmoddi4>
 8000514:	9b01      	ldr	r3, [sp, #4]
 8000516:	469e      	mov	lr, r3
 8000518:	b002      	add	sp, #8
 800051a:	bc0c      	pop	{r2, r3}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__udivmoddi4>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	4657      	mov	r7, sl
 8000524:	464e      	mov	r6, r9
 8000526:	4645      	mov	r5, r8
 8000528:	46de      	mov	lr, fp
 800052a:	b5e0      	push	{r5, r6, r7, lr}
 800052c:	0004      	movs	r4, r0
 800052e:	000d      	movs	r5, r1
 8000530:	4692      	mov	sl, r2
 8000532:	4699      	mov	r9, r3
 8000534:	b083      	sub	sp, #12
 8000536:	428b      	cmp	r3, r1
 8000538:	d830      	bhi.n	800059c <__udivmoddi4+0x7c>
 800053a:	d02d      	beq.n	8000598 <__udivmoddi4+0x78>
 800053c:	4649      	mov	r1, r9
 800053e:	4650      	mov	r0, sl
 8000540:	f002 fb58 	bl	8002bf4 <__clzdi2>
 8000544:	0029      	movs	r1, r5
 8000546:	0006      	movs	r6, r0
 8000548:	0020      	movs	r0, r4
 800054a:	f002 fb53 	bl	8002bf4 <__clzdi2>
 800054e:	1a33      	subs	r3, r6, r0
 8000550:	4698      	mov	r8, r3
 8000552:	3b20      	subs	r3, #32
 8000554:	d434      	bmi.n	80005c0 <__udivmoddi4+0xa0>
 8000556:	469b      	mov	fp, r3
 8000558:	4653      	mov	r3, sl
 800055a:	465a      	mov	r2, fp
 800055c:	4093      	lsls	r3, r2
 800055e:	4642      	mov	r2, r8
 8000560:	001f      	movs	r7, r3
 8000562:	4653      	mov	r3, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	001e      	movs	r6, r3
 8000568:	42af      	cmp	r7, r5
 800056a:	d83b      	bhi.n	80005e4 <__udivmoddi4+0xc4>
 800056c:	42af      	cmp	r7, r5
 800056e:	d100      	bne.n	8000572 <__udivmoddi4+0x52>
 8000570:	e079      	b.n	8000666 <__udivmoddi4+0x146>
 8000572:	465b      	mov	r3, fp
 8000574:	1ba4      	subs	r4, r4, r6
 8000576:	41bd      	sbcs	r5, r7
 8000578:	2b00      	cmp	r3, #0
 800057a:	da00      	bge.n	800057e <__udivmoddi4+0x5e>
 800057c:	e076      	b.n	800066c <__udivmoddi4+0x14c>
 800057e:	2200      	movs	r2, #0
 8000580:	2300      	movs	r3, #0
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	465a      	mov	r2, fp
 800058a:	4093      	lsls	r3, r2
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	4642      	mov	r2, r8
 8000592:	4093      	lsls	r3, r2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e029      	b.n	80005ec <__udivmoddi4+0xcc>
 8000598:	4282      	cmp	r2, r0
 800059a:	d9cf      	bls.n	800053c <__udivmoddi4+0x1c>
 800059c:	2200      	movs	r2, #0
 800059e:	2300      	movs	r3, #0
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <__udivmoddi4+0x8e>
 80005aa:	601c      	str	r4, [r3, #0]
 80005ac:	605d      	str	r5, [r3, #4]
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	b003      	add	sp, #12
 80005b4:	bcf0      	pop	{r4, r5, r6, r7}
 80005b6:	46bb      	mov	fp, r7
 80005b8:	46b2      	mov	sl, r6
 80005ba:	46a9      	mov	r9, r5
 80005bc:	46a0      	mov	r8, r4
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	4642      	mov	r2, r8
 80005c2:	469b      	mov	fp, r3
 80005c4:	2320      	movs	r3, #32
 80005c6:	1a9b      	subs	r3, r3, r2
 80005c8:	4652      	mov	r2, sl
 80005ca:	40da      	lsrs	r2, r3
 80005cc:	4641      	mov	r1, r8
 80005ce:	0013      	movs	r3, r2
 80005d0:	464a      	mov	r2, r9
 80005d2:	408a      	lsls	r2, r1
 80005d4:	0017      	movs	r7, r2
 80005d6:	4642      	mov	r2, r8
 80005d8:	431f      	orrs	r7, r3
 80005da:	4653      	mov	r3, sl
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d9c3      	bls.n	800056c <__udivmoddi4+0x4c>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	4643      	mov	r3, r8
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0d8      	beq.n	80005a4 <__udivmoddi4+0x84>
 80005f2:	07fb      	lsls	r3, r7, #31
 80005f4:	0872      	lsrs	r2, r6, #1
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4646      	mov	r6, r8
 80005fa:	087b      	lsrs	r3, r7, #1
 80005fc:	e00e      	b.n	800061c <__udivmoddi4+0xfc>
 80005fe:	42ab      	cmp	r3, r5
 8000600:	d101      	bne.n	8000606 <__udivmoddi4+0xe6>
 8000602:	42a2      	cmp	r2, r4
 8000604:	d80c      	bhi.n	8000620 <__udivmoddi4+0x100>
 8000606:	1aa4      	subs	r4, r4, r2
 8000608:	419d      	sbcs	r5, r3
 800060a:	2001      	movs	r0, #1
 800060c:	1924      	adds	r4, r4, r4
 800060e:	416d      	adcs	r5, r5
 8000610:	2100      	movs	r1, #0
 8000612:	3e01      	subs	r6, #1
 8000614:	1824      	adds	r4, r4, r0
 8000616:	414d      	adcs	r5, r1
 8000618:	2e00      	cmp	r6, #0
 800061a:	d006      	beq.n	800062a <__udivmoddi4+0x10a>
 800061c:	42ab      	cmp	r3, r5
 800061e:	d9ee      	bls.n	80005fe <__udivmoddi4+0xde>
 8000620:	3e01      	subs	r6, #1
 8000622:	1924      	adds	r4, r4, r4
 8000624:	416d      	adcs	r5, r5
 8000626:	2e00      	cmp	r6, #0
 8000628:	d1f8      	bne.n	800061c <__udivmoddi4+0xfc>
 800062a:	9800      	ldr	r0, [sp, #0]
 800062c:	9901      	ldr	r1, [sp, #4]
 800062e:	465b      	mov	r3, fp
 8000630:	1900      	adds	r0, r0, r4
 8000632:	4169      	adcs	r1, r5
 8000634:	2b00      	cmp	r3, #0
 8000636:	db24      	blt.n	8000682 <__udivmoddi4+0x162>
 8000638:	002b      	movs	r3, r5
 800063a:	465a      	mov	r2, fp
 800063c:	4644      	mov	r4, r8
 800063e:	40d3      	lsrs	r3, r2
 8000640:	002a      	movs	r2, r5
 8000642:	40e2      	lsrs	r2, r4
 8000644:	001c      	movs	r4, r3
 8000646:	465b      	mov	r3, fp
 8000648:	0015      	movs	r5, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	db2a      	blt.n	80006a4 <__udivmoddi4+0x184>
 800064e:	0026      	movs	r6, r4
 8000650:	409e      	lsls	r6, r3
 8000652:	0033      	movs	r3, r6
 8000654:	0026      	movs	r6, r4
 8000656:	4647      	mov	r7, r8
 8000658:	40be      	lsls	r6, r7
 800065a:	0032      	movs	r2, r6
 800065c:	1a80      	subs	r0, r0, r2
 800065e:	4199      	sbcs	r1, r3
 8000660:	9000      	str	r0, [sp, #0]
 8000662:	9101      	str	r1, [sp, #4]
 8000664:	e79e      	b.n	80005a4 <__udivmoddi4+0x84>
 8000666:	42a3      	cmp	r3, r4
 8000668:	d8bc      	bhi.n	80005e4 <__udivmoddi4+0xc4>
 800066a:	e782      	b.n	8000572 <__udivmoddi4+0x52>
 800066c:	4642      	mov	r2, r8
 800066e:	2320      	movs	r3, #32
 8000670:	2100      	movs	r1, #0
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	9100      	str	r1, [sp, #0]
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	2201      	movs	r2, #1
 800067c:	40da      	lsrs	r2, r3
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	e785      	b.n	800058e <__udivmoddi4+0x6e>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	002a      	movs	r2, r5
 800068a:	4646      	mov	r6, r8
 800068c:	409a      	lsls	r2, r3
 800068e:	0023      	movs	r3, r4
 8000690:	40f3      	lsrs	r3, r6
 8000692:	4644      	mov	r4, r8
 8000694:	4313      	orrs	r3, r2
 8000696:	002a      	movs	r2, r5
 8000698:	40e2      	lsrs	r2, r4
 800069a:	001c      	movs	r4, r3
 800069c:	465b      	mov	r3, fp
 800069e:	0015      	movs	r5, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	dad4      	bge.n	800064e <__udivmoddi4+0x12e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	002f      	movs	r7, r5
 80006a8:	2320      	movs	r3, #32
 80006aa:	0026      	movs	r6, r4
 80006ac:	4097      	lsls	r7, r2
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	40de      	lsrs	r6, r3
 80006b2:	003b      	movs	r3, r7
 80006b4:	4333      	orrs	r3, r6
 80006b6:	e7cd      	b.n	8000654 <__udivmoddi4+0x134>

080006b8 <__aeabi_fdiv>:
 80006b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ba:	464f      	mov	r7, r9
 80006bc:	4646      	mov	r6, r8
 80006be:	46d6      	mov	lr, sl
 80006c0:	0245      	lsls	r5, r0, #9
 80006c2:	b5c0      	push	{r6, r7, lr}
 80006c4:	0047      	lsls	r7, r0, #1
 80006c6:	1c0c      	adds	r4, r1, #0
 80006c8:	0a6d      	lsrs	r5, r5, #9
 80006ca:	0e3f      	lsrs	r7, r7, #24
 80006cc:	0fc6      	lsrs	r6, r0, #31
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fdiv+0x1c>
 80006d2:	e06f      	b.n	80007b4 <__aeabi_fdiv+0xfc>
 80006d4:	2fff      	cmp	r7, #255	; 0xff
 80006d6:	d100      	bne.n	80006da <__aeabi_fdiv+0x22>
 80006d8:	e074      	b.n	80007c4 <__aeabi_fdiv+0x10c>
 80006da:	2300      	movs	r3, #0
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	4699      	mov	r9, r3
 80006e0:	469a      	mov	sl, r3
 80006e2:	00ed      	lsls	r5, r5, #3
 80006e4:	04d2      	lsls	r2, r2, #19
 80006e6:	4315      	orrs	r5, r2
 80006e8:	3f7f      	subs	r7, #127	; 0x7f
 80006ea:	0263      	lsls	r3, r4, #9
 80006ec:	0a5b      	lsrs	r3, r3, #9
 80006ee:	4698      	mov	r8, r3
 80006f0:	0063      	lsls	r3, r4, #1
 80006f2:	0e1b      	lsrs	r3, r3, #24
 80006f4:	0fe4      	lsrs	r4, r4, #31
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d04d      	beq.n	8000796 <__aeabi_fdiv+0xde>
 80006fa:	2bff      	cmp	r3, #255	; 0xff
 80006fc:	d045      	beq.n	800078a <__aeabi_fdiv+0xd2>
 80006fe:	4642      	mov	r2, r8
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	04c9      	lsls	r1, r1, #19
 8000706:	4311      	orrs	r1, r2
 8000708:	4688      	mov	r8, r1
 800070a:	2200      	movs	r2, #0
 800070c:	3b7f      	subs	r3, #127	; 0x7f
 800070e:	0031      	movs	r1, r6
 8000710:	1aff      	subs	r7, r7, r3
 8000712:	464b      	mov	r3, r9
 8000714:	4061      	eors	r1, r4
 8000716:	b2c9      	uxtb	r1, r1
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d900      	bls.n	800071e <__aeabi_fdiv+0x66>
 800071c:	e0b8      	b.n	8000890 <__aeabi_fdiv+0x1d8>
 800071e:	4870      	ldr	r0, [pc, #448]	; (80008e0 <__aeabi_fdiv+0x228>)
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	58c3      	ldr	r3, [r0, r3]
 8000724:	469f      	mov	pc, r3
 8000726:	2300      	movs	r3, #0
 8000728:	4698      	mov	r8, r3
 800072a:	0026      	movs	r6, r4
 800072c:	4645      	mov	r5, r8
 800072e:	4692      	mov	sl, r2
 8000730:	4653      	mov	r3, sl
 8000732:	2b02      	cmp	r3, #2
 8000734:	d100      	bne.n	8000738 <__aeabi_fdiv+0x80>
 8000736:	e08d      	b.n	8000854 <__aeabi_fdiv+0x19c>
 8000738:	2b03      	cmp	r3, #3
 800073a:	d100      	bne.n	800073e <__aeabi_fdiv+0x86>
 800073c:	e0a1      	b.n	8000882 <__aeabi_fdiv+0x1ca>
 800073e:	2b01      	cmp	r3, #1
 8000740:	d018      	beq.n	8000774 <__aeabi_fdiv+0xbc>
 8000742:	003b      	movs	r3, r7
 8000744:	337f      	adds	r3, #127	; 0x7f
 8000746:	2b00      	cmp	r3, #0
 8000748:	dd6d      	ble.n	8000826 <__aeabi_fdiv+0x16e>
 800074a:	076a      	lsls	r2, r5, #29
 800074c:	d004      	beq.n	8000758 <__aeabi_fdiv+0xa0>
 800074e:	220f      	movs	r2, #15
 8000750:	402a      	ands	r2, r5
 8000752:	2a04      	cmp	r2, #4
 8000754:	d000      	beq.n	8000758 <__aeabi_fdiv+0xa0>
 8000756:	3504      	adds	r5, #4
 8000758:	012a      	lsls	r2, r5, #4
 800075a:	d503      	bpl.n	8000764 <__aeabi_fdiv+0xac>
 800075c:	4b61      	ldr	r3, [pc, #388]	; (80008e4 <__aeabi_fdiv+0x22c>)
 800075e:	401d      	ands	r5, r3
 8000760:	003b      	movs	r3, r7
 8000762:	3380      	adds	r3, #128	; 0x80
 8000764:	2bfe      	cmp	r3, #254	; 0xfe
 8000766:	dd00      	ble.n	800076a <__aeabi_fdiv+0xb2>
 8000768:	e074      	b.n	8000854 <__aeabi_fdiv+0x19c>
 800076a:	01aa      	lsls	r2, r5, #6
 800076c:	0a52      	lsrs	r2, r2, #9
 800076e:	b2d8      	uxtb	r0, r3
 8000770:	e002      	b.n	8000778 <__aeabi_fdiv+0xc0>
 8000772:	000e      	movs	r6, r1
 8000774:	2000      	movs	r0, #0
 8000776:	2200      	movs	r2, #0
 8000778:	05c0      	lsls	r0, r0, #23
 800077a:	07f6      	lsls	r6, r6, #31
 800077c:	4310      	orrs	r0, r2
 800077e:	4330      	orrs	r0, r6
 8000780:	bce0      	pop	{r5, r6, r7}
 8000782:	46ba      	mov	sl, r7
 8000784:	46b1      	mov	r9, r6
 8000786:	46a8      	mov	r8, r5
 8000788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078a:	4643      	mov	r3, r8
 800078c:	2b00      	cmp	r3, #0
 800078e:	d13f      	bne.n	8000810 <__aeabi_fdiv+0x158>
 8000790:	2202      	movs	r2, #2
 8000792:	3fff      	subs	r7, #255	; 0xff
 8000794:	e003      	b.n	800079e <__aeabi_fdiv+0xe6>
 8000796:	4643      	mov	r3, r8
 8000798:	2b00      	cmp	r3, #0
 800079a:	d12d      	bne.n	80007f8 <__aeabi_fdiv+0x140>
 800079c:	2201      	movs	r2, #1
 800079e:	0031      	movs	r1, r6
 80007a0:	464b      	mov	r3, r9
 80007a2:	4061      	eors	r1, r4
 80007a4:	b2c9      	uxtb	r1, r1
 80007a6:	4313      	orrs	r3, r2
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d838      	bhi.n	800081e <__aeabi_fdiv+0x166>
 80007ac:	484e      	ldr	r0, [pc, #312]	; (80008e8 <__aeabi_fdiv+0x230>)
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	58c3      	ldr	r3, [r0, r3]
 80007b2:	469f      	mov	pc, r3
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d113      	bne.n	80007e0 <__aeabi_fdiv+0x128>
 80007b8:	2304      	movs	r3, #4
 80007ba:	4699      	mov	r9, r3
 80007bc:	3b03      	subs	r3, #3
 80007be:	2700      	movs	r7, #0
 80007c0:	469a      	mov	sl, r3
 80007c2:	e792      	b.n	80006ea <__aeabi_fdiv+0x32>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d105      	bne.n	80007d4 <__aeabi_fdiv+0x11c>
 80007c8:	2308      	movs	r3, #8
 80007ca:	4699      	mov	r9, r3
 80007cc:	3b06      	subs	r3, #6
 80007ce:	27ff      	movs	r7, #255	; 0xff
 80007d0:	469a      	mov	sl, r3
 80007d2:	e78a      	b.n	80006ea <__aeabi_fdiv+0x32>
 80007d4:	230c      	movs	r3, #12
 80007d6:	4699      	mov	r9, r3
 80007d8:	3b09      	subs	r3, #9
 80007da:	27ff      	movs	r7, #255	; 0xff
 80007dc:	469a      	mov	sl, r3
 80007de:	e784      	b.n	80006ea <__aeabi_fdiv+0x32>
 80007e0:	0028      	movs	r0, r5
 80007e2:	f002 f9e9 	bl	8002bb8 <__clzsi2>
 80007e6:	2776      	movs	r7, #118	; 0x76
 80007e8:	1f43      	subs	r3, r0, #5
 80007ea:	409d      	lsls	r5, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	427f      	negs	r7, r7
 80007f0:	4699      	mov	r9, r3
 80007f2:	469a      	mov	sl, r3
 80007f4:	1a3f      	subs	r7, r7, r0
 80007f6:	e778      	b.n	80006ea <__aeabi_fdiv+0x32>
 80007f8:	4640      	mov	r0, r8
 80007fa:	f002 f9dd 	bl	8002bb8 <__clzsi2>
 80007fe:	4642      	mov	r2, r8
 8000800:	1f43      	subs	r3, r0, #5
 8000802:	409a      	lsls	r2, r3
 8000804:	2376      	movs	r3, #118	; 0x76
 8000806:	425b      	negs	r3, r3
 8000808:	4690      	mov	r8, r2
 800080a:	1a1b      	subs	r3, r3, r0
 800080c:	2200      	movs	r2, #0
 800080e:	e77e      	b.n	800070e <__aeabi_fdiv+0x56>
 8000810:	2303      	movs	r3, #3
 8000812:	464a      	mov	r2, r9
 8000814:	431a      	orrs	r2, r3
 8000816:	4691      	mov	r9, r2
 8000818:	33fc      	adds	r3, #252	; 0xfc
 800081a:	2203      	movs	r2, #3
 800081c:	e777      	b.n	800070e <__aeabi_fdiv+0x56>
 800081e:	000e      	movs	r6, r1
 8000820:	20ff      	movs	r0, #255	; 0xff
 8000822:	2200      	movs	r2, #0
 8000824:	e7a8      	b.n	8000778 <__aeabi_fdiv+0xc0>
 8000826:	2201      	movs	r2, #1
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b1b      	cmp	r3, #27
 800082c:	dca2      	bgt.n	8000774 <__aeabi_fdiv+0xbc>
 800082e:	379e      	adds	r7, #158	; 0x9e
 8000830:	002a      	movs	r2, r5
 8000832:	40bd      	lsls	r5, r7
 8000834:	40da      	lsrs	r2, r3
 8000836:	1e6b      	subs	r3, r5, #1
 8000838:	419d      	sbcs	r5, r3
 800083a:	4315      	orrs	r5, r2
 800083c:	076a      	lsls	r2, r5, #29
 800083e:	d004      	beq.n	800084a <__aeabi_fdiv+0x192>
 8000840:	220f      	movs	r2, #15
 8000842:	402a      	ands	r2, r5
 8000844:	2a04      	cmp	r2, #4
 8000846:	d000      	beq.n	800084a <__aeabi_fdiv+0x192>
 8000848:	3504      	adds	r5, #4
 800084a:	016a      	lsls	r2, r5, #5
 800084c:	d544      	bpl.n	80008d8 <__aeabi_fdiv+0x220>
 800084e:	2001      	movs	r0, #1
 8000850:	2200      	movs	r2, #0
 8000852:	e791      	b.n	8000778 <__aeabi_fdiv+0xc0>
 8000854:	20ff      	movs	r0, #255	; 0xff
 8000856:	2200      	movs	r2, #0
 8000858:	e78e      	b.n	8000778 <__aeabi_fdiv+0xc0>
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	2600      	movs	r6, #0
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	03d2      	lsls	r2, r2, #15
 8000862:	e789      	b.n	8000778 <__aeabi_fdiv+0xc0>
 8000864:	2300      	movs	r3, #0
 8000866:	4698      	mov	r8, r3
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	03d2      	lsls	r2, r2, #15
 800086c:	4215      	tst	r5, r2
 800086e:	d008      	beq.n	8000882 <__aeabi_fdiv+0x1ca>
 8000870:	4643      	mov	r3, r8
 8000872:	4213      	tst	r3, r2
 8000874:	d105      	bne.n	8000882 <__aeabi_fdiv+0x1ca>
 8000876:	431a      	orrs	r2, r3
 8000878:	0252      	lsls	r2, r2, #9
 800087a:	0026      	movs	r6, r4
 800087c:	20ff      	movs	r0, #255	; 0xff
 800087e:	0a52      	lsrs	r2, r2, #9
 8000880:	e77a      	b.n	8000778 <__aeabi_fdiv+0xc0>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	03d2      	lsls	r2, r2, #15
 8000886:	432a      	orrs	r2, r5
 8000888:	0252      	lsls	r2, r2, #9
 800088a:	20ff      	movs	r0, #255	; 0xff
 800088c:	0a52      	lsrs	r2, r2, #9
 800088e:	e773      	b.n	8000778 <__aeabi_fdiv+0xc0>
 8000890:	4642      	mov	r2, r8
 8000892:	016b      	lsls	r3, r5, #5
 8000894:	0155      	lsls	r5, r2, #5
 8000896:	42ab      	cmp	r3, r5
 8000898:	d21a      	bcs.n	80008d0 <__aeabi_fdiv+0x218>
 800089a:	201b      	movs	r0, #27
 800089c:	2200      	movs	r2, #0
 800089e:	3f01      	subs	r7, #1
 80008a0:	2601      	movs	r6, #1
 80008a2:	001c      	movs	r4, r3
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	db01      	blt.n	80008b0 <__aeabi_fdiv+0x1f8>
 80008ac:	429d      	cmp	r5, r3
 80008ae:	d801      	bhi.n	80008b4 <__aeabi_fdiv+0x1fc>
 80008b0:	1b5b      	subs	r3, r3, r5
 80008b2:	4332      	orrs	r2, r6
 80008b4:	3801      	subs	r0, #1
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d1f3      	bne.n	80008a2 <__aeabi_fdiv+0x1ea>
 80008ba:	1e58      	subs	r0, r3, #1
 80008bc:	4183      	sbcs	r3, r0
 80008be:	4313      	orrs	r3, r2
 80008c0:	001d      	movs	r5, r3
 80008c2:	003b      	movs	r3, r7
 80008c4:	337f      	adds	r3, #127	; 0x7f
 80008c6:	000e      	movs	r6, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dd00      	ble.n	80008ce <__aeabi_fdiv+0x216>
 80008cc:	e73d      	b.n	800074a <__aeabi_fdiv+0x92>
 80008ce:	e7aa      	b.n	8000826 <__aeabi_fdiv+0x16e>
 80008d0:	201a      	movs	r0, #26
 80008d2:	2201      	movs	r2, #1
 80008d4:	1b5b      	subs	r3, r3, r5
 80008d6:	e7e3      	b.n	80008a0 <__aeabi_fdiv+0x1e8>
 80008d8:	01aa      	lsls	r2, r5, #6
 80008da:	2000      	movs	r0, #0
 80008dc:	0a52      	lsrs	r2, r2, #9
 80008de:	e74b      	b.n	8000778 <__aeabi_fdiv+0xc0>
 80008e0:	080094f4 	.word	0x080094f4
 80008e4:	f7ffffff 	.word	0xf7ffffff
 80008e8:	08009534 	.word	0x08009534

080008ec <__eqsf2>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	0042      	lsls	r2, r0, #1
 80008f0:	0245      	lsls	r5, r0, #9
 80008f2:	024e      	lsls	r6, r1, #9
 80008f4:	004c      	lsls	r4, r1, #1
 80008f6:	0fc3      	lsrs	r3, r0, #31
 80008f8:	0a6d      	lsrs	r5, r5, #9
 80008fa:	2001      	movs	r0, #1
 80008fc:	0e12      	lsrs	r2, r2, #24
 80008fe:	0a76      	lsrs	r6, r6, #9
 8000900:	0e24      	lsrs	r4, r4, #24
 8000902:	0fc9      	lsrs	r1, r1, #31
 8000904:	2aff      	cmp	r2, #255	; 0xff
 8000906:	d006      	beq.n	8000916 <__eqsf2+0x2a>
 8000908:	2cff      	cmp	r4, #255	; 0xff
 800090a:	d003      	beq.n	8000914 <__eqsf2+0x28>
 800090c:	42a2      	cmp	r2, r4
 800090e:	d101      	bne.n	8000914 <__eqsf2+0x28>
 8000910:	42b5      	cmp	r5, r6
 8000912:	d006      	beq.n	8000922 <__eqsf2+0x36>
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	2d00      	cmp	r5, #0
 8000918:	d1fc      	bne.n	8000914 <__eqsf2+0x28>
 800091a:	2cff      	cmp	r4, #255	; 0xff
 800091c:	d1fa      	bne.n	8000914 <__eqsf2+0x28>
 800091e:	2e00      	cmp	r6, #0
 8000920:	d1f8      	bne.n	8000914 <__eqsf2+0x28>
 8000922:	428b      	cmp	r3, r1
 8000924:	d006      	beq.n	8000934 <__eqsf2+0x48>
 8000926:	2001      	movs	r0, #1
 8000928:	2a00      	cmp	r2, #0
 800092a:	d1f3      	bne.n	8000914 <__eqsf2+0x28>
 800092c:	0028      	movs	r0, r5
 800092e:	1e43      	subs	r3, r0, #1
 8000930:	4198      	sbcs	r0, r3
 8000932:	e7ef      	b.n	8000914 <__eqsf2+0x28>
 8000934:	2000      	movs	r0, #0
 8000936:	e7ed      	b.n	8000914 <__eqsf2+0x28>

08000938 <__gesf2>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	0042      	lsls	r2, r0, #1
 800093c:	0245      	lsls	r5, r0, #9
 800093e:	024e      	lsls	r6, r1, #9
 8000940:	004c      	lsls	r4, r1, #1
 8000942:	0fc3      	lsrs	r3, r0, #31
 8000944:	0a6d      	lsrs	r5, r5, #9
 8000946:	0e12      	lsrs	r2, r2, #24
 8000948:	0a76      	lsrs	r6, r6, #9
 800094a:	0e24      	lsrs	r4, r4, #24
 800094c:	0fc8      	lsrs	r0, r1, #31
 800094e:	2aff      	cmp	r2, #255	; 0xff
 8000950:	d01b      	beq.n	800098a <__gesf2+0x52>
 8000952:	2cff      	cmp	r4, #255	; 0xff
 8000954:	d00e      	beq.n	8000974 <__gesf2+0x3c>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d11b      	bne.n	8000992 <__gesf2+0x5a>
 800095a:	2c00      	cmp	r4, #0
 800095c:	d101      	bne.n	8000962 <__gesf2+0x2a>
 800095e:	2e00      	cmp	r6, #0
 8000960:	d01c      	beq.n	800099c <__gesf2+0x64>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d00c      	beq.n	8000980 <__gesf2+0x48>
 8000966:	4283      	cmp	r3, r0
 8000968:	d01c      	beq.n	80009a4 <__gesf2+0x6c>
 800096a:	2102      	movs	r1, #2
 800096c:	1e58      	subs	r0, r3, #1
 800096e:	4008      	ands	r0, r1
 8000970:	3801      	subs	r0, #1
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	2e00      	cmp	r6, #0
 8000976:	d122      	bne.n	80009be <__gesf2+0x86>
 8000978:	2a00      	cmp	r2, #0
 800097a:	d1f4      	bne.n	8000966 <__gesf2+0x2e>
 800097c:	2d00      	cmp	r5, #0
 800097e:	d1f2      	bne.n	8000966 <__gesf2+0x2e>
 8000980:	2800      	cmp	r0, #0
 8000982:	d1f6      	bne.n	8000972 <__gesf2+0x3a>
 8000984:	2001      	movs	r0, #1
 8000986:	4240      	negs	r0, r0
 8000988:	e7f3      	b.n	8000972 <__gesf2+0x3a>
 800098a:	2d00      	cmp	r5, #0
 800098c:	d117      	bne.n	80009be <__gesf2+0x86>
 800098e:	2cff      	cmp	r4, #255	; 0xff
 8000990:	d0f0      	beq.n	8000974 <__gesf2+0x3c>
 8000992:	2c00      	cmp	r4, #0
 8000994:	d1e7      	bne.n	8000966 <__gesf2+0x2e>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d1e5      	bne.n	8000966 <__gesf2+0x2e>
 800099a:	e7e6      	b.n	800096a <__gesf2+0x32>
 800099c:	2000      	movs	r0, #0
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0e7      	beq.n	8000972 <__gesf2+0x3a>
 80009a2:	e7e2      	b.n	800096a <__gesf2+0x32>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	dc05      	bgt.n	80009b4 <__gesf2+0x7c>
 80009a8:	dbea      	blt.n	8000980 <__gesf2+0x48>
 80009aa:	42b5      	cmp	r5, r6
 80009ac:	d802      	bhi.n	80009b4 <__gesf2+0x7c>
 80009ae:	d3e7      	bcc.n	8000980 <__gesf2+0x48>
 80009b0:	2000      	movs	r0, #0
 80009b2:	e7de      	b.n	8000972 <__gesf2+0x3a>
 80009b4:	4243      	negs	r3, r0
 80009b6:	4158      	adcs	r0, r3
 80009b8:	0040      	lsls	r0, r0, #1
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7d9      	b.n	8000972 <__gesf2+0x3a>
 80009be:	2002      	movs	r0, #2
 80009c0:	4240      	negs	r0, r0
 80009c2:	e7d6      	b.n	8000972 <__gesf2+0x3a>

080009c4 <__lesf2>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	0042      	lsls	r2, r0, #1
 80009c8:	0245      	lsls	r5, r0, #9
 80009ca:	024e      	lsls	r6, r1, #9
 80009cc:	004c      	lsls	r4, r1, #1
 80009ce:	0fc3      	lsrs	r3, r0, #31
 80009d0:	0a6d      	lsrs	r5, r5, #9
 80009d2:	0e12      	lsrs	r2, r2, #24
 80009d4:	0a76      	lsrs	r6, r6, #9
 80009d6:	0e24      	lsrs	r4, r4, #24
 80009d8:	0fc8      	lsrs	r0, r1, #31
 80009da:	2aff      	cmp	r2, #255	; 0xff
 80009dc:	d00b      	beq.n	80009f6 <__lesf2+0x32>
 80009de:	2cff      	cmp	r4, #255	; 0xff
 80009e0:	d00d      	beq.n	80009fe <__lesf2+0x3a>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d11f      	bne.n	8000a26 <__lesf2+0x62>
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d116      	bne.n	8000a18 <__lesf2+0x54>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d114      	bne.n	8000a18 <__lesf2+0x54>
 80009ee:	2000      	movs	r0, #0
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d010      	beq.n	8000a16 <__lesf2+0x52>
 80009f4:	e009      	b.n	8000a0a <__lesf2+0x46>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d10c      	bne.n	8000a14 <__lesf2+0x50>
 80009fa:	2cff      	cmp	r4, #255	; 0xff
 80009fc:	d113      	bne.n	8000a26 <__lesf2+0x62>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d108      	bne.n	8000a14 <__lesf2+0x50>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d008      	beq.n	8000a18 <__lesf2+0x54>
 8000a06:	4283      	cmp	r3, r0
 8000a08:	d012      	beq.n	8000a30 <__lesf2+0x6c>
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	1e58      	subs	r0, r3, #1
 8000a0e:	4008      	ands	r0, r1
 8000a10:	3801      	subs	r0, #1
 8000a12:	e000      	b.n	8000a16 <__lesf2+0x52>
 8000a14:	2002      	movs	r0, #2
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d1f4      	bne.n	8000a06 <__lesf2+0x42>
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d1fa      	bne.n	8000a16 <__lesf2+0x52>
 8000a20:	2001      	movs	r0, #1
 8000a22:	4240      	negs	r0, r0
 8000a24:	e7f7      	b.n	8000a16 <__lesf2+0x52>
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d1ed      	bne.n	8000a06 <__lesf2+0x42>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d1eb      	bne.n	8000a06 <__lesf2+0x42>
 8000a2e:	e7ec      	b.n	8000a0a <__lesf2+0x46>
 8000a30:	42a2      	cmp	r2, r4
 8000a32:	dc05      	bgt.n	8000a40 <__lesf2+0x7c>
 8000a34:	dbf2      	blt.n	8000a1c <__lesf2+0x58>
 8000a36:	42b5      	cmp	r5, r6
 8000a38:	d802      	bhi.n	8000a40 <__lesf2+0x7c>
 8000a3a:	d3ef      	bcc.n	8000a1c <__lesf2+0x58>
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e7ea      	b.n	8000a16 <__lesf2+0x52>
 8000a40:	4243      	negs	r3, r0
 8000a42:	4158      	adcs	r0, r3
 8000a44:	0040      	lsls	r0, r0, #1
 8000a46:	3801      	subs	r0, #1
 8000a48:	e7e5      	b.n	8000a16 <__lesf2+0x52>
 8000a4a:	46c0      	nop			; (mov r8, r8)

08000a4c <__aeabi_fmul>:
 8000a4c:	0243      	lsls	r3, r0, #9
 8000a4e:	0a5b      	lsrs	r3, r3, #9
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	464f      	mov	r7, r9
 8000a54:	4646      	mov	r6, r8
 8000a56:	4699      	mov	r9, r3
 8000a58:	46d6      	mov	lr, sl
 8000a5a:	0fc3      	lsrs	r3, r0, #31
 8000a5c:	0045      	lsls	r5, r0, #1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	b5c0      	push	{r6, r7, lr}
 8000a62:	464b      	mov	r3, r9
 8000a64:	1c0f      	adds	r7, r1, #0
 8000a66:	0e2d      	lsrs	r5, r5, #24
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0x20>
 8000a6a:	e0cb      	b.n	8000c04 <__aeabi_fmul+0x1b8>
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fmul+0x26>
 8000a70:	e0cf      	b.n	8000c12 <__aeabi_fmul+0x1c6>
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	04d2      	lsls	r2, r2, #19
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4691      	mov	r9, r2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	469a      	mov	sl, r3
 8000a82:	3d7f      	subs	r5, #127	; 0x7f
 8000a84:	027c      	lsls	r4, r7, #9
 8000a86:	007b      	lsls	r3, r7, #1
 8000a88:	0a64      	lsrs	r4, r4, #9
 8000a8a:	0e1b      	lsrs	r3, r3, #24
 8000a8c:	0fff      	lsrs	r7, r7, #31
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fmul+0x48>
 8000a92:	e0a9      	b.n	8000be8 <__aeabi_fmul+0x19c>
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d011      	beq.n	8000abc <__aeabi_fmul+0x70>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	00e4      	lsls	r4, r4, #3
 8000a9c:	04d2      	lsls	r2, r2, #19
 8000a9e:	4314      	orrs	r4, r2
 8000aa0:	4642      	mov	r2, r8
 8000aa2:	3b7f      	subs	r3, #127	; 0x7f
 8000aa4:	195b      	adds	r3, r3, r5
 8000aa6:	407a      	eors	r2, r7
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	1c5d      	adds	r5, r3, #1
 8000aae:	2e0a      	cmp	r6, #10
 8000ab0:	dd13      	ble.n	8000ada <__aeabi_fmul+0x8e>
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	2e0b      	cmp	r6, #11
 8000ab6:	d047      	beq.n	8000b48 <__aeabi_fmul+0xfc>
 8000ab8:	4647      	mov	r7, r8
 8000aba:	e03f      	b.n	8000b3c <__aeabi_fmul+0xf0>
 8000abc:	002b      	movs	r3, r5
 8000abe:	33ff      	adds	r3, #255	; 0xff
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d11e      	bne.n	8000b02 <__aeabi_fmul+0xb6>
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4316      	orrs	r6, r2
 8000ac8:	4642      	mov	r2, r8
 8000aca:	3501      	adds	r5, #1
 8000acc:	407a      	eors	r2, r7
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	35ff      	adds	r5, #255	; 0xff
 8000ad2:	2e0a      	cmp	r6, #10
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_fmul+0x8c>
 8000ad6:	e0e4      	b.n	8000ca2 <__aeabi_fmul+0x256>
 8000ad8:	2002      	movs	r0, #2
 8000ada:	2e02      	cmp	r6, #2
 8000adc:	dc1c      	bgt.n	8000b18 <__aeabi_fmul+0xcc>
 8000ade:	3e01      	subs	r6, #1
 8000ae0:	2e01      	cmp	r6, #1
 8000ae2:	d842      	bhi.n	8000b6a <__aeabi_fmul+0x11e>
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d03d      	beq.n	8000b64 <__aeabi_fmul+0x118>
 8000ae8:	2801      	cmp	r0, #1
 8000aea:	d166      	bne.n	8000bba <__aeabi_fmul+0x16e>
 8000aec:	2000      	movs	r0, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	05c0      	lsls	r0, r0, #23
 8000af2:	4308      	orrs	r0, r1
 8000af4:	07d2      	lsls	r2, r2, #31
 8000af6:	4310      	orrs	r0, r2
 8000af8:	bce0      	pop	{r5, r6, r7}
 8000afa:	46ba      	mov	sl, r7
 8000afc:	46b1      	mov	r9, r6
 8000afe:	46a8      	mov	r8, r5
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	2203      	movs	r2, #3
 8000b04:	4316      	orrs	r6, r2
 8000b06:	4642      	mov	r2, r8
 8000b08:	3501      	adds	r5, #1
 8000b0a:	407a      	eors	r2, r7
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	35ff      	adds	r5, #255	; 0xff
 8000b10:	2e0a      	cmp	r6, #10
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_fmul+0xca>
 8000b14:	e0e4      	b.n	8000ce0 <__aeabi_fmul+0x294>
 8000b16:	2003      	movs	r0, #3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	40b1      	lsls	r1, r6
 8000b1c:	26a6      	movs	r6, #166	; 0xa6
 8000b1e:	00f6      	lsls	r6, r6, #3
 8000b20:	4231      	tst	r1, r6
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_fmul+0xee>
 8000b24:	2690      	movs	r6, #144	; 0x90
 8000b26:	00b6      	lsls	r6, r6, #2
 8000b28:	4231      	tst	r1, r6
 8000b2a:	d116      	bne.n	8000b5a <__aeabi_fmul+0x10e>
 8000b2c:	3eb9      	subs	r6, #185	; 0xb9
 8000b2e:	3eff      	subs	r6, #255	; 0xff
 8000b30:	420e      	tst	r6, r1
 8000b32:	d01a      	beq.n	8000b6a <__aeabi_fmul+0x11e>
 8000b34:	46a1      	mov	r9, r4
 8000b36:	4682      	mov	sl, r0
 8000b38:	e000      	b.n	8000b3c <__aeabi_fmul+0xf0>
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	003a      	movs	r2, r7
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d00f      	beq.n	8000b64 <__aeabi_fmul+0x118>
 8000b44:	464c      	mov	r4, r9
 8000b46:	4650      	mov	r0, sl
 8000b48:	2803      	cmp	r0, #3
 8000b4a:	d1cd      	bne.n	8000ae8 <__aeabi_fmul+0x9c>
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	03c9      	lsls	r1, r1, #15
 8000b50:	4321      	orrs	r1, r4
 8000b52:	0249      	lsls	r1, r1, #9
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	0a49      	lsrs	r1, r1, #9
 8000b58:	e7ca      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	20ff      	movs	r0, #255	; 0xff
 8000b60:	03c9      	lsls	r1, r1, #15
 8000b62:	e7c5      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000b64:	20ff      	movs	r0, #255	; 0xff
 8000b66:	2100      	movs	r1, #0
 8000b68:	e7c2      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	4649      	mov	r1, r9
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	0c24      	lsrs	r4, r4, #16
 8000b72:	0027      	movs	r7, r4
 8000b74:	0c0e      	lsrs	r6, r1, #16
 8000b76:	0409      	lsls	r1, r1, #16
 8000b78:	0c09      	lsrs	r1, r1, #16
 8000b7a:	4374      	muls	r4, r6
 8000b7c:	434f      	muls	r7, r1
 8000b7e:	4346      	muls	r6, r0
 8000b80:	4348      	muls	r0, r1
 8000b82:	0c39      	lsrs	r1, r7, #16
 8000b84:	1900      	adds	r0, r0, r4
 8000b86:	1809      	adds	r1, r1, r0
 8000b88:	428c      	cmp	r4, r1
 8000b8a:	d903      	bls.n	8000b94 <__aeabi_fmul+0x148>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	0240      	lsls	r0, r0, #9
 8000b90:	4684      	mov	ip, r0
 8000b92:	4466      	add	r6, ip
 8000b94:	043f      	lsls	r7, r7, #16
 8000b96:	0408      	lsls	r0, r1, #16
 8000b98:	0c3f      	lsrs	r7, r7, #16
 8000b9a:	19c0      	adds	r0, r0, r7
 8000b9c:	0184      	lsls	r4, r0, #6
 8000b9e:	1e67      	subs	r7, r4, #1
 8000ba0:	41bc      	sbcs	r4, r7
 8000ba2:	0c09      	lsrs	r1, r1, #16
 8000ba4:	0e80      	lsrs	r0, r0, #26
 8000ba6:	1989      	adds	r1, r1, r6
 8000ba8:	4304      	orrs	r4, r0
 8000baa:	0189      	lsls	r1, r1, #6
 8000bac:	430c      	orrs	r4, r1
 8000bae:	0109      	lsls	r1, r1, #4
 8000bb0:	d571      	bpl.n	8000c96 <__aeabi_fmul+0x24a>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	0861      	lsrs	r1, r4, #1
 8000bb6:	401c      	ands	r4, r3
 8000bb8:	430c      	orrs	r4, r1
 8000bba:	002b      	movs	r3, r5
 8000bbc:	337f      	adds	r3, #127	; 0x7f
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	dd51      	ble.n	8000c66 <__aeabi_fmul+0x21a>
 8000bc2:	0761      	lsls	r1, r4, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fmul+0x184>
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	4021      	ands	r1, r4
 8000bca:	2904      	cmp	r1, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fmul+0x184>
 8000bce:	3404      	adds	r4, #4
 8000bd0:	0121      	lsls	r1, r4, #4
 8000bd2:	d503      	bpl.n	8000bdc <__aeabi_fmul+0x190>
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <__aeabi_fmul+0x298>)
 8000bd6:	401c      	ands	r4, r3
 8000bd8:	002b      	movs	r3, r5
 8000bda:	3380      	adds	r3, #128	; 0x80
 8000bdc:	2bfe      	cmp	r3, #254	; 0xfe
 8000bde:	dcc1      	bgt.n	8000b64 <__aeabi_fmul+0x118>
 8000be0:	01a1      	lsls	r1, r4, #6
 8000be2:	0a49      	lsrs	r1, r1, #9
 8000be4:	b2d8      	uxtb	r0, r3
 8000be6:	e783      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d12c      	bne.n	8000c46 <__aeabi_fmul+0x1fa>
 8000bec:	2301      	movs	r3, #1
 8000bee:	4642      	mov	r2, r8
 8000bf0:	431e      	orrs	r6, r3
 8000bf2:	002b      	movs	r3, r5
 8000bf4:	407a      	eors	r2, r7
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	1c5d      	adds	r5, r3, #1
 8000bfc:	2e0a      	cmp	r6, #10
 8000bfe:	dd00      	ble.n	8000c02 <__aeabi_fmul+0x1b6>
 8000c00:	e757      	b.n	8000ab2 <__aeabi_fmul+0x66>
 8000c02:	e76a      	b.n	8000ada <__aeabi_fmul+0x8e>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d110      	bne.n	8000c2a <__aeabi_fmul+0x1de>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2604      	movs	r6, #4
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	469a      	mov	sl, r3
 8000c10:	e738      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d104      	bne.n	8000c20 <__aeabi_fmul+0x1d4>
 8000c16:	2302      	movs	r3, #2
 8000c18:	2608      	movs	r6, #8
 8000c1a:	25ff      	movs	r5, #255	; 0xff
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	e731      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c20:	2303      	movs	r3, #3
 8000c22:	260c      	movs	r6, #12
 8000c24:	25ff      	movs	r5, #255	; 0xff
 8000c26:	469a      	mov	sl, r3
 8000c28:	e72c      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	f001 ffc4 	bl	8002bb8 <__clzsi2>
 8000c30:	464a      	mov	r2, r9
 8000c32:	1f43      	subs	r3, r0, #5
 8000c34:	2576      	movs	r5, #118	; 0x76
 8000c36:	409a      	lsls	r2, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	426d      	negs	r5, r5
 8000c3c:	4691      	mov	r9, r2
 8000c3e:	2600      	movs	r6, #0
 8000c40:	469a      	mov	sl, r3
 8000c42:	1a2d      	subs	r5, r5, r0
 8000c44:	e71e      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c46:	0020      	movs	r0, r4
 8000c48:	f001 ffb6 	bl	8002bb8 <__clzsi2>
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	1f43      	subs	r3, r0, #5
 8000c50:	409c      	lsls	r4, r3
 8000c52:	1a2b      	subs	r3, r5, r0
 8000c54:	3b76      	subs	r3, #118	; 0x76
 8000c56:	407a      	eors	r2, r7
 8000c58:	2000      	movs	r0, #0
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	1c5d      	adds	r5, r3, #1
 8000c5e:	2e0a      	cmp	r6, #10
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_fmul+0x218>
 8000c62:	e726      	b.n	8000ab2 <__aeabi_fmul+0x66>
 8000c64:	e739      	b.n	8000ada <__aeabi_fmul+0x8e>
 8000c66:	2101      	movs	r1, #1
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	2b1b      	cmp	r3, #27
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_fmul+0x224>
 8000c6e:	e73d      	b.n	8000aec <__aeabi_fmul+0xa0>
 8000c70:	359e      	adds	r5, #158	; 0x9e
 8000c72:	0021      	movs	r1, r4
 8000c74:	40ac      	lsls	r4, r5
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	1e63      	subs	r3, r4, #1
 8000c7a:	419c      	sbcs	r4, r3
 8000c7c:	4321      	orrs	r1, r4
 8000c7e:	074b      	lsls	r3, r1, #29
 8000c80:	d004      	beq.n	8000c8c <__aeabi_fmul+0x240>
 8000c82:	230f      	movs	r3, #15
 8000c84:	400b      	ands	r3, r1
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d000      	beq.n	8000c8c <__aeabi_fmul+0x240>
 8000c8a:	3104      	adds	r1, #4
 8000c8c:	014b      	lsls	r3, r1, #5
 8000c8e:	d504      	bpl.n	8000c9a <__aeabi_fmul+0x24e>
 8000c90:	2001      	movs	r0, #1
 8000c92:	2100      	movs	r1, #0
 8000c94:	e72c      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000c96:	001d      	movs	r5, r3
 8000c98:	e78f      	b.n	8000bba <__aeabi_fmul+0x16e>
 8000c9a:	0189      	lsls	r1, r1, #6
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	0a49      	lsrs	r1, r1, #9
 8000ca0:	e726      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	2e0f      	cmp	r6, #15
 8000ca6:	d10c      	bne.n	8000cc2 <__aeabi_fmul+0x276>
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	464b      	mov	r3, r9
 8000cac:	03c9      	lsls	r1, r1, #15
 8000cae:	420b      	tst	r3, r1
 8000cb0:	d00d      	beq.n	8000cce <__aeabi_fmul+0x282>
 8000cb2:	420c      	tst	r4, r1
 8000cb4:	d10b      	bne.n	8000cce <__aeabi_fmul+0x282>
 8000cb6:	4321      	orrs	r1, r4
 8000cb8:	0249      	lsls	r1, r1, #9
 8000cba:	003a      	movs	r2, r7
 8000cbc:	20ff      	movs	r0, #255	; 0xff
 8000cbe:	0a49      	lsrs	r1, r1, #9
 8000cc0:	e716      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000cc2:	2e0b      	cmp	r6, #11
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_fmul+0x27c>
 8000cc6:	e6f7      	b.n	8000ab8 <__aeabi_fmul+0x6c>
 8000cc8:	46a1      	mov	r9, r4
 8000cca:	469a      	mov	sl, r3
 8000ccc:	e736      	b.n	8000b3c <__aeabi_fmul+0xf0>
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	03c9      	lsls	r1, r1, #15
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	0249      	lsls	r1, r1, #9
 8000cd8:	4642      	mov	r2, r8
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	0a49      	lsrs	r1, r1, #9
 8000cde:	e707      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e7df      	b.n	8000ca4 <__aeabi_fmul+0x258>
 8000ce4:	f7ffffff 	.word	0xf7ffffff

08000ce8 <__aeabi_i2f>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d013      	beq.n	8000d16 <__aeabi_i2f+0x2e>
 8000cee:	17c3      	asrs	r3, r0, #31
 8000cf0:	18c5      	adds	r5, r0, r3
 8000cf2:	405d      	eors	r5, r3
 8000cf4:	0fc4      	lsrs	r4, r0, #31
 8000cf6:	0028      	movs	r0, r5
 8000cf8:	f001 ff5e 	bl	8002bb8 <__clzsi2>
 8000cfc:	239e      	movs	r3, #158	; 0x9e
 8000cfe:	0001      	movs	r1, r0
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	2b96      	cmp	r3, #150	; 0x96
 8000d04:	dc0f      	bgt.n	8000d26 <__aeabi_i2f+0x3e>
 8000d06:	2808      	cmp	r0, #8
 8000d08:	d031      	beq.n	8000d6e <__aeabi_i2f+0x86>
 8000d0a:	3908      	subs	r1, #8
 8000d0c:	408d      	lsls	r5, r1
 8000d0e:	026d      	lsls	r5, r5, #9
 8000d10:	0a6d      	lsrs	r5, r5, #9
 8000d12:	b2d8      	uxtb	r0, r3
 8000d14:	e002      	b.n	8000d1c <__aeabi_i2f+0x34>
 8000d16:	2400      	movs	r4, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	2500      	movs	r5, #0
 8000d1c:	05c0      	lsls	r0, r0, #23
 8000d1e:	4328      	orrs	r0, r5
 8000d20:	07e4      	lsls	r4, r4, #31
 8000d22:	4320      	orrs	r0, r4
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	2b99      	cmp	r3, #153	; 0x99
 8000d28:	dd0c      	ble.n	8000d44 <__aeabi_i2f+0x5c>
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	0028      	movs	r0, r5
 8000d30:	40d0      	lsrs	r0, r2
 8000d32:	0002      	movs	r2, r0
 8000d34:	0008      	movs	r0, r1
 8000d36:	301b      	adds	r0, #27
 8000d38:	4085      	lsls	r5, r0
 8000d3a:	0028      	movs	r0, r5
 8000d3c:	1e45      	subs	r5, r0, #1
 8000d3e:	41a8      	sbcs	r0, r5
 8000d40:	4302      	orrs	r2, r0
 8000d42:	0015      	movs	r5, r2
 8000d44:	2905      	cmp	r1, #5
 8000d46:	dc16      	bgt.n	8000d76 <__aeabi_i2f+0x8e>
 8000d48:	002a      	movs	r2, r5
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <__aeabi_i2f+0xa0>)
 8000d4c:	4002      	ands	r2, r0
 8000d4e:	076e      	lsls	r6, r5, #29
 8000d50:	d009      	beq.n	8000d66 <__aeabi_i2f+0x7e>
 8000d52:	260f      	movs	r6, #15
 8000d54:	4035      	ands	r5, r6
 8000d56:	2d04      	cmp	r5, #4
 8000d58:	d005      	beq.n	8000d66 <__aeabi_i2f+0x7e>
 8000d5a:	3204      	adds	r2, #4
 8000d5c:	0155      	lsls	r5, r2, #5
 8000d5e:	d502      	bpl.n	8000d66 <__aeabi_i2f+0x7e>
 8000d60:	239f      	movs	r3, #159	; 0x9f
 8000d62:	4002      	ands	r2, r0
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	0192      	lsls	r2, r2, #6
 8000d68:	0a55      	lsrs	r5, r2, #9
 8000d6a:	b2d8      	uxtb	r0, r3
 8000d6c:	e7d6      	b.n	8000d1c <__aeabi_i2f+0x34>
 8000d6e:	026d      	lsls	r5, r5, #9
 8000d70:	2096      	movs	r0, #150	; 0x96
 8000d72:	0a6d      	lsrs	r5, r5, #9
 8000d74:	e7d2      	b.n	8000d1c <__aeabi_i2f+0x34>
 8000d76:	1f4a      	subs	r2, r1, #5
 8000d78:	4095      	lsls	r5, r2
 8000d7a:	002a      	movs	r2, r5
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <__aeabi_i2f+0xa0>)
 8000d7e:	4002      	ands	r2, r0
 8000d80:	076e      	lsls	r6, r5, #29
 8000d82:	d0f0      	beq.n	8000d66 <__aeabi_i2f+0x7e>
 8000d84:	e7e5      	b.n	8000d52 <__aeabi_i2f+0x6a>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	fbffffff 	.word	0xfbffffff

08000d8c <__aeabi_dadd>:
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	464f      	mov	r7, r9
 8000d90:	4646      	mov	r6, r8
 8000d92:	46d6      	mov	lr, sl
 8000d94:	0004      	movs	r4, r0
 8000d96:	b5c0      	push	{r6, r7, lr}
 8000d98:	001f      	movs	r7, r3
 8000d9a:	030b      	lsls	r3, r1, #12
 8000d9c:	0010      	movs	r0, r2
 8000d9e:	004e      	lsls	r6, r1, #1
 8000da0:	0a5b      	lsrs	r3, r3, #9
 8000da2:	0fcd      	lsrs	r5, r1, #31
 8000da4:	0f61      	lsrs	r1, r4, #29
 8000da6:	007a      	lsls	r2, r7, #1
 8000da8:	4319      	orrs	r1, r3
 8000daa:	00e3      	lsls	r3, r4, #3
 8000dac:	033c      	lsls	r4, r7, #12
 8000dae:	0fff      	lsrs	r7, r7, #31
 8000db0:	46bc      	mov	ip, r7
 8000db2:	0a64      	lsrs	r4, r4, #9
 8000db4:	0f47      	lsrs	r7, r0, #29
 8000db6:	4327      	orrs	r7, r4
 8000db8:	0d76      	lsrs	r6, r6, #21
 8000dba:	0d52      	lsrs	r2, r2, #21
 8000dbc:	00c0      	lsls	r0, r0, #3
 8000dbe:	46b9      	mov	r9, r7
 8000dc0:	4680      	mov	r8, r0
 8000dc2:	1ab7      	subs	r7, r6, r2
 8000dc4:	4565      	cmp	r5, ip
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x3e>
 8000dc8:	e09b      	b.n	8000f02 <__aeabi_dadd+0x176>
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_dadd+0x44>
 8000dce:	e084      	b.n	8000eda <__aeabi_dadd+0x14e>
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x4a>
 8000dd4:	e0be      	b.n	8000f54 <__aeabi_dadd+0x1c8>
 8000dd6:	4ac8      	ldr	r2, [pc, #800]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000dd8:	4296      	cmp	r6, r2
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x52>
 8000ddc:	e124      	b.n	8001028 <__aeabi_dadd+0x29c>
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	464c      	mov	r4, r9
 8000de2:	0412      	lsls	r2, r2, #16
 8000de4:	4314      	orrs	r4, r2
 8000de6:	46a1      	mov	r9, r4
 8000de8:	2f38      	cmp	r7, #56	; 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x62>
 8000dec:	e167      	b.n	80010be <__aeabi_dadd+0x332>
 8000dee:	2f1f      	cmp	r7, #31
 8000df0:	dd00      	ble.n	8000df4 <__aeabi_dadd+0x68>
 8000df2:	e1d6      	b.n	80011a2 <__aeabi_dadd+0x416>
 8000df4:	2220      	movs	r2, #32
 8000df6:	464c      	mov	r4, r9
 8000df8:	1bd2      	subs	r2, r2, r7
 8000dfa:	4094      	lsls	r4, r2
 8000dfc:	46a2      	mov	sl, r4
 8000dfe:	4644      	mov	r4, r8
 8000e00:	40fc      	lsrs	r4, r7
 8000e02:	0020      	movs	r0, r4
 8000e04:	4654      	mov	r4, sl
 8000e06:	4304      	orrs	r4, r0
 8000e08:	4640      	mov	r0, r8
 8000e0a:	4090      	lsls	r0, r2
 8000e0c:	1e42      	subs	r2, r0, #1
 8000e0e:	4190      	sbcs	r0, r2
 8000e10:	464a      	mov	r2, r9
 8000e12:	40fa      	lsrs	r2, r7
 8000e14:	4304      	orrs	r4, r0
 8000e16:	1a89      	subs	r1, r1, r2
 8000e18:	1b1c      	subs	r4, r3, r4
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	4192      	sbcs	r2, r2
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a8b      	subs	r3, r1, r2
 8000e22:	469a      	mov	sl, r3
 8000e24:	4653      	mov	r3, sl
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	d400      	bmi.n	8000e2c <__aeabi_dadd+0xa0>
 8000e2a:	e0d4      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8000e2c:	4653      	mov	r3, sl
 8000e2e:	025a      	lsls	r2, r3, #9
 8000e30:	0a53      	lsrs	r3, r2, #9
 8000e32:	469a      	mov	sl, r3
 8000e34:	4653      	mov	r3, sl
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0xb0>
 8000e3a:	e104      	b.n	8001046 <__aeabi_dadd+0x2ba>
 8000e3c:	4650      	mov	r0, sl
 8000e3e:	f001 febb 	bl	8002bb8 <__clzsi2>
 8000e42:	0003      	movs	r3, r0
 8000e44:	3b08      	subs	r3, #8
 8000e46:	2220      	movs	r2, #32
 8000e48:	0020      	movs	r0, r4
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	4651      	mov	r1, sl
 8000e4e:	40d0      	lsrs	r0, r2
 8000e50:	4099      	lsls	r1, r3
 8000e52:	0002      	movs	r2, r0
 8000e54:	409c      	lsls	r4, r3
 8000e56:	430a      	orrs	r2, r1
 8000e58:	42b3      	cmp	r3, r6
 8000e5a:	da00      	bge.n	8000e5e <__aeabi_dadd+0xd2>
 8000e5c:	e102      	b.n	8001064 <__aeabi_dadd+0x2d8>
 8000e5e:	1b9b      	subs	r3, r3, r6
 8000e60:	1c59      	adds	r1, r3, #1
 8000e62:	291f      	cmp	r1, #31
 8000e64:	dd00      	ble.n	8000e68 <__aeabi_dadd+0xdc>
 8000e66:	e0a7      	b.n	8000fb8 <__aeabi_dadd+0x22c>
 8000e68:	2320      	movs	r3, #32
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	0026      	movs	r6, r4
 8000e6e:	1a5b      	subs	r3, r3, r1
 8000e70:	409c      	lsls	r4, r3
 8000e72:	4098      	lsls	r0, r3
 8000e74:	40ce      	lsrs	r6, r1
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	1e63      	subs	r3, r4, #1
 8000e7a:	419c      	sbcs	r4, r3
 8000e7c:	4330      	orrs	r0, r6
 8000e7e:	4692      	mov	sl, r2
 8000e80:	2600      	movs	r6, #0
 8000e82:	4304      	orrs	r4, r0
 8000e84:	0763      	lsls	r3, r4, #29
 8000e86:	d009      	beq.n	8000e9c <__aeabi_dadd+0x110>
 8000e88:	230f      	movs	r3, #15
 8000e8a:	4023      	ands	r3, r4
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d005      	beq.n	8000e9c <__aeabi_dadd+0x110>
 8000e90:	1d23      	adds	r3, r4, #4
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	41a4      	sbcs	r4, r4
 8000e96:	4264      	negs	r4, r4
 8000e98:	44a2      	add	sl, r4
 8000e9a:	001c      	movs	r4, r3
 8000e9c:	4653      	mov	r3, sl
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	d400      	bmi.n	8000ea4 <__aeabi_dadd+0x118>
 8000ea2:	e09b      	b.n	8000fdc <__aeabi_dadd+0x250>
 8000ea4:	4b94      	ldr	r3, [pc, #592]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000ea6:	3601      	adds	r6, #1
 8000ea8:	429e      	cmp	r6, r3
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0x122>
 8000eac:	e0b8      	b.n	8001020 <__aeabi_dadd+0x294>
 8000eae:	4653      	mov	r3, sl
 8000eb0:	4992      	ldr	r1, [pc, #584]	; (80010fc <__aeabi_dadd+0x370>)
 8000eb2:	08e4      	lsrs	r4, r4, #3
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	075b      	lsls	r3, r3, #29
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	0572      	lsls	r2, r6, #21
 8000ebe:	024c      	lsls	r4, r1, #9
 8000ec0:	0b24      	lsrs	r4, r4, #12
 8000ec2:	0d52      	lsrs	r2, r2, #21
 8000ec4:	0512      	lsls	r2, r2, #20
 8000ec6:	07ed      	lsls	r5, r5, #31
 8000ec8:	4322      	orrs	r2, r4
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	0018      	movs	r0, r3
 8000ece:	0011      	movs	r1, r2
 8000ed0:	bce0      	pop	{r5, r6, r7}
 8000ed2:	46ba      	mov	sl, r7
 8000ed4:	46b1      	mov	r9, r6
 8000ed6:	46a8      	mov	r8, r5
 8000ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eda:	2f00      	cmp	r7, #0
 8000edc:	d048      	beq.n	8000f70 <__aeabi_dadd+0x1e4>
 8000ede:	1b97      	subs	r7, r2, r6
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_dadd+0x15a>
 8000ee4:	e10e      	b.n	8001104 <__aeabi_dadd+0x378>
 8000ee6:	000c      	movs	r4, r1
 8000ee8:	431c      	orrs	r4, r3
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x162>
 8000eec:	e1b7      	b.n	800125e <__aeabi_dadd+0x4d2>
 8000eee:	1e7c      	subs	r4, r7, #1
 8000ef0:	2f01      	cmp	r7, #1
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x16a>
 8000ef4:	e226      	b.n	8001344 <__aeabi_dadd+0x5b8>
 8000ef6:	4d80      	ldr	r5, [pc, #512]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000ef8:	42af      	cmp	r7, r5
 8000efa:	d100      	bne.n	8000efe <__aeabi_dadd+0x172>
 8000efc:	e1d5      	b.n	80012aa <__aeabi_dadd+0x51e>
 8000efe:	0027      	movs	r7, r4
 8000f00:	e107      	b.n	8001112 <__aeabi_dadd+0x386>
 8000f02:	2f00      	cmp	r7, #0
 8000f04:	dc00      	bgt.n	8000f08 <__aeabi_dadd+0x17c>
 8000f06:	e0b2      	b.n	800106e <__aeabi_dadd+0x2e2>
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d047      	beq.n	8000f9c <__aeabi_dadd+0x210>
 8000f0c:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000f0e:	4296      	cmp	r6, r2
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dadd+0x188>
 8000f12:	e089      	b.n	8001028 <__aeabi_dadd+0x29c>
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	464c      	mov	r4, r9
 8000f18:	0412      	lsls	r2, r2, #16
 8000f1a:	4314      	orrs	r4, r2
 8000f1c:	46a1      	mov	r9, r4
 8000f1e:	2f38      	cmp	r7, #56	; 0x38
 8000f20:	dc6b      	bgt.n	8000ffa <__aeabi_dadd+0x26e>
 8000f22:	2f1f      	cmp	r7, #31
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_dadd+0x19c>
 8000f26:	e16e      	b.n	8001206 <__aeabi_dadd+0x47a>
 8000f28:	003a      	movs	r2, r7
 8000f2a:	4648      	mov	r0, r9
 8000f2c:	3a20      	subs	r2, #32
 8000f2e:	40d0      	lsrs	r0, r2
 8000f30:	4684      	mov	ip, r0
 8000f32:	2f20      	cmp	r7, #32
 8000f34:	d007      	beq.n	8000f46 <__aeabi_dadd+0x1ba>
 8000f36:	2240      	movs	r2, #64	; 0x40
 8000f38:	4648      	mov	r0, r9
 8000f3a:	1bd2      	subs	r2, r2, r7
 8000f3c:	4090      	lsls	r0, r2
 8000f3e:	0002      	movs	r2, r0
 8000f40:	4640      	mov	r0, r8
 8000f42:	4310      	orrs	r0, r2
 8000f44:	4680      	mov	r8, r0
 8000f46:	4640      	mov	r0, r8
 8000f48:	1e42      	subs	r2, r0, #1
 8000f4a:	4190      	sbcs	r0, r2
 8000f4c:	4662      	mov	r2, ip
 8000f4e:	0004      	movs	r4, r0
 8000f50:	4314      	orrs	r4, r2
 8000f52:	e057      	b.n	8001004 <__aeabi_dadd+0x278>
 8000f54:	464a      	mov	r2, r9
 8000f56:	4302      	orrs	r2, r0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x1d0>
 8000f5a:	e103      	b.n	8001164 <__aeabi_dadd+0x3d8>
 8000f5c:	1e7a      	subs	r2, r7, #1
 8000f5e:	2f01      	cmp	r7, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x1d8>
 8000f62:	e193      	b.n	800128c <__aeabi_dadd+0x500>
 8000f64:	4c64      	ldr	r4, [pc, #400]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000f66:	42a7      	cmp	r7, r4
 8000f68:	d100      	bne.n	8000f6c <__aeabi_dadd+0x1e0>
 8000f6a:	e18a      	b.n	8001282 <__aeabi_dadd+0x4f6>
 8000f6c:	0017      	movs	r7, r2
 8000f6e:	e73b      	b.n	8000de8 <__aeabi_dadd+0x5c>
 8000f70:	4c63      	ldr	r4, [pc, #396]	; (8001100 <__aeabi_dadd+0x374>)
 8000f72:	1c72      	adds	r2, r6, #1
 8000f74:	4222      	tst	r2, r4
 8000f76:	d000      	beq.n	8000f7a <__aeabi_dadd+0x1ee>
 8000f78:	e0e0      	b.n	800113c <__aeabi_dadd+0x3b0>
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d000      	beq.n	8000f84 <__aeabi_dadd+0x1f8>
 8000f82:	e174      	b.n	800126e <__aeabi_dadd+0x4e2>
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x1fe>
 8000f88:	e1d0      	b.n	800132c <__aeabi_dadd+0x5a0>
 8000f8a:	464a      	mov	r2, r9
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_dadd+0x206>
 8000f90:	e1e3      	b.n	800135a <__aeabi_dadd+0x5ce>
 8000f92:	074a      	lsls	r2, r1, #29
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	08c9      	lsrs	r1, r1, #3
 8000f9a:	e029      	b.n	8000ff0 <__aeabi_dadd+0x264>
 8000f9c:	464a      	mov	r2, r9
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x218>
 8000fa2:	e17d      	b.n	80012a0 <__aeabi_dadd+0x514>
 8000fa4:	1e7a      	subs	r2, r7, #1
 8000fa6:	2f01      	cmp	r7, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x220>
 8000faa:	e0e0      	b.n	800116e <__aeabi_dadd+0x3e2>
 8000fac:	4c52      	ldr	r4, [pc, #328]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000fae:	42a7      	cmp	r7, r4
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x228>
 8000fb2:	e166      	b.n	8001282 <__aeabi_dadd+0x4f6>
 8000fb4:	0017      	movs	r7, r2
 8000fb6:	e7b2      	b.n	8000f1e <__aeabi_dadd+0x192>
 8000fb8:	0010      	movs	r0, r2
 8000fba:	3b1f      	subs	r3, #31
 8000fbc:	40d8      	lsrs	r0, r3
 8000fbe:	2920      	cmp	r1, #32
 8000fc0:	d003      	beq.n	8000fca <__aeabi_dadd+0x23e>
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	4314      	orrs	r4, r2
 8000fca:	1e63      	subs	r3, r4, #1
 8000fcc:	419c      	sbcs	r4, r3
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	4304      	orrs	r4, r0
 8000fd6:	0763      	lsls	r3, r4, #29
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_dadd+0x250>
 8000fda:	e755      	b.n	8000e88 <__aeabi_dadd+0xfc>
 8000fdc:	4652      	mov	r2, sl
 8000fde:	08e3      	lsrs	r3, r4, #3
 8000fe0:	0752      	lsls	r2, r2, #29
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	4652      	mov	r2, sl
 8000fe6:	0037      	movs	r7, r6
 8000fe8:	08d1      	lsrs	r1, r2, #3
 8000fea:	4a43      	ldr	r2, [pc, #268]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000fec:	4297      	cmp	r7, r2
 8000fee:	d01f      	beq.n	8001030 <__aeabi_dadd+0x2a4>
 8000ff0:	0309      	lsls	r1, r1, #12
 8000ff2:	057a      	lsls	r2, r7, #21
 8000ff4:	0b0c      	lsrs	r4, r1, #12
 8000ff6:	0d52      	lsrs	r2, r2, #21
 8000ff8:	e764      	b.n	8000ec4 <__aeabi_dadd+0x138>
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	464c      	mov	r4, r9
 8000ffe:	4314      	orrs	r4, r2
 8001000:	1e62      	subs	r2, r4, #1
 8001002:	4194      	sbcs	r4, r2
 8001004:	18e4      	adds	r4, r4, r3
 8001006:	429c      	cmp	r4, r3
 8001008:	4192      	sbcs	r2, r2
 800100a:	4252      	negs	r2, r2
 800100c:	4692      	mov	sl, r2
 800100e:	448a      	add	sl, r1
 8001010:	4653      	mov	r3, sl
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	d5df      	bpl.n	8000fd6 <__aeabi_dadd+0x24a>
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <__aeabi_dadd+0x36c>)
 8001018:	3601      	adds	r6, #1
 800101a:	429e      	cmp	r6, r3
 800101c:	d000      	beq.n	8001020 <__aeabi_dadd+0x294>
 800101e:	e0b3      	b.n	8001188 <__aeabi_dadd+0x3fc>
 8001020:	0032      	movs	r2, r6
 8001022:	2400      	movs	r4, #0
 8001024:	2300      	movs	r3, #0
 8001026:	e74d      	b.n	8000ec4 <__aeabi_dadd+0x138>
 8001028:	074a      	lsls	r2, r1, #29
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	4313      	orrs	r3, r2
 800102e:	08c9      	lsrs	r1, r1, #3
 8001030:	001a      	movs	r2, r3
 8001032:	430a      	orrs	r2, r1
 8001034:	d100      	bne.n	8001038 <__aeabi_dadd+0x2ac>
 8001036:	e200      	b.n	800143a <__aeabi_dadd+0x6ae>
 8001038:	2480      	movs	r4, #128	; 0x80
 800103a:	0324      	lsls	r4, r4, #12
 800103c:	430c      	orrs	r4, r1
 800103e:	0324      	lsls	r4, r4, #12
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <__aeabi_dadd+0x36c>)
 8001042:	0b24      	lsrs	r4, r4, #12
 8001044:	e73e      	b.n	8000ec4 <__aeabi_dadd+0x138>
 8001046:	0020      	movs	r0, r4
 8001048:	f001 fdb6 	bl	8002bb8 <__clzsi2>
 800104c:	0003      	movs	r3, r0
 800104e:	3318      	adds	r3, #24
 8001050:	2b1f      	cmp	r3, #31
 8001052:	dc00      	bgt.n	8001056 <__aeabi_dadd+0x2ca>
 8001054:	e6f7      	b.n	8000e46 <__aeabi_dadd+0xba>
 8001056:	0022      	movs	r2, r4
 8001058:	3808      	subs	r0, #8
 800105a:	4082      	lsls	r2, r0
 800105c:	2400      	movs	r4, #0
 800105e:	42b3      	cmp	r3, r6
 8001060:	db00      	blt.n	8001064 <__aeabi_dadd+0x2d8>
 8001062:	e6fc      	b.n	8000e5e <__aeabi_dadd+0xd2>
 8001064:	1af6      	subs	r6, r6, r3
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <__aeabi_dadd+0x370>)
 8001068:	401a      	ands	r2, r3
 800106a:	4692      	mov	sl, r2
 800106c:	e70a      	b.n	8000e84 <__aeabi_dadd+0xf8>
 800106e:	2f00      	cmp	r7, #0
 8001070:	d02b      	beq.n	80010ca <__aeabi_dadd+0x33e>
 8001072:	1b97      	subs	r7, r2, r6
 8001074:	2e00      	cmp	r6, #0
 8001076:	d100      	bne.n	800107a <__aeabi_dadd+0x2ee>
 8001078:	e0b8      	b.n	80011ec <__aeabi_dadd+0x460>
 800107a:	4c1f      	ldr	r4, [pc, #124]	; (80010f8 <__aeabi_dadd+0x36c>)
 800107c:	42a2      	cmp	r2, r4
 800107e:	d100      	bne.n	8001082 <__aeabi_dadd+0x2f6>
 8001080:	e11c      	b.n	80012bc <__aeabi_dadd+0x530>
 8001082:	2480      	movs	r4, #128	; 0x80
 8001084:	0424      	lsls	r4, r4, #16
 8001086:	4321      	orrs	r1, r4
 8001088:	2f38      	cmp	r7, #56	; 0x38
 800108a:	dd00      	ble.n	800108e <__aeabi_dadd+0x302>
 800108c:	e11e      	b.n	80012cc <__aeabi_dadd+0x540>
 800108e:	2f1f      	cmp	r7, #31
 8001090:	dd00      	ble.n	8001094 <__aeabi_dadd+0x308>
 8001092:	e19e      	b.n	80013d2 <__aeabi_dadd+0x646>
 8001094:	2620      	movs	r6, #32
 8001096:	000c      	movs	r4, r1
 8001098:	1bf6      	subs	r6, r6, r7
 800109a:	0018      	movs	r0, r3
 800109c:	40b3      	lsls	r3, r6
 800109e:	40b4      	lsls	r4, r6
 80010a0:	40f8      	lsrs	r0, r7
 80010a2:	1e5e      	subs	r6, r3, #1
 80010a4:	41b3      	sbcs	r3, r6
 80010a6:	40f9      	lsrs	r1, r7
 80010a8:	4304      	orrs	r4, r0
 80010aa:	431c      	orrs	r4, r3
 80010ac:	4489      	add	r9, r1
 80010ae:	4444      	add	r4, r8
 80010b0:	4544      	cmp	r4, r8
 80010b2:	419b      	sbcs	r3, r3
 80010b4:	425b      	negs	r3, r3
 80010b6:	444b      	add	r3, r9
 80010b8:	469a      	mov	sl, r3
 80010ba:	0016      	movs	r6, r2
 80010bc:	e7a8      	b.n	8001010 <__aeabi_dadd+0x284>
 80010be:	4642      	mov	r2, r8
 80010c0:	464c      	mov	r4, r9
 80010c2:	4314      	orrs	r4, r2
 80010c4:	1e62      	subs	r2, r4, #1
 80010c6:	4194      	sbcs	r4, r2
 80010c8:	e6a6      	b.n	8000e18 <__aeabi_dadd+0x8c>
 80010ca:	4c0d      	ldr	r4, [pc, #52]	; (8001100 <__aeabi_dadd+0x374>)
 80010cc:	1c72      	adds	r2, r6, #1
 80010ce:	4222      	tst	r2, r4
 80010d0:	d000      	beq.n	80010d4 <__aeabi_dadd+0x348>
 80010d2:	e0a8      	b.n	8001226 <__aeabi_dadd+0x49a>
 80010d4:	000a      	movs	r2, r1
 80010d6:	431a      	orrs	r2, r3
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dadd+0x352>
 80010dc:	e10a      	b.n	80012f4 <__aeabi_dadd+0x568>
 80010de:	2a00      	cmp	r2, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dadd+0x358>
 80010e2:	e15e      	b.n	80013a2 <__aeabi_dadd+0x616>
 80010e4:	464a      	mov	r2, r9
 80010e6:	4302      	orrs	r2, r0
 80010e8:	d000      	beq.n	80010ec <__aeabi_dadd+0x360>
 80010ea:	e161      	b.n	80013b0 <__aeabi_dadd+0x624>
 80010ec:	074a      	lsls	r2, r1, #29
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	08c9      	lsrs	r1, r1, #3
 80010f4:	e77c      	b.n	8000ff0 <__aeabi_dadd+0x264>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	ff7fffff 	.word	0xff7fffff
 8001100:	000007fe 	.word	0x000007fe
 8001104:	4ccf      	ldr	r4, [pc, #828]	; (8001444 <__aeabi_dadd+0x6b8>)
 8001106:	42a2      	cmp	r2, r4
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x380>
 800110a:	e0ce      	b.n	80012aa <__aeabi_dadd+0x51e>
 800110c:	2480      	movs	r4, #128	; 0x80
 800110e:	0424      	lsls	r4, r4, #16
 8001110:	4321      	orrs	r1, r4
 8001112:	2f38      	cmp	r7, #56	; 0x38
 8001114:	dc5b      	bgt.n	80011ce <__aeabi_dadd+0x442>
 8001116:	2f1f      	cmp	r7, #31
 8001118:	dd00      	ble.n	800111c <__aeabi_dadd+0x390>
 800111a:	e0dc      	b.n	80012d6 <__aeabi_dadd+0x54a>
 800111c:	2520      	movs	r5, #32
 800111e:	000c      	movs	r4, r1
 8001120:	1bed      	subs	r5, r5, r7
 8001122:	001e      	movs	r6, r3
 8001124:	40ab      	lsls	r3, r5
 8001126:	40ac      	lsls	r4, r5
 8001128:	40fe      	lsrs	r6, r7
 800112a:	1e5d      	subs	r5, r3, #1
 800112c:	41ab      	sbcs	r3, r5
 800112e:	4334      	orrs	r4, r6
 8001130:	40f9      	lsrs	r1, r7
 8001132:	431c      	orrs	r4, r3
 8001134:	464b      	mov	r3, r9
 8001136:	1a5b      	subs	r3, r3, r1
 8001138:	4699      	mov	r9, r3
 800113a:	e04c      	b.n	80011d6 <__aeabi_dadd+0x44a>
 800113c:	464a      	mov	r2, r9
 800113e:	1a1c      	subs	r4, r3, r0
 8001140:	1a88      	subs	r0, r1, r2
 8001142:	42a3      	cmp	r3, r4
 8001144:	4192      	sbcs	r2, r2
 8001146:	4252      	negs	r2, r2
 8001148:	4692      	mov	sl, r2
 800114a:	0002      	movs	r2, r0
 800114c:	4650      	mov	r0, sl
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	4692      	mov	sl, r2
 8001152:	0212      	lsls	r2, r2, #8
 8001154:	d478      	bmi.n	8001248 <__aeabi_dadd+0x4bc>
 8001156:	4653      	mov	r3, sl
 8001158:	4323      	orrs	r3, r4
 800115a:	d000      	beq.n	800115e <__aeabi_dadd+0x3d2>
 800115c:	e66a      	b.n	8000e34 <__aeabi_dadd+0xa8>
 800115e:	2100      	movs	r1, #0
 8001160:	2500      	movs	r5, #0
 8001162:	e745      	b.n	8000ff0 <__aeabi_dadd+0x264>
 8001164:	074a      	lsls	r2, r1, #29
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	4313      	orrs	r3, r2
 800116a:	08c9      	lsrs	r1, r1, #3
 800116c:	e73d      	b.n	8000fea <__aeabi_dadd+0x25e>
 800116e:	181c      	adds	r4, r3, r0
 8001170:	429c      	cmp	r4, r3
 8001172:	419b      	sbcs	r3, r3
 8001174:	4449      	add	r1, r9
 8001176:	468a      	mov	sl, r1
 8001178:	425b      	negs	r3, r3
 800117a:	449a      	add	sl, r3
 800117c:	4653      	mov	r3, sl
 800117e:	2601      	movs	r6, #1
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	d400      	bmi.n	8001186 <__aeabi_dadd+0x3fa>
 8001184:	e727      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001186:	2602      	movs	r6, #2
 8001188:	4652      	mov	r2, sl
 800118a:	4baf      	ldr	r3, [pc, #700]	; (8001448 <__aeabi_dadd+0x6bc>)
 800118c:	2101      	movs	r1, #1
 800118e:	401a      	ands	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	4021      	ands	r1, r4
 8001194:	0862      	lsrs	r2, r4, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	07dc      	lsls	r4, r3, #31
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	469a      	mov	sl, r3
 800119e:	4314      	orrs	r4, r2
 80011a0:	e670      	b.n	8000e84 <__aeabi_dadd+0xf8>
 80011a2:	003a      	movs	r2, r7
 80011a4:	464c      	mov	r4, r9
 80011a6:	3a20      	subs	r2, #32
 80011a8:	40d4      	lsrs	r4, r2
 80011aa:	46a4      	mov	ip, r4
 80011ac:	2f20      	cmp	r7, #32
 80011ae:	d007      	beq.n	80011c0 <__aeabi_dadd+0x434>
 80011b0:	2240      	movs	r2, #64	; 0x40
 80011b2:	4648      	mov	r0, r9
 80011b4:	1bd2      	subs	r2, r2, r7
 80011b6:	4090      	lsls	r0, r2
 80011b8:	0002      	movs	r2, r0
 80011ba:	4640      	mov	r0, r8
 80011bc:	4310      	orrs	r0, r2
 80011be:	4680      	mov	r8, r0
 80011c0:	4640      	mov	r0, r8
 80011c2:	1e42      	subs	r2, r0, #1
 80011c4:	4190      	sbcs	r0, r2
 80011c6:	4662      	mov	r2, ip
 80011c8:	0004      	movs	r4, r0
 80011ca:	4314      	orrs	r4, r2
 80011cc:	e624      	b.n	8000e18 <__aeabi_dadd+0x8c>
 80011ce:	4319      	orrs	r1, r3
 80011d0:	000c      	movs	r4, r1
 80011d2:	1e63      	subs	r3, r4, #1
 80011d4:	419c      	sbcs	r4, r3
 80011d6:	4643      	mov	r3, r8
 80011d8:	1b1c      	subs	r4, r3, r4
 80011da:	45a0      	cmp	r8, r4
 80011dc:	419b      	sbcs	r3, r3
 80011de:	4649      	mov	r1, r9
 80011e0:	425b      	negs	r3, r3
 80011e2:	1acb      	subs	r3, r1, r3
 80011e4:	469a      	mov	sl, r3
 80011e6:	4665      	mov	r5, ip
 80011e8:	0016      	movs	r6, r2
 80011ea:	e61b      	b.n	8000e24 <__aeabi_dadd+0x98>
 80011ec:	000c      	movs	r4, r1
 80011ee:	431c      	orrs	r4, r3
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dadd+0x468>
 80011f2:	e0c7      	b.n	8001384 <__aeabi_dadd+0x5f8>
 80011f4:	1e7c      	subs	r4, r7, #1
 80011f6:	2f01      	cmp	r7, #1
 80011f8:	d100      	bne.n	80011fc <__aeabi_dadd+0x470>
 80011fa:	e0f9      	b.n	80013f0 <__aeabi_dadd+0x664>
 80011fc:	4e91      	ldr	r6, [pc, #580]	; (8001444 <__aeabi_dadd+0x6b8>)
 80011fe:	42b7      	cmp	r7, r6
 8001200:	d05c      	beq.n	80012bc <__aeabi_dadd+0x530>
 8001202:	0027      	movs	r7, r4
 8001204:	e740      	b.n	8001088 <__aeabi_dadd+0x2fc>
 8001206:	2220      	movs	r2, #32
 8001208:	464c      	mov	r4, r9
 800120a:	4640      	mov	r0, r8
 800120c:	1bd2      	subs	r2, r2, r7
 800120e:	4094      	lsls	r4, r2
 8001210:	40f8      	lsrs	r0, r7
 8001212:	4304      	orrs	r4, r0
 8001214:	4640      	mov	r0, r8
 8001216:	4090      	lsls	r0, r2
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	464a      	mov	r2, r9
 800121e:	40fa      	lsrs	r2, r7
 8001220:	4304      	orrs	r4, r0
 8001222:	1889      	adds	r1, r1, r2
 8001224:	e6ee      	b.n	8001004 <__aeabi_dadd+0x278>
 8001226:	4c87      	ldr	r4, [pc, #540]	; (8001444 <__aeabi_dadd+0x6b8>)
 8001228:	42a2      	cmp	r2, r4
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x4a2>
 800122c:	e6f9      	b.n	8001022 <__aeabi_dadd+0x296>
 800122e:	1818      	adds	r0, r3, r0
 8001230:	4298      	cmp	r0, r3
 8001232:	419b      	sbcs	r3, r3
 8001234:	4449      	add	r1, r9
 8001236:	425b      	negs	r3, r3
 8001238:	18cb      	adds	r3, r1, r3
 800123a:	07dc      	lsls	r4, r3, #31
 800123c:	0840      	lsrs	r0, r0, #1
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	469a      	mov	sl, r3
 8001242:	0016      	movs	r6, r2
 8001244:	4304      	orrs	r4, r0
 8001246:	e6c6      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001248:	4642      	mov	r2, r8
 800124a:	1ad4      	subs	r4, r2, r3
 800124c:	45a0      	cmp	r8, r4
 800124e:	4180      	sbcs	r0, r0
 8001250:	464b      	mov	r3, r9
 8001252:	4240      	negs	r0, r0
 8001254:	1a59      	subs	r1, r3, r1
 8001256:	1a0b      	subs	r3, r1, r0
 8001258:	469a      	mov	sl, r3
 800125a:	4665      	mov	r5, ip
 800125c:	e5ea      	b.n	8000e34 <__aeabi_dadd+0xa8>
 800125e:	464b      	mov	r3, r9
 8001260:	464a      	mov	r2, r9
 8001262:	08c0      	lsrs	r0, r0, #3
 8001264:	075b      	lsls	r3, r3, #29
 8001266:	4665      	mov	r5, ip
 8001268:	4303      	orrs	r3, r0
 800126a:	08d1      	lsrs	r1, r2, #3
 800126c:	e6bd      	b.n	8000fea <__aeabi_dadd+0x25e>
 800126e:	2a00      	cmp	r2, #0
 8001270:	d000      	beq.n	8001274 <__aeabi_dadd+0x4e8>
 8001272:	e08e      	b.n	8001392 <__aeabi_dadd+0x606>
 8001274:	464b      	mov	r3, r9
 8001276:	4303      	orrs	r3, r0
 8001278:	d117      	bne.n	80012aa <__aeabi_dadd+0x51e>
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	2500      	movs	r5, #0
 800127e:	0309      	lsls	r1, r1, #12
 8001280:	e6da      	b.n	8001038 <__aeabi_dadd+0x2ac>
 8001282:	074a      	lsls	r2, r1, #29
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	4313      	orrs	r3, r2
 8001288:	08c9      	lsrs	r1, r1, #3
 800128a:	e6d1      	b.n	8001030 <__aeabi_dadd+0x2a4>
 800128c:	1a1c      	subs	r4, r3, r0
 800128e:	464a      	mov	r2, r9
 8001290:	42a3      	cmp	r3, r4
 8001292:	419b      	sbcs	r3, r3
 8001294:	1a89      	subs	r1, r1, r2
 8001296:	425b      	negs	r3, r3
 8001298:	1acb      	subs	r3, r1, r3
 800129a:	469a      	mov	sl, r3
 800129c:	2601      	movs	r6, #1
 800129e:	e5c1      	b.n	8000e24 <__aeabi_dadd+0x98>
 80012a0:	074a      	lsls	r2, r1, #29
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	08c9      	lsrs	r1, r1, #3
 80012a8:	e69f      	b.n	8000fea <__aeabi_dadd+0x25e>
 80012aa:	4643      	mov	r3, r8
 80012ac:	08d8      	lsrs	r0, r3, #3
 80012ae:	464b      	mov	r3, r9
 80012b0:	464a      	mov	r2, r9
 80012b2:	075b      	lsls	r3, r3, #29
 80012b4:	4665      	mov	r5, ip
 80012b6:	4303      	orrs	r3, r0
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	e6b9      	b.n	8001030 <__aeabi_dadd+0x2a4>
 80012bc:	4643      	mov	r3, r8
 80012be:	08d8      	lsrs	r0, r3, #3
 80012c0:	464b      	mov	r3, r9
 80012c2:	464a      	mov	r2, r9
 80012c4:	075b      	lsls	r3, r3, #29
 80012c6:	4303      	orrs	r3, r0
 80012c8:	08d1      	lsrs	r1, r2, #3
 80012ca:	e6b1      	b.n	8001030 <__aeabi_dadd+0x2a4>
 80012cc:	4319      	orrs	r1, r3
 80012ce:	000c      	movs	r4, r1
 80012d0:	1e63      	subs	r3, r4, #1
 80012d2:	419c      	sbcs	r4, r3
 80012d4:	e6eb      	b.n	80010ae <__aeabi_dadd+0x322>
 80012d6:	003c      	movs	r4, r7
 80012d8:	000d      	movs	r5, r1
 80012da:	3c20      	subs	r4, #32
 80012dc:	40e5      	lsrs	r5, r4
 80012de:	2f20      	cmp	r7, #32
 80012e0:	d003      	beq.n	80012ea <__aeabi_dadd+0x55e>
 80012e2:	2440      	movs	r4, #64	; 0x40
 80012e4:	1be4      	subs	r4, r4, r7
 80012e6:	40a1      	lsls	r1, r4
 80012e8:	430b      	orrs	r3, r1
 80012ea:	001c      	movs	r4, r3
 80012ec:	1e63      	subs	r3, r4, #1
 80012ee:	419c      	sbcs	r4, r3
 80012f0:	432c      	orrs	r4, r5
 80012f2:	e770      	b.n	80011d6 <__aeabi_dadd+0x44a>
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d0e1      	beq.n	80012bc <__aeabi_dadd+0x530>
 80012f8:	464a      	mov	r2, r9
 80012fa:	4302      	orrs	r2, r0
 80012fc:	d0c1      	beq.n	8001282 <__aeabi_dadd+0x4f6>
 80012fe:	074a      	lsls	r2, r1, #29
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	4313      	orrs	r3, r2
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	08c9      	lsrs	r1, r1, #3
 8001308:	0312      	lsls	r2, r2, #12
 800130a:	4211      	tst	r1, r2
 800130c:	d008      	beq.n	8001320 <__aeabi_dadd+0x594>
 800130e:	4648      	mov	r0, r9
 8001310:	08c4      	lsrs	r4, r0, #3
 8001312:	4214      	tst	r4, r2
 8001314:	d104      	bne.n	8001320 <__aeabi_dadd+0x594>
 8001316:	4643      	mov	r3, r8
 8001318:	0021      	movs	r1, r4
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	0742      	lsls	r2, r0, #29
 800131e:	4313      	orrs	r3, r2
 8001320:	0f5a      	lsrs	r2, r3, #29
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	0752      	lsls	r2, r2, #29
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	4313      	orrs	r3, r2
 800132a:	e681      	b.n	8001030 <__aeabi_dadd+0x2a4>
 800132c:	464b      	mov	r3, r9
 800132e:	4303      	orrs	r3, r0
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x5a8>
 8001332:	e714      	b.n	800115e <__aeabi_dadd+0x3d2>
 8001334:	464b      	mov	r3, r9
 8001336:	464a      	mov	r2, r9
 8001338:	08c0      	lsrs	r0, r0, #3
 800133a:	075b      	lsls	r3, r3, #29
 800133c:	4665      	mov	r5, ip
 800133e:	4303      	orrs	r3, r0
 8001340:	08d1      	lsrs	r1, r2, #3
 8001342:	e655      	b.n	8000ff0 <__aeabi_dadd+0x264>
 8001344:	1ac4      	subs	r4, r0, r3
 8001346:	45a0      	cmp	r8, r4
 8001348:	4180      	sbcs	r0, r0
 800134a:	464b      	mov	r3, r9
 800134c:	4240      	negs	r0, r0
 800134e:	1a59      	subs	r1, r3, r1
 8001350:	1a0b      	subs	r3, r1, r0
 8001352:	469a      	mov	sl, r3
 8001354:	4665      	mov	r5, ip
 8001356:	2601      	movs	r6, #1
 8001358:	e564      	b.n	8000e24 <__aeabi_dadd+0x98>
 800135a:	1a1c      	subs	r4, r3, r0
 800135c:	464a      	mov	r2, r9
 800135e:	42a3      	cmp	r3, r4
 8001360:	4180      	sbcs	r0, r0
 8001362:	1a8a      	subs	r2, r1, r2
 8001364:	4240      	negs	r0, r0
 8001366:	1a12      	subs	r2, r2, r0
 8001368:	4692      	mov	sl, r2
 800136a:	0212      	lsls	r2, r2, #8
 800136c:	d549      	bpl.n	8001402 <__aeabi_dadd+0x676>
 800136e:	4642      	mov	r2, r8
 8001370:	1ad4      	subs	r4, r2, r3
 8001372:	45a0      	cmp	r8, r4
 8001374:	4180      	sbcs	r0, r0
 8001376:	464b      	mov	r3, r9
 8001378:	4240      	negs	r0, r0
 800137a:	1a59      	subs	r1, r3, r1
 800137c:	1a0b      	subs	r3, r1, r0
 800137e:	469a      	mov	sl, r3
 8001380:	4665      	mov	r5, ip
 8001382:	e57f      	b.n	8000e84 <__aeabi_dadd+0xf8>
 8001384:	464b      	mov	r3, r9
 8001386:	464a      	mov	r2, r9
 8001388:	08c0      	lsrs	r0, r0, #3
 800138a:	075b      	lsls	r3, r3, #29
 800138c:	4303      	orrs	r3, r0
 800138e:	08d1      	lsrs	r1, r2, #3
 8001390:	e62b      	b.n	8000fea <__aeabi_dadd+0x25e>
 8001392:	464a      	mov	r2, r9
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	4302      	orrs	r2, r0
 8001398:	d138      	bne.n	800140c <__aeabi_dadd+0x680>
 800139a:	074a      	lsls	r2, r1, #29
 800139c:	4313      	orrs	r3, r2
 800139e:	08c9      	lsrs	r1, r1, #3
 80013a0:	e646      	b.n	8001030 <__aeabi_dadd+0x2a4>
 80013a2:	464b      	mov	r3, r9
 80013a4:	464a      	mov	r2, r9
 80013a6:	08c0      	lsrs	r0, r0, #3
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	4303      	orrs	r3, r0
 80013ac:	08d1      	lsrs	r1, r2, #3
 80013ae:	e61f      	b.n	8000ff0 <__aeabi_dadd+0x264>
 80013b0:	181c      	adds	r4, r3, r0
 80013b2:	429c      	cmp	r4, r3
 80013b4:	419b      	sbcs	r3, r3
 80013b6:	4449      	add	r1, r9
 80013b8:	468a      	mov	sl, r1
 80013ba:	425b      	negs	r3, r3
 80013bc:	449a      	add	sl, r3
 80013be:	4653      	mov	r3, sl
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	d400      	bmi.n	80013c6 <__aeabi_dadd+0x63a>
 80013c4:	e607      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 80013c6:	4652      	mov	r2, sl
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <__aeabi_dadd+0x6bc>)
 80013ca:	2601      	movs	r6, #1
 80013cc:	401a      	ands	r2, r3
 80013ce:	4692      	mov	sl, r2
 80013d0:	e601      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 80013d2:	003c      	movs	r4, r7
 80013d4:	000e      	movs	r6, r1
 80013d6:	3c20      	subs	r4, #32
 80013d8:	40e6      	lsrs	r6, r4
 80013da:	2f20      	cmp	r7, #32
 80013dc:	d003      	beq.n	80013e6 <__aeabi_dadd+0x65a>
 80013de:	2440      	movs	r4, #64	; 0x40
 80013e0:	1be4      	subs	r4, r4, r7
 80013e2:	40a1      	lsls	r1, r4
 80013e4:	430b      	orrs	r3, r1
 80013e6:	001c      	movs	r4, r3
 80013e8:	1e63      	subs	r3, r4, #1
 80013ea:	419c      	sbcs	r4, r3
 80013ec:	4334      	orrs	r4, r6
 80013ee:	e65e      	b.n	80010ae <__aeabi_dadd+0x322>
 80013f0:	4443      	add	r3, r8
 80013f2:	4283      	cmp	r3, r0
 80013f4:	4180      	sbcs	r0, r0
 80013f6:	4449      	add	r1, r9
 80013f8:	468a      	mov	sl, r1
 80013fa:	4240      	negs	r0, r0
 80013fc:	001c      	movs	r4, r3
 80013fe:	4482      	add	sl, r0
 8001400:	e6bc      	b.n	800117c <__aeabi_dadd+0x3f0>
 8001402:	4653      	mov	r3, sl
 8001404:	4323      	orrs	r3, r4
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x67e>
 8001408:	e6a9      	b.n	800115e <__aeabi_dadd+0x3d2>
 800140a:	e5e4      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 800140c:	074a      	lsls	r2, r1, #29
 800140e:	4313      	orrs	r3, r2
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	0312      	lsls	r2, r2, #12
 8001416:	4211      	tst	r1, r2
 8001418:	d009      	beq.n	800142e <__aeabi_dadd+0x6a2>
 800141a:	4648      	mov	r0, r9
 800141c:	08c4      	lsrs	r4, r0, #3
 800141e:	4214      	tst	r4, r2
 8001420:	d105      	bne.n	800142e <__aeabi_dadd+0x6a2>
 8001422:	4643      	mov	r3, r8
 8001424:	4665      	mov	r5, ip
 8001426:	0021      	movs	r1, r4
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	0742      	lsls	r2, r0, #29
 800142c:	4313      	orrs	r3, r2
 800142e:	0f5a      	lsrs	r2, r3, #29
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	0752      	lsls	r2, r2, #29
 8001436:	4313      	orrs	r3, r2
 8001438:	e5fa      	b.n	8001030 <__aeabi_dadd+0x2a4>
 800143a:	2300      	movs	r3, #0
 800143c:	4a01      	ldr	r2, [pc, #4]	; (8001444 <__aeabi_dadd+0x6b8>)
 800143e:	001c      	movs	r4, r3
 8001440:	e540      	b.n	8000ec4 <__aeabi_dadd+0x138>
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	000007ff 	.word	0x000007ff
 8001448:	ff7fffff 	.word	0xff7fffff

0800144c <__aeabi_ddiv>:
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	4657      	mov	r7, sl
 8001450:	464e      	mov	r6, r9
 8001452:	4645      	mov	r5, r8
 8001454:	46de      	mov	lr, fp
 8001456:	b5e0      	push	{r5, r6, r7, lr}
 8001458:	030c      	lsls	r4, r1, #12
 800145a:	001f      	movs	r7, r3
 800145c:	004b      	lsls	r3, r1, #1
 800145e:	4681      	mov	r9, r0
 8001460:	4692      	mov	sl, r2
 8001462:	0005      	movs	r5, r0
 8001464:	b085      	sub	sp, #20
 8001466:	0b24      	lsrs	r4, r4, #12
 8001468:	0d5b      	lsrs	r3, r3, #21
 800146a:	0fce      	lsrs	r6, r1, #31
 800146c:	2b00      	cmp	r3, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_ddiv+0x26>
 8001470:	e152      	b.n	8001718 <__aeabi_ddiv+0x2cc>
 8001472:	4ad2      	ldr	r2, [pc, #840]	; (80017bc <__aeabi_ddiv+0x370>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d100      	bne.n	800147a <__aeabi_ddiv+0x2e>
 8001478:	e16e      	b.n	8001758 <__aeabi_ddiv+0x30c>
 800147a:	0f42      	lsrs	r2, r0, #29
 800147c:	00e4      	lsls	r4, r4, #3
 800147e:	4314      	orrs	r4, r2
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	0412      	lsls	r2, r2, #16
 8001484:	4322      	orrs	r2, r4
 8001486:	4690      	mov	r8, r2
 8001488:	4acd      	ldr	r2, [pc, #820]	; (80017c0 <__aeabi_ddiv+0x374>)
 800148a:	00c5      	lsls	r5, r0, #3
 800148c:	4693      	mov	fp, r2
 800148e:	449b      	add	fp, r3
 8001490:	2300      	movs	r3, #0
 8001492:	4699      	mov	r9, r3
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	033c      	lsls	r4, r7, #12
 8001498:	007b      	lsls	r3, r7, #1
 800149a:	4650      	mov	r0, sl
 800149c:	0b24      	lsrs	r4, r4, #12
 800149e:	0d5b      	lsrs	r3, r3, #21
 80014a0:	0fff      	lsrs	r7, r7, #31
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x5c>
 80014a6:	e11a      	b.n	80016de <__aeabi_ddiv+0x292>
 80014a8:	4ac4      	ldr	r2, [pc, #784]	; (80017bc <__aeabi_ddiv+0x370>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d100      	bne.n	80014b0 <__aeabi_ddiv+0x64>
 80014ae:	e15e      	b.n	800176e <__aeabi_ddiv+0x322>
 80014b0:	0f42      	lsrs	r2, r0, #29
 80014b2:	00e4      	lsls	r4, r4, #3
 80014b4:	4322      	orrs	r2, r4
 80014b6:	2480      	movs	r4, #128	; 0x80
 80014b8:	0424      	lsls	r4, r4, #16
 80014ba:	4314      	orrs	r4, r2
 80014bc:	4ac0      	ldr	r2, [pc, #768]	; (80017c0 <__aeabi_ddiv+0x374>)
 80014be:	00c1      	lsls	r1, r0, #3
 80014c0:	4694      	mov	ip, r2
 80014c2:	465a      	mov	r2, fp
 80014c4:	4463      	add	r3, ip
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	469b      	mov	fp, r3
 80014ca:	2000      	movs	r0, #0
 80014cc:	0033      	movs	r3, r6
 80014ce:	407b      	eors	r3, r7
 80014d0:	469a      	mov	sl, r3
 80014d2:	464b      	mov	r3, r9
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d827      	bhi.n	8001528 <__aeabi_ddiv+0xdc>
 80014d8:	4aba      	ldr	r2, [pc, #744]	; (80017c4 <__aeabi_ddiv+0x378>)
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	58d3      	ldr	r3, [r2, r3]
 80014de:	469f      	mov	pc, r3
 80014e0:	46b2      	mov	sl, r6
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d016      	beq.n	8001516 <__aeabi_ddiv+0xca>
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0xa2>
 80014ec:	e287      	b.n	80019fe <__aeabi_ddiv+0x5b2>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d000      	beq.n	80014f4 <__aeabi_ddiv+0xa8>
 80014f2:	e0d5      	b.n	80016a0 <__aeabi_ddiv+0x254>
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	2500      	movs	r5, #0
 80014fa:	051b      	lsls	r3, r3, #20
 80014fc:	4313      	orrs	r3, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	07d2      	lsls	r2, r2, #31
 8001502:	4313      	orrs	r3, r2
 8001504:	0028      	movs	r0, r5
 8001506:	0019      	movs	r1, r3
 8001508:	b005      	add	sp, #20
 800150a:	bcf0      	pop	{r4, r5, r6, r7}
 800150c:	46bb      	mov	fp, r7
 800150e:	46b2      	mov	sl, r6
 8001510:	46a9      	mov	r9, r5
 8001512:	46a0      	mov	r8, r4
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001516:	2200      	movs	r2, #0
 8001518:	2500      	movs	r5, #0
 800151a:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <__aeabi_ddiv+0x370>)
 800151c:	e7ed      	b.n	80014fa <__aeabi_ddiv+0xae>
 800151e:	46ba      	mov	sl, r7
 8001520:	46a0      	mov	r8, r4
 8001522:	000d      	movs	r5, r1
 8001524:	9000      	str	r0, [sp, #0]
 8001526:	e7dc      	b.n	80014e2 <__aeabi_ddiv+0x96>
 8001528:	4544      	cmp	r4, r8
 800152a:	d200      	bcs.n	800152e <__aeabi_ddiv+0xe2>
 800152c:	e1c4      	b.n	80018b8 <__aeabi_ddiv+0x46c>
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0xe6>
 8001530:	e1bf      	b.n	80018b2 <__aeabi_ddiv+0x466>
 8001532:	2301      	movs	r3, #1
 8001534:	425b      	negs	r3, r3
 8001536:	469c      	mov	ip, r3
 8001538:	002e      	movs	r6, r5
 800153a:	4640      	mov	r0, r8
 800153c:	2500      	movs	r5, #0
 800153e:	44e3      	add	fp, ip
 8001540:	0223      	lsls	r3, r4, #8
 8001542:	0e0c      	lsrs	r4, r1, #24
 8001544:	431c      	orrs	r4, r3
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	4699      	mov	r9, r3
 800154a:	0423      	lsls	r3, r4, #16
 800154c:	020a      	lsls	r2, r1, #8
 800154e:	0c1f      	lsrs	r7, r3, #16
 8001550:	4649      	mov	r1, r9
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	9701      	str	r7, [sp, #4]
 8001556:	f7fe fe5b 	bl	8000210 <__aeabi_uidivmod>
 800155a:	0002      	movs	r2, r0
 800155c:	437a      	muls	r2, r7
 800155e:	040b      	lsls	r3, r1, #16
 8001560:	0c31      	lsrs	r1, r6, #16
 8001562:	4680      	mov	r8, r0
 8001564:	4319      	orrs	r1, r3
 8001566:	428a      	cmp	r2, r1
 8001568:	d907      	bls.n	800157a <__aeabi_ddiv+0x12e>
 800156a:	2301      	movs	r3, #1
 800156c:	425b      	negs	r3, r3
 800156e:	469c      	mov	ip, r3
 8001570:	1909      	adds	r1, r1, r4
 8001572:	44e0      	add	r8, ip
 8001574:	428c      	cmp	r4, r1
 8001576:	d800      	bhi.n	800157a <__aeabi_ddiv+0x12e>
 8001578:	e201      	b.n	800197e <__aeabi_ddiv+0x532>
 800157a:	1a88      	subs	r0, r1, r2
 800157c:	4649      	mov	r1, r9
 800157e:	f7fe fe47 	bl	8000210 <__aeabi_uidivmod>
 8001582:	9a01      	ldr	r2, [sp, #4]
 8001584:	0436      	lsls	r6, r6, #16
 8001586:	4342      	muls	r2, r0
 8001588:	0409      	lsls	r1, r1, #16
 800158a:	0c36      	lsrs	r6, r6, #16
 800158c:	0003      	movs	r3, r0
 800158e:	430e      	orrs	r6, r1
 8001590:	42b2      	cmp	r2, r6
 8001592:	d904      	bls.n	800159e <__aeabi_ddiv+0x152>
 8001594:	1936      	adds	r6, r6, r4
 8001596:	3b01      	subs	r3, #1
 8001598:	42b4      	cmp	r4, r6
 800159a:	d800      	bhi.n	800159e <__aeabi_ddiv+0x152>
 800159c:	e1e9      	b.n	8001972 <__aeabi_ddiv+0x526>
 800159e:	1ab0      	subs	r0, r6, r2
 80015a0:	4642      	mov	r2, r8
 80015a2:	9e00      	ldr	r6, [sp, #0]
 80015a4:	0412      	lsls	r2, r2, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	0c33      	lsrs	r3, r6, #16
 80015aa:	001f      	movs	r7, r3
 80015ac:	0c11      	lsrs	r1, r2, #16
 80015ae:	4690      	mov	r8, r2
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	0413      	lsls	r3, r2, #16
 80015b4:	0432      	lsls	r2, r6, #16
 80015b6:	0c16      	lsrs	r6, r2, #16
 80015b8:	0032      	movs	r2, r6
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	435a      	muls	r2, r3
 80015be:	9603      	str	r6, [sp, #12]
 80015c0:	437b      	muls	r3, r7
 80015c2:	434e      	muls	r6, r1
 80015c4:	4379      	muls	r1, r7
 80015c6:	0c17      	lsrs	r7, r2, #16
 80015c8:	46bc      	mov	ip, r7
 80015ca:	199b      	adds	r3, r3, r6
 80015cc:	4463      	add	r3, ip
 80015ce:	429e      	cmp	r6, r3
 80015d0:	d903      	bls.n	80015da <__aeabi_ddiv+0x18e>
 80015d2:	2680      	movs	r6, #128	; 0x80
 80015d4:	0276      	lsls	r6, r6, #9
 80015d6:	46b4      	mov	ip, r6
 80015d8:	4461      	add	r1, ip
 80015da:	0c1e      	lsrs	r6, r3, #16
 80015dc:	1871      	adds	r1, r6, r1
 80015de:	0416      	lsls	r6, r2, #16
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	0c36      	lsrs	r6, r6, #16
 80015e4:	199e      	adds	r6, r3, r6
 80015e6:	4288      	cmp	r0, r1
 80015e8:	d302      	bcc.n	80015f0 <__aeabi_ddiv+0x1a4>
 80015ea:	d112      	bne.n	8001612 <__aeabi_ddiv+0x1c6>
 80015ec:	42b5      	cmp	r5, r6
 80015ee:	d210      	bcs.n	8001612 <__aeabi_ddiv+0x1c6>
 80015f0:	4643      	mov	r3, r8
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	9b00      	ldr	r3, [sp, #0]
 80015f6:	469c      	mov	ip, r3
 80015f8:	4465      	add	r5, ip
 80015fa:	001f      	movs	r7, r3
 80015fc:	429d      	cmp	r5, r3
 80015fe:	419b      	sbcs	r3, r3
 8001600:	425b      	negs	r3, r3
 8001602:	191b      	adds	r3, r3, r4
 8001604:	18c0      	adds	r0, r0, r3
 8001606:	4284      	cmp	r4, r0
 8001608:	d200      	bcs.n	800160c <__aeabi_ddiv+0x1c0>
 800160a:	e19e      	b.n	800194a <__aeabi_ddiv+0x4fe>
 800160c:	d100      	bne.n	8001610 <__aeabi_ddiv+0x1c4>
 800160e:	e199      	b.n	8001944 <__aeabi_ddiv+0x4f8>
 8001610:	4690      	mov	r8, r2
 8001612:	1bae      	subs	r6, r5, r6
 8001614:	42b5      	cmp	r5, r6
 8001616:	41ad      	sbcs	r5, r5
 8001618:	1a40      	subs	r0, r0, r1
 800161a:	426d      	negs	r5, r5
 800161c:	1b40      	subs	r0, r0, r5
 800161e:	4284      	cmp	r4, r0
 8001620:	d100      	bne.n	8001624 <__aeabi_ddiv+0x1d8>
 8001622:	e1d2      	b.n	80019ca <__aeabi_ddiv+0x57e>
 8001624:	4649      	mov	r1, r9
 8001626:	f7fe fdf3 	bl	8000210 <__aeabi_uidivmod>
 800162a:	9a01      	ldr	r2, [sp, #4]
 800162c:	040b      	lsls	r3, r1, #16
 800162e:	4342      	muls	r2, r0
 8001630:	0c31      	lsrs	r1, r6, #16
 8001632:	0005      	movs	r5, r0
 8001634:	4319      	orrs	r1, r3
 8001636:	428a      	cmp	r2, r1
 8001638:	d900      	bls.n	800163c <__aeabi_ddiv+0x1f0>
 800163a:	e16c      	b.n	8001916 <__aeabi_ddiv+0x4ca>
 800163c:	1a88      	subs	r0, r1, r2
 800163e:	4649      	mov	r1, r9
 8001640:	f7fe fde6 	bl	8000210 <__aeabi_uidivmod>
 8001644:	9a01      	ldr	r2, [sp, #4]
 8001646:	0436      	lsls	r6, r6, #16
 8001648:	4342      	muls	r2, r0
 800164a:	0409      	lsls	r1, r1, #16
 800164c:	0c36      	lsrs	r6, r6, #16
 800164e:	0003      	movs	r3, r0
 8001650:	430e      	orrs	r6, r1
 8001652:	42b2      	cmp	r2, r6
 8001654:	d900      	bls.n	8001658 <__aeabi_ddiv+0x20c>
 8001656:	e153      	b.n	8001900 <__aeabi_ddiv+0x4b4>
 8001658:	9803      	ldr	r0, [sp, #12]
 800165a:	1ab6      	subs	r6, r6, r2
 800165c:	0002      	movs	r2, r0
 800165e:	042d      	lsls	r5, r5, #16
 8001660:	431d      	orrs	r5, r3
 8001662:	9f02      	ldr	r7, [sp, #8]
 8001664:	042b      	lsls	r3, r5, #16
 8001666:	0c1b      	lsrs	r3, r3, #16
 8001668:	435a      	muls	r2, r3
 800166a:	437b      	muls	r3, r7
 800166c:	469c      	mov	ip, r3
 800166e:	0c29      	lsrs	r1, r5, #16
 8001670:	4348      	muls	r0, r1
 8001672:	0c13      	lsrs	r3, r2, #16
 8001674:	4484      	add	ip, r0
 8001676:	4463      	add	r3, ip
 8001678:	4379      	muls	r1, r7
 800167a:	4298      	cmp	r0, r3
 800167c:	d903      	bls.n	8001686 <__aeabi_ddiv+0x23a>
 800167e:	2080      	movs	r0, #128	; 0x80
 8001680:	0240      	lsls	r0, r0, #9
 8001682:	4684      	mov	ip, r0
 8001684:	4461      	add	r1, ip
 8001686:	0c18      	lsrs	r0, r3, #16
 8001688:	0412      	lsls	r2, r2, #16
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	0c12      	lsrs	r2, r2, #16
 800168e:	1840      	adds	r0, r0, r1
 8001690:	189b      	adds	r3, r3, r2
 8001692:	4286      	cmp	r6, r0
 8001694:	d200      	bcs.n	8001698 <__aeabi_ddiv+0x24c>
 8001696:	e100      	b.n	800189a <__aeabi_ddiv+0x44e>
 8001698:	d100      	bne.n	800169c <__aeabi_ddiv+0x250>
 800169a:	e0fb      	b.n	8001894 <__aeabi_ddiv+0x448>
 800169c:	2301      	movs	r3, #1
 800169e:	431d      	orrs	r5, r3
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <__aeabi_ddiv+0x37c>)
 80016a2:	445b      	add	r3, fp
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dc00      	bgt.n	80016aa <__aeabi_ddiv+0x25e>
 80016a8:	e0aa      	b.n	8001800 <__aeabi_ddiv+0x3b4>
 80016aa:	076a      	lsls	r2, r5, #29
 80016ac:	d000      	beq.n	80016b0 <__aeabi_ddiv+0x264>
 80016ae:	e13d      	b.n	800192c <__aeabi_ddiv+0x4e0>
 80016b0:	08e9      	lsrs	r1, r5, #3
 80016b2:	4642      	mov	r2, r8
 80016b4:	01d2      	lsls	r2, r2, #7
 80016b6:	d506      	bpl.n	80016c6 <__aeabi_ddiv+0x27a>
 80016b8:	4642      	mov	r2, r8
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <__aeabi_ddiv+0x380>)
 80016bc:	401a      	ands	r2, r3
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	4690      	mov	r8, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	445b      	add	r3, fp
 80016c6:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <__aeabi_ddiv+0x384>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	dd00      	ble.n	80016ce <__aeabi_ddiv+0x282>
 80016cc:	e723      	b.n	8001516 <__aeabi_ddiv+0xca>
 80016ce:	4642      	mov	r2, r8
 80016d0:	055b      	lsls	r3, r3, #21
 80016d2:	0755      	lsls	r5, r2, #29
 80016d4:	0252      	lsls	r2, r2, #9
 80016d6:	430d      	orrs	r5, r1
 80016d8:	0b12      	lsrs	r2, r2, #12
 80016da:	0d5b      	lsrs	r3, r3, #21
 80016dc:	e70d      	b.n	80014fa <__aeabi_ddiv+0xae>
 80016de:	4651      	mov	r1, sl
 80016e0:	4321      	orrs	r1, r4
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x29a>
 80016e4:	e07c      	b.n	80017e0 <__aeabi_ddiv+0x394>
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0x2a0>
 80016ea:	e0fb      	b.n	80018e4 <__aeabi_ddiv+0x498>
 80016ec:	0020      	movs	r0, r4
 80016ee:	f001 fa63 	bl	8002bb8 <__clzsi2>
 80016f2:	0002      	movs	r2, r0
 80016f4:	3a0b      	subs	r2, #11
 80016f6:	231d      	movs	r3, #29
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	4652      	mov	r2, sl
 80016fc:	0001      	movs	r1, r0
 80016fe:	40da      	lsrs	r2, r3
 8001700:	4653      	mov	r3, sl
 8001702:	3908      	subs	r1, #8
 8001704:	408b      	lsls	r3, r1
 8001706:	408c      	lsls	r4, r1
 8001708:	0019      	movs	r1, r3
 800170a:	4314      	orrs	r4, r2
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <__aeabi_ddiv+0x388>)
 800170e:	4458      	add	r0, fp
 8001710:	469b      	mov	fp, r3
 8001712:	4483      	add	fp, r0
 8001714:	2000      	movs	r0, #0
 8001716:	e6d9      	b.n	80014cc <__aeabi_ddiv+0x80>
 8001718:	0003      	movs	r3, r0
 800171a:	4323      	orrs	r3, r4
 800171c:	4698      	mov	r8, r3
 800171e:	d044      	beq.n	80017aa <__aeabi_ddiv+0x35e>
 8001720:	2c00      	cmp	r4, #0
 8001722:	d100      	bne.n	8001726 <__aeabi_ddiv+0x2da>
 8001724:	e0cf      	b.n	80018c6 <__aeabi_ddiv+0x47a>
 8001726:	0020      	movs	r0, r4
 8001728:	f001 fa46 	bl	8002bb8 <__clzsi2>
 800172c:	0001      	movs	r1, r0
 800172e:	0002      	movs	r2, r0
 8001730:	390b      	subs	r1, #11
 8001732:	231d      	movs	r3, #29
 8001734:	1a5b      	subs	r3, r3, r1
 8001736:	4649      	mov	r1, r9
 8001738:	0010      	movs	r0, r2
 800173a:	40d9      	lsrs	r1, r3
 800173c:	3808      	subs	r0, #8
 800173e:	4084      	lsls	r4, r0
 8001740:	000b      	movs	r3, r1
 8001742:	464d      	mov	r5, r9
 8001744:	4323      	orrs	r3, r4
 8001746:	4698      	mov	r8, r3
 8001748:	4085      	lsls	r5, r0
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <__aeabi_ddiv+0x38c>)
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	469b      	mov	fp, r3
 8001750:	2300      	movs	r3, #0
 8001752:	4699      	mov	r9, r3
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	e69e      	b.n	8001496 <__aeabi_ddiv+0x4a>
 8001758:	0002      	movs	r2, r0
 800175a:	4322      	orrs	r2, r4
 800175c:	4690      	mov	r8, r2
 800175e:	d11d      	bne.n	800179c <__aeabi_ddiv+0x350>
 8001760:	2208      	movs	r2, #8
 8001762:	469b      	mov	fp, r3
 8001764:	2302      	movs	r3, #2
 8001766:	2500      	movs	r5, #0
 8001768:	4691      	mov	r9, r2
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	e693      	b.n	8001496 <__aeabi_ddiv+0x4a>
 800176e:	4651      	mov	r1, sl
 8001770:	4321      	orrs	r1, r4
 8001772:	d109      	bne.n	8001788 <__aeabi_ddiv+0x33c>
 8001774:	2302      	movs	r3, #2
 8001776:	464a      	mov	r2, r9
 8001778:	431a      	orrs	r2, r3
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <__aeabi_ddiv+0x390>)
 800177c:	4691      	mov	r9, r2
 800177e:	469c      	mov	ip, r3
 8001780:	2400      	movs	r4, #0
 8001782:	2002      	movs	r0, #2
 8001784:	44e3      	add	fp, ip
 8001786:	e6a1      	b.n	80014cc <__aeabi_ddiv+0x80>
 8001788:	2303      	movs	r3, #3
 800178a:	464a      	mov	r2, r9
 800178c:	431a      	orrs	r2, r3
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <__aeabi_ddiv+0x390>)
 8001790:	4691      	mov	r9, r2
 8001792:	469c      	mov	ip, r3
 8001794:	4651      	mov	r1, sl
 8001796:	2003      	movs	r0, #3
 8001798:	44e3      	add	fp, ip
 800179a:	e697      	b.n	80014cc <__aeabi_ddiv+0x80>
 800179c:	220c      	movs	r2, #12
 800179e:	469b      	mov	fp, r3
 80017a0:	2303      	movs	r3, #3
 80017a2:	46a0      	mov	r8, r4
 80017a4:	4691      	mov	r9, r2
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	e675      	b.n	8001496 <__aeabi_ddiv+0x4a>
 80017aa:	2304      	movs	r3, #4
 80017ac:	4699      	mov	r9, r3
 80017ae:	2300      	movs	r3, #0
 80017b0:	469b      	mov	fp, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	2500      	movs	r5, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	e66d      	b.n	8001496 <__aeabi_ddiv+0x4a>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	000007ff 	.word	0x000007ff
 80017c0:	fffffc01 	.word	0xfffffc01
 80017c4:	08009574 	.word	0x08009574
 80017c8:	000003ff 	.word	0x000003ff
 80017cc:	feffffff 	.word	0xfeffffff
 80017d0:	000007fe 	.word	0x000007fe
 80017d4:	000003f3 	.word	0x000003f3
 80017d8:	fffffc0d 	.word	0xfffffc0d
 80017dc:	fffff801 	.word	0xfffff801
 80017e0:	464a      	mov	r2, r9
 80017e2:	2301      	movs	r3, #1
 80017e4:	431a      	orrs	r2, r3
 80017e6:	4691      	mov	r9, r2
 80017e8:	2400      	movs	r4, #0
 80017ea:	2001      	movs	r0, #1
 80017ec:	e66e      	b.n	80014cc <__aeabi_ddiv+0x80>
 80017ee:	2300      	movs	r3, #0
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	469a      	mov	sl, r3
 80017f4:	2500      	movs	r5, #0
 80017f6:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <__aeabi_ddiv+0x5cc>)
 80017f8:	0312      	lsls	r2, r2, #12
 80017fa:	e67e      	b.n	80014fa <__aeabi_ddiv+0xae>
 80017fc:	2501      	movs	r5, #1
 80017fe:	426d      	negs	r5, r5
 8001800:	2201      	movs	r2, #1
 8001802:	1ad2      	subs	r2, r2, r3
 8001804:	2a38      	cmp	r2, #56	; 0x38
 8001806:	dd00      	ble.n	800180a <__aeabi_ddiv+0x3be>
 8001808:	e674      	b.n	80014f4 <__aeabi_ddiv+0xa8>
 800180a:	2a1f      	cmp	r2, #31
 800180c:	dc00      	bgt.n	8001810 <__aeabi_ddiv+0x3c4>
 800180e:	e0bd      	b.n	800198c <__aeabi_ddiv+0x540>
 8001810:	211f      	movs	r1, #31
 8001812:	4249      	negs	r1, r1
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4641      	mov	r1, r8
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	2a20      	cmp	r2, #32
 800181e:	d004      	beq.n	800182a <__aeabi_ddiv+0x3de>
 8001820:	4641      	mov	r1, r8
 8001822:	4a7e      	ldr	r2, [pc, #504]	; (8001a1c <__aeabi_ddiv+0x5d0>)
 8001824:	445a      	add	r2, fp
 8001826:	4091      	lsls	r1, r2
 8001828:	430d      	orrs	r5, r1
 800182a:	0029      	movs	r1, r5
 800182c:	1e4a      	subs	r2, r1, #1
 800182e:	4191      	sbcs	r1, r2
 8001830:	4319      	orrs	r1, r3
 8001832:	2307      	movs	r3, #7
 8001834:	001d      	movs	r5, r3
 8001836:	2200      	movs	r2, #0
 8001838:	400d      	ands	r5, r1
 800183a:	420b      	tst	r3, r1
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x3f4>
 800183e:	e0d0      	b.n	80019e2 <__aeabi_ddiv+0x596>
 8001840:	220f      	movs	r2, #15
 8001842:	2300      	movs	r3, #0
 8001844:	400a      	ands	r2, r1
 8001846:	2a04      	cmp	r2, #4
 8001848:	d100      	bne.n	800184c <__aeabi_ddiv+0x400>
 800184a:	e0c7      	b.n	80019dc <__aeabi_ddiv+0x590>
 800184c:	1d0a      	adds	r2, r1, #4
 800184e:	428a      	cmp	r2, r1
 8001850:	4189      	sbcs	r1, r1
 8001852:	4249      	negs	r1, r1
 8001854:	185b      	adds	r3, r3, r1
 8001856:	0011      	movs	r1, r2
 8001858:	021a      	lsls	r2, r3, #8
 800185a:	d400      	bmi.n	800185e <__aeabi_ddiv+0x412>
 800185c:	e0be      	b.n	80019dc <__aeabi_ddiv+0x590>
 800185e:	2301      	movs	r3, #1
 8001860:	2200      	movs	r2, #0
 8001862:	2500      	movs	r5, #0
 8001864:	e649      	b.n	80014fa <__aeabi_ddiv+0xae>
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	4643      	mov	r3, r8
 800186a:	0312      	lsls	r2, r2, #12
 800186c:	4213      	tst	r3, r2
 800186e:	d008      	beq.n	8001882 <__aeabi_ddiv+0x436>
 8001870:	4214      	tst	r4, r2
 8001872:	d106      	bne.n	8001882 <__aeabi_ddiv+0x436>
 8001874:	4322      	orrs	r2, r4
 8001876:	0312      	lsls	r2, r2, #12
 8001878:	46ba      	mov	sl, r7
 800187a:	000d      	movs	r5, r1
 800187c:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <__aeabi_ddiv+0x5cc>)
 800187e:	0b12      	lsrs	r2, r2, #12
 8001880:	e63b      	b.n	80014fa <__aeabi_ddiv+0xae>
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	4643      	mov	r3, r8
 8001886:	0312      	lsls	r2, r2, #12
 8001888:	431a      	orrs	r2, r3
 800188a:	0312      	lsls	r2, r2, #12
 800188c:	46b2      	mov	sl, r6
 800188e:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <__aeabi_ddiv+0x5cc>)
 8001890:	0b12      	lsrs	r2, r2, #12
 8001892:	e632      	b.n	80014fa <__aeabi_ddiv+0xae>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0x44e>
 8001898:	e702      	b.n	80016a0 <__aeabi_ddiv+0x254>
 800189a:	19a6      	adds	r6, r4, r6
 800189c:	1e6a      	subs	r2, r5, #1
 800189e:	42a6      	cmp	r6, r4
 80018a0:	d200      	bcs.n	80018a4 <__aeabi_ddiv+0x458>
 80018a2:	e089      	b.n	80019b8 <__aeabi_ddiv+0x56c>
 80018a4:	4286      	cmp	r6, r0
 80018a6:	d200      	bcs.n	80018aa <__aeabi_ddiv+0x45e>
 80018a8:	e09f      	b.n	80019ea <__aeabi_ddiv+0x59e>
 80018aa:	d100      	bne.n	80018ae <__aeabi_ddiv+0x462>
 80018ac:	e0af      	b.n	8001a0e <__aeabi_ddiv+0x5c2>
 80018ae:	0015      	movs	r5, r2
 80018b0:	e6f4      	b.n	800169c <__aeabi_ddiv+0x250>
 80018b2:	42a9      	cmp	r1, r5
 80018b4:	d900      	bls.n	80018b8 <__aeabi_ddiv+0x46c>
 80018b6:	e63c      	b.n	8001532 <__aeabi_ddiv+0xe6>
 80018b8:	4643      	mov	r3, r8
 80018ba:	07de      	lsls	r6, r3, #31
 80018bc:	0858      	lsrs	r0, r3, #1
 80018be:	086b      	lsrs	r3, r5, #1
 80018c0:	431e      	orrs	r6, r3
 80018c2:	07ed      	lsls	r5, r5, #31
 80018c4:	e63c      	b.n	8001540 <__aeabi_ddiv+0xf4>
 80018c6:	f001 f977 	bl	8002bb8 <__clzsi2>
 80018ca:	0001      	movs	r1, r0
 80018cc:	0002      	movs	r2, r0
 80018ce:	3115      	adds	r1, #21
 80018d0:	3220      	adds	r2, #32
 80018d2:	291c      	cmp	r1, #28
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_ddiv+0x48c>
 80018d6:	e72c      	b.n	8001732 <__aeabi_ddiv+0x2e6>
 80018d8:	464b      	mov	r3, r9
 80018da:	3808      	subs	r0, #8
 80018dc:	4083      	lsls	r3, r0
 80018de:	2500      	movs	r5, #0
 80018e0:	4698      	mov	r8, r3
 80018e2:	e732      	b.n	800174a <__aeabi_ddiv+0x2fe>
 80018e4:	f001 f968 	bl	8002bb8 <__clzsi2>
 80018e8:	0003      	movs	r3, r0
 80018ea:	001a      	movs	r2, r3
 80018ec:	3215      	adds	r2, #21
 80018ee:	3020      	adds	r0, #32
 80018f0:	2a1c      	cmp	r2, #28
 80018f2:	dc00      	bgt.n	80018f6 <__aeabi_ddiv+0x4aa>
 80018f4:	e6ff      	b.n	80016f6 <__aeabi_ddiv+0x2aa>
 80018f6:	4654      	mov	r4, sl
 80018f8:	3b08      	subs	r3, #8
 80018fa:	2100      	movs	r1, #0
 80018fc:	409c      	lsls	r4, r3
 80018fe:	e705      	b.n	800170c <__aeabi_ddiv+0x2c0>
 8001900:	1936      	adds	r6, r6, r4
 8001902:	3b01      	subs	r3, #1
 8001904:	42b4      	cmp	r4, r6
 8001906:	d900      	bls.n	800190a <__aeabi_ddiv+0x4be>
 8001908:	e6a6      	b.n	8001658 <__aeabi_ddiv+0x20c>
 800190a:	42b2      	cmp	r2, r6
 800190c:	d800      	bhi.n	8001910 <__aeabi_ddiv+0x4c4>
 800190e:	e6a3      	b.n	8001658 <__aeabi_ddiv+0x20c>
 8001910:	1e83      	subs	r3, r0, #2
 8001912:	1936      	adds	r6, r6, r4
 8001914:	e6a0      	b.n	8001658 <__aeabi_ddiv+0x20c>
 8001916:	1909      	adds	r1, r1, r4
 8001918:	3d01      	subs	r5, #1
 800191a:	428c      	cmp	r4, r1
 800191c:	d900      	bls.n	8001920 <__aeabi_ddiv+0x4d4>
 800191e:	e68d      	b.n	800163c <__aeabi_ddiv+0x1f0>
 8001920:	428a      	cmp	r2, r1
 8001922:	d800      	bhi.n	8001926 <__aeabi_ddiv+0x4da>
 8001924:	e68a      	b.n	800163c <__aeabi_ddiv+0x1f0>
 8001926:	1e85      	subs	r5, r0, #2
 8001928:	1909      	adds	r1, r1, r4
 800192a:	e687      	b.n	800163c <__aeabi_ddiv+0x1f0>
 800192c:	220f      	movs	r2, #15
 800192e:	402a      	ands	r2, r5
 8001930:	2a04      	cmp	r2, #4
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0x4ea>
 8001934:	e6bc      	b.n	80016b0 <__aeabi_ddiv+0x264>
 8001936:	1d29      	adds	r1, r5, #4
 8001938:	42a9      	cmp	r1, r5
 800193a:	41ad      	sbcs	r5, r5
 800193c:	426d      	negs	r5, r5
 800193e:	08c9      	lsrs	r1, r1, #3
 8001940:	44a8      	add	r8, r5
 8001942:	e6b6      	b.n	80016b2 <__aeabi_ddiv+0x266>
 8001944:	42af      	cmp	r7, r5
 8001946:	d900      	bls.n	800194a <__aeabi_ddiv+0x4fe>
 8001948:	e662      	b.n	8001610 <__aeabi_ddiv+0x1c4>
 800194a:	4281      	cmp	r1, r0
 800194c:	d804      	bhi.n	8001958 <__aeabi_ddiv+0x50c>
 800194e:	d000      	beq.n	8001952 <__aeabi_ddiv+0x506>
 8001950:	e65e      	b.n	8001610 <__aeabi_ddiv+0x1c4>
 8001952:	42ae      	cmp	r6, r5
 8001954:	d800      	bhi.n	8001958 <__aeabi_ddiv+0x50c>
 8001956:	e65b      	b.n	8001610 <__aeabi_ddiv+0x1c4>
 8001958:	2302      	movs	r3, #2
 800195a:	425b      	negs	r3, r3
 800195c:	469c      	mov	ip, r3
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	44e0      	add	r8, ip
 8001962:	469c      	mov	ip, r3
 8001964:	4465      	add	r5, ip
 8001966:	429d      	cmp	r5, r3
 8001968:	419b      	sbcs	r3, r3
 800196a:	425b      	negs	r3, r3
 800196c:	191b      	adds	r3, r3, r4
 800196e:	18c0      	adds	r0, r0, r3
 8001970:	e64f      	b.n	8001612 <__aeabi_ddiv+0x1c6>
 8001972:	42b2      	cmp	r2, r6
 8001974:	d800      	bhi.n	8001978 <__aeabi_ddiv+0x52c>
 8001976:	e612      	b.n	800159e <__aeabi_ddiv+0x152>
 8001978:	1e83      	subs	r3, r0, #2
 800197a:	1936      	adds	r6, r6, r4
 800197c:	e60f      	b.n	800159e <__aeabi_ddiv+0x152>
 800197e:	428a      	cmp	r2, r1
 8001980:	d800      	bhi.n	8001984 <__aeabi_ddiv+0x538>
 8001982:	e5fa      	b.n	800157a <__aeabi_ddiv+0x12e>
 8001984:	1e83      	subs	r3, r0, #2
 8001986:	4698      	mov	r8, r3
 8001988:	1909      	adds	r1, r1, r4
 800198a:	e5f6      	b.n	800157a <__aeabi_ddiv+0x12e>
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <__aeabi_ddiv+0x5d4>)
 800198e:	0028      	movs	r0, r5
 8001990:	445b      	add	r3, fp
 8001992:	4641      	mov	r1, r8
 8001994:	409d      	lsls	r5, r3
 8001996:	4099      	lsls	r1, r3
 8001998:	40d0      	lsrs	r0, r2
 800199a:	1e6b      	subs	r3, r5, #1
 800199c:	419d      	sbcs	r5, r3
 800199e:	4643      	mov	r3, r8
 80019a0:	4301      	orrs	r1, r0
 80019a2:	4329      	orrs	r1, r5
 80019a4:	40d3      	lsrs	r3, r2
 80019a6:	074a      	lsls	r2, r1, #29
 80019a8:	d100      	bne.n	80019ac <__aeabi_ddiv+0x560>
 80019aa:	e755      	b.n	8001858 <__aeabi_ddiv+0x40c>
 80019ac:	220f      	movs	r2, #15
 80019ae:	400a      	ands	r2, r1
 80019b0:	2a04      	cmp	r2, #4
 80019b2:	d000      	beq.n	80019b6 <__aeabi_ddiv+0x56a>
 80019b4:	e74a      	b.n	800184c <__aeabi_ddiv+0x400>
 80019b6:	e74f      	b.n	8001858 <__aeabi_ddiv+0x40c>
 80019b8:	0015      	movs	r5, r2
 80019ba:	4286      	cmp	r6, r0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_ddiv+0x574>
 80019be:	e66d      	b.n	800169c <__aeabi_ddiv+0x250>
 80019c0:	9a00      	ldr	r2, [sp, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d000      	beq.n	80019c8 <__aeabi_ddiv+0x57c>
 80019c6:	e669      	b.n	800169c <__aeabi_ddiv+0x250>
 80019c8:	e66a      	b.n	80016a0 <__aeabi_ddiv+0x254>
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <__aeabi_ddiv+0x5d8>)
 80019cc:	445b      	add	r3, fp
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_ddiv+0x588>
 80019d2:	e713      	b.n	80017fc <__aeabi_ddiv+0x3b0>
 80019d4:	2501      	movs	r5, #1
 80019d6:	2100      	movs	r1, #0
 80019d8:	44a8      	add	r8, r5
 80019da:	e66a      	b.n	80016b2 <__aeabi_ddiv+0x266>
 80019dc:	075d      	lsls	r5, r3, #29
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	0b1a      	lsrs	r2, r3, #12
 80019e2:	08c9      	lsrs	r1, r1, #3
 80019e4:	2300      	movs	r3, #0
 80019e6:	430d      	orrs	r5, r1
 80019e8:	e587      	b.n	80014fa <__aeabi_ddiv+0xae>
 80019ea:	9900      	ldr	r1, [sp, #0]
 80019ec:	3d02      	subs	r5, #2
 80019ee:	004a      	lsls	r2, r1, #1
 80019f0:	428a      	cmp	r2, r1
 80019f2:	41bf      	sbcs	r7, r7
 80019f4:	427f      	negs	r7, r7
 80019f6:	193f      	adds	r7, r7, r4
 80019f8:	19f6      	adds	r6, r6, r7
 80019fa:	9200      	str	r2, [sp, #0]
 80019fc:	e7dd      	b.n	80019ba <__aeabi_ddiv+0x56e>
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	4643      	mov	r3, r8
 8001a02:	0312      	lsls	r2, r2, #12
 8001a04:	431a      	orrs	r2, r3
 8001a06:	0312      	lsls	r2, r2, #12
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <__aeabi_ddiv+0x5cc>)
 8001a0a:	0b12      	lsrs	r2, r2, #12
 8001a0c:	e575      	b.n	80014fa <__aeabi_ddiv+0xae>
 8001a0e:	9900      	ldr	r1, [sp, #0]
 8001a10:	4299      	cmp	r1, r3
 8001a12:	d3ea      	bcc.n	80019ea <__aeabi_ddiv+0x59e>
 8001a14:	0015      	movs	r5, r2
 8001a16:	e7d3      	b.n	80019c0 <__aeabi_ddiv+0x574>
 8001a18:	000007ff 	.word	0x000007ff
 8001a1c:	0000043e 	.word	0x0000043e
 8001a20:	0000041e 	.word	0x0000041e
 8001a24:	000003ff 	.word	0x000003ff

08001a28 <__eqdf2>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	464e      	mov	r6, r9
 8001a2c:	4645      	mov	r5, r8
 8001a2e:	46de      	mov	lr, fp
 8001a30:	4657      	mov	r7, sl
 8001a32:	4690      	mov	r8, r2
 8001a34:	b5e0      	push	{r5, r6, r7, lr}
 8001a36:	0017      	movs	r7, r2
 8001a38:	031a      	lsls	r2, r3, #12
 8001a3a:	0b12      	lsrs	r2, r2, #12
 8001a3c:	0005      	movs	r5, r0
 8001a3e:	4684      	mov	ip, r0
 8001a40:	4819      	ldr	r0, [pc, #100]	; (8001aa8 <__eqdf2+0x80>)
 8001a42:	030e      	lsls	r6, r1, #12
 8001a44:	004c      	lsls	r4, r1, #1
 8001a46:	4691      	mov	r9, r2
 8001a48:	005a      	lsls	r2, r3, #1
 8001a4a:	0fdb      	lsrs	r3, r3, #31
 8001a4c:	469b      	mov	fp, r3
 8001a4e:	0b36      	lsrs	r6, r6, #12
 8001a50:	0d64      	lsrs	r4, r4, #21
 8001a52:	0fc9      	lsrs	r1, r1, #31
 8001a54:	0d52      	lsrs	r2, r2, #21
 8001a56:	4284      	cmp	r4, r0
 8001a58:	d019      	beq.n	8001a8e <__eqdf2+0x66>
 8001a5a:	4282      	cmp	r2, r0
 8001a5c:	d010      	beq.n	8001a80 <__eqdf2+0x58>
 8001a5e:	2001      	movs	r0, #1
 8001a60:	4294      	cmp	r4, r2
 8001a62:	d10e      	bne.n	8001a82 <__eqdf2+0x5a>
 8001a64:	454e      	cmp	r6, r9
 8001a66:	d10c      	bne.n	8001a82 <__eqdf2+0x5a>
 8001a68:	2001      	movs	r0, #1
 8001a6a:	45c4      	cmp	ip, r8
 8001a6c:	d109      	bne.n	8001a82 <__eqdf2+0x5a>
 8001a6e:	4559      	cmp	r1, fp
 8001a70:	d017      	beq.n	8001aa2 <__eqdf2+0x7a>
 8001a72:	2c00      	cmp	r4, #0
 8001a74:	d105      	bne.n	8001a82 <__eqdf2+0x5a>
 8001a76:	0030      	movs	r0, r6
 8001a78:	4328      	orrs	r0, r5
 8001a7a:	1e43      	subs	r3, r0, #1
 8001a7c:	4198      	sbcs	r0, r3
 8001a7e:	e000      	b.n	8001a82 <__eqdf2+0x5a>
 8001a80:	2001      	movs	r0, #1
 8001a82:	bcf0      	pop	{r4, r5, r6, r7}
 8001a84:	46bb      	mov	fp, r7
 8001a86:	46b2      	mov	sl, r6
 8001a88:	46a9      	mov	r9, r5
 8001a8a:	46a0      	mov	r8, r4
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8e:	0033      	movs	r3, r6
 8001a90:	2001      	movs	r0, #1
 8001a92:	432b      	orrs	r3, r5
 8001a94:	d1f5      	bne.n	8001a82 <__eqdf2+0x5a>
 8001a96:	42a2      	cmp	r2, r4
 8001a98:	d1f3      	bne.n	8001a82 <__eqdf2+0x5a>
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	433b      	orrs	r3, r7
 8001a9e:	d1f0      	bne.n	8001a82 <__eqdf2+0x5a>
 8001aa0:	e7e2      	b.n	8001a68 <__eqdf2+0x40>
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	e7ed      	b.n	8001a82 <__eqdf2+0x5a>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff

08001aac <__gedf2>:
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aae:	4647      	mov	r7, r8
 8001ab0:	46ce      	mov	lr, r9
 8001ab2:	0004      	movs	r4, r0
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	0016      	movs	r6, r2
 8001ab8:	031b      	lsls	r3, r3, #12
 8001aba:	0b1b      	lsrs	r3, r3, #12
 8001abc:	4d2d      	ldr	r5, [pc, #180]	; (8001b74 <__gedf2+0xc8>)
 8001abe:	004a      	lsls	r2, r1, #1
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	0043      	lsls	r3, r0, #1
 8001ac6:	030f      	lsls	r7, r1, #12
 8001ac8:	46a4      	mov	ip, r4
 8001aca:	46b0      	mov	r8, r6
 8001acc:	0b3f      	lsrs	r7, r7, #12
 8001ace:	0d52      	lsrs	r2, r2, #21
 8001ad0:	0fc9      	lsrs	r1, r1, #31
 8001ad2:	0d5b      	lsrs	r3, r3, #21
 8001ad4:	0fc0      	lsrs	r0, r0, #31
 8001ad6:	42aa      	cmp	r2, r5
 8001ad8:	d021      	beq.n	8001b1e <__gedf2+0x72>
 8001ada:	42ab      	cmp	r3, r5
 8001adc:	d013      	beq.n	8001b06 <__gedf2+0x5a>
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d122      	bne.n	8001b28 <__gedf2+0x7c>
 8001ae2:	433c      	orrs	r4, r7
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <__gedf2+0x42>
 8001ae8:	464d      	mov	r5, r9
 8001aea:	432e      	orrs	r6, r5
 8001aec:	d022      	beq.n	8001b34 <__gedf2+0x88>
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	d010      	beq.n	8001b14 <__gedf2+0x68>
 8001af2:	4281      	cmp	r1, r0
 8001af4:	d022      	beq.n	8001b3c <__gedf2+0x90>
 8001af6:	2002      	movs	r0, #2
 8001af8:	3901      	subs	r1, #1
 8001afa:	4008      	ands	r0, r1
 8001afc:	3801      	subs	r0, #1
 8001afe:	bcc0      	pop	{r6, r7}
 8001b00:	46b9      	mov	r9, r7
 8001b02:	46b0      	mov	r8, r6
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	464d      	mov	r5, r9
 8001b08:	432e      	orrs	r6, r5
 8001b0a:	d129      	bne.n	8001b60 <__gedf2+0xb4>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d1f0      	bne.n	8001af2 <__gedf2+0x46>
 8001b10:	433c      	orrs	r4, r7
 8001b12:	d1ee      	bne.n	8001af2 <__gedf2+0x46>
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d1f2      	bne.n	8001afe <__gedf2+0x52>
 8001b18:	2001      	movs	r0, #1
 8001b1a:	4240      	negs	r0, r0
 8001b1c:	e7ef      	b.n	8001afe <__gedf2+0x52>
 8001b1e:	003d      	movs	r5, r7
 8001b20:	4325      	orrs	r5, r4
 8001b22:	d11d      	bne.n	8001b60 <__gedf2+0xb4>
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d0ee      	beq.n	8001b06 <__gedf2+0x5a>
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e2      	bne.n	8001af2 <__gedf2+0x46>
 8001b2c:	464c      	mov	r4, r9
 8001b2e:	4326      	orrs	r6, r4
 8001b30:	d1df      	bne.n	8001af2 <__gedf2+0x46>
 8001b32:	e7e0      	b.n	8001af6 <__gedf2+0x4a>
 8001b34:	2000      	movs	r0, #0
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d0e1      	beq.n	8001afe <__gedf2+0x52>
 8001b3a:	e7dc      	b.n	8001af6 <__gedf2+0x4a>
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dc0a      	bgt.n	8001b56 <__gedf2+0xaa>
 8001b40:	dbe8      	blt.n	8001b14 <__gedf2+0x68>
 8001b42:	454f      	cmp	r7, r9
 8001b44:	d8d7      	bhi.n	8001af6 <__gedf2+0x4a>
 8001b46:	d00e      	beq.n	8001b66 <__gedf2+0xba>
 8001b48:	2000      	movs	r0, #0
 8001b4a:	454f      	cmp	r7, r9
 8001b4c:	d2d7      	bcs.n	8001afe <__gedf2+0x52>
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d0e2      	beq.n	8001b18 <__gedf2+0x6c>
 8001b52:	0008      	movs	r0, r1
 8001b54:	e7d3      	b.n	8001afe <__gedf2+0x52>
 8001b56:	4243      	negs	r3, r0
 8001b58:	4158      	adcs	r0, r3
 8001b5a:	0040      	lsls	r0, r0, #1
 8001b5c:	3801      	subs	r0, #1
 8001b5e:	e7ce      	b.n	8001afe <__gedf2+0x52>
 8001b60:	2002      	movs	r0, #2
 8001b62:	4240      	negs	r0, r0
 8001b64:	e7cb      	b.n	8001afe <__gedf2+0x52>
 8001b66:	45c4      	cmp	ip, r8
 8001b68:	d8c5      	bhi.n	8001af6 <__gedf2+0x4a>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	45c4      	cmp	ip, r8
 8001b6e:	d2c6      	bcs.n	8001afe <__gedf2+0x52>
 8001b70:	e7ed      	b.n	8001b4e <__gedf2+0xa2>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	000007ff 	.word	0x000007ff

08001b78 <__ledf2>:
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	4647      	mov	r7, r8
 8001b7c:	46ce      	mov	lr, r9
 8001b7e:	0004      	movs	r4, r0
 8001b80:	0018      	movs	r0, r3
 8001b82:	0016      	movs	r6, r2
 8001b84:	031b      	lsls	r3, r3, #12
 8001b86:	0b1b      	lsrs	r3, r3, #12
 8001b88:	4d2c      	ldr	r5, [pc, #176]	; (8001c3c <__ledf2+0xc4>)
 8001b8a:	004a      	lsls	r2, r1, #1
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	0043      	lsls	r3, r0, #1
 8001b92:	030f      	lsls	r7, r1, #12
 8001b94:	46a4      	mov	ip, r4
 8001b96:	46b0      	mov	r8, r6
 8001b98:	0b3f      	lsrs	r7, r7, #12
 8001b9a:	0d52      	lsrs	r2, r2, #21
 8001b9c:	0fc9      	lsrs	r1, r1, #31
 8001b9e:	0d5b      	lsrs	r3, r3, #21
 8001ba0:	0fc0      	lsrs	r0, r0, #31
 8001ba2:	42aa      	cmp	r2, r5
 8001ba4:	d00d      	beq.n	8001bc2 <__ledf2+0x4a>
 8001ba6:	42ab      	cmp	r3, r5
 8001ba8:	d010      	beq.n	8001bcc <__ledf2+0x54>
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	d127      	bne.n	8001bfe <__ledf2+0x86>
 8001bae:	433c      	orrs	r4, r7
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d111      	bne.n	8001bd8 <__ledf2+0x60>
 8001bb4:	464d      	mov	r5, r9
 8001bb6:	432e      	orrs	r6, r5
 8001bb8:	d10e      	bne.n	8001bd8 <__ledf2+0x60>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	2c00      	cmp	r4, #0
 8001bbe:	d015      	beq.n	8001bec <__ledf2+0x74>
 8001bc0:	e00e      	b.n	8001be0 <__ledf2+0x68>
 8001bc2:	003d      	movs	r5, r7
 8001bc4:	4325      	orrs	r5, r4
 8001bc6:	d110      	bne.n	8001bea <__ledf2+0x72>
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d118      	bne.n	8001bfe <__ledf2+0x86>
 8001bcc:	464d      	mov	r5, r9
 8001bce:	432e      	orrs	r6, r5
 8001bd0:	d10b      	bne.n	8001bea <__ledf2+0x72>
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d102      	bne.n	8001bdc <__ledf2+0x64>
 8001bd6:	433c      	orrs	r4, r7
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	d00b      	beq.n	8001bf4 <__ledf2+0x7c>
 8001bdc:	4281      	cmp	r1, r0
 8001bde:	d014      	beq.n	8001c0a <__ledf2+0x92>
 8001be0:	2002      	movs	r0, #2
 8001be2:	3901      	subs	r1, #1
 8001be4:	4008      	ands	r0, r1
 8001be6:	3801      	subs	r0, #1
 8001be8:	e000      	b.n	8001bec <__ledf2+0x74>
 8001bea:	2002      	movs	r0, #2
 8001bec:	bcc0      	pop	{r6, r7}
 8001bee:	46b9      	mov	r9, r7
 8001bf0:	46b0      	mov	r8, r6
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d1f9      	bne.n	8001bec <__ledf2+0x74>
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	4240      	negs	r0, r0
 8001bfc:	e7f6      	b.n	8001bec <__ledf2+0x74>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ec      	bne.n	8001bdc <__ledf2+0x64>
 8001c02:	464c      	mov	r4, r9
 8001c04:	4326      	orrs	r6, r4
 8001c06:	d1e9      	bne.n	8001bdc <__ledf2+0x64>
 8001c08:	e7ea      	b.n	8001be0 <__ledf2+0x68>
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dd04      	ble.n	8001c18 <__ledf2+0xa0>
 8001c0e:	4243      	negs	r3, r0
 8001c10:	4158      	adcs	r0, r3
 8001c12:	0040      	lsls	r0, r0, #1
 8001c14:	3801      	subs	r0, #1
 8001c16:	e7e9      	b.n	8001bec <__ledf2+0x74>
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbeb      	blt.n	8001bf4 <__ledf2+0x7c>
 8001c1c:	454f      	cmp	r7, r9
 8001c1e:	d8df      	bhi.n	8001be0 <__ledf2+0x68>
 8001c20:	d006      	beq.n	8001c30 <__ledf2+0xb8>
 8001c22:	2000      	movs	r0, #0
 8001c24:	454f      	cmp	r7, r9
 8001c26:	d2e1      	bcs.n	8001bec <__ledf2+0x74>
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	d0e5      	beq.n	8001bf8 <__ledf2+0x80>
 8001c2c:	0008      	movs	r0, r1
 8001c2e:	e7dd      	b.n	8001bec <__ledf2+0x74>
 8001c30:	45c4      	cmp	ip, r8
 8001c32:	d8d5      	bhi.n	8001be0 <__ledf2+0x68>
 8001c34:	2000      	movs	r0, #0
 8001c36:	45c4      	cmp	ip, r8
 8001c38:	d2d8      	bcs.n	8001bec <__ledf2+0x74>
 8001c3a:	e7f5      	b.n	8001c28 <__ledf2+0xb0>
 8001c3c:	000007ff 	.word	0x000007ff

08001c40 <__aeabi_dmul>:
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	4645      	mov	r5, r8
 8001c44:	46de      	mov	lr, fp
 8001c46:	4657      	mov	r7, sl
 8001c48:	464e      	mov	r6, r9
 8001c4a:	b5e0      	push	{r5, r6, r7, lr}
 8001c4c:	001f      	movs	r7, r3
 8001c4e:	030b      	lsls	r3, r1, #12
 8001c50:	0b1b      	lsrs	r3, r3, #12
 8001c52:	469b      	mov	fp, r3
 8001c54:	004d      	lsls	r5, r1, #1
 8001c56:	0fcb      	lsrs	r3, r1, #31
 8001c58:	0004      	movs	r4, r0
 8001c5a:	4691      	mov	r9, r2
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	b087      	sub	sp, #28
 8001c60:	0d6d      	lsrs	r5, r5, #21
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dmul+0x26>
 8001c64:	e1cd      	b.n	8002002 <__aeabi_dmul+0x3c2>
 8001c66:	4bce      	ldr	r3, [pc, #824]	; (8001fa0 <__aeabi_dmul+0x360>)
 8001c68:	429d      	cmp	r5, r3
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dmul+0x2e>
 8001c6c:	e1e9      	b.n	8002042 <__aeabi_dmul+0x402>
 8001c6e:	465a      	mov	r2, fp
 8001c70:	0f43      	lsrs	r3, r0, #29
 8001c72:	00d2      	lsls	r2, r2, #3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	0412      	lsls	r2, r2, #16
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	00c3      	lsls	r3, r0, #3
 8001c7e:	469a      	mov	sl, r3
 8001c80:	4bc8      	ldr	r3, [pc, #800]	; (8001fa4 <__aeabi_dmul+0x364>)
 8001c82:	4693      	mov	fp, r2
 8001c84:	469c      	mov	ip, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	2600      	movs	r6, #0
 8001c8a:	4465      	add	r5, ip
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	033c      	lsls	r4, r7, #12
 8001c90:	007b      	lsls	r3, r7, #1
 8001c92:	4648      	mov	r0, r9
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d5b      	lsrs	r3, r3, #21
 8001c98:	0fff      	lsrs	r7, r7, #31
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dmul+0x60>
 8001c9e:	e189      	b.n	8001fb4 <__aeabi_dmul+0x374>
 8001ca0:	4abf      	ldr	r2, [pc, #764]	; (8001fa0 <__aeabi_dmul+0x360>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <__aeabi_dmul+0x9a>
 8001ca6:	0f42      	lsrs	r2, r0, #29
 8001ca8:	00e4      	lsls	r4, r4, #3
 8001caa:	4322      	orrs	r2, r4
 8001cac:	2480      	movs	r4, #128	; 0x80
 8001cae:	0424      	lsls	r4, r4, #16
 8001cb0:	4314      	orrs	r4, r2
 8001cb2:	4abc      	ldr	r2, [pc, #752]	; (8001fa4 <__aeabi_dmul+0x364>)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4694      	mov	ip, r2
 8001cb8:	4642      	mov	r2, r8
 8001cba:	4463      	add	r3, ip
 8001cbc:	195b      	adds	r3, r3, r5
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	9b01      	ldr	r3, [sp, #4]
 8001cc2:	407a      	eors	r2, r7
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	00c0      	lsls	r0, r0, #3
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	2e0a      	cmp	r6, #10
 8001cce:	dd1c      	ble.n	8001d0a <__aeabi_dmul+0xca>
 8001cd0:	003a      	movs	r2, r7
 8001cd2:	2e0b      	cmp	r6, #11
 8001cd4:	d05e      	beq.n	8001d94 <__aeabi_dmul+0x154>
 8001cd6:	4647      	mov	r7, r8
 8001cd8:	e056      	b.n	8001d88 <__aeabi_dmul+0x148>
 8001cda:	4649      	mov	r1, r9
 8001cdc:	4bb0      	ldr	r3, [pc, #704]	; (8001fa0 <__aeabi_dmul+0x360>)
 8001cde:	4321      	orrs	r1, r4
 8001ce0:	18eb      	adds	r3, r5, r3
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d12a      	bne.n	8001d3e <__aeabi_dmul+0xfe>
 8001ce8:	2080      	movs	r0, #128	; 0x80
 8001cea:	2202      	movs	r2, #2
 8001cec:	0100      	lsls	r0, r0, #4
 8001cee:	002b      	movs	r3, r5
 8001cf0:	4684      	mov	ip, r0
 8001cf2:	4316      	orrs	r6, r2
 8001cf4:	4642      	mov	r2, r8
 8001cf6:	4463      	add	r3, ip
 8001cf8:	407a      	eors	r2, r7
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2e0a      	cmp	r6, #10
 8001d00:	dd00      	ble.n	8001d04 <__aeabi_dmul+0xc4>
 8001d02:	e231      	b.n	8002168 <__aeabi_dmul+0x528>
 8001d04:	2000      	movs	r0, #0
 8001d06:	2400      	movs	r4, #0
 8001d08:	2102      	movs	r1, #2
 8001d0a:	2e02      	cmp	r6, #2
 8001d0c:	dc26      	bgt.n	8001d5c <__aeabi_dmul+0x11c>
 8001d0e:	3e01      	subs	r6, #1
 8001d10:	2e01      	cmp	r6, #1
 8001d12:	d852      	bhi.n	8001dba <__aeabi_dmul+0x17a>
 8001d14:	2902      	cmp	r1, #2
 8001d16:	d04c      	beq.n	8001db2 <__aeabi_dmul+0x172>
 8001d18:	2901      	cmp	r1, #1
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dmul+0xde>
 8001d1c:	e118      	b.n	8001f50 <__aeabi_dmul+0x310>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2400      	movs	r4, #0
 8001d22:	2500      	movs	r5, #0
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	4323      	orrs	r3, r4
 8001d28:	07d2      	lsls	r2, r2, #31
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	0028      	movs	r0, r5
 8001d2e:	0019      	movs	r1, r3
 8001d30:	b007      	add	sp, #28
 8001d32:	bcf0      	pop	{r4, r5, r6, r7}
 8001d34:	46bb      	mov	fp, r7
 8001d36:	46b2      	mov	sl, r6
 8001d38:	46a9      	mov	r9, r5
 8001d3a:	46a0      	mov	r8, r4
 8001d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	2203      	movs	r2, #3
 8001d42:	0109      	lsls	r1, r1, #4
 8001d44:	002b      	movs	r3, r5
 8001d46:	468c      	mov	ip, r1
 8001d48:	4316      	orrs	r6, r2
 8001d4a:	4642      	mov	r2, r8
 8001d4c:	4463      	add	r3, ip
 8001d4e:	407a      	eors	r2, r7
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	2e0a      	cmp	r6, #10
 8001d56:	dd00      	ble.n	8001d5a <__aeabi_dmul+0x11a>
 8001d58:	e228      	b.n	80021ac <__aeabi_dmul+0x56c>
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	2501      	movs	r5, #1
 8001d5e:	40b5      	lsls	r5, r6
 8001d60:	46ac      	mov	ip, r5
 8001d62:	26a6      	movs	r6, #166	; 0xa6
 8001d64:	4663      	mov	r3, ip
 8001d66:	00f6      	lsls	r6, r6, #3
 8001d68:	4035      	ands	r5, r6
 8001d6a:	4233      	tst	r3, r6
 8001d6c:	d10b      	bne.n	8001d86 <__aeabi_dmul+0x146>
 8001d6e:	2690      	movs	r6, #144	; 0x90
 8001d70:	00b6      	lsls	r6, r6, #2
 8001d72:	4233      	tst	r3, r6
 8001d74:	d118      	bne.n	8001da8 <__aeabi_dmul+0x168>
 8001d76:	3eb9      	subs	r6, #185	; 0xb9
 8001d78:	3eff      	subs	r6, #255	; 0xff
 8001d7a:	421e      	tst	r6, r3
 8001d7c:	d01d      	beq.n	8001dba <__aeabi_dmul+0x17a>
 8001d7e:	46a3      	mov	fp, r4
 8001d80:	4682      	mov	sl, r0
 8001d82:	9100      	str	r1, [sp, #0]
 8001d84:	e000      	b.n	8001d88 <__aeabi_dmul+0x148>
 8001d86:	0017      	movs	r7, r2
 8001d88:	9900      	ldr	r1, [sp, #0]
 8001d8a:	003a      	movs	r2, r7
 8001d8c:	2902      	cmp	r1, #2
 8001d8e:	d010      	beq.n	8001db2 <__aeabi_dmul+0x172>
 8001d90:	465c      	mov	r4, fp
 8001d92:	4650      	mov	r0, sl
 8001d94:	2903      	cmp	r1, #3
 8001d96:	d1bf      	bne.n	8001d18 <__aeabi_dmul+0xd8>
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	031b      	lsls	r3, r3, #12
 8001d9c:	431c      	orrs	r4, r3
 8001d9e:	0324      	lsls	r4, r4, #12
 8001da0:	0005      	movs	r5, r0
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <__aeabi_dmul+0x360>)
 8001da4:	0b24      	lsrs	r4, r4, #12
 8001da6:	e7bd      	b.n	8001d24 <__aeabi_dmul+0xe4>
 8001da8:	2480      	movs	r4, #128	; 0x80
 8001daa:	2200      	movs	r2, #0
 8001dac:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <__aeabi_dmul+0x360>)
 8001dae:	0324      	lsls	r4, r4, #12
 8001db0:	e7b8      	b.n	8001d24 <__aeabi_dmul+0xe4>
 8001db2:	2400      	movs	r4, #0
 8001db4:	2500      	movs	r5, #0
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <__aeabi_dmul+0x360>)
 8001db8:	e7b4      	b.n	8001d24 <__aeabi_dmul+0xe4>
 8001dba:	4653      	mov	r3, sl
 8001dbc:	041e      	lsls	r6, r3, #16
 8001dbe:	0c36      	lsrs	r6, r6, #16
 8001dc0:	0c1f      	lsrs	r7, r3, #16
 8001dc2:	0033      	movs	r3, r6
 8001dc4:	0c01      	lsrs	r1, r0, #16
 8001dc6:	0400      	lsls	r0, r0, #16
 8001dc8:	0c00      	lsrs	r0, r0, #16
 8001dca:	4343      	muls	r3, r0
 8001dcc:	4698      	mov	r8, r3
 8001dce:	0003      	movs	r3, r0
 8001dd0:	437b      	muls	r3, r7
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	0033      	movs	r3, r6
 8001dd6:	434b      	muls	r3, r1
 8001dd8:	469c      	mov	ip, r3
 8001dda:	4643      	mov	r3, r8
 8001ddc:	000d      	movs	r5, r1
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	469a      	mov	sl, r3
 8001de2:	437d      	muls	r5, r7
 8001de4:	44cc      	add	ip, r9
 8001de6:	44d4      	add	ip, sl
 8001de8:	9500      	str	r5, [sp, #0]
 8001dea:	45e1      	cmp	r9, ip
 8001dec:	d904      	bls.n	8001df8 <__aeabi_dmul+0x1b8>
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	025b      	lsls	r3, r3, #9
 8001df2:	4699      	mov	r9, r3
 8001df4:	444d      	add	r5, r9
 8001df6:	9500      	str	r5, [sp, #0]
 8001df8:	4663      	mov	r3, ip
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	001d      	movs	r5, r3
 8001dfe:	4663      	mov	r3, ip
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	469c      	mov	ip, r3
 8001e04:	4643      	mov	r3, r8
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	4698      	mov	r8, r3
 8001e0c:	4663      	mov	r3, ip
 8001e0e:	4443      	add	r3, r8
 8001e10:	9303      	str	r3, [sp, #12]
 8001e12:	0c23      	lsrs	r3, r4, #16
 8001e14:	4698      	mov	r8, r3
 8001e16:	0033      	movs	r3, r6
 8001e18:	0424      	lsls	r4, r4, #16
 8001e1a:	0c24      	lsrs	r4, r4, #16
 8001e1c:	4363      	muls	r3, r4
 8001e1e:	469c      	mov	ip, r3
 8001e20:	0023      	movs	r3, r4
 8001e22:	437b      	muls	r3, r7
 8001e24:	4699      	mov	r9, r3
 8001e26:	4643      	mov	r3, r8
 8001e28:	435e      	muls	r6, r3
 8001e2a:	435f      	muls	r7, r3
 8001e2c:	444e      	add	r6, r9
 8001e2e:	4663      	mov	r3, ip
 8001e30:	46b2      	mov	sl, r6
 8001e32:	0c1e      	lsrs	r6, r3, #16
 8001e34:	4456      	add	r6, sl
 8001e36:	45b1      	cmp	r9, r6
 8001e38:	d903      	bls.n	8001e42 <__aeabi_dmul+0x202>
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	025b      	lsls	r3, r3, #9
 8001e3e:	4699      	mov	r9, r3
 8001e40:	444f      	add	r7, r9
 8001e42:	0c33      	lsrs	r3, r6, #16
 8001e44:	4699      	mov	r9, r3
 8001e46:	003b      	movs	r3, r7
 8001e48:	444b      	add	r3, r9
 8001e4a:	9305      	str	r3, [sp, #20]
 8001e4c:	4663      	mov	r3, ip
 8001e4e:	46ac      	mov	ip, r5
 8001e50:	041f      	lsls	r7, r3, #16
 8001e52:	0c3f      	lsrs	r7, r7, #16
 8001e54:	0436      	lsls	r6, r6, #16
 8001e56:	19f6      	adds	r6, r6, r7
 8001e58:	44b4      	add	ip, r6
 8001e5a:	4663      	mov	r3, ip
 8001e5c:	9304      	str	r3, [sp, #16]
 8001e5e:	465b      	mov	r3, fp
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	469c      	mov	ip, r3
 8001e64:	465b      	mov	r3, fp
 8001e66:	041f      	lsls	r7, r3, #16
 8001e68:	0c3f      	lsrs	r7, r7, #16
 8001e6a:	003b      	movs	r3, r7
 8001e6c:	4343      	muls	r3, r0
 8001e6e:	4699      	mov	r9, r3
 8001e70:	4663      	mov	r3, ip
 8001e72:	4343      	muls	r3, r0
 8001e74:	469a      	mov	sl, r3
 8001e76:	464b      	mov	r3, r9
 8001e78:	4660      	mov	r0, ip
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	469b      	mov	fp, r3
 8001e7e:	4348      	muls	r0, r1
 8001e80:	4379      	muls	r1, r7
 8001e82:	4451      	add	r1, sl
 8001e84:	4459      	add	r1, fp
 8001e86:	458a      	cmp	sl, r1
 8001e88:	d903      	bls.n	8001e92 <__aeabi_dmul+0x252>
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	469a      	mov	sl, r3
 8001e90:	4450      	add	r0, sl
 8001e92:	0c0b      	lsrs	r3, r1, #16
 8001e94:	469a      	mov	sl, r3
 8001e96:	464b      	mov	r3, r9
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	4363      	muls	r3, r4
 8001ea2:	0409      	lsls	r1, r1, #16
 8001ea4:	4645      	mov	r5, r8
 8001ea6:	4449      	add	r1, r9
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	4663      	mov	r3, ip
 8001eac:	435c      	muls	r4, r3
 8001eae:	436b      	muls	r3, r5
 8001eb0:	469c      	mov	ip, r3
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	436f      	muls	r7, r5
 8001eba:	193f      	adds	r7, r7, r4
 8001ebc:	4447      	add	r7, r8
 8001ebe:	4450      	add	r0, sl
 8001ec0:	42bc      	cmp	r4, r7
 8001ec2:	d903      	bls.n	8001ecc <__aeabi_dmul+0x28c>
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	4698      	mov	r8, r3
 8001eca:	44c4      	add	ip, r8
 8001ecc:	9b04      	ldr	r3, [sp, #16]
 8001ece:	9d00      	ldr	r5, [sp, #0]
 8001ed0:	4698      	mov	r8, r3
 8001ed2:	4445      	add	r5, r8
 8001ed4:	42b5      	cmp	r5, r6
 8001ed6:	41b6      	sbcs	r6, r6
 8001ed8:	4273      	negs	r3, r6
 8001eda:	4698      	mov	r8, r3
 8001edc:	464b      	mov	r3, r9
 8001ede:	041e      	lsls	r6, r3, #16
 8001ee0:	9b05      	ldr	r3, [sp, #20]
 8001ee2:	043c      	lsls	r4, r7, #16
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	0c36      	lsrs	r6, r6, #16
 8001ee8:	19a4      	adds	r4, r4, r6
 8001eea:	444c      	add	r4, r9
 8001eec:	46a1      	mov	r9, r4
 8001eee:	4683      	mov	fp, r0
 8001ef0:	186e      	adds	r6, r5, r1
 8001ef2:	44c1      	add	r9, r8
 8001ef4:	428e      	cmp	r6, r1
 8001ef6:	4189      	sbcs	r1, r1
 8001ef8:	44cb      	add	fp, r9
 8001efa:	465d      	mov	r5, fp
 8001efc:	4249      	negs	r1, r1
 8001efe:	186d      	adds	r5, r5, r1
 8001f00:	429c      	cmp	r4, r3
 8001f02:	41a4      	sbcs	r4, r4
 8001f04:	45c1      	cmp	r9, r8
 8001f06:	419b      	sbcs	r3, r3
 8001f08:	4583      	cmp	fp, r0
 8001f0a:	4180      	sbcs	r0, r0
 8001f0c:	428d      	cmp	r5, r1
 8001f0e:	4189      	sbcs	r1, r1
 8001f10:	425b      	negs	r3, r3
 8001f12:	4264      	negs	r4, r4
 8001f14:	431c      	orrs	r4, r3
 8001f16:	4240      	negs	r0, r0
 8001f18:	9b03      	ldr	r3, [sp, #12]
 8001f1a:	4249      	negs	r1, r1
 8001f1c:	4301      	orrs	r1, r0
 8001f1e:	0270      	lsls	r0, r6, #9
 8001f20:	0c3f      	lsrs	r7, r7, #16
 8001f22:	4318      	orrs	r0, r3
 8001f24:	19e4      	adds	r4, r4, r7
 8001f26:	1e47      	subs	r7, r0, #1
 8001f28:	41b8      	sbcs	r0, r7
 8001f2a:	1864      	adds	r4, r4, r1
 8001f2c:	4464      	add	r4, ip
 8001f2e:	0df6      	lsrs	r6, r6, #23
 8001f30:	0261      	lsls	r1, r4, #9
 8001f32:	4330      	orrs	r0, r6
 8001f34:	0dec      	lsrs	r4, r5, #23
 8001f36:	026e      	lsls	r6, r5, #9
 8001f38:	430c      	orrs	r4, r1
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	01c9      	lsls	r1, r1, #7
 8001f3e:	d400      	bmi.n	8001f42 <__aeabi_dmul+0x302>
 8001f40:	e0f1      	b.n	8002126 <__aeabi_dmul+0x4e6>
 8001f42:	2101      	movs	r1, #1
 8001f44:	0843      	lsrs	r3, r0, #1
 8001f46:	4001      	ands	r1, r0
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	07e0      	lsls	r0, r4, #31
 8001f4c:	4318      	orrs	r0, r3
 8001f4e:	0864      	lsrs	r4, r4, #1
 8001f50:	4915      	ldr	r1, [pc, #84]	; (8001fa8 <__aeabi_dmul+0x368>)
 8001f52:	9b02      	ldr	r3, [sp, #8]
 8001f54:	468c      	mov	ip, r1
 8001f56:	4463      	add	r3, ip
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	dc00      	bgt.n	8001f5e <__aeabi_dmul+0x31e>
 8001f5c:	e097      	b.n	800208e <__aeabi_dmul+0x44e>
 8001f5e:	0741      	lsls	r1, r0, #29
 8001f60:	d009      	beq.n	8001f76 <__aeabi_dmul+0x336>
 8001f62:	210f      	movs	r1, #15
 8001f64:	4001      	ands	r1, r0
 8001f66:	2904      	cmp	r1, #4
 8001f68:	d005      	beq.n	8001f76 <__aeabi_dmul+0x336>
 8001f6a:	1d01      	adds	r1, r0, #4
 8001f6c:	4281      	cmp	r1, r0
 8001f6e:	4180      	sbcs	r0, r0
 8001f70:	4240      	negs	r0, r0
 8001f72:	1824      	adds	r4, r4, r0
 8001f74:	0008      	movs	r0, r1
 8001f76:	01e1      	lsls	r1, r4, #7
 8001f78:	d506      	bpl.n	8001f88 <__aeabi_dmul+0x348>
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	00c9      	lsls	r1, r1, #3
 8001f7e:	468c      	mov	ip, r1
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <__aeabi_dmul+0x36c>)
 8001f82:	401c      	ands	r4, r3
 8001f84:	9b02      	ldr	r3, [sp, #8]
 8001f86:	4463      	add	r3, ip
 8001f88:	4909      	ldr	r1, [pc, #36]	; (8001fb0 <__aeabi_dmul+0x370>)
 8001f8a:	428b      	cmp	r3, r1
 8001f8c:	dd00      	ble.n	8001f90 <__aeabi_dmul+0x350>
 8001f8e:	e710      	b.n	8001db2 <__aeabi_dmul+0x172>
 8001f90:	0761      	lsls	r1, r4, #29
 8001f92:	08c5      	lsrs	r5, r0, #3
 8001f94:	0264      	lsls	r4, r4, #9
 8001f96:	055b      	lsls	r3, r3, #21
 8001f98:	430d      	orrs	r5, r1
 8001f9a:	0b24      	lsrs	r4, r4, #12
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	e6c1      	b.n	8001d24 <__aeabi_dmul+0xe4>
 8001fa0:	000007ff 	.word	0x000007ff
 8001fa4:	fffffc01 	.word	0xfffffc01
 8001fa8:	000003ff 	.word	0x000003ff
 8001fac:	feffffff 	.word	0xfeffffff
 8001fb0:	000007fe 	.word	0x000007fe
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	d059      	beq.n	800206e <__aeabi_dmul+0x42e>
 8001fba:	2c00      	cmp	r4, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dmul+0x380>
 8001fbe:	e0a3      	b.n	8002108 <__aeabi_dmul+0x4c8>
 8001fc0:	0020      	movs	r0, r4
 8001fc2:	f000 fdf9 	bl	8002bb8 <__clzsi2>
 8001fc6:	0001      	movs	r1, r0
 8001fc8:	0003      	movs	r3, r0
 8001fca:	390b      	subs	r1, #11
 8001fcc:	221d      	movs	r2, #29
 8001fce:	1a52      	subs	r2, r2, r1
 8001fd0:	4649      	mov	r1, r9
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	40d1      	lsrs	r1, r2
 8001fd6:	464a      	mov	r2, r9
 8001fd8:	3808      	subs	r0, #8
 8001fda:	4082      	lsls	r2, r0
 8001fdc:	4084      	lsls	r4, r0
 8001fde:	0010      	movs	r0, r2
 8001fe0:	430c      	orrs	r4, r1
 8001fe2:	4a74      	ldr	r2, [pc, #464]	; (80021b4 <__aeabi_dmul+0x574>)
 8001fe4:	1aeb      	subs	r3, r5, r3
 8001fe6:	4694      	mov	ip, r2
 8001fe8:	4642      	mov	r2, r8
 8001fea:	4463      	add	r3, ip
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	9b01      	ldr	r3, [sp, #4]
 8001ff0:	407a      	eors	r2, r7
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	2e0a      	cmp	r6, #10
 8001ffc:	dd00      	ble.n	8002000 <__aeabi_dmul+0x3c0>
 8001ffe:	e667      	b.n	8001cd0 <__aeabi_dmul+0x90>
 8002000:	e683      	b.n	8001d0a <__aeabi_dmul+0xca>
 8002002:	465b      	mov	r3, fp
 8002004:	4303      	orrs	r3, r0
 8002006:	469a      	mov	sl, r3
 8002008:	d02a      	beq.n	8002060 <__aeabi_dmul+0x420>
 800200a:	465b      	mov	r3, fp
 800200c:	2b00      	cmp	r3, #0
 800200e:	d06d      	beq.n	80020ec <__aeabi_dmul+0x4ac>
 8002010:	4658      	mov	r0, fp
 8002012:	f000 fdd1 	bl	8002bb8 <__clzsi2>
 8002016:	0001      	movs	r1, r0
 8002018:	0003      	movs	r3, r0
 800201a:	390b      	subs	r1, #11
 800201c:	221d      	movs	r2, #29
 800201e:	1a52      	subs	r2, r2, r1
 8002020:	0021      	movs	r1, r4
 8002022:	0018      	movs	r0, r3
 8002024:	465d      	mov	r5, fp
 8002026:	40d1      	lsrs	r1, r2
 8002028:	3808      	subs	r0, #8
 800202a:	4085      	lsls	r5, r0
 800202c:	000a      	movs	r2, r1
 800202e:	4084      	lsls	r4, r0
 8002030:	432a      	orrs	r2, r5
 8002032:	4693      	mov	fp, r2
 8002034:	46a2      	mov	sl, r4
 8002036:	4d5f      	ldr	r5, [pc, #380]	; (80021b4 <__aeabi_dmul+0x574>)
 8002038:	2600      	movs	r6, #0
 800203a:	1aed      	subs	r5, r5, r3
 800203c:	2300      	movs	r3, #0
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	e625      	b.n	8001c8e <__aeabi_dmul+0x4e>
 8002042:	465b      	mov	r3, fp
 8002044:	4303      	orrs	r3, r0
 8002046:	469a      	mov	sl, r3
 8002048:	d105      	bne.n	8002056 <__aeabi_dmul+0x416>
 800204a:	2300      	movs	r3, #0
 800204c:	469b      	mov	fp, r3
 800204e:	3302      	adds	r3, #2
 8002050:	2608      	movs	r6, #8
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	e61b      	b.n	8001c8e <__aeabi_dmul+0x4e>
 8002056:	2303      	movs	r3, #3
 8002058:	4682      	mov	sl, r0
 800205a:	260c      	movs	r6, #12
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	e616      	b.n	8001c8e <__aeabi_dmul+0x4e>
 8002060:	2300      	movs	r3, #0
 8002062:	469b      	mov	fp, r3
 8002064:	3301      	adds	r3, #1
 8002066:	2604      	movs	r6, #4
 8002068:	2500      	movs	r5, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	e60f      	b.n	8001c8e <__aeabi_dmul+0x4e>
 800206e:	4642      	mov	r2, r8
 8002070:	3301      	adds	r3, #1
 8002072:	9501      	str	r5, [sp, #4]
 8002074:	431e      	orrs	r6, r3
 8002076:	9b01      	ldr	r3, [sp, #4]
 8002078:	407a      	eors	r2, r7
 800207a:	3301      	adds	r3, #1
 800207c:	2400      	movs	r4, #0
 800207e:	2000      	movs	r0, #0
 8002080:	2101      	movs	r1, #1
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	2e0a      	cmp	r6, #10
 8002088:	dd00      	ble.n	800208c <__aeabi_dmul+0x44c>
 800208a:	e621      	b.n	8001cd0 <__aeabi_dmul+0x90>
 800208c:	e63d      	b.n	8001d0a <__aeabi_dmul+0xca>
 800208e:	2101      	movs	r1, #1
 8002090:	1ac9      	subs	r1, r1, r3
 8002092:	2938      	cmp	r1, #56	; 0x38
 8002094:	dd00      	ble.n	8002098 <__aeabi_dmul+0x458>
 8002096:	e642      	b.n	8001d1e <__aeabi_dmul+0xde>
 8002098:	291f      	cmp	r1, #31
 800209a:	dd47      	ble.n	800212c <__aeabi_dmul+0x4ec>
 800209c:	261f      	movs	r6, #31
 800209e:	0025      	movs	r5, r4
 80020a0:	4276      	negs	r6, r6
 80020a2:	1af3      	subs	r3, r6, r3
 80020a4:	40dd      	lsrs	r5, r3
 80020a6:	002b      	movs	r3, r5
 80020a8:	2920      	cmp	r1, #32
 80020aa:	d005      	beq.n	80020b8 <__aeabi_dmul+0x478>
 80020ac:	4942      	ldr	r1, [pc, #264]	; (80021b8 <__aeabi_dmul+0x578>)
 80020ae:	9d02      	ldr	r5, [sp, #8]
 80020b0:	468c      	mov	ip, r1
 80020b2:	4465      	add	r5, ip
 80020b4:	40ac      	lsls	r4, r5
 80020b6:	4320      	orrs	r0, r4
 80020b8:	1e41      	subs	r1, r0, #1
 80020ba:	4188      	sbcs	r0, r1
 80020bc:	4318      	orrs	r0, r3
 80020be:	2307      	movs	r3, #7
 80020c0:	001d      	movs	r5, r3
 80020c2:	2400      	movs	r4, #0
 80020c4:	4005      	ands	r5, r0
 80020c6:	4203      	tst	r3, r0
 80020c8:	d04a      	beq.n	8002160 <__aeabi_dmul+0x520>
 80020ca:	230f      	movs	r3, #15
 80020cc:	2400      	movs	r4, #0
 80020ce:	4003      	ands	r3, r0
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d042      	beq.n	800215a <__aeabi_dmul+0x51a>
 80020d4:	1d03      	adds	r3, r0, #4
 80020d6:	4283      	cmp	r3, r0
 80020d8:	4180      	sbcs	r0, r0
 80020da:	4240      	negs	r0, r0
 80020dc:	1824      	adds	r4, r4, r0
 80020de:	0018      	movs	r0, r3
 80020e0:	0223      	lsls	r3, r4, #8
 80020e2:	d53a      	bpl.n	800215a <__aeabi_dmul+0x51a>
 80020e4:	2301      	movs	r3, #1
 80020e6:	2400      	movs	r4, #0
 80020e8:	2500      	movs	r5, #0
 80020ea:	e61b      	b.n	8001d24 <__aeabi_dmul+0xe4>
 80020ec:	f000 fd64 	bl	8002bb8 <__clzsi2>
 80020f0:	0001      	movs	r1, r0
 80020f2:	0003      	movs	r3, r0
 80020f4:	3115      	adds	r1, #21
 80020f6:	3320      	adds	r3, #32
 80020f8:	291c      	cmp	r1, #28
 80020fa:	dd8f      	ble.n	800201c <__aeabi_dmul+0x3dc>
 80020fc:	3808      	subs	r0, #8
 80020fe:	2200      	movs	r2, #0
 8002100:	4084      	lsls	r4, r0
 8002102:	4692      	mov	sl, r2
 8002104:	46a3      	mov	fp, r4
 8002106:	e796      	b.n	8002036 <__aeabi_dmul+0x3f6>
 8002108:	f000 fd56 	bl	8002bb8 <__clzsi2>
 800210c:	0001      	movs	r1, r0
 800210e:	0003      	movs	r3, r0
 8002110:	3115      	adds	r1, #21
 8002112:	3320      	adds	r3, #32
 8002114:	291c      	cmp	r1, #28
 8002116:	dc00      	bgt.n	800211a <__aeabi_dmul+0x4da>
 8002118:	e758      	b.n	8001fcc <__aeabi_dmul+0x38c>
 800211a:	0002      	movs	r2, r0
 800211c:	464c      	mov	r4, r9
 800211e:	3a08      	subs	r2, #8
 8002120:	2000      	movs	r0, #0
 8002122:	4094      	lsls	r4, r2
 8002124:	e75d      	b.n	8001fe2 <__aeabi_dmul+0x3a2>
 8002126:	9b01      	ldr	r3, [sp, #4]
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	e711      	b.n	8001f50 <__aeabi_dmul+0x310>
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <__aeabi_dmul+0x57c>)
 800212e:	0026      	movs	r6, r4
 8002130:	469c      	mov	ip, r3
 8002132:	0003      	movs	r3, r0
 8002134:	9d02      	ldr	r5, [sp, #8]
 8002136:	40cb      	lsrs	r3, r1
 8002138:	4465      	add	r5, ip
 800213a:	40ae      	lsls	r6, r5
 800213c:	431e      	orrs	r6, r3
 800213e:	0003      	movs	r3, r0
 8002140:	40ab      	lsls	r3, r5
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	4183      	sbcs	r3, r0
 8002146:	0030      	movs	r0, r6
 8002148:	4318      	orrs	r0, r3
 800214a:	40cc      	lsrs	r4, r1
 800214c:	0743      	lsls	r3, r0, #29
 800214e:	d0c7      	beq.n	80020e0 <__aeabi_dmul+0x4a0>
 8002150:	230f      	movs	r3, #15
 8002152:	4003      	ands	r3, r0
 8002154:	2b04      	cmp	r3, #4
 8002156:	d1bd      	bne.n	80020d4 <__aeabi_dmul+0x494>
 8002158:	e7c2      	b.n	80020e0 <__aeabi_dmul+0x4a0>
 800215a:	0765      	lsls	r5, r4, #29
 800215c:	0264      	lsls	r4, r4, #9
 800215e:	0b24      	lsrs	r4, r4, #12
 8002160:	08c0      	lsrs	r0, r0, #3
 8002162:	2300      	movs	r3, #0
 8002164:	4305      	orrs	r5, r0
 8002166:	e5dd      	b.n	8001d24 <__aeabi_dmul+0xe4>
 8002168:	2500      	movs	r5, #0
 800216a:	2302      	movs	r3, #2
 800216c:	2e0f      	cmp	r6, #15
 800216e:	d10c      	bne.n	800218a <__aeabi_dmul+0x54a>
 8002170:	2480      	movs	r4, #128	; 0x80
 8002172:	465b      	mov	r3, fp
 8002174:	0324      	lsls	r4, r4, #12
 8002176:	4223      	tst	r3, r4
 8002178:	d00e      	beq.n	8002198 <__aeabi_dmul+0x558>
 800217a:	4221      	tst	r1, r4
 800217c:	d10c      	bne.n	8002198 <__aeabi_dmul+0x558>
 800217e:	430c      	orrs	r4, r1
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	003a      	movs	r2, r7
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <__aeabi_dmul+0x580>)
 8002186:	0b24      	lsrs	r4, r4, #12
 8002188:	e5cc      	b.n	8001d24 <__aeabi_dmul+0xe4>
 800218a:	2e0b      	cmp	r6, #11
 800218c:	d000      	beq.n	8002190 <__aeabi_dmul+0x550>
 800218e:	e5a2      	b.n	8001cd6 <__aeabi_dmul+0x96>
 8002190:	468b      	mov	fp, r1
 8002192:	46aa      	mov	sl, r5
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	e5f7      	b.n	8001d88 <__aeabi_dmul+0x148>
 8002198:	2480      	movs	r4, #128	; 0x80
 800219a:	465b      	mov	r3, fp
 800219c:	0324      	lsls	r4, r4, #12
 800219e:	431c      	orrs	r4, r3
 80021a0:	0324      	lsls	r4, r4, #12
 80021a2:	4642      	mov	r2, r8
 80021a4:	4655      	mov	r5, sl
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <__aeabi_dmul+0x580>)
 80021a8:	0b24      	lsrs	r4, r4, #12
 80021aa:	e5bb      	b.n	8001d24 <__aeabi_dmul+0xe4>
 80021ac:	464d      	mov	r5, r9
 80021ae:	0021      	movs	r1, r4
 80021b0:	2303      	movs	r3, #3
 80021b2:	e7db      	b.n	800216c <__aeabi_dmul+0x52c>
 80021b4:	fffffc0d 	.word	0xfffffc0d
 80021b8:	0000043e 	.word	0x0000043e
 80021bc:	0000041e 	.word	0x0000041e
 80021c0:	000007ff 	.word	0x000007ff

080021c4 <__aeabi_dsub>:
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	4657      	mov	r7, sl
 80021c8:	464e      	mov	r6, r9
 80021ca:	4645      	mov	r5, r8
 80021cc:	46de      	mov	lr, fp
 80021ce:	b5e0      	push	{r5, r6, r7, lr}
 80021d0:	000d      	movs	r5, r1
 80021d2:	0004      	movs	r4, r0
 80021d4:	0019      	movs	r1, r3
 80021d6:	0010      	movs	r0, r2
 80021d8:	032b      	lsls	r3, r5, #12
 80021da:	0a5b      	lsrs	r3, r3, #9
 80021dc:	0f62      	lsrs	r2, r4, #29
 80021de:	431a      	orrs	r2, r3
 80021e0:	00e3      	lsls	r3, r4, #3
 80021e2:	030c      	lsls	r4, r1, #12
 80021e4:	0a64      	lsrs	r4, r4, #9
 80021e6:	0f47      	lsrs	r7, r0, #29
 80021e8:	4327      	orrs	r7, r4
 80021ea:	4cd0      	ldr	r4, [pc, #832]	; (800252c <__aeabi_dsub+0x368>)
 80021ec:	006e      	lsls	r6, r5, #1
 80021ee:	4691      	mov	r9, r2
 80021f0:	b083      	sub	sp, #12
 80021f2:	004a      	lsls	r2, r1, #1
 80021f4:	00c0      	lsls	r0, r0, #3
 80021f6:	4698      	mov	r8, r3
 80021f8:	46a2      	mov	sl, r4
 80021fa:	0d76      	lsrs	r6, r6, #21
 80021fc:	0fed      	lsrs	r5, r5, #31
 80021fe:	0d52      	lsrs	r2, r2, #21
 8002200:	0fc9      	lsrs	r1, r1, #31
 8002202:	9001      	str	r0, [sp, #4]
 8002204:	42a2      	cmp	r2, r4
 8002206:	d100      	bne.n	800220a <__aeabi_dsub+0x46>
 8002208:	e0b9      	b.n	800237e <__aeabi_dsub+0x1ba>
 800220a:	2401      	movs	r4, #1
 800220c:	4061      	eors	r1, r4
 800220e:	468b      	mov	fp, r1
 8002210:	428d      	cmp	r5, r1
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x52>
 8002214:	e08d      	b.n	8002332 <__aeabi_dsub+0x16e>
 8002216:	1ab4      	subs	r4, r6, r2
 8002218:	46a4      	mov	ip, r4
 800221a:	2c00      	cmp	r4, #0
 800221c:	dc00      	bgt.n	8002220 <__aeabi_dsub+0x5c>
 800221e:	e0b7      	b.n	8002390 <__aeabi_dsub+0x1cc>
 8002220:	2a00      	cmp	r2, #0
 8002222:	d100      	bne.n	8002226 <__aeabi_dsub+0x62>
 8002224:	e0cb      	b.n	80023be <__aeabi_dsub+0x1fa>
 8002226:	4ac1      	ldr	r2, [pc, #772]	; (800252c <__aeabi_dsub+0x368>)
 8002228:	4296      	cmp	r6, r2
 800222a:	d100      	bne.n	800222e <__aeabi_dsub+0x6a>
 800222c:	e186      	b.n	800253c <__aeabi_dsub+0x378>
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	0412      	lsls	r2, r2, #16
 8002232:	4317      	orrs	r7, r2
 8002234:	4662      	mov	r2, ip
 8002236:	2a38      	cmp	r2, #56	; 0x38
 8002238:	dd00      	ble.n	800223c <__aeabi_dsub+0x78>
 800223a:	e1a4      	b.n	8002586 <__aeabi_dsub+0x3c2>
 800223c:	2a1f      	cmp	r2, #31
 800223e:	dd00      	ble.n	8002242 <__aeabi_dsub+0x7e>
 8002240:	e21d      	b.n	800267e <__aeabi_dsub+0x4ba>
 8002242:	4661      	mov	r1, ip
 8002244:	2220      	movs	r2, #32
 8002246:	003c      	movs	r4, r7
 8002248:	1a52      	subs	r2, r2, r1
 800224a:	0001      	movs	r1, r0
 800224c:	4090      	lsls	r0, r2
 800224e:	4094      	lsls	r4, r2
 8002250:	1e42      	subs	r2, r0, #1
 8002252:	4190      	sbcs	r0, r2
 8002254:	4662      	mov	r2, ip
 8002256:	46a0      	mov	r8, r4
 8002258:	4664      	mov	r4, ip
 800225a:	40d7      	lsrs	r7, r2
 800225c:	464a      	mov	r2, r9
 800225e:	40e1      	lsrs	r1, r4
 8002260:	4644      	mov	r4, r8
 8002262:	1bd2      	subs	r2, r2, r7
 8002264:	4691      	mov	r9, r2
 8002266:	430c      	orrs	r4, r1
 8002268:	4304      	orrs	r4, r0
 800226a:	1b1c      	subs	r4, r3, r4
 800226c:	42a3      	cmp	r3, r4
 800226e:	4192      	sbcs	r2, r2
 8002270:	464b      	mov	r3, r9
 8002272:	4252      	negs	r2, r2
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	469a      	mov	sl, r3
 8002278:	4653      	mov	r3, sl
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	d400      	bmi.n	8002280 <__aeabi_dsub+0xbc>
 800227e:	e12b      	b.n	80024d8 <__aeabi_dsub+0x314>
 8002280:	4653      	mov	r3, sl
 8002282:	025a      	lsls	r2, r3, #9
 8002284:	0a53      	lsrs	r3, r2, #9
 8002286:	469a      	mov	sl, r3
 8002288:	4653      	mov	r3, sl
 800228a:	2b00      	cmp	r3, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dsub+0xcc>
 800228e:	e166      	b.n	800255e <__aeabi_dsub+0x39a>
 8002290:	4650      	mov	r0, sl
 8002292:	f000 fc91 	bl	8002bb8 <__clzsi2>
 8002296:	0003      	movs	r3, r0
 8002298:	3b08      	subs	r3, #8
 800229a:	2220      	movs	r2, #32
 800229c:	0020      	movs	r0, r4
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	4651      	mov	r1, sl
 80022a2:	40d0      	lsrs	r0, r2
 80022a4:	4099      	lsls	r1, r3
 80022a6:	0002      	movs	r2, r0
 80022a8:	409c      	lsls	r4, r3
 80022aa:	430a      	orrs	r2, r1
 80022ac:	429e      	cmp	r6, r3
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0xee>
 80022b0:	e164      	b.n	800257c <__aeabi_dsub+0x3b8>
 80022b2:	1b9b      	subs	r3, r3, r6
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	291f      	cmp	r1, #31
 80022b8:	dd00      	ble.n	80022bc <__aeabi_dsub+0xf8>
 80022ba:	e0fe      	b.n	80024ba <__aeabi_dsub+0x2f6>
 80022bc:	2320      	movs	r3, #32
 80022be:	0010      	movs	r0, r2
 80022c0:	0026      	movs	r6, r4
 80022c2:	1a5b      	subs	r3, r3, r1
 80022c4:	409c      	lsls	r4, r3
 80022c6:	4098      	lsls	r0, r3
 80022c8:	40ce      	lsrs	r6, r1
 80022ca:	40ca      	lsrs	r2, r1
 80022cc:	1e63      	subs	r3, r4, #1
 80022ce:	419c      	sbcs	r4, r3
 80022d0:	4330      	orrs	r0, r6
 80022d2:	4692      	mov	sl, r2
 80022d4:	2600      	movs	r6, #0
 80022d6:	4304      	orrs	r4, r0
 80022d8:	0763      	lsls	r3, r4, #29
 80022da:	d009      	beq.n	80022f0 <__aeabi_dsub+0x12c>
 80022dc:	230f      	movs	r3, #15
 80022de:	4023      	ands	r3, r4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d005      	beq.n	80022f0 <__aeabi_dsub+0x12c>
 80022e4:	1d23      	adds	r3, r4, #4
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	41a4      	sbcs	r4, r4
 80022ea:	4264      	negs	r4, r4
 80022ec:	44a2      	add	sl, r4
 80022ee:	001c      	movs	r4, r3
 80022f0:	4653      	mov	r3, sl
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	d400      	bmi.n	80022f8 <__aeabi_dsub+0x134>
 80022f6:	e0f2      	b.n	80024de <__aeabi_dsub+0x31a>
 80022f8:	4b8c      	ldr	r3, [pc, #560]	; (800252c <__aeabi_dsub+0x368>)
 80022fa:	3601      	adds	r6, #1
 80022fc:	429e      	cmp	r6, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x13e>
 8002300:	e10f      	b.n	8002522 <__aeabi_dsub+0x35e>
 8002302:	4653      	mov	r3, sl
 8002304:	498a      	ldr	r1, [pc, #552]	; (8002530 <__aeabi_dsub+0x36c>)
 8002306:	08e4      	lsrs	r4, r4, #3
 8002308:	400b      	ands	r3, r1
 800230a:	0019      	movs	r1, r3
 800230c:	075b      	lsls	r3, r3, #29
 800230e:	4323      	orrs	r3, r4
 8002310:	0572      	lsls	r2, r6, #21
 8002312:	024c      	lsls	r4, r1, #9
 8002314:	0b24      	lsrs	r4, r4, #12
 8002316:	0d52      	lsrs	r2, r2, #21
 8002318:	0512      	lsls	r2, r2, #20
 800231a:	4322      	orrs	r2, r4
 800231c:	07ed      	lsls	r5, r5, #31
 800231e:	432a      	orrs	r2, r5
 8002320:	0018      	movs	r0, r3
 8002322:	0011      	movs	r1, r2
 8002324:	b003      	add	sp, #12
 8002326:	bcf0      	pop	{r4, r5, r6, r7}
 8002328:	46bb      	mov	fp, r7
 800232a:	46b2      	mov	sl, r6
 800232c:	46a9      	mov	r9, r5
 800232e:	46a0      	mov	r8, r4
 8002330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002332:	1ab4      	subs	r4, r6, r2
 8002334:	46a4      	mov	ip, r4
 8002336:	2c00      	cmp	r4, #0
 8002338:	dd59      	ble.n	80023ee <__aeabi_dsub+0x22a>
 800233a:	2a00      	cmp	r2, #0
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x17c>
 800233e:	e0b0      	b.n	80024a2 <__aeabi_dsub+0x2de>
 8002340:	4556      	cmp	r6, sl
 8002342:	d100      	bne.n	8002346 <__aeabi_dsub+0x182>
 8002344:	e0fa      	b.n	800253c <__aeabi_dsub+0x378>
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	0412      	lsls	r2, r2, #16
 800234a:	4317      	orrs	r7, r2
 800234c:	4662      	mov	r2, ip
 800234e:	2a38      	cmp	r2, #56	; 0x38
 8002350:	dd00      	ble.n	8002354 <__aeabi_dsub+0x190>
 8002352:	e0d4      	b.n	80024fe <__aeabi_dsub+0x33a>
 8002354:	2a1f      	cmp	r2, #31
 8002356:	dc00      	bgt.n	800235a <__aeabi_dsub+0x196>
 8002358:	e1c0      	b.n	80026dc <__aeabi_dsub+0x518>
 800235a:	0039      	movs	r1, r7
 800235c:	3a20      	subs	r2, #32
 800235e:	40d1      	lsrs	r1, r2
 8002360:	4662      	mov	r2, ip
 8002362:	2a20      	cmp	r2, #32
 8002364:	d006      	beq.n	8002374 <__aeabi_dsub+0x1b0>
 8002366:	4664      	mov	r4, ip
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	1b12      	subs	r2, r2, r4
 800236c:	003c      	movs	r4, r7
 800236e:	4094      	lsls	r4, r2
 8002370:	4304      	orrs	r4, r0
 8002372:	9401      	str	r4, [sp, #4]
 8002374:	9c01      	ldr	r4, [sp, #4]
 8002376:	1e62      	subs	r2, r4, #1
 8002378:	4194      	sbcs	r4, r2
 800237a:	430c      	orrs	r4, r1
 800237c:	e0c3      	b.n	8002506 <__aeabi_dsub+0x342>
 800237e:	003c      	movs	r4, r7
 8002380:	4304      	orrs	r4, r0
 8002382:	d02b      	beq.n	80023dc <__aeabi_dsub+0x218>
 8002384:	468b      	mov	fp, r1
 8002386:	428d      	cmp	r5, r1
 8002388:	d02e      	beq.n	80023e8 <__aeabi_dsub+0x224>
 800238a:	4c6a      	ldr	r4, [pc, #424]	; (8002534 <__aeabi_dsub+0x370>)
 800238c:	46a4      	mov	ip, r4
 800238e:	44b4      	add	ip, r6
 8002390:	4664      	mov	r4, ip
 8002392:	2c00      	cmp	r4, #0
 8002394:	d05f      	beq.n	8002456 <__aeabi_dsub+0x292>
 8002396:	1b94      	subs	r4, r2, r6
 8002398:	46a4      	mov	ip, r4
 800239a:	2e00      	cmp	r6, #0
 800239c:	d000      	beq.n	80023a0 <__aeabi_dsub+0x1dc>
 800239e:	e120      	b.n	80025e2 <__aeabi_dsub+0x41e>
 80023a0:	464c      	mov	r4, r9
 80023a2:	431c      	orrs	r4, r3
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x1e4>
 80023a6:	e1c7      	b.n	8002738 <__aeabi_dsub+0x574>
 80023a8:	4661      	mov	r1, ip
 80023aa:	1e4c      	subs	r4, r1, #1
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d100      	bne.n	80023b2 <__aeabi_dsub+0x1ee>
 80023b0:	e223      	b.n	80027fa <__aeabi_dsub+0x636>
 80023b2:	4d5e      	ldr	r5, [pc, #376]	; (800252c <__aeabi_dsub+0x368>)
 80023b4:	45ac      	cmp	ip, r5
 80023b6:	d100      	bne.n	80023ba <__aeabi_dsub+0x1f6>
 80023b8:	e1d8      	b.n	800276c <__aeabi_dsub+0x5a8>
 80023ba:	46a4      	mov	ip, r4
 80023bc:	e11a      	b.n	80025f4 <__aeabi_dsub+0x430>
 80023be:	003a      	movs	r2, r7
 80023c0:	4302      	orrs	r2, r0
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x202>
 80023c4:	e0e4      	b.n	8002590 <__aeabi_dsub+0x3cc>
 80023c6:	0022      	movs	r2, r4
 80023c8:	3a01      	subs	r2, #1
 80023ca:	2c01      	cmp	r4, #1
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x20c>
 80023ce:	e1c3      	b.n	8002758 <__aeabi_dsub+0x594>
 80023d0:	4956      	ldr	r1, [pc, #344]	; (800252c <__aeabi_dsub+0x368>)
 80023d2:	428c      	cmp	r4, r1
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x214>
 80023d6:	e0b1      	b.n	800253c <__aeabi_dsub+0x378>
 80023d8:	4694      	mov	ip, r2
 80023da:	e72b      	b.n	8002234 <__aeabi_dsub+0x70>
 80023dc:	2401      	movs	r4, #1
 80023de:	4061      	eors	r1, r4
 80023e0:	468b      	mov	fp, r1
 80023e2:	428d      	cmp	r5, r1
 80023e4:	d000      	beq.n	80023e8 <__aeabi_dsub+0x224>
 80023e6:	e716      	b.n	8002216 <__aeabi_dsub+0x52>
 80023e8:	4952      	ldr	r1, [pc, #328]	; (8002534 <__aeabi_dsub+0x370>)
 80023ea:	468c      	mov	ip, r1
 80023ec:	44b4      	add	ip, r6
 80023ee:	4664      	mov	r4, ip
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x232>
 80023f4:	e0d3      	b.n	800259e <__aeabi_dsub+0x3da>
 80023f6:	1b91      	subs	r1, r2, r6
 80023f8:	468c      	mov	ip, r1
 80023fa:	2e00      	cmp	r6, #0
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x23c>
 80023fe:	e15e      	b.n	80026be <__aeabi_dsub+0x4fa>
 8002400:	494a      	ldr	r1, [pc, #296]	; (800252c <__aeabi_dsub+0x368>)
 8002402:	428a      	cmp	r2, r1
 8002404:	d100      	bne.n	8002408 <__aeabi_dsub+0x244>
 8002406:	e1be      	b.n	8002786 <__aeabi_dsub+0x5c2>
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	464c      	mov	r4, r9
 800240c:	0409      	lsls	r1, r1, #16
 800240e:	430c      	orrs	r4, r1
 8002410:	46a1      	mov	r9, r4
 8002412:	4661      	mov	r1, ip
 8002414:	2938      	cmp	r1, #56	; 0x38
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0x256>
 8002418:	e1ba      	b.n	8002790 <__aeabi_dsub+0x5cc>
 800241a:	291f      	cmp	r1, #31
 800241c:	dd00      	ble.n	8002420 <__aeabi_dsub+0x25c>
 800241e:	e227      	b.n	8002870 <__aeabi_dsub+0x6ac>
 8002420:	2420      	movs	r4, #32
 8002422:	1a64      	subs	r4, r4, r1
 8002424:	4649      	mov	r1, r9
 8002426:	40a1      	lsls	r1, r4
 8002428:	001e      	movs	r6, r3
 800242a:	4688      	mov	r8, r1
 800242c:	4661      	mov	r1, ip
 800242e:	40a3      	lsls	r3, r4
 8002430:	40ce      	lsrs	r6, r1
 8002432:	4641      	mov	r1, r8
 8002434:	1e5c      	subs	r4, r3, #1
 8002436:	41a3      	sbcs	r3, r4
 8002438:	4331      	orrs	r1, r6
 800243a:	4319      	orrs	r1, r3
 800243c:	000c      	movs	r4, r1
 800243e:	4663      	mov	r3, ip
 8002440:	4649      	mov	r1, r9
 8002442:	40d9      	lsrs	r1, r3
 8002444:	187f      	adds	r7, r7, r1
 8002446:	1824      	adds	r4, r4, r0
 8002448:	4284      	cmp	r4, r0
 800244a:	419b      	sbcs	r3, r3
 800244c:	425b      	negs	r3, r3
 800244e:	469a      	mov	sl, r3
 8002450:	0016      	movs	r6, r2
 8002452:	44ba      	add	sl, r7
 8002454:	e05d      	b.n	8002512 <__aeabi_dsub+0x34e>
 8002456:	4c38      	ldr	r4, [pc, #224]	; (8002538 <__aeabi_dsub+0x374>)
 8002458:	1c72      	adds	r2, r6, #1
 800245a:	4222      	tst	r2, r4
 800245c:	d000      	beq.n	8002460 <__aeabi_dsub+0x29c>
 800245e:	e0df      	b.n	8002620 <__aeabi_dsub+0x45c>
 8002460:	464a      	mov	r2, r9
 8002462:	431a      	orrs	r2, r3
 8002464:	2e00      	cmp	r6, #0
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x2a6>
 8002468:	e15c      	b.n	8002724 <__aeabi_dsub+0x560>
 800246a:	2a00      	cmp	r2, #0
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x2ac>
 800246e:	e1cf      	b.n	8002810 <__aeabi_dsub+0x64c>
 8002470:	003a      	movs	r2, r7
 8002472:	4302      	orrs	r2, r0
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x2b4>
 8002476:	e17f      	b.n	8002778 <__aeabi_dsub+0x5b4>
 8002478:	1a1c      	subs	r4, r3, r0
 800247a:	464a      	mov	r2, r9
 800247c:	42a3      	cmp	r3, r4
 800247e:	4189      	sbcs	r1, r1
 8002480:	1bd2      	subs	r2, r2, r7
 8002482:	4249      	negs	r1, r1
 8002484:	1a52      	subs	r2, r2, r1
 8002486:	4692      	mov	sl, r2
 8002488:	0212      	lsls	r2, r2, #8
 800248a:	d400      	bmi.n	800248e <__aeabi_dsub+0x2ca>
 800248c:	e20a      	b.n	80028a4 <__aeabi_dsub+0x6e0>
 800248e:	1ac4      	subs	r4, r0, r3
 8002490:	42a0      	cmp	r0, r4
 8002492:	4180      	sbcs	r0, r0
 8002494:	464b      	mov	r3, r9
 8002496:	4240      	negs	r0, r0
 8002498:	1aff      	subs	r7, r7, r3
 800249a:	1a3b      	subs	r3, r7, r0
 800249c:	469a      	mov	sl, r3
 800249e:	465d      	mov	r5, fp
 80024a0:	e71a      	b.n	80022d8 <__aeabi_dsub+0x114>
 80024a2:	003a      	movs	r2, r7
 80024a4:	4302      	orrs	r2, r0
 80024a6:	d073      	beq.n	8002590 <__aeabi_dsub+0x3cc>
 80024a8:	0022      	movs	r2, r4
 80024aa:	3a01      	subs	r2, #1
 80024ac:	2c01      	cmp	r4, #1
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x2ee>
 80024b0:	e0cb      	b.n	800264a <__aeabi_dsub+0x486>
 80024b2:	4554      	cmp	r4, sl
 80024b4:	d042      	beq.n	800253c <__aeabi_dsub+0x378>
 80024b6:	4694      	mov	ip, r2
 80024b8:	e748      	b.n	800234c <__aeabi_dsub+0x188>
 80024ba:	0010      	movs	r0, r2
 80024bc:	3b1f      	subs	r3, #31
 80024be:	40d8      	lsrs	r0, r3
 80024c0:	2920      	cmp	r1, #32
 80024c2:	d003      	beq.n	80024cc <__aeabi_dsub+0x308>
 80024c4:	2340      	movs	r3, #64	; 0x40
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	409a      	lsls	r2, r3
 80024ca:	4314      	orrs	r4, r2
 80024cc:	1e63      	subs	r3, r4, #1
 80024ce:	419c      	sbcs	r4, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	2600      	movs	r6, #0
 80024d4:	469a      	mov	sl, r3
 80024d6:	4304      	orrs	r4, r0
 80024d8:	0763      	lsls	r3, r4, #29
 80024da:	d000      	beq.n	80024de <__aeabi_dsub+0x31a>
 80024dc:	e6fe      	b.n	80022dc <__aeabi_dsub+0x118>
 80024de:	4652      	mov	r2, sl
 80024e0:	08e3      	lsrs	r3, r4, #3
 80024e2:	0752      	lsls	r2, r2, #29
 80024e4:	4313      	orrs	r3, r2
 80024e6:	4652      	mov	r2, sl
 80024e8:	46b4      	mov	ip, r6
 80024ea:	08d2      	lsrs	r2, r2, #3
 80024ec:	490f      	ldr	r1, [pc, #60]	; (800252c <__aeabi_dsub+0x368>)
 80024ee:	458c      	cmp	ip, r1
 80024f0:	d02a      	beq.n	8002548 <__aeabi_dsub+0x384>
 80024f2:	0312      	lsls	r2, r2, #12
 80024f4:	0b14      	lsrs	r4, r2, #12
 80024f6:	4662      	mov	r2, ip
 80024f8:	0552      	lsls	r2, r2, #21
 80024fa:	0d52      	lsrs	r2, r2, #21
 80024fc:	e70c      	b.n	8002318 <__aeabi_dsub+0x154>
 80024fe:	003c      	movs	r4, r7
 8002500:	4304      	orrs	r4, r0
 8002502:	1e62      	subs	r2, r4, #1
 8002504:	4194      	sbcs	r4, r2
 8002506:	18e4      	adds	r4, r4, r3
 8002508:	429c      	cmp	r4, r3
 800250a:	4192      	sbcs	r2, r2
 800250c:	4252      	negs	r2, r2
 800250e:	444a      	add	r2, r9
 8002510:	4692      	mov	sl, r2
 8002512:	4653      	mov	r3, sl
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	d5df      	bpl.n	80024d8 <__aeabi_dsub+0x314>
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__aeabi_dsub+0x368>)
 800251a:	3601      	adds	r6, #1
 800251c:	429e      	cmp	r6, r3
 800251e:	d000      	beq.n	8002522 <__aeabi_dsub+0x35e>
 8002520:	e0a0      	b.n	8002664 <__aeabi_dsub+0x4a0>
 8002522:	0032      	movs	r2, r6
 8002524:	2400      	movs	r4, #0
 8002526:	2300      	movs	r3, #0
 8002528:	e6f6      	b.n	8002318 <__aeabi_dsub+0x154>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	000007ff 	.word	0x000007ff
 8002530:	ff7fffff 	.word	0xff7fffff
 8002534:	fffff801 	.word	0xfffff801
 8002538:	000007fe 	.word	0x000007fe
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	464a      	mov	r2, r9
 8002540:	0752      	lsls	r2, r2, #29
 8002542:	4313      	orrs	r3, r2
 8002544:	464a      	mov	r2, r9
 8002546:	08d2      	lsrs	r2, r2, #3
 8002548:	0019      	movs	r1, r3
 800254a:	4311      	orrs	r1, r2
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x38c>
 800254e:	e1b5      	b.n	80028bc <__aeabi_dsub+0x6f8>
 8002550:	2480      	movs	r4, #128	; 0x80
 8002552:	0324      	lsls	r4, r4, #12
 8002554:	4314      	orrs	r4, r2
 8002556:	0324      	lsls	r4, r4, #12
 8002558:	4ad5      	ldr	r2, [pc, #852]	; (80028b0 <__aeabi_dsub+0x6ec>)
 800255a:	0b24      	lsrs	r4, r4, #12
 800255c:	e6dc      	b.n	8002318 <__aeabi_dsub+0x154>
 800255e:	0020      	movs	r0, r4
 8002560:	f000 fb2a 	bl	8002bb8 <__clzsi2>
 8002564:	0003      	movs	r3, r0
 8002566:	3318      	adds	r3, #24
 8002568:	2b1f      	cmp	r3, #31
 800256a:	dc00      	bgt.n	800256e <__aeabi_dsub+0x3aa>
 800256c:	e695      	b.n	800229a <__aeabi_dsub+0xd6>
 800256e:	0022      	movs	r2, r4
 8002570:	3808      	subs	r0, #8
 8002572:	4082      	lsls	r2, r0
 8002574:	2400      	movs	r4, #0
 8002576:	429e      	cmp	r6, r3
 8002578:	dc00      	bgt.n	800257c <__aeabi_dsub+0x3b8>
 800257a:	e69a      	b.n	80022b2 <__aeabi_dsub+0xee>
 800257c:	1af6      	subs	r6, r6, r3
 800257e:	4bcd      	ldr	r3, [pc, #820]	; (80028b4 <__aeabi_dsub+0x6f0>)
 8002580:	401a      	ands	r2, r3
 8002582:	4692      	mov	sl, r2
 8002584:	e6a8      	b.n	80022d8 <__aeabi_dsub+0x114>
 8002586:	003c      	movs	r4, r7
 8002588:	4304      	orrs	r4, r0
 800258a:	1e62      	subs	r2, r4, #1
 800258c:	4194      	sbcs	r4, r2
 800258e:	e66c      	b.n	800226a <__aeabi_dsub+0xa6>
 8002590:	464a      	mov	r2, r9
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	0752      	lsls	r2, r2, #29
 8002596:	4313      	orrs	r3, r2
 8002598:	464a      	mov	r2, r9
 800259a:	08d2      	lsrs	r2, r2, #3
 800259c:	e7a6      	b.n	80024ec <__aeabi_dsub+0x328>
 800259e:	4cc6      	ldr	r4, [pc, #792]	; (80028b8 <__aeabi_dsub+0x6f4>)
 80025a0:	1c72      	adds	r2, r6, #1
 80025a2:	4222      	tst	r2, r4
 80025a4:	d000      	beq.n	80025a8 <__aeabi_dsub+0x3e4>
 80025a6:	e0ac      	b.n	8002702 <__aeabi_dsub+0x53e>
 80025a8:	464a      	mov	r2, r9
 80025aa:	431a      	orrs	r2, r3
 80025ac:	2e00      	cmp	r6, #0
 80025ae:	d000      	beq.n	80025b2 <__aeabi_dsub+0x3ee>
 80025b0:	e105      	b.n	80027be <__aeabi_dsub+0x5fa>
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x3f4>
 80025b6:	e156      	b.n	8002866 <__aeabi_dsub+0x6a2>
 80025b8:	003a      	movs	r2, r7
 80025ba:	4302      	orrs	r2, r0
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x3fc>
 80025be:	e0db      	b.n	8002778 <__aeabi_dsub+0x5b4>
 80025c0:	181c      	adds	r4, r3, r0
 80025c2:	429c      	cmp	r4, r3
 80025c4:	419b      	sbcs	r3, r3
 80025c6:	444f      	add	r7, r9
 80025c8:	46ba      	mov	sl, r7
 80025ca:	425b      	negs	r3, r3
 80025cc:	449a      	add	sl, r3
 80025ce:	4653      	mov	r3, sl
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dsub+0x412>
 80025d4:	e780      	b.n	80024d8 <__aeabi_dsub+0x314>
 80025d6:	4652      	mov	r2, sl
 80025d8:	4bb6      	ldr	r3, [pc, #728]	; (80028b4 <__aeabi_dsub+0x6f0>)
 80025da:	2601      	movs	r6, #1
 80025dc:	401a      	ands	r2, r3
 80025de:	4692      	mov	sl, r2
 80025e0:	e77a      	b.n	80024d8 <__aeabi_dsub+0x314>
 80025e2:	4cb3      	ldr	r4, [pc, #716]	; (80028b0 <__aeabi_dsub+0x6ec>)
 80025e4:	42a2      	cmp	r2, r4
 80025e6:	d100      	bne.n	80025ea <__aeabi_dsub+0x426>
 80025e8:	e0c0      	b.n	800276c <__aeabi_dsub+0x5a8>
 80025ea:	2480      	movs	r4, #128	; 0x80
 80025ec:	464d      	mov	r5, r9
 80025ee:	0424      	lsls	r4, r4, #16
 80025f0:	4325      	orrs	r5, r4
 80025f2:	46a9      	mov	r9, r5
 80025f4:	4664      	mov	r4, ip
 80025f6:	2c38      	cmp	r4, #56	; 0x38
 80025f8:	dc53      	bgt.n	80026a2 <__aeabi_dsub+0x4de>
 80025fa:	4661      	mov	r1, ip
 80025fc:	2c1f      	cmp	r4, #31
 80025fe:	dd00      	ble.n	8002602 <__aeabi_dsub+0x43e>
 8002600:	e0cd      	b.n	800279e <__aeabi_dsub+0x5da>
 8002602:	2520      	movs	r5, #32
 8002604:	001e      	movs	r6, r3
 8002606:	1b2d      	subs	r5, r5, r4
 8002608:	464c      	mov	r4, r9
 800260a:	40ab      	lsls	r3, r5
 800260c:	40ac      	lsls	r4, r5
 800260e:	40ce      	lsrs	r6, r1
 8002610:	1e5d      	subs	r5, r3, #1
 8002612:	41ab      	sbcs	r3, r5
 8002614:	4334      	orrs	r4, r6
 8002616:	4323      	orrs	r3, r4
 8002618:	464c      	mov	r4, r9
 800261a:	40cc      	lsrs	r4, r1
 800261c:	1b3f      	subs	r7, r7, r4
 800261e:	e045      	b.n	80026ac <__aeabi_dsub+0x4e8>
 8002620:	464a      	mov	r2, r9
 8002622:	1a1c      	subs	r4, r3, r0
 8002624:	1bd1      	subs	r1, r2, r7
 8002626:	42a3      	cmp	r3, r4
 8002628:	4192      	sbcs	r2, r2
 800262a:	4252      	negs	r2, r2
 800262c:	4692      	mov	sl, r2
 800262e:	000a      	movs	r2, r1
 8002630:	4651      	mov	r1, sl
 8002632:	1a52      	subs	r2, r2, r1
 8002634:	4692      	mov	sl, r2
 8002636:	0212      	lsls	r2, r2, #8
 8002638:	d500      	bpl.n	800263c <__aeabi_dsub+0x478>
 800263a:	e083      	b.n	8002744 <__aeabi_dsub+0x580>
 800263c:	4653      	mov	r3, sl
 800263e:	4323      	orrs	r3, r4
 8002640:	d000      	beq.n	8002644 <__aeabi_dsub+0x480>
 8002642:	e621      	b.n	8002288 <__aeabi_dsub+0xc4>
 8002644:	2200      	movs	r2, #0
 8002646:	2500      	movs	r5, #0
 8002648:	e753      	b.n	80024f2 <__aeabi_dsub+0x32e>
 800264a:	181c      	adds	r4, r3, r0
 800264c:	429c      	cmp	r4, r3
 800264e:	419b      	sbcs	r3, r3
 8002650:	444f      	add	r7, r9
 8002652:	46ba      	mov	sl, r7
 8002654:	425b      	negs	r3, r3
 8002656:	449a      	add	sl, r3
 8002658:	4653      	mov	r3, sl
 800265a:	2601      	movs	r6, #1
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	d400      	bmi.n	8002662 <__aeabi_dsub+0x49e>
 8002660:	e73a      	b.n	80024d8 <__aeabi_dsub+0x314>
 8002662:	2602      	movs	r6, #2
 8002664:	4652      	mov	r2, sl
 8002666:	4b93      	ldr	r3, [pc, #588]	; (80028b4 <__aeabi_dsub+0x6f0>)
 8002668:	2101      	movs	r1, #1
 800266a:	401a      	ands	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	4021      	ands	r1, r4
 8002670:	0862      	lsrs	r2, r4, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	07dc      	lsls	r4, r3, #31
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	469a      	mov	sl, r3
 800267a:	4314      	orrs	r4, r2
 800267c:	e62c      	b.n	80022d8 <__aeabi_dsub+0x114>
 800267e:	0039      	movs	r1, r7
 8002680:	3a20      	subs	r2, #32
 8002682:	40d1      	lsrs	r1, r2
 8002684:	4662      	mov	r2, ip
 8002686:	2a20      	cmp	r2, #32
 8002688:	d006      	beq.n	8002698 <__aeabi_dsub+0x4d4>
 800268a:	4664      	mov	r4, ip
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	1b12      	subs	r2, r2, r4
 8002690:	003c      	movs	r4, r7
 8002692:	4094      	lsls	r4, r2
 8002694:	4304      	orrs	r4, r0
 8002696:	9401      	str	r4, [sp, #4]
 8002698:	9c01      	ldr	r4, [sp, #4]
 800269a:	1e62      	subs	r2, r4, #1
 800269c:	4194      	sbcs	r4, r2
 800269e:	430c      	orrs	r4, r1
 80026a0:	e5e3      	b.n	800226a <__aeabi_dsub+0xa6>
 80026a2:	4649      	mov	r1, r9
 80026a4:	4319      	orrs	r1, r3
 80026a6:	000b      	movs	r3, r1
 80026a8:	1e5c      	subs	r4, r3, #1
 80026aa:	41a3      	sbcs	r3, r4
 80026ac:	1ac4      	subs	r4, r0, r3
 80026ae:	42a0      	cmp	r0, r4
 80026b0:	419b      	sbcs	r3, r3
 80026b2:	425b      	negs	r3, r3
 80026b4:	1afb      	subs	r3, r7, r3
 80026b6:	469a      	mov	sl, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	0016      	movs	r6, r2
 80026bc:	e5dc      	b.n	8002278 <__aeabi_dsub+0xb4>
 80026be:	4649      	mov	r1, r9
 80026c0:	4319      	orrs	r1, r3
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x502>
 80026c4:	e0ae      	b.n	8002824 <__aeabi_dsub+0x660>
 80026c6:	4661      	mov	r1, ip
 80026c8:	4664      	mov	r4, ip
 80026ca:	3901      	subs	r1, #1
 80026cc:	2c01      	cmp	r4, #1
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x50e>
 80026d0:	e0e0      	b.n	8002894 <__aeabi_dsub+0x6d0>
 80026d2:	4c77      	ldr	r4, [pc, #476]	; (80028b0 <__aeabi_dsub+0x6ec>)
 80026d4:	45a4      	cmp	ip, r4
 80026d6:	d056      	beq.n	8002786 <__aeabi_dsub+0x5c2>
 80026d8:	468c      	mov	ip, r1
 80026da:	e69a      	b.n	8002412 <__aeabi_dsub+0x24e>
 80026dc:	4661      	mov	r1, ip
 80026de:	2220      	movs	r2, #32
 80026e0:	003c      	movs	r4, r7
 80026e2:	1a52      	subs	r2, r2, r1
 80026e4:	4094      	lsls	r4, r2
 80026e6:	0001      	movs	r1, r0
 80026e8:	4090      	lsls	r0, r2
 80026ea:	46a0      	mov	r8, r4
 80026ec:	4664      	mov	r4, ip
 80026ee:	1e42      	subs	r2, r0, #1
 80026f0:	4190      	sbcs	r0, r2
 80026f2:	4662      	mov	r2, ip
 80026f4:	40e1      	lsrs	r1, r4
 80026f6:	4644      	mov	r4, r8
 80026f8:	40d7      	lsrs	r7, r2
 80026fa:	430c      	orrs	r4, r1
 80026fc:	4304      	orrs	r4, r0
 80026fe:	44b9      	add	r9, r7
 8002700:	e701      	b.n	8002506 <__aeabi_dsub+0x342>
 8002702:	496b      	ldr	r1, [pc, #428]	; (80028b0 <__aeabi_dsub+0x6ec>)
 8002704:	428a      	cmp	r2, r1
 8002706:	d100      	bne.n	800270a <__aeabi_dsub+0x546>
 8002708:	e70c      	b.n	8002524 <__aeabi_dsub+0x360>
 800270a:	1818      	adds	r0, r3, r0
 800270c:	4298      	cmp	r0, r3
 800270e:	419b      	sbcs	r3, r3
 8002710:	444f      	add	r7, r9
 8002712:	425b      	negs	r3, r3
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	07dc      	lsls	r4, r3, #31
 8002718:	0840      	lsrs	r0, r0, #1
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	469a      	mov	sl, r3
 800271e:	0016      	movs	r6, r2
 8002720:	4304      	orrs	r4, r0
 8002722:	e6d9      	b.n	80024d8 <__aeabi_dsub+0x314>
 8002724:	2a00      	cmp	r2, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x566>
 8002728:	e081      	b.n	800282e <__aeabi_dsub+0x66a>
 800272a:	003b      	movs	r3, r7
 800272c:	4303      	orrs	r3, r0
 800272e:	d11d      	bne.n	800276c <__aeabi_dsub+0x5a8>
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	2500      	movs	r5, #0
 8002734:	0312      	lsls	r2, r2, #12
 8002736:	e70b      	b.n	8002550 <__aeabi_dsub+0x38c>
 8002738:	08c0      	lsrs	r0, r0, #3
 800273a:	077b      	lsls	r3, r7, #29
 800273c:	465d      	mov	r5, fp
 800273e:	4303      	orrs	r3, r0
 8002740:	08fa      	lsrs	r2, r7, #3
 8002742:	e6d3      	b.n	80024ec <__aeabi_dsub+0x328>
 8002744:	1ac4      	subs	r4, r0, r3
 8002746:	42a0      	cmp	r0, r4
 8002748:	4180      	sbcs	r0, r0
 800274a:	464b      	mov	r3, r9
 800274c:	4240      	negs	r0, r0
 800274e:	1aff      	subs	r7, r7, r3
 8002750:	1a3b      	subs	r3, r7, r0
 8002752:	469a      	mov	sl, r3
 8002754:	465d      	mov	r5, fp
 8002756:	e597      	b.n	8002288 <__aeabi_dsub+0xc4>
 8002758:	1a1c      	subs	r4, r3, r0
 800275a:	464a      	mov	r2, r9
 800275c:	42a3      	cmp	r3, r4
 800275e:	419b      	sbcs	r3, r3
 8002760:	1bd7      	subs	r7, r2, r7
 8002762:	425b      	negs	r3, r3
 8002764:	1afb      	subs	r3, r7, r3
 8002766:	469a      	mov	sl, r3
 8002768:	2601      	movs	r6, #1
 800276a:	e585      	b.n	8002278 <__aeabi_dsub+0xb4>
 800276c:	08c0      	lsrs	r0, r0, #3
 800276e:	077b      	lsls	r3, r7, #29
 8002770:	465d      	mov	r5, fp
 8002772:	4303      	orrs	r3, r0
 8002774:	08fa      	lsrs	r2, r7, #3
 8002776:	e6e7      	b.n	8002548 <__aeabi_dsub+0x384>
 8002778:	464a      	mov	r2, r9
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	0752      	lsls	r2, r2, #29
 800277e:	4313      	orrs	r3, r2
 8002780:	464a      	mov	r2, r9
 8002782:	08d2      	lsrs	r2, r2, #3
 8002784:	e6b5      	b.n	80024f2 <__aeabi_dsub+0x32e>
 8002786:	08c0      	lsrs	r0, r0, #3
 8002788:	077b      	lsls	r3, r7, #29
 800278a:	4303      	orrs	r3, r0
 800278c:	08fa      	lsrs	r2, r7, #3
 800278e:	e6db      	b.n	8002548 <__aeabi_dsub+0x384>
 8002790:	4649      	mov	r1, r9
 8002792:	4319      	orrs	r1, r3
 8002794:	000b      	movs	r3, r1
 8002796:	1e59      	subs	r1, r3, #1
 8002798:	418b      	sbcs	r3, r1
 800279a:	001c      	movs	r4, r3
 800279c:	e653      	b.n	8002446 <__aeabi_dsub+0x282>
 800279e:	464d      	mov	r5, r9
 80027a0:	3c20      	subs	r4, #32
 80027a2:	40e5      	lsrs	r5, r4
 80027a4:	2920      	cmp	r1, #32
 80027a6:	d005      	beq.n	80027b4 <__aeabi_dsub+0x5f0>
 80027a8:	2440      	movs	r4, #64	; 0x40
 80027aa:	1a64      	subs	r4, r4, r1
 80027ac:	4649      	mov	r1, r9
 80027ae:	40a1      	lsls	r1, r4
 80027b0:	430b      	orrs	r3, r1
 80027b2:	4698      	mov	r8, r3
 80027b4:	4643      	mov	r3, r8
 80027b6:	1e5c      	subs	r4, r3, #1
 80027b8:	41a3      	sbcs	r3, r4
 80027ba:	432b      	orrs	r3, r5
 80027bc:	e776      	b.n	80026ac <__aeabi_dsub+0x4e8>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d0e1      	beq.n	8002786 <__aeabi_dsub+0x5c2>
 80027c2:	003a      	movs	r2, r7
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	4302      	orrs	r2, r0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x608>
 80027ca:	e6b8      	b.n	800253e <__aeabi_dsub+0x37a>
 80027cc:	464a      	mov	r2, r9
 80027ce:	0752      	lsls	r2, r2, #29
 80027d0:	2480      	movs	r4, #128	; 0x80
 80027d2:	4313      	orrs	r3, r2
 80027d4:	464a      	mov	r2, r9
 80027d6:	0324      	lsls	r4, r4, #12
 80027d8:	08d2      	lsrs	r2, r2, #3
 80027da:	4222      	tst	r2, r4
 80027dc:	d007      	beq.n	80027ee <__aeabi_dsub+0x62a>
 80027de:	08fe      	lsrs	r6, r7, #3
 80027e0:	4226      	tst	r6, r4
 80027e2:	d104      	bne.n	80027ee <__aeabi_dsub+0x62a>
 80027e4:	465d      	mov	r5, fp
 80027e6:	0032      	movs	r2, r6
 80027e8:	08c3      	lsrs	r3, r0, #3
 80027ea:	077f      	lsls	r7, r7, #29
 80027ec:	433b      	orrs	r3, r7
 80027ee:	0f59      	lsrs	r1, r3, #29
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	0749      	lsls	r1, r1, #29
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	430b      	orrs	r3, r1
 80027f8:	e6a6      	b.n	8002548 <__aeabi_dsub+0x384>
 80027fa:	1ac4      	subs	r4, r0, r3
 80027fc:	42a0      	cmp	r0, r4
 80027fe:	4180      	sbcs	r0, r0
 8002800:	464b      	mov	r3, r9
 8002802:	4240      	negs	r0, r0
 8002804:	1aff      	subs	r7, r7, r3
 8002806:	1a3b      	subs	r3, r7, r0
 8002808:	469a      	mov	sl, r3
 800280a:	465d      	mov	r5, fp
 800280c:	2601      	movs	r6, #1
 800280e:	e533      	b.n	8002278 <__aeabi_dsub+0xb4>
 8002810:	003b      	movs	r3, r7
 8002812:	4303      	orrs	r3, r0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x654>
 8002816:	e715      	b.n	8002644 <__aeabi_dsub+0x480>
 8002818:	08c0      	lsrs	r0, r0, #3
 800281a:	077b      	lsls	r3, r7, #29
 800281c:	465d      	mov	r5, fp
 800281e:	4303      	orrs	r3, r0
 8002820:	08fa      	lsrs	r2, r7, #3
 8002822:	e666      	b.n	80024f2 <__aeabi_dsub+0x32e>
 8002824:	08c0      	lsrs	r0, r0, #3
 8002826:	077b      	lsls	r3, r7, #29
 8002828:	4303      	orrs	r3, r0
 800282a:	08fa      	lsrs	r2, r7, #3
 800282c:	e65e      	b.n	80024ec <__aeabi_dsub+0x328>
 800282e:	003a      	movs	r2, r7
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	4302      	orrs	r2, r0
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x674>
 8002836:	e682      	b.n	800253e <__aeabi_dsub+0x37a>
 8002838:	464a      	mov	r2, r9
 800283a:	0752      	lsls	r2, r2, #29
 800283c:	2480      	movs	r4, #128	; 0x80
 800283e:	4313      	orrs	r3, r2
 8002840:	464a      	mov	r2, r9
 8002842:	0324      	lsls	r4, r4, #12
 8002844:	08d2      	lsrs	r2, r2, #3
 8002846:	4222      	tst	r2, r4
 8002848:	d007      	beq.n	800285a <__aeabi_dsub+0x696>
 800284a:	08fe      	lsrs	r6, r7, #3
 800284c:	4226      	tst	r6, r4
 800284e:	d104      	bne.n	800285a <__aeabi_dsub+0x696>
 8002850:	465d      	mov	r5, fp
 8002852:	0032      	movs	r2, r6
 8002854:	08c3      	lsrs	r3, r0, #3
 8002856:	077f      	lsls	r7, r7, #29
 8002858:	433b      	orrs	r3, r7
 800285a:	0f59      	lsrs	r1, r3, #29
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	08db      	lsrs	r3, r3, #3
 8002860:	0749      	lsls	r1, r1, #29
 8002862:	430b      	orrs	r3, r1
 8002864:	e670      	b.n	8002548 <__aeabi_dsub+0x384>
 8002866:	08c0      	lsrs	r0, r0, #3
 8002868:	077b      	lsls	r3, r7, #29
 800286a:	4303      	orrs	r3, r0
 800286c:	08fa      	lsrs	r2, r7, #3
 800286e:	e640      	b.n	80024f2 <__aeabi_dsub+0x32e>
 8002870:	464c      	mov	r4, r9
 8002872:	3920      	subs	r1, #32
 8002874:	40cc      	lsrs	r4, r1
 8002876:	4661      	mov	r1, ip
 8002878:	2920      	cmp	r1, #32
 800287a:	d006      	beq.n	800288a <__aeabi_dsub+0x6c6>
 800287c:	4666      	mov	r6, ip
 800287e:	2140      	movs	r1, #64	; 0x40
 8002880:	1b89      	subs	r1, r1, r6
 8002882:	464e      	mov	r6, r9
 8002884:	408e      	lsls	r6, r1
 8002886:	4333      	orrs	r3, r6
 8002888:	4698      	mov	r8, r3
 800288a:	4643      	mov	r3, r8
 800288c:	1e59      	subs	r1, r3, #1
 800288e:	418b      	sbcs	r3, r1
 8002890:	431c      	orrs	r4, r3
 8002892:	e5d8      	b.n	8002446 <__aeabi_dsub+0x282>
 8002894:	181c      	adds	r4, r3, r0
 8002896:	4284      	cmp	r4, r0
 8002898:	4180      	sbcs	r0, r0
 800289a:	444f      	add	r7, r9
 800289c:	46ba      	mov	sl, r7
 800289e:	4240      	negs	r0, r0
 80028a0:	4482      	add	sl, r0
 80028a2:	e6d9      	b.n	8002658 <__aeabi_dsub+0x494>
 80028a4:	4653      	mov	r3, sl
 80028a6:	4323      	orrs	r3, r4
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x6e8>
 80028aa:	e6cb      	b.n	8002644 <__aeabi_dsub+0x480>
 80028ac:	e614      	b.n	80024d8 <__aeabi_dsub+0x314>
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	000007ff 	.word	0x000007ff
 80028b4:	ff7fffff 	.word	0xff7fffff
 80028b8:	000007fe 	.word	0x000007fe
 80028bc:	2300      	movs	r3, #0
 80028be:	4a01      	ldr	r2, [pc, #4]	; (80028c4 <__aeabi_dsub+0x700>)
 80028c0:	001c      	movs	r4, r3
 80028c2:	e529      	b.n	8002318 <__aeabi_dsub+0x154>
 80028c4:	000007ff 	.word	0x000007ff

080028c8 <__aeabi_dcmpun>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	0005      	movs	r5, r0
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <__aeabi_dcmpun+0x38>)
 80028ce:	031c      	lsls	r4, r3, #12
 80028d0:	0016      	movs	r6, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	030a      	lsls	r2, r1, #12
 80028d6:	0049      	lsls	r1, r1, #1
 80028d8:	0b12      	lsrs	r2, r2, #12
 80028da:	0d49      	lsrs	r1, r1, #21
 80028dc:	0b24      	lsrs	r4, r4, #12
 80028de:	0d5b      	lsrs	r3, r3, #21
 80028e0:	4281      	cmp	r1, r0
 80028e2:	d008      	beq.n	80028f6 <__aeabi_dcmpun+0x2e>
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <__aeabi_dcmpun+0x38>)
 80028e6:	2000      	movs	r0, #0
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d103      	bne.n	80028f4 <__aeabi_dcmpun+0x2c>
 80028ec:	0020      	movs	r0, r4
 80028ee:	4330      	orrs	r0, r6
 80028f0:	1e43      	subs	r3, r0, #1
 80028f2:	4198      	sbcs	r0, r3
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	2001      	movs	r0, #1
 80028f8:	432a      	orrs	r2, r5
 80028fa:	d1fb      	bne.n	80028f4 <__aeabi_dcmpun+0x2c>
 80028fc:	e7f2      	b.n	80028e4 <__aeabi_dcmpun+0x1c>
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	000007ff 	.word	0x000007ff

08002904 <__aeabi_d2iz>:
 8002904:	000a      	movs	r2, r1
 8002906:	b530      	push	{r4, r5, lr}
 8002908:	4c13      	ldr	r4, [pc, #76]	; (8002958 <__aeabi_d2iz+0x54>)
 800290a:	0053      	lsls	r3, r2, #1
 800290c:	0309      	lsls	r1, r1, #12
 800290e:	0005      	movs	r5, r0
 8002910:	0b09      	lsrs	r1, r1, #12
 8002912:	2000      	movs	r0, #0
 8002914:	0d5b      	lsrs	r3, r3, #21
 8002916:	0fd2      	lsrs	r2, r2, #31
 8002918:	42a3      	cmp	r3, r4
 800291a:	dd04      	ble.n	8002926 <__aeabi_d2iz+0x22>
 800291c:	480f      	ldr	r0, [pc, #60]	; (800295c <__aeabi_d2iz+0x58>)
 800291e:	4283      	cmp	r3, r0
 8002920:	dd02      	ble.n	8002928 <__aeabi_d2iz+0x24>
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <__aeabi_d2iz+0x5c>)
 8002924:	18d0      	adds	r0, r2, r3
 8002926:	bd30      	pop	{r4, r5, pc}
 8002928:	2080      	movs	r0, #128	; 0x80
 800292a:	0340      	lsls	r0, r0, #13
 800292c:	4301      	orrs	r1, r0
 800292e:	480d      	ldr	r0, [pc, #52]	; (8002964 <__aeabi_d2iz+0x60>)
 8002930:	1ac0      	subs	r0, r0, r3
 8002932:	281f      	cmp	r0, #31
 8002934:	dd08      	ble.n	8002948 <__aeabi_d2iz+0x44>
 8002936:	480c      	ldr	r0, [pc, #48]	; (8002968 <__aeabi_d2iz+0x64>)
 8002938:	1ac3      	subs	r3, r0, r3
 800293a:	40d9      	lsrs	r1, r3
 800293c:	000b      	movs	r3, r1
 800293e:	4258      	negs	r0, r3
 8002940:	2a00      	cmp	r2, #0
 8002942:	d1f0      	bne.n	8002926 <__aeabi_d2iz+0x22>
 8002944:	0018      	movs	r0, r3
 8002946:	e7ee      	b.n	8002926 <__aeabi_d2iz+0x22>
 8002948:	4c08      	ldr	r4, [pc, #32]	; (800296c <__aeabi_d2iz+0x68>)
 800294a:	40c5      	lsrs	r5, r0
 800294c:	46a4      	mov	ip, r4
 800294e:	4463      	add	r3, ip
 8002950:	4099      	lsls	r1, r3
 8002952:	000b      	movs	r3, r1
 8002954:	432b      	orrs	r3, r5
 8002956:	e7f2      	b.n	800293e <__aeabi_d2iz+0x3a>
 8002958:	000003fe 	.word	0x000003fe
 800295c:	0000041d 	.word	0x0000041d
 8002960:	7fffffff 	.word	0x7fffffff
 8002964:	00000433 	.word	0x00000433
 8002968:	00000413 	.word	0x00000413
 800296c:	fffffbed 	.word	0xfffffbed

08002970 <__aeabi_i2d>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	2800      	cmp	r0, #0
 8002974:	d016      	beq.n	80029a4 <__aeabi_i2d+0x34>
 8002976:	17c3      	asrs	r3, r0, #31
 8002978:	18c5      	adds	r5, r0, r3
 800297a:	405d      	eors	r5, r3
 800297c:	0fc4      	lsrs	r4, r0, #31
 800297e:	0028      	movs	r0, r5
 8002980:	f000 f91a 	bl	8002bb8 <__clzsi2>
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <__aeabi_i2d+0x5c>)
 8002986:	1a1b      	subs	r3, r3, r0
 8002988:	280a      	cmp	r0, #10
 800298a:	dc16      	bgt.n	80029ba <__aeabi_i2d+0x4a>
 800298c:	0002      	movs	r2, r0
 800298e:	002e      	movs	r6, r5
 8002990:	3215      	adds	r2, #21
 8002992:	4096      	lsls	r6, r2
 8002994:	220b      	movs	r2, #11
 8002996:	1a12      	subs	r2, r2, r0
 8002998:	40d5      	lsrs	r5, r2
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	032d      	lsls	r5, r5, #12
 800299e:	0b2d      	lsrs	r5, r5, #12
 80029a0:	0d5b      	lsrs	r3, r3, #21
 80029a2:	e003      	b.n	80029ac <__aeabi_i2d+0x3c>
 80029a4:	2400      	movs	r4, #0
 80029a6:	2300      	movs	r3, #0
 80029a8:	2500      	movs	r5, #0
 80029aa:	2600      	movs	r6, #0
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	432b      	orrs	r3, r5
 80029b0:	07e4      	lsls	r4, r4, #31
 80029b2:	4323      	orrs	r3, r4
 80029b4:	0030      	movs	r0, r6
 80029b6:	0019      	movs	r1, r3
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
 80029ba:	380b      	subs	r0, #11
 80029bc:	4085      	lsls	r5, r0
 80029be:	055b      	lsls	r3, r3, #21
 80029c0:	032d      	lsls	r5, r5, #12
 80029c2:	2600      	movs	r6, #0
 80029c4:	0b2d      	lsrs	r5, r5, #12
 80029c6:	0d5b      	lsrs	r3, r3, #21
 80029c8:	e7f0      	b.n	80029ac <__aeabi_i2d+0x3c>
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	0000041e 	.word	0x0000041e

080029d0 <__aeabi_ui2d>:
 80029d0:	b510      	push	{r4, lr}
 80029d2:	1e04      	subs	r4, r0, #0
 80029d4:	d010      	beq.n	80029f8 <__aeabi_ui2d+0x28>
 80029d6:	f000 f8ef 	bl	8002bb8 <__clzsi2>
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <__aeabi_ui2d+0x48>)
 80029dc:	1a1b      	subs	r3, r3, r0
 80029de:	280a      	cmp	r0, #10
 80029e0:	dc11      	bgt.n	8002a06 <__aeabi_ui2d+0x36>
 80029e2:	220b      	movs	r2, #11
 80029e4:	0021      	movs	r1, r4
 80029e6:	1a12      	subs	r2, r2, r0
 80029e8:	40d1      	lsrs	r1, r2
 80029ea:	3015      	adds	r0, #21
 80029ec:	030a      	lsls	r2, r1, #12
 80029ee:	055b      	lsls	r3, r3, #21
 80029f0:	4084      	lsls	r4, r0
 80029f2:	0b12      	lsrs	r2, r2, #12
 80029f4:	0d5b      	lsrs	r3, r3, #21
 80029f6:	e001      	b.n	80029fc <__aeabi_ui2d+0x2c>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2200      	movs	r2, #0
 80029fc:	051b      	lsls	r3, r3, #20
 80029fe:	4313      	orrs	r3, r2
 8002a00:	0020      	movs	r0, r4
 8002a02:	0019      	movs	r1, r3
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	0022      	movs	r2, r4
 8002a08:	380b      	subs	r0, #11
 8002a0a:	4082      	lsls	r2, r0
 8002a0c:	055b      	lsls	r3, r3, #21
 8002a0e:	0312      	lsls	r2, r2, #12
 8002a10:	2400      	movs	r4, #0
 8002a12:	0b12      	lsrs	r2, r2, #12
 8002a14:	0d5b      	lsrs	r3, r3, #21
 8002a16:	e7f1      	b.n	80029fc <__aeabi_ui2d+0x2c>
 8002a18:	0000041e 	.word	0x0000041e

08002a1c <__aeabi_f2d>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	0242      	lsls	r2, r0, #9
 8002a20:	0043      	lsls	r3, r0, #1
 8002a22:	0fc4      	lsrs	r4, r0, #31
 8002a24:	20fe      	movs	r0, #254	; 0xfe
 8002a26:	0e1b      	lsrs	r3, r3, #24
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	0a55      	lsrs	r5, r2, #9
 8002a2c:	4208      	tst	r0, r1
 8002a2e:	d00c      	beq.n	8002a4a <__aeabi_f2d+0x2e>
 8002a30:	21e0      	movs	r1, #224	; 0xe0
 8002a32:	0089      	lsls	r1, r1, #2
 8002a34:	468c      	mov	ip, r1
 8002a36:	076d      	lsls	r5, r5, #29
 8002a38:	0b12      	lsrs	r2, r2, #12
 8002a3a:	4463      	add	r3, ip
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	07e4      	lsls	r4, r4, #31
 8002a42:	4323      	orrs	r3, r4
 8002a44:	0028      	movs	r0, r5
 8002a46:	0019      	movs	r1, r3
 8002a48:	bd70      	pop	{r4, r5, r6, pc}
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d114      	bne.n	8002a78 <__aeabi_f2d+0x5c>
 8002a4e:	2d00      	cmp	r5, #0
 8002a50:	d01b      	beq.n	8002a8a <__aeabi_f2d+0x6e>
 8002a52:	0028      	movs	r0, r5
 8002a54:	f000 f8b0 	bl	8002bb8 <__clzsi2>
 8002a58:	280a      	cmp	r0, #10
 8002a5a:	dc1c      	bgt.n	8002a96 <__aeabi_f2d+0x7a>
 8002a5c:	230b      	movs	r3, #11
 8002a5e:	002a      	movs	r2, r5
 8002a60:	1a1b      	subs	r3, r3, r0
 8002a62:	40da      	lsrs	r2, r3
 8002a64:	0003      	movs	r3, r0
 8002a66:	3315      	adds	r3, #21
 8002a68:	409d      	lsls	r5, r3
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <__aeabi_f2d+0x88>)
 8002a6c:	0312      	lsls	r2, r2, #12
 8002a6e:	1a1b      	subs	r3, r3, r0
 8002a70:	055b      	lsls	r3, r3, #21
 8002a72:	0b12      	lsrs	r2, r2, #12
 8002a74:	0d5b      	lsrs	r3, r3, #21
 8002a76:	e7e1      	b.n	8002a3c <__aeabi_f2d+0x20>
 8002a78:	2d00      	cmp	r5, #0
 8002a7a:	d009      	beq.n	8002a90 <__aeabi_f2d+0x74>
 8002a7c:	0b13      	lsrs	r3, r2, #12
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	0312      	lsls	r2, r2, #12
 8002a82:	431a      	orrs	r2, r3
 8002a84:	076d      	lsls	r5, r5, #29
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <__aeabi_f2d+0x8c>)
 8002a88:	e7d8      	b.n	8002a3c <__aeabi_f2d+0x20>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	e7d5      	b.n	8002a3c <__aeabi_f2d+0x20>
 8002a90:	2200      	movs	r2, #0
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <__aeabi_f2d+0x8c>)
 8002a94:	e7d2      	b.n	8002a3c <__aeabi_f2d+0x20>
 8002a96:	0003      	movs	r3, r0
 8002a98:	002a      	movs	r2, r5
 8002a9a:	3b0b      	subs	r3, #11
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	2500      	movs	r5, #0
 8002aa0:	e7e3      	b.n	8002a6a <__aeabi_f2d+0x4e>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	00000389 	.word	0x00000389
 8002aa8:	000007ff 	.word	0x000007ff

08002aac <__aeabi_d2f>:
 8002aac:	0002      	movs	r2, r0
 8002aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab0:	004b      	lsls	r3, r1, #1
 8002ab2:	030d      	lsls	r5, r1, #12
 8002ab4:	0f40      	lsrs	r0, r0, #29
 8002ab6:	0d5b      	lsrs	r3, r3, #21
 8002ab8:	0fcc      	lsrs	r4, r1, #31
 8002aba:	0a6d      	lsrs	r5, r5, #9
 8002abc:	493a      	ldr	r1, [pc, #232]	; (8002ba8 <__aeabi_d2f+0xfc>)
 8002abe:	4305      	orrs	r5, r0
 8002ac0:	1c58      	adds	r0, r3, #1
 8002ac2:	00d7      	lsls	r7, r2, #3
 8002ac4:	4208      	tst	r0, r1
 8002ac6:	d00a      	beq.n	8002ade <__aeabi_d2f+0x32>
 8002ac8:	4938      	ldr	r1, [pc, #224]	; (8002bac <__aeabi_d2f+0x100>)
 8002aca:	1859      	adds	r1, r3, r1
 8002acc:	29fe      	cmp	r1, #254	; 0xfe
 8002ace:	dd16      	ble.n	8002afe <__aeabi_d2f+0x52>
 8002ad0:	20ff      	movs	r0, #255	; 0xff
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	05c0      	lsls	r0, r0, #23
 8002ad6:	4310      	orrs	r0, r2
 8002ad8:	07e4      	lsls	r4, r4, #31
 8002ada:	4320      	orrs	r0, r4
 8002adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <__aeabi_d2f+0x44>
 8002ae2:	433d      	orrs	r5, r7
 8002ae4:	d026      	beq.n	8002b34 <__aeabi_d2f+0x88>
 8002ae6:	2205      	movs	r2, #5
 8002ae8:	0192      	lsls	r2, r2, #6
 8002aea:	0a52      	lsrs	r2, r2, #9
 8002aec:	b2d8      	uxtb	r0, r3
 8002aee:	e7f1      	b.n	8002ad4 <__aeabi_d2f+0x28>
 8002af0:	432f      	orrs	r7, r5
 8002af2:	d0ed      	beq.n	8002ad0 <__aeabi_d2f+0x24>
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	03d2      	lsls	r2, r2, #15
 8002af8:	20ff      	movs	r0, #255	; 0xff
 8002afa:	432a      	orrs	r2, r5
 8002afc:	e7ea      	b.n	8002ad4 <__aeabi_d2f+0x28>
 8002afe:	2900      	cmp	r1, #0
 8002b00:	dd1b      	ble.n	8002b3a <__aeabi_d2f+0x8e>
 8002b02:	0192      	lsls	r2, r2, #6
 8002b04:	1e50      	subs	r0, r2, #1
 8002b06:	4182      	sbcs	r2, r0
 8002b08:	00ed      	lsls	r5, r5, #3
 8002b0a:	0f7f      	lsrs	r7, r7, #29
 8002b0c:	432a      	orrs	r2, r5
 8002b0e:	433a      	orrs	r2, r7
 8002b10:	0753      	lsls	r3, r2, #29
 8002b12:	d047      	beq.n	8002ba4 <__aeabi_d2f+0xf8>
 8002b14:	230f      	movs	r3, #15
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_d2f+0x72>
 8002b1c:	3204      	adds	r2, #4
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	04db      	lsls	r3, r3, #19
 8002b22:	4013      	ands	r3, r2
 8002b24:	d03e      	beq.n	8002ba4 <__aeabi_d2f+0xf8>
 8002b26:	1c48      	adds	r0, r1, #1
 8002b28:	29fe      	cmp	r1, #254	; 0xfe
 8002b2a:	d0d1      	beq.n	8002ad0 <__aeabi_d2f+0x24>
 8002b2c:	0192      	lsls	r2, r2, #6
 8002b2e:	0a52      	lsrs	r2, r2, #9
 8002b30:	b2c0      	uxtb	r0, r0
 8002b32:	e7cf      	b.n	8002ad4 <__aeabi_d2f+0x28>
 8002b34:	2000      	movs	r0, #0
 8002b36:	2200      	movs	r2, #0
 8002b38:	e7cc      	b.n	8002ad4 <__aeabi_d2f+0x28>
 8002b3a:	000a      	movs	r2, r1
 8002b3c:	3217      	adds	r2, #23
 8002b3e:	db2f      	blt.n	8002ba0 <__aeabi_d2f+0xf4>
 8002b40:	2680      	movs	r6, #128	; 0x80
 8002b42:	0436      	lsls	r6, r6, #16
 8002b44:	432e      	orrs	r6, r5
 8002b46:	251e      	movs	r5, #30
 8002b48:	1a6d      	subs	r5, r5, r1
 8002b4a:	2d1f      	cmp	r5, #31
 8002b4c:	dd11      	ble.n	8002b72 <__aeabi_d2f+0xc6>
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4252      	negs	r2, r2
 8002b52:	1a52      	subs	r2, r2, r1
 8002b54:	0031      	movs	r1, r6
 8002b56:	40d1      	lsrs	r1, r2
 8002b58:	2d20      	cmp	r5, #32
 8002b5a:	d004      	beq.n	8002b66 <__aeabi_d2f+0xba>
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <__aeabi_d2f+0x104>)
 8002b5e:	4694      	mov	ip, r2
 8002b60:	4463      	add	r3, ip
 8002b62:	409e      	lsls	r6, r3
 8002b64:	4337      	orrs	r7, r6
 8002b66:	003a      	movs	r2, r7
 8002b68:	1e53      	subs	r3, r2, #1
 8002b6a:	419a      	sbcs	r2, r3
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	2100      	movs	r1, #0
 8002b70:	e7ce      	b.n	8002b10 <__aeabi_d2f+0x64>
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <__aeabi_d2f+0x108>)
 8002b74:	0038      	movs	r0, r7
 8002b76:	4694      	mov	ip, r2
 8002b78:	4463      	add	r3, ip
 8002b7a:	4098      	lsls	r0, r3
 8002b7c:	003a      	movs	r2, r7
 8002b7e:	1e41      	subs	r1, r0, #1
 8002b80:	4188      	sbcs	r0, r1
 8002b82:	409e      	lsls	r6, r3
 8002b84:	40ea      	lsrs	r2, r5
 8002b86:	4330      	orrs	r0, r6
 8002b88:	4302      	orrs	r2, r0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	0753      	lsls	r3, r2, #29
 8002b8e:	d1c1      	bne.n	8002b14 <__aeabi_d2f+0x68>
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0013      	movs	r3, r2
 8002b94:	04c9      	lsls	r1, r1, #19
 8002b96:	2001      	movs	r0, #1
 8002b98:	400b      	ands	r3, r1
 8002b9a:	420a      	tst	r2, r1
 8002b9c:	d1c6      	bne.n	8002b2c <__aeabi_d2f+0x80>
 8002b9e:	e7a3      	b.n	8002ae8 <__aeabi_d2f+0x3c>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e7a0      	b.n	8002ae6 <__aeabi_d2f+0x3a>
 8002ba4:	000b      	movs	r3, r1
 8002ba6:	e79f      	b.n	8002ae8 <__aeabi_d2f+0x3c>
 8002ba8:	000007fe 	.word	0x000007fe
 8002bac:	fffffc80 	.word	0xfffffc80
 8002bb0:	fffffca2 	.word	0xfffffca2
 8002bb4:	fffffc82 	.word	0xfffffc82

08002bb8 <__clzsi2>:
 8002bb8:	211c      	movs	r1, #28
 8002bba:	2301      	movs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d301      	bcc.n	8002bc6 <__clzsi2+0xe>
 8002bc2:	0c00      	lsrs	r0, r0, #16
 8002bc4:	3910      	subs	r1, #16
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	4298      	cmp	r0, r3
 8002bca:	d301      	bcc.n	8002bd0 <__clzsi2+0x18>
 8002bcc:	0a00      	lsrs	r0, r0, #8
 8002bce:	3908      	subs	r1, #8
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	4298      	cmp	r0, r3
 8002bd4:	d301      	bcc.n	8002bda <__clzsi2+0x22>
 8002bd6:	0900      	lsrs	r0, r0, #4
 8002bd8:	3904      	subs	r1, #4
 8002bda:	a202      	add	r2, pc, #8	; (adr r2, 8002be4 <__clzsi2+0x2c>)
 8002bdc:	5c10      	ldrb	r0, [r2, r0]
 8002bde:	1840      	adds	r0, r0, r1
 8002be0:	4770      	bx	lr
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	02020304 	.word	0x02020304
 8002be8:	01010101 	.word	0x01010101
	...

08002bf4 <__clzdi2>:
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	2900      	cmp	r1, #0
 8002bf8:	d103      	bne.n	8002c02 <__clzdi2+0xe>
 8002bfa:	f7ff ffdd 	bl	8002bb8 <__clzsi2>
 8002bfe:	3020      	adds	r0, #32
 8002c00:	e002      	b.n	8002c08 <__clzdi2+0x14>
 8002c02:	0008      	movs	r0, r1
 8002c04:	f7ff ffd8 	bl	8002bb8 <__clzsi2>
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)

08002c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	is_alive = 0;
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <main+0xf4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
	is_ready = 0;
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <main+0xf8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	Sensor1Cfg.platform.address = 0x52;
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <main+0xfc>)
 8002c20:	2252      	movs	r2, #82	; 0x52
 8002c22:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c24:	f000 fcf4 	bl	8003610 <HAL_Init>

  /* USER CODE BEGIN Init */
//  HAL_GPIO_WritePin(AVDD_GPIO_Port, AVDD_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(IOVDD_GPIO_Port, IOVDD_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LPn_GPIO_Port, LPn_Pin, GPIO_PIN_SET);
 8002c28:	23a0      	movs	r3, #160	; 0xa0
 8002c2a:	05db      	lsls	r3, r3, #23
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	2102      	movs	r1, #2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 ffaf 	bl	8003b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C_RST_GPIO_Port, I2C_RST_Pin, GPIO_PIN_RESET);
 8002c36:	23a0      	movs	r3, #160	; 0xa0
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 ffa8 	bl	8003b94 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c44:	f000 f86a 	bl	8002d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c48:	f000 f93e 	bl	8002ec8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c4c:	f000 f8ee 	bl	8002e2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c50:	f000 f8ac 	bl	8002dac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t init_status = init_tof(&Sensor1Cfg);
 8002c54:	1dfc      	adds	r4, r7, #7
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <main+0xfc>)
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 fb6b 	bl	8003334 <init_tof>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t samples = 0;
 8002c62:	1dbb      	adds	r3, r7, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
  init_status |= vl53l5cx_start_ranging(&Sensor1Cfg);
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <main+0xfc>)
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f004 fe22 	bl	80078b4 <vl53l5cx_start_ranging>
 8002c70:	0003      	movs	r3, r0
 8002c72:	0019      	movs	r1, r3
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	1dfa      	adds	r2, r7, #7
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]

  while (1)
  {

#ifdef DO_GESTURE_TEST
	  samples++;
 8002c7e:	1dbb      	adds	r3, r7, #6
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	1dbb      	adds	r3, r7, #6
 8002c84:	3201      	adds	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]

// detect gesture
	  init_status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <main+0x100>)
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <main+0xfc>)
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fbc0 	bl	8003414 <sample_once>
 8002c94:	0003      	movs	r3, r0
 8002c96:	0019      	movs	r1, r3
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	1dfa      	adds	r2, r7, #7
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	701a      	strb	r2, [r3, #0]

	  init_status |= SEN_CopyRangingData(&sensor_data, &Sensor1Results);
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <main+0x100>)
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <main+0x104>)
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fbf1 	bl	8003490 <SEN_CopyRangingData>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	1dfb      	adds	r3, r7, #7
 8002cb4:	1dfa      	adds	r2, r7, #7
 8002cb6:	7812      	ldrb	r2, [r2, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]

	  if(gest_predictor.double_tap_is_true){
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <main+0x108>)
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <main+0x10c>)
 8002cc0:	589b      	ldr	r3, [r3, r2]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <main+0xc6>
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8002cc6:	23a0      	movs	r3, #160	; 0xa0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	2120      	movs	r1, #32
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 ff7e 	bl	8003bce <HAL_GPIO_TogglePin>
	  }

	  if (samples >= 100){
 8002cd2:	1dbb      	adds	r3, r7, #6
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b63      	cmp	r3, #99	; 0x63
 8002cd8:	d9d1      	bls.n	8002c7e <main+0x72>
		  init_status |= vl53l5cx_stop_ranging(&Sensor1Cfg);
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <main+0xfc>)
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f004 ff9b 	bl	8007c18 <vl53l5cx_stop_ranging>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	1dfa      	adds	r2, r7, #7
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
		  while (1){
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8002cf0:	23a0      	movs	r3, #160	; 0xa0
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 ff4b 	bl	8003b94 <HAL_GPIO_WritePin>
 8002cfe:	e7f7      	b.n	8002cf0 <main+0xe4>
 8002d00:	20002aec 	.word	0x20002aec
 8002d04:	20002aed 	.word	0x20002aed
 8002d08:	20000174 	.word	0x20000174
 8002d0c:	20000c24 	.word	0x20000c24
 8002d10:	2000288c 	.word	0x2000288c
 8002d14:	20001174 	.word	0x20001174
 8002d18:	00000f5c 	.word	0x00000f5c

08002d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b093      	sub	sp, #76	; 0x4c
 8002d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d22:	2410      	movs	r4, #16
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	0018      	movs	r0, r3
 8002d28:	2338      	movs	r3, #56	; 0x38
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f006 f9c7 	bl	80090c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d32:	003b      	movs	r3, r7
 8002d34:	0018      	movs	r0, r3
 8002d36:	2310      	movs	r3, #16
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f006 f9c0 	bl	80090c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	0018      	movs	r0, r3
 8002d46:	f001 febd 	bl	8004ac4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0052      	lsls	r2, r2, #1
 8002d56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002d58:	193b      	adds	r3, r7, r4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2240      	movs	r2, #64	; 0x40
 8002d62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6a:	193b      	adds	r3, r7, r4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f001 fef5 	bl	8004b5c <HAL_RCC_OscConfig>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d001      	beq.n	8002d7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002d76:	f000 f9d5 	bl	8003124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d7a:	003b      	movs	r3, r7
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d80:	003b      	movs	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d86:	003b      	movs	r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d8c:	003b      	movs	r3, r7
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d92:	003b      	movs	r3, r7
 8002d94:	2100      	movs	r1, #0
 8002d96:	0018      	movs	r0, r3
 8002d98:	f002 f9fa 	bl	8005190 <HAL_RCC_ClockConfig>
 8002d9c:	1e03      	subs	r3, r0, #0
 8002d9e:	d001      	beq.n	8002da4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002da0:	f000 f9c0 	bl	8003124 <Error_Handler>
  }
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b013      	add	sp, #76	; 0x4c
 8002daa:	bd90      	pop	{r4, r7, pc}

08002dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002db2:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <MX_I2C1_Init+0x78>)
 8002db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <MX_I2C1_Init+0x7c>)
 8002dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 ff0b 	bl	8003c04 <HAL_I2C_Init>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d001      	beq.n	8002df6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002df2:	f000 f997 	bl	8003124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002df8:	2100      	movs	r1, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 fdca 	bl	8004994 <HAL_I2CEx_ConfigAnalogFilter>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e04:	f000 f98e 	bl	8003124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <MX_I2C1_Init+0x74>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f001 fe0d 	bl	8004a2c <HAL_I2CEx_ConfigDigitalFilter>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e16:	f000 f985 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	2000008c 	.word	0x2000008c
 8002e24:	40005400 	.word	0x40005400
 8002e28:	0010061a 	.word	0x0010061a

08002e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <MX_USART2_UART_Init+0x98>)
 8002e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e38:	22e1      	movs	r2, #225	; 0xe1
 8002e3a:	0252      	lsls	r2, r2, #9
 8002e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e52:	220c      	movs	r2, #12
 8002e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f002 fcec 	bl	8005854 <HAL_UART_Init>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002e80:	f000 f950 	bl	8003124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e86:	2100      	movs	r1, #0
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f003 f9fb 	bl	8006284 <HAL_UARTEx_SetTxFifoThreshold>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002e92:	f000 f947 	bl	8003124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f003 fa32 	bl	8006304 <HAL_UARTEx_SetRxFifoThreshold>
 8002ea0:	1e03      	subs	r3, r0, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ea4:	f000 f93e 	bl	8003124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <MX_USART2_UART_Init+0x94>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 f9b0 	bl	8006210 <HAL_UARTEx_DisableFifoMode>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002eb4:	f000 f936 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	200000e0 	.word	0x200000e0
 8002ec4:	40004400 	.word	0x40004400

08002ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b08b      	sub	sp, #44	; 0x2c
 8002ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	2414      	movs	r4, #20
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	2314      	movs	r3, #20
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f006 f8f1 	bl	80090c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ede:	4b89      	ldr	r3, [pc, #548]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eea:	4b86      	ldr	r3, [pc, #536]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ef6:	4b83      	ldr	r3, [pc, #524]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efa:	4b82      	ldr	r3, [pc, #520]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002efc:	2120      	movs	r1, #32
 8002efe:	430a      	orrs	r2, r1
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34
 8002f02:	4b80      	ldr	r3, [pc, #512]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	2220      	movs	r2, #32
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b7d      	ldr	r3, [pc, #500]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	4b77      	ldr	r3, [pc, #476]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34
 8002f32:	4b74      	ldr	r3, [pc, #464]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f3e:	4b71      	ldr	r3, [pc, #452]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f42:	4b70      	ldr	r3, [pc, #448]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f44:	2108      	movs	r1, #8
 8002f46:	430a      	orrs	r2, r1
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34
 8002f4a:	4b6e      	ldr	r3, [pc, #440]	; (8003104 <MX_GPIO_Init+0x23c>)
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	2208      	movs	r2, #8
 8002f50:	4013      	ands	r3, r2
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LPn1_Pin|LPn2_Pin|LPn3_Pin|LPn4_Pin, GPIO_PIN_RESET);
 8002f56:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <MX_GPIO_Init+0x240>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fe19 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_RST_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	2200      	movs	r2, #0
 8002f68:	2121      	movs	r1, #33	; 0x21
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 fe12 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LPn_Pin|PWR_EN_Pin, GPIO_PIN_SET);
 8002f70:	23a0      	movs	r3, #160	; 0xa0
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	2201      	movs	r2, #1
 8002f76:	2142      	movs	r1, #66	; 0x42
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fe0b 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	4a62      	ldr	r2, [pc, #392]	; (800310c <MX_GPIO_Init+0x244>)
 8002f82:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	2203      	movs	r2, #3
 8002f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	4a5d      	ldr	r2, [pc, #372]	; (8003108 <MX_GPIO_Init+0x240>)
 8002f94:	0019      	movs	r1, r3
 8002f96:	0010      	movs	r0, r2
 8002f98:	f000 fc98 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <MX_GPIO_Init+0x248>)
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f000 fc89 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn3_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn3_Pin|LPn4_Pin;
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	4a4c      	ldr	r2, [pc, #304]	; (8003108 <MX_GPIO_Init+0x240>)
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	f000 fc77 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_Pin */
  GPIO_InitStruct.Pin = I2C_RST_Pin;
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2202      	movs	r2, #2
 8002fee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_RST_GPIO_Port, &GPIO_InitStruct);
 8002ff6:	193a      	adds	r2, r7, r4
 8002ff8:	23a0      	movs	r3, #160	; 0xa0
 8002ffa:	05db      	lsls	r3, r3, #23
 8002ffc:	0011      	movs	r1, r2
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fc64 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = LPn_Pin|PWR_EN_Pin;
 8003004:	193b      	adds	r3, r7, r4
 8003006:	2242      	movs	r2, #66	; 0x42
 8003008:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2201      	movs	r2, #1
 800300e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2201      	movs	r2, #1
 8003014:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2200      	movs	r2, #0
 800301a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	193a      	adds	r2, r7, r4
 800301e:	23a0      	movs	r3, #160	; 0xa0
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f000 fc51 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800302a:	193b      	adds	r3, r7, r4
 800302c:	4a39      	ldr	r2, [pc, #228]	; (8003114 <MX_GPIO_Init+0x24c>)
 800302e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2203      	movs	r2, #3
 8003034:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	193a      	adds	r2, r7, r4
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	05db      	lsls	r3, r3, #23
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f000 fc41 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800304a:	193b      	adds	r3, r7, r4
 800304c:	2220      	movs	r2, #32
 800304e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003050:	193b      	adds	r3, r7, r4
 8003052:	2201      	movs	r2, #1
 8003054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	193b      	adds	r3, r7, r4
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	193b      	adds	r3, r7, r4
 800305e:	2200      	movs	r2, #0
 8003060:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003062:	193a      	adds	r2, r7, r4
 8003064:	23a0      	movs	r3, #160	; 0xa0
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	0011      	movs	r1, r2
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fc2e 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003070:	193b      	adds	r3, r7, r4
 8003072:	4a29      	ldr	r2, [pc, #164]	; (8003118 <MX_GPIO_Init+0x250>)
 8003074:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2203      	movs	r2, #3
 800307a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	193b      	adds	r3, r7, r4
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <MX_GPIO_Init+0x254>)
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f000 fc1f 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800308e:	0021      	movs	r1, r4
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	0152      	lsls	r2, r2, #5
 8003096:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003098:	187b      	adds	r3, r7, r1
 800309a:	2288      	movs	r2, #136	; 0x88
 800309c:	0352      	lsls	r2, r2, #13
 800309e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80030a6:	000c      	movs	r4, r1
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	4a1c      	ldr	r2, [pc, #112]	; (800311c <MX_GPIO_Init+0x254>)
 80030ac:	0019      	movs	r1, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	f000 fc0c 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 80030b4:	0021      	movs	r1, r4
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	22dc      	movs	r2, #220	; 0xdc
 80030ba:	0092      	lsls	r2, r2, #2
 80030bc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030be:	000c      	movs	r4, r1
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	2203      	movs	r2, #3
 80030c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <MX_GPIO_Init+0x258>)
 80030d0:	0019      	movs	r1, r3
 80030d2:	0010      	movs	r0, r2
 80030d4:	f000 fbfa 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_INT1_Pin PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = ToF_INT1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80030d8:	0021      	movs	r1, r4
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2288      	movs	r2, #136	; 0x88
 80030e4:	0352      	lsls	r2, r2, #13
 80030e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <MX_GPIO_Init+0x258>)
 80030f2:	0019      	movs	r1, r3
 80030f4:	0010      	movs	r0, r2
 80030f6:	f000 fbe9 	bl	80038cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b00b      	add	sp, #44	; 0x2c
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	40021000 	.word	0x40021000
 8003108:	50000800 	.word	0x50000800
 800310c:	00001ff0 	.word	0x00001ff0
 8003110:	50001400 	.word	0x50001400
 8003114:	00009f90 	.word	0x00009f90
 8003118:	0000ecff 	.word	0x0000ecff
 800311c:	50000400 	.word	0x50000400
 8003120:	50000c00 	.word	0x50000c00

08003124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003128:	b672      	cpsid	i
}
 800312a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800312c:	e7fe      	b.n	800312c <Error_Handler+0x8>
	...

08003130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_MspInit+0x44>)
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_MspInit+0x44>)
 800313c:	2101      	movs	r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_MspInit+0x44>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2201      	movs	r2, #1
 8003148:	4013      	ands	r3, r2
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_MspInit+0x44>)
 8003150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_MspInit+0x44>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0549      	lsls	r1, r1, #21
 8003158:	430a      	orrs	r2, r1
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_MspInit+0x44>)
 800315e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	055b      	lsls	r3, r3, #21
 8003164:	4013      	ands	r3, r2
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b097      	sub	sp, #92	; 0x5c
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	2344      	movs	r3, #68	; 0x44
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	0018      	movs	r0, r3
 8003186:	2314      	movs	r3, #20
 8003188:	001a      	movs	r2, r3
 800318a:	2100      	movs	r1, #0
 800318c:	f005 ff98 	bl	80090c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003190:	2410      	movs	r4, #16
 8003192:	193b      	adds	r3, r7, r4
 8003194:	0018      	movs	r0, r3
 8003196:	2334      	movs	r3, #52	; 0x34
 8003198:	001a      	movs	r2, r3
 800319a:	2100      	movs	r1, #0
 800319c:	f005 ff90 	bl	80090c0 <memset>
  if(hi2c->Instance==I2C1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_I2C_MspInit+0xb8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d13e      	bne.n	8003228 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2220      	movs	r2, #32
 80031ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	0018      	movs	r0, r3
 80031ba:	f002 f993 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80031c2:	f7ff ffaf 	bl	8003124 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_I2C_MspInit+0xbc>)
 80031c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_I2C_MspInit+0xbc>)
 80031cc:	2102      	movs	r1, #2
 80031ce:	430a      	orrs	r2, r1
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_I2C_MspInit+0xbc>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2202      	movs	r2, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031de:	2144      	movs	r1, #68	; 0x44
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	22c0      	movs	r2, #192	; 0xc0
 80031e4:	0092      	lsls	r2, r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2212      	movs	r2, #18
 80031ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	2201      	movs	r2, #1
 80031f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	2203      	movs	r2, #3
 80031f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2206      	movs	r2, #6
 80031fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	187b      	adds	r3, r7, r1
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_I2C_MspInit+0xc0>)
 8003204:	0019      	movs	r1, r3
 8003206:	0010      	movs	r0, r2
 8003208:	f000 fb60 	bl	80038cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_I2C_MspInit+0xbc>)
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_I2C_MspInit+0xbc>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0389      	lsls	r1, r1, #14
 8003216:	430a      	orrs	r2, r1
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_I2C_MspInit+0xbc>)
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	039b      	lsls	r3, r3, #14
 8003222:	4013      	ands	r3, r2
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b017      	add	sp, #92	; 0x5c
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	40005400 	.word	0x40005400
 8003234:	40021000 	.word	0x40021000
 8003238:	50000400 	.word	0x50000400

0800323c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b097      	sub	sp, #92	; 0x5c
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	2344      	movs	r3, #68	; 0x44
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	0018      	movs	r0, r3
 800324a:	2314      	movs	r3, #20
 800324c:	001a      	movs	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	f005 ff36 	bl	80090c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003254:	2410      	movs	r4, #16
 8003256:	193b      	adds	r3, r7, r4
 8003258:	0018      	movs	r0, r3
 800325a:	2334      	movs	r3, #52	; 0x34
 800325c:	001a      	movs	r2, r3
 800325e:	2100      	movs	r1, #0
 8003260:	f005 ff2e 	bl	80090c0 <memset>
  if(huart->Instance==USART2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_UART_MspInit+0xb8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d13e      	bne.n	80032ec <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2202      	movs	r2, #2
 8003272:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003274:	193b      	adds	r3, r7, r4
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800327a:	193b      	adds	r3, r7, r4
 800327c:	0018      	movs	r0, r3
 800327e:	f002 f931 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003286:	f7ff ff4d 	bl	8003124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_UART_MspInit+0xbc>)
 800328c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_UART_MspInit+0xbc>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0289      	lsls	r1, r1, #10
 8003294:	430a      	orrs	r2, r1
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
 8003298:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_UART_MspInit+0xbc>)
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	029b      	lsls	r3, r3, #10
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_UART_MspInit+0xbc>)
 80032a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_UART_MspInit+0xbc>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_UART_MspInit+0xbc>)
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	2201      	movs	r2, #1
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80032be:	2144      	movs	r1, #68	; 0x44
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	220c      	movs	r2, #12
 80032c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	2202      	movs	r2, #2
 80032ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	2201      	movs	r2, #1
 80032d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	187b      	adds	r3, r7, r1
 80032d4:	2200      	movs	r2, #0
 80032d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	2201      	movs	r2, #1
 80032dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032de:	187a      	adds	r2, r7, r1
 80032e0:	23a0      	movs	r3, #160	; 0xa0
 80032e2:	05db      	lsls	r3, r3, #23
 80032e4:	0011      	movs	r1, r2
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 faf0 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b017      	add	sp, #92	; 0x5c
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	40004400 	.word	0x40004400
 80032f8:	40021000 	.word	0x40021000

080032fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <NMI_Handler+0x4>

08003302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003306:	e7fe      	b.n	8003306 <HardFault_Handler+0x4>

08003308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003320:	f000 f9e0 	bl	80036e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <init_tof>:
extern GW_proc_t gest_predictor;
extern HT_proc_t hand_tracker;
extern SEN_data_t sensor_data;
#endif

uint8_t init_tof(VL53L5CX_Configuration	*config){
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L5CX_STATUS_OK;
 800333c:	240f      	movs	r4, #15
 800333e:	193b      	adds	r3, r7, r4
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_init(config);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f003 fd98 	bl	8006e7c <vl53l5cx_init>
 800334c:	0003      	movs	r3, r0
 800334e:	0019      	movs	r1, r3
 8003350:	193b      	adds	r3, r7, r4
 8003352:	193a      	adds	r2, r7, r4
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 800335a:	23fa      	movs	r3, #250	; 0xfa
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f9dc 	bl	800371c <HAL_Delay>
	//@todo more initialization
	status |= vl53l5cx_set_resolution(config, VL53L5CX_RESOLUTION_8X8);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	0018      	movs	r0, r3
 800336a:	f005 f85b 	bl	8008424 <vl53l5cx_set_resolution>
 800336e:	0003      	movs	r3, r0
 8003370:	0019      	movs	r1, r3
 8003372:	193b      	adds	r3, r7, r4
 8003374:	193a      	adds	r2, r7, r4
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_set_ranging_frequency_hz(config, 10);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	210a      	movs	r1, #10
 8003380:	0018      	movs	r0, r3
 8003382:	f005 f949 	bl	8008618 <vl53l5cx_set_ranging_frequency_hz>
 8003386:	0003      	movs	r3, r0
 8003388:	0019      	movs	r1, r3
 800338a:	193b      	adds	r3, r7, r4
 800338c:	193a      	adds	r2, r7, r4
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8003394:	23fa      	movs	r3, #250	; 0xfa
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f9bf 	bl	800371c <HAL_Delay>
	status |= vl53l5cx_motion_indicator_init(config, &Sensor1MotionCfg, VL53L5CX_RESOLUTION_8X8);
	HAL_Delay(100);
#endif

#ifdef DO_GESTURE_TEST
	status |= GW_init(&gest_predictor, &hand_tracker, &sensor_data);
 800339e:	4a19      	ldr	r2, [pc, #100]	; (8003404 <init_tof+0xd0>)
 80033a0:	4919      	ldr	r1, [pc, #100]	; (8003408 <init_tof+0xd4>)
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <init_tof+0xd8>)
 80033a4:	0018      	movs	r0, r3
 80033a6:	f005 fc23 	bl	8008bf0 <GW_init>
 80033aa:	0003      	movs	r3, r0
 80033ac:	b25a      	sxtb	r2, r3
 80033ae:	193b      	adds	r3, r7, r4
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b25a      	sxtb	r2, r3
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	701a      	strb	r2, [r3, #0]
	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53L5CX_RESOLUTION_8X8);
 80033bc:	4911      	ldr	r1, [pc, #68]	; (8003404 <init_tof+0xd0>)
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <init_tof+0xd4>)
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	0018      	movs	r0, r3
 80033c4:	f005 fdad 	bl	8008f22 <HT_set_square_resolution>
 80033c8:	0003      	movs	r3, r0
 80033ca:	b25a      	sxtb	r2, r3
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	4313      	orrs	r3, r2
 80033d4:	b25a      	sxtb	r2, r3
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	701a      	strb	r2, [r3, #0]
	status |= GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0/50);
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <init_tof+0xdc>)
 80033dc:	4a09      	ldr	r2, [pc, #36]	; (8003404 <init_tof+0xd0>)
 80033de:	490a      	ldr	r1, [pc, #40]	; (8003408 <init_tof+0xd4>)
 80033e0:	480a      	ldr	r0, [pc, #40]	; (800340c <init_tof+0xd8>)
 80033e2:	f005 fccf 	bl	8008d84 <GW_set_frequency>
 80033e6:	0003      	movs	r3, r0
 80033e8:	b25a      	sxtb	r2, r3
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b25b      	sxtb	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b25a      	sxtb	r2, r3
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	701a      	strb	r2, [r3, #0]
#endif

	return status;
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	781b      	ldrb	r3, [r3, #0]
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b005      	add	sp, #20
 8003402:	bd90      	pop	{r4, r7, pc}
 8003404:	2000288c 	.word	0x2000288c
 8003408:	200020d4 	.word	0x200020d4
 800340c:	20001174 	.word	0x20001174
 8003410:	41a00000 	.word	0x41a00000

08003414 <sample_once>:


uint8_t sample_once(VL53L5CX_Configuration* config, VL53L5CX_ResultsData* results){
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800341e:	230f      	movs	r3, #15
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
	uint8_t is_ready = 0;
 8003426:	230e      	movs	r3, #14
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]

	while(is_ready == 0){ // poll ;)
 800342e:	e00e      	b.n	800344e <sample_once+0x3a>
		status |= vl53l5cx_check_data_ready(config, &is_ready);
 8003430:	230e      	movs	r3, #14
 8003432:	18fa      	adds	r2, r7, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f004 fcf5 	bl	8007e28 <vl53l5cx_check_data_ready>
 800343e:	0003      	movs	r3, r0
 8003440:	0019      	movs	r1, r3
 8003442:	220f      	movs	r2, #15
 8003444:	18bb      	adds	r3, r7, r2
 8003446:	18ba      	adds	r2, r7, r2
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	701a      	strb	r2, [r3, #0]
	while(is_ready == 0){ // poll ;)
 800344e:	230e      	movs	r3, #14
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0eb      	beq.n	8003430 <sample_once+0x1c>
	}
	vl53l5cx_get_ranging_data(config, results);
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0011      	movs	r1, r2
 800345e:	0018      	movs	r0, r3
 8003460:	f004 fd46 	bl	8007ef0 <vl53l5cx_get_ranging_data>

	return status;
 8003464:	230f      	movs	r3, #15
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	781b      	ldrb	r3, [r3, #0]
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b004      	add	sp, #16
 8003470:	bd80      	pop	{r7, pc}

08003472 <select_target_index>:

	return frame_has_motion;
}

int* select_target_index(int *target_indices, int zone_index, VL53L5CX_ResultsData *pRangingData)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
	(void)pRangingData;
	target_indices[0] = zone_index * VL53L5CX_NB_TARGET_PER_ZONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	601a      	str	r2, [r3, #0]
	return target_indices;
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <SEN_CopyRangingData>:

uint8_t SEN_CopyRangingData(SEN_data_t* pDest, VL53L5CX_ResultsData *results)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b08f      	sub	sp, #60	; 0x3c
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	uint8_t valid;
	int idx, result, nb_targets, target_idx[3], target_status;

//	if (pDest == NULL || results == NULL) return -1;

	pDest->timestamp_ms = HAL_GetTick();
 800349a:	f000 f935 	bl	8003708 <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	001a      	movs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	61da      	str	r2, [r3, #28]

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034aa:	e076      	b.n	800359a <SEN_CopyRangingData+0x10a>
	{
		select_target_index(target_idx, idx, results);
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034b0:	2408      	movs	r4, #8
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7ff ffdc 	bl	8003472 <select_target_index>

		ranging = results->distance_mm[target_idx[0]]/4.0; // Signed 14.2
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	33e1      	adds	r3, #225	; 0xe1
 80034c2:	33ff      	adds	r3, #255	; 0xff
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	18d3      	adds	r3, r2, r3
 80034c8:	3304      	adds	r3, #4
 80034ca:	2200      	movs	r2, #0
 80034cc:	5e9b      	ldrsh	r3, [r3, r2]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7ff fa4e 	bl	8002970 <__aeabi_i2d>
 80034d4:	2200      	movs	r2, #0
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <SEN_CopyRangingData+0x120>)
 80034d8:	f7fd ffb8 	bl	800144c <__aeabi_ddiv>
 80034dc:	0002      	movs	r2, r0
 80034de:	000b      	movs	r3, r1
 80034e0:	0010      	movs	r0, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	f7ff fae2 	bl	8002aac <__aeabi_d2f>
 80034e8:	1c03      	adds	r3, r0, #0
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28

		peak = results->signal_per_spad[target_idx[0]]/2048.0; // Unsigned 21.11
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	3390      	adds	r3, #144	; 0x90
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	18d3      	adds	r3, r2, r3
 80034f8:	3304      	adds	r3, #4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7ff fa67 	bl	80029d0 <__aeabi_ui2d>
 8003502:	2200      	movs	r2, #0
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <SEN_CopyRangingData+0x124>)
 8003506:	f7fd ffa1 	bl	800144c <__aeabi_ddiv>
 800350a:	0002      	movs	r2, r0
 800350c:	000b      	movs	r3, r1
 800350e:	0010      	movs	r0, r2
 8003510:	0019      	movs	r1, r3
 8003512:	f7ff facb 	bl	8002aac <__aeabi_d2f>
 8003516:	1c03      	adds	r3, r0, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
		nb_targets = results->nb_target_detected[idx];
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	2382      	movs	r3, #130	; 0x82
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003522:	188a      	adds	r2, r1, r2
 8003524:	18d3      	adds	r3, r2, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	623b      	str	r3, [r7, #32]
		target_status = results->target_status[target_idx[0]];
 800352a:	193b      	adds	r3, r7, r4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	4921      	ldr	r1, [pc, #132]	; (80035b8 <SEN_CopyRangingData+0x128>)
 8003532:	18d3      	adds	r3, r2, r3
 8003534:	185b      	adds	r3, r3, r1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	61fb      	str	r3, [r7, #28]

		valid = (nb_targets > 0)
				&& (target_status == 4 || target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10);
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	dd10      	ble.n	8003562 <SEN_CopyRangingData+0xd2>
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d00b      	beq.n	800355e <SEN_CopyRangingData+0xce>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d008      	beq.n	800355e <SEN_CopyRangingData+0xce>
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d005      	beq.n	800355e <SEN_CopyRangingData+0xce>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b09      	cmp	r3, #9
 8003556:	d002      	beq.n	800355e <SEN_CopyRangingData+0xce>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d101      	bne.n	8003562 <SEN_CopyRangingData+0xd2>
 800355e:	2201      	movs	r2, #1
 8003560:	e000      	b.n	8003564 <SEN_CopyRangingData+0xd4>
 8003562:	2200      	movs	r2, #0
		valid = (nb_targets > 0)
 8003564:	211b      	movs	r1, #27
 8003566:	187b      	adds	r3, r7, r1
 8003568:	701a      	strb	r2, [r3, #0]
		result = SEN_set_data(pDest, idx, ranging, peak, valid);
 800356a:	187b      	adds	r3, r7, r1
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	4193      	sbcs	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	1c23      	adds	r3, r4, #0
 8003580:	f005 fd83 	bl	800908a <SEN_set_data>
 8003584:	0003      	movs	r3, r0
 8003586:	617b      	str	r3, [r7, #20]

		if (result != 0) return result;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <SEN_CopyRangingData+0x104>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e008      	b.n	80035a6 <SEN_CopyRangingData+0x116>
	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	3301      	adds	r3, #1
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	db83      	blt.n	80034ac <SEN_CopyRangingData+0x1c>
	}

	return 0;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b00d      	add	sp, #52	; 0x34
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	40100000 	.word	0x40100000
 80035b4:	40a00000 	.word	0x40a00000
 80035b8:	00000484 	.word	0x00000484

080035bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035bc:	480d      	ldr	r0, [pc, #52]	; (80035f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035c0:	f7ff feb3 	bl	800332a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80035c6:	490d      	ldr	r1, [pc, #52]	; (80035fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c8:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <LoopForever+0xe>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035cc:	e002      	b.n	80035d4 <LoopCopyDataInit>

080035ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d2:	3304      	adds	r3, #4

080035d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d8:	d3f9      	bcc.n	80035ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035dc:	4c0a      	ldr	r4, [pc, #40]	; (8003608 <LoopForever+0x16>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e0:	e001      	b.n	80035e6 <LoopFillZerobss>

080035e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e4:	3204      	adds	r2, #4

080035e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e8:	d3fb      	bcc.n	80035e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ea:	f005 fd77 	bl	80090dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035ee:	f7ff fb0d 	bl	8002c0c <main>

080035f2 <LoopForever>:

LoopForever:
  b LoopForever
 80035f2:	e7fe      	b.n	80035f2 <LoopForever>
  ldr   r0, =_estack
 80035f4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003600:	0801ed48 	.word	0x0801ed48
  ldr r2, =_sbss
 8003604:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003608:	20002c2c 	.word	0x20002c2c

0800360c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC1_COMP_IRQHandler>
	...

08003610 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_Init+0x3c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_Init+0x3c>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0049      	lsls	r1, r1, #1
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800362a:	2000      	movs	r0, #0
 800362c:	f000 f810 	bl	8003650 <HAL_InitTick>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d003      	beq.n	800363c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e001      	b.n	8003640 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800363c:	f7ff fd78 	bl	8003130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	781b      	ldrb	r3, [r3, #0]
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40022000 	.word	0x40022000

08003650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003658:	230f      	movs	r3, #15
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_InitTick+0x88>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02b      	beq.n	80036c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003668:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_InitTick+0x8c>)
 800366a:	681c      	ldr	r4, [r3, #0]
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_InitTick+0x88>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	0019      	movs	r1, r3
 8003672:	23fa      	movs	r3, #250	; 0xfa
 8003674:	0098      	lsls	r0, r3, #2
 8003676:	f7fc fd45 	bl	8000104 <__udivsi3>
 800367a:	0003      	movs	r3, r0
 800367c:	0019      	movs	r1, r3
 800367e:	0020      	movs	r0, r4
 8003680:	f7fc fd40 	bl	8000104 <__udivsi3>
 8003684:	0003      	movs	r3, r0
 8003686:	0018      	movs	r0, r3
 8003688:	f000 f913 	bl	80038b2 <HAL_SYSTICK_Config>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d112      	bne.n	80036b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d80a      	bhi.n	80036ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	2301      	movs	r3, #1
 800369a:	425b      	negs	r3, r3
 800369c:	2200      	movs	r2, #0
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 f8f2 	bl	8003888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_InitTick+0x90>)
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e00d      	b.n	80036c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80036ac:	230f      	movs	r3, #15
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e008      	b.n	80036c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036b6:	230f      	movs	r3, #15
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e003      	b.n	80036c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036c8:	230f      	movs	r3, #15
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	781b      	ldrb	r3, [r3, #0]
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b005      	add	sp, #20
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000008 	.word	0x20000008
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_IncTick+0x1c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	001a      	movs	r2, r3
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_IncTick+0x20>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	18d2      	adds	r2, r2, r3
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_IncTick+0x20>)
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000008 	.word	0x20000008
 8003704:	20002af0 	.word	0x20002af0

08003708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  return uwTick;
 800370c:	4b02      	ldr	r3, [pc, #8]	; (8003718 <HAL_GetTick+0x10>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	20002af0 	.word	0x20002af0

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff fff0 	bl	8003708 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	d005      	beq.n	8003742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_Delay+0x44>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	001a      	movs	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	189b      	adds	r3, r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	f7ff ffe0 	bl	8003708 <HAL_GetTick>
 8003748:	0002      	movs	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d8f7      	bhi.n	8003744 <HAL_Delay+0x28>
  {
  }
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	20000008 	.word	0x20000008

08003764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	0002      	movs	r2, r0
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b7f      	cmp	r3, #127	; 0x7f
 8003778:	d828      	bhi.n	80037cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800377a:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <__NVIC_SetPriority+0xd4>)
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b25b      	sxtb	r3, r3
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	33c0      	adds	r3, #192	; 0xc0
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	589b      	ldr	r3, [r3, r2]
 800378a:	1dfa      	adds	r2, r7, #7
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	0011      	movs	r1, r2
 8003790:	2203      	movs	r2, #3
 8003792:	400a      	ands	r2, r1
 8003794:	00d2      	lsls	r2, r2, #3
 8003796:	21ff      	movs	r1, #255	; 0xff
 8003798:	4091      	lsls	r1, r2
 800379a:	000a      	movs	r2, r1
 800379c:	43d2      	mvns	r2, r2
 800379e:	401a      	ands	r2, r3
 80037a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	22ff      	movs	r2, #255	; 0xff
 80037a8:	401a      	ands	r2, r3
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	0018      	movs	r0, r3
 80037b0:	2303      	movs	r3, #3
 80037b2:	4003      	ands	r3, r0
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b8:	481f      	ldr	r0, [pc, #124]	; (8003838 <__NVIC_SetPriority+0xd4>)
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	430a      	orrs	r2, r1
 80037c4:	33c0      	adds	r3, #192	; 0xc0
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037ca:	e031      	b.n	8003830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037cc:	4a1b      	ldr	r2, [pc, #108]	; (800383c <__NVIC_SetPriority+0xd8>)
 80037ce:	1dfb      	adds	r3, r7, #7
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	0019      	movs	r1, r3
 80037d4:	230f      	movs	r3, #15
 80037d6:	400b      	ands	r3, r1
 80037d8:	3b08      	subs	r3, #8
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3306      	adds	r3, #6
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	3304      	adds	r3, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1dfa      	adds	r2, r7, #7
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	0011      	movs	r1, r2
 80037ec:	2203      	movs	r2, #3
 80037ee:	400a      	ands	r2, r1
 80037f0:	00d2      	lsls	r2, r2, #3
 80037f2:	21ff      	movs	r1, #255	; 0xff
 80037f4:	4091      	lsls	r1, r2
 80037f6:	000a      	movs	r2, r1
 80037f8:	43d2      	mvns	r2, r2
 80037fa:	401a      	ands	r2, r3
 80037fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	019b      	lsls	r3, r3, #6
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	401a      	ands	r2, r3
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	0018      	movs	r0, r3
 800380c:	2303      	movs	r3, #3
 800380e:	4003      	ands	r3, r0
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003814:	4809      	ldr	r0, [pc, #36]	; (800383c <__NVIC_SetPriority+0xd8>)
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	001c      	movs	r4, r3
 800381c:	230f      	movs	r3, #15
 800381e:	4023      	ands	r3, r4
 8003820:	3b08      	subs	r3, #8
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	430a      	orrs	r2, r1
 8003826:	3306      	adds	r3, #6
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	18c3      	adds	r3, r0, r3
 800382c:	3304      	adds	r3, #4
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b003      	add	sp, #12
 8003836:	bd90      	pop	{r4, r7, pc}
 8003838:	e000e100 	.word	0xe000e100
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1e5a      	subs	r2, r3, #1
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	045b      	lsls	r3, r3, #17
 8003850:	429a      	cmp	r2, r3
 8003852:	d301      	bcc.n	8003858 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003854:	2301      	movs	r3, #1
 8003856:	e010      	b.n	800387a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <SysTick_Config+0x44>)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	3a01      	subs	r2, #1
 800385e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003860:	2301      	movs	r3, #1
 8003862:	425b      	negs	r3, r3
 8003864:	2103      	movs	r1, #3
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff ff7c 	bl	8003764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x44>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x44>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	210f      	movs	r1, #15
 8003894:	187b      	adds	r3, r7, r1
 8003896:	1c02      	adds	r2, r0, #0
 8003898:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	187b      	adds	r3, r7, r1
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	0011      	movs	r1, r2
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff ff5d 	bl	8003764 <__NVIC_SetPriority>
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff ffbf 	bl	8003840 <SysTick_Config>
 80038c2:	0003      	movs	r3, r0
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	e147      	b.n	8003b6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4091      	lsls	r1, r2
 80038e6:	000a      	movs	r2, r1
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d100      	bne.n	80038f4 <HAL_GPIO_Init+0x28>
 80038f2:	e138      	b.n	8003b66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d005      	beq.n	800390c <HAL_GPIO_Init+0x40>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	4013      	ands	r3, r2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d130      	bne.n	800396e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	409a      	lsls	r2, r3
 800391a:	0013      	movs	r3, r2
 800391c:	43da      	mvns	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	0013      	movs	r3, r2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003942:	2201      	movs	r2, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	43da      	mvns	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	2201      	movs	r2, #1
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	4013      	ands	r3, r2
 8003976:	2b03      	cmp	r3, #3
 8003978:	d017      	beq.n	80039aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	2203      	movs	r2, #3
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	43da      	mvns	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d123      	bne.n	80039fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	08da      	lsrs	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	58d3      	ldr	r3, [r2, r3]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2207      	movs	r2, #7
 80039c8:	4013      	ands	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	43da      	mvns	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2107      	movs	r1, #7
 80039e2:	400b      	ands	r3, r1
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3208      	adds	r2, #8
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	6939      	ldr	r1, [r7, #16]
 80039fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	23c0      	movs	r3, #192	; 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d100      	bne.n	8003a40 <HAL_GPIO_Init+0x174>
 8003a3e:	e092      	b.n	8003b66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a40:	4a50      	ldr	r2, [pc, #320]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3318      	adds	r3, #24
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	589b      	ldr	r3, [r3, r2]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	220f      	movs	r2, #15
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	23a0      	movs	r3, #160	; 0xa0
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x1ca>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a45      	ldr	r2, [pc, #276]	; (8003b88 <HAL_GPIO_Init+0x2bc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x1c6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x1c2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x1be>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a96:	2300      	movs	r3, #0
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	2103      	movs	r1, #3
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	00d2      	lsls	r2, r2, #3
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003aa8:	4936      	ldr	r1, [pc, #216]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3318      	adds	r3, #24
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	035b      	lsls	r3, r3, #13
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ada:	4b2a      	ldr	r3, [pc, #168]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ae0:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	039b      	lsls	r3, r3, #14
 8003af8:	4013      	ands	r3, r2
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b0c:	2384      	movs	r3, #132	; 0x84
 8003b0e:	58d3      	ldr	r3, [r2, r3]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	4013      	ands	r3, r2
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b30:	4914      	ldr	r1, [pc, #80]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b32:	2284      	movs	r2, #132	; 0x84
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	58d3      	ldr	r3, [r2, r3]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43da      	mvns	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	025b      	lsls	r3, r3, #9
 8003b52:	4013      	ands	r3, r2
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b5e:	4909      	ldr	r1, [pc, #36]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	40da      	lsrs	r2, r3
 8003b74:	1e13      	subs	r3, r2, #0
 8003b76:	d000      	beq.n	8003b7a <HAL_GPIO_Init+0x2ae>
 8003b78:	e6b0      	b.n	80038dc <HAL_GPIO_Init+0x10>
  }
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b006      	add	sp, #24
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021800 	.word	0x40021800
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	50000800 	.word	0x50000800
 8003b90:	50000c00 	.word	0x50000c00

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	0008      	movs	r0, r1
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	1c02      	adds	r2, r0, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	1c7b      	adds	r3, r7, #1
 8003ba8:	1c0a      	adds	r2, r1, #0
 8003baa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	1c7b      	adds	r3, r7, #1
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	000a      	movs	r2, r1
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003be2:	1cbb      	adds	r3, r7, #2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	041a      	lsls	r2, r3, #16
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	1cb9      	adds	r1, r7, #2
 8003bf2:	8809      	ldrh	r1, [r1, #0]
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b004      	add	sp, #16
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e082      	b.n	8003d1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2241      	movs	r2, #65	; 0x41
 8003c1a:	5c9b      	ldrb	r3, [r3, r2]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff faa3 	bl	8003178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2241      	movs	r2, #65	; 0x41
 8003c36:	2124      	movs	r1, #36	; 0x24
 8003c38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	438a      	bics	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4934      	ldr	r1, [pc, #208]	; (8003d24 <HAL_I2C_Init+0x120>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4931      	ldr	r1, [pc, #196]	; (8003d28 <HAL_I2C_Init+0x124>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d108      	bne.n	8003c82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0209      	lsls	r1, r1, #8
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	e007      	b.n	8003c92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2184      	movs	r1, #132	; 0x84
 8003c8c:	0209      	lsls	r1, r1, #8
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d104      	bne.n	8003ca4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	491f      	ldr	r1, [pc, #124]	; (8003d2c <HAL_I2C_Init+0x128>)
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	491a      	ldr	r1, [pc, #104]	; (8003d28 <HAL_I2C_Init+0x124>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69d9      	ldr	r1, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2241      	movs	r2, #65	; 0x41
 8003d08:	2120      	movs	r1, #32
 8003d0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2242      	movs	r2, #66	; 0x42
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	f0ffffff 	.word	0xf0ffffff
 8003d28:	ffff7fff 	.word	0xffff7fff
 8003d2c:	02008000 	.word	0x02008000

08003d30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	0008      	movs	r0, r1
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	230a      	movs	r3, #10
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	1c02      	adds	r2, r0, #0
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	2308      	movs	r3, #8
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	1c0a      	adds	r2, r1, #0
 8003d4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2241      	movs	r2, #65	; 0x41
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d000      	beq.n	8003d5c <HAL_I2C_Master_Transmit+0x2c>
 8003d5a:	e0e7      	b.n	8003f2c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	5c9b      	ldrb	r3, [r3, r2]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2C_Master_Transmit+0x3a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0e1      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1fe>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d72:	f7ff fcc9 	bl	8003708 <HAL_GetTick>
 8003d76:	0003      	movs	r3, r0
 8003d78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	0219      	lsls	r1, r3, #8
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	f000 fb96 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0cc      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2241      	movs	r2, #65	; 0x41
 8003d98:	2121      	movs	r1, #33	; 0x21
 8003d9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2242      	movs	r2, #66	; 0x42
 8003da0:	2110      	movs	r1, #16
 8003da2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2208      	movs	r2, #8
 8003db4:	18ba      	adds	r2, r7, r2
 8003db6:	8812      	ldrh	r2, [r2, #0]
 8003db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2bff      	cmp	r3, #255	; 0xff
 8003dc8:	d911      	bls.n	8003dee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	; 0xff
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	045c      	lsls	r4, r3, #17
 8003dda:	230a      	movs	r3, #10
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	8819      	ldrh	r1, [r3, #0]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	4b55      	ldr	r3, [pc, #340]	; (8003f38 <HAL_I2C_Master_Transmit+0x208>)
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	0023      	movs	r3, r4
 8003de8:	f000 fd9a 	bl	8004920 <I2C_TransferConfig>
 8003dec:	e075      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	049c      	lsls	r4, r3, #18
 8003e02:	230a      	movs	r3, #10
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	8819      	ldrh	r1, [r3, #0]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_I2C_Master_Transmit+0x208>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	0023      	movs	r3, r4
 8003e10:	f000 fd86 	bl	8004920 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e14:	e061      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 fb8a 	bl	8004536 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e22:	1e03      	subs	r3, r0, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e081      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d03a      	beq.n	8003eda <HAL_I2C_Master_Transmit+0x1aa>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d136      	bne.n	8003eda <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	0013      	movs	r3, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	f000 fb1d 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e053      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2bff      	cmp	r3, #255	; 0xff
 8003e8e:	d911      	bls.n	8003eb4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	045c      	lsls	r4, r3, #17
 8003ea0:	230a      	movs	r3, #10
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	8819      	ldrh	r1, [r3, #0]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	0023      	movs	r3, r4
 8003eae:	f000 fd37 	bl	8004920 <I2C_TransferConfig>
 8003eb2:	e012      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	049c      	lsls	r4, r3, #18
 8003ec8:	230a      	movs	r3, #10
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	8819      	ldrh	r1, [r3, #0]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	f000 fd23 	bl	8004920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d198      	bne.n	8003e16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 fb62 	bl	80045b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef0:	1e03      	subs	r3, r0, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01a      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2220      	movs	r2, #32
 8003efe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	490c      	ldr	r1, [pc, #48]	; (8003f3c <HAL_I2C_Master_Transmit+0x20c>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2241      	movs	r2, #65	; 0x41
 8003f14:	2120      	movs	r1, #32
 8003f16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2242      	movs	r2, #66	; 0x42
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2240      	movs	r2, #64	; 0x40
 8003f24:	2100      	movs	r1, #0
 8003f26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b007      	add	sp, #28
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	80002000 	.word	0x80002000
 8003f3c:	fe00e800 	.word	0xfe00e800

08003f40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	0008      	movs	r0, r1
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	230a      	movs	r3, #10
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	1c02      	adds	r2, r0, #0
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	2308      	movs	r3, #8
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	1c0a      	adds	r2, r1, #0
 8003f5c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2241      	movs	r2, #65	; 0x41
 8003f62:	5c9b      	ldrb	r3, [r3, r2]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d000      	beq.n	8003f6c <HAL_I2C_Master_Receive+0x2c>
 8003f6a:	e0e8      	b.n	800413e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2C_Master_Receive+0x3a>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0e2      	b.n	8004140 <HAL_I2C_Master_Receive+0x200>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2240      	movs	r2, #64	; 0x40
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f82:	f7ff fbc1 	bl	8003708 <HAL_GetTick>
 8003f86:	0003      	movs	r3, r0
 8003f88:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	0219      	lsls	r1, r3, #8
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2319      	movs	r3, #25
 8003f96:	2201      	movs	r2, #1
 8003f98:	f000 fa8e 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0cd      	b.n	8004140 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2241      	movs	r2, #65	; 0x41
 8003fa8:	2122      	movs	r1, #34	; 0x22
 8003faa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2242      	movs	r2, #66	; 0x42
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	18ba      	adds	r2, r7, r2
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2bff      	cmp	r3, #255	; 0xff
 8003fd8:	d911      	bls.n	8003ffe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	22ff      	movs	r2, #255	; 0xff
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	045c      	lsls	r4, r3, #17
 8003fea:	230a      	movs	r3, #10
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	8819      	ldrh	r1, [r3, #0]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	4b55      	ldr	r3, [pc, #340]	; (8004148 <HAL_I2C_Master_Receive+0x208>)
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	0023      	movs	r3, r4
 8003ff8:	f000 fc92 	bl	8004920 <I2C_TransferConfig>
 8003ffc:	e076      	b.n	80040ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	049c      	lsls	r4, r3, #18
 8004012:	230a      	movs	r3, #10
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	8819      	ldrh	r1, [r3, #0]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <HAL_I2C_Master_Receive+0x208>)
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	0023      	movs	r3, r4
 8004020:	f000 fc7e 	bl	8004920 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004024:	e062      	b.n	80040ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0018      	movs	r0, r3
 800402e:	f000 fafd 	bl	800462c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e082      	b.n	8004140 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03a      	beq.n	80040ec <HAL_I2C_Master_Receive+0x1ac>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d136      	bne.n	80040ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800407e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	0013      	movs	r3, r2
 8004088:	2200      	movs	r2, #0
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	f000 fa14 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004090:	1e03      	subs	r3, r0, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e053      	b.n	8004140 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2bff      	cmp	r3, #255	; 0xff
 80040a0:	d911      	bls.n	80040c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	045c      	lsls	r4, r3, #17
 80040b2:	230a      	movs	r3, #10
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	8819      	ldrh	r1, [r3, #0]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	0023      	movs	r3, r4
 80040c0:	f000 fc2e 	bl	8004920 <I2C_TransferConfig>
 80040c4:	e012      	b.n	80040ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	049c      	lsls	r4, r3, #18
 80040da:	230a      	movs	r3, #10
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	8819      	ldrh	r1, [r3, #0]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	0023      	movs	r3, r4
 80040e8:	f000 fc1a 	bl	8004920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d197      	bne.n	8004026 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 fa59 	bl	80045b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004102:	1e03      	subs	r3, r0, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e01a      	b.n	8004140 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2220      	movs	r2, #32
 8004110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	490b      	ldr	r1, [pc, #44]	; (800414c <HAL_I2C_Master_Receive+0x20c>)
 800411e:	400a      	ands	r2, r1
 8004120:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2241      	movs	r2, #65	; 0x41
 8004126:	2120      	movs	r1, #32
 8004128:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2242      	movs	r2, #66	; 0x42
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2240      	movs	r2, #64	; 0x40
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	b007      	add	sp, #28
 8004146:	bd90      	pop	{r4, r7, pc}
 8004148:	80002400 	.word	0x80002400
 800414c:	fe00e800 	.word	0xfe00e800

08004150 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	000c      	movs	r4, r1
 800415a:	0010      	movs	r0, r2
 800415c:	0019      	movs	r1, r3
 800415e:	230a      	movs	r3, #10
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	1c22      	adds	r2, r4, #0
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	2308      	movs	r3, #8
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	1c02      	adds	r2, r0, #0
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	1dbb      	adds	r3, r7, #6
 8004170:	1c0a      	adds	r2, r1, #0
 8004172:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2241      	movs	r2, #65	; 0x41
 8004178:	5c9b      	ldrb	r3, [r3, r2]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d000      	beq.n	8004182 <HAL_I2C_Mem_Write+0x32>
 8004180:	e10c      	b.n	800439c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_I2C_Mem_Write+0x42>
 8004188:	232c      	movs	r3, #44	; 0x2c
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0ff      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_I2C_Mem_Write+0x5c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0f8      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2240      	movs	r2, #64	; 0x40
 80041b0:	2101      	movs	r1, #1
 80041b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041b4:	f7ff faa8 	bl	8003708 <HAL_GetTick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	0219      	lsls	r1, r3, #8
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2319      	movs	r3, #25
 80041c8:	2201      	movs	r2, #1
 80041ca:	f000 f975 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0e3      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2241      	movs	r2, #65	; 0x41
 80041da:	2121      	movs	r1, #33	; 0x21
 80041dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2242      	movs	r2, #66	; 0x42
 80041e2:	2140      	movs	r1, #64	; 0x40
 80041e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	222c      	movs	r2, #44	; 0x2c
 80041f6:	18ba      	adds	r2, r7, r2
 80041f8:	8812      	ldrh	r2, [r2, #0]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004202:	1dbb      	adds	r3, r7, #6
 8004204:	881c      	ldrh	r4, [r3, #0]
 8004206:	2308      	movs	r3, #8
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	230a      	movs	r3, #10
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	8819      	ldrh	r1, [r3, #0]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	0023      	movs	r3, r4
 800421e:	f000 f8c5 	bl	80043ac <I2C_RequestMemoryWrite>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d005      	beq.n	8004232 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2240      	movs	r2, #64	; 0x40
 800422a:	2100      	movs	r1, #0
 800422c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e0b5      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2bff      	cmp	r3, #255	; 0xff
 800423a:	d911      	bls.n	8004260 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	b2da      	uxtb	r2, r3
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	045c      	lsls	r4, r3, #17
 800424c:	230a      	movs	r3, #10
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	8819      	ldrh	r1, [r3, #0]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	2300      	movs	r3, #0
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	0023      	movs	r3, r4
 800425a:	f000 fb61 	bl	8004920 <I2C_TransferConfig>
 800425e:	e012      	b.n	8004286 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	b2da      	uxtb	r2, r3
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	049c      	lsls	r4, r3, #18
 8004274:	230a      	movs	r3, #10
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	8819      	ldrh	r1, [r3, #0]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	0023      	movs	r3, r4
 8004282:	f000 fb4d 	bl	8004920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	0018      	movs	r0, r3
 800428e:	f000 f952 	bl	8004536 <I2C_WaitOnTXISFlagUntilTimeout>
 8004292:	1e03      	subs	r3, r0, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e081      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03a      	beq.n	800434a <HAL_I2C_Mem_Write+0x1fa>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d136      	bne.n	800434a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	0013      	movs	r3, r2
 80042e6:	2200      	movs	r2, #0
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	f000 f8e5 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	1e03      	subs	r3, r0, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e053      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2bff      	cmp	r3, #255	; 0xff
 80042fe:	d911      	bls.n	8004324 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	22ff      	movs	r2, #255	; 0xff
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	045c      	lsls	r4, r3, #17
 8004310:	230a      	movs	r3, #10
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	8819      	ldrh	r1, [r3, #0]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	2300      	movs	r3, #0
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	0023      	movs	r3, r4
 800431e:	f000 faff 	bl	8004920 <I2C_TransferConfig>
 8004322:	e012      	b.n	800434a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	b2da      	uxtb	r2, r3
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	049c      	lsls	r4, r3, #18
 8004338:	230a      	movs	r3, #10
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	8819      	ldrh	r1, [r3, #0]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	2300      	movs	r3, #0
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	0023      	movs	r3, r4
 8004346:	f000 faeb 	bl	8004920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d198      	bne.n	8004286 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f92a 	bl	80045b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e01a      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2220      	movs	r2, #32
 800436e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	490b      	ldr	r1, [pc, #44]	; (80043a8 <HAL_I2C_Mem_Write+0x258>)
 800437c:	400a      	ands	r2, r1
 800437e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2241      	movs	r2, #65	; 0x41
 8004384:	2120      	movs	r1, #32
 8004386:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2242      	movs	r2, #66	; 0x42
 800438c:	2100      	movs	r1, #0
 800438e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	2100      	movs	r1, #0
 8004396:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b007      	add	sp, #28
 80043a4:	bd90      	pop	{r4, r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	fe00e800 	.word	0xfe00e800

080043ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043ac:	b5b0      	push	{r4, r5, r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	000c      	movs	r4, r1
 80043b6:	0010      	movs	r0, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	250a      	movs	r5, #10
 80043bc:	197b      	adds	r3, r7, r5
 80043be:	1c22      	adds	r2, r4, #0
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	2308      	movs	r3, #8
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	1c02      	adds	r2, r0, #0
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	1dbb      	adds	r3, r7, #6
 80043cc:	1c0a      	adds	r2, r1, #0
 80043ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043d0:	1dbb      	adds	r3, r7, #6
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	045c      	lsls	r4, r3, #17
 80043da:	197b      	adds	r3, r7, r5
 80043dc:	8819      	ldrh	r1, [r3, #0]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <I2C_RequestMemoryWrite+0xc4>)
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	0023      	movs	r3, r4
 80043e6:	f000 fa9b 	bl	8004920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 f8a0 	bl	8004536 <I2C_WaitOnTXISFlagUntilTimeout>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e033      	b.n	8004466 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fe:	1dbb      	adds	r3, r7, #6
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d107      	bne.n	8004416 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004406:	2308      	movs	r3, #8
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
 8004414:	e019      	b.n	800444a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004416:	2308      	movs	r3, #8
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	b29b      	uxth	r3, r3
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	6a39      	ldr	r1, [r7, #32]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	0018      	movs	r0, r3
 8004430:	f000 f881 	bl	8004536 <I2C_WaitOnTXISFlagUntilTimeout>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d001      	beq.n	800443c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e014      	b.n	8004466 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800443c:	2308      	movs	r3, #8
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	0013      	movs	r3, r2
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	; 0x80
 8004458:	f000 f82e 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bdb0      	pop	{r4, r5, r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	80002000 	.word	0x80002000

08004474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d103      	bne.n	8004492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2201      	movs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	2b01      	cmp	r3, #1
 800449e:	d007      	beq.n	80044b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2101      	movs	r1, #1
 80044ac:	430a      	orrs	r2, r1
 80044ae:	619a      	str	r2, [r3, #24]
  }
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	1dfb      	adds	r3, r7, #7
 80044c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	e021      	b.n	800450e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	d01e      	beq.n	800450e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d0:	f7ff f91a 	bl	8003708 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d302      	bcc.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d113      	bne.n	800450e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	2220      	movs	r2, #32
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2241      	movs	r2, #65	; 0x41
 80044f6:	2120      	movs	r1, #32
 80044f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2242      	movs	r2, #66	; 0x42
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e00f      	b.n	800452e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	425a      	negs	r2, r3
 800451e:	4153      	adcs	r3, r2
 8004520:	b2db      	uxtb	r3, r3
 8004522:	001a      	movs	r2, r3
 8004524:	1dfb      	adds	r3, r7, #7
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d0ce      	beq.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}

08004536 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004542:	e02b      	b.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 f8e8 	bl	8004720 <I2C_IsErrorOccurred>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e029      	b.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3301      	adds	r3, #1
 800455c:	d01e      	beq.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7ff f8d3 	bl	8003708 <HAL_GetTick>
 8004562:	0002      	movs	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	2220      	movs	r2, #32
 800457a:	431a      	orrs	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2241      	movs	r2, #65	; 0x41
 8004584:	2120      	movs	r1, #32
 8004586:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2242      	movs	r2, #66	; 0x42
 800458c:	2100      	movs	r1, #0
 800458e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	2100      	movs	r1, #0
 8004596:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2202      	movs	r2, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d1cc      	bne.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045c0:	e028      	b.n	8004614 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 f8a9 	bl	8004720 <I2C_IsErrorOccurred>
 80045ce:	1e03      	subs	r3, r0, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e026      	b.n	8004624 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7ff f897 	bl	8003708 <HAL_GetTick>
 80045da:	0002      	movs	r2, r0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d113      	bne.n	8004614 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	2220      	movs	r2, #32
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2241      	movs	r2, #65	; 0x41
 80045fc:	2120      	movs	r1, #32
 80045fe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2242      	movs	r2, #66	; 0x42
 8004604:	2100      	movs	r1, #0
 8004606:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	2100      	movs	r1, #0
 800460e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e007      	b.n	8004624 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2220      	movs	r2, #32
 800461c:	4013      	ands	r3, r2
 800461e:	2b20      	cmp	r3, #32
 8004620:	d1cf      	bne.n	80045c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b004      	add	sp, #16
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004638:	e064      	b.n	8004704 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 f86d 	bl	8004720 <I2C_IsErrorOccurred>
 8004646:	1e03      	subs	r3, r0, #0
 8004648:	d001      	beq.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e062      	b.n	8004714 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2220      	movs	r2, #32
 8004656:	4013      	ands	r3, r2
 8004658:	2b20      	cmp	r3, #32
 800465a:	d138      	bne.n	80046ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2204      	movs	r2, #4
 8004664:	4013      	ands	r3, r2
 8004666:	2b04      	cmp	r3, #4
 8004668:	d105      	bne.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e04e      	b.n	8004714 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2210      	movs	r2, #16
 800467e:	4013      	ands	r3, r2
 8004680:	2b10      	cmp	r3, #16
 8004682:	d107      	bne.n	8004694 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2210      	movs	r2, #16
 800468a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2204      	movs	r2, #4
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
 8004692:	e002      	b.n	800469a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2220      	movs	r2, #32
 80046a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	491b      	ldr	r1, [pc, #108]	; (800471c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80046ae:	400a      	ands	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2241      	movs	r2, #65	; 0x41
 80046b6:	2120      	movs	r1, #32
 80046b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2242      	movs	r2, #66	; 0x42
 80046be:	2100      	movs	r1, #0
 80046c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2240      	movs	r2, #64	; 0x40
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e022      	b.n	8004714 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7ff f81b 	bl	8003708 <HAL_GetTick>
 80046d2:	0002      	movs	r2, r0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	2220      	movs	r2, #32
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2241      	movs	r2, #65	; 0x41
 80046f4:	2120      	movs	r1, #32
 80046f6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2240      	movs	r2, #64	; 0x40
 80046fc:	2100      	movs	r1, #0
 80046fe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e007      	b.n	8004714 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2204      	movs	r2, #4
 800470c:	4013      	ands	r3, r2
 800470e:	2b04      	cmp	r3, #4
 8004710:	d193      	bne.n	800463a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b08b      	sub	sp, #44	; 0x2c
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2327      	movs	r3, #39	; 0x27
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2210      	movs	r2, #16
 8004748:	4013      	ands	r3, r2
 800474a:	d100      	bne.n	800474e <I2C_IsErrorOccurred+0x2e>
 800474c:	e082      	b.n	8004854 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2210      	movs	r2, #16
 8004754:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004756:	e060      	b.n	800481a <I2C_IsErrorOccurred+0xfa>
 8004758:	2427      	movs	r4, #39	; 0x27
 800475a:	193b      	adds	r3, r7, r4
 800475c:	193a      	adds	r2, r7, r4
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3301      	adds	r3, #1
 8004766:	d058      	beq.n	800481a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004768:	f7fe ffce 	bl	8003708 <HAL_GetTick>
 800476c:	0002      	movs	r2, r0
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d306      	bcc.n	8004786 <I2C_IsErrorOccurred+0x66>
 8004778:	193b      	adds	r3, r7, r4
 800477a:	193a      	adds	r2, r7, r4
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d149      	bne.n	800481a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4013      	ands	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004794:	2013      	movs	r0, #19
 8004796:	183b      	adds	r3, r7, r0
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	2142      	movs	r1, #66	; 0x42
 800479c:	5c52      	ldrb	r2, [r2, r1]
 800479e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	401a      	ands	r2, r3
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d126      	bne.n	8004802 <I2C_IsErrorOccurred+0xe2>
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	01db      	lsls	r3, r3, #7
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d021      	beq.n	8004802 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80047be:	183b      	adds	r3, r7, r0
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d01d      	beq.n	8004802 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	01c9      	lsls	r1, r1, #7
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047d8:	f7fe ff96 	bl	8003708 <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e0:	e00f      	b.n	8004802 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047e2:	f7fe ff91 	bl	8003708 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b19      	cmp	r3, #25
 80047ee:	d908      	bls.n	8004802 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2220      	movs	r2, #32
 80047f4:	4313      	orrs	r3, r2
 80047f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047f8:	2327      	movs	r3, #39	; 0x27
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]

              break;
 8004800:	e00b      	b.n	800481a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2220      	movs	r2, #32
 800480a:	4013      	ands	r3, r2
 800480c:	2127      	movs	r1, #39	; 0x27
 800480e:	187a      	adds	r2, r7, r1
 8004810:	1879      	adds	r1, r7, r1
 8004812:	7809      	ldrb	r1, [r1, #0]
 8004814:	7011      	strb	r1, [r2, #0]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d1e3      	bne.n	80047e2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2220      	movs	r2, #32
 8004822:	4013      	ands	r3, r2
 8004824:	2b20      	cmp	r3, #32
 8004826:	d004      	beq.n	8004832 <I2C_IsErrorOccurred+0x112>
 8004828:	2327      	movs	r3, #39	; 0x27
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d092      	beq.n	8004758 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004832:	2327      	movs	r3, #39	; 0x27
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2220      	movs	r2, #32
 8004842:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2204      	movs	r2, #4
 8004848:	4313      	orrs	r3, r2
 800484a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800484c:	2327      	movs	r3, #39	; 0x27
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4013      	ands	r3, r2
 8004864:	d00c      	beq.n	8004880 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	2201      	movs	r2, #1
 800486a:	4313      	orrs	r3, r2
 800486c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2280      	movs	r2, #128	; 0x80
 8004874:	0052      	lsls	r2, r2, #1
 8004876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004878:	2327      	movs	r3, #39	; 0x27
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4013      	ands	r3, r2
 8004888:	d00c      	beq.n	80048a4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	2208      	movs	r2, #8
 800488e:	4313      	orrs	r3, r2
 8004890:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	00d2      	lsls	r2, r2, #3
 800489a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800489c:	2327      	movs	r3, #39	; 0x27
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d00c      	beq.n	80048c8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	2202      	movs	r2, #2
 80048b2:	4313      	orrs	r3, r2
 80048b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	0092      	lsls	r2, r2, #2
 80048be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048c0:	2327      	movs	r3, #39	; 0x27
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	2201      	movs	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80048c8:	2327      	movs	r3, #39	; 0x27
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01d      	beq.n	800490e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7ff fdcd 	bl	8004474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	490d      	ldr	r1, [pc, #52]	; (800491c <I2C_IsErrorOccurred+0x1fc>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2241      	movs	r2, #65	; 0x41
 80048fa:	2120      	movs	r1, #32
 80048fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2242      	movs	r2, #66	; 0x42
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800490e:	2327      	movs	r3, #39	; 0x27
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	781b      	ldrb	r3, [r3, #0]
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b00b      	add	sp, #44	; 0x2c
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	fe00e800 	.word	0xfe00e800

08004920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	0008      	movs	r0, r1
 800492a:	0011      	movs	r1, r2
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	240a      	movs	r4, #10
 8004930:	193b      	adds	r3, r7, r4
 8004932:	1c02      	adds	r2, r0, #0
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	2009      	movs	r0, #9
 8004938:	183b      	adds	r3, r7, r0
 800493a:	1c0a      	adds	r2, r1, #0
 800493c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800493e:	193b      	adds	r3, r7, r4
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	059b      	lsls	r3, r3, #22
 8004944:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004946:	183b      	adds	r3, r7, r0
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	0419      	lsls	r1, r3, #16
 800494c:	23ff      	movs	r3, #255	; 0xff
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004952:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	4313      	orrs	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496a:	0d51      	lsrs	r1, r2, #21
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	00d2      	lsls	r2, r2, #3
 8004970:	400a      	ands	r2, r1
 8004972:	4907      	ldr	r1, [pc, #28]	; (8004990 <I2C_TransferConfig+0x70>)
 8004974:	430a      	orrs	r2, r1
 8004976:	43d2      	mvns	r2, r2
 8004978:	401a      	ands	r2, r3
 800497a:	0011      	movs	r1, r2
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b007      	add	sp, #28
 800498c:	bd90      	pop	{r4, r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	03ff63ff 	.word	0x03ff63ff

08004994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2241      	movs	r2, #65	; 0x41
 80049a2:	5c9b      	ldrb	r3, [r3, r2]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d138      	bne.n	8004a1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2240      	movs	r2, #64	; 0x40
 80049ae:	5c9b      	ldrb	r3, [r3, r2]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e032      	b.n	8004a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	2101      	movs	r1, #1
 80049be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2241      	movs	r2, #65	; 0x41
 80049c4:	2124      	movs	r1, #36	; 0x24
 80049c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2101      	movs	r1, #1
 80049d4:	438a      	bics	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4911      	ldr	r1, [pc, #68]	; (8004a28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6819      	ldr	r1, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2101      	movs	r1, #1
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2241      	movs	r2, #65	; 0x41
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2240      	movs	r2, #64	; 0x40
 8004a14:	2100      	movs	r1, #0
 8004a16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	ffffefff 	.word	0xffffefff

08004a2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2241      	movs	r2, #65	; 0x41
 8004a3a:	5c9b      	ldrb	r3, [r3, r2]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d139      	bne.n	8004ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2240      	movs	r2, #64	; 0x40
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e033      	b.n	8004ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2240      	movs	r2, #64	; 0x40
 8004a54:	2101      	movs	r1, #1
 8004a56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2241      	movs	r2, #65	; 0x41
 8004a5c:	2124      	movs	r1, #36	; 0x24
 8004a5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2241      	movs	r2, #65	; 0x41
 8004aa6:	2120      	movs	r1, #32
 8004aa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2240      	movs	r2, #64	; 0x40
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e000      	b.n	8004ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
  }
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b004      	add	sp, #16
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	fffff0ff 	.word	0xfffff0ff

08004ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a19      	ldr	r2, [pc, #100]	; (8004b38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d11f      	bne.n	8004b28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ae8:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	0013      	movs	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4912      	ldr	r1, [pc, #72]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7fb fb04 	bl	8000104 <__udivsi3>
 8004afc:	0003      	movs	r3, r0
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b02:	e008      	b.n	8004b16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e001      	b.n	8004b16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e009      	b.n	8004b2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b16:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d0ed      	beq.n	8004b04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b004      	add	sp, #16
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	40007000 	.word	0x40007000
 8004b38:	fffff9ff 	.word	0xfffff9ff
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	000f4240 	.word	0x000f4240

08004b44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	23e0      	movs	r3, #224	; 0xe0
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	4013      	ands	r3, r2
}
 8004b52:	0018      	movs	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e2fe      	b.n	800516c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	4013      	ands	r3, r2
 8004b76:	d100      	bne.n	8004b7a <HAL_RCC_OscConfig+0x1e>
 8004b78:	e07c      	b.n	8004c74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7a:	4bc3      	ldr	r3, [pc, #780]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2238      	movs	r2, #56	; 0x38
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b84:	4bc0      	ldr	r3, [pc, #768]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d102      	bne.n	8004b9a <HAL_RCC_OscConfig+0x3e>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	4bb9      	ldr	r3, [pc, #740]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d062      	beq.n	8004c72 <HAL_RCC_OscConfig+0x116>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d15e      	bne.n	8004c72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e2d9      	b.n	800516c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	025b      	lsls	r3, r3, #9
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x78>
 8004bc4:	4bb0      	ldr	r3, [pc, #704]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4baf      	ldr	r3, [pc, #700]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	0249      	lsls	r1, r1, #9
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e020      	b.n	8004c16 <HAL_RCC_OscConfig+0xba>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	23a0      	movs	r3, #160	; 0xa0
 8004bda:	02db      	lsls	r3, r3, #11
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d10e      	bne.n	8004bfe <HAL_RCC_OscConfig+0xa2>
 8004be0:	4ba9      	ldr	r3, [pc, #676]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4ba8      	ldr	r3, [pc, #672]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	02c9      	lsls	r1, r1, #11
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	4ba6      	ldr	r3, [pc, #664]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4ba5      	ldr	r3, [pc, #660]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004bf4:	2180      	movs	r1, #128	; 0x80
 8004bf6:	0249      	lsls	r1, r1, #9
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e00b      	b.n	8004c16 <HAL_RCC_OscConfig+0xba>
 8004bfe:	4ba2      	ldr	r3, [pc, #648]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4ba1      	ldr	r3, [pc, #644]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c04:	49a1      	ldr	r1, [pc, #644]	; (8004e8c <HAL_RCC_OscConfig+0x330>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	4b9f      	ldr	r3, [pc, #636]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b9e      	ldr	r3, [pc, #632]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c10:	499f      	ldr	r1, [pc, #636]	; (8004e90 <HAL_RCC_OscConfig+0x334>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d014      	beq.n	8004c48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7fe fd73 	bl	8003708 <HAL_GetTick>
 8004c22:	0003      	movs	r3, r0
 8004c24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fe fd6e 	bl	8003708 <HAL_GetTick>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e298      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3a:	4b93      	ldr	r3, [pc, #588]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	4013      	ands	r3, r2
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xcc>
 8004c46:	e015      	b.n	8004c74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fe fd5e 	bl	8003708 <HAL_GetTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c52:	f7fe fd59 	bl	8003708 <HAL_GetTick>
 8004c56:	0002      	movs	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b64      	cmp	r3, #100	; 0x64
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e283      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c64:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	029b      	lsls	r3, r3, #10
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0xf6>
 8004c70:	e000      	b.n	8004c74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d100      	bne.n	8004c80 <HAL_RCC_OscConfig+0x124>
 8004c7e:	e099      	b.n	8004db4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c80:	4b81      	ldr	r3, [pc, #516]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2238      	movs	r2, #56	; 0x38
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c8a:	4b7f      	ldr	r3, [pc, #508]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	4013      	ands	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x144>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d002      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d135      	bne.n	8004d12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca6:	4b78      	ldr	r3, [pc, #480]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCC_OscConfig+0x162>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e256      	b.n	800516c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b72      	ldr	r3, [pc, #456]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4a74      	ldr	r2, [pc, #464]	; (8004e94 <HAL_RCC_OscConfig+0x338>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	021a      	lsls	r2, r3, #8
 8004cce:	4b6e      	ldr	r3, [pc, #440]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d112      	bne.n	8004d00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004cda:	4b6b      	ldr	r3, [pc, #428]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6e      	ldr	r2, [pc, #440]	; (8004e98 <HAL_RCC_OscConfig+0x33c>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	4b67      	ldr	r3, [pc, #412]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004cee:	4b66      	ldr	r3, [pc, #408]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	0adb      	lsrs	r3, r3, #11
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x340>)
 8004cfa:	40da      	lsrs	r2, r3
 8004cfc:	4b68      	ldr	r3, [pc, #416]	; (8004ea0 <HAL_RCC_OscConfig+0x344>)
 8004cfe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d00:	4b68      	ldr	r3, [pc, #416]	; (8004ea4 <HAL_RCC_OscConfig+0x348>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f7fe fca3 	bl	8003650 <HAL_InitTick>
 8004d0a:	1e03      	subs	r3, r0, #0
 8004d0c:	d051      	beq.n	8004db2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e22c      	b.n	800516c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d030      	beq.n	8004d7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004d1a:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a5e      	ldr	r2, [pc, #376]	; (8004e98 <HAL_RCC_OscConfig+0x33c>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	4b57      	ldr	r3, [pc, #348]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004d2e:	4b56      	ldr	r3, [pc, #344]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b55      	ldr	r3, [pc, #340]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d34:	2180      	movs	r1, #128	; 0x80
 8004d36:	0049      	lsls	r1, r1, #1
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fce4 	bl	8003708 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d46:	f7fe fcdf 	bl	8003708 <HAL_GetTick>
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e209      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4013      	ands	r3, r2
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d64:	4b48      	ldr	r3, [pc, #288]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <HAL_RCC_OscConfig+0x338>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	e01b      	b.n	8004db4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004d7c:	4b42      	ldr	r3, [pc, #264]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004d82:	4949      	ldr	r1, [pc, #292]	; (8004ea8 <HAL_RCC_OscConfig+0x34c>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe fcbe 	bl	8003708 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d92:	f7fe fcb9 	bl	8003708 <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e1e3      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4013      	ands	r3, r2
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x236>
 8004db0:	e000      	b.n	8004db4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2208      	movs	r2, #8
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d047      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004dbe:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2238      	movs	r2, #56	; 0x38
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b18      	cmp	r3, #24
 8004dc8:	d10a      	bne.n	8004de0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004dca:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	2202      	movs	r2, #2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d03c      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2f2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d138      	bne.n	8004e4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e1c5      	b.n	800516c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d019      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dec:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004dee:	2101      	movs	r1, #1
 8004df0:	430a      	orrs	r2, r1
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fe fc88 	bl	8003708 <HAL_GetTick>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfe:	f7fe fc83 	bl	8003708 <HAL_GetTick>
 8004e02:	0002      	movs	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e1ad      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e14:	2202      	movs	r2, #2
 8004e16:	4013      	ands	r3, r2
 8004e18:	d0f1      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2a2>
 8004e1a:	e018      	b.n	8004e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004e22:	2101      	movs	r1, #1
 8004e24:	438a      	bics	r2, r1
 8004e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fe fc6e 	bl	8003708 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fe fc69 	bl	8003708 <HAL_GetTick>
 8004e36:	0002      	movs	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e193      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d1f1      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2204      	movs	r2, #4
 8004e54:	4013      	ands	r3, r2
 8004e56:	d100      	bne.n	8004e5a <HAL_RCC_OscConfig+0x2fe>
 8004e58:	e0c6      	b.n	8004fe8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5a:	231f      	movs	r3, #31
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2238      	movs	r2, #56	; 0x38
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d11e      	bne.n	8004eac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_RCC_OscConfig+0x32c>)
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	2202      	movs	r2, #2
 8004e74:	4013      	ands	r3, r2
 8004e76:	d100      	bne.n	8004e7a <HAL_RCC_OscConfig+0x31e>
 8004e78:	e0b6      	b.n	8004fe8 <HAL_RCC_OscConfig+0x48c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d000      	beq.n	8004e84 <HAL_RCC_OscConfig+0x328>
 8004e82:	e0b1      	b.n	8004fe8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e171      	b.n	800516c <HAL_RCC_OscConfig+0x610>
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	fffeffff 	.word	0xfffeffff
 8004e90:	fffbffff 	.word	0xfffbffff
 8004e94:	ffff80ff 	.word	0xffff80ff
 8004e98:	ffffc7ff 	.word	0xffffc7ff
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eac:	4bb1      	ldr	r3, [pc, #708]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	055b      	lsls	r3, r3, #21
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x360>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x362>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4bac      	ldr	r3, [pc, #688]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec6:	4bab      	ldr	r3, [pc, #684]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	0549      	lsls	r1, r1, #21
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ed0:	4ba8      	ldr	r3, [pc, #672]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	055b      	lsls	r3, r3, #21
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004ede:	231f      	movs	r3, #31
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee6:	4ba4      	ldr	r3, [pc, #656]	; (8005178 <HAL_RCC_OscConfig+0x61c>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d11a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef2:	4ba1      	ldr	r3, [pc, #644]	; (8005178 <HAL_RCC_OscConfig+0x61c>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4ba0      	ldr	r3, [pc, #640]	; (8005178 <HAL_RCC_OscConfig+0x61c>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	0049      	lsls	r1, r1, #1
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004f00:	f7fe fc02 	bl	8003708 <HAL_GetTick>
 8004f04:	0003      	movs	r3, r0
 8004f06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fe fbfd 	bl	8003708 <HAL_GetTick>
 8004f0e:	0002      	movs	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e127      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1c:	4b96      	ldr	r3, [pc, #600]	; (8005178 <HAL_RCC_OscConfig+0x61c>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3e2>
 8004f30:	4b90      	ldr	r3, [pc, #576]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f34:	4b8f      	ldr	r3, [pc, #572]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f36:	2101      	movs	r1, #1
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCC_OscConfig+0x41c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x404>
 8004f46:	4b8b      	ldr	r3, [pc, #556]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f4a:	4b8a      	ldr	r3, [pc, #552]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f52:	4b88      	ldr	r3, [pc, #544]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f56:	4b87      	ldr	r3, [pc, #540]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f58:	2101      	movs	r1, #1
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_OscConfig+0x41c>
 8004f60:	4b84      	ldr	r3, [pc, #528]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f64:	4b83      	ldr	r3, [pc, #524]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f66:	2101      	movs	r1, #1
 8004f68:	438a      	bics	r2, r1
 8004f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f6c:	4b81      	ldr	r3, [pc, #516]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f70:	4b80      	ldr	r3, [pc, #512]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004f72:	2104      	movs	r1, #4
 8004f74:	438a      	bics	r2, r1
 8004f76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d014      	beq.n	8004faa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe fbc2 	bl	8003708 <HAL_GetTick>
 8004f84:	0003      	movs	r3, r0
 8004f86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f88:	e009      	b.n	8004f9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7fe fbbd 	bl	8003708 <HAL_GetTick>
 8004f8e:	0002      	movs	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	4a79      	ldr	r2, [pc, #484]	; (800517c <HAL_RCC_OscConfig+0x620>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0e6      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9e:	4b75      	ldr	r3, [pc, #468]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x42e>
 8004fa8:	e013      	b.n	8004fd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fe fbad 	bl	8003708 <HAL_GetTick>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fe fba8 	bl	8003708 <HAL_GetTick>
 8004fb8:	0002      	movs	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	4a6f      	ldr	r2, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x620>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e0d1      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fc8:	4b6a      	ldr	r3, [pc, #424]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004fd2:	231f      	movs	r3, #31
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b65      	ldr	r3, [pc, #404]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004fe2:	4967      	ldr	r1, [pc, #412]	; (8005180 <HAL_RCC_OscConfig+0x624>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d100      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x496>
 8004ff0:	e0bb      	b.n	800516a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff2:	4b60      	ldr	r3, [pc, #384]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2238      	movs	r2, #56	; 0x38
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d100      	bne.n	8005000 <HAL_RCC_OscConfig+0x4a4>
 8004ffe:	e07b      	b.n	80050f8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d156      	bne.n	80050b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005008:	4b5a      	ldr	r3, [pc, #360]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b59      	ldr	r3, [pc, #356]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 800500e:	495d      	ldr	r1, [pc, #372]	; (8005184 <HAL_RCC_OscConfig+0x628>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fe fb78 	bl	8003708 <HAL_GetTick>
 8005018:	0003      	movs	r3, r0
 800501a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7fe fb73 	bl	8003708 <HAL_GetTick>
 8005022:	0002      	movs	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e09d      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	049b      	lsls	r3, r3, #18
 8005038:	4013      	ands	r3, r2
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800503c:	4b4d      	ldr	r3, [pc, #308]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a51      	ldr	r2, [pc, #324]	; (8005188 <HAL_RCC_OscConfig+0x62c>)
 8005042:	4013      	ands	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	431a      	orrs	r2, r3
 800506a:	4b42      	ldr	r3, [pc, #264]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 800506c:	430a      	orrs	r2, r1
 800506e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005070:	4b40      	ldr	r3, [pc, #256]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	0449      	lsls	r1, r1, #17
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800507e:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	0549      	lsls	r1, r1, #21
 8005088:	430a      	orrs	r2, r1
 800508a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fe fb3c 	bl	8003708 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005096:	f7fe fb37 	bl	8003708 <HAL_GetTick>
 800509a:	0002      	movs	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e061      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a8:	4b32      	ldr	r3, [pc, #200]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	049b      	lsls	r3, r3, #18
 80050b0:	4013      	ands	r3, r2
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x53a>
 80050b4:	e059      	b.n	800516a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 80050bc:	4931      	ldr	r1, [pc, #196]	; (8005184 <HAL_RCC_OscConfig+0x628>)
 80050be:	400a      	ands	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fe fb21 	bl	8003708 <HAL_GetTick>
 80050c6:	0003      	movs	r3, r0
 80050c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050cc:	f7fe fb1c 	bl	8003708 <HAL_GetTick>
 80050d0:	0002      	movs	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e046      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050de:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	049b      	lsls	r3, r3, #18
 80050e6:	4013      	ands	r3, r2
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80050ea:	4b22      	ldr	r3, [pc, #136]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	4b21      	ldr	r3, [pc, #132]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 80050f0:	4926      	ldr	r1, [pc, #152]	; (800518c <HAL_RCC_OscConfig+0x630>)
 80050f2:	400a      	ands	r2, r1
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e038      	b.n	800516a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e033      	b.n	800516c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x618>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2203      	movs	r2, #3
 800510e:	401a      	ands	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	429a      	cmp	r2, r3
 8005116:	d126      	bne.n	8005166 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2270      	movs	r2, #112	; 0x70
 800511c:	401a      	ands	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11f      	bne.n	8005166 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	23fe      	movs	r3, #254	; 0xfe
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	401a      	ands	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d116      	bne.n	8005166 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	23f8      	movs	r3, #248	; 0xf8
 800513c:	039b      	lsls	r3, r3, #14
 800513e:	401a      	ands	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d10e      	bne.n	8005166 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	23e0      	movs	r3, #224	; 0xe0
 800514c:	051b      	lsls	r3, r3, #20
 800514e:	401a      	ands	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	0f5b      	lsrs	r3, r3, #29
 800515c:	075a      	lsls	r2, r3, #29
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b008      	add	sp, #32
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	40007000 	.word	0x40007000
 800517c:	00001388 	.word	0x00001388
 8005180:	efffffff 	.word	0xefffffff
 8005184:	feffffff 	.word	0xfeffffff
 8005188:	11c1808c 	.word	0x11c1808c
 800518c:	eefefffc 	.word	0xeefefffc

08005190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0e9      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2207      	movs	r2, #7
 80051aa:	4013      	ands	r3, r2
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d91e      	bls.n	80051f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b73      	ldr	r3, [pc, #460]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2207      	movs	r2, #7
 80051b8:	4393      	bics	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	4b70      	ldr	r3, [pc, #448]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051c4:	f7fe faa0 	bl	8003708 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051cc:	e009      	b.n	80051e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ce:	f7fe fa9b 	bl	8003708 <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	4a6a      	ldr	r2, [pc, #424]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0ca      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2207      	movs	r2, #7
 80051e8:	4013      	ands	r3, r2
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1ee      	bne.n	80051ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2202      	movs	r2, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d015      	beq.n	8005226 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2204      	movs	r2, #4
 8005200:	4013      	ands	r3, r2
 8005202:	d006      	beq.n	8005212 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005204:	4b60      	ldr	r3, [pc, #384]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800520a:	21e0      	movs	r1, #224	; 0xe0
 800520c:	01c9      	lsls	r1, r1, #7
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005212:	4b5d      	ldr	r3, [pc, #372]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCC_ClockConfig+0x1fc>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	4b59      	ldr	r3, [pc, #356]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	4013      	ands	r3, r2
 800522e:	d057      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005238:	4b53      	ldr	r3, [pc, #332]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	4013      	ands	r3, r2
 8005242:	d12b      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e097      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005250:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	049b      	lsls	r3, r3, #18
 8005258:	4013      	ands	r3, r2
 800525a:	d11f      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e08b      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4013      	ands	r3, r2
 8005272:	d113      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e07f      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d106      	bne.n	800528e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005280:	4b41      	ldr	r3, [pc, #260]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005284:	2202      	movs	r2, #2
 8005286:	4013      	ands	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e074      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528e:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e06d      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2207      	movs	r2, #7
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b37      	ldr	r3, [pc, #220]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fe fa2a 	bl	8003708 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b8:	e009      	b.n	80052ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ba:	f7fe fa25 	bl	8003708 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e054      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2238      	movs	r2, #56	; 0x38
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1ec      	bne.n	80052ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2207      	movs	r2, #7
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d21e      	bcs.n	800532c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2207      	movs	r2, #7
 80052f4:	4393      	bics	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005300:	f7fe fa02 	bl	8003708 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005308:	e009      	b.n	800531e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530a:	f7fe f9fd 	bl	8003708 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	4a1b      	ldr	r2, [pc, #108]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e02c      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2207      	movs	r2, #7
 8005324:	4013      	ands	r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d1ee      	bne.n	800530a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2204      	movs	r2, #4
 8005332:	4013      	ands	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_RCC_ClockConfig+0x200>)
 800533c:	4013      	ands	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800534a:	f000 f829 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 800534e:	0001      	movs	r1, r0
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	220f      	movs	r2, #15
 8005358:	401a      	ands	r2, r3
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_RCC_ClockConfig+0x204>)
 800535c:	0092      	lsls	r2, r2, #2
 800535e:	58d3      	ldr	r3, [r2, r3]
 8005360:	221f      	movs	r2, #31
 8005362:	4013      	ands	r3, r2
 8005364:	000a      	movs	r2, r1
 8005366:	40da      	lsrs	r2, r3
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_ClockConfig+0x208>)
 800536a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_ClockConfig+0x20c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0018      	movs	r0, r3
 8005372:	f7fe f96d 	bl	8003650 <HAL_InitTick>
 8005376:	0003      	movs	r3, r0
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	b004      	add	sp, #16
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40022000 	.word	0x40022000
 8005384:	00001388 	.word	0x00001388
 8005388:	40021000 	.word	0x40021000
 800538c:	fffff0ff 	.word	0xfffff0ff
 8005390:	ffff8fff 	.word	0xffff8fff
 8005394:	080095b4 	.word	0x080095b4
 8005398:	20000000 	.word	0x20000000
 800539c:	20000004 	.word	0x20000004

080053a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053a6:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2238      	movs	r2, #56	; 0x38
 80053ac:	4013      	ands	r3, r2
 80053ae:	d10f      	bne.n	80053d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	0adb      	lsrs	r3, r3, #11
 80053b6:	2207      	movs	r2, #7
 80053b8:	4013      	ands	r3, r2
 80053ba:	2201      	movs	r2, #1
 80053bc:	409a      	lsls	r2, r3
 80053be:	0013      	movs	r3, r2
 80053c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	4835      	ldr	r0, [pc, #212]	; (800549c <HAL_RCC_GetSysClockFreq+0xfc>)
 80053c6:	f7fa fe9d 	bl	8000104 <__udivsi3>
 80053ca:	0003      	movs	r3, r0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e05d      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2238      	movs	r2, #56	; 0x38
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d102      	bne.n	80053e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053dc:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e054      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e2:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2238      	movs	r2, #56	; 0x38
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d138      	bne.n	8005460 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2203      	movs	r2, #3
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	2207      	movs	r2, #7
 8005400:	4013      	ands	r3, r2
 8005402:	3301      	adds	r3, #1
 8005404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d10d      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4824      	ldr	r0, [pc, #144]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005410:	f7fa fe78 	bl	8000104 <__udivsi3>
 8005414:	0003      	movs	r3, r0
 8005416:	0019      	movs	r1, r3
 8005418:	4b1f      	ldr	r3, [pc, #124]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	227f      	movs	r2, #127	; 0x7f
 8005420:	4013      	ands	r3, r2
 8005422:	434b      	muls	r3, r1
 8005424:	617b      	str	r3, [r7, #20]
        break;
 8005426:	e00d      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	481c      	ldr	r0, [pc, #112]	; (800549c <HAL_RCC_GetSysClockFreq+0xfc>)
 800542c:	f7fa fe6a 	bl	8000104 <__udivsi3>
 8005430:	0003      	movs	r3, r0
 8005432:	0019      	movs	r1, r3
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	227f      	movs	r2, #127	; 0x7f
 800543c:	4013      	ands	r3, r2
 800543e:	434b      	muls	r3, r1
 8005440:	617b      	str	r3, [r7, #20]
        break;
 8005442:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	0f5b      	lsrs	r3, r3, #29
 800544a:	2207      	movs	r2, #7
 800544c:	4013      	ands	r3, r2
 800544e:	3301      	adds	r3, #1
 8005450:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6978      	ldr	r0, [r7, #20]
 8005456:	f7fa fe55 	bl	8000104 <__udivsi3>
 800545a:	0003      	movs	r3, r0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	e015      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2238      	movs	r2, #56	; 0x38
 8005466:	4013      	ands	r3, r2
 8005468:	2b20      	cmp	r3, #32
 800546a:	d103      	bne.n	8005474 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e00b      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2238      	movs	r2, #56	; 0x38
 800547a:	4013      	ands	r3, r2
 800547c:	2b18      	cmp	r3, #24
 800547e:	d103      	bne.n	8005488 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005480:	23fa      	movs	r3, #250	; 0xfa
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e001      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800548c:	693b      	ldr	r3, [r7, #16]
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b006      	add	sp, #24
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	40021000 	.word	0x40021000
 800549c:	00f42400 	.word	0x00f42400
 80054a0:	007a1200 	.word	0x007a1200

080054a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b02      	ldr	r3, [pc, #8]	; (80054b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	20000000 	.word	0x20000000

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054bc:	f7ff fff2 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c0:	0004      	movs	r4, r0
 80054c2:	f7ff fb3f 	bl	8004b44 <LL_RCC_GetAPB1Prescaler>
 80054c6:	0003      	movs	r3, r0
 80054c8:	0b1a      	lsrs	r2, r3, #12
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054cc:	0092      	lsls	r2, r2, #2
 80054ce:	58d3      	ldr	r3, [r2, r3]
 80054d0:	221f      	movs	r2, #31
 80054d2:	4013      	ands	r3, r2
 80054d4:	40dc      	lsrs	r4, r3
 80054d6:	0023      	movs	r3, r4
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	bdb0      	pop	{r4, r5, r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	080095f4 	.word	0x080095f4

080054e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80054ec:	2313      	movs	r3, #19
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f4:	2312      	movs	r3, #18
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	029b      	lsls	r3, r3, #10
 8005504:	4013      	ands	r3, r2
 8005506:	d100      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005508:	e0a3      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2011      	movs	r0, #17
 800550c:	183b      	adds	r3, r7, r0
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4bc3      	ldr	r3, [pc, #780]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	055b      	lsls	r3, r3, #21
 800551a:	4013      	ands	r3, r2
 800551c:	d110      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	4bc0      	ldr	r3, [pc, #768]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005522:	4bbf      	ldr	r3, [pc, #764]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0549      	lsls	r1, r1, #21
 8005528:	430a      	orrs	r2, r1
 800552a:	63da      	str	r2, [r3, #60]	; 0x3c
 800552c:	4bbc      	ldr	r3, [pc, #752]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800552e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	055b      	lsls	r3, r3, #21
 8005534:	4013      	ands	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553a:	183b      	adds	r3, r7, r0
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005540:	4bb8      	ldr	r3, [pc, #736]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4bb7      	ldr	r3, [pc, #732]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	0049      	lsls	r1, r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800554e:	f7fe f8db 	bl	8003708 <HAL_GetTick>
 8005552:	0003      	movs	r3, r0
 8005554:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005556:	e00b      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005558:	f7fe f8d6 	bl	8003708 <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d904      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005566:	2313      	movs	r3, #19
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2203      	movs	r2, #3
 800556c:	701a      	strb	r2, [r3, #0]
        break;
 800556e:	e005      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005570:	4bac      	ldr	r3, [pc, #688]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4013      	ands	r3, r2
 800557a:	d0ed      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800557c:	2313      	movs	r3, #19
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d154      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005586:	4ba6      	ldr	r3, [pc, #664]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800558a:	23c0      	movs	r3, #192	; 0xc0
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4013      	ands	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d019      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d014      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a2:	4b9f      	ldr	r3, [pc, #636]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	4aa0      	ldr	r2, [pc, #640]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b9c      	ldr	r3, [pc, #624]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055b0:	4b9b      	ldr	r3, [pc, #620]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055b2:	2180      	movs	r1, #128	; 0x80
 80055b4:	0249      	lsls	r1, r1, #9
 80055b6:	430a      	orrs	r2, r1
 80055b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ba:	4b99      	ldr	r3, [pc, #612]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055be:	4b98      	ldr	r3, [pc, #608]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c0:	499a      	ldr	r1, [pc, #616]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80055c2:	400a      	ands	r2, r1
 80055c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055c6:	4b96      	ldr	r3, [pc, #600]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2201      	movs	r2, #1
 80055d0:	4013      	ands	r3, r2
 80055d2:	d016      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fe f898 	bl	8003708 <HAL_GetTick>
 80055d8:	0003      	movs	r3, r0
 80055da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055dc:	e00c      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fe f893 	bl	8003708 <HAL_GetTick>
 80055e2:	0002      	movs	r2, r0
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	4a91      	ldr	r2, [pc, #580]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d904      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80055ee:	2313      	movs	r3, #19
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	2203      	movs	r2, #3
 80055f4:	701a      	strb	r2, [r3, #0]
            break;
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	2202      	movs	r2, #2
 80055fe:	4013      	ands	r3, r2
 8005600:	d0ed      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005602:	2313      	movs	r3, #19
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560c:	4b84      	ldr	r3, [pc, #528]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	4a85      	ldr	r2, [pc, #532]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561a:	4b81      	ldr	r3, [pc, #516]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800561c:	430a      	orrs	r2, r1
 800561e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005620:	e00c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005622:	2312      	movs	r3, #18
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2213      	movs	r2, #19
 8005628:	18ba      	adds	r2, r7, r2
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e005      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	2312      	movs	r3, #18
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	2213      	movs	r2, #19
 8005636:	18ba      	adds	r2, r7, r2
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800563c:	2311      	movs	r3, #17
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4b76      	ldr	r3, [pc, #472]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564a:	4b75      	ldr	r3, [pc, #468]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800564c:	4979      	ldr	r1, [pc, #484]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800564e:	400a      	ands	r2, r1
 8005650:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	4013      	ands	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565c:	4b70      	ldr	r3, [pc, #448]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	2203      	movs	r2, #3
 8005662:	4393      	bics	r3, r2
 8005664:	0019      	movs	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	4b6d      	ldr	r3, [pc, #436]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800566c:	430a      	orrs	r2, r1
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2202      	movs	r2, #2
 8005676:	4013      	ands	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567a:	4b69      	ldr	r3, [pc, #420]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	220c      	movs	r2, #12
 8005680:	4393      	bics	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	4b65      	ldr	r3, [pc, #404]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568a:	430a      	orrs	r2, r1
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2210      	movs	r2, #16
 8005694:	4013      	ands	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005698:	4b61      	ldr	r3, [pc, #388]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	4a66      	ldr	r2, [pc, #408]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	4b5e      	ldr	r3, [pc, #376]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056a8:	430a      	orrs	r2, r1
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056b8:	4b59      	ldr	r3, [pc, #356]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	4a5f      	ldr	r2, [pc, #380]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	4b56      	ldr	r3, [pc, #344]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4013      	ands	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056d8:	4b51      	ldr	r3, [pc, #324]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	4a58      	ldr	r2, [pc, #352]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	4b4e      	ldr	r3, [pc, #312]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056e8:	430a      	orrs	r2, r1
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2220      	movs	r2, #32
 80056f2:	4013      	ands	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	4a52      	ldr	r2, [pc, #328]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	0019      	movs	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	4b46      	ldr	r3, [pc, #280]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005706:	430a      	orrs	r2, r1
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	4013      	ands	r3, r2
 8005714:	d015      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005716:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	0899      	lsrs	r1, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	4b3f      	ldr	r3, [pc, #252]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005724:	430a      	orrs	r2, r1
 8005726:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	05db      	lsls	r3, r3, #23
 8005730:	429a      	cmp	r2, r3
 8005732:	d106      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005734:	4b3a      	ldr	r3, [pc, #232]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b39      	ldr	r3, [pc, #228]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	0249      	lsls	r1, r1, #9
 800573e:	430a      	orrs	r2, r1
 8005740:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	4013      	ands	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800574e:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	4393      	bics	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575c:	4b30      	ldr	r3, [pc, #192]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800575e:	430a      	orrs	r2, r1
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	039b      	lsls	r3, r3, #14
 800576a:	4013      	ands	r3, r2
 800576c:	d016      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800576e:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	4a35      	ldr	r2, [pc, #212]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577c:	4b28      	ldr	r3, [pc, #160]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800577e:	430a      	orrs	r2, r1
 8005780:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	03db      	lsls	r3, r3, #15
 800578a:	429a      	cmp	r2, r3
 800578c:	d106      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	4b23      	ldr	r3, [pc, #140]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	0449      	lsls	r1, r1, #17
 8005798:	430a      	orrs	r2, r1
 800579a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	03db      	lsls	r3, r3, #15
 80057a4:	4013      	ands	r3, r2
 80057a6:	d016      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	4a27      	ldr	r2, [pc, #156]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	045b      	lsls	r3, r3, #17
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80057c8:	4b15      	ldr	r3, [pc, #84]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	0449      	lsls	r1, r1, #17
 80057d2:	430a      	orrs	r2, r1
 80057d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	4013      	ands	r3, r2
 80057e0:	d016      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f2:	430a      	orrs	r2, r1
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	429a      	cmp	r2, r3
 8005800:	d106      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	4b06      	ldr	r3, [pc, #24]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005808:	2180      	movs	r1, #128	; 0x80
 800580a:	0249      	lsls	r1, r1, #9
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005810:	2312      	movs	r3, #18
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	781b      	ldrb	r3, [r3, #0]
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b006      	add	sp, #24
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
 8005828:	fffffcff 	.word	0xfffffcff
 800582c:	fffeffff 	.word	0xfffeffff
 8005830:	00001388 	.word	0x00001388
 8005834:	efffffff 	.word	0xefffffff
 8005838:	fffff3ff 	.word	0xfffff3ff
 800583c:	fff3ffff 	.word	0xfff3ffff
 8005840:	ffcfffff 	.word	0xffcfffff
 8005844:	ffffcfff 	.word	0xffffcfff
 8005848:	ffbfffff 	.word	0xffbfffff
 800584c:	feffffff 	.word	0xfeffffff
 8005850:	ffff3fff 	.word	0xffff3fff

08005854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e046      	b.n	80058f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2288      	movs	r2, #136	; 0x88
 800586a:	589b      	ldr	r3, [r3, r2]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2284      	movs	r2, #132	; 0x84
 8005874:	2100      	movs	r1, #0
 8005876:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0018      	movs	r0, r3
 800587c:	f7fd fcde 	bl	800323c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2288      	movs	r2, #136	; 0x88
 8005884:	2124      	movs	r1, #36	; 0x24
 8005886:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2101      	movs	r1, #1
 8005894:	438a      	bics	r2, r1
 8005896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	0018      	movs	r0, r3
 800589c:	f000 f830 	bl	8005900 <UART_SetConfig>
 80058a0:	0003      	movs	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e024      	b.n	80058f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 fae1 	bl	8005e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	490d      	ldr	r1, [pc, #52]	; (80058fc <HAL_UART_Init+0xa8>)
 80058c6:	400a      	ands	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	212a      	movs	r1, #42	; 0x2a
 80058d6:	438a      	bics	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2101      	movs	r1, #1
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 fb79 	bl	8005fe4 <UART_CheckIdleState>
 80058f2:	0003      	movs	r3, r0
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	ffffb7ff 	.word	0xffffb7ff

08005900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b090      	sub	sp, #64	; 0x40
 8005904:	af00      	add	r7, sp, #0
 8005906:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005908:	231a      	movs	r3, #26
 800590a:	2220      	movs	r2, #32
 800590c:	189b      	adds	r3, r3, r2
 800590e:	19db      	adds	r3, r3, r7
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	431a      	orrs	r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	431a      	orrs	r2, r3
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	4313      	orrs	r3, r2
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4aaf      	ldr	r2, [pc, #700]	; (8005bf0 <UART_SetConfig+0x2f0>)
 8005934:	4013      	ands	r3, r2
 8005936:	0019      	movs	r1, r3
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	430b      	orrs	r3, r1
 8005940:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4aaa      	ldr	r2, [pc, #680]	; (8005bf4 <UART_SetConfig+0x2f4>)
 800594a:	4013      	ands	r3, r2
 800594c:	0018      	movs	r0, r3
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	0003      	movs	r3, r0
 8005958:	430b      	orrs	r3, r1
 800595a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4aa4      	ldr	r2, [pc, #656]	; (8005bf8 <UART_SetConfig+0x2f8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005972:	4313      	orrs	r3, r2
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a9f      	ldr	r2, [pc, #636]	; (8005bfc <UART_SetConfig+0x2fc>)
 800597e:	4013      	ands	r3, r2
 8005980:	0019      	movs	r1, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	430b      	orrs	r3, r1
 800598a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	220f      	movs	r2, #15
 8005994:	4393      	bics	r3, r2
 8005996:	0018      	movs	r0, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	0003      	movs	r3, r0
 80059a2:	430b      	orrs	r3, r1
 80059a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a95      	ldr	r2, [pc, #596]	; (8005c00 <UART_SetConfig+0x300>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d131      	bne.n	8005a14 <UART_SetConfig+0x114>
 80059b0:	4b94      	ldr	r3, [pc, #592]	; (8005c04 <UART_SetConfig+0x304>)
 80059b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b4:	2203      	movs	r2, #3
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d01d      	beq.n	80059f8 <UART_SetConfig+0xf8>
 80059bc:	d823      	bhi.n	8005a06 <UART_SetConfig+0x106>
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d00c      	beq.n	80059dc <UART_SetConfig+0xdc>
 80059c2:	d820      	bhi.n	8005a06 <UART_SetConfig+0x106>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <UART_SetConfig+0xce>
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d00e      	beq.n	80059ea <UART_SetConfig+0xea>
 80059cc:	e01b      	b.n	8005a06 <UART_SetConfig+0x106>
 80059ce:	231b      	movs	r3, #27
 80059d0:	2220      	movs	r2, #32
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	19db      	adds	r3, r3, r7
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e0b4      	b.n	8005b46 <UART_SetConfig+0x246>
 80059dc:	231b      	movs	r3, #27
 80059de:	2220      	movs	r2, #32
 80059e0:	189b      	adds	r3, r3, r2
 80059e2:	19db      	adds	r3, r3, r7
 80059e4:	2202      	movs	r2, #2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e0ad      	b.n	8005b46 <UART_SetConfig+0x246>
 80059ea:	231b      	movs	r3, #27
 80059ec:	2220      	movs	r2, #32
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	19db      	adds	r3, r3, r7
 80059f2:	2204      	movs	r2, #4
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e0a6      	b.n	8005b46 <UART_SetConfig+0x246>
 80059f8:	231b      	movs	r3, #27
 80059fa:	2220      	movs	r2, #32
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	19db      	adds	r3, r3, r7
 8005a00:	2208      	movs	r2, #8
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e09f      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a06:	231b      	movs	r3, #27
 8005a08:	2220      	movs	r2, #32
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	19db      	adds	r3, r3, r7
 8005a0e:	2210      	movs	r2, #16
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e098      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7b      	ldr	r2, [pc, #492]	; (8005c08 <UART_SetConfig+0x308>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d131      	bne.n	8005a82 <UART_SetConfig+0x182>
 8005a1e:	4b79      	ldr	r3, [pc, #484]	; (8005c04 <UART_SetConfig+0x304>)
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	220c      	movs	r2, #12
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d01d      	beq.n	8005a66 <UART_SetConfig+0x166>
 8005a2a:	d823      	bhi.n	8005a74 <UART_SetConfig+0x174>
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d00c      	beq.n	8005a4a <UART_SetConfig+0x14a>
 8005a30:	d820      	bhi.n	8005a74 <UART_SetConfig+0x174>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <UART_SetConfig+0x13c>
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d00e      	beq.n	8005a58 <UART_SetConfig+0x158>
 8005a3a:	e01b      	b.n	8005a74 <UART_SetConfig+0x174>
 8005a3c:	231b      	movs	r3, #27
 8005a3e:	2220      	movs	r2, #32
 8005a40:	189b      	adds	r3, r3, r2
 8005a42:	19db      	adds	r3, r3, r7
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e07d      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a4a:	231b      	movs	r3, #27
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	19db      	adds	r3, r3, r7
 8005a52:	2202      	movs	r2, #2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e076      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a58:	231b      	movs	r3, #27
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	189b      	adds	r3, r3, r2
 8005a5e:	19db      	adds	r3, r3, r7
 8005a60:	2204      	movs	r2, #4
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e06f      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a66:	231b      	movs	r3, #27
 8005a68:	2220      	movs	r2, #32
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	19db      	adds	r3, r3, r7
 8005a6e:	2208      	movs	r2, #8
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e068      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a74:	231b      	movs	r3, #27
 8005a76:	2220      	movs	r2, #32
 8005a78:	189b      	adds	r3, r3, r2
 8005a7a:	19db      	adds	r3, r3, r7
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e061      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a61      	ldr	r2, [pc, #388]	; (8005c0c <UART_SetConfig+0x30c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d106      	bne.n	8005a9a <UART_SetConfig+0x19a>
 8005a8c:	231b      	movs	r3, #27
 8005a8e:	2220      	movs	r2, #32
 8005a90:	189b      	adds	r3, r3, r2
 8005a92:	19db      	adds	r3, r3, r7
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e055      	b.n	8005b46 <UART_SetConfig+0x246>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <UART_SetConfig+0x310>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d106      	bne.n	8005ab2 <UART_SetConfig+0x1b2>
 8005aa4:	231b      	movs	r3, #27
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	19db      	adds	r3, r3, r7
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e049      	b.n	8005b46 <UART_SetConfig+0x246>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a50      	ldr	r2, [pc, #320]	; (8005bf8 <UART_SetConfig+0x2f8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d13e      	bne.n	8005b3a <UART_SetConfig+0x23a>
 8005abc:	4b51      	ldr	r3, [pc, #324]	; (8005c04 <UART_SetConfig+0x304>)
 8005abe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac0:	23c0      	movs	r3, #192	; 0xc0
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	22c0      	movs	r2, #192	; 0xc0
 8005ac8:	0112      	lsls	r2, r2, #4
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d027      	beq.n	8005b1e <UART_SetConfig+0x21e>
 8005ace:	22c0      	movs	r2, #192	; 0xc0
 8005ad0:	0112      	lsls	r2, r2, #4
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d82a      	bhi.n	8005b2c <UART_SetConfig+0x22c>
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	0112      	lsls	r2, r2, #4
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d011      	beq.n	8005b02 <UART_SetConfig+0x202>
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d822      	bhi.n	8005b2c <UART_SetConfig+0x22c>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <UART_SetConfig+0x1f4>
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	00d2      	lsls	r2, r2, #3
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <UART_SetConfig+0x210>
 8005af2:	e01b      	b.n	8005b2c <UART_SetConfig+0x22c>
 8005af4:	231b      	movs	r3, #27
 8005af6:	2220      	movs	r2, #32
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	19db      	adds	r3, r3, r7
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e021      	b.n	8005b46 <UART_SetConfig+0x246>
 8005b02:	231b      	movs	r3, #27
 8005b04:	2220      	movs	r2, #32
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	19db      	adds	r3, r3, r7
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e01a      	b.n	8005b46 <UART_SetConfig+0x246>
 8005b10:	231b      	movs	r3, #27
 8005b12:	2220      	movs	r2, #32
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	2204      	movs	r2, #4
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e013      	b.n	8005b46 <UART_SetConfig+0x246>
 8005b1e:	231b      	movs	r3, #27
 8005b20:	2220      	movs	r2, #32
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	19db      	adds	r3, r3, r7
 8005b26:	2208      	movs	r2, #8
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e00c      	b.n	8005b46 <UART_SetConfig+0x246>
 8005b2c:	231b      	movs	r3, #27
 8005b2e:	2220      	movs	r2, #32
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	19db      	adds	r3, r3, r7
 8005b34:	2210      	movs	r2, #16
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e005      	b.n	8005b46 <UART_SetConfig+0x246>
 8005b3a:	231b      	movs	r3, #27
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	19db      	adds	r3, r3, r7
 8005b42:	2210      	movs	r2, #16
 8005b44:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <UART_SetConfig+0x2f8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d000      	beq.n	8005b52 <UART_SetConfig+0x252>
 8005b50:	e0a9      	b.n	8005ca6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b52:	231b      	movs	r3, #27
 8005b54:	2220      	movs	r2, #32
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	19db      	adds	r3, r3, r7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d015      	beq.n	8005b8c <UART_SetConfig+0x28c>
 8005b60:	dc18      	bgt.n	8005b94 <UART_SetConfig+0x294>
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d00d      	beq.n	8005b82 <UART_SetConfig+0x282>
 8005b66:	dc15      	bgt.n	8005b94 <UART_SetConfig+0x294>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <UART_SetConfig+0x272>
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d005      	beq.n	8005b7c <UART_SetConfig+0x27c>
 8005b70:	e010      	b.n	8005b94 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b72:	f7ff fca1 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8005b76:	0003      	movs	r3, r0
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b7a:	e014      	b.n	8005ba6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b7c:	4b25      	ldr	r3, [pc, #148]	; (8005c14 <UART_SetConfig+0x314>)
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b80:	e011      	b.n	8005ba6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b82:	f7ff fc0d 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005b86:	0003      	movs	r3, r0
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b8a:	e00c      	b.n	8005ba6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b92:	e008      	b.n	8005ba6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b98:	231a      	movs	r3, #26
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	189b      	adds	r3, r3, r2
 8005b9e:	19db      	adds	r3, r3, r7
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
        break;
 8005ba4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d100      	bne.n	8005bae <UART_SetConfig+0x2ae>
 8005bac:	e14b      	b.n	8005e46 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bb2:	4b19      	ldr	r3, [pc, #100]	; (8005c18 <UART_SetConfig+0x318>)
 8005bb4:	0052      	lsls	r2, r2, #1
 8005bb6:	5ad3      	ldrh	r3, [r2, r3]
 8005bb8:	0019      	movs	r1, r3
 8005bba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bbc:	f7fa faa2 	bl	8000104 <__udivsi3>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	0013      	movs	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d305      	bcc.n	8005be0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d91d      	bls.n	8005c1c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005be0:	231a      	movs	r3, #26
 8005be2:	2220      	movs	r2, #32
 8005be4:	189b      	adds	r3, r3, r2
 8005be6:	19db      	adds	r3, r3, r7
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e12b      	b.n	8005e46 <UART_SetConfig+0x546>
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	cfff69f3 	.word	0xcfff69f3
 8005bf4:	ffffcfff 	.word	0xffffcfff
 8005bf8:	40008000 	.word	0x40008000
 8005bfc:	11fff4ff 	.word	0x11fff4ff
 8005c00:	40013800 	.word	0x40013800
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40004400 	.word	0x40004400
 8005c0c:	40004800 	.word	0x40004800
 8005c10:	40004c00 	.word	0x40004c00
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	08009614 	.word	0x08009614
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c28:	4b92      	ldr	r3, [pc, #584]	; (8005e74 <UART_SetConfig+0x574>)
 8005c2a:	0052      	lsls	r2, r2, #1
 8005c2c:	5ad3      	ldrh	r3, [r2, r3]
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	69b8      	ldr	r0, [r7, #24]
 8005c3a:	69f9      	ldr	r1, [r7, #28]
 8005c3c:	f7fa fc50 	bl	80004e0 <__aeabi_uldivmod>
 8005c40:	0002      	movs	r2, r0
 8005c42:	000b      	movs	r3, r1
 8005c44:	0e11      	lsrs	r1, r2, #24
 8005c46:	021d      	lsls	r5, r3, #8
 8005c48:	430d      	orrs	r5, r1
 8005c4a:	0214      	lsls	r4, r2, #8
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68b8      	ldr	r0, [r7, #8]
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	1900      	adds	r0, r0, r4
 8005c5e:	4169      	adcs	r1, r5
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f7fa fc37 	bl	80004e0 <__aeabi_uldivmod>
 8005c72:	0002      	movs	r2, r0
 8005c74:	000b      	movs	r3, r1
 8005c76:	0013      	movs	r3, r2
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7c:	23c0      	movs	r3, #192	; 0xc0
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d309      	bcc.n	8005c98 <UART_SetConfig+0x398>
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	035b      	lsls	r3, r3, #13
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d204      	bcs.n	8005c98 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e0d6      	b.n	8005e46 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005c98:	231a      	movs	r3, #26
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	189b      	adds	r3, r3, r2
 8005c9e:	19db      	adds	r3, r3, r7
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e0cf      	b.n	8005e46 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d000      	beq.n	8005cb4 <UART_SetConfig+0x3b4>
 8005cb2:	e070      	b.n	8005d96 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005cb4:	231b      	movs	r3, #27
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	189b      	adds	r3, r3, r2
 8005cba:	19db      	adds	r3, r3, r7
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d015      	beq.n	8005cee <UART_SetConfig+0x3ee>
 8005cc2:	dc18      	bgt.n	8005cf6 <UART_SetConfig+0x3f6>
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d00d      	beq.n	8005ce4 <UART_SetConfig+0x3e4>
 8005cc8:	dc15      	bgt.n	8005cf6 <UART_SetConfig+0x3f6>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <UART_SetConfig+0x3d4>
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d005      	beq.n	8005cde <UART_SetConfig+0x3de>
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd4:	f7ff fbf0 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cdc:	e014      	b.n	8005d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cde:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <UART_SetConfig+0x578>)
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ce2:	e011      	b.n	8005d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce4:	f7ff fb5c 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cec:	e00c      	b.n	8005d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf4:	e008      	b.n	8005d08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005cfa:	231a      	movs	r3, #26
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	19db      	adds	r3, r3, r7
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
        break;
 8005d06:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d100      	bne.n	8005d10 <UART_SetConfig+0x410>
 8005d0e:	e09a      	b.n	8005e46 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d14:	4b57      	ldr	r3, [pc, #348]	; (8005e74 <UART_SetConfig+0x574>)
 8005d16:	0052      	lsls	r2, r2, #1
 8005d18:	5ad3      	ldrh	r3, [r2, r3]
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d1e:	f7fa f9f1 	bl	8000104 <__udivsi3>
 8005d22:	0003      	movs	r3, r0
 8005d24:	005a      	lsls	r2, r3, #1
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	18d2      	adds	r2, r2, r3
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	0019      	movs	r1, r3
 8005d34:	0010      	movs	r0, r2
 8005d36:	f7fa f9e5 	bl	8000104 <__udivsi3>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	2b0f      	cmp	r3, #15
 8005d42:	d921      	bls.n	8005d88 <UART_SetConfig+0x488>
 8005d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	025b      	lsls	r3, r3, #9
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d21c      	bcs.n	8005d88 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	200e      	movs	r0, #14
 8005d54:	2420      	movs	r4, #32
 8005d56:	1903      	adds	r3, r0, r4
 8005d58:	19db      	adds	r3, r3, r7
 8005d5a:	210f      	movs	r1, #15
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2207      	movs	r2, #7
 8005d68:	4013      	ands	r3, r2
 8005d6a:	b299      	uxth	r1, r3
 8005d6c:	1903      	adds	r3, r0, r4
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	1902      	adds	r2, r0, r4
 8005d72:	19d2      	adds	r2, r2, r7
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	1902      	adds	r2, r0, r4
 8005d80:	19d2      	adds	r2, r2, r7
 8005d82:	8812      	ldrh	r2, [r2, #0]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	e05e      	b.n	8005e46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005d88:	231a      	movs	r3, #26
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	189b      	adds	r3, r3, r2
 8005d8e:	19db      	adds	r3, r3, r7
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e057      	b.n	8005e46 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d96:	231b      	movs	r3, #27
 8005d98:	2220      	movs	r2, #32
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	19db      	adds	r3, r3, r7
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d015      	beq.n	8005dd0 <UART_SetConfig+0x4d0>
 8005da4:	dc18      	bgt.n	8005dd8 <UART_SetConfig+0x4d8>
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d00d      	beq.n	8005dc6 <UART_SetConfig+0x4c6>
 8005daa:	dc15      	bgt.n	8005dd8 <UART_SetConfig+0x4d8>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <UART_SetConfig+0x4b6>
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d005      	beq.n	8005dc0 <UART_SetConfig+0x4c0>
 8005db4:	e010      	b.n	8005dd8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7ff fb7f 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dbe:	e014      	b.n	8005dea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc0:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <UART_SetConfig+0x578>)
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc4:	e011      	b.n	8005dea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7ff faeb 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dce:	e00c      	b.n	8005dea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dd6:	e008      	b.n	8005dea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005ddc:	231a      	movs	r3, #26
 8005dde:	2220      	movs	r2, #32
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	19db      	adds	r3, r3, r7
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
        break;
 8005de8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02a      	beq.n	8005e46 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df4:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <UART_SetConfig+0x574>)
 8005df6:	0052      	lsls	r2, r2, #1
 8005df8:	5ad3      	ldrh	r3, [r2, r3]
 8005dfa:	0019      	movs	r1, r3
 8005dfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dfe:	f7fa f981 	bl	8000104 <__udivsi3>
 8005e02:	0003      	movs	r3, r0
 8005e04:	001a      	movs	r2, r3
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	18d2      	adds	r2, r2, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	0019      	movs	r1, r3
 8005e14:	0010      	movs	r0, r2
 8005e16:	f7fa f975 	bl	8000104 <__udivsi3>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	2b0f      	cmp	r3, #15
 8005e22:	d90a      	bls.n	8005e3a <UART_SetConfig+0x53a>
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	025b      	lsls	r3, r3, #9
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d205      	bcs.n	8005e3a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60da      	str	r2, [r3, #12]
 8005e38:	e005      	b.n	8005e46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3a:	231a      	movs	r3, #26
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	189b      	adds	r3, r3, r2
 8005e40:	19db      	adds	r3, r3, r7
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	226a      	movs	r2, #106	; 0x6a
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2268      	movs	r2, #104	; 0x68
 8005e52:	2101      	movs	r1, #1
 8005e54:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	2200      	movs	r2, #0
 8005e5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	2200      	movs	r2, #0
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e62:	231a      	movs	r3, #26
 8005e64:	2220      	movs	r2, #32
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	19db      	adds	r3, r3, r7
 8005e6a:	781b      	ldrb	r3, [r3, #0]
}
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b010      	add	sp, #64	; 0x40
 8005e72:	bdb0      	pop	{r4, r5, r7, pc}
 8005e74:	08009614 	.word	0x08009614
 8005e78:	00f42400 	.word	0x00f42400

08005e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4a4a      	ldr	r2, [pc, #296]	; (8005fc0 <UART_AdvFeatureConfig+0x144>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	2202      	movs	r2, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a43      	ldr	r2, [pc, #268]	; (8005fc4 <UART_AdvFeatureConfig+0x148>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	0019      	movs	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	2204      	movs	r2, #4
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a3b      	ldr	r2, [pc, #236]	; (8005fc8 <UART_AdvFeatureConfig+0x14c>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	0019      	movs	r1, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	2208      	movs	r2, #8
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4a34      	ldr	r2, [pc, #208]	; (8005fcc <UART_AdvFeatureConfig+0x150>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	0019      	movs	r1, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	2210      	movs	r2, #16
 8005f12:	4013      	ands	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <UART_AdvFeatureConfig+0x154>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	0019      	movs	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	2220      	movs	r2, #32
 8005f34:	4013      	ands	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <UART_AdvFeatureConfig+0x158>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	0019      	movs	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2240      	movs	r2, #64	; 0x40
 8005f56:	4013      	ands	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <UART_AdvFeatureConfig+0x15c>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	0019      	movs	r1, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	035b      	lsls	r3, r3, #13
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d10b      	bne.n	8005f96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <UART_AdvFeatureConfig+0x160>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a0e      	ldr	r2, [pc, #56]	; (8005fe0 <UART_AdvFeatureConfig+0x164>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	0019      	movs	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	fffdffff 	.word	0xfffdffff
 8005fc4:	fffeffff 	.word	0xfffeffff
 8005fc8:	fffbffff 	.word	0xfffbffff
 8005fcc:	ffff7fff 	.word	0xffff7fff
 8005fd0:	ffffefff 	.word	0xffffefff
 8005fd4:	ffffdfff 	.word	0xffffdfff
 8005fd8:	ffefffff 	.word	0xffefffff
 8005fdc:	ff9fffff 	.word	0xff9fffff
 8005fe0:	fff7ffff 	.word	0xfff7ffff

08005fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2290      	movs	r2, #144	; 0x90
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff4:	f7fd fb88 	bl	8003708 <HAL_GetTick>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2208      	movs	r2, #8
 8006004:	4013      	ands	r3, r2
 8006006:	2b08      	cmp	r3, #8
 8006008:	d10c      	bne.n	8006024 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	0391      	lsls	r1, r2, #14
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4a1a      	ldr	r2, [pc, #104]	; (800607c <UART_CheckIdleState+0x98>)
 8006014:	9200      	str	r2, [sp, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f832 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d001      	beq.n	8006024 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e026      	b.n	8006072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2204      	movs	r2, #4
 800602c:	4013      	ands	r3, r2
 800602e:	2b04      	cmp	r3, #4
 8006030:	d10c      	bne.n	800604c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2280      	movs	r2, #128	; 0x80
 8006036:	03d1      	lsls	r1, r2, #15
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4a10      	ldr	r2, [pc, #64]	; (800607c <UART_CheckIdleState+0x98>)
 800603c:	9200      	str	r2, [sp, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	f000 f81e 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8006044:	1e03      	subs	r3, r0, #0
 8006046:	d001      	beq.n	800604c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e012      	b.n	8006072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2288      	movs	r2, #136	; 0x88
 8006050:	2120      	movs	r1, #32
 8006052:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	228c      	movs	r2, #140	; 0x8c
 8006058:	2120      	movs	r1, #32
 800605a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2284      	movs	r2, #132	; 0x84
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b004      	add	sp, #16
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	01ffffff 	.word	0x01ffffff

08006080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b094      	sub	sp, #80	; 0x50
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	e0a7      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006094:	3301      	adds	r3, #1
 8006096:	d100      	bne.n	800609a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006098:	e0a3      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fd fb35 	bl	8003708 <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d13f      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b0:	f3ef 8310 	mrs	r3, PRIMASK
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060b8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ba:	2301      	movs	r3, #1
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	f383 8810 	msr	PRIMASK, r3
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	494e      	ldr	r1, [pc, #312]	; (800620c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060d2:	400a      	ands	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f383 8810 	msr	PRIMASK, r3
}
 80060e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e2:	f3ef 8310 	mrs	r3, PRIMASK
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	643b      	str	r3, [r7, #64]	; 0x40
 80060ec:	2301      	movs	r3, #1
 80060ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f383 8810 	msr	PRIMASK, r3
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	438a      	bics	r2, r1
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610e:	f383 8810 	msr	PRIMASK, r3
}
 8006112:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2288      	movs	r2, #136	; 0x88
 8006118:	2120      	movs	r1, #32
 800611a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	228c      	movs	r2, #140	; 0x8c
 8006120:	2120      	movs	r1, #32
 8006122:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2284      	movs	r2, #132	; 0x84
 8006128:	2100      	movs	r1, #0
 800612a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e069      	b.n	8006204 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2204      	movs	r2, #4
 8006138:	4013      	ands	r3, r2
 800613a:	d052      	beq.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	401a      	ands	r2, r3
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	429a      	cmp	r2, r3
 800614e:	d148      	bne.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2280      	movs	r2, #128	; 0x80
 8006156:	0112      	lsls	r2, r2, #4
 8006158:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615a:	f3ef 8310 	mrs	r3, PRIMASK
 800615e:	613b      	str	r3, [r7, #16]
  return(result);
 8006160:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f383 8810 	msr	PRIMASK, r3
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4924      	ldr	r1, [pc, #144]	; (800620c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800617c:	400a      	ands	r2, r1
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f383 8810 	msr	PRIMASK, r3
}
 800618a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618c:	f3ef 8310 	mrs	r3, PRIMASK
 8006190:	61fb      	str	r3, [r7, #28]
  return(result);
 8006192:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	64bb      	str	r3, [r7, #72]	; 0x48
 8006196:	2301      	movs	r3, #1
 8006198:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	438a      	bics	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]
 80061b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	f383 8810 	msr	PRIMASK, r3
}
 80061bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2288      	movs	r2, #136	; 0x88
 80061c2:	2120      	movs	r1, #32
 80061c4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	228c      	movs	r2, #140	; 0x8c
 80061ca:	2120      	movs	r1, #32
 80061cc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2290      	movs	r2, #144	; 0x90
 80061d2:	2120      	movs	r1, #32
 80061d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2284      	movs	r2, #132	; 0x84
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e010      	b.n	8006204 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	425a      	negs	r2, r3
 80061f2:	4153      	adcs	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	001a      	movs	r2, r3
 80061f8:	1dfb      	adds	r3, r7, #7
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d100      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x182>
 8006200:	e747      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b014      	add	sp, #80	; 0x50
 800620a:	bd80      	pop	{r7, pc}
 800620c:	fffffe5f 	.word	0xfffffe5f

08006210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2284      	movs	r2, #132	; 0x84
 800621c:	5c9b      	ldrb	r3, [r3, r2]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_UARTEx_DisableFifoMode+0x16>
 8006222:	2302      	movs	r3, #2
 8006224:	e027      	b.n	8006276 <HAL_UARTEx_DisableFifoMode+0x66>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2284      	movs	r2, #132	; 0x84
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2288      	movs	r2, #136	; 0x88
 8006232:	2124      	movs	r1, #36	; 0x24
 8006234:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2101      	movs	r1, #1
 800624a:	438a      	bics	r2, r1
 800624c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a0b      	ldr	r2, [pc, #44]	; (8006280 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006252:	4013      	ands	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2288      	movs	r2, #136	; 0x88
 8006268:	2120      	movs	r1, #32
 800626a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2284      	movs	r2, #132	; 0x84
 8006270:	2100      	movs	r1, #0
 8006272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	0018      	movs	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	b004      	add	sp, #16
 800627c:	bd80      	pop	{r7, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	dfffffff 	.word	0xdfffffff

08006284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2284      	movs	r2, #132	; 0x84
 8006292:	5c9b      	ldrb	r3, [r3, r2]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e02e      	b.n	80062fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2284      	movs	r2, #132	; 0x84
 80062a0:	2101      	movs	r1, #1
 80062a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2288      	movs	r2, #136	; 0x88
 80062a8:	2124      	movs	r1, #36	; 0x24
 80062aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2101      	movs	r1, #1
 80062c0:	438a      	bics	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	08d9      	lsrs	r1, r3, #3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 f854 	bl	8006388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2288      	movs	r2, #136	; 0x88
 80062ec:	2120      	movs	r1, #32
 80062ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2284      	movs	r2, #132	; 0x84
 80062f4:	2100      	movs	r1, #0
 80062f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2284      	movs	r2, #132	; 0x84
 8006312:	5c9b      	ldrb	r3, [r3, r2]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e02f      	b.n	800637c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2284      	movs	r2, #132	; 0x84
 8006320:	2101      	movs	r1, #1
 8006322:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2288      	movs	r2, #136	; 0x88
 8006328:	2124      	movs	r1, #36	; 0x24
 800632a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	438a      	bics	r2, r1
 8006342:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800634c:	4013      	ands	r3, r2
 800634e:	0019      	movs	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 f813 	bl	8006388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2288      	movs	r2, #136	; 0x88
 800636e:	2120      	movs	r1, #32
 8006370:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2284      	movs	r2, #132	; 0x84
 8006376:	2100      	movs	r1, #0
 8006378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	0018      	movs	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	b004      	add	sp, #16
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f1ffffff 	.word	0xf1ffffff

08006388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	226a      	movs	r2, #106	; 0x6a
 800639c:	2101      	movs	r1, #1
 800639e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2268      	movs	r2, #104	; 0x68
 80063a4:	2101      	movs	r1, #1
 80063a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a8:	e043      	b.n	8006432 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063aa:	260f      	movs	r6, #15
 80063ac:	19bb      	adds	r3, r7, r6
 80063ae:	2208      	movs	r2, #8
 80063b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063b2:	200e      	movs	r0, #14
 80063b4:	183b      	adds	r3, r7, r0
 80063b6:	2208      	movs	r2, #8
 80063b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0e5b      	lsrs	r3, r3, #25
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	240d      	movs	r4, #13
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	2107      	movs	r1, #7
 80063ca:	400a      	ands	r2, r1
 80063cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	0f5b      	lsrs	r3, r3, #29
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	250c      	movs	r5, #12
 80063da:	197b      	adds	r3, r7, r5
 80063dc:	2107      	movs	r1, #7
 80063de:	400a      	ands	r2, r1
 80063e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	197a      	adds	r2, r7, r5
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	4914      	ldr	r1, [pc, #80]	; (800643c <UARTEx_SetNbDataToProcess+0xb4>)
 80063ec:	5c8a      	ldrb	r2, [r1, r2]
 80063ee:	435a      	muls	r2, r3
 80063f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063f2:	197b      	adds	r3, r7, r5
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4a12      	ldr	r2, [pc, #72]	; (8006440 <UARTEx_SetNbDataToProcess+0xb8>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063fa:	0019      	movs	r1, r3
 80063fc:	f7f9 ff0c 	bl	8000218 <__divsi3>
 8006400:	0003      	movs	r3, r0
 8006402:	b299      	uxth	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	226a      	movs	r2, #106	; 0x6a
 8006408:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800640a:	19bb      	adds	r3, r7, r6
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	193a      	adds	r2, r7, r4
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	490a      	ldr	r1, [pc, #40]	; (800643c <UARTEx_SetNbDataToProcess+0xb4>)
 8006414:	5c8a      	ldrb	r2, [r1, r2]
 8006416:	435a      	muls	r2, r3
 8006418:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800641a:	193b      	adds	r3, r7, r4
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	4a08      	ldr	r2, [pc, #32]	; (8006440 <UARTEx_SetNbDataToProcess+0xb8>)
 8006420:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006422:	0019      	movs	r1, r3
 8006424:	f7f9 fef8 	bl	8000218 <__divsi3>
 8006428:	0003      	movs	r3, r0
 800642a:	b299      	uxth	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2268      	movs	r2, #104	; 0x68
 8006430:	5299      	strh	r1, [r3, r2]
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b005      	add	sp, #20
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	0800962c 	.word	0x0800962c
 8006440:	08009634 	.word	0x08009634

08006444 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	240a      	movs	r4, #10
 8006450:	193b      	adds	r3, r7, r4
 8006452:	1c0a      	adds	r2, r1, #0
 8006454:	801a      	strh	r2, [r3, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	uint8_t status = 0;
 8006456:	2017      	movs	r0, #23
 8006458:	183b      	adds	r3, r7, r0
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800645e:	0021      	movs	r1, r4
 8006460:	187b      	adds	r3, r7, r1
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	b29b      	uxth	r3, r3
 8006468:	b2da      	uxtb	r2, r3
 800646a:	2414      	movs	r4, #20
 800646c:	193b      	adds	r3, r7, r4
 800646e:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8006470:	187b      	adds	r3, r7, r1
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	0026      	movs	r6, r4
 8006478:	193b      	adds	r3, r7, r4
 800647a:	705a      	strb	r2, [r3, #1]
	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 2, 100);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8819      	ldrh	r1, [r3, #0]
 8006480:	0005      	movs	r5, r0
 8006482:	197c      	adds	r4, r7, r5
 8006484:	19ba      	adds	r2, r7, r6
 8006486:	480f      	ldr	r0, [pc, #60]	; (80064c4 <RdByte+0x80>)
 8006488:	2364      	movs	r3, #100	; 0x64
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2302      	movs	r3, #2
 800648e:	f7fd fc4f 	bl	8003d30 <HAL_I2C_Master_Transmit>
 8006492:	0003      	movs	r3, r0
 8006494:	7023      	strb	r3, [r4, #0]
	status = HAL_I2C_Master_Receive(&hi2c1, (p_platform->address), data_read, 1, 100);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8819      	ldrh	r1, [r3, #0]
 800649a:	197c      	adds	r4, r7, r5
 800649c:	2610      	movs	r6, #16
 800649e:	19ba      	adds	r2, r7, r6
 80064a0:	4808      	ldr	r0, [pc, #32]	; (80064c4 <RdByte+0x80>)
 80064a2:	2364      	movs	r3, #100	; 0x64
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	2301      	movs	r3, #1
 80064a8:	f7fd fd4a 	bl	8003f40 <HAL_I2C_Master_Receive>
 80064ac:	0003      	movs	r3, r0
 80064ae:	7023      	strb	r3, [r4, #0]
	*p_value = data_read[0];
 80064b0:	19bb      	adds	r3, r7, r6
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");

	return status;
 80064b8:	197b      	adds	r3, r7, r5
 80064ba:	781b      	ldrb	r3, [r3, #0]
}
 80064bc:	0018      	movs	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	b007      	add	sp, #28
 80064c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c4:	2000008c 	.word	0x2000008c

080064c8 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80064c8:	b5b0      	push	{r4, r5, r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	0008      	movs	r0, r1
 80064d2:	0011      	movs	r1, r2
 80064d4:	1cbb      	adds	r3, r7, #2
 80064d6:	1c02      	adds	r2, r0, #0
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	1c7b      	adds	r3, r7, #1
 80064dc:	1c0a      	adds	r2, r1, #0
 80064de:	701a      	strb	r2, [r3, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	uint8_t data_write[3];
	uint8_t status = 0;
 80064e0:	240f      	movs	r4, #15
 80064e2:	193b      	adds	r3, r7, r4
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80064e8:	1cbb      	adds	r3, r7, #2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	0a1b      	lsrs	r3, r3, #8
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	200c      	movs	r0, #12
 80064f4:	183b      	adds	r3, r7, r0
 80064f6:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 80064f8:	1cbb      	adds	r3, r7, #2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	183b      	adds	r3, r7, r0
 8006500:	705a      	strb	r2, [r3, #1]
	data_write[2] = value & 0xFF;
 8006502:	183b      	adds	r3, r7, r0
 8006504:	1c7a      	adds	r2, r7, #1
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	709a      	strb	r2, [r3, #2]
//	status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress, I2C_MEMADD_SIZE_16BIT, &value);
	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 3, 100);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8819      	ldrh	r1, [r3, #0]
 800650e:	0025      	movs	r5, r4
 8006510:	193c      	adds	r4, r7, r4
 8006512:	183a      	adds	r2, r7, r0
 8006514:	4806      	ldr	r0, [pc, #24]	; (8006530 <WrByte+0x68>)
 8006516:	2364      	movs	r3, #100	; 0x64
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2303      	movs	r3, #3
 800651c:	f7fd fc08 	bl	8003d30 <HAL_I2C_Master_Transmit>
 8006520:	0003      	movs	r3, r0
 8006522:	7023      	strb	r3, [r4, #0]
	//uart_printf("write 1 byte\n");
	return status;
 8006524:	197b      	adds	r3, r7, r5
 8006526:	781b      	ldrb	r3, [r3, #0]
}
 8006528:	0018      	movs	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	b004      	add	sp, #16
 800652e:	bdb0      	pop	{r4, r5, r7, pc}
 8006530:	2000008c 	.word	0x2000008c

08006534 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8006534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006536:	b08b      	sub	sp, #44	; 0x2c
 8006538:	af04      	add	r7, sp, #16
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	200a      	movs	r0, #10
 8006542:	183b      	adds	r3, r7, r0
 8006544:	1c0a      	adds	r2, r1, #0
 8006546:	801a      	strh	r2, [r3, #0]
//	uint8_t status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address)), data_write

	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, (p_platform->address), RegisterAdress,
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8819      	ldrh	r1, [r3, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	2617      	movs	r6, #23
 8006552:	19bc      	adds	r4, r7, r6
 8006554:	183a      	adds	r2, r7, r0
 8006556:	8812      	ldrh	r2, [r2, #0]
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <WrMulti+0x48>)
 800655a:	4d09      	ldr	r5, [pc, #36]	; (8006580 <WrMulti+0x4c>)
 800655c:	9502      	str	r5, [sp, #8]
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2302      	movs	r3, #2
 8006566:	f7fd fdf3 	bl	8004150 <HAL_I2C_Mem_Write>
 800656a:	0003      	movs	r3, r0
 800656c:	7023      	strb	r3, [r4, #0]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 800656e:	19bb      	adds	r3, r7, r6
 8006570:	781b      	ldrb	r3, [r3, #0]
}
 8006572:	0018      	movs	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	b007      	add	sp, #28
 8006578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	2000008c 	.word	0x2000008c
 8006580:	0000ffff 	.word	0x0000ffff

08006584 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8006584:	b5b0      	push	{r4, r5, r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	200a      	movs	r0, #10
 8006592:	183b      	adds	r3, r7, r0
 8006594:	1c0a      	adds	r2, r1, #0
 8006596:	801a      	strh	r2, [r3, #0]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8006598:	0001      	movs	r1, r0
 800659a:	187b      	adds	r3, r7, r1
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	2014      	movs	r0, #20
 80065a6:	183b      	adds	r3, r7, r0
 80065a8:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 80065aa:	187b      	adds	r3, r7, r1
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	183b      	adds	r3, r7, r0
 80065b2:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 2, 10);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8819      	ldrh	r1, [r3, #0]
 80065b8:	2517      	movs	r5, #23
 80065ba:	197c      	adds	r4, r7, r5
 80065bc:	183a      	adds	r2, r7, r0
 80065be:	4810      	ldr	r0, [pc, #64]	; (8006600 <RdMulti+0x7c>)
 80065c0:	230a      	movs	r3, #10
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	2302      	movs	r3, #2
 80065c6:	f7fd fbb3 	bl	8003d30 <HAL_I2C_Master_Transmit>
 80065ca:	0003      	movs	r3, r0
 80065cc:	7023      	strb	r3, [r4, #0]
	status += HAL_I2C_Master_Receive(&hi2c1, (p_platform->address), p_values, size, 400);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8819      	ldrh	r1, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	b29c      	uxth	r4, r3
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4809      	ldr	r0, [pc, #36]	; (8006600 <RdMulti+0x7c>)
 80065da:	23c8      	movs	r3, #200	; 0xc8
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	0023      	movs	r3, r4
 80065e2:	f7fd fcad 	bl	8003f40 <HAL_I2C_Master_Receive>
 80065e6:	0003      	movs	r3, r0
 80065e8:	0019      	movs	r1, r3
 80065ea:	197b      	adds	r3, r7, r5
 80065ec:	197a      	adds	r2, r7, r5
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	188a      	adds	r2, r1, r2
 80065f2:	701a      	strb	r2, [r3, #0]
    //uart_printf("read %d bytes\n",size);

	return status;
 80065f4:	197b      	adds	r3, r7, r5
 80065f6:	781b      	ldrb	r3, [r3, #0]
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b006      	add	sp, #24
 80065fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006600:	2000008c 	.word	0x2000008c

08006604 <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	000a      	movs	r2, r1
 800660e:	1cbb      	adds	r3, r7, #2
 8006610:	801a      	strh	r2, [r3, #0]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e025      	b.n	8006664 <SwapBuffer+0x60>
	{
		tmp = (
		  buffer[i]<<24)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	18d3      	adds	r3, r2, r3
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	18cb      	adds	r3, r1, r3
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3302      	adds	r3, #2
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	18cb      	adds	r3, r1, r3
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	3203      	adds	r2, #3
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	188a      	adds	r2, r1, r2
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	4313      	orrs	r3, r2
		tmp = (
 800664a:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	18d3      	adds	r3, r2, r3
 8006652:	2208      	movs	r2, #8
 8006654:	18b9      	adds	r1, r7, r2
 8006656:	2204      	movs	r2, #4
 8006658:	0018      	movs	r0, r3
 800665a:	f002 fd63 	bl	8009124 <memcpy>
	for(i = 0; i < size; i = i + 4) 
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3304      	adds	r3, #4
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	1cbb      	adds	r3, r7, #2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	429a      	cmp	r2, r3
 800666c:	d3d4      	bcc.n	8006618 <SwapBuffer+0x14>
	}
}	
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}

08006678 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	HAL_Delay(TimeMs);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	0018      	movs	r0, r3
 8006686:	f7fd f849 	bl	800371c <HAL_Delay>
	return 0;
 800668a:	2300      	movs	r3, #0
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b002      	add	sp, #8
 8006692:	bd80      	pop	{r7, pc}

08006694 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	000c      	movs	r4, r1
 800669e:	0010      	movs	r0, r2
 80066a0:	0019      	movs	r1, r3
 80066a2:	1cfb      	adds	r3, r7, #3
 80066a4:	1c22      	adds	r2, r4, #0
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	1cbb      	adds	r3, r7, #2
 80066aa:	1c02      	adds	r2, r0, #0
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	003b      	movs	r3, r7
 80066b0:	1c0a      	adds	r2, r1, #0
 80066b2:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80066b4:	230f      	movs	r3, #15
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
	uint8_t timeout = 0;
 80066bc:	230e      	movs	r3, #14
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 80066c4:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	22a0      	movs	r2, #160	; 0xa0
 80066ca:	00d2      	lsls	r2, r2, #3
 80066cc:	189a      	adds	r2, r3, r2
		status |= RdMulti(&(p_dev->platform), address,
 80066ce:	1cfb      	adds	r3, r7, #3
 80066d0:	781c      	ldrb	r4, [r3, #0]
 80066d2:	003b      	movs	r3, r7
 80066d4:	8819      	ldrh	r1, [r3, #0]
 80066d6:	0023      	movs	r3, r4
 80066d8:	f7ff ff54 	bl	8006584 <RdMulti>
 80066dc:	0003      	movs	r3, r0
 80066de:	0019      	movs	r1, r3
 80066e0:	240f      	movs	r4, #15
 80066e2:	193b      	adds	r3, r7, r4
 80066e4:	193a      	adds	r2, r7, r4
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	701a      	strb	r2, [r3, #0]
		status |= WaitMs(&(p_dev->platform), 10);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	210a      	movs	r1, #10
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff ffc1 	bl	8006678 <WaitMs>
 80066f6:	0003      	movs	r3, r0
 80066f8:	0019      	movs	r1, r3
 80066fa:	0020      	movs	r0, r4
 80066fc:	183b      	adds	r3, r7, r0
 80066fe:	183a      	adds	r2, r7, r0
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	701a      	strb	r2, [r3, #0]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8006706:	230e      	movs	r3, #14
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2bc7      	cmp	r3, #199	; 0xc7
 800670e:	d906      	bls.n	800671e <_vl53l5cx_poll_for_answer+0x8a>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8006710:	183b      	adds	r3, r7, r0
 8006712:	183a      	adds	r2, r7, r0
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	2101      	movs	r1, #1
 8006718:	430a      	orrs	r2, r1
 800671a:	701a      	strb	r2, [r3, #0]
			break;
 800671c:	e028      	b.n	8006770 <_vl53l5cx_poll_for_answer+0xdc>
		}else if((size >= (uint8_t)4) 
 800671e:	1cfb      	adds	r3, r7, #3
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b03      	cmp	r3, #3
 8006724:	d90c      	bls.n	8006740 <_vl53l5cx_poll_for_answer+0xac>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <_vl53l5cx_poll_for_answer+0xec>)
 800672a:	5c9b      	ldrb	r3, [r3, r2]
 800672c:	2b7e      	cmp	r3, #126	; 0x7e
 800672e:	d907      	bls.n	8006740 <_vl53l5cx_poll_for_answer+0xac>
		{
			status |= VL53L5CX_MCU_ERROR;
 8006730:	220f      	movs	r2, #15
 8006732:	18bb      	adds	r3, r7, r2
 8006734:	18ba      	adds	r2, r7, r2
 8006736:	7812      	ldrb	r2, [r2, #0]
 8006738:	2142      	movs	r1, #66	; 0x42
 800673a:	430a      	orrs	r2, r1
 800673c:	701a      	strb	r2, [r3, #0]
			break;
 800673e:	e017      	b.n	8006770 <_vl53l5cx_poll_for_answer+0xdc>
		}
		else
		{
			timeout++;
 8006740:	210e      	movs	r1, #14
 8006742:	187b      	adds	r3, r7, r1
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	187b      	adds	r3, r7, r1
 8006748:	3201      	adds	r2, #1
 800674a:	701a      	strb	r2, [r3, #0]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800674c:	1cbb      	adds	r3, r7, #2
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	23a0      	movs	r3, #160	; 0xa0
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	188a      	adds	r2, r1, r2
 8006758:	18d3      	adds	r3, r2, r3
 800675a:	781a      	ldrb	r2, [r3, #0]
 800675c:	2320      	movs	r3, #32
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	4013      	ands	r3, r2
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2224      	movs	r2, #36	; 0x24
 8006768:	18ba      	adds	r2, r7, r2
 800676a:	7812      	ldrb	r2, [r2, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d1a9      	bne.n	80066c4 <_vl53l5cx_poll_for_answer+0x30>

	return status;
 8006770:	230f      	movs	r3, #15
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	781b      	ldrb	r3, [r3, #0]
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b005      	add	sp, #20
 800677c:	bd90      	pop	{r4, r7, pc}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	00000502 	.word	0x00000502

08006784 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8006784:	b5b0      	push	{r4, r5, r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 800678c:	230f      	movs	r3, #15
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
   uint16_t timeout = 0;
 8006794:	230c      	movs	r3, #12
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	2200      	movs	r2, #0
 800679a:	801a      	strh	r2, [r3, #0]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	250b      	movs	r5, #11
 80067a0:	197a      	adds	r2, r7, r5
 80067a2:	2106      	movs	r1, #6
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7ff fe4d 	bl	8006444 <RdByte>
 80067aa:	0003      	movs	r3, r0
 80067ac:	0019      	movs	r1, r3
 80067ae:	240f      	movs	r4, #15
 80067b0:	193b      	adds	r3, r7, r4
 80067b2:	193a      	adds	r2, r7, r4
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	701a      	strb	r2, [r3, #0]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80067ba:	197b      	adds	r3, r7, r5
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	da15      	bge.n	80067f0 <_vl53l5cx_poll_for_mcu_boot+0x6c>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	250a      	movs	r5, #10
 80067c8:	197a      	adds	r2, r7, r5
 80067ca:	2107      	movs	r1, #7
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7ff fe39 	bl	8006444 <RdByte>
 80067d2:	0003      	movs	r3, r0
 80067d4:	0019      	movs	r1, r3
 80067d6:	193b      	adds	r3, r7, r4
 80067d8:	193a      	adds	r2, r7, r4
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	701a      	strb	r2, [r3, #0]
			status |= go2_status1;
 80067e0:	197b      	adds	r3, r7, r5
 80067e2:	7819      	ldrb	r1, [r3, #0]
 80067e4:	193b      	adds	r3, r7, r4
 80067e6:	193a      	adds	r2, r7, r4
 80067e8:	7812      	ldrb	r2, [r2, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	701a      	strb	r2, [r3, #0]
			break;
 80067ee:	e019      	b.n	8006824 <_vl53l5cx_poll_for_mcu_boot+0xa0>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2101      	movs	r1, #1
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7ff ff3f 	bl	8006678 <WaitMs>
		timeout++;
 80067fa:	210c      	movs	r1, #12
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	187b      	adds	r3, r7, r1
 8006802:	3201      	adds	r2, #1
 8006804:	801a      	strh	r2, [r3, #0]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8006806:	230b      	movs	r3, #11
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	001a      	movs	r2, r3
 800680e:	2301      	movs	r3, #1
 8006810:	4013      	ands	r3, r2
 8006812:	d106      	bne.n	8006822 <_vl53l5cx_poll_for_mcu_boot+0x9e>
			break;
		}

	}while (timeout < (uint16_t)500);
 8006814:	187b      	adds	r3, r7, r1
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	23fa      	movs	r3, #250	; 0xfa
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	429a      	cmp	r2, r3
 800681e:	d3bd      	bcc.n	800679c <_vl53l5cx_poll_for_mcu_boot+0x18>
 8006820:	e000      	b.n	8006824 <_vl53l5cx_poll_for_mcu_boot+0xa0>
			break;
 8006822:	46c0      	nop			; (mov r8, r8)

   return status;
 8006824:	230f      	movs	r3, #15
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	781b      	ldrb	r3, [r3, #0]
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b004      	add	sp, #16
 8006830:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006834 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8006834:	b5b0      	push	{r4, r5, r7, lr}
 8006836:	b0ea      	sub	sp, #424	; 0x1a8
 8006838:	af02      	add	r7, sp, #8
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	000a      	movs	r2, r1
 800683e:	4be0      	ldr	r3, [pc, #896]	; (8006bc0 <_vl53l5cx_send_offset_data+0x38c>)
 8006840:	24d0      	movs	r4, #208	; 0xd0
 8006842:	0064      	lsls	r4, r4, #1
 8006844:	191b      	adds	r3, r3, r4
 8006846:	19db      	adds	r3, r3, r7
 8006848:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800684a:	239c      	movs	r3, #156	; 0x9c
 800684c:	33ff      	adds	r3, #255	; 0xff
 800684e:	18fb      	adds	r3, r7, r3
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8006854:	4bdb      	ldr	r3, [pc, #876]	; (8006bc4 <_vl53l5cx_send_offset_data+0x390>)
 8006856:	191b      	adds	r3, r3, r4
 8006858:	19db      	adds	r3, r3, r7
 800685a:	4adb      	ldr	r2, [pc, #876]	; (8006bc8 <_vl53l5cx_send_offset_data+0x394>)
 800685c:	ca03      	ldmia	r2!, {r0, r1}
 800685e:	c303      	stmia	r3!, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8006860:	4bda      	ldr	r3, [pc, #872]	; (8006bcc <_vl53l5cx_send_offset_data+0x398>)
 8006862:	191b      	adds	r3, r3, r4
 8006864:	19db      	adds	r3, r3, r7
 8006866:	4ada      	ldr	r2, [pc, #872]	; (8006bd0 <_vl53l5cx_send_offset_data+0x39c>)
 8006868:	ca03      	ldmia	r2!, {r0, r1}
 800686a:	c303      	stmia	r3!, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	22a0      	movs	r2, #160	; 0xa0
 8006870:	00d2      	lsls	r2, r2, #3
 8006872:	1898      	adds	r0, r3, r2
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8006878:	22f4      	movs	r2, #244	; 0xf4
 800687a:	0052      	lsls	r2, r2, #1
 800687c:	0019      	movs	r1, r3
 800687e:	f002 fc51 	bl	8009124 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8006882:	4bcf      	ldr	r3, [pc, #828]	; (8006bc0 <_vl53l5cx_send_offset_data+0x38c>)
 8006884:	191b      	adds	r3, r3, r4
 8006886:	19db      	adds	r3, r3, r7
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b10      	cmp	r3, #16
 800688c:	d000      	beq.n	8006890 <_vl53l5cx_send_offset_data+0x5c>
 800688e:	e134      	b.n	8006afa <_vl53l5cx_send_offset_data+0x2c6>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	22a2      	movs	r2, #162	; 0xa2
 8006894:	00d2      	lsls	r2, r2, #3
 8006896:	189a      	adds	r2, r3, r2
 8006898:	4bca      	ldr	r3, [pc, #808]	; (8006bc4 <_vl53l5cx_send_offset_data+0x390>)
 800689a:	191b      	adds	r3, r3, r4
 800689c:	19db      	adds	r3, r3, r7
 800689e:	0010      	movs	r0, r2
 80068a0:	0019      	movs	r1, r3
 80068a2:	2308      	movs	r3, #8
 80068a4:	001a      	movs	r2, r3
 80068a6:	f002 fc3d 	bl	8009124 <memcpy>
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	22a0      	movs	r2, #160	; 0xa0
 80068ae:	00d2      	lsls	r2, r2, #3
 80068b0:	4694      	mov	ip, r2
 80068b2:	4463      	add	r3, ip
 80068b4:	22f4      	movs	r2, #244	; 0xf4
 80068b6:	0052      	lsls	r2, r2, #1
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7ff fea2 	bl	8006604 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4ac4      	ldr	r2, [pc, #784]	; (8006bd4 <_vl53l5cx_send_offset_data+0x3a0>)
 80068c4:	1899      	adds	r1, r3, r2
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	005a      	lsls	r2, r3, #1
 80068ca:	2398      	movs	r3, #152	; 0x98
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	0018      	movs	r0, r3
 80068d0:	f002 fc28 	bl	8009124 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	22c8      	movs	r2, #200	; 0xc8
 80068d8:	00d2      	lsls	r2, r2, #3
 80068da:	1899      	adds	r1, r3, r2
 80068dc:	2318      	movs	r3, #24
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	2280      	movs	r2, #128	; 0x80
 80068e2:	0018      	movs	r0, r3
 80068e4:	f002 fc1e 	bl	8009124 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 80068e8:	23cf      	movs	r3, #207	; 0xcf
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	2200      	movs	r2, #0
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	e0cb      	b.n	8006a8c <_vl53l5cx_send_offset_data+0x258>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80068f4:	23a0      	movs	r3, #160	; 0xa0
 80068f6:	33ff      	adds	r3, #255	; 0xff
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e0b3      	b.n	8006a68 <_vl53l5cx_send_offset_data+0x234>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8006900:	20a0      	movs	r0, #160	; 0xa0
 8006902:	30ff      	adds	r0, #255	; 0xff
 8006904:	183b      	adds	r3, r7, r0
 8006906:	2200      	movs	r2, #0
 8006908:	569a      	ldrsb	r2, [r3, r2]
 800690a:	24cf      	movs	r4, #207	; 0xcf
 800690c:	0064      	lsls	r4, r4, #1
 800690e:	193b      	adds	r3, r7, r4
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b25b      	sxtb	r3, r3
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	005a      	lsls	r2, r3, #1
 800691a:	4baf      	ldr	r3, [pc, #700]	; (8006bd8 <_vl53l5cx_send_offset_data+0x3a4>)
 800691c:	25d0      	movs	r5, #208	; 0xd0
 800691e:	006d      	lsls	r5, r5, #1
 8006920:	195b      	adds	r3, r3, r5
 8006922:	19db      	adds	r3, r3, r7
 8006924:	0092      	lsls	r2, r2, #2
 8006926:	58d2      	ldr	r2, [r2, r3]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8006928:	183b      	adds	r3, r7, r0
 800692a:	2100      	movs	r1, #0
 800692c:	5659      	ldrsb	r1, [r3, r1]
 800692e:	193b      	adds	r3, r7, r4
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b25b      	sxtb	r3, r3
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	18cb      	adds	r3, r1, r3
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	4ba6      	ldr	r3, [pc, #664]	; (8006bd8 <_vl53l5cx_send_offset_data+0x3a4>)
 800693e:	195b      	adds	r3, r3, r5
 8006940:	19db      	adds	r3, r3, r7
 8006942:	0089      	lsls	r1, r1, #2
 8006944:	58cb      	ldr	r3, [r1, r3]
 8006946:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8006948:	183b      	adds	r3, r7, r0
 800694a:	2100      	movs	r1, #0
 800694c:	5659      	ldrsb	r1, [r3, r1]
 800694e:	193b      	adds	r3, r7, r4
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b25b      	sxtb	r3, r3
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	18cb      	adds	r3, r1, r3
 8006958:	3304      	adds	r3, #4
 800695a:	0059      	lsls	r1, r3, #1
 800695c:	4b9e      	ldr	r3, [pc, #632]	; (8006bd8 <_vl53l5cx_send_offset_data+0x3a4>)
 800695e:	195b      	adds	r3, r3, r5
 8006960:	19db      	adds	r3, r3, r7
 8006962:	0089      	lsls	r1, r1, #2
 8006964:	58cb      	ldr	r3, [r1, r3]
 8006966:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8006968:	183b      	adds	r3, r7, r0
 800696a:	2100      	movs	r1, #0
 800696c:	5659      	ldrsb	r1, [r3, r1]
 800696e:	193b      	adds	r3, r7, r4
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	b25b      	sxtb	r3, r3
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	18cb      	adds	r3, r1, r3
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	3309      	adds	r3, #9
 800697c:	0019      	movs	r1, r3
 800697e:	4b96      	ldr	r3, [pc, #600]	; (8006bd8 <_vl53l5cx_send_offset_data+0x3a4>)
 8006980:	195b      	adds	r3, r3, r5
 8006982:	19db      	adds	r3, r3, r7
 8006984:	0089      	lsls	r1, r1, #2
 8006986:	58cb      	ldr	r3, [r1, r3]
 8006988:	18d3      	adds	r3, r2, r3
				signal_grid[i+(4*j)] =
 800698a:	183a      	adds	r2, r7, r0
 800698c:	2100      	movs	r1, #0
 800698e:	5651      	ldrsb	r1, [r2, r1]
 8006990:	193a      	adds	r2, r7, r4
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	b252      	sxtb	r2, r2
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	188a      	adds	r2, r1, r2
                                  /(uint32_t)4;
 800699a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800699c:	4b8e      	ldr	r3, [pc, #568]	; (8006bd8 <_vl53l5cx_send_offset_data+0x3a4>)
 800699e:	195b      	adds	r3, r3, r5
 80069a0:	19db      	adds	r3, r3, r7
 80069a2:	0092      	lsls	r2, r2, #2
 80069a4:	50d1      	str	r1, [r2, r3]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	2200      	movs	r2, #0
 80069aa:	569a      	ldrsb	r2, [r3, r2]
 80069ac:	193b      	adds	r3, r7, r4
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	18d3      	adds	r3, r2, r3
 80069b6:	005a      	lsls	r2, r3, #1
 80069b8:	4b88      	ldr	r3, [pc, #544]	; (8006bdc <_vl53l5cx_send_offset_data+0x3a8>)
 80069ba:	195b      	adds	r3, r3, r5
 80069bc:	19db      	adds	r3, r3, r7
 80069be:	0052      	lsls	r2, r2, #1
 80069c0:	5ed3      	ldrsh	r3, [r2, r3]
 80069c2:	0019      	movs	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80069c4:	183b      	adds	r3, r7, r0
 80069c6:	2200      	movs	r2, #0
 80069c8:	569a      	ldrsb	r2, [r3, r2]
 80069ca:	193b      	adds	r3, r7, r4
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	18d3      	adds	r3, r2, r3
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	4b80      	ldr	r3, [pc, #512]	; (8006bdc <_vl53l5cx_send_offset_data+0x3a8>)
 80069da:	195b      	adds	r3, r3, r5
 80069dc:	19db      	adds	r3, r3, r7
 80069de:	0052      	lsls	r2, r2, #1
 80069e0:	5ed3      	ldrsh	r3, [r2, r3]
 80069e2:	18cb      	adds	r3, r1, r3
				+ range_grid[(2*i)+(16*j)+8]
 80069e4:	183a      	adds	r2, r7, r0
 80069e6:	2100      	movs	r1, #0
 80069e8:	5651      	ldrsb	r1, [r2, r1]
 80069ea:	193a      	adds	r2, r7, r4
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	b252      	sxtb	r2, r2
 80069f0:	00d2      	lsls	r2, r2, #3
 80069f2:	188a      	adds	r2, r1, r2
 80069f4:	3204      	adds	r2, #4
 80069f6:	0051      	lsls	r1, r2, #1
 80069f8:	4a78      	ldr	r2, [pc, #480]	; (8006bdc <_vl53l5cx_send_offset_data+0x3a8>)
 80069fa:	1952      	adds	r2, r2, r5
 80069fc:	19d2      	adds	r2, r2, r7
 80069fe:	0049      	lsls	r1, r1, #1
 8006a00:	5e8a      	ldrsh	r2, [r1, r2]
 8006a02:	189b      	adds	r3, r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8006a04:	183a      	adds	r2, r7, r0
 8006a06:	2100      	movs	r1, #0
 8006a08:	5651      	ldrsb	r1, [r2, r1]
 8006a0a:	193a      	adds	r2, r7, r4
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	b252      	sxtb	r2, r2
 8006a10:	00d2      	lsls	r2, r2, #3
 8006a12:	188a      	adds	r2, r1, r2
 8006a14:	0052      	lsls	r2, r2, #1
 8006a16:	3209      	adds	r2, #9
 8006a18:	0011      	movs	r1, r2
 8006a1a:	4a70      	ldr	r2, [pc, #448]	; (8006bdc <_vl53l5cx_send_offset_data+0x3a8>)
 8006a1c:	1952      	adds	r2, r2, r5
 8006a1e:	19d2      	adds	r2, r2, r7
 8006a20:	0049      	lsls	r1, r1, #1
 8006a22:	5e8a      	ldrsh	r2, [r1, r2]
 8006a24:	189b      	adds	r3, r3, r2
                                  /(int16_t)4;
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da00      	bge.n	8006a2c <_vl53l5cx_send_offset_data+0x1f8>
 8006a2a:	3303      	adds	r3, #3
 8006a2c:	109b      	asrs	r3, r3, #2
 8006a2e:	0019      	movs	r1, r3
				range_grid[i+(4*j)] =
 8006a30:	20a0      	movs	r0, #160	; 0xa0
 8006a32:	30ff      	adds	r0, #255	; 0xff
 8006a34:	183b      	adds	r3, r7, r0
 8006a36:	2200      	movs	r2, #0
 8006a38:	569a      	ldrsb	r2, [r3, r2]
 8006a3a:	23cf      	movs	r3, #207	; 0xcf
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	b25b      	sxtb	r3, r3
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	18d2      	adds	r2, r2, r3
 8006a48:	b209      	sxth	r1, r1
 8006a4a:	4b64      	ldr	r3, [pc, #400]	; (8006bdc <_vl53l5cx_send_offset_data+0x3a8>)
 8006a4c:	24d0      	movs	r4, #208	; 0xd0
 8006a4e:	0064      	lsls	r4, r4, #1
 8006a50:	191b      	adds	r3, r3, r4
 8006a52:	19db      	adds	r3, r3, r7
 8006a54:	0052      	lsls	r2, r2, #1
 8006a56:	52d1      	strh	r1, [r2, r3]
			for (i = 0; i < (int8_t)4 ; i++)
 8006a58:	183b      	adds	r3, r7, r0
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	3301      	adds	r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	183b      	adds	r3, r7, r0
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	23a0      	movs	r3, #160	; 0xa0
 8006a6a:	33ff      	adds	r3, #255	; 0xff
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	dc00      	bgt.n	8006a78 <_vl53l5cx_send_offset_data+0x244>
 8006a76:	e743      	b.n	8006900 <_vl53l5cx_send_offset_data+0xcc>
		for (j = 0; j < (int8_t)4; j++)
 8006a78:	21cf      	movs	r1, #207	; 0xcf
 8006a7a:	0049      	lsls	r1, r1, #1
 8006a7c:	187b      	adds	r3, r7, r1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	3301      	adds	r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	23cf      	movs	r3, #207	; 0xcf
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b25b      	sxtb	r3, r3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	dc00      	bgt.n	8006a9c <_vl53l5cx_send_offset_data+0x268>
 8006a9a:	e72b      	b.n	80068f4 <_vl53l5cx_send_offset_data+0xc0>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8006a9c:	2418      	movs	r4, #24
 8006a9e:	193b      	adds	r3, r7, r4
 8006aa0:	3320      	adds	r3, #32
 8006aa2:	2260      	movs	r2, #96	; 0x60
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f002 fb0a 	bl	80090c0 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8006aac:	2598      	movs	r5, #152	; 0x98
 8006aae:	197b      	adds	r3, r7, r5
 8006ab0:	3340      	adds	r3, #64	; 0x40
 8006ab2:	22c0      	movs	r2, #192	; 0xc0
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f002 fb02 	bl	80090c0 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a45      	ldr	r2, [pc, #276]	; (8006bd4 <_vl53l5cx_send_offset_data+0x3a0>)
 8006ac0:	4694      	mov	ip, r2
 8006ac2:	4463      	add	r3, ip
 8006ac4:	2280      	movs	r2, #128	; 0x80
 8006ac6:	0052      	lsls	r2, r2, #1
 8006ac8:	1979      	adds	r1, r7, r5
 8006aca:	0018      	movs	r0, r3
 8006acc:	f002 fb2a 	bl	8009124 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	22c8      	movs	r2, #200	; 0xc8
 8006ad4:	00d2      	lsls	r2, r2, #3
 8006ad6:	4694      	mov	ip, r2
 8006ad8:	4463      	add	r3, ip
 8006ada:	1939      	adds	r1, r7, r4
 8006adc:	2280      	movs	r2, #128	; 0x80
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f002 fb20 	bl	8009124 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	22a0      	movs	r2, #160	; 0xa0
 8006ae8:	00d2      	lsls	r2, r2, #3
 8006aea:	4694      	mov	ip, r2
 8006aec:	4463      	add	r3, ip
 8006aee:	22f4      	movs	r2, #244	; 0xf4
 8006af0:	0052      	lsls	r2, r2, #1
 8006af2:	0011      	movs	r1, r2
 8006af4:	0018      	movs	r0, r3
 8006af6:	f7ff fd85 	bl	8006604 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8006afa:	23ce      	movs	r3, #206	; 0xce
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	2200      	movs	r2, #0
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e019      	b.n	8006b3a <_vl53l5cx_send_offset_data+0x306>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8006b06:	24ce      	movs	r4, #206	; 0xce
 8006b08:	0064      	lsls	r4, r4, #1
 8006b0a:	193b      	adds	r3, r7, r4
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	0019      	movs	r1, r3
 8006b12:	193b      	adds	r3, r7, r4
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	23a0      	movs	r3, #160	; 0xa0
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	1841      	adds	r1, r0, r1
 8006b1e:	18cb      	adds	r3, r1, r3
 8006b20:	7818      	ldrb	r0, [r3, #0]
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	23a0      	movs	r3, #160	; 0xa0
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	188a      	adds	r2, r1, r2
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	1c02      	adds	r2, r0, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8006b30:	193b      	adds	r3, r7, r4
 8006b32:	881a      	ldrh	r2, [r3, #0]
 8006b34:	193b      	adds	r3, r7, r4
 8006b36:	3201      	adds	r2, #1
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	23ce      	movs	r3, #206	; 0xce
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	23f2      	movs	r3, #242	; 0xf2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d3dd      	bcc.n	8006b06 <_vl53l5cx_send_offset_data+0x2d2>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	22dc      	movs	r2, #220	; 0xdc
 8006b4e:	00d2      	lsls	r2, r2, #3
 8006b50:	189a      	adds	r2, r3, r2
 8006b52:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <_vl53l5cx_send_offset_data+0x398>)
 8006b54:	21d0      	movs	r1, #208	; 0xd0
 8006b56:	0049      	lsls	r1, r1, #1
 8006b58:	185b      	adds	r3, r3, r1
 8006b5a:	19db      	adds	r3, r3, r7
 8006b5c:	0010      	movs	r0, r2
 8006b5e:	0019      	movs	r1, r3
 8006b60:	2308      	movs	r3, #8
 8006b62:	001a      	movs	r2, r3
 8006b64:	f002 fade 	bl	8009124 <memcpy>
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	22a0      	movs	r2, #160	; 0xa0
 8006b6e:	00d2      	lsls	r2, r2, #3
 8006b70:	189a      	adds	r2, r3, r2
 8006b72:	23f4      	movs	r3, #244	; 0xf4
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	491a      	ldr	r1, [pc, #104]	; (8006be0 <_vl53l5cx_send_offset_data+0x3ac>)
 8006b78:	f7ff fcdc 	bl	8006534 <WrMulti>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	0019      	movs	r1, r3
 8006b80:	249c      	movs	r4, #156	; 0x9c
 8006b82:	34ff      	adds	r4, #255	; 0xff
 8006b84:	193b      	adds	r3, r7, r4
 8006b86:	193a      	adds	r2, r7, r4
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	701a      	strb	r2, [r3, #0]
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006b8e:	23b0      	movs	r3, #176	; 0xb0
 8006b90:	019b      	lsls	r3, r3, #6
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	2203      	movs	r2, #3
 8006b96:	9201      	str	r2, [sp, #4]
 8006b98:	22ff      	movs	r2, #255	; 0xff
 8006b9a:	9200      	str	r2, [sp, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	f7ff fd78 	bl	8006694 <_vl53l5cx_poll_for_answer>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	0019      	movs	r1, r3
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	193a      	adds	r2, r7, r4
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8006bb2:	193b      	adds	r3, r7, r4
 8006bb4:	781b      	ldrb	r3, [r3, #0]
}
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	b068      	add	sp, #416	; 0x1a0
 8006bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	fffffe63 	.word	0xfffffe63
 8006bc4:	fffffe70 	.word	0xfffffe70
 8006bc8:	08009488 	.word	0x08009488
 8006bcc:	fffffe68 	.word	0xfffffe68
 8006bd0:	08009490 	.word	0x08009490
 8006bd4:	0000053c 	.word	0x0000053c
 8006bd8:	fffffef8 	.word	0xfffffef8
 8006bdc:	fffffe78 	.word	0xfffffe78
 8006be0:	00002e18 	.word	0x00002e18

08006be4 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8006be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be6:	b0cb      	sub	sp, #300	; 0x12c
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	000a      	movs	r2, r1
 8006bee:	4b9b      	ldr	r3, [pc, #620]	; (8006e5c <_vl53l5cx_send_xtalk_data+0x278>)
 8006bf0:	2490      	movs	r4, #144	; 0x90
 8006bf2:	0064      	lsls	r4, r4, #1
 8006bf4:	191b      	adds	r3, r3, r4
 8006bf6:	19db      	adds	r3, r3, r7
 8006bf8:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006bfa:	231e      	movs	r3, #30
 8006bfc:	33ff      	adds	r3, #255	; 0xff
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8006c04:	258a      	movs	r5, #138	; 0x8a
 8006c06:	006d      	lsls	r5, r5, #1
 8006c08:	197b      	adds	r3, r7, r5
 8006c0a:	4a95      	ldr	r2, [pc, #596]	; (8006e60 <_vl53l5cx_send_xtalk_data+0x27c>)
 8006c0c:	ca03      	ldmia	r2!, {r0, r1}
 8006c0e:	c303      	stmia	r3!, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8006c10:	2686      	movs	r6, #134	; 0x86
 8006c12:	0076      	lsls	r6, r6, #1
 8006c14:	19bb      	adds	r3, r7, r6
 8006c16:	4a93      	ldr	r2, [pc, #588]	; (8006e64 <_vl53l5cx_send_xtalk_data+0x280>)
 8006c18:	ca03      	ldmia	r2!, {r0, r1}
 8006c1a:	c303      	stmia	r3!, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8006c1c:	2384      	movs	r3, #132	; 0x84
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	4a91      	ldr	r2, [pc, #580]	; (8006e68 <_vl53l5cx_send_xtalk_data+0x284>)
 8006c24:	601a      	str	r2, [r3, #0]
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	22a0      	movs	r2, #160	; 0xa0
 8006c2a:	00d2      	lsls	r2, r2, #3
 8006c2c:	1898      	adds	r0, r3, r2
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	33f9      	adds	r3, #249	; 0xf9
 8006c32:	33ff      	adds	r3, #255	; 0xff
 8006c34:	22c2      	movs	r2, #194	; 0xc2
 8006c36:	0092      	lsls	r2, r2, #2
 8006c38:	0019      	movs	r1, r3
 8006c3a:	f002 fa73 	bl	8009124 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8006c3e:	4b87      	ldr	r3, [pc, #540]	; (8006e5c <_vl53l5cx_send_xtalk_data+0x278>)
 8006c40:	191b      	adds	r3, r3, r4
 8006c42:	19db      	adds	r3, r3, r7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d000      	beq.n	8006c4c <_vl53l5cx_send_xtalk_data+0x68>
 8006c4a:	e0dc      	b.n	8006e06 <_vl53l5cx_send_xtalk_data+0x222>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	22a1      	movs	r2, #161	; 0xa1
 8006c50:	00d2      	lsls	r2, r2, #3
 8006c52:	189a      	adds	r2, r3, r2
 8006c54:	197b      	adds	r3, r7, r5
 8006c56:	0010      	movs	r0, r2
 8006c58:	0019      	movs	r1, r3
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	f002 fa61 	bl	8009124 <memcpy>
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	22a4      	movs	r2, #164	; 0xa4
 8006c66:	00d2      	lsls	r2, r2, #3
 8006c68:	189a      	adds	r2, r3, r2
 8006c6a:	19bb      	adds	r3, r7, r6
 8006c6c:	0010      	movs	r0, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	2308      	movs	r3, #8
 8006c72:	001a      	movs	r2, r3
 8006c74:	f002 fa56 	bl	8009124 <memcpy>
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	22a0      	movs	r2, #160	; 0xa0
 8006c7c:	00d2      	lsls	r2, r2, #3
 8006c7e:	4694      	mov	ip, r2
 8006c80:	4463      	add	r3, ip
 8006c82:	22c2      	movs	r2, #194	; 0xc2
 8006c84:	0092      	lsls	r2, r2, #2
 8006c86:	0011      	movs	r1, r2
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f7ff fcbb 	bl	8006604 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a76      	ldr	r2, [pc, #472]	; (8006e6c <_vl53l5cx_send_xtalk_data+0x288>)
 8006c92:	1899      	adds	r1, r3, r2
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	005a      	lsls	r2, r3, #1
 8006c98:	2308      	movs	r3, #8
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f002 fa41 	bl	8009124 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8006ca2:	238f      	movs	r3, #143	; 0x8f
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e071      	b.n	8006d92 <_vl53l5cx_send_xtalk_data+0x1ae>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8006cae:	2320      	movs	r3, #32
 8006cb0:	33ff      	adds	r3, #255	; 0xff
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e05a      	b.n	8006d70 <_vl53l5cx_send_xtalk_data+0x18c>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8006cba:	2020      	movs	r0, #32
 8006cbc:	30ff      	adds	r0, #255	; 0xff
 8006cbe:	183b      	adds	r3, r7, r0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	569a      	ldrsb	r2, [r3, r2]
 8006cc4:	248f      	movs	r4, #143	; 0x8f
 8006cc6:	0064      	lsls	r4, r4, #1
 8006cc8:	193b      	adds	r3, r7, r4
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b25b      	sxtb	r3, r3
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	18d3      	adds	r3, r2, r3
 8006cd2:	005a      	lsls	r2, r3, #1
 8006cd4:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <_vl53l5cx_send_xtalk_data+0x28c>)
 8006cd6:	2590      	movs	r5, #144	; 0x90
 8006cd8:	006d      	lsls	r5, r5, #1
 8006cda:	195b      	adds	r3, r3, r5
 8006cdc:	19db      	adds	r3, r3, r7
 8006cde:	0092      	lsls	r2, r2, #2
 8006ce0:	58d2      	ldr	r2, [r2, r3]
				+ signal_grid[(2*i)+(16*j)+1]
 8006ce2:	183b      	adds	r3, r7, r0
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	5659      	ldrsb	r1, [r3, r1]
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	18cb      	adds	r3, r1, r3
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	1c59      	adds	r1, r3, #1
 8006cf6:	4b5e      	ldr	r3, [pc, #376]	; (8006e70 <_vl53l5cx_send_xtalk_data+0x28c>)
 8006cf8:	195b      	adds	r3, r3, r5
 8006cfa:	19db      	adds	r3, r3, r7
 8006cfc:	0089      	lsls	r1, r1, #2
 8006cfe:	58cb      	ldr	r3, [r1, r3]
 8006d00:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8006d02:	183b      	adds	r3, r7, r0
 8006d04:	2100      	movs	r1, #0
 8006d06:	5659      	ldrsb	r1, [r3, r1]
 8006d08:	193b      	adds	r3, r7, r4
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	18cb      	adds	r3, r1, r3
 8006d12:	3304      	adds	r3, #4
 8006d14:	0059      	lsls	r1, r3, #1
 8006d16:	4b56      	ldr	r3, [pc, #344]	; (8006e70 <_vl53l5cx_send_xtalk_data+0x28c>)
 8006d18:	195b      	adds	r3, r3, r5
 8006d1a:	19db      	adds	r3, r3, r7
 8006d1c:	0089      	lsls	r1, r1, #2
 8006d1e:	58cb      	ldr	r3, [r1, r3]
 8006d20:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8006d22:	183b      	adds	r3, r7, r0
 8006d24:	2100      	movs	r1, #0
 8006d26:	5659      	ldrsb	r1, [r3, r1]
 8006d28:	193b      	adds	r3, r7, r4
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	18cb      	adds	r3, r1, r3
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	3309      	adds	r3, #9
 8006d36:	0019      	movs	r1, r3
 8006d38:	4b4d      	ldr	r3, [pc, #308]	; (8006e70 <_vl53l5cx_send_xtalk_data+0x28c>)
 8006d3a:	195b      	adds	r3, r3, r5
 8006d3c:	19db      	adds	r3, r3, r7
 8006d3e:	0089      	lsls	r1, r1, #2
 8006d40:	58cb      	ldr	r3, [r1, r3]
 8006d42:	18d3      	adds	r3, r2, r3
				signal_grid[i+(4*j)] =
 8006d44:	183a      	adds	r2, r7, r0
 8006d46:	2100      	movs	r1, #0
 8006d48:	5651      	ldrsb	r1, [r2, r1]
 8006d4a:	193a      	adds	r2, r7, r4
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	b252      	sxtb	r2, r2
 8006d50:	0092      	lsls	r2, r2, #2
 8006d52:	188a      	adds	r2, r1, r2
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8006d54:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8006d56:	4b46      	ldr	r3, [pc, #280]	; (8006e70 <_vl53l5cx_send_xtalk_data+0x28c>)
 8006d58:	195b      	adds	r3, r3, r5
 8006d5a:	19db      	adds	r3, r3, r7
 8006d5c:	0092      	lsls	r2, r2, #2
 8006d5e:	50d1      	str	r1, [r2, r3]
			for (i = 0; i < (int8_t)4 ; i++)
 8006d60:	183b      	adds	r3, r7, r0
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	b25b      	sxtb	r3, r3
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	3301      	adds	r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	183b      	adds	r3, r7, r0
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	2320      	movs	r3, #32
 8006d72:	33ff      	adds	r3, #255	; 0xff
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	dd9d      	ble.n	8006cba <_vl53l5cx_send_xtalk_data+0xd6>
		for (j = 0; j < (int8_t)4; j++)
 8006d7e:	218f      	movs	r1, #143	; 0x8f
 8006d80:	0049      	lsls	r1, r1, #1
 8006d82:	187b      	adds	r3, r7, r1
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b25b      	sxtb	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	187b      	adds	r3, r7, r1
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	238f      	movs	r3, #143	; 0x8f
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	dd86      	ble.n	8006cae <_vl53l5cx_send_xtalk_data+0xca>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8006da0:	2408      	movs	r4, #8
 8006da2:	193b      	adds	r3, r7, r4
 8006da4:	3340      	adds	r3, #64	; 0x40
 8006da6:	22c0      	movs	r2, #192	; 0xc0
 8006da8:	2100      	movs	r1, #0
 8006daa:	0018      	movs	r0, r3
 8006dac:	f002 f988 	bl	80090c0 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a2e      	ldr	r2, [pc, #184]	; (8006e6c <_vl53l5cx_send_xtalk_data+0x288>)
 8006db4:	4694      	mov	ip, r2
 8006db6:	4463      	add	r3, ip
 8006db8:	2280      	movs	r2, #128	; 0x80
 8006dba:	0052      	lsls	r2, r2, #1
 8006dbc:	1939      	adds	r1, r7, r4
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f002 f9b0 	bl	8009124 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	22a0      	movs	r2, #160	; 0xa0
 8006dc8:	00d2      	lsls	r2, r2, #3
 8006dca:	4694      	mov	ip, r2
 8006dcc:	4463      	add	r3, ip
 8006dce:	22c2      	movs	r2, #194	; 0xc2
 8006dd0:	0092      	lsls	r2, r2, #2
 8006dd2:	0011      	movs	r1, r2
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7ff fc15 	bl	8006604 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a25      	ldr	r2, [pc, #148]	; (8006e74 <_vl53l5cx_send_xtalk_data+0x290>)
 8006dde:	189a      	adds	r2, r3, r2
 8006de0:	2384      	movs	r3, #132	; 0x84
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	0010      	movs	r0, r2
 8006de8:	0019      	movs	r1, r3
 8006dea:	2304      	movs	r3, #4
 8006dec:	001a      	movs	r2, r3
 8006dee:	f002 f999 	bl	8009124 <memcpy>
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	22af      	movs	r2, #175	; 0xaf
 8006df6:	00d2      	lsls	r2, r2, #3
 8006df8:	4694      	mov	ip, r2
 8006dfa:	4463      	add	r3, ip
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	2100      	movs	r1, #0
 8006e00:	0018      	movs	r0, r3
 8006e02:	f002 f95d 	bl	80090c0 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8006e06:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	22a0      	movs	r2, #160	; 0xa0
 8006e0c:	00d2      	lsls	r2, r2, #3
 8006e0e:	189a      	adds	r2, r3, r2
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8006e10:	23c2      	movs	r3, #194	; 0xc2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4918      	ldr	r1, [pc, #96]	; (8006e78 <_vl53l5cx_send_xtalk_data+0x294>)
 8006e16:	f7ff fb8d 	bl	8006534 <WrMulti>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	241e      	movs	r4, #30
 8006e20:	34ff      	adds	r4, #255	; 0xff
 8006e22:	193b      	adds	r3, r7, r4
 8006e24:	193a      	adds	r2, r7, r4
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	701a      	strb	r2, [r3, #0]
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006e2c:	23b0      	movs	r3, #176	; 0xb0
 8006e2e:	019b      	lsls	r3, r3, #6
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	9201      	str	r2, [sp, #4]
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	9200      	str	r2, [sp, #0]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	2104      	movs	r1, #4
 8006e3e:	f7ff fc29 	bl	8006694 <_vl53l5cx_poll_for_answer>
 8006e42:	0003      	movs	r3, r0
 8006e44:	0019      	movs	r1, r3
 8006e46:	193b      	adds	r3, r7, r4
 8006e48:	193a      	adds	r2, r7, r4
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8006e50:	193b      	adds	r3, r7, r4
 8006e52:	781b      	ldrb	r3, [r3, #0]
}
 8006e54:	0018      	movs	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b049      	add	sp, #292	; 0x124
 8006e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5c:	fffffee3 	.word	0xfffffee3
 8006e60:	08009498 	.word	0x08009498
 8006e64:	080094a0 	.word	0x080094a0
 8006e68:	0001fca0 	.word	0x0001fca0
 8006e6c:	00000534 	.word	0x00000534
 8006e70:	fffffee8 	.word	0xfffffee8
 8006e74:	00000634 	.word	0x00000634
 8006e78:	00002cf8 	.word	0x00002cf8

08006e7c <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8006e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7e:	b08b      	sub	sp, #44	; 0x2c
 8006e80:	af04      	add	r7, sp, #16
 8006e82:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8006e84:	2417      	movs	r4, #23
 8006e86:	193b      	adds	r3, r7, r4
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	4afd      	ldr	r2, [pc, #1012]	; (8007288 <vl53l5cx_init+0x40c>)
 8006e92:	601a      	str	r2, [r3, #0]
	uint32_t single_range = 0x01;
 8006e94:	2301      	movs	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4afc      	ldr	r2, [pc, #1008]	; (800728c <vl53l5cx_init+0x410>)
 8006e9c:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4afb      	ldr	r2, [pc, #1004]	; (8007290 <vl53l5cx_init+0x414>)
 8006ea2:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4afb      	ldr	r2, [pc, #1004]	; (8007294 <vl53l5cx_init+0x418>)
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	5499      	strb	r1, [r3, r2]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	49fa      	ldr	r1, [pc, #1000]	; (8007298 <vl53l5cx_init+0x41c>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7ff fb08 	bl	80064c8 <WrByte>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	0019      	movs	r1, r3
 8006ebc:	193b      	adds	r3, r7, r4
 8006ebe:	193a      	adds	r2, r7, r4
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	2109      	movs	r1, #9
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f7ff fafb 	bl	80064c8 <WrByte>
 8006ed2:	0003      	movs	r3, r0
 8006ed4:	0019      	movs	r1, r3
 8006ed6:	193b      	adds	r3, r7, r4
 8006ed8:	193a      	adds	r2, r7, r4
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2240      	movs	r2, #64	; 0x40
 8006ee4:	210f      	movs	r1, #15
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f7ff faee 	bl	80064c8 <WrByte>
 8006eec:	0003      	movs	r3, r0
 8006eee:	0019      	movs	r1, r3
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	193a      	adds	r2, r7, r4
 8006ef4:	7812      	ldrb	r2, [r2, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2203      	movs	r2, #3
 8006efe:	210a      	movs	r1, #10
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fae1 	bl	80064c8 <WrByte>
 8006f06:	0003      	movs	r3, r0
 8006f08:	0019      	movs	r1, r3
 8006f0a:	193b      	adds	r3, r7, r4
 8006f0c:	193a      	adds	r2, r7, r4
 8006f0e:	7812      	ldrb	r2, [r2, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2516      	movs	r5, #22
 8006f18:	197a      	adds	r2, r7, r5
 8006f1a:	49df      	ldr	r1, [pc, #892]	; (8007298 <vl53l5cx_init+0x41c>)
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff fa91 	bl	8006444 <RdByte>
 8006f22:	0003      	movs	r3, r0
 8006f24:	0019      	movs	r1, r3
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	193a      	adds	r2, r7, r4
 8006f2a:	7812      	ldrb	r2, [r2, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	210c      	movs	r1, #12
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7ff fac6 	bl	80064c8 <WrByte>
 8006f3c:	0003      	movs	r3, r0
 8006f3e:	0019      	movs	r1, r3
 8006f40:	193b      	adds	r3, r7, r4
 8006f42:	193a      	adds	r2, r7, r4
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	701a      	strb	r2, [r3, #0]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	32ff      	adds	r2, #255	; 0xff
 8006f50:	0011      	movs	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7ff fab7 	bl	80064c8 <WrByte>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	193b      	adds	r3, r7, r4
 8006f60:	193a      	adds	r2, r7, r4
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2281      	movs	r2, #129	; 0x81
 8006f6c:	0051      	lsls	r1, r2, #1
 8006f6e:	2200      	movs	r2, #0
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7ff faa9 	bl	80064c8 <WrByte>
 8006f76:	0003      	movs	r3, r0
 8006f78:	0019      	movs	r1, r3
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	193a      	adds	r2, r7, r4
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2285      	movs	r2, #133	; 0x85
 8006f88:	0051      	lsls	r1, r2, #1
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7ff fa9b 	bl	80064c8 <WrByte>
 8006f92:	0003      	movs	r3, r0
 8006f94:	0019      	movs	r1, r3
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	193a      	adds	r2, r7, r4
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	49be      	ldr	r1, [pc, #760]	; (800729c <vl53l5cx_init+0x420>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f7ff fa8e 	bl	80064c8 <WrByte>
 8006fac:	0003      	movs	r3, r0
 8006fae:	0019      	movs	r1, r3
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	193a      	adds	r2, r7, r4
 8006fb4:	7812      	ldrb	r2, [r2, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	49b7      	ldr	r1, [pc, #732]	; (800729c <vl53l5cx_init+0x420>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7ff fa81 	bl	80064c8 <WrByte>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	0019      	movs	r1, r3
 8006fca:	193b      	adds	r3, r7, r4
 8006fcc:	193a      	adds	r2, r7, r4
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2285      	movs	r2, #133	; 0x85
 8006fd8:	0051      	lsls	r1, r2, #1
 8006fda:	2203      	movs	r2, #3
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7ff fa73 	bl	80064c8 <WrByte>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	0019      	movs	r1, r3
 8006fe6:	193b      	adds	r3, r7, r4
 8006fe8:	193a      	adds	r2, r7, r4
 8006fea:	7812      	ldrb	r2, [r2, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	32ff      	adds	r2, #255	; 0xff
 8006ff6:	0011      	movs	r1, r2
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f7ff fa64 	bl	80064c8 <WrByte>
 8007000:	0003      	movs	r3, r0
 8007002:	0019      	movs	r1, r3
 8007004:	193b      	adds	r3, r7, r4
 8007006:	193a      	adds	r2, r7, r4
 8007008:	7812      	ldrb	r2, [r2, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	210c      	movs	r1, #12
 8007014:	0018      	movs	r0, r3
 8007016:	f7ff fa57 	bl	80064c8 <WrByte>
 800701a:	0003      	movs	r3, r0
 800701c:	0019      	movs	r1, r3
 800701e:	193b      	adds	r3, r7, r4
 8007020:	193a      	adds	r2, r7, r4
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2243      	movs	r2, #67	; 0x43
 800702c:	210f      	movs	r1, #15
 800702e:	0018      	movs	r0, r3
 8007030:	f7ff fa4a 	bl	80064c8 <WrByte>
 8007034:	0003      	movs	r3, r0
 8007036:	0019      	movs	r1, r3
 8007038:	193b      	adds	r3, r7, r4
 800703a:	193a      	adds	r2, r7, r4
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	701a      	strb	r2, [r3, #0]
	status |= WaitMs(&(p_dev->platform), 1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2101      	movs	r1, #1
 8007046:	0018      	movs	r0, r3
 8007048:	f7ff fb16 	bl	8006678 <WaitMs>
 800704c:	0003      	movs	r3, r0
 800704e:	0019      	movs	r1, r3
 8007050:	193b      	adds	r3, r7, r4
 8007052:	193a      	adds	r2, r7, r4
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	701a      	strb	r2, [r3, #0]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2240      	movs	r2, #64	; 0x40
 800705e:	210f      	movs	r1, #15
 8007060:	0018      	movs	r0, r3
 8007062:	f7ff fa31 	bl	80064c8 <WrByte>
 8007066:	0003      	movs	r3, r0
 8007068:	0019      	movs	r1, r3
 800706a:	193b      	adds	r3, r7, r4
 800706c:	193a      	adds	r2, r7, r4
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	210a      	movs	r1, #10
 800707a:	0018      	movs	r0, r3
 800707c:	f7ff fa24 	bl	80064c8 <WrByte>
 8007080:	0003      	movs	r3, r0
 8007082:	0019      	movs	r1, r3
 8007084:	193b      	adds	r3, r7, r4
 8007086:	193a      	adds	r2, r7, r4
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	701a      	strb	r2, [r3, #0]
	status |= WaitMs(&(p_dev->platform), 100);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2164      	movs	r1, #100	; 0x64
 8007092:	0018      	movs	r0, r3
 8007094:	f7ff faf0 	bl	8006678 <WaitMs>
 8007098:	0003      	movs	r3, r0
 800709a:	0019      	movs	r1, r3
 800709c:	193b      	adds	r3, r7, r4
 800709e:	193a      	adds	r2, r7, r4
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	701a      	strb	r2, [r3, #0]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	497b      	ldr	r1, [pc, #492]	; (8007298 <vl53l5cx_init+0x41c>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7ff fa0b 	bl	80064c8 <WrByte>
 80070b2:	0003      	movs	r3, r0
 80070b4:	0019      	movs	r1, r3
 80070b6:	193b      	adds	r3, r7, r4
 80070b8:	193a      	adds	r2, r7, r4
 80070ba:	7812      	ldrb	r2, [r2, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	2301      	movs	r3, #1
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	23ff      	movs	r3, #255	; 0xff
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2306      	movs	r3, #6
 80070cc:	2200      	movs	r2, #0
 80070ce:	2101      	movs	r1, #1
 80070d0:	f7ff fae0 	bl	8006694 <_vl53l5cx_poll_for_answer>
 80070d4:	0003      	movs	r3, r0
 80070d6:	0019      	movs	r1, r3
 80070d8:	193b      	adds	r3, r7, r4
 80070da:	193a      	adds	r2, r7, r4
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d000      	beq.n	80070ec <vl53l5cx_init+0x270>
 80070ea:	e3c6      	b.n	800787a <vl53l5cx_init+0x9fe>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	210e      	movs	r1, #14
 80070f2:	0018      	movs	r0, r3
 80070f4:	f7ff f9e8 	bl	80064c8 <WrByte>
 80070f8:	0003      	movs	r3, r0
 80070fa:	0019      	movs	r1, r3
 80070fc:	193b      	adds	r3, r7, r4
 80070fe:	193a      	adds	r2, r7, r4
 8007100:	7812      	ldrb	r2, [r2, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4963      	ldr	r1, [pc, #396]	; (8007298 <vl53l5cx_init+0x41c>)
 800710a:	2202      	movs	r2, #2
 800710c:	0018      	movs	r0, r3
 800710e:	f7ff f9db 	bl	80064c8 <WrByte>
 8007112:	0003      	movs	r3, r0
 8007114:	0019      	movs	r1, r3
 8007116:	193b      	adds	r3, r7, r4
 8007118:	193a      	adds	r2, r7, r4
 800711a:	7812      	ldrb	r2, [r2, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	701a      	strb	r2, [r3, #0]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	220d      	movs	r2, #13
 8007124:	2103      	movs	r1, #3
 8007126:	0018      	movs	r0, r3
 8007128:	f7ff f9ce 	bl	80064c8 <WrByte>
 800712c:	0003      	movs	r3, r0
 800712e:	0019      	movs	r1, r3
 8007130:	193b      	adds	r3, r7, r4
 8007132:	193a      	adds	r2, r7, r4
 8007134:	7812      	ldrb	r2, [r2, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4956      	ldr	r1, [pc, #344]	; (8007298 <vl53l5cx_init+0x41c>)
 800713e:	2201      	movs	r2, #1
 8007140:	0018      	movs	r0, r3
 8007142:	f7ff f9c1 	bl	80064c8 <WrByte>
 8007146:	0003      	movs	r3, r0
 8007148:	0019      	movs	r1, r3
 800714a:	193b      	adds	r3, r7, r4
 800714c:	193a      	adds	r2, r7, r4
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	2310      	movs	r3, #16
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2310      	movs	r3, #16
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2321      	movs	r3, #33	; 0x21
 8007160:	2200      	movs	r2, #0
 8007162:	2101      	movs	r1, #1
 8007164:	f7ff fa96 	bl	8006694 <_vl53l5cx_poll_for_answer>
 8007168:	0003      	movs	r3, r0
 800716a:	0019      	movs	r1, r3
 800716c:	193b      	adds	r3, r7, r4
 800716e:	193a      	adds	r2, r7, r4
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4947      	ldr	r1, [pc, #284]	; (8007298 <vl53l5cx_init+0x41c>)
 800717a:	2200      	movs	r2, #0
 800717c:	0018      	movs	r0, r3
 800717e:	f7ff f9a3 	bl	80064c8 <WrByte>
 8007182:	0003      	movs	r3, r0
 8007184:	0019      	movs	r1, r3
 8007186:	193b      	adds	r3, r7, r4
 8007188:	193a      	adds	r2, r7, r4
 800718a:	7812      	ldrb	r2, [r2, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	701a      	strb	r2, [r3, #0]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	197a      	adds	r2, r7, r5
 8007194:	4940      	ldr	r1, [pc, #256]	; (8007298 <vl53l5cx_init+0x41c>)
 8007196:	0018      	movs	r0, r3
 8007198:	f7ff f954 	bl	8006444 <RdByte>
 800719c:	0003      	movs	r3, r0
 800719e:	0019      	movs	r1, r3
 80071a0:	193b      	adds	r3, r7, r4
 80071a2:	193a      	adds	r2, r7, r4
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	210c      	movs	r1, #12
 80071b0:	0018      	movs	r0, r3
 80071b2:	f7ff f989 	bl	80064c8 <WrByte>
 80071b6:	0003      	movs	r3, r0
 80071b8:	0019      	movs	r1, r3
 80071ba:	193b      	adds	r3, r7, r4
 80071bc:	193a      	adds	r2, r7, r4
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	701a      	strb	r2, [r3, #0]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4934      	ldr	r1, [pc, #208]	; (8007298 <vl53l5cx_init+0x41c>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7ff f97c 	bl	80064c8 <WrByte>
 80071d0:	0003      	movs	r3, r0
 80071d2:	0019      	movs	r1, r3
 80071d4:	193b      	adds	r3, r7, r4
 80071d6:	193a      	adds	r2, r7, r4
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	32ff      	adds	r2, #255	; 0xff
 80071e4:	0011      	movs	r1, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	0018      	movs	r0, r3
 80071ea:	f7ff f96d 	bl	80064c8 <WrByte>
 80071ee:	0003      	movs	r3, r0
 80071f0:	0019      	movs	r1, r3
 80071f2:	193b      	adds	r3, r7, r4
 80071f4:	193a      	adds	r2, r7, r4
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2281      	movs	r2, #129	; 0x81
 8007200:	0051      	lsls	r1, r2, #1
 8007202:	2200      	movs	r2, #0
 8007204:	0018      	movs	r0, r3
 8007206:	f7ff f95f 	bl	80064c8 <WrByte>
 800720a:	0003      	movs	r3, r0
 800720c:	0019      	movs	r1, r3
 800720e:	193b      	adds	r3, r7, r4
 8007210:	193a      	adds	r2, r7, r4
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2285      	movs	r2, #133	; 0x85
 800721c:	0051      	lsls	r1, r2, #1
 800721e:	2201      	movs	r2, #1
 8007220:	0018      	movs	r0, r3
 8007222:	f7ff f951 	bl	80064c8 <WrByte>
 8007226:	0003      	movs	r3, r0
 8007228:	0019      	movs	r1, r3
 800722a:	193b      	adds	r3, r7, r4
 800722c:	193a      	adds	r2, r7, r4
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4919      	ldr	r1, [pc, #100]	; (800729c <vl53l5cx_init+0x420>)
 8007238:	2201      	movs	r2, #1
 800723a:	0018      	movs	r0, r3
 800723c:	f7ff f944 	bl	80064c8 <WrByte>
 8007240:	0003      	movs	r3, r0
 8007242:	0019      	movs	r1, r3
 8007244:	193b      	adds	r3, r7, r4
 8007246:	193a      	adds	r2, r7, r4
 8007248:	7812      	ldrb	r2, [r2, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4912      	ldr	r1, [pc, #72]	; (800729c <vl53l5cx_init+0x420>)
 8007252:	2200      	movs	r2, #0
 8007254:	0018      	movs	r0, r3
 8007256:	f7ff f937 	bl	80064c8 <WrByte>
 800725a:	0003      	movs	r3, r0
 800725c:	0019      	movs	r1, r3
 800725e:	193b      	adds	r3, r7, r4
 8007260:	193a      	adds	r2, r7, r4
 8007262:	7812      	ldrb	r2, [r2, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2285      	movs	r2, #133	; 0x85
 800726c:	0051      	lsls	r1, r2, #1
 800726e:	2203      	movs	r2, #3
 8007270:	0018      	movs	r0, r3
 8007272:	f7ff f929 	bl	80064c8 <WrByte>
 8007276:	0003      	movs	r3, r0
 8007278:	0019      	movs	r1, r3
 800727a:	193b      	adds	r3, r7, r4
 800727c:	193a      	adds	r2, r7, r4
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	e00b      	b.n	80072a0 <vl53l5cx_init+0x424>
 8007288:	00010001 	.word	0x00010001
 800728c:	0801ea08 	.word	0x0801ea08
 8007290:	0801e63c 	.word	0x0801e63c
 8007294:	00000aac 	.word	0x00000aac
 8007298:	00007fff 	.word	0x00007fff
 800729c:	00004002 	.word	0x00004002
 80072a0:	2204      	movs	r2, #4
 80072a2:	32ff      	adds	r2, #255	; 0xff
 80072a4:	0011      	movs	r1, r2
 80072a6:	2201      	movs	r2, #1
 80072a8:	0018      	movs	r0, r3
 80072aa:	f7ff f90d 	bl	80064c8 <WrByte>
 80072ae:	0003      	movs	r3, r0
 80072b0:	0019      	movs	r1, r3
 80072b2:	193b      	adds	r3, r7, r4
 80072b4:	193a      	adds	r2, r7, r4
 80072b6:	7812      	ldrb	r2, [r2, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	49fd      	ldr	r1, [pc, #1012]	; (80076b4 <vl53l5cx_init+0x838>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7ff f900 	bl	80064c8 <WrByte>
 80072c8:	0003      	movs	r3, r0
 80072ca:	0019      	movs	r1, r3
 80072cc:	193b      	adds	r3, r7, r4
 80072ce:	193a      	adds	r2, r7, r4
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	49f7      	ldr	r1, [pc, #988]	; (80076b8 <vl53l5cx_init+0x83c>)
 80072da:	2243      	movs	r2, #67	; 0x43
 80072dc:	0018      	movs	r0, r3
 80072de:	f7ff f8f3 	bl	80064c8 <WrByte>
 80072e2:	0003      	movs	r3, r0
 80072e4:	0019      	movs	r1, r3
 80072e6:	193b      	adds	r3, r7, r4
 80072e8:	193a      	adds	r2, r7, r4
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	49f1      	ldr	r1, [pc, #964]	; (80076b8 <vl53l5cx_init+0x83c>)
 80072f4:	2203      	movs	r2, #3
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7ff f8e6 	bl	80064c8 <WrByte>
 80072fc:	0003      	movs	r3, r0
 80072fe:	0019      	movs	r1, r3
 8007300:	193b      	adds	r3, r7, r4
 8007302:	193a      	adds	r2, r7, r4
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	49ea      	ldr	r1, [pc, #936]	; (80076b8 <vl53l5cx_init+0x83c>)
 800730e:	2201      	movs	r2, #1
 8007310:	0018      	movs	r0, r3
 8007312:	f7ff f8d9 	bl	80064c8 <WrByte>
 8007316:	0003      	movs	r3, r0
 8007318:	0019      	movs	r1, r3
 800731a:	193b      	adds	r3, r7, r4
 800731c:	193a      	adds	r2, r7, r4
 800731e:	7812      	ldrb	r2, [r2, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	49e4      	ldr	r1, [pc, #912]	; (80076b8 <vl53l5cx_init+0x83c>)
 8007328:	2200      	movs	r2, #0
 800732a:	0018      	movs	r0, r3
 800732c:	f7ff f8cc 	bl	80064c8 <WrByte>
 8007330:	0003      	movs	r3, r0
 8007332:	0019      	movs	r1, r3
 8007334:	193b      	adds	r3, r7, r4
 8007336:	193a      	adds	r2, r7, r4
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	49de      	ldr	r1, [pc, #888]	; (80076bc <vl53l5cx_init+0x840>)
 8007342:	2200      	movs	r2, #0
 8007344:	0018      	movs	r0, r3
 8007346:	f7ff f8bf 	bl	80064c8 <WrByte>
 800734a:	0003      	movs	r3, r0
 800734c:	0019      	movs	r1, r3
 800734e:	193b      	adds	r3, r7, r4
 8007350:	193a      	adds	r2, r7, r4
 8007352:	7812      	ldrb	r2, [r2, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	49d9      	ldr	r1, [pc, #868]	; (80076c0 <vl53l5cx_init+0x844>)
 800735c:	2200      	movs	r2, #0
 800735e:	0018      	movs	r0, r3
 8007360:	f7ff f8b2 	bl	80064c8 <WrByte>
 8007364:	0003      	movs	r3, r0
 8007366:	0019      	movs	r1, r3
 8007368:	193b      	adds	r3, r7, r4
 800736a:	193a      	adds	r2, r7, r4
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	701a      	strb	r2, [r3, #0]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	49d3      	ldr	r1, [pc, #844]	; (80076c4 <vl53l5cx_init+0x848>)
 8007376:	2200      	movs	r2, #0
 8007378:	0018      	movs	r0, r3
 800737a:	f7ff f8a5 	bl	80064c8 <WrByte>
 800737e:	0003      	movs	r3, r0
 8007380:	0019      	movs	r1, r3
 8007382:	193b      	adds	r3, r7, r4
 8007384:	193a      	adds	r2, r7, r4
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	197a      	adds	r2, r7, r5
 8007390:	49cc      	ldr	r1, [pc, #816]	; (80076c4 <vl53l5cx_init+0x848>)
 8007392:	0018      	movs	r0, r3
 8007394:	f7ff f856 	bl	8006444 <RdByte>
 8007398:	0003      	movs	r3, r0
 800739a:	0019      	movs	r1, r3
 800739c:	193b      	adds	r3, r7, r4
 800739e:	193a      	adds	r2, r7, r4
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	210c      	movs	r1, #12
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7ff f88b 	bl	80064c8 <WrByte>
 80073b2:	0003      	movs	r3, r0
 80073b4:	0019      	movs	r1, r3
 80073b6:	193b      	adds	r3, r7, r4
 80073b8:	193a      	adds	r2, r7, r4
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	49c0      	ldr	r1, [pc, #768]	; (80076c4 <vl53l5cx_init+0x848>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7ff f87e 	bl	80064c8 <WrByte>
 80073cc:	0003      	movs	r3, r0
 80073ce:	0019      	movs	r1, r3
 80073d0:	193b      	adds	r3, r7, r4
 80073d2:	193a      	adds	r2, r7, r4
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2207      	movs	r2, #7
 80073de:	2120      	movs	r1, #32
 80073e0:	0018      	movs	r0, r3
 80073e2:	f7ff f871 	bl	80064c8 <WrByte>
 80073e6:	0003      	movs	r3, r0
 80073e8:	0019      	movs	r1, r3
 80073ea:	193b      	adds	r3, r7, r4
 80073ec:	193a      	adds	r2, r7, r4
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2206      	movs	r2, #6
 80073f8:	2120      	movs	r1, #32
 80073fa:	0018      	movs	r0, r3
 80073fc:	f7ff f864 	bl	80064c8 <WrByte>
 8007400:	0003      	movs	r3, r0
 8007402:	0019      	movs	r1, r3
 8007404:	193b      	adds	r3, r7, r4
 8007406:	193a      	adds	r2, r7, r4
 8007408:	7812      	ldrb	r2, [r2, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	701a      	strb	r2, [r3, #0]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	49ac      	ldr	r1, [pc, #688]	; (80076c4 <vl53l5cx_init+0x848>)
 8007412:	2209      	movs	r2, #9
 8007414:	0018      	movs	r0, r3
 8007416:	f7ff f857 	bl	80064c8 <WrByte>
 800741a:	0003      	movs	r3, r0
 800741c:	0019      	movs	r1, r3
 800741e:	193b      	adds	r3, r7, r4
 8007420:	193a      	adds	r2, r7, r4
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	2380      	movs	r3, #128	; 0x80
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4aa6      	ldr	r2, [pc, #664]	; (80076c8 <vl53l5cx_init+0x84c>)
 8007430:	2100      	movs	r1, #0
 8007432:	f7ff f87f 	bl	8006534 <WrMulti>
 8007436:	0003      	movs	r3, r0
 8007438:	0019      	movs	r1, r3
 800743a:	193b      	adds	r3, r7, r4
 800743c:	193a      	adds	r2, r7, r4
 800743e:	7812      	ldrb	r2, [r2, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	499f      	ldr	r1, [pc, #636]	; (80076c4 <vl53l5cx_init+0x848>)
 8007448:	220a      	movs	r2, #10
 800744a:	0018      	movs	r0, r3
 800744c:	f7ff f83c 	bl	80064c8 <WrByte>
 8007450:	0003      	movs	r3, r0
 8007452:	0019      	movs	r1, r3
 8007454:	193b      	adds	r3, r7, r4
 8007456:	193a      	adds	r2, r7, r4
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	4a99      	ldr	r2, [pc, #612]	; (80076cc <vl53l5cx_init+0x850>)
 8007466:	2100      	movs	r1, #0
 8007468:	f7ff f864 	bl	8006534 <WrMulti>
 800746c:	0003      	movs	r3, r0
 800746e:	0019      	movs	r1, r3
 8007470:	193b      	adds	r3, r7, r4
 8007472:	193a      	adds	r2, r7, r4
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4991      	ldr	r1, [pc, #580]	; (80076c4 <vl53l5cx_init+0x848>)
 800747e:	220b      	movs	r2, #11
 8007480:	0018      	movs	r0, r3
 8007482:	f7ff f821 	bl	80064c8 <WrByte>
 8007486:	0003      	movs	r3, r0
 8007488:	0019      	movs	r1, r3
 800748a:	193b      	adds	r3, r7, r4
 800748c:	193a      	adds	r2, r7, r4
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	23a0      	movs	r3, #160	; 0xa0
 8007498:	01db      	lsls	r3, r3, #7
 800749a:	4a8d      	ldr	r2, [pc, #564]	; (80076d0 <vl53l5cx_init+0x854>)
 800749c:	2100      	movs	r1, #0
 800749e:	f7ff f849 	bl	8006534 <WrMulti>
 80074a2:	0003      	movs	r3, r0
 80074a4:	0019      	movs	r1, r3
 80074a6:	193b      	adds	r3, r7, r4
 80074a8:	193a      	adds	r2, r7, r4
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4984      	ldr	r1, [pc, #528]	; (80076c4 <vl53l5cx_init+0x848>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7ff f806 	bl	80064c8 <WrByte>
 80074bc:	0003      	movs	r3, r0
 80074be:	0019      	movs	r1, r3
 80074c0:	193b      	adds	r3, r7, r4
 80074c2:	193a      	adds	r2, r7, r4
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	701a      	strb	r2, [r3, #0]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	497d      	ldr	r1, [pc, #500]	; (80076c4 <vl53l5cx_init+0x848>)
 80074ce:	2202      	movs	r2, #2
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7fe fff9 	bl	80064c8 <WrByte>
 80074d6:	0003      	movs	r3, r0
 80074d8:	0019      	movs	r1, r3
 80074da:	193b      	adds	r3, r7, r4
 80074dc:	193a      	adds	r2, r7, r4
 80074de:	7812      	ldrb	r2, [r2, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	220d      	movs	r2, #13
 80074e8:	2103      	movs	r1, #3
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7fe ffec 	bl	80064c8 <WrByte>
 80074f0:	0003      	movs	r3, r0
 80074f2:	0019      	movs	r1, r3
 80074f4:	193b      	adds	r3, r7, r4
 80074f6:	193a      	adds	r2, r7, r4
 80074f8:	7812      	ldrb	r2, [r2, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4970      	ldr	r1, [pc, #448]	; (80076c4 <vl53l5cx_init+0x848>)
 8007502:	2201      	movs	r2, #1
 8007504:	0018      	movs	r0, r3
 8007506:	f7fe ffdf 	bl	80064c8 <WrByte>
 800750a:	0003      	movs	r3, r0
 800750c:	0019      	movs	r1, r3
 800750e:	193b      	adds	r3, r7, r4
 8007510:	193a      	adds	r2, r7, r4
 8007512:	7812      	ldrb	r2, [r2, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	2310      	movs	r3, #16
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	2310      	movs	r3, #16
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	2321      	movs	r3, #33	; 0x21
 8007524:	2200      	movs	r2, #0
 8007526:	2101      	movs	r1, #1
 8007528:	f7ff f8b4 	bl	8006694 <_vl53l5cx_poll_for_answer>
 800752c:	0003      	movs	r3, r0
 800752e:	0019      	movs	r1, r3
 8007530:	193b      	adds	r3, r7, r4
 8007532:	193a      	adds	r2, r7, r4
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 800753a:	193b      	adds	r3, r7, r4
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d000      	beq.n	8007544 <vl53l5cx_init+0x6c8>
 8007542:	e19c      	b.n	800787e <vl53l5cx_init+0xa02>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	495f      	ldr	r1, [pc, #380]	; (80076c4 <vl53l5cx_init+0x848>)
 8007548:	2200      	movs	r2, #0
 800754a:	0018      	movs	r0, r3
 800754c:	f7fe ffbc 	bl	80064c8 <WrByte>
 8007550:	0003      	movs	r3, r0
 8007552:	0019      	movs	r1, r3
 8007554:	193b      	adds	r3, r7, r4
 8007556:	193a      	adds	r2, r7, r4
 8007558:	7812      	ldrb	r2, [r2, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	197a      	adds	r2, r7, r5
 8007562:	4958      	ldr	r1, [pc, #352]	; (80076c4 <vl53l5cx_init+0x848>)
 8007564:	0018      	movs	r0, r3
 8007566:	f7fe ff6d 	bl	8006444 <RdByte>
 800756a:	0003      	movs	r3, r0
 800756c:	0019      	movs	r1, r3
 800756e:	193b      	adds	r3, r7, r4
 8007570:	193a      	adds	r2, r7, r4
 8007572:	7812      	ldrb	r2, [r2, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	210c      	movs	r1, #12
 800757e:	0018      	movs	r0, r3
 8007580:	f7fe ffa2 	bl	80064c8 <WrByte>
 8007584:	0003      	movs	r3, r0
 8007586:	0019      	movs	r1, r3
 8007588:	193b      	adds	r3, r7, r4
 800758a:	193a      	adds	r2, r7, r4
 800758c:	7812      	ldrb	r2, [r2, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	701a      	strb	r2, [r3, #0]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	494b      	ldr	r1, [pc, #300]	; (80076c4 <vl53l5cx_init+0x848>)
 8007596:	2200      	movs	r2, #0
 8007598:	0018      	movs	r0, r3
 800759a:	f7fe ff95 	bl	80064c8 <WrByte>
 800759e:	0003      	movs	r3, r0
 80075a0:	0019      	movs	r1, r3
 80075a2:	193b      	adds	r3, r7, r4
 80075a4:	193a      	adds	r2, r7, r4
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	228a      	movs	r2, #138	; 0x8a
 80075b0:	0051      	lsls	r1, r2, #1
 80075b2:	2200      	movs	r2, #0
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7fe ff87 	bl	80064c8 <WrByte>
 80075ba:	0003      	movs	r3, r0
 80075bc:	0019      	movs	r1, r3
 80075be:	193b      	adds	r3, r7, r4
 80075c0:	193a      	adds	r2, r7, r4
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2216      	movs	r2, #22
 80075cc:	32ff      	adds	r2, #255	; 0xff
 80075ce:	0011      	movs	r1, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	0018      	movs	r0, r3
 80075d4:	f7fe ff78 	bl	80064c8 <WrByte>
 80075d8:	0003      	movs	r3, r0
 80075da:	0019      	movs	r1, r3
 80075dc:	193b      	adds	r3, r7, r4
 80075de:	193a      	adds	r2, r7, r4
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	228b      	movs	r2, #139	; 0x8b
 80075ea:	0051      	lsls	r1, r2, #1
 80075ec:	2242      	movs	r2, #66	; 0x42
 80075ee:	0018      	movs	r0, r3
 80075f0:	f7fe ff6a 	bl	80064c8 <WrByte>
 80075f4:	0003      	movs	r3, r0
 80075f6:	0019      	movs	r1, r3
 80075f8:	193b      	adds	r3, r7, r4
 80075fa:	193a      	adds	r2, r7, r4
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2218      	movs	r2, #24
 8007606:	32ff      	adds	r2, #255	; 0xff
 8007608:	0011      	movs	r1, r2
 800760a:	2200      	movs	r2, #0
 800760c:	0018      	movs	r0, r3
 800760e:	f7fe ff5b 	bl	80064c8 <WrByte>
 8007612:	0003      	movs	r3, r0
 8007614:	0019      	movs	r1, r3
 8007616:	193b      	adds	r3, r7, r4
 8007618:	193a      	adds	r2, r7, r4
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	210b      	movs	r1, #11
 8007626:	0018      	movs	r0, r3
 8007628:	f7fe ff4e 	bl	80064c8 <WrByte>
 800762c:	0003      	movs	r3, r0
 800762e:	0019      	movs	r1, r3
 8007630:	193b      	adds	r3, r7, r4
 8007632:	193a      	adds	r2, r7, r4
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	197a      	adds	r2, r7, r5
 800763e:	4921      	ldr	r1, [pc, #132]	; (80076c4 <vl53l5cx_init+0x848>)
 8007640:	0018      	movs	r0, r3
 8007642:	f7fe feff 	bl	8006444 <RdByte>
 8007646:	0003      	movs	r3, r0
 8007648:	0019      	movs	r1, r3
 800764a:	193b      	adds	r3, r7, r4
 800764c:	193a      	adds	r2, r7, r4
 800764e:	7812      	ldrb	r2, [r2, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	210c      	movs	r1, #12
 800765a:	0018      	movs	r0, r3
 800765c:	f7fe ff34 	bl	80064c8 <WrByte>
 8007660:	0003      	movs	r3, r0
 8007662:	0019      	movs	r1, r3
 8007664:	193b      	adds	r3, r7, r4
 8007666:	193a      	adds	r2, r7, r4
 8007668:	7812      	ldrb	r2, [r2, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	210b      	movs	r1, #11
 8007674:	0018      	movs	r0, r3
 8007676:	f7fe ff27 	bl	80064c8 <WrByte>
 800767a:	0003      	movs	r3, r0
 800767c:	0019      	movs	r1, r3
 800767e:	193b      	adds	r3, r7, r4
 8007680:	193a      	adds	r2, r7, r4
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	0018      	movs	r0, r3
 800768c:	f7ff f87a 	bl	8006784 <_vl53l5cx_poll_for_mcu_boot>
 8007690:	0003      	movs	r3, r0
 8007692:	0019      	movs	r1, r3
 8007694:	193b      	adds	r3, r7, r4
 8007696:	193a      	adds	r2, r7, r4
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 800769e:	193b      	adds	r3, r7, r4
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d000      	beq.n	80076a8 <vl53l5cx_init+0x82c>
 80076a6:	e0ec      	b.n	8007882 <vl53l5cx_init+0xa06>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4906      	ldr	r1, [pc, #24]	; (80076c4 <vl53l5cx_init+0x848>)
 80076ac:	2202      	movs	r2, #2
 80076ae:	0018      	movs	r0, r3
 80076b0:	e010      	b.n	80076d4 <vl53l5cx_init+0x858>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	0000400f 	.word	0x0000400f
 80076b8:	0000021a 	.word	0x0000021a
 80076bc:	00000219 	.word	0x00000219
 80076c0:	0000021b 	.word	0x0000021b
 80076c4:	00007fff 	.word	0x00007fff
 80076c8:	0800963c 	.word	0x0800963c
 80076cc:	0801163c 	.word	0x0801163c
 80076d0:	0801963c 	.word	0x0801963c
 80076d4:	f7fe fef8 	bl	80064c8 <WrByte>
 80076d8:	0003      	movs	r3, r0
 80076da:	0019      	movs	r1, r3
 80076dc:	193b      	adds	r3, r7, r4
 80076de:	193a      	adds	r2, r7, r4
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	701a      	strb	r2, [r3, #0]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4a6a      	ldr	r2, [pc, #424]	; (8007894 <vl53l5cx_init+0xa18>)
 80076ea:	496b      	ldr	r1, [pc, #428]	; (8007898 <vl53l5cx_init+0xa1c>)
 80076ec:	2328      	movs	r3, #40	; 0x28
 80076ee:	f7fe ff21 	bl	8006534 <WrMulti>
 80076f2:	0003      	movs	r3, r0
 80076f4:	0019      	movs	r1, r3
 80076f6:	193b      	adds	r3, r7, r4
 80076f8:	193a      	adds	r2, r7, r4
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	701a      	strb	r2, [r3, #0]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8007700:	23b0      	movs	r3, #176	; 0xb0
 8007702:	019b      	lsls	r3, r3, #6
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	22ff      	movs	r2, #255	; 0xff
 800770c:	9200      	str	r2, [sp, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	2104      	movs	r1, #4
 8007712:	f7fe ffbf 	bl	8006694 <_vl53l5cx_poll_for_answer>
 8007716:	0003      	movs	r3, r0
 8007718:	0019      	movs	r1, r3
 800771a:	193b      	adds	r3, r7, r4
 800771c:	193a      	adds	r2, r7, r4
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8007724:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	26a0      	movs	r6, #160	; 0xa0
 800772a:	00f6      	lsls	r6, r6, #3
 800772c:	199a      	adds	r2, r3, r6
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800772e:	23f6      	movs	r3, #246	; 0xf6
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	495a      	ldr	r1, [pc, #360]	; (800789c <vl53l5cx_init+0xa20>)
 8007734:	f7fe ff26 	bl	8006584 <RdMulti>
 8007738:	0003      	movs	r3, r0
 800773a:	0019      	movs	r1, r3
 800773c:	193b      	adds	r3, r7, r4
 800773e:	193a      	adds	r2, r7, r4
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	701a      	strb	r2, [r3, #0]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	0018      	movs	r0, r3
 800774a:	3010      	adds	r0, #16
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	22a0      	movs	r2, #160	; 0xa0
 8007750:	00d2      	lsls	r2, r2, #3
 8007752:	4694      	mov	ip, r2
 8007754:	4463      	add	r3, ip
 8007756:	22f4      	movs	r2, #244	; 0xf4
 8007758:	0052      	lsls	r2, r2, #1
 800775a:	0019      	movs	r1, r3
 800775c:	f001 fce2 	bl	8009124 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2110      	movs	r1, #16
 8007764:	0018      	movs	r0, r3
 8007766:	f7ff f865 	bl	8006834 <_vl53l5cx_send_offset_data>
 800776a:	0003      	movs	r3, r0
 800776c:	0019      	movs	r1, r3
 800776e:	193b      	adds	r3, r7, r4
 8007770:	193a      	adds	r2, r7, r4
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	701a      	strb	r2, [r3, #0]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	001a      	movs	r2, r3
 800777c:	32f9      	adds	r2, #249	; 0xf9
 800777e:	32ff      	adds	r2, #255	; 0xff
 8007780:	4b47      	ldr	r3, [pc, #284]	; (80078a0 <vl53l5cx_init+0xa24>)
 8007782:	0010      	movs	r0, r2
 8007784:	0019      	movs	r1, r3
 8007786:	23c2      	movs	r3, #194	; 0xc2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	001a      	movs	r2, r3
 800778c:	f001 fcca 	bl	8009124 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2110      	movs	r1, #16
 8007794:	0018      	movs	r0, r3
 8007796:	f7ff fa25 	bl	8006be4 <_vl53l5cx_send_xtalk_data>
 800779a:	0003      	movs	r3, r0
 800779c:	0019      	movs	r1, r3
 800779e:	193b      	adds	r3, r7, r4
 80077a0:	193a      	adds	r2, r7, r4
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	701a      	strb	r2, [r3, #0]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	23f3      	movs	r3, #243	; 0xf3
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	493c      	ldr	r1, [pc, #240]	; (80078a4 <vl53l5cx_init+0xa28>)
 80077b4:	f7fe febe 	bl	8006534 <WrMulti>
 80077b8:	0003      	movs	r3, r0
 80077ba:	0019      	movs	r1, r3
 80077bc:	193b      	adds	r3, r7, r4
 80077be:	193a      	adds	r2, r7, r4
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	701a      	strb	r2, [r3, #0]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80077c6:	23b0      	movs	r3, #176	; 0xb0
 80077c8:	019b      	lsls	r3, r3, #6
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	2203      	movs	r2, #3
 80077ce:	9201      	str	r2, [sp, #4]
 80077d0:	22ff      	movs	r2, #255	; 0xff
 80077d2:	9200      	str	r2, [sp, #0]
 80077d4:	2201      	movs	r2, #1
 80077d6:	2104      	movs	r1, #4
 80077d8:	f7fe ff5c 	bl	8006694 <_vl53l5cx_poll_for_answer>
 80077dc:	0003      	movs	r3, r0
 80077de:	0019      	movs	r1, r3
 80077e0:	193b      	adds	r3, r7, r4
 80077e2:	193a      	adds	r2, r7, r4
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80077ea:	4a2f      	ldr	r2, [pc, #188]	; (80078a8 <vl53l5cx_init+0xa2c>)
 80077ec:	2310      	movs	r3, #16
 80077ee:	18f9      	adds	r1, r7, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	2304      	movs	r3, #4
 80077f4:	f000 ffe0 	bl	80087b8 <vl53l5cx_dci_write_data>
 80077f8:	0003      	movs	r3, r0
 80077fa:	0019      	movs	r1, r3
 80077fc:	193b      	adds	r3, r7, r4
 80077fe:	193a      	adds	r2, r7, r4
 8007800:	7812      	ldrb	r2, [r2, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8007806:	4a29      	ldr	r2, [pc, #164]	; (80078ac <vl53l5cx_init+0xa30>)
 8007808:	230c      	movs	r3, #12
 800780a:	18f9      	adds	r1, r7, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	2304      	movs	r3, #4
 8007810:	f000 ffd2 	bl	80087b8 <vl53l5cx_dci_write_data>
 8007814:	0003      	movs	r3, r0
 8007816:	0019      	movs	r1, r3
 8007818:	193b      	adds	r3, r7, r4
 800781a:	193a      	adds	r2, r7, r4
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	701a      	strb	r2, [r3, #0]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8007822:	197b      	adds	r3, r7, r5
 8007824:	2201      	movs	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	1999      	adds	r1, r3, r6
 800782c:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <vl53l5cx_init+0xa34>)
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	2326      	movs	r3, #38	; 0x26
 8007832:	9302      	str	r3, [sp, #8]
 8007834:	2301      	movs	r3, #1
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	197b      	adds	r3, r7, r5
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2328      	movs	r3, #40	; 0x28
 800783e:	f001 f899 	bl	8008974 <vl53l5cx_dci_replace_data>
 8007842:	0003      	movs	r3, r0
 8007844:	0019      	movs	r1, r3
 8007846:	193b      	adds	r3, r7, r4
 8007848:	193a      	adds	r2, r7, r4
 800784a:	7812      	ldrb	r2, [r2, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	701a      	strb	r2, [r3, #0]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1999      	adds	r1, r3, r6
 8007854:	4a16      	ldr	r2, [pc, #88]	; (80078b0 <vl53l5cx_init+0xa34>)
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	2325      	movs	r3, #37	; 0x25
 800785a:	9302      	str	r3, [sp, #8]
 800785c:	2301      	movs	r3, #1
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	197b      	adds	r3, r7, r5
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	2328      	movs	r3, #40	; 0x28
 8007866:	f001 f885 	bl	8008974 <vl53l5cx_dci_replace_data>
 800786a:	0003      	movs	r3, r0
 800786c:	0019      	movs	r1, r3
 800786e:	193b      	adds	r3, r7, r4
 8007870:	193a      	adds	r2, r7, r4
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	e004      	b.n	8007884 <vl53l5cx_init+0xa08>
		goto exit;
 800787a:	46c0      	nop			; (mov r8, r8)
 800787c:	e002      	b.n	8007884 <vl53l5cx_init+0xa08>
		goto exit;
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	e000      	b.n	8007884 <vl53l5cx_init+0xa08>
		goto exit;
 8007882:	46c0      	nop			; (mov r8, r8)
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8007884:	2317      	movs	r3, #23
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	781b      	ldrb	r3, [r3, #0]
}
 800788a:	0018      	movs	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	b007      	add	sp, #28
 8007890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	0801ed10 	.word	0x0801ed10
 8007898:	00002fd8 	.word	0x00002fd8
 800789c:	00002c04 	.word	0x00002c04
 80078a0:	0801ea08 	.word	0x0801ea08
 80078a4:	00002c34 	.word	0x00002c34
 80078a8:	0000db80 	.word	0x0000db80
 80078ac:	0000d964 	.word	0x0000d964
 80078b0:	0000e108 	.word	0x0000e108

080078b4 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 80078b4:	b5b0      	push	{r4, r5, r7, lr}
 80078b6:	b09c      	sub	sp, #112	; 0x70
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 80078bc:	2467      	movs	r4, #103	; 0x67
 80078be:	193b      	adds	r3, r7, r4
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 80078c4:	2150      	movs	r1, #80	; 0x50
 80078c6:	187b      	adds	r3, r7, r1
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	187b      	adds	r3, r7, r1
 80078ce:	2200      	movs	r2, #0
 80078d0:	605a      	str	r2, [r3, #4]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80078d2:	234c      	movs	r3, #76	; 0x4c
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	22c0      	movs	r2, #192	; 0xc0
 80078d8:	0092      	lsls	r2, r2, #2
 80078da:	601a      	str	r2, [r3, #0]

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 80078dc:	235b      	movs	r3, #91	; 0x5b
 80078de:	18fa      	adds	r2, r7, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	0011      	movs	r1, r2
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 fd6d 	bl	80083c4 <vl53l5cx_get_resolution>
 80078ea:	0003      	movs	r3, r0
 80078ec:	0019      	movs	r1, r3
 80078ee:	193b      	adds	r3, r7, r4
 80078f0:	193a      	adds	r2, r7, r4
 80078f2:	7812      	ldrb	r2, [r2, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	701a      	strb	r2, [r3, #0]
	p_dev->data_read_size = 0;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	22ff      	movs	r2, #255	; 0xff
 8007902:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8007904:	253c      	movs	r5, #60	; 0x3c
 8007906:	197b      	adds	r3, r7, r5
 8007908:	4ab9      	ldr	r2, [pc, #740]	; (8007bf0 <vl53l5cx_start_ranging+0x33c>)
 800790a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800790c:	c313      	stmia	r3!, {r0, r1, r4}
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	601a      	str	r2, [r3, #0]
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8007912:	230c      	movs	r3, #12
 8007914:	18fb      	adds	r3, r7, r3
 8007916:	4ab7      	ldr	r2, [pc, #732]	; (8007bf4 <vl53l5cx_start_ranging+0x340>)
 8007918:	ca13      	ldmia	r2!, {r0, r1, r4}
 800791a:	c313      	stmia	r3!, {r0, r1, r4}
 800791c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800791e:	c313      	stmia	r3!, {r0, r1, r4}
 8007920:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007922:	c313      	stmia	r3!, {r0, r1, r4}
 8007924:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007926:	c313      	stmia	r3!, {r0, r1, r4}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8007928:	197b      	adds	r3, r7, r5
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	001a      	movs	r2, r3
 8007930:	197b      	adds	r3, r7, r5
 8007932:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8007934:	0029      	movs	r1, r5
 8007936:	197b      	adds	r3, r7, r5
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3310      	adds	r3, #16
 800793c:	001a      	movs	r2, r3
 800793e:	187b      	adds	r3, r7, r1
 8007940:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8007942:	187b      	adds	r3, r7, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3320      	adds	r3, #32
 8007948:	001a      	movs	r2, r3
 800794a:	187b      	adds	r3, r7, r1
 800794c:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 800794e:	187b      	adds	r3, r7, r1
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3340      	adds	r3, #64	; 0x40
 8007954:	001a      	movs	r2, r3
 8007956:	187b      	adds	r3, r7, r1
 8007958:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 800795a:	187b      	adds	r3, r7, r1
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3380      	adds	r3, #128	; 0x80
 8007960:	001a      	movs	r2, r3
 8007962:	187b      	adds	r3, r7, r1
 8007964:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8007966:	187b      	adds	r3, r7, r1
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	32ff      	adds	r2, #255	; 0xff
 800796e:	187b      	adds	r3, r7, r1
 8007970:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8007972:	187b      	adds	r3, r7, r1
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2280      	movs	r2, #128	; 0x80
 8007978:	0092      	lsls	r2, r2, #2
 800797a:	189a      	adds	r2, r3, r2
 800797c:	187b      	adds	r3, r7, r1
 800797e:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8007980:	187b      	adds	r3, r7, r1
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2280      	movs	r2, #128	; 0x80
 8007986:	00d2      	lsls	r2, r2, #3
 8007988:	189a      	adds	r2, r3, r2
 800798a:	187b      	adds	r3, r7, r1
 800798c:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 800798e:	187b      	adds	r3, r7, r1
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	0112      	lsls	r2, r2, #4
 8007996:	189a      	adds	r2, r3, r2
 8007998:	187b      	adds	r3, r7, r1
 800799a:	601a      	str	r2, [r3, #0]
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800799c:	2300      	movs	r3, #0
 800799e:	663b      	str	r3, [r7, #96]	; 0x60
 80079a0:	e076      	b.n	8007a90 <vl53l5cx_start_ranging+0x1dc>
	{
		if ((output[i] == (uint8_t)0) 
 80079a2:	200c      	movs	r0, #12
 80079a4:	183b      	adds	r3, r7, r0
 80079a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079a8:	0092      	lsls	r2, r2, #2
 80079aa:	58d3      	ldr	r3, [r2, r3]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d06b      	beq.n	8007a88 <vl53l5cx_start_ranging+0x1d4>
                    || ((output_bh_enable[i/(uint32_t)32]
 80079b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079b2:	095a      	lsrs	r2, r3, #5
 80079b4:	233c      	movs	r3, #60	; 0x3c
 80079b6:	18fb      	adds	r3, r7, r3
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	58d2      	ldr	r2, [r2, r3]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80079bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079be:	211f      	movs	r1, #31
 80079c0:	400b      	ands	r3, r1
 80079c2:	40da      	lsrs	r2, r3
 80079c4:	0013      	movs	r3, r2
 80079c6:	2201      	movs	r2, #1
 80079c8:	4013      	ands	r3, r2
                    || ((output_bh_enable[i/(uint32_t)32]
 80079ca:	d05d      	beq.n	8007a88 <vl53l5cx_start_ranging+0x1d4>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80079cc:	183a      	adds	r2, r7, r0
 80079ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	18d3      	adds	r3, r2, r3
 80079d4:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80079d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	220f      	movs	r2, #15
 80079dc:	4013      	ands	r3, r2
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d041      	beq.n	8007a68 <vl53l5cx_start_ranging+0x1b4>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80079e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	071b      	lsls	r3, r3, #28
 80079ea:	0f1b      	lsrs	r3, r3, #28
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b0c      	cmp	r3, #12
 80079f0:	d83a      	bhi.n	8007a68 <vl53l5cx_start_ranging+0x1b4>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80079f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	4a80      	ldr	r2, [pc, #512]	; (8007bf8 <vl53l5cx_start_ranging+0x344>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d914      	bls.n	8007a26 <vl53l5cx_start_ranging+0x172>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80079fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079fe:	885b      	ldrh	r3, [r3, #2]
 8007a00:	4a7e      	ldr	r2, [pc, #504]	; (8007bfc <vl53l5cx_start_ranging+0x348>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d80f      	bhi.n	8007a26 <vl53l5cx_start_ranging+0x172>
			{
				bh_ptr->size = resolution;
 8007a06:	235b      	movs	r3, #91	; 0x5b
 8007a08:	18fb      	adds	r3, r7, r3
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	051b      	lsls	r3, r3, #20
 8007a0e:	0d1b      	lsrs	r3, r3, #20
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a14:	0110      	lsls	r0, r2, #4
 8007a16:	881a      	ldrh	r2, [r3, #0]
 8007a18:	210f      	movs	r1, #15
 8007a1a:	400a      	ands	r2, r1
 8007a1c:	1c11      	adds	r1, r2, #0
 8007a1e:	1c02      	adds	r2, r0, #0
 8007a20:	430a      	orrs	r2, r1
 8007a22:	801a      	strh	r2, [r3, #0]
 8007a24:	e00e      	b.n	8007a44 <vl53l5cx_start_ranging+0x190>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8007a26:	235b      	movs	r3, #91	; 0x5b
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	051b      	lsls	r3, r3, #20
 8007a2e:	0d1b      	lsrs	r3, r3, #20
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a34:	0110      	lsls	r0, r2, #4
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	210f      	movs	r1, #15
 8007a3a:	400a      	ands	r2, r1
 8007a3c:	1c11      	adds	r1, r2, #0
 8007a3e:	1c02      	adds	r2, r0, #0
 8007a40:	430a      	orrs	r2, r1
 8007a42:	801a      	strh	r2, [r3, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	0712      	lsls	r2, r2, #28
 8007a4e:	0f12      	lsrs	r2, r2, #28
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	0011      	movs	r1, r2
 8007a54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a56:	8812      	ldrh	r2, [r2, #0]
 8007a58:	0412      	lsls	r2, r2, #16
 8007a5a:	0d12      	lsrs	r2, r2, #20
 8007a5c:	b292      	uxth	r2, r2
 8007a5e:	434a      	muls	r2, r1
 8007a60:	189a      	adds	r2, r3, r2
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	e009      	b.n	8007a7c <vl53l5cx_start_ranging+0x1c8>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a6e:	8812      	ldrh	r2, [r2, #0]
 8007a70:	0412      	lsls	r2, r2, #16
 8007a72:	0d12      	lsrs	r2, r2, #20
 8007a74:	b292      	uxth	r2, r2
 8007a76:	189a      	adds	r2, r3, r2
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	1d1a      	adds	r2, r3, #4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	605a      	str	r2, [r3, #4]
 8007a86:	e000      	b.n	8007a8a <vl53l5cx_start_ranging+0x1d6>
			continue;
 8007a88:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8007a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a92:	2b0b      	cmp	r3, #11
 8007a94:	d800      	bhi.n	8007a98 <vl53l5cx_start_ranging+0x1e4>
 8007a96:	e784      	b.n	80079a2 <vl53l5cx_start_ranging+0xee>
	}
	p_dev->data_read_size += (uint32_t)24;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8007aa4:	4a56      	ldr	r2, [pc, #344]	; (8007c00 <vl53l5cx_start_ranging+0x34c>)
 8007aa6:	230c      	movs	r3, #12
 8007aa8:	18f9      	adds	r1, r7, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	2330      	movs	r3, #48	; 0x30
 8007aae:	f000 fe83 	bl	80087b8 <vl53l5cx_dci_write_data>
 8007ab2:	0003      	movs	r3, r0
 8007ab4:	0019      	movs	r1, r3
 8007ab6:	2467      	movs	r4, #103	; 0x67
 8007ab8:	193b      	adds	r3, r7, r4
 8007aba:	193a      	adds	r2, r7, r4
 8007abc:	7812      	ldrb	r2, [r2, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	2150      	movs	r1, #80	; 0x50
 8007ac8:	187b      	adds	r3, r7, r1
 8007aca:	601a      	str	r2, [r3, #0]
	header_config[1] = i + (uint32_t)1;
 8007acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	187b      	adds	r3, r7, r1
 8007ad2:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8007ad4:	4a4b      	ldr	r2, [pc, #300]	; (8007c04 <vl53l5cx_start_ranging+0x350>)
 8007ad6:	1879      	adds	r1, r7, r1
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	2308      	movs	r3, #8
 8007adc:	f000 fe6c 	bl	80087b8 <vl53l5cx_dci_write_data>
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	0019      	movs	r1, r3
 8007ae4:	193b      	adds	r3, r7, r4
 8007ae6:	193a      	adds	r2, r7, r4
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8007aee:	4a46      	ldr	r2, [pc, #280]	; (8007c08 <vl53l5cx_start_ranging+0x354>)
 8007af0:	233c      	movs	r3, #60	; 0x3c
 8007af2:	18f9      	adds	r1, r7, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	2310      	movs	r3, #16
 8007af8:	f000 fe5e 	bl	80087b8 <vl53l5cx_dci_write_data>
 8007afc:	0003      	movs	r3, r0
 8007afe:	0019      	movs	r1, r3
 8007b00:	193b      	adds	r3, r7, r4
 8007b02:	193a      	adds	r2, r7, r4
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	493f      	ldr	r1, [pc, #252]	; (8007c0c <vl53l5cx_start_ranging+0x358>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	0018      	movs	r0, r3
 8007b12:	f7fe fcd9 	bl	80064c8 <WrByte>
 8007b16:	0003      	movs	r3, r0
 8007b18:	0019      	movs	r1, r3
 8007b1a:	193b      	adds	r3, r7, r4
 8007b1c:	193a      	adds	r2, r7, r4
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2205      	movs	r2, #5
 8007b28:	2109      	movs	r1, #9
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f7fe fccc 	bl	80064c8 <WrByte>
 8007b30:	0003      	movs	r3, r0
 8007b32:	0019      	movs	r1, r3
 8007b34:	193b      	adds	r3, r7, r4
 8007b36:	193a      	adds	r2, r7, r4
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4932      	ldr	r1, [pc, #200]	; (8007c0c <vl53l5cx_start_ranging+0x358>)
 8007b42:	2202      	movs	r2, #2
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7fe fcbf 	bl	80064c8 <WrByte>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	0019      	movs	r1, r3
 8007b4e:	193b      	adds	r3, r7, r4
 8007b50:	193a      	adds	r2, r7, r4
 8007b52:	7812      	ldrb	r2, [r2, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	701a      	strb	r2, [r3, #0]

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	234c      	movs	r3, #76	; 0x4c
 8007b5c:	18fa      	adds	r2, r7, r3
 8007b5e:	492c      	ldr	r1, [pc, #176]	; (8007c10 <vl53l5cx_start_ranging+0x35c>)
 8007b60:	2304      	movs	r3, #4
 8007b62:	f7fe fce7 	bl	8006534 <WrMulti>
 8007b66:	0003      	movs	r3, r0
 8007b68:	0019      	movs	r1, r3
 8007b6a:	193b      	adds	r3, r7, r4
 8007b6c:	193a      	adds	r2, r7, r4
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	701a      	strb	r2, [r3, #0]
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8007b74:	23b0      	movs	r3, #176	; 0xb0
 8007b76:	019b      	lsls	r3, r3, #6
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	22ff      	movs	r2, #255	; 0xff
 8007b80:	9200      	str	r2, [sp, #0]
 8007b82:	2201      	movs	r2, #1
 8007b84:	2104      	movs	r1, #4
 8007b86:	f7fe fd85 	bl	8006694 <_vl53l5cx_poll_for_answer>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	0019      	movs	r1, r3
 8007b8e:	193b      	adds	r3, r7, r4
 8007b90:	193a      	adds	r2, r7, r4
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	22a0      	movs	r2, #160	; 0xa0
 8007b9c:	00d2      	lsls	r2, r2, #3
 8007b9e:	1899      	adds	r1, r3, r2
	status |= vl53l5cx_dci_read_data(p_dev,
 8007ba0:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <vl53l5cx_start_ranging+0x360>)
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	f000 fd61 	bl	800866c <vl53l5cx_dci_read_data>
 8007baa:	0003      	movs	r3, r0
 8007bac:	0019      	movs	r1, r3
 8007bae:	193b      	adds	r3, r7, r4
 8007bb0:	193a      	adds	r2, r7, r4
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	701a      	strb	r2, [r3, #0]
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	22a1      	movs	r2, #161	; 0xa1
 8007bbc:	00d2      	lsls	r2, r2, #3
 8007bbe:	1899      	adds	r1, r3, r2
 8007bc0:	2558      	movs	r5, #88	; 0x58
 8007bc2:	197b      	adds	r3, r7, r5
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f001 faac 	bl	8009124 <memcpy>
	if(tmp != p_dev->data_read_size)
 8007bcc:	197b      	adds	r3, r7, r5
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	001a      	movs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d002      	beq.n	8007be0 <vl53l5cx_start_ranging+0x32c>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8007bda:	193b      	adds	r3, r7, r4
 8007bdc:	22ff      	movs	r2, #255	; 0xff
 8007bde:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8007be0:	2367      	movs	r3, #103	; 0x67
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	781b      	ldrb	r3, [r3, #0]
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b01a      	add	sp, #104	; 0x68
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	080094a8 	.word	0x080094a8
 8007bf4:	080094b8 	.word	0x080094b8
 8007bf8:	000054cf 	.word	0x000054cf
 8007bfc:	0000588f 	.word	0x0000588f
 8007c00:	0000d980 	.word	0x0000d980
 8007c04:	0000d968 	.word	0x0000d968
 8007c08:	0000d970 	.word	0x0000d970
 8007c0c:	00007fff 	.word	0x00007fff
 8007c10:	00002ffc 	.word	0x00002ffc
 8007c14:	00005440 	.word	0x00005440

08007c18 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8007c18:	b5b0      	push	{r4, r5, r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8007c20:	2313      	movs	r3, #19
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	2417      	movs	r4, #23
 8007c2a:	193b      	adds	r3, r7, r4
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
	uint16_t timeout = 0;
 8007c30:	2314      	movs	r3, #20
 8007c32:	18fb      	adds	r3, r7, r3
 8007c34:	2200      	movs	r2, #0
 8007c36:	801a      	strh	r2, [r3, #0]
	uint32_t auto_stop_flag = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	230c      	movs	r3, #12
 8007c40:	18fa      	adds	r2, r7, r3
 8007c42:	4975      	ldr	r1, [pc, #468]	; (8007e18 <vl53l5cx_stop_ranging+0x200>)
 8007c44:	2304      	movs	r3, #4
 8007c46:	f7fe fc9d 	bl	8006584 <RdMulti>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	193b      	adds	r3, r7, r4
 8007c50:	193a      	adds	r2, r7, r4
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	701a      	strb	r2, [r3, #0]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a70      	ldr	r2, [pc, #448]	; (8007e1c <vl53l5cx_stop_ranging+0x204>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d062      	beq.n	8007d26 <vl53l5cx_stop_ranging+0x10e>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a6f      	ldr	r2, [pc, #444]	; (8007e20 <vl53l5cx_stop_ranging+0x208>)
 8007c64:	5c9b      	ldrb	r3, [r3, r2]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d15d      	bne.n	8007d26 <vl53l5cx_stop_ranging+0x10e>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	496d      	ldr	r1, [pc, #436]	; (8007e24 <vl53l5cx_stop_ranging+0x20c>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	0018      	movs	r0, r3
 8007c72:	f7fe fc29 	bl	80064c8 <WrByte>
 8007c76:	0003      	movs	r3, r0
 8007c78:	0019      	movs	r1, r3
 8007c7a:	193b      	adds	r3, r7, r4
 8007c7c:	193a      	adds	r2, r7, r4
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	701a      	strb	r2, [r3, #0]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2216      	movs	r2, #22
 8007c88:	2115      	movs	r1, #21
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f7fe fc1c 	bl	80064c8 <WrByte>
 8007c90:	0003      	movs	r3, r0
 8007c92:	0019      	movs	r1, r3
 8007c94:	193b      	adds	r3, r7, r4
 8007c96:	193a      	adds	r2, r7, r4
 8007c98:	7812      	ldrb	r2, [r2, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	701a      	strb	r2, [r3, #0]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	2114      	movs	r1, #20
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f7fe fc0f 	bl	80064c8 <WrByte>
 8007caa:	0003      	movs	r3, r0
 8007cac:	0019      	movs	r1, r3
 8007cae:	193b      	adds	r3, r7, r4
 8007cb0:	193a      	adds	r2, r7, r4
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8007cb8:	e02f      	b.n	8007d1a <vl53l5cx_stop_ranging+0x102>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2513      	movs	r5, #19
 8007cbe:	197a      	adds	r2, r7, r5
 8007cc0:	2106      	movs	r1, #6
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7fe fbbe 	bl	8006444 <RdByte>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	0019      	movs	r1, r3
 8007ccc:	2417      	movs	r4, #23
 8007cce:	193b      	adds	r3, r7, r4
 8007cd0:	193a      	adds	r2, r7, r4
 8007cd2:	7812      	ldrb	r2, [r2, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	701a      	strb	r2, [r3, #0]
			status |= WaitMs(&(p_dev->platform), 10);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	210a      	movs	r1, #10
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7fe fccb 	bl	8006678 <WaitMs>
 8007ce2:	0003      	movs	r3, r0
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	0020      	movs	r0, r4
 8007ce8:	183b      	adds	r3, r7, r0
 8007cea:	183a      	adds	r2, r7, r0
 8007cec:	7812      	ldrb	r2, [r2, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	701a      	strb	r2, [r3, #0]
			timeout++;	/* Timeout reached after 5 seconds */
 8007cf2:	2114      	movs	r1, #20
 8007cf4:	187b      	adds	r3, r7, r1
 8007cf6:	881a      	ldrh	r2, [r3, #0]
 8007cf8:	187b      	adds	r3, r7, r1
 8007cfa:	3201      	adds	r2, #1
 8007cfc:	801a      	strh	r2, [r3, #0]

			if(timeout > (uint16_t)500)
 8007cfe:	187b      	adds	r3, r7, r1
 8007d00:	881a      	ldrh	r2, [r3, #0]
 8007d02:	23fa      	movs	r3, #250	; 0xfa
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d907      	bls.n	8007d1a <vl53l5cx_stop_ranging+0x102>
			{
				status |= tmp;
 8007d0a:	197b      	adds	r3, r7, r5
 8007d0c:	7819      	ldrb	r1, [r3, #0]
 8007d0e:	183b      	adds	r3, r7, r0
 8007d10:	183a      	adds	r2, r7, r0
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	701a      	strb	r2, [r3, #0]
				break;
 8007d18:	e005      	b.n	8007d26 <vl53l5cx_stop_ranging+0x10e>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8007d1a:	2313      	movs	r3, #19
 8007d1c:	18fb      	adds	r3, r7, r3
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b25b      	sxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dac9      	bge.n	8007cba <vl53l5cx_stop_ranging+0xa2>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2413      	movs	r4, #19
 8007d2a:	193a      	adds	r2, r7, r4
 8007d2c:	2106      	movs	r1, #6
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f7fe fb88 	bl	8006444 <RdByte>
 8007d34:	0003      	movs	r3, r0
 8007d36:	0019      	movs	r1, r3
 8007d38:	2517      	movs	r5, #23
 8007d3a:	197b      	adds	r3, r7, r5
 8007d3c:	197a      	adds	r2, r7, r5
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	701a      	strb	r2, [r3, #0]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8007d44:	193b      	adds	r3, r7, r4
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	b25b      	sxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da1b      	bge.n	8007d86 <vl53l5cx_stop_ranging+0x16e>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	193a      	adds	r2, r7, r4
 8007d52:	2107      	movs	r1, #7
 8007d54:	0018      	movs	r0, r3
 8007d56:	f7fe fb75 	bl	8006444 <RdByte>
 8007d5a:	0003      	movs	r3, r0
 8007d5c:	0019      	movs	r1, r3
 8007d5e:	197b      	adds	r3, r7, r5
 8007d60:	197a      	adds	r2, r7, r5
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	701a      	strb	r2, [r3, #0]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8007d68:	193b      	adds	r3, r7, r4
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b84      	cmp	r3, #132	; 0x84
 8007d6e:	d00a      	beq.n	8007d86 <vl53l5cx_stop_ranging+0x16e>
 8007d70:	193b      	adds	r3, r7, r4
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b85      	cmp	r3, #133	; 0x85
 8007d76:	d006      	beq.n	8007d86 <vl53l5cx_stop_ranging+0x16e>
		   status |= tmp;
 8007d78:	193b      	adds	r3, r7, r4
 8007d7a:	7819      	ldrb	r1, [r3, #0]
 8007d7c:	197b      	adds	r3, r7, r5
 8007d7e:	197a      	adds	r2, r7, r5
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4926      	ldr	r1, [pc, #152]	; (8007e24 <vl53l5cx_stop_ranging+0x20c>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	0018      	movs	r0, r3
 8007d8e:	f7fe fb9b 	bl	80064c8 <WrByte>
 8007d92:	0003      	movs	r3, r0
 8007d94:	0019      	movs	r1, r3
 8007d96:	2417      	movs	r4, #23
 8007d98:	193b      	adds	r3, r7, r4
 8007d9a:	193a      	adds	r2, r7, r4
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2114      	movs	r1, #20
 8007da8:	0018      	movs	r0, r3
 8007daa:	f7fe fb8d 	bl	80064c8 <WrByte>
 8007dae:	0003      	movs	r3, r0
 8007db0:	0019      	movs	r1, r3
 8007db2:	193b      	adds	r3, r7, r4
 8007db4:	193a      	adds	r2, r7, r4
 8007db6:	7812      	ldrb	r2, [r2, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2115      	movs	r1, #21
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f7fe fb80 	bl	80064c8 <WrByte>
 8007dc8:	0003      	movs	r3, r0
 8007dca:	0019      	movs	r1, r3
 8007dcc:	193b      	adds	r3, r7, r4
 8007dce:	193a      	adds	r2, r7, r4
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	701a      	strb	r2, [r3, #0]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	2109      	movs	r1, #9
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7fe fb73 	bl	80064c8 <WrByte>
 8007de2:	0003      	movs	r3, r0
 8007de4:	0019      	movs	r1, r3
 8007de6:	193b      	adds	r3, r7, r4
 8007de8:	193a      	adds	r2, r7, r4
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	490c      	ldr	r1, [pc, #48]	; (8007e24 <vl53l5cx_stop_ranging+0x20c>)
 8007df4:	2202      	movs	r2, #2
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7fe fb66 	bl	80064c8 <WrByte>
 8007dfc:	0003      	movs	r3, r0
 8007dfe:	0019      	movs	r1, r3
 8007e00:	193b      	adds	r3, r7, r4
 8007e02:	193a      	adds	r2, r7, r4
 8007e04:	7812      	ldrb	r2, [r2, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	701a      	strb	r2, [r3, #0]

	return status;
 8007e0a:	193b      	adds	r3, r7, r4
 8007e0c:	781b      	ldrb	r3, [r3, #0]
}
 8007e0e:	0018      	movs	r0, r3
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b006      	add	sp, #24
 8007e14:	bdb0      	pop	{r4, r5, r7, pc}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	00002ffc 	.word	0x00002ffc
 8007e1c:	000004ff 	.word	0x000004ff
 8007e20:	00000aac 	.word	0x00000aac
 8007e24:	00007fff 	.word	0x00007fff

08007e28 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007e32:	240f      	movs	r4, #15
 8007e34:	193b      	adds	r3, r7, r4
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	22a0      	movs	r2, #160	; 0xa0
 8007e40:	00d2      	lsls	r2, r2, #3
 8007e42:	189a      	adds	r2, r3, r2
 8007e44:	2304      	movs	r3, #4
 8007e46:	2100      	movs	r1, #0
 8007e48:	f7fe fb9c 	bl	8006584 <RdMulti>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	0019      	movs	r1, r3
 8007e50:	193b      	adds	r3, r7, r4
 8007e52:	193a      	adds	r2, r7, r4
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	701a      	strb	r2, [r3, #0]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	23a0      	movs	r3, #160	; 0xa0
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	5cd2      	ldrb	r2, [r2, r3]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	789b      	ldrb	r3, [r3, #2]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d023      	beq.n	8007eb2 <vl53l5cx_check_data_ready+0x8a>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	23a0      	movs	r3, #160	; 0xa0
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	5cd3      	ldrb	r3, [r2, r3]
 8007e72:	2bff      	cmp	r3, #255	; 0xff
 8007e74:	d01d      	beq.n	8007eb2 <vl53l5cx_check_data_ready+0x8a>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <vl53l5cx_check_data_ready+0xbc>)
 8007e7a:	5c9b      	ldrb	r3, [r3, r2]
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d118      	bne.n	8007eb2 <vl53l5cx_check_data_ready+0x8a>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a19      	ldr	r2, [pc, #100]	; (8007ee8 <vl53l5cx_check_data_ready+0xc0>)
 8007e84:	5c9b      	ldrb	r3, [r3, r2]
 8007e86:	001a      	movs	r2, r3
 8007e88:	2305      	movs	r3, #5
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b05      	cmp	r3, #5
 8007e8e:	d110      	bne.n	8007eb2 <vl53l5cx_check_data_ready+0x8a>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a16      	ldr	r2, [pc, #88]	; (8007eec <vl53l5cx_check_data_ready+0xc4>)
 8007e94:	5c9b      	ldrb	r3, [r3, r2]
 8007e96:	001a      	movs	r2, r3
 8007e98:	2310      	movs	r3, #16
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <vl53l5cx_check_data_ready+0x8a>
			)
	{
		*p_isReady = (uint8_t)1;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	23a0      	movs	r3, #160	; 0xa0
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	5cd2      	ldrb	r2, [r2, r3]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	709a      	strb	r2, [r3, #2]
 8007eb0:	e011      	b.n	8007ed6 <vl53l5cx_check_data_ready+0xae>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <vl53l5cx_check_data_ready+0xc4>)
 8007eb6:	5c9b      	ldrb	r3, [r3, r2]
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	da08      	bge.n	8007ed0 <vl53l5cx_check_data_ready+0xa8>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a09      	ldr	r2, [pc, #36]	; (8007ee8 <vl53l5cx_check_data_ready+0xc0>)
 8007ec2:	5c99      	ldrb	r1, [r3, r2]
 8007ec4:	220f      	movs	r2, #15
 8007ec6:	18bb      	adds	r3, r7, r2
 8007ec8:	18ba      	adds	r2, r7, r2
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	701a      	strb	r2, [r3, #0]
        }

		*p_isReady = 0;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8007ed6:	230f      	movs	r3, #15
 8007ed8:	18fb      	adds	r3, r7, r3
 8007eda:	781b      	ldrb	r3, [r3, #0]
}
 8007edc:	0018      	movs	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b005      	add	sp, #20
 8007ee2:	bd90      	pop	{r4, r7, pc}
 8007ee4:	00000501 	.word	0x00000501
 8007ee8:	00000502 	.word	0x00000502
 8007eec:	00000503 	.word	0x00000503

08007ef0 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8007ef0:	b5b0      	push	{r4, r5, r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8007efa:	241f      	movs	r4, #31
 8007efc:	193b      	adds	r3, r7, r4
 8007efe:	2200      	movs	r2, #0
 8007f00:	701a      	strb	r2, [r3, #0]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 8007f02:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	25a0      	movs	r5, #160	; 0xa0
 8007f08:	00ed      	lsls	r5, r5, #3
 8007f0a:	195a      	adds	r2, r3, r5
	status |= RdMulti(&(p_dev->platform), 0x0,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2100      	movs	r1, #0
 8007f12:	f7fe fb37 	bl	8006584 <RdMulti>
 8007f16:	0003      	movs	r3, r0
 8007f18:	0019      	movs	r1, r3
 8007f1a:	193b      	adds	r3, r7, r4
 8007f1c:	193a      	adds	r2, r7, r4
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	701a      	strb	r2, [r3, #0]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	23a0      	movs	r3, #160	; 0xa0
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	5cd2      	ldrb	r2, [r2, r3]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	195a      	adds	r2, r3, r5
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	0010      	movs	r0, r2
 8007f3e:	f7fe fb61 	bl	8006604 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8007f42:	2310      	movs	r3, #16
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	e117      	b.n	8008178 <vl53l5cx_get_ranging_data+0x288>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	22a0      	movs	r2, #160	; 0xa0
 8007f4c:	00d2      	lsls	r2, r2, #3
 8007f4e:	4694      	mov	ip, r2
 8007f50:	4463      	add	r3, ip
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	18d3      	adds	r3, r2, r3
 8007f56:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	071b      	lsls	r3, r3, #28
 8007f5e:	0f1b      	lsrs	r3, r3, #28
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d914      	bls.n	8007f90 <vl53l5cx_get_ranging_data+0xa0>
                    && (bh_ptr->type < (uint32_t)0xd))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	071b      	lsls	r3, r3, #28
 8007f6c:	0f1b      	lsrs	r3, r3, #28
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b0c      	cmp	r3, #12
 8007f72:	d80d      	bhi.n	8007f90 <vl53l5cx_get_ranging_data+0xa0>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	071b      	lsls	r3, r3, #28
 8007f7a:	0f1b      	lsrs	r3, r3, #28
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	001a      	movs	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	041b      	lsls	r3, r3, #16
 8007f86:	0d1b      	lsrs	r3, r3, #20
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4353      	muls	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	e005      	b.n	8007f9c <vl53l5cx_get_ranging_data+0xac>
		}
		else
		{
			msize = bh_ptr->size;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	041b      	lsls	r3, r3, #16
 8007f96:	0d1b      	lsrs	r3, r3, #20
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	4ac9      	ldr	r2, [pc, #804]	; (80082c8 <vl53l5cx_get_ranging_data+0x3d8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d100      	bne.n	8007fa8 <vl53l5cx_get_ranging_data+0xb8>
 8007fa6:	e0bf      	b.n	8008128 <vl53l5cx_get_ranging_data+0x238>
 8007fa8:	4ac7      	ldr	r2, [pc, #796]	; (80082c8 <vl53l5cx_get_ranging_data+0x3d8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	dd00      	ble.n	8007fb0 <vl53l5cx_get_ranging_data+0xc0>
 8007fae:	e0db      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 8007fb0:	4ac6      	ldr	r2, [pc, #792]	; (80082cc <vl53l5cx_get_ranging_data+0x3dc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d100      	bne.n	8007fb8 <vl53l5cx_get_ranging_data+0xc8>
 8007fb6:	e0a7      	b.n	8008108 <vl53l5cx_get_ranging_data+0x218>
 8007fb8:	4ac4      	ldr	r2, [pc, #784]	; (80082cc <vl53l5cx_get_ranging_data+0x3dc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	dd00      	ble.n	8007fc0 <vl53l5cx_get_ranging_data+0xd0>
 8007fbe:	e0d3      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 8007fc0:	4ac3      	ldr	r2, [pc, #780]	; (80082d0 <vl53l5cx_get_ranging_data+0x3e0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d100      	bne.n	8007fc8 <vl53l5cx_get_ranging_data+0xd8>
 8007fc6:	e08e      	b.n	80080e6 <vl53l5cx_get_ranging_data+0x1f6>
 8007fc8:	4ac1      	ldr	r2, [pc, #772]	; (80082d0 <vl53l5cx_get_ranging_data+0x3e0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	dd00      	ble.n	8007fd0 <vl53l5cx_get_ranging_data+0xe0>
 8007fce:	e0cb      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 8007fd0:	4ac0      	ldr	r2, [pc, #768]	; (80082d4 <vl53l5cx_get_ranging_data+0x3e4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d100      	bne.n	8007fd8 <vl53l5cx_get_ranging_data+0xe8>
 8007fd6:	e075      	b.n	80080c4 <vl53l5cx_get_ranging_data+0x1d4>
 8007fd8:	4abe      	ldr	r2, [pc, #760]	; (80082d4 <vl53l5cx_get_ranging_data+0x3e4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	dd00      	ble.n	8007fe0 <vl53l5cx_get_ranging_data+0xf0>
 8007fde:	e0c3      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 8007fe0:	4abd      	ldr	r2, [pc, #756]	; (80082d8 <vl53l5cx_get_ranging_data+0x3e8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d05d      	beq.n	80080a2 <vl53l5cx_get_ranging_data+0x1b2>
 8007fe6:	4abc      	ldr	r2, [pc, #752]	; (80082d8 <vl53l5cx_get_ranging_data+0x3e8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	dd00      	ble.n	8007fee <vl53l5cx_get_ranging_data+0xfe>
 8007fec:	e0bc      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 8007fee:	4abb      	ldr	r2, [pc, #748]	; (80082dc <vl53l5cx_get_ranging_data+0x3ec>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d046      	beq.n	8008082 <vl53l5cx_get_ranging_data+0x192>
 8007ff4:	4ab9      	ldr	r2, [pc, #740]	; (80082dc <vl53l5cx_get_ranging_data+0x3ec>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	dd00      	ble.n	8007ffc <vl53l5cx_get_ranging_data+0x10c>
 8007ffa:	e0b5      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 8007ffc:	4ab8      	ldr	r2, [pc, #736]	; (80082e0 <vl53l5cx_get_ranging_data+0x3f0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d100      	bne.n	8008004 <vl53l5cx_get_ranging_data+0x114>
 8008002:	e0a1      	b.n	8008148 <vl53l5cx_get_ranging_data+0x258>
 8008004:	4ab6      	ldr	r2, [pc, #728]	; (80082e0 <vl53l5cx_get_ranging_data+0x3f0>)
 8008006:	4293      	cmp	r3, r2
 8008008:	dd00      	ble.n	800800c <vl53l5cx_get_ranging_data+0x11c>
 800800a:	e0ad      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 800800c:	4ab5      	ldr	r2, [pc, #724]	; (80082e4 <vl53l5cx_get_ranging_data+0x3f4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d026      	beq.n	8008060 <vl53l5cx_get_ranging_data+0x170>
 8008012:	4ab4      	ldr	r2, [pc, #720]	; (80082e4 <vl53l5cx_get_ranging_data+0x3f4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	dd00      	ble.n	800801a <vl53l5cx_get_ranging_data+0x12a>
 8008018:	e0a6      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
 800801a:	4ab3      	ldr	r2, [pc, #716]	; (80082e8 <vl53l5cx_get_ranging_data+0x3f8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d003      	beq.n	8008028 <vl53l5cx_get_ranging_data+0x138>
 8008020:	4ab2      	ldr	r2, [pc, #712]	; (80082ec <vl53l5cx_get_ranging_data+0x3fc>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00d      	beq.n	8008042 <vl53l5cx_get_ranging_data+0x152>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8008026:	e09f      	b.n	8008168 <vl53l5cx_get_ranging_data+0x278>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	330c      	adds	r3, #12
 800802c:	001a      	movs	r2, r3
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	23a0      	movs	r3, #160	; 0xa0
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	188a      	adds	r2, r1, r2
 8008036:	18d3      	adds	r3, r2, r3
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	701a      	strb	r2, [r3, #0]
				break;
 8008040:	e093      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->ambient_per_spad,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	3304      	adds	r3, #4
 800804a:	22a0      	movs	r2, #160	; 0xa0
 800804c:	00d2      	lsls	r2, r2, #3
 800804e:	4694      	mov	ip, r2
 8008050:	4463      	add	r3, ip
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->ambient_per_spad,
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	0019      	movs	r1, r3
 800805a:	f001 f863 	bl	8009124 <memcpy>
				break;
 800805e:	e084      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->nb_spads_enabled,
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	3345      	adds	r3, #69	; 0x45
 8008064:	33ff      	adds	r3, #255	; 0xff
 8008066:	0018      	movs	r0, r3
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	3304      	adds	r3, #4
 800806c:	22a0      	movs	r2, #160	; 0xa0
 800806e:	00d2      	lsls	r2, r2, #3
 8008070:	4694      	mov	ip, r2
 8008072:	4463      	add	r3, ip
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->nb_spads_enabled,
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	0019      	movs	r1, r3
 800807c:	f001 f852 	bl	8009124 <memcpy>
				break;
 8008080:	e073      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->nb_target_detected,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	1d58      	adds	r0, r3, #5
 8008086:	30ff      	adds	r0, #255	; 0xff
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	3304      	adds	r3, #4
 800808c:	22a0      	movs	r2, #160	; 0xa0
 800808e:	00d2      	lsls	r2, r2, #3
 8008090:	4694      	mov	ip, r2
 8008092:	4463      	add	r3, ip
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->nb_target_detected,
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	0019      	movs	r1, r3
 800809c:	f001 f842 	bl	8009124 <memcpy>
				break;
 80080a0:	e063      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->signal_per_spad,
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2291      	movs	r2, #145	; 0x91
 80080a6:	0092      	lsls	r2, r2, #2
 80080a8:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	3304      	adds	r3, #4
 80080ae:	22a0      	movs	r2, #160	; 0xa0
 80080b0:	00d2      	lsls	r2, r2, #3
 80080b2:	4694      	mov	ip, r2
 80080b4:	4463      	add	r3, ip
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->signal_per_spad,
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	0019      	movs	r1, r3
 80080be:	f001 f831 	bl	8009124 <memcpy>
				break;
 80080c2:	e052      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->range_sigma_mm,
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	22d1      	movs	r2, #209	; 0xd1
 80080c8:	0092      	lsls	r2, r2, #2
 80080ca:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	3304      	adds	r3, #4
 80080d0:	22a0      	movs	r2, #160	; 0xa0
 80080d2:	00d2      	lsls	r2, r2, #3
 80080d4:	4694      	mov	ip, r2
 80080d6:	4463      	add	r3, ip
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->range_sigma_mm,
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	0019      	movs	r1, r3
 80080e0:	f001 f820 	bl	8009124 <memcpy>
				break;
 80080e4:	e041      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->distance_mm,
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	22f1      	movs	r2, #241	; 0xf1
 80080ea:	0092      	lsls	r2, r2, #2
 80080ec:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	3304      	adds	r3, #4
 80080f2:	22a0      	movs	r2, #160	; 0xa0
 80080f4:	00d2      	lsls	r2, r2, #3
 80080f6:	4694      	mov	ip, r2
 80080f8:	4463      	add	r3, ip
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->distance_mm,
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	0019      	movs	r1, r3
 8008102:	f001 f80f 	bl	8009124 <memcpy>
				break;
 8008106:	e030      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->reflectance,
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	4a79      	ldr	r2, [pc, #484]	; (80082f0 <vl53l5cx_get_ranging_data+0x400>)
 800810c:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	3304      	adds	r3, #4
 8008112:	22a0      	movs	r2, #160	; 0xa0
 8008114:	00d2      	lsls	r2, r2, #3
 8008116:	4694      	mov	ip, r2
 8008118:	4463      	add	r3, ip
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->reflectance,
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	0019      	movs	r1, r3
 8008122:	f000 ffff 	bl	8009124 <memcpy>
				break;
 8008126:	e020      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->target_status,
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	4a72      	ldr	r2, [pc, #456]	; (80082f4 <vl53l5cx_get_ranging_data+0x404>)
 800812c:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	3304      	adds	r3, #4
 8008132:	22a0      	movs	r2, #160	; 0xa0
 8008134:	00d2      	lsls	r2, r2, #3
 8008136:	4694      	mov	ip, r2
 8008138:	4463      	add	r3, ip
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->target_status,
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	0019      	movs	r1, r3
 8008142:	f000 ffef 	bl	8009124 <memcpy>
				break;
 8008146:	e010      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(&p_results->motion_indicator,
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	4a6b      	ldr	r2, [pc, #428]	; (80082f8 <vl53l5cx_get_ranging_data+0x408>)
 800814c:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	3304      	adds	r3, #4
 8008152:	22a0      	movs	r2, #160	; 0xa0
 8008154:	00d2      	lsls	r2, r2, #3
 8008156:	4694      	mov	ip, r2
 8008158:	4463      	add	r3, ip
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	18d3      	adds	r3, r2, r3
				(void)memcpy(&p_results->motion_indicator,
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	0019      	movs	r1, r3
 8008162:	f000 ffdf 	bl	8009124 <memcpy>
				break;
 8008166:	e000      	b.n	800816a <vl53l5cx_get_ranging_data+0x27a>
				break;
 8008168:	46c0      	nop			; (mov r8, r8)
		}
		i += msize;
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	18d3      	adds	r3, r2, r3
 8008170:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	3304      	adds	r3, #4
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	429a      	cmp	r2, r3
 8008180:	d200      	bcs.n	8008184 <vl53l5cx_get_ranging_data+0x294>
 8008182:	e6e1      	b.n	8007f48 <vl53l5cx_get_ranging_data+0x58>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8008184:	2300      	movs	r3, #0
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	e00f      	b.n	80081aa <vl53l5cx_get_ranging_data+0x2ba>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	18d3      	adds	r3, r2, r3
 8008192:	3304      	adds	r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	0ada      	lsrs	r2, r3, #11
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	18cb      	adds	r3, r1, r3
 80081a0:	3304      	adds	r3, #4
 80081a2:	601a      	str	r2, [r3, #0]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b3f      	cmp	r3, #63	; 0x3f
 80081ae:	d9ec      	bls.n	800818a <vl53l5cx_get_ranging_data+0x29a>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	e05e      	b.n	8008274 <vl53l5cx_get_ranging_data+0x384>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	33e1      	adds	r3, #225	; 0xe1
 80081bc:	33ff      	adds	r3, #255	; 0xff
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	18d3      	adds	r3, r2, r3
 80081c2:	3304      	adds	r3, #4
 80081c4:	2200      	movs	r2, #0
 80081c6:	5e9b      	ldrsh	r3, [r3, r2]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da00      	bge.n	80081ce <vl53l5cx_get_ranging_data+0x2de>
 80081cc:	3303      	adds	r3, #3
 80081ce:	109b      	asrs	r3, r3, #2
 80081d0:	b219      	sxth	r1, r3
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	33e1      	adds	r3, #225	; 0xe1
 80081d8:	33ff      	adds	r3, #255	; 0xff
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	18d3      	adds	r3, r2, r3
 80081de:	3304      	adds	r3, #4
 80081e0:	1c0a      	adds	r2, r1, #0
 80081e2:	801a      	strh	r2, [r3, #0]
		if(p_results->distance_mm[i] < 0)
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	33e1      	adds	r3, #225	; 0xe1
 80081ea:	33ff      	adds	r3, #255	; 0xff
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	18d3      	adds	r3, r2, r3
 80081f0:	3304      	adds	r3, #4
 80081f2:	2200      	movs	r2, #0
 80081f4:	5e9b      	ldrsh	r3, [r3, r2]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da08      	bge.n	800820c <vl53l5cx_get_ranging_data+0x31c>
		{
			p_results->distance_mm[i] = 0;
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	33e1      	adds	r3, #225	; 0xe1
 8008200:	33ff      	adds	r3, #255	; 0xff
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	18d3      	adds	r3, r2, r3
 8008206:	3304      	adds	r3, #4
 8008208:	2200      	movs	r2, #0
 800820a:	801a      	strh	r2, [r3, #0]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	4938      	ldr	r1, [pc, #224]	; (80082f0 <vl53l5cx_get_ranging_data+0x400>)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	18d3      	adds	r3, r2, r3
 8008214:	185b      	adds	r3, r3, r1
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	b2d8      	uxtb	r0, r3
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	4934      	ldr	r1, [pc, #208]	; (80082f0 <vl53l5cx_get_ranging_data+0x400>)
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	18d3      	adds	r3, r2, r3
 8008224:	185b      	adds	r3, r3, r1
 8008226:	1c02      	adds	r2, r0, #0
 8008228:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	33a1      	adds	r3, #161	; 0xa1
 8008230:	33ff      	adds	r3, #255	; 0xff
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	18d3      	adds	r3, r2, r3
 8008236:	3304      	adds	r3, #4
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	09db      	lsrs	r3, r3, #7
 800823c:	b299      	uxth	r1, r3
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	33a1      	adds	r3, #161	; 0xa1
 8008244:	33ff      	adds	r3, #255	; 0xff
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	18d3      	adds	r3, r2, r3
 800824a:	3304      	adds	r3, #4
 800824c:	1c0a      	adds	r2, r1, #0
 800824e:	801a      	strh	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	3390      	adds	r3, #144	; 0x90
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	18d3      	adds	r3, r2, r3
 800825a:	3304      	adds	r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	0ada      	lsrs	r2, r3, #11
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	3390      	adds	r3, #144	; 0x90
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	18cb      	adds	r3, r1, r3
 800826a:	3304      	adds	r3, #4
 800826c:	601a      	str	r2, [r3, #0]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	3301      	adds	r3, #1
 8008272:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b3f      	cmp	r3, #63	; 0x3f
 8008278:	d99d      	bls.n	80081b6 <vl53l5cx_get_ranging_data+0x2c6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	e01d      	b.n	80082bc <vl53l5cx_get_ranging_data+0x3cc>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	2382      	movs	r3, #130	; 0x82
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	188a      	adds	r2, r1, r2
 800828a:	18d3      	adds	r3, r2, r3
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d111      	bne.n	80082b6 <vl53l5cx_get_ranging_data+0x3c6>
			for(j = 0; j < (uint32_t)
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	e00b      	b.n	80082b0 <vl53l5cx_get_ranging_data+0x3c0>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	18d3      	adds	r3, r2, r3
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4914      	ldr	r1, [pc, #80]	; (80082f4 <vl53l5cx_get_ranging_data+0x404>)
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	185b      	adds	r3, r3, r1
 80082a6:	22ff      	movs	r2, #255	; 0xff
 80082a8:	701a      	strb	r2, [r3, #0]
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	3301      	adds	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0f0      	beq.n	8008298 <vl53l5cx_get_ranging_data+0x3a8>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	3301      	adds	r3, #1
 80082ba:	61bb      	str	r3, [r7, #24]
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b3f      	cmp	r3, #63	; 0x3f
 80082c0:	d9de      	bls.n	8008280 <vl53l5cx_get_ranging_data+0x390>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	e032      	b.n	800832e <vl53l5cx_get_ranging_data+0x43e>
 80082c8:	0000e084 	.word	0x0000e084
 80082cc:	0000e044 	.word	0x0000e044
 80082d0:	0000df44 	.word	0x0000df44
 80082d4:	0000dec4 	.word	0x0000dec4
 80082d8:	0000dbc4 	.word	0x0000dbc4
 80082dc:	0000db84 	.word	0x0000db84
 80082e0:	0000d858 	.word	0x0000d858
 80082e4:	000055d0 	.word	0x000055d0
 80082e8:	000054b4 	.word	0x000054b4
 80082ec:	000054d0 	.word	0x000054d0
 80082f0:	00000444 	.word	0x00000444
 80082f4:	00000484 	.word	0x00000484
 80082f8:	000004c4 	.word	0x000004c4
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	3333      	adds	r3, #51	; 0x33
 8008302:	33ff      	adds	r3, #255	; 0xff
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	18d3      	adds	r3, r2, r3
 8008308:	3308      	adds	r3, #8
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	492b      	ldr	r1, [pc, #172]	; (80083bc <vl53l5cx_get_ranging_data+0x4cc>)
 800830e:	0018      	movs	r0, r3
 8008310:	f7f7 fef8 	bl	8000104 <__udivsi3>
 8008314:	0003      	movs	r3, r0
 8008316:	0019      	movs	r1, r3
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	3333      	adds	r3, #51	; 0x33
 800831e:	33ff      	adds	r3, #255	; 0xff
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	18d3      	adds	r3, r2, r3
 8008324:	3308      	adds	r3, #8
 8008326:	6019      	str	r1, [r3, #0]
	for(i = 0; i < (uint32_t)32; i++)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	3301      	adds	r3, #1
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b1f      	cmp	r3, #31
 8008332:	d9e3      	bls.n	80082fc <vl53l5cx_get_ranging_data+0x40c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	23a1      	movs	r3, #161	; 0xa1
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	5cd3      	ldrb	r3, [r2, r3]
 800833c:	b29a      	uxth	r2, r3
 800833e:	200e      	movs	r0, #14
 8008340:	183b      	adds	r3, r7, r0
 8008342:	0212      	lsls	r2, r2, #8
 8008344:	801a      	strh	r2, [r3, #0]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <vl53l5cx_get_ranging_data+0x4d0>)
 800834a:	5c9b      	ldrb	r3, [r3, r2]
 800834c:	b299      	uxth	r1, r3
 800834e:	183b      	adds	r3, r7, r0
 8008350:	183a      	adds	r2, r7, r0
 8008352:	8812      	ldrh	r2, [r2, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	801a      	strh	r2, [r3, #0]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800835c:	1f1a      	subs	r2, r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	23a0      	movs	r3, #160	; 0xa0
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	188a      	adds	r2, r1, r2
 8008366:	18d3      	adds	r3, r2, r3
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b29a      	uxth	r2, r3
 800836c:	240c      	movs	r4, #12
 800836e:	193b      	adds	r3, r7, r4
 8008370:	0212      	lsls	r2, r2, #8
 8008372:	801a      	strh	r2, [r3, #0]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 8008378:	1eda      	subs	r2, r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	23a0      	movs	r3, #160	; 0xa0
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	188a      	adds	r2, r1, r2
 8008382:	18d3      	adds	r3, r2, r3
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	b299      	uxth	r1, r3
 8008388:	193b      	adds	r3, r7, r4
 800838a:	193a      	adds	r2, r7, r4
 800838c:	8812      	ldrh	r2, [r2, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	801a      	strh	r2, [r3, #0]

	if(header_id != footer_id)
 8008392:	183a      	adds	r2, r7, r0
 8008394:	193b      	adds	r3, r7, r4
 8008396:	8812      	ldrh	r2, [r2, #0]
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d006      	beq.n	80083ac <vl53l5cx_get_ranging_data+0x4bc>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 800839e:	221f      	movs	r2, #31
 80083a0:	18bb      	adds	r3, r7, r2
 80083a2:	18ba      	adds	r2, r7, r2
 80083a4:	7812      	ldrb	r2, [r2, #0]
 80083a6:	2102      	movs	r1, #2
 80083a8:	430a      	orrs	r2, r1
 80083aa:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80083ac:	231f      	movs	r3, #31
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	781b      	ldrb	r3, [r3, #0]
}
 80083b2:	0018      	movs	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b008      	add	sp, #32
 80083b8:	bdb0      	pop	{r4, r5, r7, pc}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	0000ffff 	.word	0x0000ffff
 80083c0:	00000509 	.word	0x00000509

080083c4 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80083ce:	240f      	movs	r4, #15
 80083d0:	193b      	adds	r3, r7, r4
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	22a0      	movs	r2, #160	; 0xa0
 80083da:	00d2      	lsls	r2, r2, #3
 80083dc:	1899      	adds	r1, r3, r2
 80083de:	4a0f      	ldr	r2, [pc, #60]	; (800841c <vl53l5cx_get_resolution+0x58>)
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	2308      	movs	r3, #8
 80083e4:	f000 f942 	bl	800866c <vl53l5cx_dci_read_data>
 80083e8:	0003      	movs	r3, r0
 80083ea:	0019      	movs	r1, r3
 80083ec:	0020      	movs	r0, r4
 80083ee:	183b      	adds	r3, r7, r0
 80083f0:	183a      	adds	r2, r7, r0
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	701a      	strb	r2, [r3, #0]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	23a0      	movs	r3, #160	; 0xa0
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	5cd3      	ldrb	r3, [r2, r3]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4907      	ldr	r1, [pc, #28]	; (8008420 <vl53l5cx_get_resolution+0x5c>)
 8008404:	5c52      	ldrb	r2, [r2, r1]
 8008406:	4353      	muls	r3, r2
 8008408:	b2da      	uxtb	r2, r3
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	701a      	strb	r2, [r3, #0]

	return status;
 800840e:	183b      	adds	r3, r7, r0
 8008410:	781b      	ldrb	r3, [r3, #0]
}
 8008412:	0018      	movs	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	b005      	add	sp, #20
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	00005450 	.word	0x00005450
 8008420:	00000501 	.word	0x00000501

08008424 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8008424:	b5b0      	push	{r4, r5, r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	000a      	movs	r2, r1
 800842e:	1cfb      	adds	r3, r7, #3
 8008430:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008432:	230f      	movs	r3, #15
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]

	switch(resolution){
 800843a:	1cfb      	adds	r3, r7, #3
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b10      	cmp	r3, #16
 8008440:	d002      	beq.n	8008448 <vl53l5cx_set_resolution+0x24>
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d059      	beq.n	80084fa <vl53l5cx_set_resolution+0xd6>
 8008446:	e0b1      	b.n	80085ac <vl53l5cx_set_resolution+0x188>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	25a0      	movs	r5, #160	; 0xa0
 800844c:	00ed      	lsls	r5, r5, #3
 800844e:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8008450:	4a6a      	ldr	r2, [pc, #424]	; (80085fc <vl53l5cx_set_resolution+0x1d8>)
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	2310      	movs	r3, #16
 8008456:	f000 f909 	bl	800866c <vl53l5cx_dci_read_data>
 800845a:	0003      	movs	r3, r0
 800845c:	0019      	movs	r1, r3
 800845e:	240f      	movs	r4, #15
 8008460:	193b      	adds	r3, r7, r4
 8008462:	193a      	adds	r2, r7, r4
 8008464:	7812      	ldrb	r2, [r2, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a64      	ldr	r2, [pc, #400]	; (8008600 <vl53l5cx_set_resolution+0x1dc>)
 800846e:	2140      	movs	r1, #64	; 0x40
 8008470:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x06] = 64;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a63      	ldr	r2, [pc, #396]	; (8008604 <vl53l5cx_set_resolution+0x1e0>)
 8008476:	2140      	movs	r1, #64	; 0x40
 8008478:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x09] = 4;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a62      	ldr	r2, [pc, #392]	; (8008608 <vl53l5cx_set_resolution+0x1e4>)
 800847e:	2104      	movs	r1, #4
 8008480:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8008486:	4a5d      	ldr	r2, [pc, #372]	; (80085fc <vl53l5cx_set_resolution+0x1d8>)
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	2310      	movs	r3, #16
 800848c:	f000 f994 	bl	80087b8 <vl53l5cx_dci_write_data>
 8008490:	0003      	movs	r3, r0
 8008492:	0019      	movs	r1, r3
 8008494:	193b      	adds	r3, r7, r4
 8008496:	193a      	adds	r2, r7, r4
 8008498:	7812      	ldrb	r2, [r2, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 80084a2:	4a5a      	ldr	r2, [pc, #360]	; (800860c <vl53l5cx_set_resolution+0x1e8>)
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	2308      	movs	r3, #8
 80084a8:	f000 f8e0 	bl	800866c <vl53l5cx_dci_read_data>
 80084ac:	0003      	movs	r3, r0
 80084ae:	0019      	movs	r1, r3
 80084b0:	193b      	adds	r3, r7, r4
 80084b2:	193a      	adds	r2, r7, r4
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	23a0      	movs	r3, #160	; 0xa0
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	2104      	movs	r1, #4
 80084c2:	54d1      	strb	r1, [r2, r3]
			p_dev->temp_buffer[0x01] = 4;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a52      	ldr	r2, [pc, #328]	; (8008610 <vl53l5cx_set_resolution+0x1ec>)
 80084c8:	2104      	movs	r1, #4
 80084ca:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x04] = 8;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a4c      	ldr	r2, [pc, #304]	; (8008600 <vl53l5cx_set_resolution+0x1dc>)
 80084d0:	2108      	movs	r1, #8
 80084d2:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x05] = 8;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a4f      	ldr	r2, [pc, #316]	; (8008614 <vl53l5cx_set_resolution+0x1f0>)
 80084d8:	2108      	movs	r1, #8
 80084da:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 80084e0:	4a4a      	ldr	r2, [pc, #296]	; (800860c <vl53l5cx_set_resolution+0x1e8>)
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	2308      	movs	r3, #8
 80084e6:	f000 f967 	bl	80087b8 <vl53l5cx_dci_write_data>
 80084ea:	0003      	movs	r3, r0
 80084ec:	0019      	movs	r1, r3
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	193a      	adds	r2, r7, r4
 80084f2:	7812      	ldrb	r2, [r2, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80084f8:	e05d      	b.n	80085b6 <vl53l5cx_set_resolution+0x192>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	25a0      	movs	r5, #160	; 0xa0
 80084fe:	00ed      	lsls	r5, r5, #3
 8008500:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8008502:	4a3e      	ldr	r2, [pc, #248]	; (80085fc <vl53l5cx_set_resolution+0x1d8>)
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	2310      	movs	r3, #16
 8008508:	f000 f8b0 	bl	800866c <vl53l5cx_dci_read_data>
 800850c:	0003      	movs	r3, r0
 800850e:	0019      	movs	r1, r3
 8008510:	240f      	movs	r4, #15
 8008512:	193b      	adds	r3, r7, r4
 8008514:	193a      	adds	r2, r7, r4
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a38      	ldr	r2, [pc, #224]	; (8008600 <vl53l5cx_set_resolution+0x1dc>)
 8008520:	2110      	movs	r1, #16
 8008522:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x06] = 16;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a37      	ldr	r2, [pc, #220]	; (8008604 <vl53l5cx_set_resolution+0x1e0>)
 8008528:	2110      	movs	r1, #16
 800852a:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x09] = 1;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a36      	ldr	r2, [pc, #216]	; (8008608 <vl53l5cx_set_resolution+0x1e4>)
 8008530:	2101      	movs	r1, #1
 8008532:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8008538:	4a30      	ldr	r2, [pc, #192]	; (80085fc <vl53l5cx_set_resolution+0x1d8>)
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	2310      	movs	r3, #16
 800853e:	f000 f93b 	bl	80087b8 <vl53l5cx_dci_write_data>
 8008542:	0003      	movs	r3, r0
 8008544:	0019      	movs	r1, r3
 8008546:	193b      	adds	r3, r7, r4
 8008548:	193a      	adds	r2, r7, r4
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8008554:	4a2d      	ldr	r2, [pc, #180]	; (800860c <vl53l5cx_set_resolution+0x1e8>)
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	2308      	movs	r3, #8
 800855a:	f000 f887 	bl	800866c <vl53l5cx_dci_read_data>
 800855e:	0003      	movs	r3, r0
 8008560:	0019      	movs	r1, r3
 8008562:	193b      	adds	r3, r7, r4
 8008564:	193a      	adds	r2, r7, r4
 8008566:	7812      	ldrb	r2, [r2, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	23a0      	movs	r3, #160	; 0xa0
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	2108      	movs	r1, #8
 8008574:	54d1      	strb	r1, [r2, r3]
			p_dev->temp_buffer[0x01] = 8;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a25      	ldr	r2, [pc, #148]	; (8008610 <vl53l5cx_set_resolution+0x1ec>)
 800857a:	2108      	movs	r1, #8
 800857c:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x04] = 4;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <vl53l5cx_set_resolution+0x1dc>)
 8008582:	2104      	movs	r1, #4
 8008584:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x05] = 4;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a22      	ldr	r2, [pc, #136]	; (8008614 <vl53l5cx_set_resolution+0x1f0>)
 800858a:	2104      	movs	r1, #4
 800858c:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8008592:	4a1e      	ldr	r2, [pc, #120]	; (800860c <vl53l5cx_set_resolution+0x1e8>)
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	2308      	movs	r3, #8
 8008598:	f000 f90e 	bl	80087b8 <vl53l5cx_dci_write_data>
 800859c:	0003      	movs	r3, r0
 800859e:	0019      	movs	r1, r3
 80085a0:	193b      	adds	r3, r7, r4
 80085a2:	193a      	adds	r2, r7, r4
 80085a4:	7812      	ldrb	r2, [r2, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 80085aa:	e004      	b.n	80085b6 <vl53l5cx_set_resolution+0x192>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 80085ac:	230f      	movs	r3, #15
 80085ae:	18fb      	adds	r3, r7, r3
 80085b0:	227f      	movs	r2, #127	; 0x7f
 80085b2:	701a      	strb	r2, [r3, #0]
			break;
 80085b4:	46c0      	nop			; (mov r8, r8)
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 80085b6:	1cfb      	adds	r3, r7, #3
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0011      	movs	r1, r2
 80085be:	0018      	movs	r0, r3
 80085c0:	f7fe f938 	bl	8006834 <_vl53l5cx_send_offset_data>
 80085c4:	0003      	movs	r3, r0
 80085c6:	0019      	movs	r1, r3
 80085c8:	240f      	movs	r4, #15
 80085ca:	193b      	adds	r3, r7, r4
 80085cc:	193a      	adds	r2, r7, r4
 80085ce:	7812      	ldrb	r2, [r2, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 80085d4:	1cfb      	adds	r3, r7, #3
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	0011      	movs	r1, r2
 80085dc:	0018      	movs	r0, r3
 80085de:	f7fe fb01 	bl	8006be4 <_vl53l5cx_send_xtalk_data>
 80085e2:	0003      	movs	r3, r0
 80085e4:	0019      	movs	r1, r3
 80085e6:	193b      	adds	r3, r7, r4
 80085e8:	193a      	adds	r2, r7, r4
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	701a      	strb	r2, [r3, #0]

	return status;
 80085f0:	193b      	adds	r3, r7, r4
 80085f2:	781b      	ldrb	r3, [r3, #0]
}
 80085f4:	0018      	movs	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	b004      	add	sp, #16
 80085fa:	bdb0      	pop	{r4, r5, r7, pc}
 80085fc:	0000ad38 	.word	0x0000ad38
 8008600:	00000504 	.word	0x00000504
 8008604:	00000506 	.word	0x00000506
 8008608:	00000509 	.word	0x00000509
 800860c:	00005450 	.word	0x00005450
 8008610:	00000501 	.word	0x00000501
 8008614:	00000505 	.word	0x00000505

08008618 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8008618:	b590      	push	{r4, r7, lr}
 800861a:	b089      	sub	sp, #36	; 0x24
 800861c:	af04      	add	r7, sp, #16
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	000a      	movs	r2, r1
 8008622:	1cfb      	adds	r3, r7, #3
 8008624:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008626:	240f      	movs	r4, #15
 8008628:	193b      	adds	r3, r7, r4
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	22a0      	movs	r2, #160	; 0xa0
 8008632:	00d2      	lsls	r2, r2, #3
 8008634:	1899      	adds	r1, r3, r2
 8008636:	4a0c      	ldr	r2, [pc, #48]	; (8008668 <vl53l5cx_set_ranging_frequency_hz+0x50>)
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	2301      	movs	r3, #1
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	2301      	movs	r3, #1
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	1cfb      	adds	r3, r7, #3
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	2304      	movs	r3, #4
 8008648:	f000 f994 	bl	8008974 <vl53l5cx_dci_replace_data>
 800864c:	0003      	movs	r3, r0
 800864e:	0019      	movs	r1, r3
 8008650:	193b      	adds	r3, r7, r4
 8008652:	193a      	adds	r2, r7, r4
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800865a:	193b      	adds	r3, r7, r4
 800865c:	781b      	ldrb	r3, [r3, #0]
}
 800865e:	0018      	movs	r0, r3
 8008660:	46bd      	mov	sp, r7
 8008662:	b005      	add	sp, #20
 8008664:	bd90      	pop	{r4, r7, pc}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	00005458 	.word	0x00005458

0800866c <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 800866c:	b5b0      	push	{r4, r5, r7, lr}
 800866e:	b08c      	sub	sp, #48	; 0x30
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	001a      	movs	r2, r3
 800867a:	1cbb      	adds	r3, r7, #2
 800867c:	801a      	strh	r2, [r3, #0]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 800867e:	2525      	movs	r5, #37	; 0x25
 8008680:	197b      	adds	r3, r7, r5
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8008686:	1cbb      	adds	r3, r7, #2
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	330c      	adds	r3, #12
 800868c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800868e:	2314      	movs	r3, #20
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	4a46      	ldr	r2, [pc, #280]	; (80087ac <vl53l5cx_dci_read_data+0x140>)
 8008694:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008696:	c313      	stmia	r3!, {r0, r1, r4}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8008698:	1cbb      	adds	r3, r7, #2
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	23b4      	movs	r3, #180	; 0xb4
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d903      	bls.n	80086ac <vl53l5cx_dci_read_data+0x40>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80086a4:	197b      	adds	r3, r7, r5
 80086a6:	22ff      	movs	r2, #255	; 0xff
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	e077      	b.n	800879c <vl53l5cx_dci_read_data+0x130>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	2114      	movs	r1, #20
 80086b4:	187b      	adds	r3, r7, r1
 80086b6:	701a      	strb	r2, [r3, #0]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	187b      	adds	r3, r7, r1
 80086be:	705a      	strb	r2, [r3, #1]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80086c0:	1cbb      	adds	r3, r7, #2
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	111b      	asrs	r3, r3, #4
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	187b      	adds	r3, r7, r1
 80086ca:	709a      	strb	r2, [r3, #2]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80086cc:	1cbb      	adds	r3, r7, #2
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	187b      	adds	r3, r7, r1
 80086d8:	70da      	strb	r2, [r3, #3]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	187a      	adds	r2, r7, r1
 80086de:	4934      	ldr	r1, [pc, #208]	; (80087b0 <vl53l5cx_dci_read_data+0x144>)
 80086e0:	230c      	movs	r3, #12
 80086e2:	f7fd ff27 	bl	8006534 <WrMulti>
 80086e6:	0003      	movs	r3, r0
 80086e8:	0019      	movs	r1, r3
 80086ea:	2425      	movs	r4, #37	; 0x25
 80086ec:	193b      	adds	r3, r7, r4
 80086ee:	193a      	adds	r2, r7, r4
 80086f0:	7812      	ldrb	r2, [r2, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	701a      	strb	r2, [r3, #0]
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80086f6:	23b0      	movs	r3, #176	; 0xb0
 80086f8:	019b      	lsls	r3, r3, #6
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	2203      	movs	r2, #3
 80086fe:	9201      	str	r2, [sp, #4]
 8008700:	22ff      	movs	r2, #255	; 0xff
 8008702:	9200      	str	r2, [sp, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	2104      	movs	r1, #4
 8008708:	f7fd ffc4 	bl	8006694 <_vl53l5cx_poll_for_answer>
 800870c:	0003      	movs	r3, r0
 800870e:	0019      	movs	r1, r3
 8008710:	193b      	adds	r3, r7, r4
 8008712:	193a      	adds	r2, r7, r4
 8008714:	7812      	ldrb	r2, [r2, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800871a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	25a0      	movs	r5, #160	; 0xa0
 8008720:	00ed      	lsls	r5, r5, #3
 8008722:	195a      	adds	r2, r3, r5
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	4923      	ldr	r1, [pc, #140]	; (80087b4 <vl53l5cx_dci_read_data+0x148>)
 8008728:	f7fd ff2c 	bl	8006584 <RdMulti>
 800872c:	0003      	movs	r3, r0
 800872e:	0019      	movs	r1, r3
 8008730:	193b      	adds	r3, r7, r4
 8008732:	193a      	adds	r2, r7, r4
 8008734:	7812      	ldrb	r2, [r2, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	701a      	strb	r2, [r3, #0]
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	195a      	adds	r2, r3, r5
 800873e:	1cbb      	adds	r3, r7, #2
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	b29b      	uxth	r3, r3
 8008746:	0019      	movs	r1, r3
 8008748:	0010      	movs	r0, r2
 800874a:	f7fd ff5b 	bl	8006604 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800874e:	2326      	movs	r3, #38	; 0x26
 8008750:	18fb      	adds	r3, r7, r3
 8008752:	2200      	movs	r2, #0
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	e018      	b.n	800878a <vl53l5cx_dci_read_data+0x11e>
			data[i] = p_dev->temp_buffer[i + 4];
 8008758:	2426      	movs	r4, #38	; 0x26
 800875a:	193b      	adds	r3, r7, r4
 800875c:	2200      	movs	r2, #0
 800875e:	5e9b      	ldrsh	r3, [r3, r2]
 8008760:	1d19      	adds	r1, r3, #4
 8008762:	193b      	adds	r3, r7, r4
 8008764:	2200      	movs	r2, #0
 8008766:	5e9b      	ldrsh	r3, [r3, r2]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	18d3      	adds	r3, r2, r3
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	22a0      	movs	r2, #160	; 0xa0
 8008770:	00d2      	lsls	r2, r2, #3
 8008772:	1841      	adds	r1, r0, r1
 8008774:	188a      	adds	r2, r1, r2
 8008776:	7812      	ldrb	r2, [r2, #0]
 8008778:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800877a:	193b      	adds	r3, r7, r4
 800877c:	2200      	movs	r2, #0
 800877e:	5e9b      	ldrsh	r3, [r3, r2]
 8008780:	b29b      	uxth	r3, r3
 8008782:	3301      	adds	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	193b      	adds	r3, r7, r4
 8008788:	801a      	strh	r2, [r3, #0]
 800878a:	1cbb      	adds	r3, r7, #2
 800878c:	2200      	movs	r2, #0
 800878e:	5e9b      	ldrsh	r3, [r3, r2]
 8008790:	2226      	movs	r2, #38	; 0x26
 8008792:	18ba      	adds	r2, r7, r2
 8008794:	2100      	movs	r1, #0
 8008796:	5e52      	ldrsh	r2, [r2, r1]
 8008798:	429a      	cmp	r2, r3
 800879a:	dbdd      	blt.n	8008758 <vl53l5cx_dci_read_data+0xec>
		}
	}

	return status;
 800879c:	2325      	movs	r3, #37	; 0x25
 800879e:	18fb      	adds	r3, r7, r3
 80087a0:	781b      	ldrb	r3, [r3, #0]
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b00a      	add	sp, #40	; 0x28
 80087a8:	bdb0      	pop	{r4, r5, r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	080094e8 	.word	0x080094e8
 80087b0:	00002ff4 	.word	0x00002ff4
 80087b4:	00002c04 	.word	0x00002c04

080087b8 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b08d      	sub	sp, #52	; 0x34
 80087bc:	af02      	add	r7, sp, #8
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	001a      	movs	r2, r3
 80087c6:	1cbb      	adds	r3, r7, #2
 80087c8:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80087ca:	2027      	movs	r0, #39	; 0x27
 80087cc:	183b      	adds	r3, r7, r0
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80087d2:	231c      	movs	r3, #28
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80087da:	2114      	movs	r1, #20
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	187b      	adds	r3, r7, r1
 80087e4:	2200      	movs	r2, #0
 80087e6:	705a      	strb	r2, [r3, #1]
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	2200      	movs	r2, #0
 80087ec:	709a      	strb	r2, [r3, #2]
 80087ee:	187b      	adds	r3, r7, r1
 80087f0:	220f      	movs	r2, #15
 80087f2:	70da      	strb	r2, [r3, #3]
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	2205      	movs	r2, #5
 80087f8:	711a      	strb	r2, [r3, #4]
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	2201      	movs	r2, #1
 80087fe:	715a      	strb	r2, [r3, #5]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8008800:	1cbb      	adds	r3, r7, #2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	121b      	asrs	r3, r3, #8
 8008808:	b2da      	uxtb	r2, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800880a:	187b      	adds	r3, r7, r1
 800880c:	719a      	strb	r2, [r3, #6]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800880e:	1cbb      	adds	r3, r7, #2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	3308      	adds	r3, #8
 8008816:	b2da      	uxtb	r2, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8008818:	187b      	adds	r3, r7, r1
 800881a:	71da      	strb	r2, [r3, #7]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 800881c:	2322      	movs	r3, #34	; 0x22
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	1cba      	adds	r2, r7, #2
 8008822:	8812      	ldrh	r2, [r2, #0]
 8008824:	4952      	ldr	r1, [pc, #328]	; (8008970 <vl53l5cx_dci_write_data+0x1b8>)
 8008826:	1a8a      	subs	r2, r1, r2
 8008828:	801a      	strh	r2, [r3, #0]
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800882a:	1cbb      	adds	r3, r7, #2
 800882c:	881a      	ldrh	r2, [r3, #0]
 800882e:	23b4      	movs	r3, #180	; 0xb4
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	429a      	cmp	r2, r3
 8008834:	d903      	bls.n	800883e <vl53l5cx_dci_write_data+0x86>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8008836:	183b      	adds	r3, r7, r0
 8008838:	22ff      	movs	r2, #255	; 0xff
 800883a:	701a      	strb	r2, [r3, #0]
 800883c:	e090      	b.n	8008960 <vl53l5cx_dci_write_data+0x1a8>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	b2da      	uxtb	r2, r3
 8008844:	211c      	movs	r1, #28
 8008846:	187b      	adds	r3, r7, r1
 8008848:	701a      	strb	r2, [r3, #0]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	b2da      	uxtb	r2, r3
 800884e:	187b      	adds	r3, r7, r1
 8008850:	705a      	strb	r2, [r3, #1]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8008852:	1cbb      	adds	r3, r7, #2
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	111b      	asrs	r3, r3, #4
 8008858:	b2da      	uxtb	r2, r3
 800885a:	187b      	adds	r3, r7, r1
 800885c:	709a      	strb	r2, [r3, #2]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800885e:	1cbb      	adds	r3, r7, #2
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	b2da      	uxtb	r2, r3
 8008868:	187b      	adds	r3, r7, r1
 800886a:	70da      	strb	r2, [r3, #3]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 800886c:	1cbb      	adds	r3, r7, #2
 800886e:	881a      	ldrh	r2, [r3, #0]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	0011      	movs	r1, r2
 8008874:	0018      	movs	r0, r3
 8008876:	f7fd fec5 	bl	8006604 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800887a:	1cbb      	adds	r3, r7, #2
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	2324      	movs	r3, #36	; 0x24
 8008884:	18fb      	adds	r3, r7, r3
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	e019      	b.n	80088be <vl53l5cx_dci_write_data+0x106>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800888a:	2424      	movs	r4, #36	; 0x24
 800888c:	193b      	adds	r3, r7, r4
 800888e:	2200      	movs	r2, #0
 8008890:	5e9b      	ldrsh	r3, [r3, r2]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	18d3      	adds	r3, r2, r3
 8008896:	193a      	adds	r2, r7, r4
 8008898:	2100      	movs	r1, #0
 800889a:	5e52      	ldrsh	r2, [r2, r1]
 800889c:	3204      	adds	r2, #4
 800889e:	7818      	ldrb	r0, [r3, #0]
 80088a0:	68f9      	ldr	r1, [r7, #12]
 80088a2:	23a0      	movs	r3, #160	; 0xa0
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	188a      	adds	r2, r1, r2
 80088a8:	18d3      	adds	r3, r2, r3
 80088aa:	1c02      	adds	r2, r0, #0
 80088ac:	701a      	strb	r2, [r3, #0]
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80088ae:	193b      	adds	r3, r7, r4
 80088b0:	2200      	movs	r2, #0
 80088b2:	5e9b      	ldrsh	r3, [r3, r2]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	193b      	adds	r3, r7, r4
 80088bc:	801a      	strh	r2, [r3, #0]
 80088be:	2324      	movs	r3, #36	; 0x24
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2200      	movs	r2, #0
 80088c4:	5e9b      	ldrsh	r3, [r3, r2]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dadf      	bge.n	800888a <vl53l5cx_dci_write_data+0xd2>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	24a0      	movs	r4, #160	; 0xa0
 80088ce:	00e4      	lsls	r4, r4, #3
 80088d0:	191a      	adds	r2, r3, r4
 80088d2:	231c      	movs	r3, #28
 80088d4:	18fb      	adds	r3, r7, r3
 80088d6:	0010      	movs	r0, r2
 80088d8:	0019      	movs	r1, r3
 80088da:	2304      	movs	r3, #4
 80088dc:	001a      	movs	r2, r3
 80088de:	f000 fc21 	bl	8009124 <memcpy>
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80088e2:	1cbb      	adds	r3, r7, #2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	3304      	adds	r3, #4
 80088e8:	22a0      	movs	r2, #160	; 0xa0
 80088ea:	00d2      	lsls	r2, r2, #3
 80088ec:	4694      	mov	ip, r2
 80088ee:	4463      	add	r3, ip
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	18d2      	adds	r2, r2, r3
 80088f4:	2314      	movs	r3, #20
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	0010      	movs	r0, r2
 80088fa:	0019      	movs	r1, r3
 80088fc:	2308      	movs	r3, #8
 80088fe:	001a      	movs	r2, r3
 8008900:	f000 fc10 	bl	8009124 <memcpy>
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8008904:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	191a      	adds	r2, r3, r4
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800890a:	1cbb      	adds	r3, r7, #2
 800890c:	881b      	ldrh	r3, [r3, #0]
		status |= WrMulti(&(p_dev->platform),address,
 800890e:	330c      	adds	r3, #12
 8008910:	001c      	movs	r4, r3
 8008912:	2322      	movs	r3, #34	; 0x22
 8008914:	18fb      	adds	r3, r7, r3
 8008916:	8819      	ldrh	r1, [r3, #0]
 8008918:	0023      	movs	r3, r4
 800891a:	f7fd fe0b 	bl	8006534 <WrMulti>
 800891e:	0003      	movs	r3, r0
 8008920:	0019      	movs	r1, r3
 8008922:	2427      	movs	r4, #39	; 0x27
 8008924:	193b      	adds	r3, r7, r4
 8008926:	193a      	adds	r2, r7, r4
 8008928:	7812      	ldrb	r2, [r2, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	701a      	strb	r2, [r3, #0]
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800892e:	23b0      	movs	r3, #176	; 0xb0
 8008930:	019b      	lsls	r3, r3, #6
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	2203      	movs	r2, #3
 8008936:	9201      	str	r2, [sp, #4]
 8008938:	22ff      	movs	r2, #255	; 0xff
 800893a:	9200      	str	r2, [sp, #0]
 800893c:	2201      	movs	r2, #1
 800893e:	2104      	movs	r1, #4
 8008940:	f7fd fea8 	bl	8006694 <_vl53l5cx_poll_for_answer>
 8008944:	0003      	movs	r3, r0
 8008946:	0019      	movs	r1, r3
 8008948:	193b      	adds	r3, r7, r4
 800894a:	193a      	adds	r2, r7, r4
 800894c:	7812      	ldrb	r2, [r2, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8008952:	1cbb      	adds	r3, r7, #2
 8008954:	881a      	ldrh	r2, [r3, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f7fd fe52 	bl	8006604 <SwapBuffer>
	}

	return status;
 8008960:	2327      	movs	r3, #39	; 0x27
 8008962:	18fb      	adds	r3, r7, r3
 8008964:	781b      	ldrb	r3, [r3, #0]
}
 8008966:	0018      	movs	r0, r3
 8008968:	46bd      	mov	sp, r7
 800896a:	b00b      	add	sp, #44	; 0x2c
 800896c:	bd90      	pop	{r4, r7, pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	00002ff4 	.word	0x00002ff4

08008974 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	001a      	movs	r2, r3
 8008982:	1cbb      	adds	r3, r7, #2
 8008984:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8008986:	2417      	movs	r4, #23
 8008988:	193b      	adds	r3, r7, r4
 800898a:	2200      	movs	r2, #0
 800898c:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 800898e:	1cbb      	adds	r3, r7, #2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff fe68 	bl	800866c <vl53l5cx_dci_read_data>
 800899c:	0003      	movs	r3, r0
 800899e:	0019      	movs	r1, r3
 80089a0:	193b      	adds	r3, r7, r4
 80089a2:	193a      	adds	r2, r7, r4
 80089a4:	7812      	ldrb	r2, [r2, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	701a      	strb	r2, [r3, #0]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 80089aa:	2328      	movs	r3, #40	; 0x28
 80089ac:	2108      	movs	r1, #8
 80089ae:	185b      	adds	r3, r3, r1
 80089b0:	19db      	adds	r3, r3, r7
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	18d0      	adds	r0, r2, r3
 80089b8:	2324      	movs	r3, #36	; 0x24
 80089ba:	185b      	adds	r3, r3, r1
 80089bc:	19db      	adds	r3, r3, r7
 80089be:	881a      	ldrh	r2, [r3, #0]
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	0019      	movs	r1, r3
 80089c4:	f000 fbae 	bl	8009124 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 80089c8:	1cbb      	adds	r3, r7, #2
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f7ff fef1 	bl	80087b8 <vl53l5cx_dci_write_data>
 80089d6:	0003      	movs	r3, r0
 80089d8:	0019      	movs	r1, r3
 80089da:	193b      	adds	r3, r7, r4
 80089dc:	193a      	adds	r2, r7, r4
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	701a      	strb	r2, [r3, #0]

	return status;
 80089e4:	193b      	adds	r3, r7, r4
 80089e6:	781b      	ldrb	r3, [r3, #0]
}
 80089e8:	0018      	movs	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b007      	add	sp, #28
 80089ee:	bd90      	pop	{r4, r7, pc}

080089f0 <GW_set_params>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80089f4:	1e06      	subs	r6, r0, #0
 80089f6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80089f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80089fc:	d100      	bne.n	8008a00 <GW_set_params+0x10>
 80089fe:	e0e0      	b.n	8008bc2 <GW_set_params+0x1d2>
 8008a00:	2900      	cmp	r1, #0
 8008a02:	da00      	bge.n	8008a06 <GW_set_params+0x16>
 8008a04:	215f      	movs	r1, #95	; 0x5f
 8008a06:	6031      	str	r1, [r6, #0]
 8008a08:	43c9      	mvns	r1, r1
 8008a0a:	6071      	str	r1, [r6, #4]
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	da00      	bge.n	8008a12 <GW_set_params+0x22>
 8008a10:	22c8      	movs	r2, #200	; 0xc8
 8008a12:	60b2      	str	r2, [r6, #8]
 8008a14:	2201      	movs	r2, #1
 8008a16:	4252      	negs	r2, r2
 8008a18:	60f2      	str	r2, [r6, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da01      	bge.n	8008a22 <GW_set_params+0x32>
 8008a1e:	23fa      	movs	r3, #250	; 0xfa
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	6133      	str	r3, [r6, #16]
 8008a24:	9b06      	ldr	r3, [sp, #24]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da02      	bge.n	8008a30 <GW_set_params+0x40>
 8008a2a:	2396      	movs	r3, #150	; 0x96
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	9306      	str	r3, [sp, #24]
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	6173      	str	r3, [r6, #20]
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da01      	bge.n	8008a3e <GW_set_params+0x4e>
 8008a3a:	2314      	movs	r3, #20
 8008a3c:	9307      	str	r3, [sp, #28]
 8008a3e:	9b07      	ldr	r3, [sp, #28]
 8008a40:	61b3      	str	r3, [r6, #24]
 8008a42:	9b08      	ldr	r3, [sp, #32]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	da02      	bge.n	8008a4e <GW_set_params+0x5e>
 8008a48:	23fa      	movs	r3, #250	; 0xfa
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	9308      	str	r3, [sp, #32]
 8008a4e:	9b08      	ldr	r3, [sp, #32]
 8008a50:	61f3      	str	r3, [r6, #28]
 8008a52:	2800      	cmp	r0, #0
 8008a54:	da01      	bge.n	8008a5a <GW_set_params+0x6a>
 8008a56:	2096      	movs	r0, #150	; 0x96
 8008a58:	0080      	lsls	r0, r0, #2
 8008a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5c:	6230      	str	r0, [r6, #32]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da02      	bge.n	8008a68 <GW_set_params+0x78>
 8008a62:	2396      	movs	r3, #150	; 0x96
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	930a      	str	r3, [sp, #40]	; 0x28
 8008a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6a:	6273      	str	r3, [r6, #36]	; 0x24
 8008a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	da02      	bge.n	8008a78 <GW_set_params+0x88>
 8008a72:	23fa      	movs	r3, #250	; 0xfa
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	da02      	bge.n	8008a88 <GW_set_params+0x98>
 8008a82:	23c8      	movs	r3, #200	; 0xc8
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	9314      	str	r3, [sp, #80]	; 0x50
 8008a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a8a:	64f3      	str	r3, [r6, #76]	; 0x4c
 8008a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da02      	bge.n	8008a98 <GW_set_params+0xa8>
 8008a92:	2396      	movs	r3, #150	; 0x96
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	9315      	str	r3, [sp, #84]	; 0x54
 8008a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a9a:	6533      	str	r3, [r6, #80]	; 0x50
 8008a9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da01      	bge.n	8008aa6 <GW_set_params+0xb6>
 8008aa2:	2396      	movs	r3, #150	; 0x96
 8008aa4:	9316      	str	r3, [sp, #88]	; 0x58
 8008aa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008aa8:	6573      	str	r3, [r6, #84]	; 0x54
 8008aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da01      	bge.n	8008ab4 <GW_set_params+0xc4>
 8008ab0:	4b45      	ldr	r3, [pc, #276]	; (8008bc8 <GW_set_params+0x1d8>)
 8008ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008aba:	62f3      	str	r3, [r6, #44]	; 0x2c
 8008abc:	f7f7 fd06 	bl	80004cc <__aeabi_fcmpge>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d101      	bne.n	8008ac8 <GW_set_params+0xd8>
 8008ac4:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <GW_set_params+0x1dc>)
 8008ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aca:	2100      	movs	r1, #0
 8008acc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008ace:	6333      	str	r3, [r6, #48]	; 0x30
 8008ad0:	f7f7 fcfc 	bl	80004cc <__aeabi_fcmpge>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d102      	bne.n	8008ade <GW_set_params+0xee>
 8008ad8:	23fe      	movs	r3, #254	; 0xfe
 8008ada:	059b      	lsls	r3, r3, #22
 8008adc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008ae4:	6373      	str	r3, [r6, #52]	; 0x34
 8008ae6:	f7f7 fcf1 	bl	80004cc <__aeabi_fcmpge>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d101      	bne.n	8008af2 <GW_set_params+0x102>
 8008aee:	4b38      	ldr	r3, [pc, #224]	; (8008bd0 <GW_set_params+0x1e0>)
 8008af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008af4:	2100      	movs	r1, #0
 8008af6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008af8:	63b3      	str	r3, [r6, #56]	; 0x38
 8008afa:	f7f7 fce7 	bl	80004cc <__aeabi_fcmpge>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d101      	bne.n	8008b06 <GW_set_params+0x116>
 8008b02:	4b34      	ldr	r3, [pc, #208]	; (8008bd4 <GW_set_params+0x1e4>)
 8008b04:	9310      	str	r3, [sp, #64]	; 0x40
 8008b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b08:	2100      	movs	r1, #0
 8008b0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008b0c:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008b0e:	f7f7 fcdd 	bl	80004cc <__aeabi_fcmpge>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d102      	bne.n	8008b1c <GW_set_params+0x12c>
 8008b16:	2380      	movs	r3, #128	; 0x80
 8008b18:	05db      	lsls	r3, r3, #23
 8008b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b1e:	2100      	movs	r1, #0
 8008b20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b22:	6433      	str	r3, [r6, #64]	; 0x40
 8008b24:	f7f7 fcd2 	bl	80004cc <__aeabi_fcmpge>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d101      	bne.n	8008b30 <GW_set_params+0x140>
 8008b2c:	4b2a      	ldr	r3, [pc, #168]	; (8008bd8 <GW_set_params+0x1e8>)
 8008b2e:	9312      	str	r3, [sp, #72]	; 0x48
 8008b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b34:	6473      	str	r3, [r6, #68]	; 0x44
 8008b36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b38:	2100      	movs	r1, #0
 8008b3a:	17db      	asrs	r3, r3, #31
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	0032      	movs	r2, r6
 8008b40:	0fdb      	lsrs	r3, r3, #31
 8008b42:	3248      	adds	r2, #72	; 0x48
 8008b44:	7013      	strb	r3, [r2, #0]
 8008b46:	1c38      	adds	r0, r7, #0
 8008b48:	f7f7 fcb6 	bl	80004b8 <__aeabi_fcmpgt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d100      	bne.n	8008b52 <GW_set_params+0x162>
 8008b50:	4f22      	ldr	r7, [pc, #136]	; (8008bdc <GW_set_params+0x1ec>)
 8008b52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b54:	65b7      	str	r7, [r6, #88]	; 0x58
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dc02      	bgt.n	8008b60 <GW_set_params+0x170>
 8008b5a:	23fa      	movs	r3, #250	; 0xfa
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	9318      	str	r3, [sp, #96]	; 0x60
 8008b60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b62:	65f3      	str	r3, [r6, #92]	; 0x5c
 8008b64:	2c00      	cmp	r4, #0
 8008b66:	dc01      	bgt.n	8008b6c <GW_set_params+0x17c>
 8008b68:	24c8      	movs	r4, #200	; 0xc8
 8008b6a:	0064      	lsls	r4, r4, #1
 8008b6c:	6634      	str	r4, [r6, #96]	; 0x60
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	dc00      	bgt.n	8008b74 <GW_set_params+0x184>
 8008b72:	2564      	movs	r5, #100	; 0x64
 8008b74:	6675      	str	r5, [r6, #100]	; 0x64
 8008b76:	1b60      	subs	r0, r4, r5
 8008b78:	f7f9 fefa 	bl	8002970 <__aeabi_i2d>
 8008b7c:	0002      	movs	r2, r0
 8008b7e:	000b      	movs	r3, r1
 8008b80:	2000      	movs	r0, #0
 8008b82:	4917      	ldr	r1, [pc, #92]	; (8008be0 <GW_set_params+0x1f0>)
 8008b84:	f7f8 fc62 	bl	800144c <__aeabi_ddiv>
 8008b88:	f7f9 ff90 	bl	8002aac <__aeabi_d2f>
 8008b8c:	23af      	movs	r3, #175	; 0xaf
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	50f0      	str	r0, [r6, r3]
 8008b92:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <GW_set_params+0x1f4>)
 8008b94:	2105      	movs	r1, #5
 8008b96:	18f0      	adds	r0, r6, r3
 8008b98:	f000 f9dd 	bl	8008f56 <RFBVM_init>
 8008b9c:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <GW_set_params+0x1f8>)
 8008b9e:	2105      	movs	r1, #5
 8008ba0:	18f0      	adds	r0, r6, r3
 8008ba2:	f000 f9d8 	bl	8008f56 <RFBVM_init>
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <GW_set_params+0x1fc>)
 8008ba8:	2105      	movs	r1, #5
 8008baa:	18f0      	adds	r0, r6, r3
 8008bac:	f000 f9d3 	bl	8008f56 <RFBVM_init>
 8008bb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dc01      	bgt.n	8008bba <GW_set_params+0x1ca>
 8008bb6:	23fa      	movs	r3, #250	; 0xfa
 8008bb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bba:	2000      	movs	r0, #0
 8008bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bbe:	66b3      	str	r3, [r6, #104]	; 0x68
 8008bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc2:	2002      	movs	r0, #2
 8008bc4:	4240      	negs	r0, r0
 8008bc6:	e7fb      	b.n	8008bc0 <GW_set_params+0x1d0>
 8008bc8:	00000352 	.word	0x00000352
 8008bcc:	3ed58106 	.word	0x3ed58106
 8008bd0:	3fcf7cee 	.word	0x3fcf7cee
 8008bd4:	3f99999a 	.word	0x3f99999a
 8008bd8:	3f8f1aa0 	.word	0x3f8f1aa0
 8008bdc:	451c4000 	.word	0x451c4000
 8008be0:	40590000 	.word	0x40590000
 8008be4:	000008dc 	.word	0x000008dc
 8008be8:	00000af4 	.word	0x00000af4
 8008bec:	00000d08 	.word	0x00000d08

08008bf0 <GW_init>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	000e      	movs	r6, r1
 8008bf4:	0005      	movs	r5, r0
 8008bf6:	0011      	movs	r1, r2
 8008bf8:	b096      	sub	sp, #88	; 0x58
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d046      	beq.n	8008c8c <GW_init+0x9c>
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d044      	beq.n	8008c8c <GW_init+0x9c>
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	d042      	beq.n	8008c8c <GW_init+0x9c>
 8008c06:	0030      	movs	r0, r6
 8008c08:	f000 f8de 	bl	8008dc8 <HT_init>
 8008c0c:	1e04      	subs	r4, r0, #0
 8008c0e:	d13a      	bne.n	8008c86 <GW_init+0x96>
 8008c10:	2101      	movs	r1, #1
 8008c12:	4b20      	ldr	r3, [pc, #128]	; (8008c94 <GW_init+0xa4>)
 8008c14:	4249      	negs	r1, r1
 8008c16:	9311      	str	r3, [sp, #68]	; 0x44
 8008c18:	930c      	str	r3, [sp, #48]	; 0x30
 8008c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	9308      	str	r3, [sp, #32]
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	000a      	movs	r2, r1
 8008c26:	000b      	movs	r3, r1
 8008c28:	0028      	movs	r0, r5
 8008c2a:	9106      	str	r1, [sp, #24]
 8008c2c:	9105      	str	r1, [sp, #20]
 8008c2e:	9104      	str	r1, [sp, #16]
 8008c30:	9103      	str	r1, [sp, #12]
 8008c32:	9102      	str	r1, [sp, #8]
 8008c34:	9101      	str	r1, [sp, #4]
 8008c36:	9100      	str	r1, [sp, #0]
 8008c38:	9115      	str	r1, [sp, #84]	; 0x54
 8008c3a:	9114      	str	r1, [sp, #80]	; 0x50
 8008c3c:	9113      	str	r1, [sp, #76]	; 0x4c
 8008c3e:	9112      	str	r1, [sp, #72]	; 0x48
 8008c40:	9110      	str	r1, [sp, #64]	; 0x40
 8008c42:	910f      	str	r1, [sp, #60]	; 0x3c
 8008c44:	910e      	str	r1, [sp, #56]	; 0x38
 8008c46:	910d      	str	r1, [sp, #52]	; 0x34
 8008c48:	f7ff fed2 	bl	80089f0 <GW_set_params>
 8008c4c:	1e04      	subs	r4, r0, #0
 8008c4e:	d11a      	bne.n	8008c86 <GW_init+0x96>
 8008c50:	4b11      	ldr	r3, [pc, #68]	; (8008c98 <GW_init+0xa8>)
 8008c52:	54e8      	strb	r0, [r5, r3]
 8008c54:	3304      	adds	r3, #4
 8008c56:	50e8      	str	r0, [r5, r3]
 8008c58:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <GW_init+0xac>)
 8008c5a:	50e8      	str	r0, [r5, r3]
 8008c5c:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <GW_init+0xb0>)
 8008c5e:	52e8      	strh	r0, [r5, r3]
 8008c60:	68b0      	ldr	r0, [r6, #8]
 8008c62:	f7f8 f841 	bl	8000ce8 <__aeabi_i2f>
 8008c66:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <GW_init+0xb4>)
 8008c68:	2264      	movs	r2, #100	; 0x64
 8008c6a:	50e8      	str	r0, [r5, r3]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	50ec      	str	r4, [r5, r3]
 8008c70:	2300      	movs	r3, #0
 8008c72:	672b      	str	r3, [r5, #112]	; 0x70
 8008c74:	676b      	str	r3, [r5, #116]	; 0x74
 8008c76:	67ab      	str	r3, [r5, #120]	; 0x78
 8008c78:	002b      	movs	r3, r5
 8008c7a:	336c      	adds	r3, #108	; 0x6c
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <GW_init+0xb8>)
 8008c80:	54ec      	strb	r4, [r5, r3]
 8008c82:	3304      	adds	r3, #4
 8008c84:	50ec      	str	r4, [r5, r3]
 8008c86:	0020      	movs	r0, r4
 8008c88:	b016      	add	sp, #88	; 0x58
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	2402      	movs	r4, #2
 8008c8e:	4264      	negs	r4, r4
 8008c90:	e7f9      	b.n	8008c86 <GW_init+0x96>
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	bf800000 	.word	0xbf800000
 8008c98:	00000f1c 	.word	0x00000f1c
 8008c9c:	00000f24 	.word	0x00000f24
 8008ca0:	00000f28 	.word	0x00000f28
 8008ca4:	00000f2c 	.word	0x00000f2c
 8008ca8:	00000f3c 	.word	0x00000f3c

08008cac <GW_set_buffer_length>:
 8008cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cae:	0005      	movs	r5, r0
 8008cb0:	000c      	movs	r4, r1
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d05b      	beq.n	8008d70 <GW_set_buffer_length+0xc4>
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	d059      	beq.n	8008d70 <GW_set_buffer_length+0xc4>
 8008cbc:	6880      	ldr	r0, [r0, #8]
 8008cbe:	f7f8 f813 	bl	8000ce8 <__aeabi_i2f>
 8008cc2:	68e1      	ldr	r1, [r4, #12]
 8008cc4:	f7f7 fec2 	bl	8000a4c <__aeabi_fmul>
 8008cc8:	492c      	ldr	r1, [pc, #176]	; (8008d7c <GW_set_buffer_length+0xd0>)
 8008cca:	f7f7 fcf5 	bl	80006b8 <__aeabi_fdiv>
 8008cce:	f7f9 fea5 	bl	8002a1c <__aeabi_f2d>
 8008cd2:	f000 fb43 	bl	800935c <ceil>
 8008cd6:	f7f9 fe15 	bl	8002904 <__aeabi_d2iz>
 8008cda:	2801      	cmp	r0, #1
 8008cdc:	dd2d      	ble.n	8008d3a <GW_set_buffer_length+0x8e>
 8008cde:	60e8      	str	r0, [r5, #12]
 8008ce0:	002b      	movs	r3, r5
 8008ce2:	337c      	adds	r3, #124	; 0x7c
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	68e9      	ldr	r1, [r5, #12]
 8008ce8:	9302      	str	r3, [sp, #8]
 8008cea:	f000 f934 	bl	8008f56 <RFBVM_init>
 8008cee:	1e04      	subs	r4, r0, #0
 8008cf0:	d140      	bne.n	8008d74 <GW_set_buffer_length+0xc8>
 8008cf2:	23a4      	movs	r3, #164	; 0xa4
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	18eb      	adds	r3, r5, r3
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	68e9      	ldr	r1, [r5, #12]
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	f000 f92a 	bl	8008f56 <RFBVM_init>
 8008d02:	1e04      	subs	r4, r0, #0
 8008d04:	d136      	bne.n	8008d74 <GW_set_buffer_length+0xc8>
 8008d06:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <GW_set_buffer_length+0xd4>)
 8008d08:	68e9      	ldr	r1, [r5, #12]
 8008d0a:	18ee      	adds	r6, r5, r3
 8008d0c:	0030      	movs	r0, r6
 8008d0e:	f000 f922 	bl	8008f56 <RFBVM_init>
 8008d12:	1e04      	subs	r4, r0, #0
 8008d14:	d12e      	bne.n	8008d74 <GW_set_buffer_length+0xc8>
 8008d16:	23d7      	movs	r3, #215	; 0xd7
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	18ef      	adds	r7, r5, r3
 8008d1c:	0038      	movs	r0, r7
 8008d1e:	68e9      	ldr	r1, [r5, #12]
 8008d20:	f000 f919 	bl	8008f56 <RFBVM_init>
 8008d24:	1e04      	subs	r4, r0, #0
 8008d26:	d125      	bne.n	8008d74 <GW_set_buffer_length+0xc8>
 8008d28:	9001      	str	r0, [sp, #4]
 8008d2a:	68eb      	ldr	r3, [r5, #12]
 8008d2c:	9a01      	ldr	r2, [sp, #4]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	dc06      	bgt.n	8008d40 <GW_set_buffer_length+0x94>
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	d01e      	beq.n	8008d74 <GW_set_buffer_length+0xc8>
 8008d36:	2408      	movs	r4, #8
 8008d38:	e01b      	b.n	8008d72 <GW_set_buffer_length+0xc6>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	60eb      	str	r3, [r5, #12]
 8008d3e:	e7cf      	b.n	8008ce0 <GW_set_buffer_length+0x34>
 8008d40:	2100      	movs	r1, #0
 8008d42:	9802      	ldr	r0, [sp, #8]
 8008d44:	f000 f925 	bl	8008f92 <RFBVM_push>
 8008d48:	2100      	movs	r1, #0
 8008d4a:	1824      	adds	r4, r4, r0
 8008d4c:	9803      	ldr	r0, [sp, #12]
 8008d4e:	f000 f920 	bl	8008f92 <RFBVM_push>
 8008d52:	2100      	movs	r1, #0
 8008d54:	1824      	adds	r4, r4, r0
 8008d56:	0030      	movs	r0, r6
 8008d58:	f000 f91b 	bl	8008f92 <RFBVM_push>
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	1824      	adds	r4, r4, r0
 8008d60:	0038      	movs	r0, r7
 8008d62:	f000 f916 	bl	8008f92 <RFBVM_push>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	1824      	adds	r4, r4, r0
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	e7dc      	b.n	8008d2a <GW_set_buffer_length+0x7e>
 8008d70:	2402      	movs	r4, #2
 8008d72:	4264      	negs	r4, r4
 8008d74:	0020      	movs	r0, r4
 8008d76:	b005      	add	sp, #20
 8008d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	447a0000 	.word	0x447a0000
 8008d80:	000004a4 	.word	0x000004a4

08008d84 <GW_set_frequency>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	0005      	movs	r5, r0
 8008d88:	000e      	movs	r6, r1
 8008d8a:	0014      	movs	r4, r2
 8008d8c:	1c1f      	adds	r7, r3, #0
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d015      	beq.n	8008dbe <GW_set_frequency+0x3a>
 8008d92:	2900      	cmp	r1, #0
 8008d94:	d013      	beq.n	8008dbe <GW_set_frequency+0x3a>
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	d011      	beq.n	8008dbe <GW_set_frequency+0x3a>
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	1c18      	adds	r0, r3, #0
 8008d9e:	f7f7 fb81 	bl	80004a4 <__aeabi_fcmple>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d10e      	bne.n	8008dc4 <GW_set_frequency+0x40>
 8008da6:	0021      	movs	r1, r4
 8008da8:	0030      	movs	r0, r6
 8008daa:	1c3a      	adds	r2, r7, #0
 8008dac:	f000 f854 	bl	8008e58 <HT_set_frequency>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d103      	bne.n	8008dbc <GW_set_frequency+0x38>
 8008db4:	0021      	movs	r1, r4
 8008db6:	0028      	movs	r0, r5
 8008db8:	f7ff ff78 	bl	8008cac <GW_set_buffer_length>
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbe:	2002      	movs	r0, #2
 8008dc0:	4240      	negs	r0, r0
 8008dc2:	e7fb      	b.n	8008dbc <GW_set_frequency+0x38>
 8008dc4:	2006      	movs	r0, #6
 8008dc6:	e7fb      	b.n	8008dc0 <GW_set_frequency+0x3c>

08008dc8 <HT_init>:
 8008dc8:	0003      	movs	r3, r0
 8008dca:	b510      	push	{r4, lr}
 8008dcc:	0008      	movs	r0, r1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01c      	beq.n	8008e0c <HT_init+0x44>
 8008dd2:	2900      	cmp	r1, #0
 8008dd4:	d01a      	beq.n	8008e0c <HT_init+0x44>
 8008dd6:	22fa      	movs	r2, #250	; 0xfa
 8008dd8:	0092      	lsls	r2, r2, #2
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	22fa      	movs	r2, #250	; 0xfa
 8008dde:	00d2      	lsls	r2, r2, #3
 8008de0:	609a      	str	r2, [r3, #8]
 8008de2:	2201      	movs	r2, #1
 8008de4:	60da      	str	r2, [r3, #12]
 8008de6:	761a      	strb	r2, [r3, #24]
 8008de8:	2200      	movs	r2, #0
 8008dea:	21fa      	movs	r1, #250	; 0xfa
 8008dec:	61da      	str	r2, [r3, #28]
 8008dee:	621a      	str	r2, [r3, #32]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24
 8008df2:	2464      	movs	r4, #100	; 0x64
 8008df4:	2200      	movs	r2, #0
 8008df6:	6059      	str	r1, [r3, #4]
 8008df8:	6159      	str	r1, [r3, #20]
 8008dfa:	316e      	adds	r1, #110	; 0x6e
 8008dfc:	611c      	str	r4, [r3, #16]
 8008dfe:	525a      	strh	r2, [r3, r1]
 8008e00:	33fc      	adds	r3, #252	; 0xfc
 8008e02:	671a      	str	r2, [r3, #112]	; 0x70
 8008e04:	67da      	str	r2, [r3, #124]	; 0x7c
 8008e06:	f000 f8e9 	bl	8008fdc <SEN_init>
 8008e0a:	bd10      	pop	{r4, pc}
 8008e0c:	2002      	movs	r0, #2
 8008e0e:	4240      	negs	r0, r0
 8008e10:	e7fb      	b.n	8008e0a <HT_init+0x42>
	...

08008e14 <HT_set_path_length>:
 8008e14:	b510      	push	{r4, lr}
 8008e16:	1e04      	subs	r4, r0, #0
 8008e18:	d017      	beq.n	8008e4a <HT_set_path_length+0x36>
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	db18      	blt.n	8008e50 <HT_set_path_length+0x3c>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6001      	str	r1, [r0, #0]
 8008e22:	6083      	str	r3, [r0, #8]
 8008e24:	300c      	adds	r0, #12
 8008e26:	f000 f896 	bl	8008f56 <RFBVM_init>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d10c      	bne.n	8008e48 <HT_set_path_length+0x34>
 8008e2e:	2388      	movs	r3, #136	; 0x88
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	6821      	ldr	r1, [r4, #0]
 8008e34:	18e0      	adds	r0, r4, r3
 8008e36:	f000 f88e 	bl	8008f56 <RFBVM_init>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d104      	bne.n	8008e48 <HT_set_path_length+0x34>
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <HT_set_path_length+0x40>)
 8008e40:	6821      	ldr	r1, [r4, #0]
 8008e42:	18e0      	adds	r0, r4, r3
 8008e44:	f000 f887 	bl	8008f56 <RFBVM_init>
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	2002      	movs	r0, #2
 8008e4c:	4240      	negs	r0, r0
 8008e4e:	e7fb      	b.n	8008e48 <HT_set_path_length+0x34>
 8008e50:	2004      	movs	r0, #4
 8008e52:	e7fb      	b.n	8008e4c <HT_set_path_length+0x38>
 8008e54:	00000434 	.word	0x00000434

08008e58 <HT_set_frequency>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	0004      	movs	r4, r0
 8008e5c:	000d      	movs	r5, r1
 8008e5e:	1c16      	adds	r6, r2, #0
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d039      	beq.n	8008ed8 <HT_set_frequency+0x80>
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d037      	beq.n	8008ed8 <HT_set_frequency+0x80>
 8008e68:	2100      	movs	r1, #0
 8008e6a:	1c10      	adds	r0, r2, #0
 8008e6c:	f7f7 fb1a 	bl	80004a4 <__aeabi_fcmple>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d134      	bne.n	8008ede <HT_set_frequency+0x86>
 8008e74:	0028      	movs	r0, r5
 8008e76:	1c31      	adds	r1, r6, #0
 8008e78:	f000 f8c4 	bl	8009004 <SEN_set_frequency>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d12a      	bne.n	8008ed6 <HT_set_frequency+0x7e>
 8008e80:	68ee      	ldr	r6, [r5, #12]
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	f7f7 ff30 	bl	8000ce8 <__aeabi_i2f>
 8008e88:	1c31      	adds	r1, r6, #0
 8008e8a:	f7f7 fddf 	bl	8000a4c <__aeabi_fmul>
 8008e8e:	4916      	ldr	r1, [pc, #88]	; (8008ee8 <HT_set_frequency+0x90>)
 8008e90:	f7f7 fc12 	bl	80006b8 <__aeabi_fdiv>
 8008e94:	f7f9 fdc2 	bl	8002a1c <__aeabi_f2d>
 8008e98:	f000 fa60 	bl	800935c <ceil>
 8008e9c:	f7f9 fd32 	bl	8002904 <__aeabi_d2iz>
 8008ea0:	0005      	movs	r5, r0
 8008ea2:	6860      	ldr	r0, [r4, #4]
 8008ea4:	f7f7 ff20 	bl	8000ce8 <__aeabi_i2f>
 8008ea8:	1c31      	adds	r1, r6, #0
 8008eaa:	f7f7 fdcf 	bl	8000a4c <__aeabi_fmul>
 8008eae:	490e      	ldr	r1, [pc, #56]	; (8008ee8 <HT_set_frequency+0x90>)
 8008eb0:	f7f7 fc02 	bl	80006b8 <__aeabi_fdiv>
 8008eb4:	f7f9 fdb2 	bl	8002a1c <__aeabi_f2d>
 8008eb8:	f000 fa50 	bl	800935c <ceil>
 8008ebc:	f7f9 fd22 	bl	8002904 <__aeabi_d2iz>
 8008ec0:	4285      	cmp	r5, r0
 8008ec2:	db0e      	blt.n	8008ee2 <HT_set_frequency+0x8a>
 8008ec4:	0023      	movs	r3, r4
 8008ec6:	33fc      	adds	r3, #252	; 0xfc
 8008ec8:	6798      	str	r0, [r3, #120]	; 0x78
 8008eca:	0020      	movs	r0, r4
 8008ecc:	3071      	adds	r0, #113	; 0x71
 8008ece:	0029      	movs	r1, r5
 8008ed0:	30ff      	adds	r0, #255	; 0xff
 8008ed2:	f7ff ff9f 	bl	8008e14 <HT_set_path_length>
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	2002      	movs	r0, #2
 8008eda:	4240      	negs	r0, r0
 8008edc:	e7fb      	b.n	8008ed6 <HT_set_frequency+0x7e>
 8008ede:	2006      	movs	r0, #6
 8008ee0:	e7fb      	b.n	8008eda <HT_set_frequency+0x82>
 8008ee2:	2007      	movs	r0, #7
 8008ee4:	e7f9      	b.n	8008eda <HT_set_frequency+0x82>
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	447a0000 	.word	0x447a0000

08008eec <HT_struct_init>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	0004      	movs	r4, r0
 8008ef0:	000d      	movs	r5, r1
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d010      	beq.n	8008f18 <HT_struct_init+0x2c>
 8008ef6:	1e4b      	subs	r3, r1, #1
 8008ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8008efa:	d810      	bhi.n	8008f1e <HT_struct_init+0x32>
 8008efc:	008a      	lsls	r2, r1, #2
 8008efe:	300c      	adds	r0, #12
 8008f00:	2100      	movs	r1, #0
 8008f02:	f000 f8dd 	bl	80090c0 <memset>
 8008f06:	0020      	movs	r0, r4
 8008f08:	300d      	adds	r0, #13
 8008f0a:	002a      	movs	r2, r5
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	30ff      	adds	r0, #255	; 0xff
 8008f10:	f000 f8d6 	bl	80090c0 <memset>
 8008f14:	2000      	movs	r0, #0
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	2002      	movs	r0, #2
 8008f1a:	4240      	negs	r0, r0
 8008f1c:	e7fb      	b.n	8008f16 <HT_struct_init+0x2a>
 8008f1e:	2004      	movs	r0, #4
 8008f20:	e7fb      	b.n	8008f1a <HT_struct_init+0x2e>

08008f22 <HT_set_square_resolution>:
 8008f22:	b570      	push	{r4, r5, r6, lr}
 8008f24:	000d      	movs	r5, r1
 8008f26:	0004      	movs	r4, r0
 8008f28:	0011      	movs	r1, r2
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d00e      	beq.n	8008f4c <HT_set_square_resolution+0x2a>
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	d00c      	beq.n	8008f4c <HT_set_square_resolution+0x2a>
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	dd0d      	ble.n	8008f52 <HT_set_square_resolution+0x30>
 8008f36:	0028      	movs	r0, r5
 8008f38:	f000 f888 	bl	800904c <SEN_set_square_resolution>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d104      	bne.n	8008f4a <HT_set_square_resolution+0x28>
 8008f40:	0020      	movs	r0, r4
 8008f42:	68a9      	ldr	r1, [r5, #8]
 8008f44:	301c      	adds	r0, #28
 8008f46:	f7ff ffd1 	bl	8008eec <HT_struct_init>
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	2002      	movs	r0, #2
 8008f4e:	4240      	negs	r0, r0
 8008f50:	e7fb      	b.n	8008f4a <HT_set_square_resolution+0x28>
 8008f52:	2004      	movs	r0, #4
 8008f54:	e7fb      	b.n	8008f4e <HT_set_square_resolution+0x2c>

08008f56 <RFBVM_init>:
 8008f56:	000b      	movs	r3, r1
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	dc15      	bgt.n	8008f8a <RFBVM_init+0x34>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	2284      	movs	r2, #132	; 0x84
 8008f62:	2480      	movs	r4, #128	; 0x80
 8008f64:	0092      	lsls	r2, r2, #2
 8008f66:	5083      	str	r3, [r0, r2]
 8008f68:	009a      	lsls	r2, r3, #2
 8008f6a:	1882      	adds	r2, r0, r2
 8008f6c:	00a4      	lsls	r4, r4, #2
 8008f6e:	5102      	str	r2, [r0, r4]
 8008f70:	2281      	movs	r2, #129	; 0x81
 8008f72:	2400      	movs	r4, #0
 8008f74:	0092      	lsls	r2, r2, #2
 8008f76:	5080      	str	r0, [r0, r2]
 8008f78:	3204      	adds	r2, #4
 8008f7a:	5080      	str	r0, [r0, r2]
 8008f7c:	3204      	adds	r2, #4
 8008f7e:	5084      	str	r4, [r0, r2]
 8008f80:	1a58      	subs	r0, r3, r1
 8008f82:	1e42      	subs	r2, r0, #1
 8008f84:	4190      	sbcs	r0, r2
 8008f86:	4240      	negs	r0, r0
 8008f88:	bd10      	pop	{r4, pc}
 8008f8a:	2980      	cmp	r1, #128	; 0x80
 8008f8c:	dde8      	ble.n	8008f60 <RFBVM_init+0xa>
 8008f8e:	2380      	movs	r3, #128	; 0x80
 8008f90:	e7e6      	b.n	8008f60 <RFBVM_init+0xa>

08008f92 <RFBVM_push>:
 8008f92:	b510      	push	{r4, lr}
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d01d      	beq.n	8008fd4 <RFBVM_push+0x42>
 8008f98:	2282      	movs	r2, #130	; 0x82
 8008f9a:	0092      	lsls	r2, r2, #2
 8008f9c:	5883      	ldr	r3, [r0, r2]
 8008f9e:	c302      	stmia	r3!, {r1}
 8008fa0:	2180      	movs	r1, #128	; 0x80
 8008fa2:	0089      	lsls	r1, r1, #2
 8008fa4:	5841      	ldr	r1, [r0, r1]
 8008fa6:	5083      	str	r3, [r0, r2]
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	d100      	bne.n	8008fae <RFBVM_push+0x1c>
 8008fac:	5080      	str	r0, [r0, r2]
 8008fae:	2283      	movs	r2, #131	; 0x83
 8008fb0:	2484      	movs	r4, #132	; 0x84
 8008fb2:	0092      	lsls	r2, r2, #2
 8008fb4:	00a4      	lsls	r4, r4, #2
 8008fb6:	5883      	ldr	r3, [r0, r2]
 8008fb8:	5904      	ldr	r4, [r0, r4]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	d107      	bne.n	8008fce <RFBVM_push+0x3c>
 8008fbe:	3a08      	subs	r2, #8
 8008fc0:	5883      	ldr	r3, [r0, r2]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4299      	cmp	r1, r3
 8008fc6:	d103      	bne.n	8008fd0 <RFBVM_push+0x3e>
 8008fc8:	5080      	str	r0, [r0, r2]
 8008fca:	2000      	movs	r0, #0
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	3301      	adds	r3, #1
 8008fd0:	5083      	str	r3, [r0, r2]
 8008fd2:	e7fa      	b.n	8008fca <RFBVM_push+0x38>
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	4240      	negs	r0, r0
 8008fd8:	e7f8      	b.n	8008fcc <RFBVM_push+0x3a>
	...

08008fdc <SEN_init>:
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d00c      	beq.n	8008ffa <SEN_init+0x1e>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	60c2      	str	r2, [r0, #12]
 8008fe4:	4a06      	ldr	r2, [pc, #24]	; (8009000 <SEN_init+0x24>)
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6102      	str	r2, [r0, #16]
 8008fea:	6142      	str	r2, [r0, #20]
 8008fec:	2201      	movs	r2, #1
 8008fee:	6003      	str	r3, [r0, #0]
 8008ff0:	6043      	str	r3, [r0, #4]
 8008ff2:	6083      	str	r3, [r0, #8]
 8008ff4:	7602      	strb	r2, [r0, #24]
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	4770      	bx	lr
 8008ffa:	2002      	movs	r0, #2
 8008ffc:	4240      	negs	r0, r0
 8008ffe:	e7fb      	b.n	8008ff8 <SEN_init+0x1c>
 8009000:	3f402037 	.word	0x3f402037

08009004 <SEN_set_frequency>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	0004      	movs	r4, r0
 8009008:	1c0d      	adds	r5, r1, #0
 800900a:	2800      	cmp	r0, #0
 800900c:	d007      	beq.n	800901e <SEN_set_frequency+0x1a>
 800900e:	2100      	movs	r1, #0
 8009010:	1c28      	adds	r0, r5, #0
 8009012:	f7f7 fa47 	bl	80004a4 <__aeabi_fcmple>
 8009016:	2800      	cmp	r0, #0
 8009018:	d104      	bne.n	8009024 <SEN_set_frequency+0x20>
 800901a:	60e5      	str	r5, [r4, #12]
 800901c:	bd70      	pop	{r4, r5, r6, pc}
 800901e:	2002      	movs	r0, #2
 8009020:	4240      	negs	r0, r0
 8009022:	e7fb      	b.n	800901c <SEN_set_frequency+0x18>
 8009024:	2006      	movs	r0, #6
 8009026:	e7fb      	b.n	8009020 <SEN_set_frequency+0x1c>

08009028 <SEN_set_resolution>:
 8009028:	2800      	cmp	r0, #0
 800902a:	d00a      	beq.n	8009042 <SEN_set_resolution+0x1a>
 800902c:	2900      	cmp	r1, #0
 800902e:	dd0b      	ble.n	8009048 <SEN_set_resolution+0x20>
 8009030:	2a00      	cmp	r2, #0
 8009032:	dd09      	ble.n	8009048 <SEN_set_resolution+0x20>
 8009034:	0013      	movs	r3, r2
 8009036:	434b      	muls	r3, r1
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	dc05      	bgt.n	8009048 <SEN_set_resolution+0x20>
 800903c:	c00e      	stmia	r0!, {r1, r2, r3}
 800903e:	2000      	movs	r0, #0
 8009040:	4770      	bx	lr
 8009042:	2002      	movs	r0, #2
 8009044:	4240      	negs	r0, r0
 8009046:	e7fb      	b.n	8009040 <SEN_set_resolution+0x18>
 8009048:	2004      	movs	r0, #4
 800904a:	e7fb      	b.n	8009044 <SEN_set_resolution+0x1c>

0800904c <SEN_set_square_resolution>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	0005      	movs	r5, r0
 8009050:	000c      	movs	r4, r1
 8009052:	2800      	cmp	r0, #0
 8009054:	d012      	beq.n	800907c <SEN_set_square_resolution+0x30>
 8009056:	2900      	cmp	r1, #0
 8009058:	dd13      	ble.n	8009082 <SEN_set_square_resolution+0x36>
 800905a:	0008      	movs	r0, r1
 800905c:	f7f9 fc88 	bl	8002970 <__aeabi_i2d>
 8009060:	f000 f869 	bl	8009136 <sqrt>
 8009064:	f7f9 fc4e 	bl	8002904 <__aeabi_d2iz>
 8009068:	0003      	movs	r3, r0
 800906a:	4343      	muls	r3, r0
 800906c:	0001      	movs	r1, r0
 800906e:	42a3      	cmp	r3, r4
 8009070:	d109      	bne.n	8009086 <SEN_set_square_resolution+0x3a>
 8009072:	0002      	movs	r2, r0
 8009074:	0028      	movs	r0, r5
 8009076:	f7ff ffd7 	bl	8009028 <SEN_set_resolution>
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	2002      	movs	r0, #2
 800907e:	4240      	negs	r0, r0
 8009080:	e7fb      	b.n	800907a <SEN_set_square_resolution+0x2e>
 8009082:	2004      	movs	r0, #4
 8009084:	e7fb      	b.n	800907e <SEN_set_square_resolution+0x32>
 8009086:	2005      	movs	r0, #5
 8009088:	e7f9      	b.n	800907e <SEN_set_square_resolution+0x32>

0800908a <SEN_set_data>:
 800908a:	b530      	push	{r4, r5, lr}
 800908c:	ac03      	add	r4, sp, #12
 800908e:	7825      	ldrb	r5, [r4, #0]
 8009090:	2800      	cmp	r0, #0
 8009092:	d010      	beq.n	80090b6 <SEN_set_data+0x2c>
 8009094:	2900      	cmp	r1, #0
 8009096:	db11      	blt.n	80090bc <SEN_set_data+0x32>
 8009098:	6884      	ldr	r4, [r0, #8]
 800909a:	428c      	cmp	r4, r1
 800909c:	dd0e      	ble.n	80090bc <SEN_set_data+0x32>
 800909e:	008c      	lsls	r4, r1, #2
 80090a0:	1904      	adds	r4, r0, r4
 80090a2:	6222      	str	r2, [r4, #32]
 80090a4:	34fc      	adds	r4, #252	; 0xfc
 80090a6:	6263      	str	r3, [r4, #36]	; 0x24
 80090a8:	2388      	movs	r3, #136	; 0x88
 80090aa:	1840      	adds	r0, r0, r1
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	18c0      	adds	r0, r0, r3
 80090b0:	7005      	strb	r5, [r0, #0]
 80090b2:	2000      	movs	r0, #0
 80090b4:	bd30      	pop	{r4, r5, pc}
 80090b6:	2002      	movs	r0, #2
 80090b8:	4240      	negs	r0, r0
 80090ba:	e7fb      	b.n	80090b4 <SEN_set_data+0x2a>
 80090bc:	2003      	movs	r0, #3
 80090be:	e7fb      	b.n	80090b8 <SEN_set_data+0x2e>

080090c0 <memset>:
 80090c0:	0003      	movs	r3, r0
 80090c2:	1882      	adds	r2, r0, r2
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d100      	bne.n	80090ca <memset+0xa>
 80090c8:	4770      	bx	lr
 80090ca:	7019      	strb	r1, [r3, #0]
 80090cc:	3301      	adds	r3, #1
 80090ce:	e7f9      	b.n	80090c4 <memset+0x4>

080090d0 <__errno>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	; (80090d8 <__errno+0x8>)
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	4770      	bx	lr
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	20000058 	.word	0x20000058

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2600      	movs	r6, #0
 80090e0:	4c0c      	ldr	r4, [pc, #48]	; (8009114 <__libc_init_array+0x38>)
 80090e2:	4d0d      	ldr	r5, [pc, #52]	; (8009118 <__libc_init_array+0x3c>)
 80090e4:	1b64      	subs	r4, r4, r5
 80090e6:	10a4      	asrs	r4, r4, #2
 80090e8:	42a6      	cmp	r6, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	2600      	movs	r6, #0
 80090ee:	f000 f9bf 	bl	8009470 <_init>
 80090f2:	4c0a      	ldr	r4, [pc, #40]	; (800911c <__libc_init_array+0x40>)
 80090f4:	4d0a      	ldr	r5, [pc, #40]	; (8009120 <__libc_init_array+0x44>)
 80090f6:	1b64      	subs	r4, r4, r5
 80090f8:	10a4      	asrs	r4, r4, #2
 80090fa:	42a6      	cmp	r6, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	00b3      	lsls	r3, r6, #2
 8009102:	58eb      	ldr	r3, [r5, r3]
 8009104:	4798      	blx	r3
 8009106:	3601      	adds	r6, #1
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	00b3      	lsls	r3, r6, #2
 800910c:	58eb      	ldr	r3, [r5, r3]
 800910e:	4798      	blx	r3
 8009110:	3601      	adds	r6, #1
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	0801ed40 	.word	0x0801ed40
 8009118:	0801ed40 	.word	0x0801ed40
 800911c:	0801ed44 	.word	0x0801ed44
 8009120:	0801ed40 	.word	0x0801ed40

08009124 <memcpy>:
 8009124:	2300      	movs	r3, #0
 8009126:	b510      	push	{r4, lr}
 8009128:	429a      	cmp	r2, r3
 800912a:	d100      	bne.n	800912e <memcpy+0xa>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	5ccc      	ldrb	r4, [r1, r3]
 8009130:	54c4      	strb	r4, [r0, r3]
 8009132:	3301      	adds	r3, #1
 8009134:	e7f8      	b.n	8009128 <memcpy+0x4>

08009136 <sqrt>:
 8009136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009138:	0004      	movs	r4, r0
 800913a:	000d      	movs	r5, r1
 800913c:	f000 f822 	bl	8009184 <__ieee754_sqrt>
 8009140:	0022      	movs	r2, r4
 8009142:	0006      	movs	r6, r0
 8009144:	000f      	movs	r7, r1
 8009146:	002b      	movs	r3, r5
 8009148:	0020      	movs	r0, r4
 800914a:	0029      	movs	r1, r5
 800914c:	f7f9 fbbc 	bl	80028c8 <__aeabi_dcmpun>
 8009150:	2800      	cmp	r0, #0
 8009152:	d113      	bne.n	800917c <sqrt+0x46>
 8009154:	2200      	movs	r2, #0
 8009156:	2300      	movs	r3, #0
 8009158:	0020      	movs	r0, r4
 800915a:	0029      	movs	r1, r5
 800915c:	f7f7 f95e 	bl	800041c <__aeabi_dcmplt>
 8009160:	2800      	cmp	r0, #0
 8009162:	d00b      	beq.n	800917c <sqrt+0x46>
 8009164:	f7ff ffb4 	bl	80090d0 <__errno>
 8009168:	2321      	movs	r3, #33	; 0x21
 800916a:	2200      	movs	r2, #0
 800916c:	6003      	str	r3, [r0, #0]
 800916e:	2300      	movs	r3, #0
 8009170:	0010      	movs	r0, r2
 8009172:	0019      	movs	r1, r3
 8009174:	f7f8 f96a 	bl	800144c <__aeabi_ddiv>
 8009178:	0006      	movs	r6, r0
 800917a:	000f      	movs	r7, r1
 800917c:	0030      	movs	r0, r6
 800917e:	0039      	movs	r1, r7
 8009180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009184 <__ieee754_sqrt>:
 8009184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009186:	000a      	movs	r2, r1
 8009188:	000c      	movs	r4, r1
 800918a:	496f      	ldr	r1, [pc, #444]	; (8009348 <__ieee754_sqrt+0x1c4>)
 800918c:	0005      	movs	r5, r0
 800918e:	0003      	movs	r3, r0
 8009190:	0008      	movs	r0, r1
 8009192:	b087      	sub	sp, #28
 8009194:	4020      	ands	r0, r4
 8009196:	4288      	cmp	r0, r1
 8009198:	d111      	bne.n	80091be <__ieee754_sqrt+0x3a>
 800919a:	002a      	movs	r2, r5
 800919c:	0023      	movs	r3, r4
 800919e:	0028      	movs	r0, r5
 80091a0:	0021      	movs	r1, r4
 80091a2:	f7f8 fd4d 	bl	8001c40 <__aeabi_dmul>
 80091a6:	0002      	movs	r2, r0
 80091a8:	000b      	movs	r3, r1
 80091aa:	0028      	movs	r0, r5
 80091ac:	0021      	movs	r1, r4
 80091ae:	f7f7 fded 	bl	8000d8c <__aeabi_dadd>
 80091b2:	0005      	movs	r5, r0
 80091b4:	000c      	movs	r4, r1
 80091b6:	0028      	movs	r0, r5
 80091b8:	0021      	movs	r1, r4
 80091ba:	b007      	add	sp, #28
 80091bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091be:	2c00      	cmp	r4, #0
 80091c0:	dc12      	bgt.n	80091e8 <__ieee754_sqrt+0x64>
 80091c2:	0061      	lsls	r1, r4, #1
 80091c4:	0849      	lsrs	r1, r1, #1
 80091c6:	4329      	orrs	r1, r5
 80091c8:	d0f5      	beq.n	80091b6 <__ieee754_sqrt+0x32>
 80091ca:	2100      	movs	r1, #0
 80091cc:	428c      	cmp	r4, r1
 80091ce:	d100      	bne.n	80091d2 <__ieee754_sqrt+0x4e>
 80091d0:	e09f      	b.n	8009312 <__ieee754_sqrt+0x18e>
 80091d2:	002a      	movs	r2, r5
 80091d4:	0023      	movs	r3, r4
 80091d6:	0028      	movs	r0, r5
 80091d8:	0021      	movs	r1, r4
 80091da:	f7f8 fff3 	bl	80021c4 <__aeabi_dsub>
 80091de:	0002      	movs	r2, r0
 80091e0:	000b      	movs	r3, r1
 80091e2:	f7f8 f933 	bl	800144c <__aeabi_ddiv>
 80091e6:	e7e4      	b.n	80091b2 <__ieee754_sqrt+0x2e>
 80091e8:	1521      	asrs	r1, r4, #20
 80091ea:	d100      	bne.n	80091ee <__ieee754_sqrt+0x6a>
 80091ec:	e091      	b.n	8009312 <__ieee754_sqrt+0x18e>
 80091ee:	4857      	ldr	r0, [pc, #348]	; (800934c <__ieee754_sqrt+0x1c8>)
 80091f0:	0312      	lsls	r2, r2, #12
 80091f2:	180c      	adds	r4, r1, r0
 80091f4:	2080      	movs	r0, #128	; 0x80
 80091f6:	0b12      	lsrs	r2, r2, #12
 80091f8:	0340      	lsls	r0, r0, #13
 80091fa:	4310      	orrs	r0, r2
 80091fc:	07c9      	lsls	r1, r1, #31
 80091fe:	d403      	bmi.n	8009208 <__ieee754_sqrt+0x84>
 8009200:	0fda      	lsrs	r2, r3, #31
 8009202:	0040      	lsls	r0, r0, #1
 8009204:	1810      	adds	r0, r2, r0
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	2500      	movs	r5, #0
 800920a:	1062      	asrs	r2, r4, #1
 800920c:	0040      	lsls	r0, r0, #1
 800920e:	2480      	movs	r4, #128	; 0x80
 8009210:	9205      	str	r2, [sp, #20]
 8009212:	0fda      	lsrs	r2, r3, #31
 8009214:	1812      	adds	r2, r2, r0
 8009216:	0029      	movs	r1, r5
 8009218:	2016      	movs	r0, #22
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	03a4      	lsls	r4, r4, #14
 800921e:	190e      	adds	r6, r1, r4
 8009220:	4296      	cmp	r6, r2
 8009222:	dc02      	bgt.n	800922a <__ieee754_sqrt+0xa6>
 8009224:	1931      	adds	r1, r6, r4
 8009226:	1b92      	subs	r2, r2, r6
 8009228:	192d      	adds	r5, r5, r4
 800922a:	0fde      	lsrs	r6, r3, #31
 800922c:	0052      	lsls	r2, r2, #1
 800922e:	3801      	subs	r0, #1
 8009230:	18b2      	adds	r2, r6, r2
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	0864      	lsrs	r4, r4, #1
 8009236:	2800      	cmp	r0, #0
 8009238:	d1f1      	bne.n	800921e <__ieee754_sqrt+0x9a>
 800923a:	2620      	movs	r6, #32
 800923c:	2780      	movs	r7, #128	; 0x80
 800923e:	0004      	movs	r4, r0
 8009240:	9604      	str	r6, [sp, #16]
 8009242:	063f      	lsls	r7, r7, #24
 8009244:	183e      	adds	r6, r7, r0
 8009246:	46b4      	mov	ip, r6
 8009248:	428a      	cmp	r2, r1
 800924a:	dc02      	bgt.n	8009252 <__ieee754_sqrt+0xce>
 800924c:	d114      	bne.n	8009278 <__ieee754_sqrt+0xf4>
 800924e:	429e      	cmp	r6, r3
 8009250:	d812      	bhi.n	8009278 <__ieee754_sqrt+0xf4>
 8009252:	4660      	mov	r0, ip
 8009254:	4666      	mov	r6, ip
 8009256:	19c0      	adds	r0, r0, r7
 8009258:	9100      	str	r1, [sp, #0]
 800925a:	2e00      	cmp	r6, #0
 800925c:	da03      	bge.n	8009266 <__ieee754_sqrt+0xe2>
 800925e:	43c6      	mvns	r6, r0
 8009260:	0ff6      	lsrs	r6, r6, #31
 8009262:	198e      	adds	r6, r1, r6
 8009264:	9600      	str	r6, [sp, #0]
 8009266:	1a52      	subs	r2, r2, r1
 8009268:	4563      	cmp	r3, ip
 800926a:	4189      	sbcs	r1, r1
 800926c:	4249      	negs	r1, r1
 800926e:	1a52      	subs	r2, r2, r1
 8009270:	4661      	mov	r1, ip
 8009272:	1a5b      	subs	r3, r3, r1
 8009274:	9900      	ldr	r1, [sp, #0]
 8009276:	19e4      	adds	r4, r4, r7
 8009278:	0fde      	lsrs	r6, r3, #31
 800927a:	0052      	lsls	r2, r2, #1
 800927c:	18b2      	adds	r2, r6, r2
 800927e:	9e04      	ldr	r6, [sp, #16]
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	3e01      	subs	r6, #1
 8009284:	087f      	lsrs	r7, r7, #1
 8009286:	9604      	str	r6, [sp, #16]
 8009288:	2e00      	cmp	r6, #0
 800928a:	d1db      	bne.n	8009244 <__ieee754_sqrt+0xc0>
 800928c:	431a      	orrs	r2, r3
 800928e:	d01f      	beq.n	80092d0 <__ieee754_sqrt+0x14c>
 8009290:	4e2f      	ldr	r6, [pc, #188]	; (8009350 <__ieee754_sqrt+0x1cc>)
 8009292:	4f30      	ldr	r7, [pc, #192]	; (8009354 <__ieee754_sqrt+0x1d0>)
 8009294:	6830      	ldr	r0, [r6, #0]
 8009296:	6871      	ldr	r1, [r6, #4]
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	9200      	str	r2, [sp, #0]
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	6832      	ldr	r2, [r6, #0]
 80092a2:	6873      	ldr	r3, [r6, #4]
 80092a4:	9202      	str	r2, [sp, #8]
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	9a00      	ldr	r2, [sp, #0]
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	f7f8 ff8a 	bl	80021c4 <__aeabi_dsub>
 80092b0:	0002      	movs	r2, r0
 80092b2:	000b      	movs	r3, r1
 80092b4:	9802      	ldr	r0, [sp, #8]
 80092b6:	9903      	ldr	r1, [sp, #12]
 80092b8:	f7f7 f8ba 	bl	8000430 <__aeabi_dcmple>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d007      	beq.n	80092d0 <__ieee754_sqrt+0x14c>
 80092c0:	6830      	ldr	r0, [r6, #0]
 80092c2:	6871      	ldr	r1, [r6, #4]
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	1c67      	adds	r7, r4, #1
 80092ca:	d127      	bne.n	800931c <__ieee754_sqrt+0x198>
 80092cc:	9c04      	ldr	r4, [sp, #16]
 80092ce:	3501      	adds	r5, #1
 80092d0:	4b21      	ldr	r3, [pc, #132]	; (8009358 <__ieee754_sqrt+0x1d4>)
 80092d2:	1069      	asrs	r1, r5, #1
 80092d4:	18c9      	adds	r1, r1, r3
 80092d6:	0864      	lsrs	r4, r4, #1
 80092d8:	07ed      	lsls	r5, r5, #31
 80092da:	d502      	bpl.n	80092e2 <__ieee754_sqrt+0x15e>
 80092dc:	2380      	movs	r3, #128	; 0x80
 80092de:	061b      	lsls	r3, r3, #24
 80092e0:	431c      	orrs	r4, r3
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	0025      	movs	r5, r4
 80092e6:	0518      	lsls	r0, r3, #20
 80092e8:	1843      	adds	r3, r0, r1
 80092ea:	001c      	movs	r4, r3
 80092ec:	e763      	b.n	80091b6 <__ieee754_sqrt+0x32>
 80092ee:	0ada      	lsrs	r2, r3, #11
 80092f0:	3815      	subs	r0, #21
 80092f2:	055b      	lsls	r3, r3, #21
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d0fa      	beq.n	80092ee <__ieee754_sqrt+0x16a>
 80092f8:	2480      	movs	r4, #128	; 0x80
 80092fa:	0364      	lsls	r4, r4, #13
 80092fc:	4222      	tst	r2, r4
 80092fe:	d00a      	beq.n	8009316 <__ieee754_sqrt+0x192>
 8009300:	2420      	movs	r4, #32
 8009302:	001e      	movs	r6, r3
 8009304:	1a64      	subs	r4, r4, r1
 8009306:	40e6      	lsrs	r6, r4
 8009308:	1e4d      	subs	r5, r1, #1
 800930a:	408b      	lsls	r3, r1
 800930c:	4332      	orrs	r2, r6
 800930e:	1b41      	subs	r1, r0, r5
 8009310:	e76d      	b.n	80091ee <__ieee754_sqrt+0x6a>
 8009312:	2000      	movs	r0, #0
 8009314:	e7ee      	b.n	80092f4 <__ieee754_sqrt+0x170>
 8009316:	0052      	lsls	r2, r2, #1
 8009318:	3101      	adds	r1, #1
 800931a:	e7ef      	b.n	80092fc <__ieee754_sqrt+0x178>
 800931c:	f7f7 fd36 	bl	8000d8c <__aeabi_dadd>
 8009320:	6877      	ldr	r7, [r6, #4]
 8009322:	6836      	ldr	r6, [r6, #0]
 8009324:	0002      	movs	r2, r0
 8009326:	000b      	movs	r3, r1
 8009328:	0030      	movs	r0, r6
 800932a:	0039      	movs	r1, r7
 800932c:	f7f7 f876 	bl	800041c <__aeabi_dcmplt>
 8009330:	2800      	cmp	r0, #0
 8009332:	d004      	beq.n	800933e <__ieee754_sqrt+0x1ba>
 8009334:	3402      	adds	r4, #2
 8009336:	4263      	negs	r3, r4
 8009338:	4163      	adcs	r3, r4
 800933a:	18ed      	adds	r5, r5, r3
 800933c:	e7c8      	b.n	80092d0 <__ieee754_sqrt+0x14c>
 800933e:	2301      	movs	r3, #1
 8009340:	3401      	adds	r4, #1
 8009342:	439c      	bics	r4, r3
 8009344:	e7c4      	b.n	80092d0 <__ieee754_sqrt+0x14c>
 8009346:	46c0      	nop			; (mov r8, r8)
 8009348:	7ff00000 	.word	0x7ff00000
 800934c:	fffffc01 	.word	0xfffffc01
 8009350:	20000060 	.word	0x20000060
 8009354:	20000068 	.word	0x20000068
 8009358:	3fe00000 	.word	0x3fe00000

0800935c <ceil>:
 800935c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800935e:	004b      	lsls	r3, r1, #1
 8009360:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <ceil+0xfc>)
 8009362:	0d5b      	lsrs	r3, r3, #21
 8009364:	189f      	adds	r7, r3, r2
 8009366:	4684      	mov	ip, r0
 8009368:	000e      	movs	r6, r1
 800936a:	000c      	movs	r4, r1
 800936c:	0005      	movs	r5, r0
 800936e:	9001      	str	r0, [sp, #4]
 8009370:	2f13      	cmp	r7, #19
 8009372:	dc33      	bgt.n	80093dc <ceil+0x80>
 8009374:	2f00      	cmp	r7, #0
 8009376:	da15      	bge.n	80093a4 <ceil+0x48>
 8009378:	4a38      	ldr	r2, [pc, #224]	; (800945c <ceil+0x100>)
 800937a:	4b39      	ldr	r3, [pc, #228]	; (8009460 <ceil+0x104>)
 800937c:	4660      	mov	r0, ip
 800937e:	0031      	movs	r1, r6
 8009380:	f7f7 fd04 	bl	8000d8c <__aeabi_dadd>
 8009384:	2200      	movs	r2, #0
 8009386:	2300      	movs	r3, #0
 8009388:	f7f7 f85c 	bl	8000444 <__aeabi_dcmpgt>
 800938c:	2800      	cmp	r0, #0
 800938e:	d006      	beq.n	800939e <ceil+0x42>
 8009390:	2e00      	cmp	r6, #0
 8009392:	db5c      	blt.n	800944e <ceil+0xf2>
 8009394:	432c      	orrs	r4, r5
 8009396:	2500      	movs	r5, #0
 8009398:	42ac      	cmp	r4, r5
 800939a:	d000      	beq.n	800939e <ceil+0x42>
 800939c:	4c31      	ldr	r4, [pc, #196]	; (8009464 <ceil+0x108>)
 800939e:	46ac      	mov	ip, r5
 80093a0:	0026      	movs	r6, r4
 80093a2:	e029      	b.n	80093f8 <ceil+0x9c>
 80093a4:	4b30      	ldr	r3, [pc, #192]	; (8009468 <ceil+0x10c>)
 80093a6:	413b      	asrs	r3, r7
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	400b      	ands	r3, r1
 80093ac:	4303      	orrs	r3, r0
 80093ae:	d023      	beq.n	80093f8 <ceil+0x9c>
 80093b0:	4a2a      	ldr	r2, [pc, #168]	; (800945c <ceil+0x100>)
 80093b2:	4b2b      	ldr	r3, [pc, #172]	; (8009460 <ceil+0x104>)
 80093b4:	4660      	mov	r0, ip
 80093b6:	0031      	movs	r1, r6
 80093b8:	f7f7 fce8 	bl	8000d8c <__aeabi_dadd>
 80093bc:	2200      	movs	r2, #0
 80093be:	2300      	movs	r3, #0
 80093c0:	f7f7 f840 	bl	8000444 <__aeabi_dcmpgt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d0ea      	beq.n	800939e <ceil+0x42>
 80093c8:	2e00      	cmp	r6, #0
 80093ca:	dd03      	ble.n	80093d4 <ceil+0x78>
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	035b      	lsls	r3, r3, #13
 80093d0:	413b      	asrs	r3, r7
 80093d2:	18f4      	adds	r4, r6, r3
 80093d4:	9b00      	ldr	r3, [sp, #0]
 80093d6:	2500      	movs	r5, #0
 80093d8:	439c      	bics	r4, r3
 80093da:	e7e0      	b.n	800939e <ceil+0x42>
 80093dc:	2f33      	cmp	r7, #51	; 0x33
 80093de:	dd0f      	ble.n	8009400 <ceil+0xa4>
 80093e0:	2380      	movs	r3, #128	; 0x80
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	429f      	cmp	r7, r3
 80093e6:	d107      	bne.n	80093f8 <ceil+0x9c>
 80093e8:	0002      	movs	r2, r0
 80093ea:	000b      	movs	r3, r1
 80093ec:	4660      	mov	r0, ip
 80093ee:	0031      	movs	r1, r6
 80093f0:	f7f7 fccc 	bl	8000d8c <__aeabi_dadd>
 80093f4:	4684      	mov	ip, r0
 80093f6:	000e      	movs	r6, r1
 80093f8:	4660      	mov	r0, ip
 80093fa:	0031      	movs	r1, r6
 80093fc:	b003      	add	sp, #12
 80093fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009400:	4a1a      	ldr	r2, [pc, #104]	; (800946c <ceil+0x110>)
 8009402:	189b      	adds	r3, r3, r2
 8009404:	2201      	movs	r2, #1
 8009406:	4252      	negs	r2, r2
 8009408:	40da      	lsrs	r2, r3
 800940a:	9200      	str	r2, [sp, #0]
 800940c:	4202      	tst	r2, r0
 800940e:	d0f3      	beq.n	80093f8 <ceil+0x9c>
 8009410:	4a12      	ldr	r2, [pc, #72]	; (800945c <ceil+0x100>)
 8009412:	4b13      	ldr	r3, [pc, #76]	; (8009460 <ceil+0x104>)
 8009414:	4660      	mov	r0, ip
 8009416:	0031      	movs	r1, r6
 8009418:	f7f7 fcb8 	bl	8000d8c <__aeabi_dadd>
 800941c:	2200      	movs	r2, #0
 800941e:	2300      	movs	r3, #0
 8009420:	f7f7 f810 	bl	8000444 <__aeabi_dcmpgt>
 8009424:	2800      	cmp	r0, #0
 8009426:	d0ba      	beq.n	800939e <ceil+0x42>
 8009428:	2e00      	cmp	r6, #0
 800942a:	dd02      	ble.n	8009432 <ceil+0xd6>
 800942c:	2f14      	cmp	r7, #20
 800942e:	d103      	bne.n	8009438 <ceil+0xdc>
 8009430:	3401      	adds	r4, #1
 8009432:	9b00      	ldr	r3, [sp, #0]
 8009434:	439d      	bics	r5, r3
 8009436:	e7b2      	b.n	800939e <ceil+0x42>
 8009438:	2234      	movs	r2, #52	; 0x34
 800943a:	2301      	movs	r3, #1
 800943c:	1bd2      	subs	r2, r2, r7
 800943e:	4093      	lsls	r3, r2
 8009440:	18ed      	adds	r5, r5, r3
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	429d      	cmp	r5, r3
 8009446:	419b      	sbcs	r3, r3
 8009448:	425b      	negs	r3, r3
 800944a:	18f4      	adds	r4, r6, r3
 800944c:	e7f1      	b.n	8009432 <ceil+0xd6>
 800944e:	2480      	movs	r4, #128	; 0x80
 8009450:	2500      	movs	r5, #0
 8009452:	0624      	lsls	r4, r4, #24
 8009454:	e7a3      	b.n	800939e <ceil+0x42>
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	fffffc01 	.word	0xfffffc01
 800945c:	8800759c 	.word	0x8800759c
 8009460:	7e37e43c 	.word	0x7e37e43c
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	000fffff 	.word	0x000fffff
 800946c:	fffffbed 	.word	0xfffffbed

08009470 <_init>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr

0800947c <_fini>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	46c0      	nop			; (mov r8, r8)
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr
