
GestureKit_ULD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012728  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017228  080128c8  080128c8  000228c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029af0  08029af0  00040528  2**0
                  CONTENTS
  4 .ARM          00000008  08029af0  08029af0  00039af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029af8  08029af8  00040528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029af8  08029af8  00039af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029afc  08029afc  00039afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000528  20000000  08029b00  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000615c  20000528  0802a028  00040528  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006684  0802a028  00046684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040528  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00040558  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010574  00000000  00000000  000405eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002947  00000000  00000000  00050b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  000534a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a49  00000000  00000000  000541d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186a1  00000000  00000000  00054c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118ed  00000000  00000000  0006d2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008da6c  00000000  00000000  0007eba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005484  00000000  00000000  0010c614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00111a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000528 	.word	0x20000528
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080128b0 	.word	0x080128b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000052c 	.word	0x2000052c
 80001dc:	080128b0 	.word	0x080128b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern volatile int IntrCount;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==INT_C_Pin)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b10      	cmp	r3, #16
 800102e:	d104      	bne.n	800103a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		IntrCount++;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_GPIO_EXTI_Callback+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_GPIO_EXTI_Callback+0x28>)
 8001038:	6013      	str	r3, [r2, #0]
	}
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20003f14 	.word	0x20003f14

0800104c <__io_putchar>:

//https://electronics.stackexchange.com/questions/206113/how-do-i-use-the-printf-function-on-stm32
__attribute__((weak)) int __io_putchar(int ch)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001054:	1d39      	adds	r1, r7, #4
 8001056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105a:	2201      	movs	r2, #1
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <__io_putchar+0x30>)
 800105e:	f002 fe58 	bl	8003d12 <HAL_UART_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK ? ch : 0);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <__io_putchar+0x24>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	e000      	b.n	8001072 <__io_putchar+0x26>
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000598 	.word	0x20000598

08001080 <__io_getchar>:

__attribute__((weak)) int __io_getchar(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	int ch = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800108a:	4639      	mov	r1, r7
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	2201      	movs	r2, #1
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <__io_getchar+0x30>)
 8001094:	f002 fecf 	bl	8003e36 <HAL_UART_Receive>
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
    return (status == HAL_OK ? ch : 0);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <__io_getchar+0x26>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	e000      	b.n	80010a8 <__io_getchar+0x28>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000598 	.word	0x20000598

080010b4 <HAL_UART_RxCpltCallback>:
int UartComm_RXSize = 0;
volatile size_t Uart_RxRcvIndex = 0;
volatile uint32_t Uart_nOverrun = 0;
volatile int UartComm_CmdReady = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if (Uart_RXBuffer[Uart_RxRcvIndex] == '\r'
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b0d      	cmp	r3, #13
 80010c8:	d00d      	beq.n	80010e6 <HAL_UART_RxCpltCallback+0x32>
				|| Uart_RXBuffer[Uart_RxRcvIndex] == '\n'
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b0a      	cmp	r3, #10
 80010d6:	d006      	beq.n	80010e6 <HAL_UART_RxCpltCallback+0x32>
				|| Uart_RXBuffer[Uart_RxRcvIndex] == '\x03') //Ctrl-C)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d11f      	bne.n	8001126 <HAL_UART_RxCpltCallback+0x72>
	{

		if (Uart_RXBuffer[Uart_RxRcvIndex] != '\x03') // \x0x3 is Ctrl-c
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d004      	beq.n	80010fe <HAL_UART_RxCpltCallback+0x4a>
    		Uart_RXBuffer[Uart_RxRcvIndex] = 0;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	54d1      	strb	r1, [r2, r3]

		memcpy(UartComm_RXBuffer ,
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	461a      	mov	r2, r3
 8001106:	4919      	ldr	r1, [pc, #100]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <HAL_UART_RxCpltCallback+0xbc>)
 800110a:	f00b fb62 	bl	800c7d2 <memcpy>
				(char*)Uart_RXBuffer,
				Uart_RxRcvIndex+1 ); //copy ending 0
        UartComm_RXSize = Uart_RxRcvIndex;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_UART_RxCpltCallback+0xc0>)
 8001116:	601a      	str	r2, [r3, #0]
		UartComm_CmdReady = 1;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_RxCpltCallback+0xc4>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]

		Uart_RxRcvIndex = 0;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e012      	b.n	800114c <HAL_UART_RxCpltCallback+0x98>
	}
	else
	{
		if (Uart_RxRcvIndex < UART_BUFFER_SIZE)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800112e:	d205      	bcs.n	800113c <HAL_UART_RxCpltCallback+0x88>
		{
			Uart_RxRcvIndex++;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e007      	b.n	800114c <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			Uart_RxRcvIndex = 0;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
			Uart_nOverrun++;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_RxCpltCallback+0xc8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_UART_RxCpltCallback+0xc8>)
 800114a:	6013      	str	r3, [r2, #0]
		}
	}

	HAL_UART_Receive_IT(huart,
					(uint8_t *) &Uart_RXBuffer[Uart_RxRcvIndex],
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_UART_RxCpltCallback+0xb4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_UART_RxCpltCallback+0xb8>)
 8001152:	4413      	add	r3, r2
	HAL_UART_Receive_IT(huart,
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f002 ff0e 	bl	8003f7a <HAL_UART_Receive_IT>
					1);
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200015e0 	.word	0x200015e0
 800116c:	200005dc 	.word	0x200005dc
 8001170:	20000ddc 	.word	0x20000ddc
 8001174:	200015dc 	.word	0x200015dc
 8001178:	200015e8 	.word	0x200015e8
 800117c:	200015e4 	.word	0x200015e4

08001180 <UartComm_Start>:

void UartComm_Start() {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	HAL_UART_StateTypeDef State;
	UartComm_CmdReady = 0;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <UartComm_Start+0x3c>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    Uart_RxRcvIndex = 0;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <UartComm_Start+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

    State = HAL_UART_GetState(&huart2);
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <UartComm_Start+0x44>)
 8001194:	f003 f9c6 	bl	8004524 <HAL_UART_GetState>
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	if (State != HAL_UART_STATE_BUSY_TX_RX && State != HAL_UART_STATE_BUSY_RX) {
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b23      	cmp	r3, #35	; 0x23
 80011a0:	d007      	beq.n	80011b2 <UartComm_Start+0x32>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b22      	cmp	r3, #34	; 0x22
 80011a6:	d004      	beq.n	80011b2 <UartComm_Start+0x32>
        // arm it
        HAL_UART_Receive_IT(&huart2, (uint8_t *) Uart_RXBuffer, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4907      	ldr	r1, [pc, #28]	; (80011c8 <UartComm_Start+0x48>)
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <UartComm_Start+0x44>)
 80011ae:	f002 fee4 	bl	8003f7a <HAL_UART_Receive_IT>
    }

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200015e8 	.word	0x200015e8
 80011c0:	200015e0 	.word	0x200015e0
 80011c4:	20000598 	.word	0x20000598
 80011c8:	200005dc 	.word	0x200005dc

080011cc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef * huart) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    // clear error and  kick of next
    huart->ErrorCode = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, (uint8_t *) &Uart_RXBuffer[Uart_RxRcvIndex], Uart_RxRcvIndex);
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_UART_ErrorCallback+0x2c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_UART_ErrorCallback+0x30>)
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_UART_ErrorCallback+0x2c>)
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	b292      	uxth	r2, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f002 fec5 	bl	8003f7a <HAL_UART_Receive_IT>

}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200015e0 	.word	0x200015e0
 80011fc:	200005dc 	.word	0x200005dc

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 fb8a 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f80e 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f8d0 	bl	80013b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001210:	f000 f876 	bl	8001300 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001214:	f000 f8a2 	bl	800135c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UartComm_Start();
 8001218:	f7ff ffb2 	bl	8001180 <UartComm_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LMZ_gesture_app_main(1, NULL);
 800121c:	2100      	movs	r1, #0
 800121e:	2001      	movs	r0, #1
 8001220:	f004 fb0c 	bl	800583c <LMZ_gesture_app_main>
 8001224:	e7fa      	b.n	800121c <main+0x1c>
	...

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fa1e 	bl	800c678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <SystemClock_Config+0xd0>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <SystemClock_Config+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <SystemClock_Config+0xd4>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800129c:	2310      	movs	r3, #16
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 f848 	bl	8003348 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012be:	f000 f929 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 faaa 	bl	8003838 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ea:	f000 f913 	bl	8001514 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_I2C1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C1_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_I2C1_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_I2C1_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_I2C1_Init+0x50>)
 800133e:	f000 fedd 	bl	80020fc <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f8e4 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000544 	.word	0x20000544
 8001354:	40005400 	.word	0x40005400
 8001358:	00061a80 	.word	0x00061a80

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_USART2_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001368:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001394:	f002 fc70 	bl	8003c78 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f8b9 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000598 	.word	0x20000598
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b4e      	ldr	r3, [pc, #312]	; (8001504 <MX_GPIO_Init+0x154>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <MX_GPIO_Init+0x154>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <MX_GPIO_Init+0x154>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <MX_GPIO_Init+0x154>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a46      	ldr	r2, [pc, #280]	; (8001504 <MX_GPIO_Init+0x154>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <MX_GPIO_Init+0x154>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <MX_GPIO_Init+0x154>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <MX_GPIO_Init+0x154>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <MX_GPIO_Init+0x154>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <MX_GPIO_Init+0x154>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a38      	ldr	r2, [pc, #224]	; (8001504 <MX_GPIO_Init+0x154>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <MX_GPIO_Init+0x154>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLEX_SPI_I2C_N_GPIO_Port, FLEX_SPI_I2C_N_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143c:	4832      	ldr	r0, [pc, #200]	; (8001508 <MX_GPIO_Init+0x158>)
 800143e:	f000 fe2b 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	4831      	ldr	r0, [pc, #196]	; (800150c <MX_GPIO_Init+0x15c>)
 8001448:	f000 fe26 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2111      	movs	r1, #17
 8001450:	482f      	ldr	r0, [pc, #188]	; (8001510 <MX_GPIO_Init+0x160>)
 8001452:	f000 fe21 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_C_GPIO_Port, I2C_RST_C_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2108      	movs	r1, #8
 800145a:	482d      	ldr	r0, [pc, #180]	; (8001510 <MX_GPIO_Init+0x160>)
 800145c:	f000 fe1c 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLEX_SPI_I2C_N_Pin */
  GPIO_InitStruct.Pin = FLEX_SPI_I2C_N_Pin;
 8001460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLEX_SPI_I2C_N_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <MX_GPIO_Init+0x158>)
 800147a:	f000 fc89 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_C_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin;
 800147e:	2310      	movs	r3, #16
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001482:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <MX_GPIO_Init+0x15c>)
 8001494:	f000 fc7c 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001498:	2320      	movs	r3, #32
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <MX_GPIO_Init+0x15c>)
 80014b0:	f000 fc6e 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_C_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|LPn_C_Pin;
 80014b4:	2311      	movs	r3, #17
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_GPIO_Init+0x160>)
 80014cc:	f000 fc60 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_C_Pin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 80014d0:	2308      	movs	r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	480a      	ldr	r0, [pc, #40]	; (8001510 <MX_GPIO_Init+0x160>)
 80014e8:	f000 fc52 	bl	8001d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	200a      	movs	r0, #10
 80014f2:	f000 fb84 	bl	8001bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014f6:	200a      	movs	r0, #10
 80014f8:	f000 fb9d 	bl	8001c36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40020800 	.word	0x40020800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020400 	.word	0x40020400

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_MspInit+0x4c>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x4c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155e:	2007      	movs	r0, #7
 8001560:	f000 fb42 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12c      	bne.n	80015ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0x8c>)
 80015cc:	f000 fbe0 	bl	8001d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_UART_MspInit+0x94>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d133      	bne.n	800168a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_UART_MspInit+0x98>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166a:	2307      	movs	r3, #7
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <HAL_UART_MspInit+0x9c>)
 8001676:	f000 fb8b 	bl	8001d90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2026      	movs	r0, #38	; 0x26
 8001680:	f000 fabd 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001684:	2026      	movs	r0, #38	; 0x26
 8001686:	f000 fad6 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40004400 	.word	0x40004400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f000 f968 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 80016f8:	2010      	movs	r0, #16
 80016fa:	f000 fce7 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USART2_IRQHandler+0x10>)
 800170a:	f002 fc67 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000598 	.word	0x20000598

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_kill>:

int _kill(int pid, int sig)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001732:	f00b f821 	bl	800c778 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	2216      	movs	r2, #22
 800173a:	601a      	str	r2, [r3, #0]
	return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_exit>:

void _exit (int status)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe7 	bl	8001728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800175a:	e7fe      	b.n	800175a <_exit+0x12>

0800175c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800176e:	f7ff fc87 	bl	8001080 <__io_getchar>
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
	}

return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fc4b 	bl	800104c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
	}
	return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f00a ff86 	bl	800c778 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20018000 	.word	0x20018000
 8001898:	00000400 	.word	0x00000400
 800189c:	200015ec 	.word	0x200015ec
 80018a0:	20006688 	.word	0x20006688

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ce:	490e      	ldr	r1, [pc, #56]	; (8001908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018e4:	4c0b      	ldr	r4, [pc, #44]	; (8001914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f2:	f7ff ffd7 	bl	80018a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f00a ff45 	bl	800c784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff fc81 	bl	8001200 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001900:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000528 	.word	0x20000528
  ldr r2, =_sidata
 800190c:	08029b00 	.word	0x08029b00
  ldr r2, =_sbss
 8001910:	20000528 	.word	0x20000528
  ldr r4, =_ebss
 8001914:	20006684 	.word	0x20006684

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_Init+0x40>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_Init+0x40>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_Init+0x40>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f94f 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f808 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001950:	f7ff fde6 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f967 	bl	8001c52 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800199c:	f000 f92f 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x5c>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200015f0 	.word	0x200015f0

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200015f0 	.word	0x200015f0

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff3e 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff31 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa2 	bl	8001ba4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff feb6 	bl	80019e8 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d008      	beq.n	8001c9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e052      	b.n	8001d42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0216 	bic.w	r2, r2, #22
 8001caa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <HAL_DMA_Abort+0x62>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0208 	bic.w	r2, r2, #8
 8001cda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cec:	e013      	b.n	8001d16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cee:	f7ff fe7b 	bl	80019e8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d90c      	bls.n	8001d16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e015      	b.n	8001d42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e4      	bne.n	8001cee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	223f      	movs	r2, #63	; 0x3f
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d004      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e00c      	b.n	8001d82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e159      	b.n	8002060 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dac:	2201      	movs	r2, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8148 	bne.w	800205a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d005      	beq.n	8001de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d130      	bne.n	8001e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 0201 	and.w	r2, r3, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d017      	beq.n	8001e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d123      	bne.n	8001ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0203 	and.w	r2, r3, #3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a2 	beq.w	800205a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a56      	ldr	r2, [pc, #344]	; (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f32:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_GPIO_Init+0x2ec>)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a49      	ldr	r2, [pc, #292]	; (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d019      	beq.n	8001f92 <HAL_GPIO_Init+0x202>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a48      	ldr	r2, [pc, #288]	; (8002084 <HAL_GPIO_Init+0x2f4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x1fe>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a47      	ldr	r2, [pc, #284]	; (8002088 <HAL_GPIO_Init+0x2f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a46      	ldr	r2, [pc, #280]	; (800208c <HAL_GPIO_Init+0x2fc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x1f6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a45      	ldr	r2, [pc, #276]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x1f2>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e008      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f82:	2307      	movs	r3, #7
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f92:	2300      	movs	r3, #0
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f002 0203 	and.w	r2, r2, #3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa4:	4935      	ldr	r1, [pc, #212]	; (800207c <HAL_GPIO_Init+0x2ec>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_GPIO_Init+0x304>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <HAL_GPIO_Init+0x304>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_GPIO_Init+0x304>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_GPIO_Init+0x304>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_GPIO_Init+0x304>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_GPIO_Init+0x304>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_GPIO_Init+0x304>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_GPIO_Init+0x304>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3301      	adds	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	f67f aea2 	bls.w	8001dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40013800 	.word	0x40013800
 8002080:	40020000 	.word	0x40020000
 8002084:	40020400 	.word	0x40020400
 8002088:	40020800 	.word	0x40020800
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40021000 	.word	0x40021000
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe ff98 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013c00 	.word	0x40013c00

080020fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e12b      	b.n	8002366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fa24 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800214e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002160:	f001 fd62 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8002164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4a81      	ldr	r2, [pc, #516]	; (8002370 <HAL_I2C_Init+0x274>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d807      	bhi.n	8002180 <HAL_I2C_Init+0x84>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a80      	ldr	r2, [pc, #512]	; (8002374 <HAL_I2C_Init+0x278>)
 8002174:	4293      	cmp	r3, r2
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e006      	b.n	800218e <HAL_I2C_Init+0x92>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a7d      	ldr	r2, [pc, #500]	; (8002378 <HAL_I2C_Init+0x27c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0e7      	b.n	8002366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a78      	ldr	r2, [pc, #480]	; (800237c <HAL_I2C_Init+0x280>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_I2C_Init+0x274>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d802      	bhi.n	80021d0 <HAL_I2C_Init+0xd4>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	e009      	b.n	80021e4 <HAL_I2C_Init+0xe8>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a69      	ldr	r2, [pc, #420]	; (8002380 <HAL_I2C_Init+0x284>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	3301      	adds	r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	495c      	ldr	r1, [pc, #368]	; (8002370 <HAL_I2C_Init+0x274>)
 8002200:	428b      	cmp	r3, r1
 8002202:	d819      	bhi.n	8002238 <HAL_I2C_Init+0x13c>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e59      	subs	r1, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002218:	400b      	ands	r3, r1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_I2C_Init+0x138>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e59      	subs	r1, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fbb1 f3f3 	udiv	r3, r1, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002232:	e051      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 8002234:	2304      	movs	r3, #4
 8002236:	e04f      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d111      	bne.n	8002264 <HAL_I2C_Init+0x168>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e012      	b.n	800228a <HAL_I2C_Init+0x18e>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Init+0x196>
 800228e:	2301      	movs	r3, #1
 8002290:	e022      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10e      	bne.n	80022b8 <HAL_I2C_Init+0x1bc>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e58      	subs	r0, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	440b      	add	r3, r1
 80022a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ac:	3301      	adds	r3, #1
 80022ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b6:	e00f      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e58      	subs	r0, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	0099      	lsls	r1, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	6809      	ldr	r1, [r1, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6911      	ldr	r1, [r2, #16]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	430b      	orrs	r3, r1
 800231a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	000186a0 	.word	0x000186a0
 8002374:	001e847f 	.word	0x001e847f
 8002378:	003d08ff 	.word	0x003d08ff
 800237c:	431bde83 	.word	0x431bde83
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fb26 	bl	80019e8 <HAL_GetTick>
 800239c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	f040 80e0 	bne.w	800256c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	4970      	ldr	r1, [pc, #448]	; (8002578 <HAL_I2C_Master_Transmit+0x1f4>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fde8 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0d3      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_I2C_Master_Transmit+0x50>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e0cc      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d007      	beq.n	80023fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2210      	movs	r2, #16
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_I2C_Master_Transmit+0x1f8>)
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	6a3a      	ldr	r2, [r7, #32]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fbbc 	bl	8002bc0 <I2C_MasterRequestWrite>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e08d      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002468:	e066      	b.n	8002538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fe62 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b04      	cmp	r3, #4
 8002480:	d107      	bne.n	8002492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d11b      	bne.n	800250c <HAL_I2C_Master_Transmit+0x188>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	6a39      	ldr	r1, [r7, #32]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fe52 	bl	80031ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2b04      	cmp	r3, #4
 8002522:	d107      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e01a      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d194      	bne.n	800246a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	00100002 	.word	0x00100002
 800257c:	ffff0000 	.word	0xffff0000

08002580 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	461a      	mov	r2, r3
 800258c:	460b      	mov	r3, r1
 800258e:	817b      	strh	r3, [r7, #10]
 8002590:	4613      	mov	r3, r2
 8002592:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff fa28 	bl	80019e8 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	f040 820b 	bne.w	80029be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2319      	movs	r3, #25
 80025ae:	2201      	movs	r2, #1
 80025b0:	497c      	ldr	r1, [pc, #496]	; (80027a4 <HAL_I2C_Master_Receive+0x224>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fcea 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025be:	2302      	movs	r3, #2
 80025c0:	e1fe      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_I2C_Master_Receive+0x50>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e1f7      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d007      	beq.n	80025f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2222      	movs	r2, #34	; 0x22
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2210      	movs	r2, #16
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	893a      	ldrh	r2, [r7, #8]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a5c      	ldr	r2, [pc, #368]	; (80027a8 <HAL_I2C_Master_Receive+0x228>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002638:	8979      	ldrh	r1, [r7, #10]
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fb40 	bl	8002cc4 <I2C_MasterRequestRead>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1b8      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e18c      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	2b01      	cmp	r3, #1
 8002684:	d11b      	bne.n	80026be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e16c      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11b      	bne.n	80026fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	e14c      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800270c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002724:	e138      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b03      	cmp	r3, #3
 800272c:	f200 80f1 	bhi.w	8002912 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b01      	cmp	r3, #1
 8002736:	d123      	bne.n	8002780 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fd7d 	bl	800323c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e139      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277e:	e10b      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	d14e      	bne.n	8002826 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	2200      	movs	r2, #0
 8002790:	4906      	ldr	r1, [pc, #24]	; (80027ac <HAL_I2C_Master_Receive+0x22c>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fbfa 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e10e      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000
 80027ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002824:	e0b8      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2200      	movs	r2, #0
 800282e:	4966      	ldr	r1, [pc, #408]	; (80029c8 <HAL_I2C_Master_Receive+0x448>)
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fbab 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0bf      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	2200      	movs	r2, #0
 800288a:	494f      	ldr	r1, [pc, #316]	; (80029c8 <HAL_I2C_Master_Receive+0x448>)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fb7d 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e091      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002910:	e042      	b.n	8002998 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fc90 	bl	800323c <I2C_WaitOnRXNEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e04c      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d118      	bne.n	8002998 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f aec2 	bne.w	8002726 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00010004 	.word	0x00010004

080029cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e6:	f7fe ffff 	bl	80019e8 <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	f040 80d9 	bne.w	8002bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2319      	movs	r3, #25
 8002a00:	2201      	movs	r2, #1
 8002a02:	496d      	ldr	r1, [pc, #436]	; (8002bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fac1 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0cc      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2C_Mem_Write+0x56>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0c5      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d007      	beq.n	8002a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	; 0x21
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a4d      	ldr	r2, [pc, #308]	; (8002bbc <HAL_I2C_Mem_Write+0x1f0>)
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8a:	88f8      	ldrh	r0, [r7, #6]
 8002a8c:	893a      	ldrh	r2, [r7, #8]
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4603      	mov	r3, r0
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f9e0 	bl	8002e60 <I2C_RequestMemoryWrite>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d052      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e081      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fb42 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_I2C_Mem_Write+0x180>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1aa      	bne.n	8002aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fb2e 	bl	80031ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e016      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	00100002 	.word	0x00100002
 8002bbc:	ffff0000 	.word	0xffff0000

08002bc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d006      	beq.n	8002bea <I2C_MasterRequestWrite+0x2a>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d003      	beq.n	8002bea <I2C_MasterRequestWrite+0x2a>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002be8:	d108      	bne.n	8002bfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e00b      	b.n	8002c14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b12      	cmp	r3, #18
 8002c02:	d107      	bne.n	8002c14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f9b3 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3a:	d103      	bne.n	8002c44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e035      	b.n	8002cb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c50:	d108      	bne.n	8002c64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	e01b      	b.n	8002c9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	11db      	asrs	r3, r3, #7
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 0306 	and.w	r3, r3, #6
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f063 030f 	orn	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <I2C_MasterRequestWrite+0xfc>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f9d9 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e010      	b.n	8002cb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4907      	ldr	r1, [pc, #28]	; (8002cc0 <I2C_MasterRequestWrite+0x100>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f9c9 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	00010008 	.word	0x00010008
 8002cc0:	00010002 	.word	0x00010002

08002cc4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d006      	beq.n	8002cfe <I2C_MasterRequestRead+0x3a>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d003      	beq.n	8002cfe <I2C_MasterRequestRead+0x3a>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfc:	d108      	bne.n	8002d10 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e00b      	b.n	8002d28 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b11      	cmp	r3, #17
 8002d16:	d107      	bne.n	8002d28 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f929 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4e:	d103      	bne.n	8002d58 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e079      	b.n	8002e50 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d64:	d108      	bne.n	8002d78 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]
 8002d76:	e05f      	b.n	8002e38 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d78:	897b      	ldrh	r3, [r7, #10]
 8002d7a:	11db      	asrs	r3, r3, #7
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0306 	and.w	r3, r3, #6
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f063 030f 	orn	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4930      	ldr	r1, [pc, #192]	; (8002e58 <I2C_MasterRequestRead+0x194>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f94f 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e054      	b.n	8002e50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4929      	ldr	r1, [pc, #164]	; (8002e5c <I2C_MasterRequestRead+0x198>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f93f 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e044      	b.n	8002e50 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f8c7 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e12:	d103      	bne.n	8002e1c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e017      	b.n	8002e50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e20:	897b      	ldrh	r3, [r7, #10]
 8002e22:	11db      	asrs	r3, r3, #7
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 0306 	and.w	r3, r3, #6
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f063 030e 	orn	r3, r3, #14
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4907      	ldr	r1, [pc, #28]	; (8002e5c <I2C_MasterRequestRead+0x198>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f8fb 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010008 	.word	0x00010008
 8002e5c:	00010002 	.word	0x00010002

08002e60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f878 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d103      	bne.n	8002eba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e05f      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ecc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	492d      	ldr	r1, [pc, #180]	; (8002f88 <I2C_RequestMemoryWrite+0x128>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f8b0 	bl	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e04c      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efc:	6a39      	ldr	r1, [r7, #32]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f91a 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d107      	bne.n	8002f22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e02b      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2c:	893b      	ldrh	r3, [r7, #8]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]
 8002f36:	e021      	b.n	8002f7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f38:	893b      	ldrh	r3, [r7, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	6a39      	ldr	r1, [r7, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8f4 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d107      	bne.n	8002f6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e005      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f72:	893b      	ldrh	r3, [r7, #8]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	00010002 	.word	0x00010002

08002f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	e025      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fd1f 	bl	80019e8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e023      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	e00c      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d0b6      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003048:	e051      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003058:	d123      	bne.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e046      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a8:	d021      	beq.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fc9d 	bl	80019e8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e020      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10c      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e00b      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d18d      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8ce 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02d      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315c:	d021      	beq.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fc43 	bl	80019e8 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d1ca      	bne.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c6:	e02d      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f88d 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02d      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031de:	d021      	beq.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe fc02 	bl	80019e8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d1ca      	bne.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003248:	e042      	b.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b10      	cmp	r3, #16
 8003256:	d119      	bne.n	800328c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0210 	mvn.w	r2, #16
 8003260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e029      	b.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7fe fbac 	bl	80019e8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d1b5      	bne.n	800324a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d11b      	bne.n	8003338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e267      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003366:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4b85      	ldr	r3, [pc, #532]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b7e      	ldr	r3, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e242      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6f      	ldr	r2, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6c      	ldr	r2, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b69      	ldr	r3, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe faf2 	bl	80019e8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe faee 	bl	80019e8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e207      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fade 	bl	80019e8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fada 	bl	80019e8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1f3      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345e:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b44      	ldr	r3, [pc, #272]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c7      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4937      	ldr	r1, [pc, #220]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_RCC_OscConfig+0x244>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fa93 	bl	80019e8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fa8f 	bl	80019e8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a8      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b28      	ldr	r3, [pc, #160]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4925      	ldr	r1, [pc, #148]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_OscConfig+0x244>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fa72 	bl	80019e8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe fa6e 	bl	80019e8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e187      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_RCC_OscConfig+0x248>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe fa52 	bl	80019e8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe fa4e 	bl	80019e8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e167      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x240>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e01b      	b.n	80035a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_OscConfig+0x248>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fe fa3b 	bl	80019e8 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00e      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe fa37 	bl	80019e8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d907      	bls.n	8003594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e150      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 8003588:	40023800 	.word	0x40023800
 800358c:	42470000 	.word	0x42470000
 8003590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ea      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b7d      	ldr	r3, [pc, #500]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a7c      	ldr	r2, [pc, #496]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b7a      	ldr	r3, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b74      	ldr	r3, [pc, #464]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a73      	ldr	r2, [pc, #460]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f9f7 	bl	80019e8 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe f9f3 	bl	80019e8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e10c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0x474>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x2ea>
 8003624:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a63      	ldr	r2, [pc, #396]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e01c      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b05      	cmp	r3, #5
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x30c>
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a5e      	ldr	r2, [pc, #376]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a5b      	ldr	r2, [pc, #364]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003654:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a57      	ldr	r2, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	4b55      	ldr	r3, [pc, #340]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a54      	ldr	r2, [pc, #336]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fe f9b8 	bl	80019e8 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe f9b4 	bl	80019e8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0cb      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <HAL_RCC_OscConfig+0x334>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe f9a2 	bl	80019e8 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f99e 	bl	80019e8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0b5      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ee      	bne.n	80036a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	4a38      	ldr	r2, [pc, #224]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a1 	beq.w	8003828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d05c      	beq.n	80037ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d141      	bne.n	800377e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe f972 	bl	80019e8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe f96e 	bl	80019e8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e087      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	491b      	ldr	r1, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe f947 	bl	80019e8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe f943 	bl	80019e8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e05c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x416>
 800377c:	e054      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe f930 	bl	80019e8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe f92c 	bl	80019e8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e045      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x444>
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e038      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d028      	beq.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d121      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cc      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90c      	bls.n	8003874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d044      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e067      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4934      	ldr	r1, [pc, #208]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fe f85e 	bl	80019e8 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fe f85a 	bl	80019e8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20c      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490a      	ldr	r1, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd ffbe 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08013538 	.word	0x08013538
 80039fc:	20000000 	.word	0x20000000
 8003a00:	20000004 	.word	0x20000004

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b094      	sub	sp, #80	; 0x50
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a10:	2300      	movs	r3, #0
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	2300      	movs	r3, #0
 8003a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	f200 80e1 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a36:	e0db      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a3c:	e0db      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b73      	ldr	r3, [pc, #460]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a42:	e0d8      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	2200      	movs	r2, #0
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	2300      	movs	r3, #0
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
 8003a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	f04f 0000 	mov.w	r0, #0
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a88:	0150      	lsls	r0, r2, #5
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4621      	mov	r1, r4
 8003a90:	1a51      	subs	r1, r2, r1
 8003a92:	6139      	str	r1, [r7, #16]
 8003a94:	4629      	mov	r1, r5
 8003a96:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	018b      	lsls	r3, r1, #6
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	018a      	lsls	r2, r1, #6
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8003abc:	4659      	mov	r1, fp
 8003abe:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad6:	4690      	mov	r8, r2
 8003ad8:	4699      	mov	r9, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	eb18 0303 	adds.w	r3, r8, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	eb49 0303 	adc.w	r3, r9, r3
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003af6:	4629      	mov	r1, r5
 8003af8:	024b      	lsls	r3, r1, #9
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b00:	4621      	mov	r1, r4
 8003b02:	024a      	lsls	r2, r1, #9
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b14:	f7fd f8d0 	bl	8000cb8 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	e058      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	0159      	lsls	r1, r3, #5
 8003b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4e:	0150      	lsls	r0, r2, #5
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4641      	mov	r1, r8
 8003b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b74:	ebb2 040a 	subs.w	r4, r2, sl
 8003b78:	eb63 050b 	sbc.w	r5, r3, fp
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	00eb      	lsls	r3, r5, #3
 8003b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8a:	00e2      	lsls	r2, r4, #3
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	464b      	mov	r3, r9
 8003b98:	eb45 0303 	adc.w	r3, r5, r3
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003baa:	4629      	mov	r1, r5
 8003bac:	028b      	lsls	r3, r1, #10
 8003bae:	4621      	mov	r1, r4
 8003bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	028a      	lsls	r2, r1, #10
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	61fa      	str	r2, [r7, #28]
 8003bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc8:	f7fd f876 	bl	8000cb8 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bee:	e002      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3750      	adds	r7, #80	; 0x50
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	08013548 	.word	0x08013548

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffdc 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0b5b      	lsrs	r3, r3, #13
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08013548 	.word	0x08013548

08003c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e03f      	b.n	8003d0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fcae 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fe95 	bl	80049ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b08a      	sub	sp, #40	; 0x28
 8003d16:	af02      	add	r7, sp, #8
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d17c      	bne.n	8003e2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_UART_Transmit+0x2c>
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e075      	b.n	8003e2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Transmit+0x3e>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e06e      	b.n	8003e2e <HAL_UART_Transmit+0x11c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2221      	movs	r2, #33	; 0x21
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d66:	f7fd fe3f 	bl	80019e8 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d108      	bne.n	8003d94 <HAL_UART_Transmit+0x82>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	e003      	b.n	8003d9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003da4:	e02a      	b.n	8003dfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fbd5 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e036      	b.n	8003e2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3302      	adds	r3, #2
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e007      	b.n	8003dee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3301      	adds	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1cf      	bne.n	8003da6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fba5 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b08a      	sub	sp, #40	; 0x28
 8003e3a:	af02      	add	r7, sp, #8
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f040 808c 	bne.w	8003f70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Receive+0x2e>
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e084      	b.n	8003f72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Receive+0x40>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e07d      	b.n	8003f72 <HAL_UART_Receive+0x13c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2222      	movs	r2, #34	; 0x22
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e92:	f7fd fda9 	bl	80019e8 <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	d108      	bne.n	8003ec0 <HAL_UART_Receive+0x8a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e003      	b.n	8003ec8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ed0:	e043      	b.n	8003f5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2120      	movs	r1, #32
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fb3f 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e042      	b.n	8003f72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10c      	bne.n	8003f0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	3302      	adds	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e01f      	b.n	8003f4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d007      	beq.n	8003f26 <HAL_UART_Receive+0xf0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_UART_Receive+0xfe>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e008      	b.n	8003f46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1b6      	bne.n	8003ed2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d11d      	bne.n	8003fd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_Receive_IT+0x26>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e016      	b.n	8003fd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Receive_IT+0x38>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e00f      	b.n	8003fd2 <HAL_UART_Receive_IT+0x58>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fb38 	bl	800463c <UART_Start_Receive_IT>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b0ba      	sub	sp, #232	; 0xe8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800401a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fc1b 	bl	8004876 <UART_Receive_IT>
      return;
 8004040:	e256      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80de 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
 800404c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80d1 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
 8004096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
 80040ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d011      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 81ed 	beq.w	80044e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fba6 	bl	8004876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_UART_IRQHandler+0x17a>
 800414e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04f      	beq.n	80041f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 faae 	bl	80046b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d141      	bne.n	80041ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004196:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800419a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d9      	bne.n	800416a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d013      	beq.n	80041e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	4a7d      	ldr	r2, [pc, #500]	; (80043b8 <HAL_UART_IRQHandler+0x3dc>)
 80041c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd fdbd 	bl	8001d4a <HAL_DMA_Abort_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041e0:	4610      	mov	r0, r2
 80041e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00e      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc fff0 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e00a      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc ffec 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e006      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc ffe8 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004202:	e170      	b.n	80044e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	bf00      	nop
    return;
 8004206:	e16e      	b.n	80044e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	f040 814a 	bne.w	80044a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8143 	beq.w	80044a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 813c 	beq.w	80044a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	f040 80b4 	bne.w	80043bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8140 	beq.w	80044ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004272:	429a      	cmp	r2, r3
 8004274:	f080 8139 	bcs.w	80044ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800427e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	f000 8088 	beq.w	800439e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1d9      	bne.n	800428e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004302:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004306:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e1      	bne.n	80042da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800433a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004340:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800436c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004380:	65ba      	str	r2, [r7, #88]	; 0x58
 8004382:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fc66 	bl	8001c6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8ac 	bl	800450c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b4:	e099      	b.n	80044ea <HAL_UART_IRQHandler+0x50e>
 80043b6:	bf00      	nop
 80043b8:	0800477f 	.word	0x0800477f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 808b 	beq.w	80044ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8086 	beq.w	80044ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004406:	647a      	str	r2, [r7, #68]	; 0x44
 8004408:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800440c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e3      	bne.n	80043e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	623b      	str	r3, [r7, #32]
   return(result);
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3314      	adds	r3, #20
 800443a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800443e:	633a      	str	r2, [r7, #48]	; 0x30
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e3      	bne.n	800441a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0310 	bic.w	r3, r3, #16
 8004476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004484:	61fa      	str	r2, [r7, #28]
 8004486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	69b9      	ldr	r1, [r7, #24]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	617b      	str	r3, [r7, #20]
   return(result);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e3      	bne.n	8004460 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f834 	bl	800450c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a4:	e023      	b.n	80044ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_UART_IRQHandler+0x4ea>
 80044b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f971 	bl	80047a6 <UART_Transmit_IT>
    return;
 80044c4:	e014      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00e      	beq.n	80044f0 <HAL_UART_IRQHandler+0x514>
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9b1 	bl	8004846 <UART_EndTransmit_IT>
    return;
 80044e4:	e004      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
    return;
 80044e6:	bf00      	nop
 80044e8:	e002      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
      return;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
      return;
 80044ee:	bf00      	nop
  }
}
 80044f0:	37e8      	adds	r7, #232	; 0xe8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004544:	b2db      	uxtb	r3, r3
 8004546:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4313      	orrs	r3, r2
 8004552:	b2db      	uxtb	r3, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b090      	sub	sp, #64	; 0x40
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	e050      	b.n	8004614 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004578:	d04c      	beq.n	8004614 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x30>
 8004580:	f7fd fa32 	bl	80019e8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458c:	429a      	cmp	r2, r3
 800458e:	d241      	bcs.n	8004614 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045b0:	637a      	str	r2, [r7, #52]	; 0x34
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	613b      	str	r3, [r7, #16]
   return(result);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e4:	623a      	str	r2, [r7, #32]
 80045e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	69f9      	ldr	r1, [r7, #28]
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e00f      	b.n	8004634 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	429a      	cmp	r2, r3
 8004630:	d09f      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3740      	adds	r7, #64	; 0x40
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2222      	movs	r2, #34	; 0x22
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004688:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0220 	orr.w	r2, r2, #32
 80046a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b095      	sub	sp, #84	; 0x54
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046e0:	643a      	str	r2, [r7, #64]	; 0x40
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	61fb      	str	r3, [r7, #28]
   return(result);
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b01      	cmp	r3, #1
 800472e:	d119      	bne.n	8004764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	647b      	str	r3, [r7, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004750:	61ba      	str	r2, [r7, #24]
 8004752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6979      	ldr	r1, [r7, #20]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	613b      	str	r3, [r7, #16]
   return(result);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e5      	bne.n	8004730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004772:	bf00      	nop
 8004774:	3754      	adds	r7, #84	; 0x54
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7fc fd17 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b21      	cmp	r3, #33	; 0x21
 80047b8:	d13e      	bne.n	8004838 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c2:	d114      	bne.n	80047ee <UART_Transmit_IT+0x48>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d110      	bne.n	80047ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	1c9a      	adds	r2, r3, #2
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]
 80047ec:	e008      	b.n	8004800 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6211      	str	r1, [r2, #32]
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4619      	mov	r1, r3
 800480e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004822:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004832:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fe46 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b08c      	sub	sp, #48	; 0x30
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b22      	cmp	r3, #34	; 0x22
 8004888:	f040 80ab 	bne.w	80049e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004894:	d117      	bne.n	80048c6 <UART_Receive_IT+0x50>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d113      	bne.n	80048c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	1c9a      	adds	r2, r3, #2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
 80048c4:	e026      	b.n	8004914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d8:	d007      	beq.n	80048ea <UART_Receive_IT+0x74>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <UART_Receive_IT+0x82>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e008      	b.n	800490a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004904:	b2da      	uxtb	r2, r3
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004924:	2b00      	cmp	r3, #0
 8004926:	d15a      	bne.n	80049de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0220 	bic.w	r2, r2, #32
 8004936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d135      	bne.n	80049d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	613b      	str	r3, [r7, #16]
   return(result);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f023 0310 	bic.w	r3, r3, #16
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	623a      	str	r2, [r7, #32]
 8004990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	6a3a      	ldr	r2, [r7, #32]
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	61bb      	str	r3, [r7, #24]
   return(result);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d10a      	bne.n	80049c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fd9d 	bl	800450c <HAL_UARTEx_RxEventCallback>
 80049d2:	e002      	b.n	80049da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fc fb6d 	bl	80010b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e002      	b.n	80049e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3730      	adds	r7, #48	; 0x30
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f0:	b0c0      	sub	sp, #256	; 0x100
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	68d9      	ldr	r1, [r3, #12]
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	ea40 0301 	orr.w	r3, r0, r1
 8004a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a44:	f021 010c 	bic.w	r1, r1, #12
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a52:	430b      	orrs	r3, r1
 8004a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	6999      	ldr	r1, [r3, #24]
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	ea40 0301 	orr.w	r3, r0, r1
 8004a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b8f      	ldr	r3, [pc, #572]	; (8004cb8 <UART_SetConfig+0x2cc>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d005      	beq.n	8004a8c <UART_SetConfig+0xa0>
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8d      	ldr	r3, [pc, #564]	; (8004cbc <UART_SetConfig+0x2d0>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d104      	bne.n	8004a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a8c:	f7ff f8e0 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 8004a90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a94:	e003      	b.n	8004a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a96:	f7ff f8c7 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa8:	f040 810c 	bne.w	8004cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004abe:	4622      	mov	r2, r4
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	1891      	adds	r1, r2, r2
 8004ac4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ac6:	415b      	adcs	r3, r3
 8004ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ace:	4621      	mov	r1, r4
 8004ad0:	eb12 0801 	adds.w	r8, r2, r1
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	eb43 0901 	adc.w	r9, r3, r1
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aee:	4690      	mov	r8, r2
 8004af0:	4699      	mov	r9, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	eb18 0303 	adds.w	r3, r8, r3
 8004af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004afc:	462b      	mov	r3, r5
 8004afe:	eb49 0303 	adc.w	r3, r9, r3
 8004b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	18db      	adds	r3, r3, r3
 8004b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b20:	4613      	mov	r3, r2
 8004b22:	eb42 0303 	adc.w	r3, r2, r3
 8004b26:	657b      	str	r3, [r7, #84]	; 0x54
 8004b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b30:	f7fc f8c2 	bl	8000cb8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <UART_SetConfig+0x2d4>)
 8004b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	011c      	lsls	r4, r3, #4
 8004b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	1891      	adds	r1, r2, r2
 8004b5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b5c:	415b      	adcs	r3, r3
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b64:	4641      	mov	r1, r8
 8004b66:	eb12 0a01 	adds.w	sl, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b84:	4692      	mov	sl, r2
 8004b86:	469b      	mov	fp, r3
 8004b88:	4643      	mov	r3, r8
 8004b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b92:	464b      	mov	r3, r9
 8004b94:	eb4b 0303 	adc.w	r3, fp, r3
 8004b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	18db      	adds	r3, r3, r3
 8004bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	eb42 0303 	adc.w	r3, r2, r3
 8004bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bc6:	f7fc f877 	bl	8000cb8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <UART_SetConfig+0x2d4>)
 8004bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1acb      	subs	r3, r1, r3
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <UART_SetConfig+0x2d4>)
 8004be8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf4:	441c      	add	r4, r3
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c10:	415b      	adcs	r3, r3
 8004c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c18:	4641      	mov	r1, r8
 8004c1a:	1851      	adds	r1, r2, r1
 8004c1c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c1e:	4649      	mov	r1, r9
 8004c20:	414b      	adcs	r3, r1
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c30:	4659      	mov	r1, fp
 8004c32:	00cb      	lsls	r3, r1, #3
 8004c34:	4651      	mov	r1, sl
 8004c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	00ca      	lsls	r2, r1, #3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	4642      	mov	r2, r8
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	460a      	mov	r2, r1
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	18db      	adds	r3, r3, r3
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c72:	4613      	mov	r3, r2
 8004c74:	eb42 0303 	adc.w	r3, r2, r3
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c82:	f7fc f819 	bl	8000cb8 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <UART_SetConfig+0x2d4>)
 8004c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	2164      	movs	r1, #100	; 0x64
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	3332      	adds	r3, #50	; 0x32
 8004c9e:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <UART_SetConfig+0x2d4>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	f003 0207 	and.w	r2, r3, #7
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4422      	add	r2, r4
 8004cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cb4:	e106      	b.n	8004ec4 <UART_SetConfig+0x4d8>
 8004cb6:	bf00      	nop
 8004cb8:	40011000 	.word	0x40011000
 8004cbc:	40011400 	.word	0x40011400
 8004cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	464b      	mov	r3, r9
 8004cda:	1891      	adds	r1, r2, r2
 8004cdc:	6239      	str	r1, [r7, #32]
 8004cde:	415b      	adcs	r3, r3
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	1854      	adds	r4, r2, r1
 8004cea:	4649      	mov	r1, r9
 8004cec:	eb43 0501 	adc.w	r5, r3, r1
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	00eb      	lsls	r3, r5, #3
 8004cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cfe:	00e2      	lsls	r2, r4, #3
 8004d00:	4614      	mov	r4, r2
 8004d02:	461d      	mov	r5, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	18e3      	adds	r3, r4, r3
 8004d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	eb45 0303 	adc.w	r3, r5, r3
 8004d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d32:	4629      	mov	r1, r5
 8004d34:	008b      	lsls	r3, r1, #2
 8004d36:	4621      	mov	r1, r4
 8004d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	008a      	lsls	r2, r1, #2
 8004d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d44:	f7fb ffb8 	bl	8000cb8 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4b60      	ldr	r3, [pc, #384]	; (8004ed0 <UART_SetConfig+0x4e4>)
 8004d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	011c      	lsls	r4, r3, #4
 8004d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	1891      	adds	r1, r2, r2
 8004d6e:	61b9      	str	r1, [r7, #24]
 8004d70:	415b      	adcs	r3, r3
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d78:	4641      	mov	r1, r8
 8004d7a:	1851      	adds	r1, r2, r1
 8004d7c:	6139      	str	r1, [r7, #16]
 8004d7e:	4649      	mov	r1, r9
 8004d80:	414b      	adcs	r3, r1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d90:	4659      	mov	r1, fp
 8004d92:	00cb      	lsls	r3, r1, #3
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	00ca      	lsls	r2, r1, #3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	4642      	mov	r2, r8
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dac:	464b      	mov	r3, r9
 8004dae:	460a      	mov	r2, r1
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	008b      	lsls	r3, r1, #2
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dda:	4641      	mov	r1, r8
 8004ddc:	008a      	lsls	r2, r1, #2
 8004dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004de2:	f7fb ff69 	bl	8000cb8 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <UART_SetConfig+0x4e4>)
 8004dee:	fba3 2301 	umull	r2, r3, r3, r1
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2264      	movs	r2, #100	; 0x64
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	1acb      	subs	r3, r1, r3
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	3332      	adds	r3, #50	; 0x32
 8004e00:	4a33      	ldr	r2, [pc, #204]	; (8004ed0 <UART_SetConfig+0x4e4>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e0c:	441c      	add	r4, r3
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	673b      	str	r3, [r7, #112]	; 0x70
 8004e16:	677a      	str	r2, [r7, #116]	; 0x74
 8004e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	415b      	adcs	r3, r3
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5e:	464b      	mov	r3, r9
 8004e60:	460a      	mov	r2, r1
 8004e62:	eb42 0303 	adc.w	r3, r2, r3
 8004e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	663b      	str	r3, [r7, #96]	; 0x60
 8004e72:	667a      	str	r2, [r7, #100]	; 0x64
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e80:	4649      	mov	r1, r9
 8004e82:	008b      	lsls	r3, r1, #2
 8004e84:	4641      	mov	r1, r8
 8004e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	008a      	lsls	r2, r1, #2
 8004e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e92:	f7fb ff11 	bl	8000cb8 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <UART_SetConfig+0x4e4>)
 8004e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	2164      	movs	r1, #100	; 0x64
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	3332      	adds	r3, #50	; 0x32
 8004eae:	4a08      	ldr	r2, [pc, #32]	; (8004ed0 <UART_SetConfig+0x4e4>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 020f 	and.w	r2, r3, #15
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4422      	add	r2, r4
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed0:	51eb851f 	.word	0x51eb851f

08004ed4 <select_target_index>:
};


// Function to get the first target data
int* select_target_index(int *target_indices, int zone_index, VL53LMZ_ResultsData *pRangingData)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	(void)pRangingData;
	target_indices[0] = zone_index * VL53LMZ_NB_TARGET_PER_ZONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	601a      	str	r2, [r3, #0]
	return target_indices;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <SEN_CopyRangingData>:

// Format data from LMZ driver to Gesture algorithm
int SEN_CopyRangingData(SEN_data_t* pDest, VL53LMZ_ResultsData *pRangingData)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08c      	sub	sp, #48	; 0x30
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	float ranging, peak;
	bool valid;
	int idx, result, nb_targets, target_idx[3], target_status;

	if (pDest == NULL || pRangingData == NULL) return -1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <SEN_CopyRangingData+0x16>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <SEN_CopyRangingData+0x1c>
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f0e:	e07d      	b.n	800500c <SEN_CopyRangingData+0x118>

	pDest->timestamp_ms = GET_TIME_STAMP();
 8004f10:	f7fc fd6a 	bl	80019e8 <HAL_GetTick>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	61da      	str	r2, [r3, #28]

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f20:	e06e      	b.n	8005000 <SEN_CopyRangingData+0x10c>
	{
		select_target_index(target_idx, idx, pRangingData);
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff ffd2 	bl	8004ed4 <select_target_index>

		ranging = pRangingData->distance_mm[target_idx[0]]/4.0; // Signed 14.2
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fb fb07 	bl	8000554 <__aeabi_i2d>
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	4b32      	ldr	r3, [pc, #200]	; (8005014 <SEN_CopyRangingData+0x120>)
 8004f4c:	f7fb fc96 	bl	800087c <__aeabi_ddiv>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fb fe5e 	bl	8000c18 <__aeabi_d2f>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28

		peak = pRangingData->signal_per_spad[target_idx[0]]/2048.0; // Unsigned 21.11
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	3390      	adds	r3, #144	; 0x90
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb fae1 	bl	8000534 <__aeabi_ui2d>
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <SEN_CopyRangingData+0x124>)
 8004f78:	f7fb fc80 	bl	800087c <__aeabi_ddiv>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f7fb fe48 	bl	8000c18 <__aeabi_d2f>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
		nb_targets = pRangingData->nb_target_detected[idx];
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	623b      	str	r3, [r7, #32]
		target_status = pRangingData->target_status[target_idx[0]];
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8004fa4:	61fb      	str	r3, [r7, #28]

		valid = (nb_targets > 0)
				&& (target_status == 4 || target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10);
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dd10      	ble.n	8004fce <SEN_CopyRangingData+0xda>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d00b      	beq.n	8004fca <SEN_CopyRangingData+0xd6>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2b05      	cmp	r3, #5
 8004fb6:	d008      	beq.n	8004fca <SEN_CopyRangingData+0xd6>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b06      	cmp	r3, #6
 8004fbc:	d005      	beq.n	8004fca <SEN_CopyRangingData+0xd6>
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b09      	cmp	r3, #9
 8004fc2:	d002      	beq.n	8004fca <SEN_CopyRangingData+0xd6>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b0a      	cmp	r3, #10
 8004fc8:	d101      	bne.n	8004fce <SEN_CopyRangingData+0xda>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <SEN_CopyRangingData+0xdc>
 8004fce:	2300      	movs	r3, #0
		valid = (nb_targets > 0)
 8004fd0:	76fb      	strb	r3, [r7, #27]
 8004fd2:	7efb      	ldrb	r3, [r7, #27]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	76fb      	strb	r3, [r7, #27]
		result = SEN_set_data(pDest, idx, ranging, peak, valid);
 8004fda:	7efb      	ldrb	r3, [r7, #27]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8004fe2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f005 ffc4 	bl	800af76 <SEN_set_data>
 8004fee:	6178      	str	r0, [r7, #20]

		if (result != 0) return result;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <SEN_CopyRangingData+0x106>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	e008      	b.n	800500c <SEN_CopyRangingData+0x118>
	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005006:	429a      	cmp	r2, r3
 8005008:	db8b      	blt.n	8004f22 <SEN_CopyRangingData+0x2e>
	}

	return 0;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40100000 	.word	0x40100000
 8005018:	40a00000 	.word	0x40a00000

0800501c <print_uart>:


// Function used to print the algo results on the UART port and the data are formatted to be read in a terminal (Tera Term for example)
// The serial baudrate is 921600 by default in this example (see main.c)
void print_uart(){
 800501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005020:	b085      	sub	sp, #20
 8005022:	af04      	add	r7, sp, #16
	if (gest_predictor.gesture.ready)
 8005024:	4b5c      	ldr	r3, [pc, #368]	; (8005198 <print_uart+0x17c>)
 8005026:	f893 3f2a 	ldrb.w	r3, [r3, #3882]	; 0xf2a
 800502a:	2b00      	cmp	r3, #0
 800502c:	d07d      	beq.n	800512a <print_uart+0x10e>
		{
			// Motion Gesture
			MZ_TRACE("\nGesture(%d) Detected : ", gest_predictor.gesture.label);
 800502e:	4b5a      	ldr	r3, [pc, #360]	; (8005198 <print_uart+0x17c>)
 8005030:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 8005034:	4619      	mov	r1, r3
 8005036:	4859      	ldr	r0, [pc, #356]	; (800519c <print_uart+0x180>)
 8005038:	f007 f982 	bl	800c340 <iprintf>
 800503c:	4b58      	ldr	r3, [pc, #352]	; (80051a0 <print_uart+0x184>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f007 f8a6 	bl	800c194 <fflush>
			if (gest_predictor.gesture.label == GW_LEFT)
 8005048:	4b53      	ldr	r3, [pc, #332]	; (8005198 <print_uart+0x17c>)
 800504a:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d109      	bne.n	8005066 <print_uart+0x4a>
			{
				MZ_TRACE(" LEFT Swipe <= \n");
 8005052:	4854      	ldr	r0, [pc, #336]	; (80051a4 <print_uart+0x188>)
 8005054:	f007 f9e2 	bl	800c41c <puts>
 8005058:	4b51      	ldr	r3, [pc, #324]	; (80051a0 <print_uart+0x184>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f007 f898 	bl	800c194 <fflush>
 8005064:	e058      	b.n	8005118 <print_uart+0xfc>
			}
			else if (gest_predictor.gesture.label == GW_RIGHT)
 8005066:	4b4c      	ldr	r3, [pc, #304]	; (8005198 <print_uart+0x17c>)
 8005068:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 800506c:	2b02      	cmp	r3, #2
 800506e:	d109      	bne.n	8005084 <print_uart+0x68>
			{
				MZ_TRACE(" RIGHT Swipe => \n");
 8005070:	484d      	ldr	r0, [pc, #308]	; (80051a8 <print_uart+0x18c>)
 8005072:	f007 f9d3 	bl	800c41c <puts>
 8005076:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <print_uart+0x184>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f007 f889 	bl	800c194 <fflush>
 8005082:	e049      	b.n	8005118 <print_uart+0xfc>
			}
			//-------------------------------
			else if (gest_predictor.gesture.label == GW_DOWN)
 8005084:	4b44      	ldr	r3, [pc, #272]	; (8005198 <print_uart+0x17c>)
 8005086:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 800508a:	2b03      	cmp	r3, #3
 800508c:	d109      	bne.n	80050a2 <print_uart+0x86>
			{
				MZ_TRACE(" DOWN Swipe \n");
 800508e:	4847      	ldr	r0, [pc, #284]	; (80051ac <print_uart+0x190>)
 8005090:	f007 f9c4 	bl	800c41c <puts>
 8005094:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <print_uart+0x184>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f007 f87a 	bl	800c194 <fflush>
 80050a0:	e03a      	b.n	8005118 <print_uart+0xfc>
			}
			else if (gest_predictor.gesture.label == GW_UP)
 80050a2:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <print_uart+0x17c>)
 80050a4:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d109      	bne.n	80050c0 <print_uart+0xa4>
			{
				MZ_TRACE(" UP Swipe \n");
 80050ac:	4840      	ldr	r0, [pc, #256]	; (80051b0 <print_uart+0x194>)
 80050ae:	f007 f9b5 	bl	800c41c <puts>
 80050b2:	4b3b      	ldr	r3, [pc, #236]	; (80051a0 <print_uart+0x184>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f007 f86b 	bl	800c194 <fflush>
 80050be:	e02b      	b.n	8005118 <print_uart+0xfc>
			}
			else if (gest_predictor.gesture.label == GW_TOWARD)
 80050c0:	4b35      	ldr	r3, [pc, #212]	; (8005198 <print_uart+0x17c>)
 80050c2:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d109      	bne.n	80050de <print_uart+0xc2>
			{
				MZ_TRACE(" TAP []   \n");
 80050ca:	483a      	ldr	r0, [pc, #232]	; (80051b4 <print_uart+0x198>)
 80050cc:	f007 f9a6 	bl	800c41c <puts>
 80050d0:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <print_uart+0x184>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f007 f85c 	bl	800c194 <fflush>
 80050dc:	e01c      	b.n	8005118 <print_uart+0xfc>
			}
			//-------------------------------
			else if (gest_predictor.gesture.label == GW_DOUBLETAP)
 80050de:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <print_uart+0x17c>)
 80050e0:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d109      	bne.n	80050fc <print_uart+0xe0>
			{
				MZ_TRACE(" Double TAP  [[]]   \n");
 80050e8:	4833      	ldr	r0, [pc, #204]	; (80051b8 <print_uart+0x19c>)
 80050ea:	f007 f997 	bl	800c41c <puts>
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <print_uart+0x184>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f007 f84d 	bl	800c194 <fflush>
 80050fa:	e00d      	b.n	8005118 <print_uart+0xfc>
			}
			else if (gest_predictor.gesture.label == GW_AWAY)
 80050fc:	4b26      	ldr	r3, [pc, #152]	; (8005198 <print_uart+0x17c>)
 80050fe:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 8005102:	2b06      	cmp	r3, #6
 8005104:	d108      	bne.n	8005118 <print_uart+0xfc>
			{
				MZ_TRACE(" Away \n");
 8005106:	482d      	ldr	r0, [pc, #180]	; (80051bc <print_uart+0x1a0>)
 8005108:	f007 f988 	bl	800c41c <puts>
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <print_uart+0x184>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f007 f83e 	bl	800c194 <fflush>
			}

			MZ_TRACE("\n");
 8005118:	200a      	movs	r0, #10
 800511a:	f007 f923 	bl	800c364 <putchar>
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <print_uart+0x184>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f007 f835 	bl	800c194 <fflush>
		}

		if (gest_predictor.lc_state == LC_UNDER_CONTROL)
 800512a:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <print_uart+0x17c>)
 800512c:	f893 3f3c 	ldrb.w	r3, [r3, #3900]	; 0xf3c
 8005130:	2b02      	cmp	r3, #2
 8005132:	d12b      	bne.n	800518c <print_uart+0x170>
		{
			MZ_TRACE("LC %3lu, Z = %6.1f, Polar: r = %6.1f, Theta = %4.1f\n", gest_predictor.gesture.lc_currentLevel, hand_tracker.hand.hand_z, gest_predictor.gesture.lc_polar_r, gest_predictor.gesture.lc_polar_theta);
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <print_uart+0x17c>)
 8005136:	f8d3 6f30 	ldr.w	r6, [r3, #3888]	; 0xf30
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <print_uart+0x1a4>)
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	4618      	mov	r0, r3
 8005140:	f7fb fa1a 	bl	8000578 <__aeabi_f2d>
 8005144:	4680      	mov	r8, r0
 8005146:	4689      	mov	r9, r1
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <print_uart+0x17c>)
 800514a:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f7fb fa11 	bl	8000578 <__aeabi_f2d>
 8005156:	4604      	mov	r4, r0
 8005158:	460d      	mov	r5, r1
 800515a:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <print_uart+0x17c>)
 800515c:	f603 7338 	addw	r3, r3, #3896	; 0xf38
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb fa08 	bl	8000578 <__aeabi_f2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005170:	e9cd 4500 	strd	r4, r5, [sp]
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	4631      	mov	r1, r6
 800517a:	4812      	ldr	r0, [pc, #72]	; (80051c4 <print_uart+0x1a8>)
 800517c:	f007 f8e0 	bl	800c340 <iprintf>
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <print_uart+0x184>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f007 f804 	bl	800c194 <fflush>
		}
}
 800518c:	bf00      	nop
 800518e:	3704      	adds	r7, #4
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005196:	bf00      	nop
 8005198:	20003f1c 	.word	0x20003f1c
 800519c:	080128c8 	.word	0x080128c8
 80051a0:	200003a4 	.word	0x200003a4
 80051a4:	080128e4 	.word	0x080128e4
 80051a8:	080128f4 	.word	0x080128f4
 80051ac:	08012908 	.word	0x08012908
 80051b0:	08012918 	.word	0x08012918
 80051b4:	08012924 	.word	0x08012924
 80051b8:	08012930 	.word	0x08012930
 80051bc:	08012948 	.word	0x08012948
 80051c0:	20004e7c 	.word	0x20004e7c
 80051c4:	08012950 	.word	0x08012950

080051c8 <print_evk>:

// This function is used by the GUI to get and parse the data sent on the UART
// !!! If the format is changed, the GUI can't work anymore !!! //
void print_evk(long timestamp_ms){
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	f6ad 1d3c 	subw	sp, sp, #2364	; 0x93c
 80051d0:	af2a      	add	r7, sp, #168	; 0xa8
 80051d2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80051d6:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80051da:	6018      	str	r0, [r3, #0]
	//display by row
	//only working with a resolution 64
	int LC_on = 0; //Hand has been detected
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888
	int i=0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
	char print_buffer[2048];

	if (frame_count < 99999)
 80051e8:	4b82      	ldr	r3, [pc, #520]	; (80053f4 <print_evk+0x22c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a82      	ldr	r2, [pc, #520]	; (80053f8 <print_evk+0x230>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d805      	bhi.n	80051fe <print_evk+0x36>
			frame_count++;
 80051f2:	4b80      	ldr	r3, [pc, #512]	; (80053f4 <print_evk+0x22c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	4a7e      	ldr	r2, [pc, #504]	; (80053f4 <print_evk+0x22c>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e002      	b.n	8005204 <print_evk+0x3c>
		else
			frame_count = 0;
 80051fe:	4b7d      	ldr	r3, [pc, #500]	; (80053f4 <print_evk+0x22c>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

	LC_on = (gest_predictor.lc_state == LC_UNDER_CONTROL) ? 1 : 0;
 8005204:	4b7d      	ldr	r3, [pc, #500]	; (80053fc <print_evk+0x234>)
 8005206:	f893 3f3c 	ldrb.w	r3, [r3, #3900]	; 0xf3c
 800520a:	2b02      	cmp	r3, #2
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888

	//Global data format
	int size_global = 159;
 8005218:	239f      	movs	r3, #159	; 0x9f
 800521a:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 800521e:	4b75      	ldr	r3, [pc, #468]	; (80053f4 <print_evk+0x22c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	673b      	str	r3, [r7, #112]	; 0x70
			"%1d,,,,,"
			",,,,,"
			",,,,,"
			",,,,,",
			frame_count,//1
			LMZDev.streamcount,//2
 8005224:	4b76      	ldr	r3, [pc, #472]	; (8005400 <print_evk+0x238>)
 8005226:	791b      	ldrb	r3, [r3, #4]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005228:	66fb      	str	r3, [r7, #108]	; 0x6c
			timestamp_ms,//3
			hand_tracker.hand.hand_x,//4
 800522a:	4b76      	ldr	r3, [pc, #472]	; (8005404 <print_evk+0x23c>)
 800522c:	69db      	ldr	r3, [r3, #28]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 800522e:	4618      	mov	r0, r3
 8005230:	f7fb f9a2 	bl	8000578 <__aeabi_f2d>
 8005234:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
			hand_tracker.hand.hand_y,//5
 8005238:	4b72      	ldr	r3, [pc, #456]	; (8005404 <print_evk+0x23c>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 800523c:	4618      	mov	r0, r3
 800523e:	f7fb f99b 	bl	8000578 <__aeabi_f2d>
 8005242:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
			hand_tracker.hand.hand_z,//6
 8005246:	4b6f      	ldr	r3, [pc, #444]	; (8005404 <print_evk+0x23c>)
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 800524a:	4618      	mov	r0, r3
 800524c:	f7fb f994 	bl	8000578 <__aeabi_f2d>
 8005250:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
			gest_predictor.speed_x_mm_s,//7
 8005254:	4b69      	ldr	r3, [pc, #420]	; (80053fc <print_evk+0x234>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005258:	4618      	mov	r0, r3
 800525a:	f7fb f98d 	bl	8000578 <__aeabi_f2d>
 800525e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			gest_predictor.speed_y_mm_s,//8
 8005262:	4b66      	ldr	r3, [pc, #408]	; (80053fc <print_evk+0x234>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb f986 	bl	8000578 <__aeabi_f2d>
 800526c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			gest_predictor.speed_z_mm_s,//9
 8005270:	4b62      	ldr	r3, [pc, #392]	; (80053fc <print_evk+0x234>)
 8005272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f97f 	bl	8000578 <__aeabi_f2d>
 800527a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
			gest_predictor.gesture.label,//10
 800527e:	4b5f      	ldr	r3, [pc, #380]	; (80053fc <print_evk+0x234>)
 8005280:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005284:	66bb      	str	r3, [r7, #104]	; 0x68
			gest_predictor.gesture.ready,//11
 8005286:	4b5d      	ldr	r3, [pc, #372]	; (80053fc <print_evk+0x234>)
 8005288:	f893 3f2a 	ldrb.w	r3, [r3, #3882]	; 0xf2a
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <print_evk+0x234>)
 8005290:	f8d3 1f20 	ldr.w	r1, [r3, #3872]	; 0xf20
 8005294:	6339      	str	r1, [r7, #48]	; 0x30
 8005296:	4b59      	ldr	r3, [pc, #356]	; (80053fc <print_evk+0x234>)
 8005298:	f8d3 4f24 	ldr.w	r4, [r3, #3876]	; 0xf24
 800529c:	62fc      	str	r4, [r7, #44]	; 0x2c
			gest_predictor.gesture.start_time_ms,//12
			gest_predictor.gesture.end_time_ms,//13
			gest_predictor.gesture.current,//14
 800529e:	4b57      	ldr	r3, [pc, #348]	; (80053fc <print_evk+0x234>)
 80052a0:	f893 3f28 	ldrb.w	r3, [r3, #3880]	; 0xf28
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
			gest_predictor.gesture.probation,//15
 80052a6:	4b55      	ldr	r3, [pc, #340]	; (80053fc <print_evk+0x234>)
 80052a8:	f893 3f29 	ldrb.w	r3, [r3, #3881]	; 0xf29
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
			gest_predictor.gesture.distance_mm,//16
 80052ae:	4b53      	ldr	r3, [pc, #332]	; (80053fc <print_evk+0x234>)
 80052b0:	f603 732c 	addw	r3, r3, #3884	; 0xf2c
 80052b4:	681b      	ldr	r3, [r3, #0]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fb f95e 	bl	8000578 <__aeabi_f2d>
 80052bc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80052c0:	4b4e      	ldr	r3, [pc, #312]	; (80053fc <print_evk+0x234>)
 80052c2:	f8d3 5f30 	ldr.w	r5, [r3, #3888]	; 0xf30
 80052c6:	623d      	str	r5, [r7, #32]
			gest_predictor.gesture.lc_currentLevel,//17
			gest_predictor.gesture.lc_polar_r,//18
 80052c8:	4b4c      	ldr	r3, [pc, #304]	; (80053fc <print_evk+0x234>)
 80052ca:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 80052ce:	681b      	ldr	r3, [r3, #0]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb f951 	bl	8000578 <__aeabi_f2d>
 80052d6:	4682      	mov	sl, r0
 80052d8:	468b      	mov	fp, r1
			gest_predictor.gesture.lc_polar_theta,//19
 80052da:	4b48      	ldr	r3, [pc, #288]	; (80053fc <print_evk+0x234>)
 80052dc:	f603 7338 	addw	r3, r3, #3896	; 0xf38
 80052e0:	681b      	ldr	r3, [r3, #0]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb f948 	bl	8000578 <__aeabi_f2d>
 80052e8:	4680      	mov	r8, r0
 80052ea:	4689      	mov	r9, r1
			//GW_comp_t _computer structure:
			gest_predictor._computer._label,//20
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <print_evk+0x234>)
 80052ee:	f893 38cc 	ldrb.w	r3, [r3, #2252]	; 0x8cc
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052f2:	617b      	str	r3, [r7, #20]
			gest_predictor._computer._distance_mm,//21
 80052f4:	4b41      	ldr	r3, [pc, #260]	; (80053fc <print_evk+0x234>)
 80052f6:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 80052fa:	681b      	ldr	r3, [r3, #0]
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb f93b 	bl	8000578 <__aeabi_f2d>
			gest_predictor._computer._closer,//22
 8005302:	4b3e      	ldr	r3, [pc, #248]	; (80053fc <print_evk+0x234>)
 8005304:	f893 38d4 	ldrb.w	r3, [r3, #2260]	; 0x8d4
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005308:	613b      	str	r3, [r7, #16]
			gest_predictor._computer._consistent,//23
 800530a:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <print_evk+0x234>)
 800530c:	f893 38d5 	ldrb.w	r3, [r3, #2261]	; 0x8d5
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005310:	60fb      	str	r3, [r7, #12]
			gest_predictor._computer._dead,//24
 8005312:	4b3a      	ldr	r3, [pc, #232]	; (80053fc <print_evk+0x234>)
 8005314:	f893 38d6 	ldrb.w	r3, [r3, #2262]	; 0x8d6
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005318:	60bb      	str	r3, [r7, #8]
			gest_predictor._computer._ignore,//25
 800531a:	4b38      	ldr	r3, [pc, #224]	; (80053fc <print_evk+0x234>)
 800531c:	f893 38d7 	ldrb.w	r3, [r3, #2263]	; 0x8d7
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005320:	607b      	str	r3, [r7, #4]
			gest_predictor._computer._same,//26
 8005322:	4b36      	ldr	r3, [pc, #216]	; (80053fc <print_evk+0x234>)
 8005324:	f893 38d8 	ldrb.w	r3, [r3, #2264]	; 0x8d8
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005328:	461e      	mov	r6, r3
			gest_predictor._computer._single,//27
 800532a:	4b34      	ldr	r3, [pc, #208]	; (80053fc <print_evk+0x234>)
 800532c:	f893 38d9 	ldrb.w	r3, [r3, #2265]	; 0x8d9
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005330:	461c      	mov	r4, r3
			gest_predictor._computer._valid,//28
 8005332:	4b32      	ldr	r3, [pc, #200]	; (80053fc <print_evk+0x234>)
 8005334:	f893 38da 	ldrb.w	r3, [r3, #2266]	; 0x8da
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005338:	461a      	mov	r2, r3
			LC_on,//29
			hand_tracker.hand.found//30
 800533a:	4b32      	ldr	r3, [pc, #200]	; (8005404 <print_evk+0x23c>)
 800533c:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
	sprintf(&print_buffer[0],"RAN,%5ld,%3d,%10ld,%4.0f,"
 8005340:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8005344:	9328      	str	r3, [sp, #160]	; 0xa0
 8005346:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 800534a:	9327      	str	r3, [sp, #156]	; 0x9c
 800534c:	9226      	str	r2, [sp, #152]	; 0x98
 800534e:	9425      	str	r4, [sp, #148]	; 0x94
 8005350:	9624      	str	r6, [sp, #144]	; 0x90
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	9223      	str	r2, [sp, #140]	; 0x8c
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	9222      	str	r2, [sp, #136]	; 0x88
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	9221      	str	r2, [sp, #132]	; 0x84
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	9220      	str	r2, [sp, #128]	; 0x80
 8005362:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	921c      	str	r2, [sp, #112]	; 0x70
 800536a:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 800536e:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 8005372:	6a3e      	ldr	r6, [r7, #32]
 8005374:	9616      	str	r6, [sp, #88]	; 0x58
 8005376:	ed97 7b06 	vldr	d7, [r7, #24]
 800537a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800537e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8005380:	9613      	str	r6, [sp, #76]	; 0x4c
 8005382:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8005384:	9612      	str	r6, [sp, #72]	; 0x48
 8005386:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8005388:	9411      	str	r4, [sp, #68]	; 0x44
 800538a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800538c:	9110      	str	r1, [sp, #64]	; 0x40
 800538e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005390:	910f      	str	r1, [sp, #60]	; 0x3c
 8005392:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005394:	910e      	str	r1, [sp, #56]	; 0x38
 8005396:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800539a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800539e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80053a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80053a6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80053aa:	ed8d 7b08 	vstr	d7, [sp, #32]
 80053ae:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80053b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053b6:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80053ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80053be:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80053c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053c6:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80053ca:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80053d6:	490c      	ldr	r1, [pc, #48]	; (8005408 <print_evk+0x240>)
 80053d8:	4628      	mov	r0, r5
 80053da:	f007 f827 	bl	800c42c <siprintf>
	//RangingData.distance_mm			-> 7 digits + ',' = 8
	//RangingData.signal_per_spad		-> 6 digits + ',' = 7
	//hand_tracker.hand.hand_map		-> 1 digit  + ',' = 2
	//sensor_data.valid			        -> 1 digit  + ',' = 2
	//Total size for 1 zone = zone_size = 22
	int size_zone = 22;
 80053de:	2316      	movs	r3, #22
 80053e0:	f8c7 3880 	str.w	r3, [r7, #2176]	; 0x880
	int char_pos = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
	for (i=0; i<Params.Resolution; i++){
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 80053f0:	e0ba      	b.n	8005568 <print_evk+0x3a0>
 80053f2:	bf00      	nop
 80053f4:	20003f18 	.word	0x20003f18
 80053f8:	0001869e 	.word	0x0001869e
 80053fc:	20003f1c 	.word	0x20003f1c
 8005400:	200015f4 	.word	0x200015f4
 8005404:	20004e7c 	.word	0x20004e7c
 8005408:	08012988 	.word	0x08012988
		char_pos = size_zone*i+size_global;
 800540c:	f8d7 3880 	ldr.w	r3, [r7, #2176]	; 0x880
 8005410:	f8d7 288c 	ldr.w	r2, [r7, #2188]	; 0x88c
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	f8d7 2884 	ldr.w	r2, [r7, #2180]	; 0x884
 800541c:	4413      	add	r3, r2
 800541e:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
		sprintf(&print_buffer[char_pos],",%2d",(RangingData.target_status[i]));
 8005422:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005426:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 800542a:	18d0      	adds	r0, r2, r3
 800542c:	4a5f      	ldr	r2, [pc, #380]	; (80055ac <print_evk+0x3e4>)
 800542e:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 8005432:	4413      	add	r3, r2
 8005434:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	495c      	ldr	r1, [pc, #368]	; (80055b0 <print_evk+0x3e8>)
 800543e:	f006 fff5 	bl	800c42c <siprintf>
		char_pos = char_pos + 3;
 8005442:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 8005446:	3303      	adds	r3, #3
 8005448:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
		sprintf(&print_buffer[char_pos],",%2d",(RangingData.nb_target_detected[i]));
 800544c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005450:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 8005454:	18d0      	adds	r0, r2, r3
 8005456:	4a55      	ldr	r2, [pc, #340]	; (80055ac <print_evk+0x3e4>)
 8005458:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 800545c:	4413      	add	r3, r2
 800545e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	4952      	ldr	r1, [pc, #328]	; (80055b0 <print_evk+0x3e8>)
 8005468:	f006 ffe0 	bl	800c42c <siprintf>
		char_pos = char_pos + 3;
 800546c:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 8005470:	3303      	adds	r3, #3
 8005472:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
		sprintf(&print_buffer[char_pos],",%4.0f",(float) (RangingData.distance_mm[i]/4));//%7.2f
 8005476:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800547a:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 800547e:	18d4      	adds	r4, r2, r3
 8005480:	4a4a      	ldr	r2, [pc, #296]	; (80055ac <print_evk+0x3e4>)
 8005482:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 8005486:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da00      	bge.n	8005498 <print_evk+0x2d0>
 8005496:	3303      	adds	r3, #3
 8005498:	109b      	asrs	r3, r3, #2
 800549a:	b21b      	sxth	r3, r3
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a4:	ee17 0a90 	vmov	r0, s15
 80054a8:	f7fb f866 	bl	8000578 <__aeabi_f2d>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4940      	ldr	r1, [pc, #256]	; (80055b4 <print_evk+0x3ec>)
 80054b2:	4620      	mov	r0, r4
 80054b4:	f006 ffba 	bl	800c42c <siprintf>
		char_pos = char_pos + 5;//8
 80054b8:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 80054bc:	3305      	adds	r3, #5
 80054be:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
		sprintf(&print_buffer[char_pos],",%6.0f",(float) (RangingData.signal_per_spad[i]/2048.0));
 80054c2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80054c6:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 80054ca:	18d4      	adds	r4, r2, r3
 80054cc:	4a37      	ldr	r2, [pc, #220]	; (80055ac <print_evk+0x3e4>)
 80054ce:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 80054d2:	3390      	adds	r3, #144	; 0x90
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fb f82a 	bl	8000534 <__aeabi_ui2d>
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	4b34      	ldr	r3, [pc, #208]	; (80055b8 <print_evk+0x3f0>)
 80054e6:	f7fb f9c9 	bl	800087c <__aeabi_ddiv>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	f7fb fb91 	bl	8000c18 <__aeabi_d2f>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fb f83d 	bl	8000578 <__aeabi_f2d>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	492e      	ldr	r1, [pc, #184]	; (80055bc <print_evk+0x3f4>)
 8005504:	4620      	mov	r0, r4
 8005506:	f006 ff91 	bl	800c42c <siprintf>
		char_pos = char_pos + 7;
 800550a:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 800550e:	3307      	adds	r3, #7
 8005510:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
		sprintf(&print_buffer[char_pos],",%1d",(hand_tracker.hand.hand_map[i]));
 8005514:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005518:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 800551c:	18d0      	adds	r0, r2, r3
 800551e:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <print_evk+0x3f8>)
 8005520:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 8005524:	4413      	add	r3, r2
 8005526:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	4925      	ldr	r1, [pc, #148]	; (80055c4 <print_evk+0x3fc>)
 8005530:	f006 ff7c 	bl	800c42c <siprintf>
		char_pos = char_pos + 2;
 8005534:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 8005538:	3302      	adds	r3, #2
 800553a:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
		sprintf(&print_buffer[char_pos],",%1d",(sensor_data.valid[i]));
 800553e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005542:	f8d7 387c 	ldr.w	r3, [r7, #2172]	; 0x87c
 8005546:	18d0      	adds	r0, r2, r3
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <print_evk+0x400>)
 800554a:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 800554e:	4413      	add	r3, r2
 8005550:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	491a      	ldr	r1, [pc, #104]	; (80055c4 <print_evk+0x3fc>)
 800555a:	f006 ff67 	bl	800c42c <siprintf>
	for (i=0; i<Params.Resolution; i++){
 800555e:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 8005562:	3301      	adds	r3, #1
 8005564:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <print_evk+0x404>)
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	f8d7 388c 	ldr.w	r3, [r7, #2188]	; 0x88c
 8005570:	429a      	cmp	r2, r3
 8005572:	f63f af4b 	bhi.w	800540c <print_evk+0x244>
	}
	sprintf(&print_buffer[size_global+size_zone*Params.Resolution],"\n");
 8005576:	4b15      	ldr	r3, [pc, #84]	; (80055cc <print_evk+0x404>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f8d7 2880 	ldr.w	r2, [r7, #2176]	; 0x880
 800557e:	fb03 f202 	mul.w	r2, r3, r2
 8005582:	f8d7 3884 	ldr.w	r3, [r7, #2180]	; 0x884
 8005586:	4413      	add	r3, r2
 8005588:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800558c:	4413      	add	r3, r2
 800558e:	4910      	ldr	r1, [pc, #64]	; (80055d0 <print_evk+0x408>)
 8005590:	4618      	mov	r0, r3
 8005592:	f006 ff4b 	bl	800c42c <siprintf>
	printf(print_buffer);
 8005596:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800559a:	4618      	mov	r0, r3
 800559c:	f006 fed0 	bl	800c340 <iprintf>
}
 80055a0:	bf00      	nop
 80055a2:	f607 0794 	addw	r7, r7, #2196	; 0x894
 80055a6:	46bd      	mov	sp, r7
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	200039c4 	.word	0x200039c4
 80055b0:	08012a34 	.word	0x08012a34
 80055b4:	08012a3c 	.word	0x08012a3c
 80055b8:	40a00000 	.word	0x40a00000
 80055bc:	08012a44 	.word	0x08012a44
 80055c0:	20004e7c 	.word	0x20004e7c
 80055c4:	08012a4c 	.word	0x08012a4c
 80055c8:	20005634 	.word	0x20005634
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	08012a54 	.word	0x08012a54

080055d4 <gesture_library_init_configure>:


// Recommended Initialization to use the Gesture library
int gesture_library_init_configure(void)
{
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	b09d      	sub	sp, #116	; 0x74
 80055d8:	af10      	add	r7, sp, #64	; 0x40
	int status = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	//----------------//
	// MANDATORY CODE //
	//----------------//
	//Initialize Gesture algo and use the default parameters
	status = GW_init(&gest_predictor, &hand_tracker, &sensor_data);
 80055de:	4a8c      	ldr	r2, [pc, #560]	; (8005810 <gesture_library_init_configure+0x23c>)
 80055e0:	498c      	ldr	r1, [pc, #560]	; (8005814 <gesture_library_init_configure+0x240>)
 80055e2:	488d      	ldr	r0, [pc, #564]	; (8005818 <gesture_library_init_configure+0x244>)
 80055e4:	f003 ff66 	bl	80094b4 <GW_init>
 80055e8:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status != 0)
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <gesture_library_init_configure+0x34>
	{
		MZ_TRACE("GW_init failed : %d\n", status);
 80055f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f2:	488a      	ldr	r0, [pc, #552]	; (800581c <gesture_library_init_configure+0x248>)
 80055f4:	f006 fea4 	bl	800c340 <iprintf>
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <gesture_library_init_configure+0x24c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f006 fdc8 	bl	800c194 <fflush>
		return status;
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	e0fe      	b.n	8005806 <gesture_library_init_configure+0x232>
	}

	status = HT_set_square_resolution(&hand_tracker, &sensor_data, Params.Resolution);
 8005608:	4b86      	ldr	r3, [pc, #536]	; (8005824 <gesture_library_init_configure+0x250>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	461a      	mov	r2, r3
 800560e:	4980      	ldr	r1, [pc, #512]	; (8005810 <gesture_library_init_configure+0x23c>)
 8005610:	4880      	ldr	r0, [pc, #512]	; (8005814 <gesture_library_init_configure+0x240>)
 8005612:	f004 feaf 	bl	800a374 <HT_set_square_resolution>
 8005616:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status != 0)
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <gesture_library_init_configure+0x62>
	{
		MZ_TRACE("HT_set_square_resolution failed : %d\n",status);
 800561e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005620:	4881      	ldr	r0, [pc, #516]	; (8005828 <gesture_library_init_configure+0x254>)
 8005622:	f006 fe8d 	bl	800c340 <iprintf>
 8005626:	4b7e      	ldr	r3, [pc, #504]	; (8005820 <gesture_library_init_configure+0x24c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f006 fdb1 	bl	800c194 <fflush>
		return status;
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	e0e7      	b.n	8005806 <gesture_library_init_configure+0x232>
	}

	status = GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0/Params.RangingPeriod);
 8005636:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <gesture_library_init_configure+0x250>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa ff8a 	bl	8000554 <__aeabi_i2d>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	4978      	ldr	r1, [pc, #480]	; (800582c <gesture_library_init_configure+0x258>)
 800564a:	f7fb f917 	bl	800087c <__aeabi_ddiv>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	f7fb fadf 	bl	8000c18 <__aeabi_d2f>
 800565a:	4603      	mov	r3, r0
 800565c:	ee00 3a10 	vmov	s0, r3
 8005660:	4a6b      	ldr	r2, [pc, #428]	; (8005810 <gesture_library_init_configure+0x23c>)
 8005662:	496c      	ldr	r1, [pc, #432]	; (8005814 <gesture_library_init_configure+0x240>)
 8005664:	486c      	ldr	r0, [pc, #432]	; (8005818 <gesture_library_init_configure+0x244>)
 8005666:	f003 ffff 	bl	8009668 <GW_set_frequency>
 800566a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status != 0)
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <gesture_library_init_configure+0xb6>
	{
		MZ_TRACE("GW_set_frequency failed : %d\n",status);
 8005672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005674:	486e      	ldr	r0, [pc, #440]	; (8005830 <gesture_library_init_configure+0x25c>)
 8005676:	f006 fe63 	bl	800c340 <iprintf>
 800567a:	4b69      	ldr	r3, [pc, #420]	; (8005820 <gesture_library_init_configure+0x24c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4618      	mov	r0, r3
 8005682:	f006 fd87 	bl	800c194 <fflush>
		return status;
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	e0bd      	b.n	8005806 <gesture_library_init_configure+0x232>
	//---------------//
	// OPTIONAL CODE //
	//---------------//
	// TO CHANGE THE ALGO PARAMETERS //
	// !!! Gesture recognition performances are not guaranteed if default parameter values are changed !!!///
	status = GW_set_params(&gest_predictor,
 800568a:	4b66      	ldr	r3, [pc, #408]	; (8005824 <gesture_library_init_configure+0x250>)
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
 8005690:	4b64      	ldr	r3, [pc, #400]	; (8005824 <gesture_library_init_configure+0x250>)
 8005692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005694:	623a      	str	r2, [r7, #32]
 8005696:	4b63      	ldr	r3, [pc, #396]	; (8005824 <gesture_library_init_configure+0x250>)
 8005698:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800569a:	61f8      	str	r0, [r7, #28]
 800569c:	4b61      	ldr	r3, [pc, #388]	; (8005824 <gesture_library_init_configure+0x250>)
 800569e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80056a0:	4b60      	ldr	r3, [pc, #384]	; (8005824 <gesture_library_init_configure+0x250>)
 80056a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80056a4:	4b5f      	ldr	r3, [pc, #380]	; (8005824 <gesture_library_init_configure+0x250>)
 80056a6:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <gesture_library_init_configure+0x250>)
 80056aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80056ac:	61b9      	str	r1, [r7, #24]
 80056ae:	4b5d      	ldr	r3, [pc, #372]	; (8005824 <gesture_library_init_configure+0x250>)
 80056b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80056b2:	6178      	str	r0, [r7, #20]
 80056b4:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <gesture_library_init_configure+0x250>)
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	4b5a      	ldr	r3, [pc, #360]	; (8005824 <gesture_library_init_configure+0x250>)
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	60fa      	str	r2, [r7, #12]
 80056c0:	4b58      	ldr	r3, [pc, #352]	; (8005824 <gesture_library_init_configure+0x250>)
 80056c2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80056c6:	4b57      	ldr	r3, [pc, #348]	; (8005824 <gesture_library_init_configure+0x250>)
 80056c8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80056cc:	4b55      	ldr	r3, [pc, #340]	; (8005824 <gesture_library_init_configure+0x250>)
 80056ce:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80056d2:	4b54      	ldr	r3, [pc, #336]	; (8005824 <gesture_library_init_configure+0x250>)
 80056d4:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 80056d8:	4b52      	ldr	r3, [pc, #328]	; (8005824 <gesture_library_init_configure+0x250>)
 80056da:	edd3 5a18 	vldr	s11, [r3, #96]	; 0x60
 80056de:	4b51      	ldr	r3, [pc, #324]	; (8005824 <gesture_library_init_configure+0x250>)
 80056e0:	ed93 5a19 	vldr	s10, [r3, #100]	; 0x64
 80056e4:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <gesture_library_init_configure+0x250>)
 80056e6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <gesture_library_init_configure+0x250>)
 80056ec:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	4b4c      	ldr	r3, [pc, #304]	; (8005824 <gesture_library_init_configure+0x250>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <gesture_library_init_configure+0x250>)
 80056f8:	edd3 4a06 	vldr	s9, [r3, #24]
 80056fc:	4b49      	ldr	r3, [pc, #292]	; (8005824 <gesture_library_init_configure+0x250>)
 80056fe:	69d8      	ldr	r0, [r3, #28]
 8005700:	4b48      	ldr	r3, [pc, #288]	; (8005824 <gesture_library_init_configure+0x250>)
 8005702:	6a19      	ldr	r1, [r3, #32]
 8005704:	4b47      	ldr	r3, [pc, #284]	; (8005824 <gesture_library_init_configure+0x250>)
 8005706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005708:	4b46      	ldr	r3, [pc, #280]	; (8005824 <gesture_library_init_configure+0x250>)
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	930e      	str	r3, [sp, #56]	; 0x38
 800570e:	920d      	str	r2, [sp, #52]	; 0x34
 8005710:	910c      	str	r1, [sp, #48]	; 0x30
 8005712:	900b      	str	r0, [sp, #44]	; 0x2c
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	930a      	str	r3, [sp, #40]	; 0x28
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	9009      	str	r0, [sp, #36]	; 0x24
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	9108      	str	r1, [sp, #32]
 8005720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005724:	9307      	str	r3, [sp, #28]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	9206      	str	r2, [sp, #24]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	9305      	str	r3, [sp, #20]
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	9004      	str	r0, [sp, #16]
 8005732:	69b9      	ldr	r1, [r7, #24]
 8005734:	9103      	str	r1, [sp, #12]
 8005736:	9602      	str	r6, [sp, #8]
 8005738:	9501      	str	r5, [sp, #4]
 800573a:	9400      	str	r4, [sp, #0]
 800573c:	eeb0 3a64 	vmov.f32	s6, s9
 8005740:	eef0 2a45 	vmov.f32	s5, s10
 8005744:	eeb0 2a65 	vmov.f32	s4, s11
 8005748:	eef0 1a46 	vmov.f32	s3, s12
 800574c:	eeb0 1a66 	vmov.f32	s2, s13
 8005750:	eef0 0a47 	vmov.f32	s1, s14
 8005754:	eeb0 0a67 	vmov.f32	s0, s15
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	6a3a      	ldr	r2, [r7, #32]
 800575c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800575e:	482e      	ldr	r0, [pc, #184]	; (8005818 <gesture_library_init_configure+0x244>)
 8005760:	f003 fdb4 	bl	80092cc <GW_set_params>
 8005764:	62f8      	str	r0, [r7, #44]	; 0x2c
			Params.lc_stable_threshold,
			Params.lc_stable_time_threshold,
			Params.lc_maxDistance_mm,
			Params.lc_minDistance_mm,
			Params.double_tap_ts_threshold);
	if (status != 0)
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <gesture_library_init_configure+0x1b0>
	{
		MZ_TRACE("GW_set_params failed : %d\n",status);
 800576c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800576e:	4831      	ldr	r0, [pc, #196]	; (8005834 <gesture_library_init_configure+0x260>)
 8005770:	f006 fde6 	bl	800c340 <iprintf>
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <gesture_library_init_configure+0x24c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f006 fd0a 	bl	800c194 <fflush>
		return status;
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	e040      	b.n	8005806 <gesture_library_init_configure+0x232>
	}
	// Set Frequency has to be run again after changing the Gesture params
	status = GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0/Params.RangingPeriod);
 8005784:	4b27      	ldr	r3, [pc, #156]	; (8005824 <gesture_library_init_configure+0x250>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fee3 	bl	8000554 <__aeabi_i2d>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	4925      	ldr	r1, [pc, #148]	; (800582c <gesture_library_init_configure+0x258>)
 8005798:	f7fb f870 	bl	800087c <__aeabi_ddiv>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f7fb fa38 	bl	8000c18 <__aeabi_d2f>
 80057a8:	4603      	mov	r3, r0
 80057aa:	ee00 3a10 	vmov	s0, r3
 80057ae:	4a18      	ldr	r2, [pc, #96]	; (8005810 <gesture_library_init_configure+0x23c>)
 80057b0:	4918      	ldr	r1, [pc, #96]	; (8005814 <gesture_library_init_configure+0x240>)
 80057b2:	4819      	ldr	r0, [pc, #100]	; (8005818 <gesture_library_init_configure+0x244>)
 80057b4:	f003 ff58 	bl	8009668 <GW_set_frequency>
 80057b8:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status != 0)
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00b      	beq.n	80057d8 <gesture_library_init_configure+0x204>
	{
		MZ_TRACE("GW_set_frequency failed : %d\n",status);
 80057c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c2:	481b      	ldr	r0, [pc, #108]	; (8005830 <gesture_library_init_configure+0x25c>)
 80057c4:	f006 fdbc 	bl	800c340 <iprintf>
 80057c8:	4b15      	ldr	r3, [pc, #84]	; (8005820 <gesture_library_init_configure+0x24c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f006 fce0 	bl	800c194 <fflush>
		return status;
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	e016      	b.n	8005806 <gesture_library_init_configure+0x232>
	}

	// SENSOR ORIENTATION CHANGE : more details in the User Manual //
	status = SEN_set_orientation(&sensor_data, Params.SensorOrientation);
 80057d8:	4b12      	ldr	r3, [pc, #72]	; (8005824 <gesture_library_init_configure+0x250>)
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	4619      	mov	r1, r3
 80057de:	480c      	ldr	r0, [pc, #48]	; (8005810 <gesture_library_init_configure+0x23c>)
 80057e0:	f005 fb76 	bl	800aed0 <SEN_set_orientation>
 80057e4:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status != 0)
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <gesture_library_init_configure+0x230>
	{
		MZ_TRACE("SEN_set_orientation failed : %d\n",status);
 80057ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ee:	4812      	ldr	r0, [pc, #72]	; (8005838 <gesture_library_init_configure+0x264>)
 80057f0:	f006 fda6 	bl	800c340 <iprintf>
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <gesture_library_init_configure+0x24c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f006 fcca 	bl	800c194 <fflush>
		return status;
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	e000      	b.n	8005806 <gesture_library_init_configure+0x232>
	}

	return status;
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005806:	4618      	mov	r0, r3
 8005808:	3734      	adds	r7, #52	; 0x34
 800580a:	46bd      	mov	sp, r7
 800580c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580e:	bf00      	nop
 8005810:	20005634 	.word	0x20005634
 8005814:	20004e7c 	.word	0x20004e7c
 8005818:	20003f1c 	.word	0x20003f1c
 800581c:	08012a58 	.word	0x08012a58
 8005820:	200003a4 	.word	0x200003a4
 8005824:	2000000c 	.word	0x2000000c
 8005828:	08012a70 	.word	0x08012a70
 800582c:	408f4000 	.word	0x408f4000
 8005830:	08012a98 	.word	0x08012a98
 8005834:	08012ab8 	.word	0x08012ab8
 8005838:	08012ad4 	.word	0x08012ad4

0800583c <LMZ_gesture_app_main>:
// - Initialization : Sensor + library
// - VL53LMZ Ranging
// - Gesture Algo processing
// - Xtalk calibration example has been added
int LMZ_gesture_app_main(int start_ranging, uint8_t *xtalk_calib_buf)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
	/* Variables */
	int status = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
	int interrupt_status = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
	int ranging = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]

	MZ_TRACE("VL53LMZ Gesture Demo, version: %s\n", GESTURE_EXAMPLE_VERSION);
 8005852:	499a      	ldr	r1, [pc, #616]	; (8005abc <LMZ_gesture_app_main+0x280>)
 8005854:	489a      	ldr	r0, [pc, #616]	; (8005ac0 <LMZ_gesture_app_main+0x284>)
 8005856:	f006 fd73 	bl	800c340 <iprintf>
 800585a:	4b9a      	ldr	r3, [pc, #616]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f006 fc97 	bl	800c194 <fflush>
	MZ_TRACE("Gesture Library version: %s\n", GW_VERSION);
 8005866:	4998      	ldr	r1, [pc, #608]	; (8005ac8 <LMZ_gesture_app_main+0x28c>)
 8005868:	4898      	ldr	r0, [pc, #608]	; (8005acc <LMZ_gesture_app_main+0x290>)
 800586a:	f006 fd69 	bl	800c340 <iprintf>
 800586e:	4b95      	ldr	r3, [pc, #596]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f006 fc8d 	bl	800c194 <fflush>

	/* Initialize platform structure */
    status = LMZ_platform_init(&LMZDev.platform);
 800587a:	4895      	ldr	r0, [pc, #596]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 800587c:	f000 f988 	bl	8005b90 <LMZ_platform_init>
 8005880:	6138      	str	r0, [r7, #16]
	if (status < 0)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	da0b      	bge.n	80058a0 <LMZ_gesture_app_main+0x64>
	{
		MZ_TRACE("LMZ_platform_init failed\n");
 8005888:	4892      	ldr	r0, [pc, #584]	; (8005ad4 <LMZ_gesture_app_main+0x298>)
 800588a:	f006 fdc7 	bl	800c41c <puts>
 800588e:	4b8d      	ldr	r3, [pc, #564]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f006 fc7d 	bl	800c194 <fflush>
		return -1;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800589e:	e168      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
	}


    /* Initialize sensor */
	status = vl53lmz_init(&LMZDev);
 80058a0:	488b      	ldr	r0, [pc, #556]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 80058a2:	f000 fe45 	bl	8006530 <vl53lmz_init>
 80058a6:	4603      	mov	r3, r0
 80058a8:	613b      	str	r3, [r7, #16]
	if (status != VL53LMZ_STATUS_OK)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <LMZ_gesture_app_main+0x80>
	{
		printf("vl53lmz_init failed : %d\n",status);
 80058b0:	6939      	ldr	r1, [r7, #16]
 80058b2:	4889      	ldr	r0, [pc, #548]	; (8005ad8 <LMZ_gesture_app_main+0x29c>)
 80058b4:	f006 fd44 	bl	800c340 <iprintf>
		return status;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	e15a      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
	}

	// Xtalk Calibration init //
	// Copy the xtalk_calib_buf defined in main()
	// The xtalk buffer will be loaded after the command "enable"
	if (xtalk_calib_buf)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <LMZ_gesture_app_main+0x9e>
	{
		xtalk64_calibration_stored = 1;
 80058c2:	4b86      	ldr	r3, [pc, #536]	; (8005adc <LMZ_gesture_app_main+0x2a0>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
		memcpy(xtalk_calibration_buffer, xtalk_calib_buf, sizeof(xtalk_calibration_buffer) );
 80058c8:	4a85      	ldr	r2, [pc, #532]	; (8005ae0 <LMZ_gesture_app_main+0x2a4>)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	f44f 7342 	mov.w	r3, #776	; 0x308
 80058d4:	461a      	mov	r2, r3
 80058d6:	f006 ff7c 	bl	800c7d2 <memcpy>
	}

	while (1)
	{
		// Manage command through UART
		if (UartComm_CmdReady)
 80058da:	4b82      	ldr	r3, [pc, #520]	; (8005ae4 <LMZ_gesture_app_main+0x2a8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <LMZ_gesture_app_main+0xb6>
		{
			SC_HandleCmd(UartComm_RXBuffer);
 80058e2:	4881      	ldr	r0, [pc, #516]	; (8005ae8 <LMZ_gesture_app_main+0x2ac>)
 80058e4:	f003 fc7c 	bl	80091e0 <SC_HandleCmd>
			UartComm_CmdReady = 0;
 80058e8:	4b7e      	ldr	r3, [pc, #504]	; (8005ae4 <LMZ_gesture_app_main+0x2a8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
			UartComm_Start(); // Restart RX
 80058ee:	f7fb fc47 	bl	8001180 <UartComm_Start>
		}

		// START //
		// All initializations are done after a start command: "enable"
		if (CommandData.start)
 80058f2:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d053      	beq.n	80059a2 <LMZ_gesture_app_main+0x166>
		{
			if (ranging == 1)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10c      	bne.n	800591a <LMZ_gesture_app_main+0xde>
			{
				MZ_TRACE("Sensor already started\n");
 8005900:	487b      	ldr	r0, [pc, #492]	; (8005af0 <LMZ_gesture_app_main+0x2b4>)
 8005902:	f006 fd8b 	bl	800c41c <puts>
 8005906:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	f006 fc41 	bl	800c194 <fflush>
				CommandData.start = 0;
 8005912:	4b76      	ldr	r3, [pc, #472]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
				continue;
 8005918:	e12a      	b.n	8005b70 <LMZ_gesture_app_main+0x334>
			}
			else
			{
				// Initialize the Gesture library
				status = gesture_library_init_configure();
 800591a:	f7ff fe5b 	bl	80055d4 <gesture_library_init_configure>
 800591e:	6138      	str	r0, [r7, #16]
				if (status != 0)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <LMZ_gesture_app_main+0xf6>
				{
					printf("gesture_library_configure failed : %d\n",status);
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	4872      	ldr	r0, [pc, #456]	; (8005af4 <LMZ_gesture_app_main+0x2b8>)
 800592a:	f006 fd09 	bl	800c340 <iprintf>
					return status;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	e11f      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
				}
			}

			// Configure VL53LMZ
			status = apps_layer_vl53lmz_Configure(&LMZDev, &Params);
 8005932:	4971      	ldr	r1, [pc, #452]	; (8005af8 <LMZ_gesture_app_main+0x2bc>)
 8005934:	4866      	ldr	r0, [pc, #408]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 8005936:	f002 ffad 	bl	8008894 <apps_layer_vl53lmz_Configure>
 800593a:	6138      	str	r0, [r7, #16]
			if (status != VL53LMZ_STATUS_OK)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <LMZ_gesture_app_main+0x124>
			{
				MZ_TRACE("ERROR at %s(%d) : VL53LMZ_Configure failed : %d\n",__func__, __LINE__,status);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f240 12d5 	movw	r2, #469	; 0x1d5
 8005948:	496c      	ldr	r1, [pc, #432]	; (8005afc <LMZ_gesture_app_main+0x2c0>)
 800594a:	486d      	ldr	r0, [pc, #436]	; (8005b00 <LMZ_gesture_app_main+0x2c4>)
 800594c:	f006 fcf8 	bl	800c340 <iprintf>
 8005950:	4b5c      	ldr	r3, [pc, #368]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f006 fc1c 	bl	800c194 <fflush>
				return status;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	e108      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
			}

			// Start ranging
			status = vl53lmz_start_ranging(&LMZDev);
 8005960:	485b      	ldr	r0, [pc, #364]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 8005962:	f001 fadd 	bl	8006f20 <vl53lmz_start_ranging>
 8005966:	4603      	mov	r3, r0
 8005968:	613b      	str	r3, [r7, #16]
			if (status != VL53LMZ_STATUS_OK)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00f      	beq.n	8005990 <LMZ_gesture_app_main+0x154>
			{
				MZ_TRACE("ERROR at %s(%d) : vl53lmz_start_ranging failed : %d\n",__func__, __LINE__,status);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005976:	4961      	ldr	r1, [pc, #388]	; (8005afc <LMZ_gesture_app_main+0x2c0>)
 8005978:	4862      	ldr	r0, [pc, #392]	; (8005b04 <LMZ_gesture_app_main+0x2c8>)
 800597a:	f006 fce1 	bl	800c340 <iprintf>
 800597e:	4b51      	ldr	r3, [pc, #324]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f006 fc05 	bl	800c194 <fflush>
				return -1;
 800598a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800598e:	e0f0      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
			}
			// Reset interrupt counter as interrupt line has toggled (twice) during sttof_init call
			IntrCount = 0;
 8005990:	4b5d      	ldr	r3, [pc, #372]	; (8005b08 <LMZ_gesture_app_main+0x2cc>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
			ranging = 1;
 8005996:	2301      	movs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
			CommandData.start = 0;
 800599a:	4b54      	ldr	r3, [pc, #336]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e027      	b.n	80059f2 <LMZ_gesture_app_main+0x1b6>
		}

		// STOP //
		// The stop command: "disable" stops the sensor (stop ranging)
		else if (CommandData.stop)
 80059a2:	4b52      	ldr	r3, [pc, #328]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d023      	beq.n	80059f2 <LMZ_gesture_app_main+0x1b6>
		{
			if (ranging == 0)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <LMZ_gesture_app_main+0x17c>
			{
				CommandData.stop = 0;
 80059b0:	4b4e      	ldr	r3, [pc, #312]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	605a      	str	r2, [r3, #4]
				continue;
 80059b6:	e0db      	b.n	8005b70 <LMZ_gesture_app_main+0x334>
			}
			status = vl53lmz_stop_ranging(&LMZDev);
 80059b8:	4845      	ldr	r0, [pc, #276]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 80059ba:	f001 facb 	bl	8006f54 <vl53lmz_stop_ranging>
 80059be:	4603      	mov	r3, r0
 80059c0:	613b      	str	r3, [r7, #16]
			if (status != VL53LMZ_STATUS_OK)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00f      	beq.n	80059e8 <LMZ_gesture_app_main+0x1ac>
			{
				MZ_TRACE("ERROR at %s(%d) : vl53lmz_stop_ranging failed : %d\n",__func__, __LINE__,status);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80059ce:	494b      	ldr	r1, [pc, #300]	; (8005afc <LMZ_gesture_app_main+0x2c0>)
 80059d0:	484e      	ldr	r0, [pc, #312]	; (8005b0c <LMZ_gesture_app_main+0x2d0>)
 80059d2:	f006 fcb5 	bl	800c340 <iprintf>
 80059d6:	4b3b      	ldr	r3, [pc, #236]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f006 fbd9 	bl	800c194 <fflush>
				break;
 80059e2:	bf00      	nop
				CommandData.get_caldata = 0;
			}
		}

	}
	return status;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	e0c4      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
			ranging = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
			CommandData.stop = 0;
 80059ec:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
		if (ranging)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d050      	beq.n	8005a9a <LMZ_gesture_app_main+0x25e>
			interrupt_status = wait_for_LMZ_interrupt(&LMZDev.platform);
 80059f8:	4835      	ldr	r0, [pc, #212]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 80059fa:	f000 f9cb 	bl	8005d94 <wait_for_LMZ_interrupt>
 80059fe:	60f8      	str	r0, [r7, #12]
			if (interrupt_status == 0)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80b3 	beq.w	8005b6e <LMZ_gesture_app_main+0x332>
			status = vl53lmz_get_ranging_data(&LMZDev, &RangingData);
 8005a08:	4941      	ldr	r1, [pc, #260]	; (8005b10 <LMZ_gesture_app_main+0x2d4>)
 8005a0a:	4831      	ldr	r0, [pc, #196]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 8005a0c:	f001 fb74 	bl	80070f8 <vl53lmz_get_ranging_data>
 8005a10:	4603      	mov	r3, r0
 8005a12:	613b      	str	r3, [r7, #16]
			if (status == 0)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d134      	bne.n	8005a84 <LMZ_gesture_app_main+0x248>
				SEN_CopyRangingData(&sensor_data, &RangingData);
 8005a1a:	493d      	ldr	r1, [pc, #244]	; (8005b10 <LMZ_gesture_app_main+0x2d4>)
 8005a1c:	483d      	ldr	r0, [pc, #244]	; (8005b14 <LMZ_gesture_app_main+0x2d8>)
 8005a1e:	f7ff fa69 	bl	8004ef4 <SEN_CopyRangingData>
				if (status != 0)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <LMZ_gesture_app_main+0x204>
					MZ_TRACE("SEN_CopyRangingData failed : %d\n",status);
 8005a28:	6939      	ldr	r1, [r7, #16]
 8005a2a:	483b      	ldr	r0, [pc, #236]	; (8005b18 <LMZ_gesture_app_main+0x2dc>)
 8005a2c:	f006 fc88 	bl	800c340 <iprintf>
 8005a30:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f006 fbac 	bl	800c194 <fflush>
					return status;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	e098      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
				status = GW_run(&gest_predictor, &hand_tracker, &sensor_data);
 8005a40:	4a34      	ldr	r2, [pc, #208]	; (8005b14 <LMZ_gesture_app_main+0x2d8>)
 8005a42:	4936      	ldr	r1, [pc, #216]	; (8005b1c <LMZ_gesture_app_main+0x2e0>)
 8005a44:	4836      	ldr	r0, [pc, #216]	; (8005b20 <LMZ_gesture_app_main+0x2e4>)
 8005a46:	f004 fba1 	bl	800a18c <GW_run>
 8005a4a:	6138      	str	r0, [r7, #16]
				if (status != 0)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <LMZ_gesture_app_main+0x22e>
					MZ_TRACE("GW_run failed : %d\n",status);
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	4833      	ldr	r0, [pc, #204]	; (8005b24 <LMZ_gesture_app_main+0x2e8>)
 8005a56:	f006 fc73 	bl	800c340 <iprintf>
 8005a5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f006 fb97 	bl	800c194 <fflush>
					return status;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	e083      	b.n	8005b72 <LMZ_gesture_app_main+0x336>
				if (Params.gesture_gui == 1) // gesture_gui is changed by the GUI, by default print_uart() is used
 8005a6a:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <LMZ_gesture_app_main+0x2bc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <LMZ_gesture_app_main+0x242>
					print_evk(sensor_data.timestamp_ms);
 8005a72:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <LMZ_gesture_app_main+0x2d8>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fba6 	bl	80051c8 <print_evk>
 8005a7c:	e72d      	b.n	80058da <LMZ_gesture_app_main+0x9e>
					print_uart();
 8005a7e:	f7ff facd 	bl	800501c <print_uart>
 8005a82:	e72a      	b.n	80058da <LMZ_gesture_app_main+0x9e>
				MZ_TRACE("Ranging Error : %d !\n",status);
 8005a84:	6939      	ldr	r1, [r7, #16]
 8005a86:	4828      	ldr	r0, [pc, #160]	; (8005b28 <LMZ_gesture_app_main+0x2ec>)
 8005a88:	f006 fc5a 	bl	800c340 <iprintf>
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <LMZ_gesture_app_main+0x288>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f006 fb7e 	bl	800c194 <fflush>
 8005a98:	e71f      	b.n	80058da <LMZ_gesture_app_main+0x9e>
			if (CommandData.calibrate)
 8005a9a:	4b14      	ldr	r3, [pc, #80]	; (8005aec <LMZ_gesture_app_main+0x2b0>)
 8005a9c:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d04c      	beq.n	8005b3e <LMZ_gesture_app_main+0x302>
				status = perform_calibration(&LMZDev);
 8005aa4:	480a      	ldr	r0, [pc, #40]	; (8005ad0 <LMZ_gesture_app_main+0x294>)
 8005aa6:	f002 ffa7 	bl	80089f8 <perform_calibration>
 8005aaa:	6138      	str	r0, [r7, #16]
				if (status != VL53LMZ_STATUS_OK)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03e      	beq.n	8005b30 <LMZ_gesture_app_main+0x2f4>
					uart_printf("perform_calibration failed : %d\n",status);
 8005ab2:	6939      	ldr	r1, [r7, #16]
 8005ab4:	481d      	ldr	r0, [pc, #116]	; (8005b2c <LMZ_gesture_app_main+0x2f0>)
 8005ab6:	f006 fc43 	bl	800c340 <iprintf>
 8005aba:	e03c      	b.n	8005b36 <LMZ_gesture_app_main+0x2fa>
 8005abc:	08012af8 	.word	0x08012af8
 8005ac0:	08012b00 	.word	0x08012b00
 8005ac4:	200003a4 	.word	0x200003a4
 8005ac8:	08012b24 	.word	0x08012b24
 8005acc:	08012b2c 	.word	0x08012b2c
 8005ad0:	200015f4 	.word	0x200015f4
 8005ad4:	08012b4c 	.word	0x08012b4c
 8005ad8:	08012b68 	.word	0x08012b68
 8005adc:	2000602c 	.word	0x2000602c
 8005ae0:	20006030 	.word	0x20006030
 8005ae4:	200015e8 	.word	0x200015e8
 8005ae8:	20000ddc 	.word	0x20000ddc
 8005aec:	20005894 	.word	0x20005894
 8005af0:	08012b84 	.word	0x08012b84
 8005af4:	08012b9c 	.word	0x08012b9c
 8005af8:	2000000c 	.word	0x2000000c
 8005afc:	08013550 	.word	0x08013550
 8005b00:	08012bc4 	.word	0x08012bc4
 8005b04:	08012bf8 	.word	0x08012bf8
 8005b08:	20003f14 	.word	0x20003f14
 8005b0c:	08012c30 	.word	0x08012c30
 8005b10:	200039c4 	.word	0x200039c4
 8005b14:	20005634 	.word	0x20005634
 8005b18:	08012c64 	.word	0x08012c64
 8005b1c:	20004e7c 	.word	0x20004e7c
 8005b20:	20003f1c 	.word	0x20003f1c
 8005b24:	08012c88 	.word	0x08012c88
 8005b28:	08012c9c 	.word	0x08012c9c
 8005b2c:	08012cb4 	.word	0x08012cb4
					uart_printf("perform_calibration succeeded");
 8005b30:	4812      	ldr	r0, [pc, #72]	; (8005b7c <LMZ_gesture_app_main+0x340>)
 8005b32:	f006 fc05 	bl	800c340 <iprintf>
				CommandData.calibrate = 0;
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <LMZ_gesture_app_main+0x344>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
			if (CommandData.get_caldata)
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <LMZ_gesture_app_main+0x344>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f43f aec9 	beq.w	80058da <LMZ_gesture_app_main+0x9e>
				status = get_calibration(&LMZDev);
 8005b48:	480e      	ldr	r0, [pc, #56]	; (8005b84 <LMZ_gesture_app_main+0x348>)
 8005b4a:	f002 ffa7 	bl	8008a9c <get_calibration>
 8005b4e:	6138      	str	r0, [r7, #16]
				if (status != VL53LMZ_STATUS_OK)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <LMZ_gesture_app_main+0x324>
					uart_printf("get_calibration failed : %d\n",status);
 8005b56:	6939      	ldr	r1, [r7, #16]
 8005b58:	480b      	ldr	r0, [pc, #44]	; (8005b88 <LMZ_gesture_app_main+0x34c>)
 8005b5a:	f006 fbf1 	bl	800c340 <iprintf>
 8005b5e:	e002      	b.n	8005b66 <LMZ_gesture_app_main+0x32a>
					uart_printf("get_calibration succeeded\n");
 8005b60:	480a      	ldr	r0, [pc, #40]	; (8005b8c <LMZ_gesture_app_main+0x350>)
 8005b62:	f006 fc5b 	bl	800c41c <puts>
				CommandData.get_caldata = 0;
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <LMZ_gesture_app_main+0x344>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	e6b5      	b.n	80058da <LMZ_gesture_app_main+0x9e>
				continue;
 8005b6e:	bf00      	nop
		if (UartComm_CmdReady)
 8005b70:	e6b3      	b.n	80058da <LMZ_gesture_app_main+0x9e>
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08012cd8 	.word	0x08012cd8
 8005b80:	20005894 	.word	0x20005894
 8005b84:	200015f4 	.word	0x200015f4
 8005b88:	08012cf8 	.word	0x08012cf8
 8005b8c:	08012d18 	.word	0x08012d18

08005b90 <LMZ_platform_init>:

extern I2C_HandleTypeDef 	hi2c1;
extern volatile int IntrCount;

int LMZ_platform_init(VL53LMZ_Platform	*p_platform)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]

	p_platform->address = 0x52;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2252      	movs	r2, #82	; 0x52
 8005b9c:	801a      	strh	r2, [r3, #0]
	return 0;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <RdByte>:

uint8_t RdByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8005bbe:	897b      	ldrh	r3, [r7, #10]
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8819      	ldrh	r1, [r3, #0]
 8005bd2:	f107 0214 	add.w	r2, r7, #20
 8005bd6:	2364      	movs	r3, #100	; 0x64
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2302      	movs	r3, #2
 8005bdc:	480c      	ldr	r0, [pc, #48]	; (8005c10 <RdByte+0x64>)
 8005bde:	f7fc fbd1 	bl	8002384 <HAL_I2C_Master_Transmit>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8819      	ldrh	r1, [r3, #0]
 8005bea:	f107 0210 	add.w	r2, r7, #16
 8005bee:	2364      	movs	r3, #100	; 0x64
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4806      	ldr	r0, [pc, #24]	; (8005c10 <RdByte+0x64>)
 8005bf6:	f7fc fcc3 	bl	8002580 <HAL_I2C_Master_Receive>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8005bfe:	7c3a      	ldrb	r2, [r7, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");
	return status;
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000544 	.word	0x20000544

08005c14 <WrByte>:

uint8_t WrByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
 8005c20:	4613      	mov	r3, r2
 8005c22:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8005c32:	887b      	ldrh	r3, [r7, #2]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8005c38:	787b      	ldrb	r3, [r7, #1]
 8005c3a:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 3, 100);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8819      	ldrh	r1, [r3, #0]
 8005c40:	f107 020c 	add.w	r2, r7, #12
 8005c44:	2364      	movs	r3, #100	; 0x64
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2303      	movs	r3, #3
 8005c4a:	4805      	ldr	r0, [pc, #20]	; (8005c60 <WrByte+0x4c>)
 8005c4c:	f7fc fb9a 	bl	8002384 <HAL_I2C_Master_Transmit>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
	//uart_printf("write 1 byte\n");
	return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000544 	.word	0x20000544

08005c64 <WrMulti>:
uint8_t WrMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	460b      	mov	r3, r1
 8005c72:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8819      	ldrh	r1, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	897a      	ldrh	r2, [r7, #10]
 8005c7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c82:	9002      	str	r0, [sp, #8]
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2310      	movs	r3, #16
 8005c8c:	4804      	ldr	r0, [pc, #16]	; (8005ca0 <WrMulti+0x3c>)
 8005c8e:	f7fc fe9d 	bl	80029cc <HAL_I2C_Mem_Write>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000544 	.word	0x20000544

08005ca4 <RdMulti>:
uint8_t RdMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8005cb4:	897b      	ldrh	r3, [r7, #10]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 10);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8819      	ldrh	r1, [r3, #0]
 8005cc8:	f107 0214 	add.w	r2, r7, #20
 8005ccc:	230a      	movs	r3, #10
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	480d      	ldr	r0, [pc, #52]	; (8005d08 <RdMulti+0x64>)
 8005cd4:	f7fc fb56 	bl	8002384 <HAL_I2C_Master_Transmit>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 400);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8819      	ldrh	r1, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ce8:	9200      	str	r2, [sp, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4806      	ldr	r0, [pc, #24]	; (8005d08 <RdMulti+0x64>)
 8005cee:	f7fc fc47 	bl	8002580 <HAL_I2C_Master_Receive>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	75fb      	strb	r3, [r7, #23]
    //uart_printf("read %d bytes\n",size);

	return status;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000544 	.word	0x20000544

08005d0c <SwapBuffer>:


void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e021      	b.n	8005d62 <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	440b      	add	r3, r1
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3302      	adds	r3, #2
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	440b      	add	r3, r1
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	3203      	adds	r2, #3
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	4313      	orrs	r3, r2
		tmp = (
 8005d50:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3d9      	bcc.n	8005d1e <SwapBuffer+0x12>
	}
}
 8005d6a:	bf00      	nop
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <WaitMs>:

uint8_t WaitMs(
		VL53LMZ_Platform *p_platform,
		uint32_t TimeMs)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8005d82:	6838      	ldr	r0, [r7, #0]
 8005d84:	f7fb fe3c 	bl	8001a00 <HAL_Delay>
	return 0;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <wait_for_LMZ_interrupt>:

int wait_for_LMZ_interrupt(VL53LMZ_Platform *p_dev)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	(void)p_dev;

	__WFI(); // Wait For Interrupt
 8005d9c:	bf30      	wfi
	if(IntrCount != 0) {
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <wait_for_LMZ_interrupt+0x2c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <wait_for_LMZ_interrupt+0x1c>
		IntrCount = 0;
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <wait_for_LMZ_interrupt+0x2c>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
		return 1;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <wait_for_LMZ_interrupt+0x1e>
	}

	return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20003f14 	.word	0x20003f14

08005dc4 <SB_TmpBuffer>:

// Returns a temporary storage big enough to dump the parameters into (about 700 bytes so far)
static char SB_PrivateBuffer[1024];
char* SB_TmpBuffer(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
	return SB_PrivateBuffer;
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <SB_TmpBuffer+0x10>)
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	20005bac 	.word	0x20005bac

08005dd8 <_vl53lmz_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	70fb      	strb	r3, [r7, #3]
 8005dea:	460b      	mov	r3, r1
 8005dec:	70bb      	strb	r3, [r7, #2]
 8005dee:	4613      	mov	r3, r2
 8005df0:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8005dfa:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), address,
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	8839      	ldrh	r1, [r7, #0]
 8005e06:	f7ff ff4d 	bl	8005ca4 <RdMulti>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	210a      	movs	r1, #10
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ffad 	bl	8005d78 <WaitMs>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	461a      	mov	r2, r3
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	2bc7      	cmp	r3, #199	; 0xc7
 8005e2c:	d904      	bls.n	8005e38 <_vl53lmz_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53LMZ_STATUS_TIMEOUT_ERROR;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
			break;
 8005e36:	e01a      	b.n	8005e6e <_vl53lmz_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d909      	bls.n	8005e52 <_vl53lmz_poll_for_answer+0x7a>
						 && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8005e44:	2b7e      	cmp	r3, #126	; 0x7e
 8005e46:	d904      	bls.n	8005e52 <_vl53lmz_poll_for_answer+0x7a>
		{
			status |= VL53LMZ_MCU_ERROR;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005e4e:	73fb      	strb	r3, [r7, #15]
			break;
 8005e50:	e00d      	b.n	8005e6e <_vl53lmz_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8005e52:	7bbb      	ldrb	r3, [r7, #14]
 8005e54:	3301      	adds	r3, #1
 8005e56:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8005e58:	78bb      	ldrb	r3, [r7, #2]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8005e62:	7e3b      	ldrb	r3, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	7f3a      	ldrb	r2, [r7, #28]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d1c5      	bne.n	8005dfa <_vl53lmz_poll_for_answer+0x22>

	return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <_vl53lmz_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53lmz_poll_for_mcu_boot(
			  VL53LMZ_Configuration		 *p_dev)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53LMZ_STATUS_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f107 020b 	add.w	r2, r7, #11
 8005e8e:	2106      	movs	r1, #6
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fe8b 	bl	8005bac <RdByte>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	b25b      	sxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da10      	bge.n	8005eca <_vl53lmz_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f107 020a 	add.w	r2, r7, #10
 8005eae:	2107      	movs	r1, #7
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fe7b 	bl	8005bac <RdByte>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	73fb      	strb	r3, [r7, #15]
			if(go2_status1 & (uint8_t)0x01)
 8005ec0:	7abb      	ldrb	r3, [r7, #10]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d111      	bne.n	8005eee <_vl53lmz_poll_for_mcu_boot+0x76>
			{
				status |= VL53LMZ_STATUS_OK;
				break;
			}
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff ff52 	bl	8005d78 <WaitMs>
		timeout++;
 8005ed4:	89bb      	ldrh	r3, [r7, #12]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <_vl53lmz_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8005ee4:	89bb      	ldrh	r3, [r7, #12]
 8005ee6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005eea:	d3cd      	bcc.n	8005e88 <_vl53lmz_poll_for_mcu_boot+0x10>
 8005eec:	e002      	b.n	8005ef4 <_vl53lmz_poll_for_mcu_boot+0x7c>
				break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <_vl53lmz_poll_for_mcu_boot+0x7c>
			break;
 8005ef2:	bf00      	nop

   return status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <_vl53lmz_send_offset_data>:
 */

static uint8_t _vl53lmz_send_offset_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t						resolution)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b0ea      	sub	sp, #424	; 0x1a8
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005f0e:	6018      	str	r0, [r3, #0]
 8005f10:	460a      	mov	r2, r1
 8005f12:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f16:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8005f1a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8005f22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005f2a:	4ad9      	ldr	r2, [pc, #868]	; (8006290 <_vl53lmz_send_offset_data+0x390>)
 8005f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f30:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8005f34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f38:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005f3c:	4ad5      	ldr	r2, [pc, #852]	; (8006294 <_vl53lmz_send_offset_data+0x394>)
 8005f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f42:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8005f46:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f203 5004 	addw	r0, r3, #1284	; 0x504
			   p_dev->offset_data, VL53LMZ_OFFSET_BUFFER_SIZE);
 8005f54:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
	(void)memcpy(p_dev->temp_buffer,
 8005f60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005f64:	4619      	mov	r1, r3
 8005f66:	f006 fc34 	bl	800c7d2 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4){
 8005f6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f6e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	f040 8122 	bne.w	80061be <_vl53lmz_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8005f7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f7e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f203 5214 	addw	r2, r3, #1300	; 0x514
 8005f88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005f90:	cb03      	ldmia	r3!, {r0, r1}
 8005f92:	6010      	str	r0, [r2, #0]
 8005f94:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 8005f96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005f9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005fa4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff feaf 	bl	8005d0c <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8005fae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005fb2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
 8005fbc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f006 fc04 	bl	800c7d2 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8005fca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005fce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f203 6144 	addw	r1, r3, #1604	; 0x644
 8005fd8:	f107 0318 	add.w	r3, r7, #24
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f006 fbf7 	bl	800c7d2 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8005fea:	e0ac      	b.n	8006146 <_vl53lmz_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8005ff2:	e09c      	b.n	800612e <_vl53lmz_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8005ff4:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8005ff8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4413      	add	r3, r2
 8006000:	005a      	lsls	r2, r3, #1
 8006002:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800600e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8006012:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006026:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800602a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 800602c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8006030:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	3304      	adds	r3, #4
 800603a:	0059      	lsls	r1, r3, #1
 800603c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006048:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800604a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800604e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	440b      	add	r3, r1
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f103 0109 	add.w	r1, r3, #9
 800605c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006068:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800606a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800606e:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8006072:	0092      	lsls	r2, r2, #2
 8006074:	440a      	add	r2, r1
								  /(uint32_t)4;
 8006076:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8006078:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8006084:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8006088:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	005a      	lsls	r2, r3, #1
 8006092:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006096:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800609a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800609e:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80060a0:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80060a4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4413      	add	r3, r2
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80060b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80060b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80060bc:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80060be:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80060c2:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80060c6:	00d2      	lsls	r2, r2, #3
 80060c8:	440a      	add	r2, r1
 80060ca:	3204      	adds	r2, #4
 80060cc:	0051      	lsls	r1, r2, #1
 80060ce:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80060d2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80060d6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80060da:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80060dc:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80060e0:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80060e4:	00d2      	lsls	r2, r2, #3
 80060e6:	440a      	add	r2, r1
 80060e8:	0052      	lsls	r2, r2, #1
 80060ea:	f102 0109 	add.w	r1, r2, #9
 80060ee:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80060f2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80060f6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80060fa:	4413      	add	r3, r2
								  /(int16_t)4;
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da00      	bge.n	8006102 <_vl53lmz_send_offset_data+0x202>
 8006100:	3303      	adds	r3, #3
 8006102:	109b      	asrs	r3, r3, #2
 8006104:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8006106:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800610a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	b209      	sxth	r1, r1
 8006114:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006118:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800611c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8006120:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	3301      	adds	r3, #1
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800612e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006132:	2b03      	cmp	r3, #3
 8006134:	f77f af5e 	ble.w	8005ff4 <_vl53lmz_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8006138:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800613c:	b2db      	uxtb	r3, r3
 800613e:	3301      	adds	r3, #1
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8006146:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800614a:	2b03      	cmp	r3, #3
 800614c:	f77f af4e 	ble.w	8005fec <_vl53lmz_send_offset_data+0xec>
			}
		}
		(void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8006150:	f107 0318 	add.w	r3, r7, #24
 8006154:	3320      	adds	r3, #32
 8006156:	2260      	movs	r2, #96	; 0x60
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f006 fa8c 	bl	800c678 <memset>
		(void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8006160:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006164:	3340      	adds	r3, #64	; 0x40
 8006166:	22c0      	movs	r2, #192	; 0xc0
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f006 fa84 	bl	800c678 <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8006170:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006174:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800617e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8006182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006186:	4618      	mov	r0, r3
 8006188:	f006 fb23 	bl	800c7d2 <memcpy>
					signal_grid, sizeof(signal_grid));
		(void)memcpy(&(p_dev->temp_buffer[0x140]),
 800618c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006190:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800619a:	f107 0118 	add.w	r1, r7, #24
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	4618      	mov	r0, r3
 80061a2:	f006 fb16 	bl	800c7d2 <memcpy>
					range_grid, sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 80061a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80061aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80061b4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fda7 	bl	8005d0c <SwapBuffer>
	}

	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80061be:	2300      	movs	r3, #0
 80061c0:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80061c4:	e01b      	b.n	80061fe <_vl53lmz_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80061c6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80061ca:	f103 0208 	add.w	r2, r3, #8
 80061ce:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80061d2:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 80061d6:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 80061da:	6809      	ldr	r1, [r1, #0]
 80061dc:	440a      	add	r2, r1
 80061de:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 80061e2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80061e6:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	460a      	mov	r2, r1
 80061f0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80061f4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80061fe:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8006202:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8006206:	d3de      	bcc.n	80061c6 <_vl53lmz_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8006208:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800620c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f203 62e4 	addw	r2, r3, #1764	; 0x6e4
 8006216:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800621a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800621e:	cb03      	ldmia	r3!, {r0, r1}
 8006220:	6010      	str	r0, [r2, #0]
 8006222:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8006224:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006228:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006232:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f203 5204 	addw	r2, r3, #1284	; 0x504
 800623c:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8006240:	f642 6118 	movw	r1, #11800	; 0x2e18
 8006244:	f7ff fd0e 	bl	8005c64 <WrMulti>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8006250:	4313      	orrs	r3, r2
 8006252:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006256:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800625a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800625e:	2303      	movs	r3, #3
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	23ff      	movs	r3, #255	; 0xff
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800626a:	2201      	movs	r2, #1
 800626c:	2104      	movs	r1, #4
 800626e:	6800      	ldr	r0, [r0, #0]
 8006270:	f7ff fdb2 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800627c:	4313      	orrs	r3, r2
 800627e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8006282:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8006286:	4618      	mov	r0, r3
 8006288:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	08012d34 	.word	0x08012d34
 8006294:	08012d3c 	.word	0x08012d3c

08006298 <_vl53lmz_send_xtalk_data>:
 */

static uint8_t _vl53lmz_send_xtalk_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				resolution)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b0ca      	sub	sp, #296	; 0x128
 800629c:	af02      	add	r7, sp, #8
 800629e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80062a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062a6:	6018      	str	r0, [r3, #0]
 80062a8:	460a      	mov	r2, r1
 80062aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80062ae:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80062b2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80062ba:	4a9a      	ldr	r2, [pc, #616]	; (8006524 <_vl53lmz_send_xtalk_data+0x28c>)
 80062bc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80062c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062c4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80062c8:	4a97      	ldr	r2, [pc, #604]	; (8006528 <_vl53lmz_send_xtalk_data+0x290>)
 80062ca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80062ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80062d6:	4b95      	ldr	r3, [pc, #596]	; (800652c <_vl53lmz_send_xtalk_data+0x294>)
 80062d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80062dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80062e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f203 5004 	addw	r0, r3, #1284	; 0x504
 80062ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80062ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80062f8:	f44f 7242 	mov.w	r2, #776	; 0x308
 80062fc:	4619      	mov	r1, r3
 80062fe:	f006 fa68 	bl	800c7d2 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4)
 8006302:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006306:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b10      	cmp	r3, #16
 800630e:	f040 80d2 	bne.w	80064b6 <_vl53lmz_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8006312:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006316:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8006320:	461a      	mov	r2, r3
 8006322:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006326:	cb03      	ldmia	r3!, {r0, r1}
 8006328:	6010      	str	r0, [r2, #0]
 800632a:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 800632c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006330:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800633a:	461a      	mov	r2, r3
 800633c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8006340:	cb03      	ldmia	r3!, {r0, r1}
 8006342:	6010      	str	r0, [r2, #0]
 8006344:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8006346:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800634a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8006354:	f44f 7142 	mov.w	r1, #776	; 0x308
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fcd7 	bl	8005d0c <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800635e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006362:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006374:	4618      	mov	r0, r3
 8006376:	f006 fa2c 	bl	800c7d2 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800637a:	2300      	movs	r3, #0
 800637c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8006380:	e05d      	b.n	800643e <_vl53lmz_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8006388:	e04e      	b.n	8006428 <_vl53lmz_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800638a:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 800638e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4413      	add	r3, r2
 8006396:	005a      	lsls	r2, r3, #1
 8006398:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800639c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80063a4:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80063a8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80063b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063c0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80063c2:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80063c6:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	440b      	add	r3, r1
 80063ce:	3304      	adds	r3, #4
 80063d0:	0059      	lsls	r1, r3, #1
 80063d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80063d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063de:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80063e0:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80063e4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	440b      	add	r3, r1
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	f103 0109 	add.w	r1, r3, #9
 80063f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80063f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063fe:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8006400:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8006404:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8006408:	0092      	lsls	r2, r2, #2
 800640a:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800640c:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800640e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006412:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800641a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800641e:	b2db      	uxtb	r3, r3
 8006420:	3301      	adds	r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8006428:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800642c:	2b03      	cmp	r3, #3
 800642e:	ddac      	ble.n	800638a <_vl53lmz_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8006430:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8006434:	b2db      	uxtb	r3, r3
 8006436:	3301      	adds	r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800643e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8006442:	2b03      	cmp	r3, #3
 8006444:	dd9d      	ble.n	8006382 <_vl53lmz_send_xtalk_data+0xea>
			}
		}
		(void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	3340      	adds	r3, #64	; 0x40
 800644c:	22c0      	movs	r2, #192	; 0xc0
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f006 f911 	bl	800c678 <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x34]),
 8006456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800645a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800646c:	4618      	mov	r0, r3
 800646e:	f006 f9b0 	bl	800c7d2 <memcpy>
				  signal_grid, sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8006472:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006476:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8006480:	f44f 7142 	mov.w	r1, #776	; 0x308
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fc41 	bl	8005d0c <SwapBuffer>
		(void)memcpy(&(p_dev->temp_buffer[0x134]),
 800648a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800648e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8006498:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800649c:	601a      	str	r2, [r3, #0]
		profile_4x4, sizeof(profile_4x4));
		(void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800649e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80064a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80064ac:	2204      	movs	r2, #4
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f006 f8e1 	bl	800c678 <memset>
						 (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80064b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80064ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064be:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80064c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80064c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80064ce:	f44f 7342 	mov.w	r3, #776	; 0x308
 80064d2:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 80064d6:	f7ff fbc5 	bl	8005c64 <WrMulti>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 80064e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80064ec:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80064f0:	2303      	movs	r3, #3
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	23ff      	movs	r3, #255	; 0xff
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80064fc:	2201      	movs	r2, #1
 80064fe:	2104      	movs	r1, #4
 8006500:	6800      	ldr	r0, [r0, #0]
 8006502:	f7ff fc69 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8006506:	4603      	mov	r3, r0
 8006508:	461a      	mov	r2, r3
 800650a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800650e:	4313      	orrs	r3, r2
 8006510:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8006514:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8006518:	4618      	mov	r0, r3
 800651a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	08012d44 	.word	0x08012d44
 8006528:	08012d4c 	.word	0x08012d4c
 800652c:	0001fca0 	.word	0x0001fca0

08006530 <vl53lmz_init>:
	return status;
}

uint8_t vl53lmz_init(
		VL53LMZ_Configuration		*p_dev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53LMZ_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800653c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006540:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8006542:	2301      	movs	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800654c:	2200      	movs	r2, #0
 800654e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	/* method below copied from vl52l5cx_is_alive() */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fb5a 	bl	8005c14 <WrByte>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	4313      	orrs	r3, r2
 8006568:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0, &(p_dev->device_id));
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8006572:	330d      	adds	r3, #13
 8006574:	461a      	mov	r2, r3
 8006576:	2100      	movs	r1, #0
 8006578:	f7ff fb18 	bl	8005bac <RdByte>
 800657c:	4603      	mov	r3, r0
 800657e:	461a      	mov	r2, r3
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	4313      	orrs	r3, r2
 8006584:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 1, &(p_dev->revision_id));
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800658e:	330e      	adds	r3, #14
 8006590:	461a      	mov	r2, r3
 8006592:	2101      	movs	r1, #1
 8006594:	f7ff fb0a 	bl	8005bac <RdByte>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	4313      	orrs	r3, r2
 80065a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fb32 	bl	8005c14 <WrByte>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	75fb      	strb	r3, [r7, #23]
	if((p_dev->device_id!=(uint8_t)0xF0)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065c0:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 80065c4:	2bf0      	cmp	r3, #240	; 0xf0
 80065c6:	d114      	bne.n	80065f2 <vl53lmz_init+0xc2>
		|| ((p_dev->revision_id!=(uint8_t)REVISION_CUT11) && (p_dev->revision_id!=(uint8_t)REVISION_CUT12) && (p_dev->revision_id!=(uint8_t)REVISION_L8))) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065ce:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d011      	beq.n	80065fa <vl53lmz_init+0xca>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065dc:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d00a      	beq.n	80065fa <vl53lmz_init+0xca>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065ea:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80065ee:	2b0c      	cmp	r3, #12
 80065f0:	d003      	beq.n	80065fa <vl53lmz_init+0xca>
		/* unexpected combination of device and revision IDs */
		status = VL53LMZ_STATUS_UNKNOWN_DEVICE;
 80065f2:	2304      	movs	r3, #4
 80065f4:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80065f6:	f000 bc8c 	b.w	8006f12 <vl53lmz_init+0x9e2>
	}

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fb06 	bl	8005c14 <WrByte>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	4313      	orrs	r3, r2
 8006610:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2204      	movs	r2, #4
 8006616:	2109      	movs	r1, #9
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fafb 	bl	8005c14 <WrByte>
 800661e:	4603      	mov	r3, r0
 8006620:	461a      	mov	r2, r3
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	4313      	orrs	r3, r2
 8006626:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2240      	movs	r2, #64	; 0x40
 800662c:	210f      	movs	r1, #15
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff faf0 	bl	8005c14 <WrByte>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	4313      	orrs	r3, r2
 800663c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2203      	movs	r2, #3
 8006642:	210a      	movs	r1, #10
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fae5 	bl	8005c14 <WrByte>
 800664a:	4603      	mov	r3, r0
 800664c:	461a      	mov	r2, r3
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	4313      	orrs	r3, r2
 8006652:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f107 0216 	add.w	r2, r7, #22
 800665a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff faa4 	bl	8005bac <RdByte>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	4313      	orrs	r3, r2
 800666c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	210c      	movs	r1, #12
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff facd 	bl	8005c14 <WrByte>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	4313      	orrs	r3, r2
 8006682:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f240 1101 	movw	r1, #257	; 0x101
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fac1 	bl	8005c14 <WrByte>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	4313      	orrs	r3, r2
 800669a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fab5 	bl	8005c14 <WrByte>
 80066aa:	4603      	mov	r3, r0
 80066ac:	461a      	mov	r2, r3
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff faa9 	bl	8005c14 <WrByte>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f244 0102 	movw	r1, #16386	; 0x4002
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fa9d 	bl	8005c14 <WrByte>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f244 0102 	movw	r1, #16386	; 0x4002
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fa91 	bl	8005c14 <WrByte>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2203      	movs	r2, #3
 8006700:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fa85 	bl	8005c14 <WrByte>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	4313      	orrs	r3, r2
 8006712:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f240 1103 	movw	r1, #259	; 0x103
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fa79 	bl	8005c14 <WrByte>
 8006722:	4603      	mov	r3, r0
 8006724:	461a      	mov	r2, r3
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	4313      	orrs	r3, r2
 800672a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	210c      	movs	r1, #12
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fa6e 	bl	8005c14 <WrByte>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	4313      	orrs	r3, r2
 8006740:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2243      	movs	r2, #67	; 0x43
 8006746:	210f      	movs	r1, #15
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fa63 	bl	8005c14 <WrByte>
 800674e:	4603      	mov	r3, r0
 8006750:	461a      	mov	r2, r3
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	4313      	orrs	r3, r2
 8006756:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2101      	movs	r1, #1
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fb0b 	bl	8005d78 <WaitMs>
 8006762:	4603      	mov	r3, r0
 8006764:	461a      	mov	r2, r3
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	4313      	orrs	r3, r2
 800676a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2240      	movs	r2, #64	; 0x40
 8006770:	210f      	movs	r1, #15
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff fa4e 	bl	8005c14 <WrByte>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	4313      	orrs	r3, r2
 8006780:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	210a      	movs	r1, #10
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fa43 	bl	8005c14 <WrByte>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	4313      	orrs	r3, r2
 8006796:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2164      	movs	r1, #100	; 0x64
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff faeb 	bl	8005d78 <WaitMs>
 80067a2:	4603      	mov	r3, r0
 80067a4:	461a      	mov	r2, r3
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fa2d 	bl	8005c14 <WrByte>
 80067ba:	4603      	mov	r3, r0
 80067bc:	461a      	mov	r2, r3
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80067c4:	2301      	movs	r3, #1
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	23ff      	movs	r3, #255	; 0xff
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2306      	movs	r3, #6
 80067ce:	2200      	movs	r2, #0
 80067d0:	2101      	movs	r1, #1
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fb00 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	4313      	orrs	r3, r2
 80067e0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 838f 	bne.w	8006f08 <vl53lmz_init+0x9d8>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	210e      	movs	r1, #14
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fa0f 	bl	8005c14 <WrByte>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006806:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d126      	bne.n	800685c <vl53lmz_init+0x32c>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff f9fc 	bl	8005c14 <WrByte>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	4313      	orrs	r3, r2
 8006824:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	2106      	movs	r1, #6
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff f9f1 	bl	8005c14 <WrByte>
 8006832:	4603      	mov	r3, r0
 8006834:	461a      	mov	r2, r3
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	4313      	orrs	r3, r2
 800683a:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 800683c:	2304      	movs	r3, #4
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	23ff      	movs	r3, #255	; 0xff
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2321      	movs	r3, #33	; 0x21
 8006846:	2200      	movs	r2, #0
 8006848:	2101      	movs	r1, #1
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fac4 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	4313      	orrs	r3, r2
 8006858:	75fb      	strb	r3, [r7, #23]
 800685a:	e031      	b.n	80068c0 <vl53lmz_init+0x390>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff f9d5 	bl	8005c14 <WrByte>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	4313      	orrs	r3, r2
 8006872:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	220d      	movs	r2, #13
 8006878:	2103      	movs	r1, #3
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff f9ca 	bl	8005c14 <WrByte>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	4313      	orrs	r3, r2
 8006888:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff f9be 	bl	8005c14 <WrByte>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	4313      	orrs	r3, r2
 80068a0:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80068a2:	2310      	movs	r3, #16
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	2310      	movs	r3, #16
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2321      	movs	r3, #33	; 0x21
 80068ac:	2200      	movs	r2, #0
 80068ae:	2101      	movs	r1, #1
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fa91 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	4313      	orrs	r3, r2
 80068be:	75fb      	strb	r3, [r7, #23]
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f9a3 	bl	8005c14 <WrByte>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f107 0216 	add.w	r2, r7, #22
 80068de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff f962 	bl	8005bac <RdByte>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	210c      	movs	r1, #12
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff f98b 	bl	8005c14 <WrByte>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	7dfb      	ldrb	r3, [r7, #23]
 8006904:	4313      	orrs	r3, r2
 8006906:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff f97f 	bl	8005c14 <WrByte>
 8006916:	4603      	mov	r3, r0
 8006918:	461a      	mov	r2, r3
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	4313      	orrs	r3, r2
 800691e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f240 1101 	movw	r1, #257	; 0x101
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f973 	bl	8005c14 <WrByte>
 800692e:	4603      	mov	r3, r0
 8006930:	461a      	mov	r2, r3
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	4313      	orrs	r3, r2
 8006936:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff f967 	bl	8005c14 <WrByte>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	4313      	orrs	r3, r2
 800694e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff f95b 	bl	8005c14 <WrByte>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	4313      	orrs	r3, r2
 8006966:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f244 0102 	movw	r1, #16386	; 0x4002
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff f94f 	bl	8005c14 <WrByte>
 8006976:	4603      	mov	r3, r0
 8006978:	461a      	mov	r2, r3
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	4313      	orrs	r3, r2
 800697e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f244 0102 	movw	r1, #16386	; 0x4002
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff f943 	bl	8005c14 <WrByte>
 800698e:	4603      	mov	r3, r0
 8006990:	461a      	mov	r2, r3
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	4313      	orrs	r3, r2
 8006996:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2203      	movs	r2, #3
 800699c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff f937 	bl	8005c14 <WrByte>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f240 1103 	movw	r1, #259	; 0x103
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff f92b 	bl	8005c14 <WrByte>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f244 010f 	movw	r1, #16399	; 0x400f
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff f91f 	bl	8005c14 <WrByte>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	4313      	orrs	r3, r2
 80069de:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2243      	movs	r2, #67	; 0x43
 80069e4:	f240 211a 	movw	r1, #538	; 0x21a
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff f913 	bl	8005c14 <WrByte>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2203      	movs	r2, #3
 80069fc:	f240 211a 	movw	r1, #538	; 0x21a
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff f907 	bl	8005c14 <WrByte>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f240 211a 	movw	r1, #538	; 0x21a
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff f8fb 	bl	8005c14 <WrByte>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461a      	mov	r2, r3
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f240 211a 	movw	r1, #538	; 0x21a
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff f8ef 	bl	8005c14 <WrByte>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f240 2119 	movw	r1, #537	; 0x219
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff f8e3 	bl	8005c14 <WrByte>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f240 211b 	movw	r1, #539	; 0x21b
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff f8d7 	bl	8005c14 <WrByte>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff f8cb 	bl	8005c14 <WrByte>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f107 0216 	add.w	r2, r7, #22
 8006a8e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff f88a 	bl	8005bac <RdByte>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f8b2 	bl	8005c14 <WrByte>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2207      	movs	r2, #7
 8006abe:	2120      	movs	r1, #32
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff f8a7 	bl	8005c14 <WrByte>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2206      	movs	r2, #6
 8006ad4:	2120      	movs	r1, #32
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff f89c 	bl	8005c14 <WrByte>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53LMZ */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2209      	movs	r2, #9
 8006aea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff f890 	bl	8005c14 <WrByte>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b04:	4adc      	ldr	r2, [pc, #880]	; (8006e78 <vl53lmz_init+0x948>)
 8006b06:	2100      	movs	r1, #0
 8006b08:	f7ff f8ac 	bl	8005c64 <WrMulti>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220a      	movs	r2, #10
 8006b1a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff f878 	bl	8005c14 <WrByte>
 8006b24:	4603      	mov	r3, r0
 8006b26:	461a      	mov	r2, r3
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b34:	4ad1      	ldr	r2, [pc, #836]	; (8006e7c <vl53lmz_init+0x94c>)
 8006b36:	2100      	movs	r1, #0
 8006b38:	f7ff f894 	bl	8005c64 <WrMulti>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	461a      	mov	r2, r3
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	220b      	movs	r2, #11
 8006b4a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff f860 	bl	8005c14 <WrByte>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8006b64:	4ac6      	ldr	r2, [pc, #792]	; (8006e80 <vl53lmz_init+0x950>)
 8006b66:	2100      	movs	r1, #0
 8006b68:	f7ff f87c 	bl	8005c64 <WrMulti>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	461a      	mov	r2, r3
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f848 	bl	8005c14 <WrByte>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b94:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8006b98:	2b0c      	cmp	r3, #12
 8006b9a:	d121      	bne.n	8006be0 <vl53lmz_init+0x6b0>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff f835 	bl	8005c14 <WrByte>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	2106      	movs	r1, #6
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff f82a 	bl	8005c14 <WrByte>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	75fb      	strb	r3, [r7, #23]
		status |= WaitMs(&(p_dev->platform), 5);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2105      	movs	r1, #5
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff f8d2 	bl	8005d78 <WaitMs>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	75fb      	strb	r3, [r7, #23]
 8006bde:	e031      	b.n	8006c44 <vl53lmz_init+0x714>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f813 	bl	8005c14 <WrByte>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	220d      	movs	r2, #13
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff f808 	bl	8005c14 <WrByte>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fffc 	bl	8005c14 <WrByte>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8006c26:	2310      	movs	r3, #16
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	2310      	movs	r3, #16
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	2321      	movs	r3, #33	; 0x21
 8006c30:	2200      	movs	r2, #0
 8006c32:	2101      	movs	r1, #1
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff f8cf 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	75fb      	strb	r3, [r7, #23]
	}
	if(status != (uint8_t)0) {
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 8160 	bne.w	8006f0c <vl53lmz_init+0x9dc>
		goto exit;
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe ffdd 	bl	8005c14 <WrByte>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f107 0216 	add.w	r2, r7, #22
 8006c6a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe ff9c 	bl	8005bac <RdByte>
 8006c74:	4603      	mov	r3, r0
 8006c76:	461a      	mov	r2, r3
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	210c      	movs	r1, #12
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe ffc5 	bl	8005c14 <WrByte>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe ffb9 	bl	8005c14 <WrByte>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe ffad 	bl	8005c14 <WrByte>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f240 1115 	movw	r1, #277	; 0x115
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe ffa1 	bl	8005c14 <WrByte>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2242      	movs	r2, #66	; 0x42
 8006ce0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fe ff95 	bl	8005c14 <WrByte>
 8006cea:	4603      	mov	r3, r0
 8006cec:	461a      	mov	r2, r3
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f240 1117 	movw	r1, #279	; 0x117
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe ff89 	bl	8005c14 <WrByte>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	210b      	movs	r1, #11
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe ff7e 	bl	8005c14 <WrByte>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f107 0216 	add.w	r2, r7, #22
 8006d28:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe ff3d 	bl	8005bac <RdByte>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	210c      	movs	r1, #12
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe ff66 	bl	8005c14 <WrByte>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	210b      	movs	r1, #11
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe ff5b 	bl	8005c14 <WrByte>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	461a      	mov	r2, r3
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	75fb      	strb	r3, [r7, #23]

	status |= _vl53lmz_poll_for_mcu_boot(p_dev);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff f885 	bl	8005e78 <_vl53lmz_poll_for_mcu_boot>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	461a      	mov	r2, r3
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 80c8 	bne.w	8006f10 <vl53lmz_init+0x9e0>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe ff43 	bl	8005c14 <WrByte>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	461a      	mov	r2, r3
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	2328      	movs	r3, #40	; 0x28
 8006d9c:	4a39      	ldr	r2, [pc, #228]	; (8006e84 <vl53lmz_init+0x954>)
 8006d9e:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8006da2:	f7fe ff5f 	bl	8005c64 <WrMulti>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53LMZ_GET_NVM_CMD, sizeof(VL53LMZ_GET_NVM_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 0,
 8006db0:	2302      	movs	r3, #2
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	23ff      	movs	r3, #255	; 0xff
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2104      	movs	r1, #4
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff f809 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	75fb      	strb	r3, [r7, #23]
		VL53LMZ_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8006dd0:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53LMZ_NVM_DATA_SIZE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8006dd8:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8006ddc:	f642 4104 	movw	r1, #11268	; 0x2c04
 8006de0:	f7fe ff60 	bl	8005ca4 <RdMulti>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f103 0014 	add.w	r0, r3, #20
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8006dfa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f005 fce7 	bl	800c7d2 <memcpy>
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |= _vl53lmz_send_offset_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8006e04:	2110      	movs	r1, #16
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff f87a 	bl	8005f00 <_vl53lmz_send_offset_data>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	p_dev->default_xtalk = (uint8_t*)VL53LMZ_DEFAULT_XTALK;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <vl53lmz_init+0x958>)
 8006e1a:	611a      	str	r2, [r3, #16]
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53LMZ_DEFAULT_XTALK,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006e22:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <vl53lmz_init+0x958>)
 8006e24:	4618      	mov	r0, r3
 8006e26:	4611      	mov	r1, r2
 8006e28:	f44f 7342 	mov.w	r3, #776	; 0x308
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f005 fcd0 	bl	800c7d2 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);
	status |= _vl53lmz_send_xtalk_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8006e32:	2110      	movs	r1, #16
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fa2f 	bl	8006298 <_vl53lmz_send_xtalk_data>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e4a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8006e4e:	2b0c      	cmp	r3, #12
 8006e50:	d11e      	bne.n	8006e90 <vl53lmz_init+0x960>
		p_dev->default_configuration = (uint8_t*)VL53L8_DEFAULT_CONFIGURATION;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a0d      	ldr	r2, [pc, #52]	; (8006e8c <vl53lmz_init+0x95c>)
 8006e56:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8006e62:	f642 4134 	movw	r1, #11316	; 0x2c34
 8006e66:	f7fe fefd 	bl	8005c64 <WrMulti>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	75fb      	strb	r3, [r7, #23]
 8006e74:	e01d      	b.n	8006eb2 <vl53lmz_init+0x982>
 8006e76:	bf00      	nop
 8006e78:	08013568 	.word	0x08013568
 8006e7c:	0801b568 	.word	0x0801b568
 8006e80:	08023568 	.word	0x08023568
 8006e84:	08029008 	.word	0x08029008
 8006e88:	08028d00 	.word	0x08028d00
 8006e8c:	08028568 	.word	0x08028568
							p_dev->default_configuration,
							sizeof(VL53L8_DEFAULT_CONFIGURATION));
	}
	else {
		p_dev->default_configuration = (uint8_t*)VL53L7_DEFAULT_CONFIGURATION;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <vl53lmz_init+0x9ec>)
 8006e94:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8006ea0:	f642 4134 	movw	r1, #11316	; 0x2c34
 8006ea4:	f7fe fede 	bl	8005c64 <WrMulti>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	75fb      	strb	r3, [r7, #23]
							p_dev->default_configuration,
							sizeof(VL53L7_DEFAULT_CONFIGURATION));
	}

	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1, VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	23ff      	movs	r3, #255	; 0xff
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe ff88 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8006ed2:	f107 0110 	add.w	r1, r7, #16
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	f64d 3280 	movw	r2, #56192	; 0xdb80
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fdd3 	bl	8007a88 <vl53lmz_dci_write_data>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53LMZ_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 8006eec:	f107 010c 	add.w	r1, r7, #12
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f64d 1264 	movw	r2, #55652	; 0xd964
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fdc6 	bl	8007a88 <vl53lmz_dci_write_data>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	75fb      	strb	r3, [r7, #23]
 8006f06:	e004      	b.n	8006f12 <vl53lmz_init+0x9e2>
		goto exit;
 8006f08:	bf00      	nop
 8006f0a:	e002      	b.n	8006f12 <vl53lmz_init+0x9e2>
		goto exit;
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <vl53lmz_init+0x9e2>
		goto exit;
 8006f10:	bf00      	nop
			VL53LMZ_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	08028934 	.word	0x08028934

08006f20 <vl53lmz_start_ranging>:
	return status;
}

uint8_t vl53lmz_start_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]

	status = vl53lmz_create_output_config( p_dev );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fe77 	bl	8007c20 <vl53lmz_create_output_config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
	if (status != VL53LMZ_STATUS_OK)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <vl53lmz_start_ranging+0x20>
		return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	e005      	b.n	8006f4c <vl53lmz_start_ranging+0x2c>

	status = vl53lmz_send_output_config_and_start( p_dev );
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fedb 	bl	8007cfc <vl53lmz_send_output_config_and_start>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]

	return status;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <vl53lmz_stop_ranging>:

uint8_t vl53lmz_stop_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53LMZ_STATUS_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	74fb      	strb	r3, [r7, #19]
 8006f60:	2300      	movs	r3, #0
 8006f62:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f107 020c 	add.w	r2, r7, #12
 8006f72:	2304      	movs	r3, #4
 8006f74:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8006f78:	f7fe fe94 	bl	8005ca4 <RdMulti>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	75fb      	strb	r3, [r7, #23]
						  0x2FFC, (uint8_t*)&auto_stop_flag, 4);

	if((auto_stop_flag != (uint32_t)0x4FF)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d04f      	beq.n	8007030 <vl53lmz_stop_ranging+0xdc>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f96:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d148      	bne.n	8007030 <vl53lmz_stop_ranging+0xdc>
	{
			status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fe34 	bl	8005c14 <WrByte>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	75fb      	strb	r3, [r7, #23]

			/* Provoke MCU stop */
			status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2216      	movs	r2, #22
 8006fba:	2115      	movs	r1, #21
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fe29 	bl	8005c14 <WrByte>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	75fb      	strb	r3, [r7, #23]
			status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	2114      	movs	r1, #20
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fe1e 	bl	8005c14 <WrByte>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	75fb      	strb	r3, [r7, #23]

			/* Poll for G02 status 0 MCU stop */
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8006fe2:	e021      	b.n	8007028 <vl53lmz_stop_ranging+0xd4>
			{
				status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f107 0213 	add.w	r2, r7, #19
 8006fea:	2106      	movs	r1, #6
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fddd 	bl	8005bac <RdByte>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	75fb      	strb	r3, [r7, #23]
				status |= WaitMs(&(p_dev->platform), 10);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	210a      	movs	r1, #10
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe feb9 	bl	8005d78 <WaitMs>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	4313      	orrs	r3, r2
 800700e:	75fb      	strb	r3, [r7, #23]
				timeout++;	/* Timeout reached after 5 seconds */
 8007010:	8abb      	ldrh	r3, [r7, #20]
 8007012:	3301      	adds	r3, #1
 8007014:	82bb      	strh	r3, [r7, #20]

				if(timeout > (uint16_t)500)
 8007016:	8abb      	ldrh	r3, [r7, #20]
 8007018:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800701c:	d904      	bls.n	8007028 <vl53lmz_stop_ranging+0xd4>
				{
					status |= tmp;
 800701e:	7cfa      	ldrb	r2, [r7, #19]
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	4313      	orrs	r3, r2
 8007024:	75fb      	strb	r3, [r7, #23]
					break;
 8007026:	e003      	b.n	8007030 <vl53lmz_stop_ranging+0xdc>
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8007028:	7cfb      	ldrb	r3, [r7, #19]
 800702a:	b25b      	sxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	dad9      	bge.n	8006fe4 <vl53lmz_stop_ranging+0x90>
				}
			}
		}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f107 0213 	add.w	r2, r7, #19
 8007036:	2106      	movs	r1, #6
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fdb7 	bl	8005bac <RdByte>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	4313      	orrs	r3, r2
 8007046:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8007048:	7cfb      	ldrb	r3, [r7, #19]
 800704a:	b25b      	sxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	da15      	bge.n	800707c <vl53lmz_stop_ranging+0x128>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f107 0213 	add.w	r2, r7, #19
 8007056:	2107      	movs	r1, #7
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fda7 	bl	8005bac <RdByte>
 800705e:	4603      	mov	r3, r0
 8007060:	461a      	mov	r2, r3
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	4313      	orrs	r3, r2
 8007066:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8007068:	7cfb      	ldrb	r3, [r7, #19]
 800706a:	2b84      	cmp	r3, #132	; 0x84
 800706c:	d006      	beq.n	800707c <vl53lmz_stop_ranging+0x128>
 800706e:	7cfb      	ldrb	r3, [r7, #19]
 8007070:	2b85      	cmp	r3, #133	; 0x85
 8007072:	d003      	beq.n	800707c <vl53lmz_stop_ranging+0x128>
		   status |= tmp;
 8007074:	7cfa      	ldrb	r2, [r7, #19]
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	4313      	orrs	r3, r2
 800707a:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe fdc5 	bl	8005c14 <WrByte>
 800708a:	4603      	mov	r3, r0
 800708c:	461a      	mov	r2, r3
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	4313      	orrs	r3, r2
 8007092:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	2114      	movs	r1, #20
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fdba 	bl	8005c14 <WrByte>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	2115      	movs	r1, #21
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fdaf 	bl	8005c14 <WrByte>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461a      	mov	r2, r3
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	4313      	orrs	r3, r2
 80070be:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2204      	movs	r2, #4
 80070c4:	2109      	movs	r1, #9
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fda4 	bl	8005c14 <WrByte>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fd98 	bl	8005c14 <WrByte>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	75fb      	strb	r3, [r7, #23]

	return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <vl53lmz_get_ranging_data>:
}

uint8_t vl53lmz_get_ranging_data(
		VL53LMZ_Configuration		*p_dev,
		VL53LMZ_ResultsData		*p_results)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8007106:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), 0x0,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2100      	movs	r1, #0
 8007114:	f7fe fdc6 	bl	8005ca4 <RdMulti>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	7ffb      	ldrb	r3, [r7, #31]
 800711e:	4313      	orrs	r3, r2
 8007120:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	711a      	strb	r2, [r3, #4]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	b29b      	uxth	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7fe fde6 	bl	8005d0c <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8007140:	2310      	movs	r3, #16
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e118      	b.n	8007378 <vl53lmz_get_ranging_data+0x280>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4413      	add	r3, r2
 8007150:	3304      	adds	r3, #4
 8007152:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b01      	cmp	r3, #1
 8007160:	d915      	bls.n	800718e <vl53lmz_get_ranging_data+0x96>
					&& (bh_ptr->type < (uint32_t)0xd))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b0c      	cmp	r3, #12
 800716e:	d80e      	bhi.n	800718e <vl53lmz_get_ranging_data+0x96>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8007184:	b29b      	uxth	r3, r3
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e005      	b.n	800719a <vl53lmz_get_ranging_data+0xa2>
		}
		else
		{
			msize = bh_ptr->size;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8007196:	b29b      	uxth	r3, r3
 8007198:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	f24e 0284 	movw	r2, #57476	; 0xe084
 80071a2:	4293      	cmp	r3, r2
 80071a4:	f000 80c2 	beq.w	800732c <vl53lmz_get_ranging_data+0x234>
 80071a8:	f24e 0284 	movw	r2, #57476	; 0xe084
 80071ac:	4293      	cmp	r3, r2
 80071ae:	f300 80db 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 80071b2:	f24e 0244 	movw	r2, #57412	; 0xe044
 80071b6:	4293      	cmp	r3, r2
 80071b8:	f000 80a9 	beq.w	800730e <vl53lmz_get_ranging_data+0x216>
 80071bc:	f24e 0244 	movw	r2, #57412	; 0xe044
 80071c0:	4293      	cmp	r3, r2
 80071c2:	f300 80d1 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 80071c6:	f64d 7244 	movw	r2, #57156	; 0xdf44
 80071ca:	4293      	cmp	r3, r2
 80071cc:	f000 8090 	beq.w	80072f0 <vl53lmz_get_ranging_data+0x1f8>
 80071d0:	f64d 7244 	movw	r2, #57156	; 0xdf44
 80071d4:	4293      	cmp	r3, r2
 80071d6:	f300 80c7 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 80071da:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 80071de:	4293      	cmp	r3, r2
 80071e0:	d077      	beq.n	80072d2 <vl53lmz_get_ranging_data+0x1da>
 80071e2:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 80071e6:	4293      	cmp	r3, r2
 80071e8:	f300 80be 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 80071ec:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d05f      	beq.n	80072b4 <vl53lmz_get_ranging_data+0x1bc>
 80071f4:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80071f8:	4293      	cmp	r3, r2
 80071fa:	f300 80b5 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 80071fe:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8007202:	4293      	cmp	r3, r2
 8007204:	d047      	beq.n	8007296 <vl53lmz_get_ranging_data+0x19e>
 8007206:	f64d 3284 	movw	r2, #56196	; 0xdb84
 800720a:	4293      	cmp	r3, r2
 800720c:	f300 80ac 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 8007210:	f64d 0258 	movw	r2, #55384	; 0xd858
 8007214:	4293      	cmp	r3, r2
 8007216:	f000 8098 	beq.w	800734a <vl53lmz_get_ranging_data+0x252>
 800721a:	f64d 0258 	movw	r2, #55384	; 0xd858
 800721e:	4293      	cmp	r3, r2
 8007220:	f300 80a2 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 8007224:	f245 52d0 	movw	r2, #21968	; 0x55d0
 8007228:	4293      	cmp	r3, r2
 800722a:	d025      	beq.n	8007278 <vl53lmz_get_ranging_data+0x180>
 800722c:	f245 52d0 	movw	r2, #21968	; 0x55d0
 8007230:	4293      	cmp	r3, r2
 8007232:	f300 8099 	bgt.w	8007368 <vl53lmz_get_ranging_data+0x270>
 8007236:	f245 42b4 	movw	r2, #21684	; 0x54b4
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <vl53lmz_get_ranging_data+0x150>
 800723e:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8007242:	4293      	cmp	r3, r2
 8007244:	d00a      	beq.n	800725c <vl53lmz_get_ranging_data+0x164>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8007246:	e08f      	b.n	8007368 <vl53lmz_get_ranging_data+0x270>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	330c      	adds	r3, #12
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8007254:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	701a      	strb	r2, [r3, #0]
				break;
 800725a:	e086      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->ambient_per_spad,
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	3304      	adds	r3, #4
 8007264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	3304      	adds	r3, #4
				(void)memcpy(p_results->ambient_per_spad,
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4619      	mov	r1, r3
 8007272:	f005 faae 	bl	800c7d2 <memcpy>
				break;
 8007276:	e078      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_spads_enabled,
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3304      	adds	r3, #4
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4413      	add	r3, r2
 800728a:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_spads_enabled,
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4619      	mov	r1, r3
 8007290:	f005 fa9f 	bl	800c7d2 <memcpy>
				break;
 8007294:	e069      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_target_detected,
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	3304      	adds	r3, #4
 80072a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_target_detected,
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f005 fa90 	bl	800c7d2 <memcpy>
				break;
 80072b2:	e05a      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->signal_per_spad,
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	3304      	adds	r3, #4
 80072be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	3304      	adds	r3, #4
				(void)memcpy(p_results->signal_per_spad,
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4619      	mov	r1, r3
 80072cc:	f005 fa81 	bl	800c7d2 <memcpy>
				break;
 80072d0:	e04b      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->range_sigma_mm,
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	3304      	adds	r3, #4
 80072dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	3304      	adds	r3, #4
				(void)memcpy(p_results->range_sigma_mm,
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4619      	mov	r1, r3
 80072ea:	f005 fa72 	bl	800c7d2 <memcpy>
				break;
 80072ee:	e03c      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->distance_mm,
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3304      	adds	r3, #4
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4413      	add	r3, r2
 8007302:	3304      	adds	r3, #4
				(void)memcpy(p_results->distance_mm,
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4619      	mov	r1, r3
 8007308:	f005 fa63 	bl	800c7d2 <memcpy>
				break;
 800730c:	e02d      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->reflectance,
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	f203 4044 	addw	r0, r3, #1092	; 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	3304      	adds	r3, #4
 8007318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
				(void)memcpy(p_results->reflectance,
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4619      	mov	r1, r3
 8007326:	f005 fa54 	bl	800c7d2 <memcpy>
				break;
 800732a:	e01e      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->target_status,
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f203 4084 	addw	r0, r3, #1156	; 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	3304      	adds	r3, #4
 8007336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	3304      	adds	r3, #4
				(void)memcpy(p_results->target_status,
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4619      	mov	r1, r3
 8007344:	f005 fa45 	bl	800c7d2 <memcpy>
				break;
 8007348:	e00f      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(&p_results->motion_indicator,
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	f203 40c4 	addw	r0, r3, #1220	; 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	3304      	adds	r3, #4
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4413      	add	r3, r2
 800735c:	3304      	adds	r3, #4
				(void)memcpy(&p_results->motion_indicator,
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f005 fa36 	bl	800c7d2 <memcpy>
				break;
 8007366:	e000      	b.n	800736a <vl53lmz_get_ranging_data+0x272>
				break;
 8007368:	bf00      	nop
		}
		i += msize;
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	4413      	add	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	3304      	adds	r3, #4
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	429a      	cmp	r2, r3
 8007380:	f4ff aee1 	bcc.w	8007146 <vl53lmz_get_ranging_data+0x4e>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 800738a:	b29b      	uxth	r3, r3
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	827b      	strh	r3, [r7, #18]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8007396:	b29a      	uxth	r2, r3
 8007398:	8a7b      	ldrh	r3, [r7, #18]
 800739a:	4313      	orrs	r3, r2
 800739c:	827b      	strh	r3, [r7, #18]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)4]) << 8) & 0xFF00U;
 80073a2:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	823b      	strh	r3, [r7, #16]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)3])) & 0xFFU;
 80073b6:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	8a3b      	ldrh	r3, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	823b      	strh	r3, [r7, #16]

	if(header_id != footer_id)
 80073c8:	8a7a      	ldrh	r2, [r7, #18]
 80073ca:	8a3b      	ldrh	r3, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d003      	beq.n	80073d8 <vl53lmz_get_ranging_data+0x2e0>
	{
		status |= VL53LMZ_STATUS_CORRUPTED_FRAME;
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
 80073d2:	f043 0302 	orr.w	r3, r3, #2
 80073d6:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80073d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <vl53lmz_get_resolution>:

uint8_t vl53lmz_get_resolution(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80073f6:	2308      	movs	r3, #8
 80073f8:	f245 4250 	movw	r2, #21584	; 0x5450
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fab9 	bl	8007974 <vl53lmz_dci_read_data>
 8007402:	4603      	mov	r3, r0
 8007404:	461a      	mov	r2, r3
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	4313      	orrs	r3, r2
 800740a:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8007418:	fb12 f303 	smulbb	r3, r2, r3
 800741c:	b2da      	uxtb	r2, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	701a      	strb	r2, [r3, #0]

	return status;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <vl53lmz_set_resolution>:


uint8_t vl53lmz_set_resolution(
		VL53LMZ_Configuration		 *p_dev,
		uint8_t				resolution)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	2b10      	cmp	r3, #16
 8007440:	d002      	beq.n	8007448 <vl53lmz_set_resolution+0x1c>
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d055      	beq.n	80074f2 <vl53lmz_set_resolution+0xc6>
 8007446:	e0a9      	b.n	800759c <vl53lmz_set_resolution+0x170>
		case VL53LMZ_RESOLUTION_4X4:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 800744e:	2310      	movs	r3, #16
 8007450:	f64a 5238 	movw	r2, #44344	; 0xad38
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fa8d 	bl	8007974 <vl53lmz_dci_read_data>
 800745a:	4603      	mov	r3, r0
 800745c:	461a      	mov	r2, r3
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	4313      	orrs	r3, r2
 8007462:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 64;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 4;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8007482:	2310      	movs	r3, #16
 8007484:	f64a 5238 	movw	r2, #44344	; 0xad38
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fafd 	bl	8007a88 <vl53lmz_dci_write_data>
 800748e:	4603      	mov	r3, r0
 8007490:	461a      	mov	r2, r3
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	4313      	orrs	r3, r2
 8007496:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 800749e:	2308      	movs	r3, #8
 80074a0:	f245 4250 	movw	r2, #21584	; 0x5450
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa65 	bl	8007974 <vl53lmz_dci_read_data>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2204      	movs	r2, #4
 80074b8:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 4;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 8;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2208      	movs	r2, #8
 80074c8:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 8;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2208      	movs	r2, #8
 80074d0:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80074da:	2308      	movs	r3, #8
 80074dc:	f245 4250 	movw	r2, #21584	; 0x5450
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fad1 	bl	8007a88 <vl53lmz_dci_write_data>
 80074e6:	4603      	mov	r3, r0
 80074e8:	461a      	mov	r2, r3
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			break;
 80074f0:	e057      	b.n	80075a2 <vl53lmz_set_resolution+0x176>

		case VL53LMZ_RESOLUTION_8X8:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80074f8:	2310      	movs	r3, #16
 80074fa:	f64a 5238 	movw	r2, #44344	; 0xad38
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa38 	bl	8007974 <vl53lmz_dci_read_data>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	4313      	orrs	r3, r2
 800750c:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2210      	movs	r2, #16
 8007512:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 16;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2210      	movs	r2, #16
 800751a:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 800752c:	2310      	movs	r3, #16
 800752e:	f64a 5238 	movw	r2, #44344	; 0xad38
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 faa8 	bl	8007a88 <vl53lmz_dci_write_data>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4313      	orrs	r3, r2
 8007540:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8007548:	2308      	movs	r3, #8
 800754a:	f245 4250 	movw	r2, #21584	; 0x5450
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa10 	bl	8007974 <vl53lmz_dci_read_data>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4313      	orrs	r3, r2
 800755c:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 8;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2208      	movs	r2, #8
 800756a:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 4;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2204      	movs	r2, #4
 8007572:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 4;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2204      	movs	r2, #4
 800757a:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8007584:	2308      	movs	r3, #8
 8007586:	f245 4250 	movw	r2, #21584	; 0x5450
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa7c 	bl	8007a88 <vl53lmz_dci_write_data>
 8007590:	4603      	mov	r3, r0
 8007592:	461a      	mov	r2, r3
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	4313      	orrs	r3, r2
 8007598:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);

			break;
 800759a:	e002      	b.n	80075a2 <vl53lmz_set_resolution+0x176>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 800759c:	237f      	movs	r3, #127	; 0x7f
 800759e:	73fb      	strb	r3, [r7, #15]
			break;
 80075a0:	bf00      	nop
		}

	status |= _vl53lmz_send_offset_data(p_dev, resolution);
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fe fcaa 	bl	8005f00 <_vl53lmz_send_offset_data>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	73fb      	strb	r3, [r7, #15]
	status |= _vl53lmz_send_xtalk_data(p_dev, resolution);
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fe fe6c 	bl	8006298 <_vl53lmz_send_xtalk_data>
 80075c0:	4603      	mov	r3, r0
 80075c2:	461a      	mov	r2, r3
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	73fb      	strb	r3, [r7, #15]

	return status;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <vl53lmz_get_ranging_frequency_hz>:

uint8_t vl53lmz_get_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_frequency_hz)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80075e8:	2304      	movs	r3, #4
 80075ea:	f245 4258 	movw	r2, #21592	; 0x5458
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9c0 	bl	8007974 <vl53lmz_dci_read_data>
 80075f4:	4603      	mov	r3, r0
 80075f6:	461a      	mov	r2, r3
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_FREQ_HZ, 4);
	*p_frequency_hz = p_dev->temp_buffer[0x01];
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 2505 	ldrb.w	r2, [r3, #1285]	; 0x505
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	701a      	strb	r2, [r3, #0]

	return status;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <vl53lmz_set_ranging_frequency_hz>:

uint8_t vl53lmz_set_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b088      	sub	sp, #32
 8007616:	af04      	add	r7, sp, #16
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8007628:	2301      	movs	r3, #1
 800762a:	9302      	str	r3, [sp, #8]
 800762c:	2301      	movs	r3, #1
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	1cfb      	adds	r3, r7, #3
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2304      	movs	r3, #4
 8007636:	f245 4258 	movw	r2, #21592	; 0x5458
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fac4 	bl	8007bc8 <vl53lmz_dci_replace_data>
 8007640:	4603      	mov	r3, r0
 8007642:	461a      	mov	r2, r3
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	4313      	orrs	r3, r2
 8007648:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <vl53lmz_get_integration_time_ms>:

uint8_t vl53lmz_get_integration_time_ms(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			*p_time_ms)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8007668:	2314      	movs	r3, #20
 800766a:	f245 425c 	movw	r2, #21596	; 0x545c
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f980 	bl	8007974 <vl53lmz_dci_read_data>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	4313      	orrs	r3, r2
 800767c:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_INT_TIME, 20);

	(void)memcpy(p_time_ms, &(p_dev->temp_buffer[0x0]), 4);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]
	*p_time_ms /= (uint32_t)1000;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a05      	ldr	r2, [pc, #20]	; (80076a8 <vl53lmz_get_integration_time_ms+0x54>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099a      	lsrs	r2, r3, #6
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	601a      	str	r2, [r3, #0]

	return status;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	10624dd3 	.word	0x10624dd3

080076ac <vl53lmz_set_integration_time_ms>:

uint8_t vl53lmz_set_integration_time_ms(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af04      	add	r7, sp, #16
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
		uint32_t integration = integration_time_ms;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d903      	bls.n	80076cc <vl53lmz_set_integration_time_ms+0x20>
		   || (integration > (uint32_t)1000))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ca:	d904      	bls.n	80076d6 <vl53lmz_set_integration_time_ms+0x2a>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	e01a      	b.n	800770c <vl53lmz_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076dc:	fb02 f303 	mul.w	r3, r2, r3
 80076e0:	60bb      	str	r3, [r7, #8]

		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80076e8:	2300      	movs	r3, #0
 80076ea:	9302      	str	r3, [sp, #8]
 80076ec:	2304      	movs	r3, #4
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	2314      	movs	r3, #20
 80076f8:	f245 425c 	movw	r2, #21596	; 0x545c
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa63 	bl	8007bc8 <vl53lmz_dci_replace_data>
 8007702:	4603      	mov	r3, r0
 8007704:	461a      	mov	r2, r3
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	4313      	orrs	r3, r2
 800770a:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <vl53lmz_get_sharpener_percent>:

uint8_t vl53lmz_get_sharpener_percent(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_sharpener_percent)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev,p_dev->temp_buffer,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f203 5104 	addw	r1, r3, #1284	; 0x504
 800772c:	2310      	movs	r3, #16
 800772e:	f64a 62d8 	movw	r2, #44760	; 0xaed8
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f91e 	bl	8007974 <vl53lmz_dci_read_data>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	4313      	orrs	r3, r2
 8007740:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_SHARPENER, 16);

	*p_sharpener_percent = (p_dev->temp_buffer[0xD]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8007748:	461a      	mov	r2, r3
								*(uint8_t)100)/(uint8_t)255;
 800774a:	2364      	movs	r3, #100	; 0x64
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	4a07      	ldr	r2, [pc, #28]	; (8007770 <vl53lmz_get_sharpener_percent+0x58>)
 8007752:	fb82 1203 	smull	r1, r2, r2, r3
 8007756:	441a      	add	r2, r3
 8007758:	11d2      	asrs	r2, r2, #7
 800775a:	17db      	asrs	r3, r3, #31
 800775c:	1ad3      	subs	r3, r2, r3
	*p_sharpener_percent = (p_dev->temp_buffer[0xD]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	701a      	strb	r2, [r3, #0]

	return status;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	80808081 	.word	0x80808081

08007774 <vl53lmz_set_sharpener_percent>:

uint8_t vl53lmz_set_sharpener_percent(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				sharpener_percent)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af04      	add	r7, sp, #16
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
		uint8_t sharpener;

	if(sharpener_percent >= (uint8_t)100)
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	2b63      	cmp	r3, #99	; 0x63
 8007788:	d904      	bls.n	8007794 <vl53lmz_set_sharpener_percent+0x20>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8007790:	73fb      	strb	r3, [r7, #15]
 8007792:	e020      	b.n	80077d6 <vl53lmz_set_sharpener_percent+0x62>
	}
	else
	{
		sharpener = (sharpener_percent*(uint8_t)255)/(uint8_t)100;
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	4613      	mov	r3, r2
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <vl53lmz_set_sharpener_percent+0x6c>)
 800779e:	fb82 1203 	smull	r1, r2, r2, r3
 80077a2:	1152      	asrs	r2, r2, #5
 80077a4:	17db      	asrs	r3, r3, #31
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	73bb      	strb	r3, [r7, #14]
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80077b2:	230d      	movs	r3, #13
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	2301      	movs	r3, #1
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	f107 030e 	add.w	r3, r7, #14
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2310      	movs	r3, #16
 80077c2:	f64a 62d8 	movw	r2, #44760	; 0xaed8
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9fe 	bl	8007bc8 <vl53lmz_dci_replace_data>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_SHARPENER, 16,
								(uint8_t*)&sharpener, 1, 0xD);
	}

	return status;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	51eb851f 	.word	0x51eb851f

080077e4 <vl53lmz_get_target_order>:

uint8_t vl53lmz_get_target_order(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_target_order)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80077f8:	2304      	movs	r3, #4
 80077fa:	f64a 6264 	movw	r2, #44644	; 0xae64
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8b8 	bl	8007974 <vl53lmz_dci_read_data>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	4313      	orrs	r3, r2
 800780c:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_TARGET_ORDER, 4);
	*p_target_order = (uint8_t)p_dev->temp_buffer[0x0];
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	701a      	strb	r2, [r3, #0]

	return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <vl53lmz_set_target_order>:

uint8_t vl53lmz_set_target_order(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				target_order)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b088      	sub	sp, #32
 8007826:	af04      	add	r7, sp, #16
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53LMZ_TARGET_ORDER_CLOSEST)
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d002      	beq.n	800783e <vl53lmz_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53LMZ_TARGET_ORDER_STRONGEST))
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d114      	bne.n	8007868 <vl53lmz_set_target_order+0x46>
	{
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8007844:	2300      	movs	r3, #0
 8007846:	9302      	str	r3, [sp, #8]
 8007848:	2301      	movs	r3, #1
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	1cfb      	adds	r3, r7, #3
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2304      	movs	r3, #4
 8007852:	f64a 6264 	movw	r2, #44644	; 0xae64
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9b6 	bl	8007bc8 <vl53lmz_dci_replace_data>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	4313      	orrs	r3, r2
 8007864:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_TARGET_ORDER, 4,
								(uint8_t*)&target_order, 1, 0x0);
 8007866:	e003      	b.n	8007870 <vl53lmz_set_target_order+0x4e>
	}else
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800786e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <vl53lmz_get_ranging_mode>:

uint8_t vl53lmz_get_ranging_mode(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_ranging_mode)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f203 5104 	addw	r1, r3, #1284	; 0x504
 800788e:	2308      	movs	r3, #8
 8007890:	f64a 5230 	movw	r2, #44336	; 0xad30
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f86d 	bl	8007974 <vl53lmz_dci_read_data>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_RANGING_MODE, 8);

	if(p_dev->temp_buffer[0x01] == (uint8_t)0x1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d103      	bne.n	80078b6 <vl53lmz_get_ranging_mode+0x3c>
	{
		*p_ranging_mode = VL53LMZ_RANGING_MODE_CONTINUOUS;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2201      	movs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	e002      	b.n	80078bc <vl53lmz_get_ranging_mode+0x42>
	}
	else
	{
		*p_ranging_mode = VL53LMZ_RANGING_MODE_AUTONOMOUS;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2203      	movs	r2, #3
 80078ba:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <vl53lmz_set_ranging_mode>:

uint8_t vl53lmz_set_ranging_mode(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80078e0:	2308      	movs	r3, #8
 80078e2:	f64a 5230 	movw	r2, #44336	; 0xad30
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f844 	bl	8007974 <vl53lmz_dci_read_data>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d002      	beq.n	8007902 <vl53lmz_set_ranging_mode+0x3c>
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d00b      	beq.n	8007918 <vl53lmz_set_ranging_mode+0x52>
 8007900:	e015      	b.n	800792e <vl53lmz_set_ranging_mode+0x68>
	{
		case VL53LMZ_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x03] = 0x3;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2203      	movs	r2, #3
 800790e:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
			single_range = 0x00;
 8007912:	2300      	movs	r3, #0
 8007914:	60bb      	str	r3, [r7, #8]
			break;
 8007916:	e00d      	b.n	8007934 <vl53lmz_set_ranging_mode+0x6e>

		case VL53LMZ_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2203      	movs	r2, #3
 800791c:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x03] = 0x2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
			single_range = 0x01;
 8007928:	2301      	movs	r3, #1
 800792a:	60bb      	str	r3, [r7, #8]
			break;
 800792c:	e002      	b.n	8007934 <vl53lmz_set_ranging_mode+0x6e>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 800792e:	237f      	movs	r3, #127	; 0x7f
 8007930:	73fb      	strb	r3, [r7, #15]
			break;
 8007932:	bf00      	nop
	}

	status |= vl53lmz_dci_write_data(p_dev, p_dev->temp_buffer,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 5104 	addw	r1, r3, #1284	; 0x504
 800793a:	2308      	movs	r3, #8
 800793c:	f64a 5230 	movw	r2, #44336	; 0xad30
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8a1 	bl	8007a88 <vl53lmz_dci_write_data>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	4313      	orrs	r3, r2
 800794e:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	2304      	movs	r3, #4
 8007956:	f64d 1264 	movw	r2, #55652	; 0xd964
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f894 	bl	8007a88 <vl53lmz_dci_write_data>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4313      	orrs	r3, r2
 8007968:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_SINGLE_RANGE,
						(uint16_t)sizeof(single_range));

	return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <vl53lmz_dci_read_data>:
uint8_t vl53lmz_dci_read_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53LMZ_STATUS_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8007988:	887b      	ldrh	r3, [r7, #2]
 800798a:	330c      	adds	r3, #12
 800798c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800798e:	4a3d      	ldr	r2, [pc, #244]	; (8007a84 <vl53lmz_dci_read_data+0x110>)
 8007990:	f107 0314 	add.w	r3, r7, #20
 8007994:	ca07      	ldmia	r2, {r0, r1, r2}
 8007996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d903      	bls.n	80079ac <vl53lmz_dci_read_data+0x38>
	{
		status |= VL53LMZ_STATUS_ERROR;
 80079a4:	23ff      	movs	r3, #255	; 0xff
 80079a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80079aa:	e065      	b.n	8007a78 <vl53lmz_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	111b      	asrs	r3, r3, #4
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80079c2:	887b      	ldrh	r3, [r7, #2]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f107 0214 	add.w	r2, r7, #20
 80079d2:	230c      	movs	r3, #12
 80079d4:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 80079d8:	f7fe f944 	bl	8005c64 <WrMulti>
 80079dc:	4603      	mov	r3, r0
 80079de:	461a      	mov	r2, r3
 80079e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53LMZ_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 80079ea:	2303      	movs	r3, #3
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	23ff      	movs	r3, #255	; 0xff
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80079f6:	2201      	movs	r2, #1
 80079f8:	2104      	movs	r1, #4
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f7fe f9ec 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53LMZ_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8007a0e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	f642 4104 	movw	r1, #11268	; 0x2c04
 8007a1c:	f7fe f942 	bl	8005ca4 <RdMulti>
 8007a20:	4603      	mov	r3, r0
 8007a22:	461a      	mov	r2, r3
 8007a24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8007a34:	887b      	ldrh	r3, [r7, #2]
 8007a36:	330c      	adds	r3, #12
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fe f965 	bl	8005d0c <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8007a42:	2300      	movs	r3, #0
 8007a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a46:	e011      	b.n	8007a6c <vl53lmz_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8007a48:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007a4c:	1d1a      	adds	r2, r3, #4
 8007a4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007a52:	68b9      	ldr	r1, [r7, #8]
 8007a54:	440b      	add	r3, r1
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f892 2504 	ldrb.w	r2, [r2, #1284]	; 0x504
 8007a5e:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8007a60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3301      	adds	r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a70:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8007a74:	429a      	cmp	r2, r3
 8007a76:	dbe7      	blt.n	8007a48 <vl53lmz_dci_read_data+0xd4>
		}
	}

	return status;
 8007a78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	; 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08012d54 	.word	0x08012d54

08007a88 <vl53lmz_dci_write_data>:
uint8_t vl53lmz_dci_write_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08c      	sub	sp, #48	; 0x30
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	753b      	strb	r3, [r7, #20]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	757b      	strb	r3, [r7, #21]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75bb      	strb	r3, [r7, #22]
 8007aac:	230f      	movs	r3, #15
 8007aae:	75fb      	strb	r3, [r7, #23]
 8007ab0:	2305      	movs	r3, #5
 8007ab2:	763b      	strb	r3, [r7, #24]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8007ab8:	887b      	ldrh	r3, [r7, #2]
 8007aba:	3308      	adds	r3, #8
 8007abc:	121b      	asrs	r3, r3, #8
 8007abe:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8007ac0:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8007ac2:	887b      	ldrh	r3, [r7, #2]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8007aca:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53LMZ_UI_CMD_END -
 8007acc:	887b      	ldrh	r3, [r7, #2]
 8007ace:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8007ad2:	3334      	adds	r3, #52	; 0x34
 8007ad4:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8007ad6:	887b      	ldrh	r3, [r7, #2]
 8007ad8:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d903      	bls.n	8007ae8 <vl53lmz_dci_write_data+0x60>
		   > (uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53LMZ_STATUS_ERROR;
 8007ae0:	23ff      	movs	r3, #255	; 0xff
 8007ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ae6:	e069      	b.n	8007bbc <vl53lmz_dci_write_data+0x134>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8007af6:	887b      	ldrh	r3, [r7, #2]
 8007af8:	111b      	asrs	r3, r3, #4
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8007b08:	887b      	ldrh	r3, [r7, #2]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	68b8      	ldr	r0, [r7, #8]
 8007b0e:	f7fe f8fd 	bl	8005d0c <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8007b12:	887b      	ldrh	r3, [r7, #2]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b1a:	e012      	b.n	8007b42 <vl53lmz_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8007b1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	441a      	add	r2, r3
 8007b24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007b28:	3304      	adds	r3, #4
 8007b2a:	7811      	ldrb	r1, [r2, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	460a      	mov	r2, r1
 8007b32:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8007b36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dae8      	bge.n	8007b1c <vl53lmz_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8007b54:	887b      	ldrh	r3, [r7, #2]
 8007b56:	3304      	adds	r3, #4
 8007b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3304      	adds	r3, #4
 8007b62:	461a      	mov	r2, r3
 8007b64:	f107 0314 	add.w	r3, r7, #20
 8007b68:	cb03      	ldmia	r3!, {r0, r1}
 8007b6a:	6010      	str	r0, [r2, #0]
 8007b6c:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8007b6e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f203 5204 	addw	r2, r3, #1284	; 0x504
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8007b76:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8007b78:	330c      	adds	r3, #12
 8007b7a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8007b7c:	f7fe f872 	bl	8005c64 <WrMulti>
 8007b80:	4603      	mov	r3, r0
 8007b82:	461a      	mov	r2, r3
 8007b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8007b8e:	2303      	movs	r3, #3
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	23ff      	movs	r3, #255	; 0xff
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	2104      	movs	r1, #4
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7fe f91a 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8007bb2:	887b      	ldrh	r3, [r7, #2]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68b8      	ldr	r0, [r7, #8]
 8007bb8:	f7fe f8a8 	bl	8005d0c <SwapBuffer>
	}

	return status;
 8007bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3728      	adds	r7, #40	; 0x28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <vl53lmz_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_read_data(p_dev, data, index, data_size);
 8007bda:	887b      	ldrh	r3, [r7, #2]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fec7 	bl	8007974 <vl53lmz_dci_read_data>
 8007be6:	4603      	mov	r3, r0
 8007be8:	461a      	mov	r2, r3
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8007bf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bf8:	6a39      	ldr	r1, [r7, #32]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f004 fde9 	bl	800c7d2 <memcpy>
	status |= vl53lmz_dci_write_data(p_dev, data, index, data_size);
 8007c00:	887b      	ldrh	r3, [r7, #2]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ff3e 	bl	8007a88 <vl53lmz_dci_write_data>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	75fb      	strb	r3, [r7, #23]

	return status;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <vl53lmz_create_output_config>:
uint8_t vl53lmz_create_output_config(
		VL53LMZ_Configuration	  *p_dev ) {
 8007c20:	b5b0      	push	{r4, r5, r7, lr}
 8007c22:	b090      	sub	sp, #64	; 0x40
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

	uint8_t status = VL53LMZ_STATUS_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Send addresses of possible output */
	uint32_t default_output_config[] ={
 8007c2e:	4b30      	ldr	r3, [pc, #192]	; (8007cf0 <vl53lmz_create_output_config+0xd0>)
 8007c30:	f107 040c 	add.w	r4, r7, #12
 8007c34:	461d      	mov	r5, r3
 8007c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53LMZ_DISTANCE_BH,
		VL53LMZ_REFLECTANCE_BH,
		VL53LMZ_TARGET_STATUS_BH,
		VL53LMZ_MOTION_DETECT_BH };

	memset(g_output_config, 0x00, sizeof(g_output_config));
 8007c46:	2280      	movs	r2, #128	; 0x80
 8007c48:	2100      	movs	r1, #0
 8007c4a:	482a      	ldr	r0, [pc, #168]	; (8007cf4 <vl53lmz_create_output_config+0xd4>)
 8007c4c:	f004 fd14 	bl	800c678 <memset>
	memcpy(g_output_config, default_output_config, sizeof(default_output_config));
 8007c50:	4b28      	ldr	r3, [pc, #160]	; (8007cf4 <vl53lmz_create_output_config+0xd4>)
 8007c52:	461d      	mov	r5, r3
 8007c54:	f107 040c 	add.w	r4, r7, #12
 8007c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007c64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	/* Enable mandatory output (meta and common data) */
	g_output_bh_enable[0] = 0x00000007U;
 8007c68:	4b23      	ldr	r3, [pc, #140]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c6a:	2207      	movs	r2, #7
 8007c6c:	601a      	str	r2, [r3, #0]
	g_output_bh_enable[1] = 0x00000000U;
 8007c6e:	4b22      	ldr	r3, [pc, #136]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
	g_output_bh_enable[2] = 0x00000000U;
 8007c74:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	609a      	str	r2, [r3, #8]
	g_output_bh_enable[3] = 0x00000000U;
 8007c7a:	4b1f      	ldr	r3, [pc, #124]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60da      	str	r2, [r3, #12]

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53LMZ_DISABLE_AMBIENT_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)8;
 8007c80:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	4a1c      	ldr	r2, [pc, #112]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c88:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_SPADS_ENABLED
	g_output_bh_enable[0] += (uint32_t)16;
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3310      	adds	r3, #16
 8007c90:	4a19      	ldr	r2, [pc, #100]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c92:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_TARGET_DETECTED
	g_output_bh_enable[0] += (uint32_t)32;
 8007c94:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3320      	adds	r3, #32
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007c9c:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_SIGNAL_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)64;
 8007c9e:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3340      	adds	r3, #64	; 0x40
 8007ca4:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007ca6:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_RANGE_SIGMA_MM
	g_output_bh_enable[0] += (uint32_t)128;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3380      	adds	r3, #128	; 0x80
 8007cae:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cb0:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_DISTANCE_MM
	g_output_bh_enable[0] += (uint32_t)256;
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007cba:	4a0f      	ldr	r2, [pc, #60]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cbc:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_REFLECTANCE_PERCENT
	g_output_bh_enable[0] += (uint32_t)512;
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cc8:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_TARGET_STATUS
	g_output_bh_enable[0] += (uint32_t)1024;
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cd4:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_MOTION_INDICATOR
	g_output_bh_enable[0] += (uint32_t)2048;
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	4a06      	ldr	r2, [pc, #24]	; (8007cf8 <vl53lmz_create_output_config+0xd8>)
 8007ce0:	6013      	str	r3, [r2, #0]
#endif

	return status;
 8007ce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3740      	adds	r7, #64	; 0x40
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bdb0      	pop	{r4, r5, r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	08012d60 	.word	0x08012d60
 8007cf4:	20005fac 	.word	0x20005fac
 8007cf8:	20000080 	.word	0x20000080

08007cfc <vl53lmz_send_output_config_and_start>:


uint8_t vl53lmz_send_output_config_and_start(
		VL53LMZ_Configuration	  *p_dev ) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08c      	sub	sp, #48	; 0x30
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]

	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8007d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8007d18:	f107 031b 	add.w	r3, r7, #27
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fb5f 	bl	80073e2 <vl53lmz_get_resolution>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	p_dev->data_read_size = 0;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	609a      	str	r2, [r3, #8]
	p_dev->streamcount = 255;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	22ff      	movs	r2, #255	; 0xff
 8007d3c:	711a      	strb	r2, [r3, #4]

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	623b      	str	r3, [r7, #32]
 8007d42:	e072      	b.n	8007e2a <vl53lmz_send_output_config_and_start+0x12e>
	{
		if ((g_output_config[i] == (uint8_t)0)
 8007d44:	4a93      	ldr	r2, [pc, #588]	; (8007f94 <vl53lmz_send_output_config_and_start+0x298>)
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d068      	beq.n	8007e22 <vl53lmz_send_output_config_and_start+0x126>
					|| ((g_output_bh_enable[i/(uint32_t)32]
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	4a90      	ldr	r2, [pc, #576]	; (8007f98 <vl53lmz_send_output_config_and_start+0x29c>)
 8007d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						 &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	fa22 f303 	lsr.w	r3, r2, r3
 8007d64:	f003 0301 	and.w	r3, r3, #1
					|| ((g_output_bh_enable[i/(uint32_t)32]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05a      	beq.n	8007e22 <vl53lmz_send_output_config_and_start+0x126>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(g_output_config[i]);
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4a88      	ldr	r2, [pc, #544]	; (8007f94 <vl53lmz_send_output_config_and_start+0x298>)
 8007d72:	4413      	add	r3, r2
 8007d74:	61fb      	str	r3, [r7, #28]
		if ( (bh_ptr->type >= 0x1) && (bh_ptr->type < 0x0d))
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d03e      	beq.n	8007e02 <vl53lmz_send_output_config_and_start+0x106>
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b0c      	cmp	r3, #12
 8007d90:	d837      	bhi.n	8007e02 <vl53lmz_send_output_config_and_start+0x106>
		{
			if ( bh_ptr->idx >= 0x54d0 ) {
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d91e      	bls.n	8007ddc <vl53lmz_send_output_config_and_start+0xe0>
				/* might be a zone or target data block */
				if ( bh_ptr->idx < (0x5890) )
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	885b      	ldrh	r3, [r3, #2]
 8007da2:	f645 028f 	movw	r2, #22671	; 0x588f
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d809      	bhi.n	8007dbe <vl53lmz_send_output_config_and_start+0xc2>
				{
					/* it is zone data (does not depend on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution;
 8007daa:	7efb      	ldrb	r3, [r7, #27]
 8007dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007db0:	b299      	uxth	r1, r3
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	8813      	ldrh	r3, [r2, #0]
 8007db6:	f361 130f 	bfi	r3, r1, #4, #12
 8007dba:	8013      	strh	r3, [r2, #0]
 8007dbc:	e00e      	b.n	8007ddc <vl53lmz_send_output_config_and_start+0xe0>
				}
				else if (bh_ptr->idx < (uint16_t)(0x6C90))
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	f646 428f 	movw	r2, #27791	; 0x6c8f
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d808      	bhi.n	8007ddc <vl53lmz_send_output_config_and_start+0xe0>
				{
					/* it is a per-target data block (depends on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution * VL53LMZ_NB_TARGET_PER_ZONE;
 8007dca:	7efb      	ldrb	r3, [r7, #27]
 8007dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dd0:	b299      	uxth	r1, r3
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	8813      	ldrh	r3, [r2, #0]
 8007dd6:	f361 130f 	bfi	r3, r1, #4, #12
 8007dda:	8013      	strh	r3, [r2, #0]
				}
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	7812      	ldrb	r2, [r2, #0]
 8007de4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	4611      	mov	r1, r2
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8007df4:	b292      	uxth	r2, r2
 8007df6:	fb01 f202 	mul.w	r2, r1, r2
 8007dfa:	441a      	add	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	609a      	str	r2, [r3, #8]
 8007e00:	e009      	b.n	8007e16 <vl53lmz_send_output_config_and_start+0x11a>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	8812      	ldrh	r2, [r2, #0]
 8007e0a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	441a      	add	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]
		}
		p_dev->data_read_size += (uint32_t)4;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	609a      	str	r2, [r3, #8]
 8007e20:	e000      	b.n	8007e24 <vl53lmz_send_output_config_and_start+0x128>
			continue;
 8007e22:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	3301      	adds	r3, #1
 8007e28:	623b      	str	r3, [r7, #32]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	2b1f      	cmp	r3, #31
 8007e2e:	d989      	bls.n	8007d44 <vl53lmz_send_output_config_and_start+0x48>
	}
	p_dev->data_read_size += (uint32_t)24;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f103 0218 	add.w	r2, r3, #24
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	609a      	str	r2, [r3, #8]


	if (p_dev->data_read_size > VL53LMZ_MAX_RESULTS_SIZE) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f641 62c8 	movw	r2, #7880	; 0x1ec8
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d905      	bls.n	8007e54 <vl53lmz_send_output_config_and_start+0x158>
		status |= VL53LMZ_STATUS_ERROR;
 8007e48:	23ff      	movs	r3, #255	; 0xff
 8007e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return status;
 8007e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e52:	e09b      	b.n	8007f8c <vl53lmz_send_output_config_and_start+0x290>
	}

	status |= vl53lmz_dci_write_data(p_dev,
 8007e54:	2380      	movs	r3, #128	; 0x80
 8007e56:	f64d 1280 	movw	r2, #55680	; 0xd980
 8007e5a:	494e      	ldr	r1, [pc, #312]	; (8007f94 <vl53lmz_send_output_config_and_start+0x298>)
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff fe13 	bl	8007a88 <vl53lmz_dci_write_data>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_config), VL53LMZ_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(g_output_config));

	header_config[0] = p_dev->data_read_size;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	613b      	str	r3, [r7, #16]
	header_config[1] = i + (uint32_t)1;
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]

	status |= vl53lmz_dci_write_data(p_dev,
 8007e7c:	f107 0110 	add.w	r1, r7, #16
 8007e80:	2308      	movs	r3, #8
 8007e82:	f64d 1268 	movw	r2, #55656	; 0xd968
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fdfe 	bl	8007a88 <vl53lmz_dci_write_data>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(header_config), VL53LMZ_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53lmz_dci_write_data(p_dev,
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	f64d 1270 	movw	r2, #55664	; 0xd970
 8007ea0:	493d      	ldr	r1, [pc, #244]	; (8007f98 <vl53lmz_send_output_config_and_start+0x29c>)
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff fdf0 	bl	8007a88 <vl53lmz_dci_write_data>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_bh_enable), VL53LMZ_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(g_output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd fea8 	bl	8005c14 <WrByte>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2205      	movs	r2, #5
 8007ed6:	2109      	movs	r1, #9
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd fe9b 	bl	8005c14 <WrByte>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fd fe8d 	bl	8005c14 <WrByte>
 8007efa:	4603      	mov	r3, r0
 8007efc:	461a      	mov	r2, r3
 8007efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53LMZ_UI_CMD_END -
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f107 020c 	add.w	r2, r7, #12
 8007f0e:	2304      	movs	r3, #4
 8007f10:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8007f14:	f7fd fea6 	bl	8005c64 <WrMulti>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8007f26:	2303      	movs	r3, #3
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	23ff      	movs	r3, #255	; 0xff
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007f32:	2201      	movs	r2, #1
 8007f34:	2104      	movs	r1, #4
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fd ff4e 	bl	8005dd8 <_vl53lmz_poll_for_answer>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f44:	4313      	orrs	r3, r2
 8007f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53lmz_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f203 5104 	addw	r1, r3, #1284	; 0x504
	status |= vl53lmz_dci_read_data(p_dev,
 8007f50:	230c      	movs	r3, #12
 8007f52:	f245 4240 	movw	r2, #21568	; 0x5440
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fd0c 	bl	8007974 <vl53lmz_dci_read_data>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	833b      	strh	r3, [r7, #24]
	if(tmp != p_dev->data_read_size) {
 8007f76:	8b3b      	ldrh	r3, [r7, #24]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d002      	beq.n	8007f88 <vl53lmz_send_output_config_and_start+0x28c>
		status |= VL53LMZ_STATUS_ERROR;
 8007f82:	23ff      	movs	r3, #255	; 0xff
 8007f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8007f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3728      	adds	r7, #40	; 0x28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20005fac 	.word	0x20005fac
 8007f98:	20000080 	.word	0x20000080

08007f9c <_vl53lmz_poll_for_answer>:

static uint8_t _vl53lmz_poll_for_answer(
		VL53LMZ_Configuration   *p_dev,
		uint16_t 				address,
		uint8_t 				expected_value)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	807b      	strh	r3, [r7, #2]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	707b      	strb	r3, [r7, #1]
	uint8_t status = VL53LMZ_STATUS_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), 
 8007fb4:	6878      	ldr	r0, [r7, #4]
                                  address, p_dev->temp_buffer, 4);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), 
 8007fbc:	8879      	ldrh	r1, [r7, #2]
 8007fbe:	2304      	movs	r3, #4
 8007fc0:	f7fd fe70 	bl	8005ca4 <RdMulti>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	210a      	movs	r1, #10
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd fed0 	bl	8005d78 <WaitMs>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	73fb      	strb	r3, [r7, #15]
		
                /* 2s timeout or FW error*/
		if((timeout >= (uint8_t)200) 
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2bc7      	cmp	r3, #199	; 0xc7
 8007fe6:	d804      	bhi.n	8007ff2 <_vl53lmz_poll_for_answer+0x56>
                   || (p_dev->temp_buffer[2] >= (uint8_t) 0x7f))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8007fee:	2b7e      	cmp	r3, #126	; 0x7e
 8007ff0:	d904      	bls.n	8007ffc <_vl53lmz_poll_for_answer+0x60>
		{
			status |= VL53LMZ_MCU_ERROR;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007ff8:	73fb      	strb	r3, [r7, #15]
			break;
 8007ffa:	e008      	b.n	800800e <_vl53lmz_poll_for_answer+0x72>
		}
                else
                {
                  timeout++;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	3301      	adds	r3, #1
 8008000:	73bb      	strb	r3, [r7, #14]
                }
	}while ((p_dev->temp_buffer[0x1]) != expected_value);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8008008:	787a      	ldrb	r2, [r7, #1]
 800800a:	429a      	cmp	r2, r3
 800800c:	d1d2      	bne.n	8007fb4 <_vl53lmz_poll_for_answer+0x18>
        
	return status;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <_vl53lmz_program_output_config>:
 * program the output using the macro defined into the 'platform.h' file.
 */

static uint8_t _vl53lmz_program_output_config(
		VL53LMZ_Configuration 		 *p_dev)
{
 8008018:	b590      	push	{r4, r7, lr}
 800801a:	b09f      	sub	sp, #124	; 0x7c
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	uint32_t i;
	union Block_header *bh_ptr;
    uint32_t header_config[2] = {0, 0};
 8008026:	2300      	movs	r3, #0
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
 800802a:	2300      	movs	r3, #0
 800802c:	667b      	str	r3, [r7, #100]	; 0x64
	

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 800802e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff f9d4 	bl	80073e2 <vl53lmz_get_resolution>
 800803a:	4603      	mov	r3, r0
 800803c:	461a      	mov	r2, r3
 800803e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008042:	4313      	orrs	r3, r2
 8008044:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	p_dev->data_read_size = 0;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	609a      	str	r2, [r3, #8]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800804e:	4b63      	ldr	r3, [pc, #396]	; (80081dc <_vl53lmz_program_output_config+0x1c4>)
 8008050:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8008054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00000000U,
			0x00000000U,
			0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={
 800805a:	4a61      	ldr	r2, [pc, #388]	; (80081e0 <_vl53lmz_program_output_config+0x1c8>)
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4611      	mov	r1, r2
 8008062:	2244      	movs	r2, #68	; 0x44
 8008064:	4618      	mov	r0, r3
 8008066:	f004 fbb4 	bl	800c7d2 <memcpy>
			0xA2640081U,
			0xA26C0084U,
			0xA28C0082U};

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800806a:	2300      	movs	r3, #0
 800806c:	677b      	str	r3, [r7, #116]	; 0x74
 800806e:	e073      	b.n	8008158 <_vl53lmz_program_output_config+0x140>
	{
		if ((output[i] == (uint8_t)0) 
 8008070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	3378      	adds	r3, #120	; 0x78
 8008076:	443b      	add	r3, r7
 8008078:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d067      	beq.n	8008150 <_vl53lmz_program_output_config+0x138>
                    || ((output_bh_enable[i/(uint32_t)32]
 8008080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	3378      	adds	r3, #120	; 0x78
 8008088:	443b      	add	r3, r7
 800808a:	f853 2c28 	ldr.w	r2, [r3, #-40]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 800808e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	fa22 f303 	lsr.w	r3, r2, r3
 8008098:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d057      	beq.n	8008150 <_vl53lmz_program_output_config+0x138>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80080a0:	f107 020c 	add.w	r2, r7, #12
 80080a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80080ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d03a      	beq.n	8008130 <_vl53lmz_program_output_config+0x118>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80080ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d833      	bhi.n	8008130 <_vl53lmz_program_output_config+0x118>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80080c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	f245 42cf 	movw	r2, #21711	; 0x54cf
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d910      	bls.n	80080f6 <_vl53lmz_program_output_config+0xde>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80080d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d6:	885b      	ldrh	r3, [r3, #2]
 80080d8:	f645 028f 	movw	r2, #22671	; 0x588f
 80080dc:	4293      	cmp	r3, r2
 80080de:	d80a      	bhi.n	80080f6 <_vl53lmz_program_output_config+0xde>
			{
				bh_ptr->size = resolution;
 80080e0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80080e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080e8:	b299      	uxth	r1, r3
 80080ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080ec:	8813      	ldrh	r3, [r2, #0]
 80080ee:	f361 130f 	bfi	r3, r1, #4, #12
 80080f2:	8013      	strh	r3, [r2, #0]
 80080f4:	e009      	b.n	800810a <_vl53lmz_program_output_config+0xf2>
			}	
			else 
			{
				bh_ptr->size = (uint8_t)(resolution 
 80080f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80080fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fe:	b299      	uxth	r1, r3
 8008100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008102:	8813      	ldrh	r3, [r2, #0]
 8008104:	f361 130f 	bfi	r3, r1, #4, #12
 8008108:	8013      	strh	r3, [r2, #0]
                                  * (uint8_t)VL53LMZ_NB_TARGET_PER_ZONE);
			}

                        
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008110:	7812      	ldrb	r2, [r2, #0]
 8008112:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	4611      	mov	r1, r2
 800811a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008122:	b292      	uxth	r2, r2
 8008124:	fb01 f202 	mul.w	r2, r1, r2
 8008128:	441a      	add	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	609a      	str	r2, [r3, #8]
 800812e:	e009      	b.n	8008144 <_vl53lmz_program_output_config+0x12c>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008136:	8812      	ldrh	r2, [r2, #0]
 8008138:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800813c:	b292      	uxth	r2, r2
 800813e:	441a      	add	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	609a      	str	r2, [r3, #8]
		}

		p_dev->data_read_size += (uint32_t)4;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	609a      	str	r2, [r3, #8]
 800814e:	e000      	b.n	8008152 <_vl53lmz_program_output_config+0x13a>
			continue;
 8008150:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008154:	3301      	adds	r3, #1
 8008156:	677b      	str	r3, [r7, #116]	; 0x74
 8008158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800815a:	2b10      	cmp	r3, #16
 800815c:	d988      	bls.n	8008070 <_vl53lmz_program_output_config+0x58>
	}
	p_dev->data_read_size += (uint32_t)24;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f103 0218 	add.w	r2, r3, #24
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	609a      	str	r2, [r3, #8]

	status |= vl53lmz_dci_write_data(p_dev,
 800816a:	f107 010c 	add.w	r1, r7, #12
 800816e:	2344      	movs	r3, #68	; 0x44
 8008170:	f64d 1280 	movw	r2, #55680	; 0xd980
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fc87 	bl	8007a88 <vl53lmz_dci_write_data>
 800817a:	4603      	mov	r3, r0
 800817c:	461a      	mov	r2, r3
 800817e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008182:	4313      	orrs	r3, r2
 8008184:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			(uint8_t*)&(output), 
                        VL53LMZ_DCI_OUTPUT_LIST, (uint16_t)sizeof(output));
        
	header_config[0] = p_dev->data_read_size;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	663b      	str	r3, [r7, #96]	; 0x60
	header_config[1] = i + (uint32_t)1;
 800818e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008190:	3301      	adds	r3, #1
 8008192:	667b      	str	r3, [r7, #100]	; 0x64

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&(header_config),
 8008194:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008198:	2308      	movs	r3, #8
 800819a:	f64d 1268 	movw	r2, #55656	; 0xd968
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff fc72 	bl	8007a88 <vl53lmz_dci_write_data>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			VL53LMZ_DCI_OUTPUT_CONFIG,
                        (uint16_t)sizeof(header_config));
	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&(output_bh_enable),
 80081b2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80081b6:	2310      	movs	r3, #16
 80081b8:	f64d 1270 	movw	r2, #55664	; 0xd970
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fc63 	bl	8007a88 <vl53lmz_dci_write_data>
 80081c2:	4603      	mov	r3, r0
 80081c4:	461a      	mov	r2, r3
 80081c6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			VL53LMZ_DCI_OUTPUT_ENABLES,
                        (uint16_t)sizeof(output_bh_enable));

	return status;
 80081d0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	377c      	adds	r7, #124	; 0x7c
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd90      	pop	{r4, r7, pc}
 80081dc:	08012d90 	.word	0x08012d90
 80081e0:	08012da0 	.word	0x08012da0

080081e4 <vl53lmz_calibrate_xtalk>:
uint8_t vl53lmz_calibrate_xtalk(
		VL53LMZ_Configuration		*p_dev,
		uint16_t			reflectance_percent,
		uint8_t				nb_samples,
		uint16_t			distance_mm)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b092      	sub	sp, #72	; 0x48
 80081e8:	af04      	add	r7, sp, #16
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	461a      	mov	r2, r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	817b      	strh	r3, [r7, #10]
 80081f6:	460b      	mov	r3, r1
 80081f8:	727b      	strb	r3, [r7, #9]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
	uint16_t timeout = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8008202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008206:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x03, 0x04};
 8008208:	4ab4      	ldr	r2, [pc, #720]	; (80084dc <vl53lmz_calibrate_xtalk+0x2f8>)
 800820a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800820e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008212:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t continue_loop = 1, status = VL53LMZ_STATUS_OK;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800821c:	2300      	movs	r3, #0
 800821e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t resolution, frequency, target_order, sharp_prct, ranging_mode;
	uint32_t integration_time_ms, xtalk_margin;
        
	uint16_t reflectance = reflectance_percent;
 8008222:	897b      	ldrh	r3, [r7, #10]
 8008224:	82fb      	strh	r3, [r7, #22]
	uint8_t	samples = nb_samples;
 8008226:	7a7b      	ldrb	r3, [r7, #9]
 8008228:	757b      	strb	r3, [r7, #21]
	uint16_t distance = distance_mm;
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	827b      	strh	r3, [r7, #18]

	/* Get initial configuration */
	status |= vl53lmz_get_resolution(p_dev, &resolution);
 800822e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008232:	4619      	mov	r1, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff f8d4 	bl	80073e2 <vl53lmz_get_resolution>
 800823a:	4603      	mov	r3, r0
 800823c:	461a      	mov	r2, r3
 800823e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008242:	4313      	orrs	r3, r2
 8008244:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_get_ranging_frequency_hz(p_dev, &frequency);
 8008248:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800824c:	4619      	mov	r1, r3
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff f9c0 	bl	80075d4 <vl53lmz_get_ranging_frequency_hz>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
 8008258:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800825c:	4313      	orrs	r3, r2
 800825e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_get_integration_time_ms(p_dev, &integration_time_ms);
 8008262:	f107 031c 	add.w	r3, r7, #28
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff f9f3 	bl	8007654 <vl53lmz_get_integration_time_ms>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008276:	4313      	orrs	r3, r2
 8008278:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_get_sharpener_percent(p_dev, &sharp_prct);
 800827c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008280:	4619      	mov	r1, r3
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fa48 	bl	8007718 <vl53lmz_get_sharpener_percent>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008290:	4313      	orrs	r3, r2
 8008292:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_get_target_order(p_dev, &target_order);
 8008296:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800829a:	4619      	mov	r1, r3
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff faa1 	bl	80077e4 <vl53lmz_get_target_order>
 80082a2:	4603      	mov	r3, r0
 80082a4:	461a      	mov	r2, r3
 80082a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_get_xtalk_margin(p_dev, &xtalk_margin);
 80082b0:	f107 0318 	add.w	r3, r7, #24
 80082b4:	4619      	mov	r1, r3
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fa96 	bl	80087e8 <vl53lmz_get_xtalk_margin>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_get_ranging_mode(p_dev, &ranging_mode);
 80082ca:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80082ce:	4619      	mov	r1, r3
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fad2 	bl	800787a <vl53lmz_get_ranging_mode>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80082de:	4313      	orrs	r3, r2
 80082e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	/* Check input arguments validity */
	if(((reflectance < (uint16_t)1) || (reflectance > (uint16_t)99))
 80082e4:	8afb      	ldrh	r3, [r7, #22]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d011      	beq.n	800830e <vl53lmz_calibrate_xtalk+0x12a>
 80082ea:	8afb      	ldrh	r3, [r7, #22]
 80082ec:	2b63      	cmp	r3, #99	; 0x63
 80082ee:	d80e      	bhi.n	800830e <vl53lmz_calibrate_xtalk+0x12a>
		|| ((distance < (uint16_t)600) || (distance > (uint16_t)3000))
 80082f0:	8a7b      	ldrh	r3, [r7, #18]
 80082f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80082f6:	d30a      	bcc.n	800830e <vl53lmz_calibrate_xtalk+0x12a>
 80082f8:	8a7b      	ldrh	r3, [r7, #18]
 80082fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80082fe:	4293      	cmp	r3, r2
 8008300:	d805      	bhi.n	800830e <vl53lmz_calibrate_xtalk+0x12a>
		|| ((samples < (uint8_t)1) || (samples > (uint8_t)16)))
 8008302:	7d7b      	ldrb	r3, [r7, #21]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <vl53lmz_calibrate_xtalk+0x12a>
 8008308:	7d7b      	ldrb	r3, [r7, #21]
 800830a:	2b10      	cmp	r3, #16
 800830c:	d906      	bls.n	800831c <vl53lmz_calibrate_xtalk+0x138>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 800830e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008312:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8008316:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800831a:	e0f6      	b.n	800850a <vl53lmz_calibrate_xtalk+0x326>
	}
	else
	{
		status |= vl53lmz_set_resolution(p_dev,
 800831c:	2140      	movs	r1, #64	; 0x40
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff f884 	bl	800742c <vl53lmz_set_resolution>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800832c:	4313      	orrs	r3, r2
 800832e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_RESOLUTION_8X8);

		/* Send Xtalk calibration buffer */
                (void)memcpy(p_dev->temp_buffer, VL53LMZ_CALIBRATE_XTALK,
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8008338:	4a69      	ldr	r2, [pc, #420]	; (80084e0 <vl53lmz_calibrate_xtalk+0x2fc>)
 800833a:	4618      	mov	r0, r3
 800833c:	4611      	mov	r1, r2
 800833e:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 8008342:	461a      	mov	r2, r3
 8008344:	f004 fa45 	bl	800c7d2 <memcpy>
                       sizeof(VL53LMZ_CALIBRATE_XTALK));
		status |= WrMulti(&(p_dev->platform), 0x2c28,
 8008348:	68f8      	ldr	r0, [r7, #12]
				p_dev->temp_buffer, 
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= WrMulti(&(p_dev->platform), 0x2c28,
 8008350:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 8008354:	f642 4128 	movw	r1, #11304	; 0x2c28
 8008358:	f7fd fc84 	bl	8005c64 <WrMulti>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008364:	4313      	orrs	r3, r2
 8008366:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                       (uint16_t)sizeof(VL53LMZ_CALIBRATE_XTALK));
		status |= _vl53lmz_poll_for_answer(p_dev,
 800836a:	2203      	movs	r2, #3
 800836c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff fe13 	bl	8007f9c <_vl53lmz_poll_for_answer>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800837e:	4313      	orrs	r3, r2
 8008380:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_UI_CMD_STATUS, 0x3);

		/* Format input argument */
		reflectance = reflectance * (uint16_t)16;
 8008384:	8afb      	ldrh	r3, [r7, #22]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	b29b      	uxth	r3, r3
 800838a:	82fb      	strh	r3, [r7, #22]
		distance = distance * (uint16_t)4;
 800838c:	8a7b      	ldrh	r3, [r7, #18]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	b29b      	uxth	r3, r3
 8008392:	827b      	strh	r3, [r7, #18]

		/* Update required fields */
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f203 5104 	addw	r1, r3, #1284	; 0x504
 800839a:	2300      	movs	r3, #0
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	2302      	movs	r3, #2
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	f107 0312 	add.w	r3, r7, #18
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	2308      	movs	r3, #8
 80083aa:	f245 4270 	movw	r2, #21616	; 0x5470
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7ff fc0a 	bl	8007bc8 <vl53lmz_dci_replace_data>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461a      	mov	r2, r3
 80083b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80083bc:	4313      	orrs	r3, r2
 80083be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_DCI_CAL_CFG, 8,
                                (uint8_t*)&distance, 2, 0x00);

		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80083c8:	2302      	movs	r3, #2
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	2302      	movs	r3, #2
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	f107 0316 	add.w	r3, r7, #22
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	2308      	movs	r3, #8
 80083d8:	f245 4270 	movw	r2, #21616	; 0x5470
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fbf3 	bl	8007bc8 <vl53lmz_dci_replace_data>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_DCI_CAL_CFG, 8,
                                (uint8_t*)&reflectance, 2,0x02);

		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80083f6:	2304      	movs	r3, #4
 80083f8:	9302      	str	r3, [sp, #8]
 80083fa:	2301      	movs	r3, #1
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	f107 0315 	add.w	r3, r7, #21
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	2308      	movs	r3, #8
 8008406:	f245 4270 	movw	r2, #21616	; 0x5470
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff fbdc 	bl	8007bc8 <vl53lmz_dci_replace_data>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008418:	4313      	orrs	r3, r2
 800841a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_DCI_CAL_CFG, 8,
                                (uint8_t*)&samples, 1, 0x04);

		/* Program output for Xtalk calibration */
		status |= _vl53lmz_program_output_config(p_dev);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fdfa 	bl	8008018 <_vl53lmz_program_output_config>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800842c:	4313      	orrs	r3, r2
 800842e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		/* Start ranging session */
		status |= WrMulti(&(p_dev->platform),
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008438:	2304      	movs	r3, #4
 800843a:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 800843e:	f7fd fc11 	bl	8005c64 <WrMulti>
 8008442:	4603      	mov	r3, r0
 8008444:	461a      	mov	r2, r3
 8008446:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800844a:	4313      	orrs	r3, r2
 800844c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_UI_CMD_END - (uint16_t)(4 - 1),
				(uint8_t*)cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev,
 8008450:	2203      	movs	r2, #3
 8008452:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fda0 	bl	8007f9c <_vl53lmz_poll_for_answer>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008464:	4313      	orrs	r3, r2
 8008466:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				VL53LMZ_UI_CMD_STATUS, 0x3);

		/* Wait for end of calibration */
		do {
			status |= RdMulti(&(p_dev->platform), 
 800846a:	68f8      	ldr	r0, [r7, #12]
                                          0x0, p_dev->temp_buffer, 4);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f203 5204 	addw	r2, r3, #1284	; 0x504
			status |= RdMulti(&(p_dev->platform), 
 8008472:	2304      	movs	r3, #4
 8008474:	2100      	movs	r1, #0
 8008476:	f7fd fc15 	bl	8005ca4 <RdMulti>
 800847a:	4603      	mov	r3, r0
 800847c:	461a      	mov	r2, r3
 800847e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008482:	4313      	orrs	r3, r2
 8008484:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			if(p_dev->temp_buffer[0] != VL53LMZ_STATUS_ERROR)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d019      	beq.n	80084c6 <vl53lmz_calibrate_xtalk+0x2e2>
			{
				/* Coverglass too good for Xtalk calibration */
				if((p_dev->temp_buffer[2] >= (uint8_t)0x7f) &&
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8008498:	2b7e      	cmp	r3, #126	; 0x7e
 800849a:	d910      	bls.n	80084be <vl53lmz_calibrate_xtalk+0x2da>
				(((uint16_t)(p_dev->temp_buffer[3] & 
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
                                 (uint16_t)0x80) >> 7) == (uint16_t)1))
 80084a2:	09db      	lsrs	r3, r3, #7
 80084a4:	b2db      	uxtb	r3, r3
				if((p_dev->temp_buffer[2] >= (uint8_t)0x7f) &&
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d109      	bne.n	80084be <vl53lmz_calibrate_xtalk+0x2da>
				{
					(void)memcpy(p_dev->xtalk_data, 
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 70fe 	add.w	r0, r3, #508	; 0x1fc
                                               p_dev->default_xtalk,
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
					(void)memcpy(p_dev->xtalk_data, 
 80084b4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80084b8:	4619      	mov	r1, r3
 80084ba:	f004 f98a 	bl	800c7d2 <memcpy>
                                               VL53LMZ_XTALK_BUFFER_SIZE);
				}
				continue_loop = (uint8_t)0;
 80084be:	2300      	movs	r3, #0
 80084c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80084c4:	e01d      	b.n	8008502 <vl53lmz_calibrate_xtalk+0x31e>
			}
			else if(timeout >= (uint16_t)400)
 80084c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084c8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80084cc:	d30a      	bcc.n	80084e4 <vl53lmz_calibrate_xtalk+0x300>
			{
				status |= VL53LMZ_STATUS_ERROR;
 80084ce:	23ff      	movs	r3, #255	; 0xff
 80084d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				continue_loop = (uint8_t)0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80084da:	e012      	b.n	8008502 <vl53lmz_calibrate_xtalk+0x31e>
 80084dc:	08012de4 	.word	0x08012de4
 80084e0:	08029078 	.word	0x08029078
			}
			else
			{
				timeout++;
 80084e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084e6:	3301      	adds	r3, #1
 80084e8:	86fb      	strh	r3, [r7, #54]	; 0x36
				status |= WaitMs(&(p_dev->platform), 50);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2132      	movs	r1, #50	; 0x32
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fd fc42 	bl	8005d78 <WaitMs>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461a      	mov	r2, r3
 80084f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			}

		}while (continue_loop == (uint8_t)1);
 8008502:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008506:	2b01      	cmp	r3, #1
 8008508:	d0af      	beq.n	800846a <vl53lmz_calibrate_xtalk+0x286>
	}

	/* Save Xtalk data into the Xtalk buffer */
        (void)memcpy(p_dev->temp_buffer, VL53LMZ_GET_XTALK_CMD,
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8008510:	4a62      	ldr	r2, [pc, #392]	; (800869c <vl53lmz_calibrate_xtalk+0x4b8>)
 8008512:	4618      	mov	r0, r3
 8008514:	4611      	mov	r1, r2
 8008516:	2348      	movs	r3, #72	; 0x48
 8008518:	461a      	mov	r2, r3
 800851a:	f004 f95a 	bl	800c7d2 <memcpy>
               sizeof(VL53LMZ_GET_XTALK_CMD));
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 800851e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, 
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 8008526:	2348      	movs	r3, #72	; 0x48
 8008528:	f642 71b8 	movw	r1, #12216	; 0x2fb8
 800852c:	f7fd fb9a 	bl	8005c64 <WrMulti>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008538:	4313      	orrs	r3, r2
 800853a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                        (uint16_t)sizeof(VL53LMZ_GET_XTALK_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev,VL53LMZ_UI_CMD_STATUS, 0x03);
 800853e:	2203      	movs	r2, #3
 8008540:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff fd29 	bl	8007f9c <_vl53lmz_poll_for_answer>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008552:	4313      	orrs	r3, r2
 8008554:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8008558:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, 
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8008560:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8008564:	f642 4104 	movw	r1, #11268	; 0x2c04
 8008568:	f7fd fb9c 	bl	8005ca4 <RdMulti>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008574:	4313      	orrs	r3, r2
 8008576:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                        VL53LMZ_XTALK_BUFFER_SIZE + (uint16_t)4);

	(void)memcpy(&(p_dev->xtalk_data[0]), &(p_dev->temp_buffer[8]),
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f503 70fe 	add.w	r0, r3, #508	; 0x1fc
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8008586:	f44f 7240 	mov.w	r2, #768	; 0x300
 800858a:	4619      	mov	r1, r3
 800858c:	f004 f921 	bl	800c7d2 <memcpy>
			VL53LMZ_XTALK_BUFFER_SIZE - (uint16_t)8);
	(void)memcpy(&(p_dev->xtalk_data[VL53LMZ_XTALK_BUFFER_SIZE
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8008596:	461a      	mov	r2, r3
 8008598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800859c:	cb03      	ldmia	r3!, {r0, r1}
 800859e:	6010      	str	r0, [r2, #0]
 80085a0:	6051      	str	r1, [r2, #4]
                       - (uint16_t)8]), footer, sizeof(footer));

	/* Reset default buffer */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 80085ac:	f642 4134 	movw	r1, #11316	; 0x2c34
 80085b0:	f7fd fb58 	bl	8005c64 <WrMulti>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80085bc:	4313      	orrs	r3, r2
 80085be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			p_dev->default_configuration,
			VL53LMZ_CONFIGURATION_SIZE);
	status |= _vl53lmz_poll_for_answer(p_dev,VL53LMZ_UI_CMD_STATUS, 0x03);
 80085c2:	2203      	movs	r2, #3
 80085c4:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fce7 	bl	8007f9c <_vl53lmz_poll_for_answer>
 80085ce:	4603      	mov	r3, r0
 80085d0:	461a      	mov	r2, r3
 80085d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	/* Reset initial configuration */
	status |= vl53lmz_set_resolution(p_dev, resolution);
 80085dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e0:	4619      	mov	r1, r3
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7fe ff22 	bl	800742c <vl53lmz_set_resolution>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_set_ranging_frequency_hz(p_dev, frequency);
 80085f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7ff f808 	bl	8007612 <vl53lmz_set_ranging_frequency_hz>
 8008602:	4603      	mov	r3, r0
 8008604:	461a      	mov	r2, r3
 8008606:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800860a:	4313      	orrs	r3, r2
 800860c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_set_integration_time_ms(p_dev, integration_time_ms);
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4619      	mov	r1, r3
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff f849 	bl	80076ac <vl53lmz_set_integration_time_ms>
 800861a:	4603      	mov	r3, r0
 800861c:	461a      	mov	r2, r3
 800861e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008622:	4313      	orrs	r3, r2
 8008624:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_set_sharpener_percent(p_dev, sharp_prct);
 8008628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800862c:	4619      	mov	r1, r3
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff f8a0 	bl	8007774 <vl53lmz_set_sharpener_percent>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800863c:	4313      	orrs	r3, r2
 800863e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_set_target_order(p_dev, target_order);
 8008642:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff f8ea 	bl	8007822 <vl53lmz_set_target_order>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008656:	4313      	orrs	r3, r2
 8008658:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_set_xtalk_margin(p_dev, xtalk_margin);
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f8e7 	bl	8008834 <vl53lmz_set_xtalk_margin>
 8008666:	4603      	mov	r3, r0
 8008668:	461a      	mov	r2, r3
 800866a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800866e:	4313      	orrs	r3, r2
 8008670:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	status |= vl53lmz_set_ranging_mode(p_dev, ranging_mode);
 8008674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008678:	4619      	mov	r1, r3
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7ff f923 	bl	80078c6 <vl53lmz_set_ranging_mode>
 8008680:	4603      	mov	r3, r0
 8008682:	461a      	mov	r2, r3
 8008684:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008688:	4313      	orrs	r3, r2
 800868a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	return status;
 800868e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
}
 8008692:	4618      	mov	r0, r3
 8008694:	3738      	adds	r7, #56	; 0x38
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	08029030 	.word	0x08029030

080086a0 <vl53lmz_get_caldata_xtalk>:

uint8_t vl53lmz_get_caldata_xtalk(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_xtalk_data)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK, resolution;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x03, 0x04};
 80086ae:	4a37      	ldr	r2, [pc, #220]	; (800878c <vl53lmz_get_caldata_xtalk+0xec>)
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086b8:	e883 0003 	stmia.w	r3, {r0, r1}

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 80086bc:	f107 0316 	add.w	r3, r7, #22
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7fe fe8d 	bl	80073e2 <vl53lmz_get_resolution>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_set_resolution(p_dev, VL53LMZ_RESOLUTION_8X8);
 80086d2:	2140      	movs	r1, #64	; 0x40
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7fe fea9 	bl	800742c <vl53lmz_set_resolution>
 80086da:	4603      	mov	r3, r0
 80086dc:	461a      	mov	r2, r3
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	75fb      	strb	r3, [r7, #23]

        (void)memcpy(p_dev->temp_buffer, VL53LMZ_GET_XTALK_CMD,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80086ea:	4a29      	ldr	r2, [pc, #164]	; (8008790 <vl53lmz_get_caldata_xtalk+0xf0>)
 80086ec:	4618      	mov	r0, r3
 80086ee:	4611      	mov	r1, r2
 80086f0:	2348      	movs	r3, #72	; 0x48
 80086f2:	461a      	mov	r2, r3
 80086f4:	f004 f86d 	bl	800c7d2 <memcpy>
               sizeof(VL53LMZ_GET_XTALK_CMD));
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 80086f8:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer,  sizeof(VL53LMZ_GET_XTALK_CMD));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 8008700:	2348      	movs	r3, #72	; 0x48
 8008702:	f642 71b8 	movw	r1, #12216	; 0x2fb8
 8008706:	f7fd faad 	bl	8005c64 <WrMulti>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	4313      	orrs	r3, r2
 8008712:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev,VL53LMZ_UI_CMD_STATUS, 0x03);
 8008714:	2203      	movs	r2, #3
 8008716:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fc3e 	bl	8007f9c <_vl53lmz_poll_for_answer>
 8008720:	4603      	mov	r3, r0
 8008722:	461a      	mov	r2, r3
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	4313      	orrs	r3, r2
 8008728:	75fb      	strb	r3, [r7, #23]
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800872a:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8008732:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8008736:	f642 4104 	movw	r1, #11268	; 0x2c04
 800873a:	f7fd fab3 	bl	8005ca4 <RdMulti>
 800873e:	4603      	mov	r3, r0
 8008740:	461a      	mov	r2, r3
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	4313      	orrs	r3, r2
 8008746:	75fb      	strb	r3, [r7, #23]
                        VL53LMZ_XTALK_BUFFER_SIZE + (uint16_t)4);

	(void)memcpy(&(p_xtalk_data[0]), &(p_dev->temp_buffer[8]),
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 800874e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008752:	4619      	mov	r1, r3
 8008754:	6838      	ldr	r0, [r7, #0]
 8008756:	f004 f83c 	bl	800c7d2 <memcpy>
			VL53LMZ_XTALK_BUFFER_SIZE-(uint16_t)8);
	(void)memcpy(&(p_xtalk_data[VL53LMZ_XTALK_BUFFER_SIZE - (uint16_t)8]),
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008760:	461a      	mov	r2, r3
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	cb03      	ldmia	r3!, {r0, r1}
 8008768:	6010      	str	r0, [r2, #0]
 800876a:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	status |= vl53lmz_set_resolution(p_dev, resolution);
 800876c:	7dbb      	ldrb	r3, [r7, #22]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7fe fe5b 	bl	800742c <vl53lmz_set_resolution>
 8008776:	4603      	mov	r3, r0
 8008778:	461a      	mov	r2, r3
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	4313      	orrs	r3, r2
 800877e:	75fb      	strb	r3, [r7, #23]

	return status;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	08012de4 	.word	0x08012de4
 8008790:	08029030 	.word	0x08029030

08008794 <vl53lmz_set_caldata_xtalk>:

uint8_t vl53lmz_set_caldata_xtalk(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_xtalk_data)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 80087a2:	f107 030e 	add.w	r3, r7, #14
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fe fe1a 	bl	80073e2 <vl53lmz_get_resolution>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	73fb      	strb	r3, [r7, #15]
	(void)memcpy(p_dev->xtalk_data, p_xtalk_data, VL53LMZ_XTALK_BUFFER_SIZE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80087be:	f44f 7242 	mov.w	r2, #776	; 0x308
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f004 f804 	bl	800c7d2 <memcpy>
	status |= vl53lmz_set_resolution(p_dev, resolution);
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fe fe2c 	bl	800742c <vl53lmz_set_resolution>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4313      	orrs	r3, r2
 80087dc:	73fb      	strb	r3, [r7, #15]

	return status;
 80087de:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <vl53lmz_get_xtalk_margin>:

uint8_t vl53lmz_get_xtalk_margin(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			*p_xtalk_margin)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80087fc:	2310      	movs	r3, #16
 80087fe:	f64a 5294 	movw	r2, #44436	; 0xad94
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff f8b6 	bl	8007974 <vl53lmz_dci_read_data>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4313      	orrs	r3, r2
 8008810:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_XTALK_CFG, 16);

	(void)memcpy(p_xtalk_margin, p_dev->temp_buffer, 4);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	601a      	str	r2, [r3, #0]
	*p_xtalk_margin = *p_xtalk_margin/(uint32_t)2048;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	0ada      	lsrs	r2, r3, #11
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	601a      	str	r2, [r3, #0]

	return status;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <vl53lmz_set_xtalk_margin>:

uint8_t vl53lmz_set_xtalk_margin(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			xtalk_margin)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af04      	add	r7, sp, #16
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
        uint32_t margin_kcps = xtalk_margin;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	60bb      	str	r3, [r7, #8]

	if(margin_kcps > (uint32_t)10000)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f242 7210 	movw	r2, #10000	; 0x2710
 800884c:	4293      	cmp	r3, r2
 800884e:	d904      	bls.n	800885a <vl53lmz_set_xtalk_margin+0x26>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8008856:	73fb      	strb	r3, [r7, #15]
 8008858:	e017      	b.n	800888a <vl53lmz_set_xtalk_margin+0x56>
	}
	else
	{
		margin_kcps = margin_kcps*(uint32_t)2048;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	02db      	lsls	r3, r3, #11
 800885e:	60bb      	str	r3, [r7, #8]
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8008866:	2300      	movs	r3, #0
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	2304      	movs	r3, #4
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2310      	movs	r3, #16
 8008876:	f64a 5294 	movw	r2, #44436	; 0xad94
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7ff f9a4 	bl	8007bc8 <vl53lmz_dci_replace_data>
 8008880:	4603      	mov	r3, r0
 8008882:	461a      	mov	r2, r3
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4313      	orrs	r3, r2
 8008888:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_XTALK_CFG, 16,
                                (uint8_t*)&margin_kcps, 4, 0x00);
	}

	return status;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <apps_layer_vl53lmz_Configure>:



int apps_layer_vl53lmz_Configure(VL53LMZ_Configuration *p_lmz_dev,
						struct Params_t *p_Params)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	int status = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]

	//uart_printf("===============Program Resolution (offset and xtalk)\n");
	status = vl53lmz_set_resolution(p_lmz_dev, p_Params->Resolution==16 ? VL53LMZ_RESOLUTION_4X4 : VL53LMZ_RESOLUTION_8X8);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	d101      	bne.n	80088ae <apps_layer_vl53lmz_Configure+0x1a>
 80088aa:	2310      	movs	r3, #16
 80088ac:	e000      	b.n	80088b0 <apps_layer_vl53lmz_Configure+0x1c>
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fe fdba 	bl	800742c <vl53lmz_set_resolution>
 80088b8:	4603      	mov	r3, r0
 80088ba:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <apps_layer_vl53lmz_Configure+0x3e>
		uart_printf("ERROR at %s(%d) : vl53lmz_set_resolution failed : %d\n",__func__, __LINE__,status);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	222f      	movs	r2, #47	; 0x2f
 80088c6:	4941      	ldr	r1, [pc, #260]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 80088c8:	4841      	ldr	r0, [pc, #260]	; (80089d0 <apps_layer_vl53lmz_Configure+0x13c>)
 80088ca:	f003 fd39 	bl	800c340 <iprintf>
		return status;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	e077      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
	}

	status = vl53lmz_set_ranging_frequency_hz(p_lmz_dev, (1000/p_Params->RangingPeriod));
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088da:	fb92 f3f3 	sdiv	r3, r2, r3
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fe fe95 	bl	8007612 <vl53lmz_set_ranging_frequency_hz>
 80088e8:	4603      	mov	r3, r0
 80088ea:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <apps_layer_vl53lmz_Configure+0x6e>
		uart_printf("ERROR at %s(%d) : vl53lmz_set_ranging_period_ms failed : %d\n",__func__, __LINE__,status);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2235      	movs	r2, #53	; 0x35
 80088f6:	4935      	ldr	r1, [pc, #212]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 80088f8:	4836      	ldr	r0, [pc, #216]	; (80089d4 <apps_layer_vl53lmz_Configure+0x140>)
 80088fa:	f003 fd21 	bl	800c340 <iprintf>
		return status;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	e05f      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
	}

	status = vl53lmz_set_integration_time_ms(p_lmz_dev, p_Params->IntegrationTime);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fe fecf 	bl	80076ac <vl53lmz_set_integration_time_ms>
 800890e:	4603      	mov	r3, r0
 8008910:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <apps_layer_vl53lmz_Configure+0x94>
		uart_printf("ERROR at %s(%d) : vl53lmz_set_integration_time_ms failed : %d\n",__func__, __LINE__,status);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	223b      	movs	r2, #59	; 0x3b
 800891c:	492b      	ldr	r1, [pc, #172]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 800891e:	482e      	ldr	r0, [pc, #184]	; (80089d8 <apps_layer_vl53lmz_Configure+0x144>)
 8008920:	f003 fd0e 	bl	800c340 <iprintf>
		return status;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	e04c      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
	}

	status = vl53lmz_set_xtalk_margin(p_lmz_dev, 50);
 8008928:	2132      	movs	r1, #50	; 0x32
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff ff82 	bl	8008834 <vl53lmz_set_xtalk_margin>
 8008930:	4603      	mov	r3, r0
 8008932:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <apps_layer_vl53lmz_Configure+0xb6>
		uart_printf("ERROR at %s(%d) : vl53lmz_set_xtalk_margin failed : %d\n",__func__, __LINE__,status);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2241      	movs	r2, #65	; 0x41
 800893e:	4923      	ldr	r1, [pc, #140]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 8008940:	4826      	ldr	r0, [pc, #152]	; (80089dc <apps_layer_vl53lmz_Configure+0x148>)
 8008942:	f003 fcfd 	bl	800c340 <iprintf>
		return status;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e03b      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
	}

	// Set Closest target first
	status = vl53lmz_set_target_order(p_lmz_dev, VL53LMZ_TARGET_ORDER_CLOSEST);
 800894a:	2101      	movs	r1, #1
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ff68 	bl	8007822 <vl53lmz_set_target_order>
 8008952:	4603      	mov	r3, r0
 8008954:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <apps_layer_vl53lmz_Configure+0xd8>
			uart_printf("ERROR at %s(%d) : vl53lmz_set_target_order failed : %d\n",__func__, __LINE__,status);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2248      	movs	r2, #72	; 0x48
 8008960:	491a      	ldr	r1, [pc, #104]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 8008962:	481f      	ldr	r0, [pc, #124]	; (80089e0 <apps_layer_vl53lmz_Configure+0x14c>)
 8008964:	f003 fcec 	bl	800c340 <iprintf>
			return status;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	e02a      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
		}

	// Set sharpener
	status = vl53lmz_set_sharpener_percent(p_lmz_dev, 5);
 800896c:	2105      	movs	r1, #5
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fe ff00 	bl	8007774 <vl53lmz_set_sharpener_percent>
 8008974:	4603      	mov	r3, r0
 8008976:	60fb      	str	r3, [r7, #12]
	  if (status != VL53LMZ_STATUS_OK){
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <apps_layer_vl53lmz_Configure+0xfa>
	    printf("ERROR at %s(%d) : vl53lmz_set_sharpener_percent failed : %d\n",__func__, __LINE__,status);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	224f      	movs	r2, #79	; 0x4f
 8008982:	4912      	ldr	r1, [pc, #72]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 8008984:	4817      	ldr	r0, [pc, #92]	; (80089e4 <apps_layer_vl53lmz_Configure+0x150>)
 8008986:	f003 fcdb 	bl	800c340 <iprintf>
	    return(status);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	e019      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
	  }

	if (xtalk64_calibration_stored){
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <apps_layer_vl53lmz_Configure+0x154>)
 8008990:	f993 3000 	ldrsb.w	r3, [r3]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d013      	beq.n	80089c0 <apps_layer_vl53lmz_Configure+0x12c>
		//uart_printf("===============Program Xtalk\n");
		status = vl53lmz_set_caldata_xtalk(p_lmz_dev, xtalk_calibration_buffer);
 8008998:	4914      	ldr	r1, [pc, #80]	; (80089ec <apps_layer_vl53lmz_Configure+0x158>)
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff fefa 	bl	8008794 <vl53lmz_set_caldata_xtalk>
 80089a0:	4603      	mov	r3, r0
 80089a2:	60fb      	str	r3, [r7, #12]
		if (status != VL53LMZ_STATUS_OK){
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d007      	beq.n	80089ba <apps_layer_vl53lmz_Configure+0x126>
			uart_printf("ERROR at %s(%d) : vl53lmz_set_caldata_xtalk failed : %d\n",__func__, __LINE__,status);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2257      	movs	r2, #87	; 0x57
 80089ae:	4907      	ldr	r1, [pc, #28]	; (80089cc <apps_layer_vl53lmz_Configure+0x138>)
 80089b0:	480f      	ldr	r0, [pc, #60]	; (80089f0 <apps_layer_vl53lmz_Configure+0x15c>)
 80089b2:	f003 fcc5 	bl	800c340 <iprintf>
			return status;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	e003      	b.n	80089c2 <apps_layer_vl53lmz_Configure+0x12e>
		}
		uart_printf("vl53lmz_set_caldata_xtalk succeeded\n");
 80089ba:	480e      	ldr	r0, [pc, #56]	; (80089f4 <apps_layer_vl53lmz_Configure+0x160>)
 80089bc:	f003 fd2e 	bl	800c41c <puts>
	}
	return status;
 80089c0:	68fb      	ldr	r3, [r7, #12]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	08029450 	.word	0x08029450
 80089d0:	08012e08 	.word	0x08012e08
 80089d4:	08012e40 	.word	0x08012e40
 80089d8:	08012e80 	.word	0x08012e80
 80089dc:	08012ec0 	.word	0x08012ec0
 80089e0:	08012ef8 	.word	0x08012ef8
 80089e4:	08012f30 	.word	0x08012f30
 80089e8:	2000602c 	.word	0x2000602c
 80089ec:	20006030 	.word	0x20006030
 80089f0:	08012f70 	.word	0x08012f70
 80089f4:	08012fac 	.word	0x08012fac

080089f8 <perform_calibration>:

#ifdef APPS_LAYER_VL53LMZ_CALIBRATE_XTALK
int perform_calibration(VL53LMZ_Configuration *p_lmz_dev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	int status = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
	uart_printf("Xtalk calibration on-going...\n");
 8008a04:	481d      	ldr	r0, [pc, #116]	; (8008a7c <perform_calibration+0x84>)
 8008a06:	f003 fd09 	bl	800c41c <puts>
	// Run Xtalk calibration (8x8) with 54% target at 600 mm (10 samples)
	status = vl53lmz_calibrate_xtalk(p_lmz_dev, 54, 10, 600);
 8008a0a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008a0e:	220a      	movs	r2, #10
 8008a10:	2136      	movs	r1, #54	; 0x36
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fbe6 	bl	80081e4 <vl53lmz_calibrate_xtalk>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <perform_calibration+0x36>
		uart_printf("vl53lmz_calibrate_xtalk failed : %d\n",status);
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	4816      	ldr	r0, [pc, #88]	; (8008a80 <perform_calibration+0x88>)
 8008a26:	f003 fc8b 	bl	800c340 <iprintf>
		return status;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	e021      	b.n	8008a72 <perform_calibration+0x7a>
	}

	// Read xtalk calibration data and store
	status = vl53lmz_get_caldata_xtalk(p_lmz_dev, xtalk_calibration_buffer);
 8008a2e:	4915      	ldr	r1, [pc, #84]	; (8008a84 <perform_calibration+0x8c>)
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff fe35 	bl	80086a0 <vl53lmz_get_caldata_xtalk>
 8008a36:	4603      	mov	r3, r0
 8008a38:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <perform_calibration+0x54>
		uart_printf("vl53lmz_get_caldata_xtalk failed : %d\n",status);
 8008a40:	68f9      	ldr	r1, [r7, #12]
 8008a42:	4811      	ldr	r0, [pc, #68]	; (8008a88 <perform_calibration+0x90>)
 8008a44:	f003 fc7c 	bl	800c340 <iprintf>
		return status;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	e012      	b.n	8008a72 <perform_calibration+0x7a>
	}
	uart_printf("uint8_t Xtalk_cal_buf[VL53LMZ_XTALK_BUFFER_SIZE] = {\n");
 8008a4c:	480f      	ldr	r0, [pc, #60]	; (8008a8c <perform_calibration+0x94>)
 8008a4e:	f003 fce5 	bl	800c41c <puts>
	print_buffer(xtalk_calibration_buffer, VL53LMZ_XTALK_BUFFER_SIZE, PRINT_FORMAT_ARRAY);
 8008a52:	2200      	movs	r2, #0
 8008a54:	f44f 7142 	mov.w	r1, #776	; 0x308
 8008a58:	480a      	ldr	r0, [pc, #40]	; (8008a84 <perform_calibration+0x8c>)
 8008a5a:	f000 f853 	bl	8008b04 <print_buffer>
	uart_printf("};\n");
 8008a5e:	480c      	ldr	r0, [pc, #48]	; (8008a90 <perform_calibration+0x98>)
 8008a60:	f003 fcdc 	bl	800c41c <puts>

	// Update globals
	xtalk64_calibration_stored = 1;
 8008a64:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <perform_calibration+0x9c>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]

	uart_printf("ok\n");
 8008a6a:	480b      	ldr	r0, [pc, #44]	; (8008a98 <perform_calibration+0xa0>)
 8008a6c:	f003 fcd6 	bl	800c41c <puts>
	return status;
 8008a70:	68fb      	ldr	r3, [r7, #12]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08012fd0 	.word	0x08012fd0
 8008a80:	08012ff0 	.word	0x08012ff0
 8008a84:	20006030 	.word	0x20006030
 8008a88:	08013018 	.word	0x08013018
 8008a8c:	08013040 	.word	0x08013040
 8008a90:	08013078 	.word	0x08013078
 8008a94:	2000602c 	.word	0x2000602c
 8008a98:	0801307c 	.word	0x0801307c

08008a9c <get_calibration>:

int get_calibration(VL53LMZ_Configuration *p_lmz_dev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	int status = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
	// Read xtalk calibration data and store
	status = vl53lmz_get_caldata_xtalk(p_lmz_dev, xtalk_calibration_buffer);
 8008aa8:	4911      	ldr	r1, [pc, #68]	; (8008af0 <get_calibration+0x54>)
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fdf8 	bl	80086a0 <vl53lmz_get_caldata_xtalk>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	60fb      	str	r3, [r7, #12]
	if (status != VL53LMZ_STATUS_OK){
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <get_calibration+0x2a>
		uart_printf("vl53lmz_get_caldata_xtalk failed : %d\n",status);
 8008aba:	68f9      	ldr	r1, [r7, #12]
 8008abc:	480d      	ldr	r0, [pc, #52]	; (8008af4 <get_calibration+0x58>)
 8008abe:	f003 fc3f 	bl	800c340 <iprintf>
		return status;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	e00f      	b.n	8008ae6 <get_calibration+0x4a>
	}
	uart_printf("uint8_t Xtalk_cal_buf[VL53LMZ_XTALK_BUFFER_SIZE] = {\n");
 8008ac6:	480c      	ldr	r0, [pc, #48]	; (8008af8 <get_calibration+0x5c>)
 8008ac8:	f003 fca8 	bl	800c41c <puts>
	print_buffer(xtalk_calibration_buffer, VL53LMZ_XTALK_BUFFER_SIZE, PRINT_FORMAT_ARRAY);
 8008acc:	2200      	movs	r2, #0
 8008ace:	f44f 7142 	mov.w	r1, #776	; 0x308
 8008ad2:	4807      	ldr	r0, [pc, #28]	; (8008af0 <get_calibration+0x54>)
 8008ad4:	f000 f816 	bl	8008b04 <print_buffer>
	uart_printf("};\n");
 8008ad8:	4808      	ldr	r0, [pc, #32]	; (8008afc <get_calibration+0x60>)
 8008ada:	f003 fc9f 	bl	800c41c <puts>

	uart_printf("ok\n");
 8008ade:	4808      	ldr	r0, [pc, #32]	; (8008b00 <get_calibration+0x64>)
 8008ae0:	f003 fc9c 	bl	800c41c <puts>
	return status;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20006030 	.word	0x20006030
 8008af4:	08013018 	.word	0x08013018
 8008af8:	08013040 	.word	0x08013040
 8008afc:	08013078 	.word	0x08013078
 8008b00:	0801307c 	.word	0x0801307c

08008b04 <print_buffer>:
#endif


int print_buffer(uint8_t *buffer, uint16_t size, uint8_t format)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	807b      	strh	r3, [r7, #2]
 8008b10:	4613      	mov	r3, r2
 8008b12:	707b      	strb	r3, [r7, #1]
	int i = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]
	uint8_t *s = buffer;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60bb      	str	r3, [r7, #8]

	if (size %4 != 0){
 8008b1c:	887b      	ldrh	r3, [r7, #2]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <print_buffer+0x30>
		uart_printf("print_buffer failed : data size not a multiple of 4 bytes !\n");
 8008b28:	4822      	ldr	r0, [pc, #136]	; (8008bb4 <print_buffer+0xb0>)
 8008b2a:	f003 fc77 	bl	800c41c <puts>
		return -1;
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b32:	e03a      	b.n	8008baa <print_buffer+0xa6>
	}

	for(i=0;i<size;i=i+4){
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	e032      	b.n	8008ba0 <print_buffer+0x9c>
		if (format == PRINT_FORMAT_ARRAY)
 8008b3a:	787b      	ldrb	r3, [r7, #1]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d113      	bne.n	8008b68 <print_buffer+0x64>
			uart_printf("0x%02x, 0x%02x, 0x%02x, 0x%02x,\n",*s,*(s+1),*(s+2),*(s+3));
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	4619      	mov	r1, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	3302      	adds	r3, #2
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	3303      	adds	r3, #3
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4815      	ldr	r0, [pc, #84]	; (8008bb8 <print_buffer+0xb4>)
 8008b62:	f003 fbed 	bl	800c340 <iprintf>
 8008b66:	e015      	b.n	8008b94 <print_buffer+0x90>
		else if (format == PRINT_FORMAT_TXT)
 8008b68:	787b      	ldrb	r3, [r7, #1]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d112      	bne.n	8008b94 <print_buffer+0x90>
			uart_printf("%02X%02X%02X%02X\n",*s,*(s+1),*(s+2),*(s+3));
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	3301      	adds	r3, #1
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3302      	adds	r3, #2
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	3303      	adds	r3, #3
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	480b      	ldr	r0, [pc, #44]	; (8008bbc <print_buffer+0xb8>)
 8008b90:	f003 fbd6 	bl	800c340 <iprintf>
		s=s+4;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	3304      	adds	r3, #4
 8008b98:	60bb      	str	r3, [r7, #8]
	for(i=0;i<size;i=i+4){
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	887b      	ldrh	r3, [r7, #2]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	dbc8      	blt.n	8008b3a <print_buffer+0x36>
	}
	return 0;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08013080 	.word	0x08013080
 8008bb8:	080130bc 	.word	0x080130bc
 8008bbc:	080130e0 	.word	0x080130e0

08008bc0 <Parse_Enable>:
#endif

extern struct Params_t Params;
extern CommandData_t CommandData;

static int Parse_Enable( const struct BaseCommand_t *pCmd, const char *Buffer){
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	(void)pCmd;
	(void)Buffer;
	CommandData.start = 1;
 8008bca:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <Parse_Enable+0x20>)
 8008bcc:	2201      	movs	r2, #1
 8008bce:	601a      	str	r2, [r3, #0]
    return 0;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20005894 	.word	0x20005894

08008be4 <Parse_Disable>:
static int Parse_Disable( const struct BaseCommand_t *pCmd, const char *Buffer){
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	(void)pCmd;
	(void)Buffer;
	CommandData.stop = 1;
 8008bee:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <Parse_Disable+0x20>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20005894 	.word	0x20005894

08008c08 <Parse_SET>:

int Parse_SET(const struct BaseCommand_t *pCmd, const char *Buffer){
 8008c08:	b590      	push	{r4, r7, lr}
 8008c0a:	b08b      	sub	sp, #44	; 0x2c
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
    int n;
    char *Find;
    char *ParamValue;
    int Status=-1;
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c16:	623b      	str	r3, [r7, #32]
    uint8_t *ParamsPtr;
    int i,j;

    Find=strchr(Buffer, '=');
 8008c18:	213d      	movs	r1, #61	; 0x3d
 8008c1a:	6838      	ldr	r0, [r7, #0]
 8008c1c:	f003 fd43 	bl	800c6a6 <strchr>
 8008c20:	6138      	str	r0, [r7, #16]
    if( Find == NULL ){
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80bf 	beq.w	8008da8 <Parse_SET+0x1a0>
        goto done;
    }
    ParamValue = Find +1 ;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
    for( i=0; i< ARRAY_SIZE(SetableParams); i++){
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	e0b2      	b.n	8008d9c <Parse_SET+0x194>
        int ParamLen;
        ParamLen=strlen(SetableParams[i].Name);
 8008c36:	4960      	ldr	r1, [pc, #384]	; (8008db8 <Parse_SET+0x1b0>)
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	1a9b      	subs	r3, r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f7 fb2a 	bl	80002a0 <strlen>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	60fb      	str	r3, [r7, #12]
        if( strncmp(Buffer+1,SetableParams[i].Name, ParamLen) == 0 ){
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	1c58      	adds	r0, r3, #1
 8008c54:	4958      	ldr	r1, [pc, #352]	; (8008db8 <Parse_SET+0x1b0>)
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4619      	mov	r1, r3
 8008c68:	f003 fd2a 	bl	800c6c0 <strncmp>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f040 8091 	bne.w	8008d96 <Parse_SET+0x18e>
            // ok we have it
        	ParamsPtr =(uint8_t*)&Params;
 8008c74:	4b51      	ldr	r3, [pc, #324]	; (8008dbc <Parse_SET+0x1b4>)
 8008c76:	61fb      	str	r3, [r7, #28]
        	ParamsPtr+=SetableParams[i].ParamOffset;
 8008c78:	494f      	ldr	r1, [pc, #316]	; (8008db8 <Parse_SET+0x1b0>)
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	330c      	adds	r3, #12
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	4413      	add	r3, r2
 8008c90:	61fb      	str	r3, [r7, #28]
        	// Go through each element (comma separated) if size is not 1
        	for(j=0;j<SetableParams[i].size;j++){
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	e071      	b.n	8008d7c <Parse_SET+0x174>
        		if (j!=0) {
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <Parse_SET+0xac>
        			// Search for the next comma
        			Find=strchr(ParamValue, ',');
 8008c9e:	212c      	movs	r1, #44	; 0x2c
 8008ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ca2:	f003 fd00 	bl	800c6a6 <strchr>
 8008ca6:	6138      	str	r0, [r7, #16]
        			if( Find == NULL ){
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d07e      	beq.n	8008dac <Parse_SET+0x1a4>
						goto done;
					}
        			// Jump to the string just after the comma
					ParamValue = Find +1 ;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				n = SetableParams[i].Scanner( ParamValue, SetableParams[i].ScanFmt, ParamsPtr );
 8008cb4:	4940      	ldr	r1, [pc, #256]	; (8008db8 <Parse_SET+0x1b0>)
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	681c      	ldr	r4, [r3, #0]
 8008cc6:	493c      	ldr	r1, [pc, #240]	; (8008db8 <Parse_SET+0x1b0>)
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cde:	47a0      	blx	r4
 8008ce0:	60b8      	str	r0, [r7, #8]
				if( SetableParams[i].Checker != NULL ){
 8008ce2:	4935      	ldr	r1, [pc, #212]	; (8008db8 <Parse_SET+0x1b0>)
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	3310      	adds	r3, #16
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d014      	beq.n	8008d22 <Parse_SET+0x11a>
					// Dedicate checker
					Status=SetableParams[i].Checker( &SetableParams[i], ParamsPtr );
 8008cf8:	492f      	ldr	r1, [pc, #188]	; (8008db8 <Parse_SET+0x1b0>)
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	3310      	adds	r3, #16
 8008d08:	681c      	ldr	r4, [r3, #0]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4a28      	ldr	r2, [pc, #160]	; (8008db8 <Parse_SET+0x1b0>)
 8008d16:	4413      	add	r3, r2
 8008d18:	69f9      	ldr	r1, [r7, #28]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	47a0      	blx	r4
 8008d1e:	6238      	str	r0, [r7, #32]
 8008d20:	e004      	b.n	8008d2c <Parse_SET+0x124>
				}
				else{
					// simply use the n retrun
					if( n==1 ){
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <Parse_SET+0x124>
//						CommandData.set = 1;
						Status = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	623b      	str	r3, [r7, #32]
					else{
//						ParseError("fail: top decode argument value"); //ToDo
					}
				}
				// Manage data types : only %f (4 bytes), %d (4 bytes), %u (1 byte) supported
				if( SetableParams[i].ScanFmt[1]=='f'){
 8008d2c:	4922      	ldr	r1, [pc, #136]	; (8008db8 <Parse_SET+0x1b0>)
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	4613      	mov	r3, r2
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b66      	cmp	r3, #102	; 0x66
 8008d44:	d103      	bne.n	8008d4e <Parse_SET+0x146>
					ParamsPtr += 4;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	61fb      	str	r3, [r7, #28]
 8008d4c:	e013      	b.n	8008d76 <Parse_SET+0x16e>
				}
				else if( SetableParams[i].ScanFmt[1]=='u'){
 8008d4e:	491a      	ldr	r1, [pc, #104]	; (8008db8 <Parse_SET+0x1b0>)
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	1a9b      	subs	r3, r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b75      	cmp	r3, #117	; 0x75
 8008d66:	d103      	bne.n	8008d70 <Parse_SET+0x168>
					ParamsPtr += 1;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	e002      	b.n	8008d76 <Parse_SET+0x16e>
				}
				else{
					ParamsPtr += 4;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3304      	adds	r3, #4
 8008d74:	61fb      	str	r3, [r7, #28]
        	for(j=0;j<SetableParams[i].size;j++){
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	490e      	ldr	r1, [pc, #56]	; (8008db8 <Parse_SET+0x1b0>)
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	4613      	mov	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	3318      	adds	r3, #24
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	db81      	blt.n	8008c98 <Parse_SET+0x90>
				}
        	}
            // done we have find params
            break;
 8008d94:	e007      	b.n	8008da6 <Parse_SET+0x19e>
    for( i=0; i< ARRAY_SIZE(SetableParams); i++){
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	2b12      	cmp	r3, #18
 8008da0:	f67f af49 	bls.w	8008c36 <Parse_SET+0x2e>
    }
    // parama name not found
    if( i >= ARRAY_SIZE(SetableParams) ){
//    	ParseError("unknown param name"); //ToDo
    }
done:
 8008da4:	e003      	b.n	8008dae <Parse_SET+0x1a6>
 8008da6:	e002      	b.n	8008dae <Parse_SET+0x1a6>
        goto done;
 8008da8:	bf00      	nop
 8008daa:	e000      	b.n	8008dae <Parse_SET+0x1a6>
						goto done;
 8008dac:	bf00      	nop
    return Status;
 8008dae:	6a3b      	ldr	r3, [r7, #32]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	372c      	adds	r7, #44	; 0x2c
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	20000090 	.word	0x20000090
 8008dbc:	2000000c 	.word	0x2000000c

08008dc0 <Parse_Params>:

static int Parse_Params( const struct BaseCommand_t *pCmd, const char *Buffer){
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b089      	sub	sp, #36	; 0x24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
    int i,j;
    char *TmpStr;
    int n;
    uart_printf("size : %d\n",ARRAY_SIZE(SetableParams));
 8008dca:	2113      	movs	r1, #19
 8008dcc:	4862      	ldr	r0, [pc, #392]	; (8008f58 <Parse_Params+0x198>)
 8008dce:	f003 fab7 	bl	800c340 <iprintf>
    for( i=0; i<ARRAY_SIZE(SetableParams); i++){
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e0b5      	b.n	8008f44 <Parse_Params+0x184>
        	TmpStr=UartComm_TmpBuffer;
 8008dd8:	4b60      	ldr	r3, [pc, #384]	; (8008f5c <Parse_Params+0x19c>)
 8008dda:	617b      	str	r3, [r7, #20]
            uint8_t *ParamsPtr =(uint8_t*)&Params;
 8008ddc:	4b60      	ldr	r3, [pc, #384]	; (8008f60 <Parse_Params+0x1a0>)
 8008dde:	60fb      	str	r3, [r7, #12]
            ParamsPtr+=SetableParams[i].ParamOffset;
 8008de0:	4960      	ldr	r1, [pc, #384]	; (8008f64 <Parse_Params+0x1a4>)
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	330c      	adds	r3, #12
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]

            if( SetableParams[i].Scanner==sscanf){
 8008dfa:	495a      	ldr	r1, [pc, #360]	; (8008f64 <Parse_Params+0x1a4>)
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	3304      	adds	r3, #4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a56      	ldr	r2, [pc, #344]	; (8008f68 <Parse_Params+0x1a8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	f040 8095 	bne.w	8008f3e <Parse_Params+0x17e>
                sprintf(TmpStr, "%s=",SetableParams[i].Name);
 8008e14:	4953      	ldr	r1, [pc, #332]	; (8008f64 <Parse_Params+0x1a4>)
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	4951      	ldr	r1, [pc, #324]	; (8008f6c <Parse_Params+0x1ac>)
 8008e28:	6978      	ldr	r0, [r7, #20]
 8008e2a:	f003 faff 	bl	800c42c <siprintf>
                TmpStr=strstr(TmpStr,"=")+1; // move passed skip argname=
 8008e2e:	213d      	movs	r1, #61	; 0x3d
 8008e30:	6978      	ldr	r0, [r7, #20]
 8008e32:	f003 fc38 	bl	800c6a6 <strchr>
 8008e36:	4603      	mov	r3, r0
 8008e38:	3301      	adds	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
                // Go through each element (comma separated) if size is not 1
                for(j=0;j<SetableParams[i].size;j++){
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	e06a      	b.n	8008f18 <Parse_Params+0x158>
    				// Separate each element by a comma
                	if (j!=0) {
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <Parse_Params+0x96>
    					sprintf(TmpStr,",");
 8008e48:	4949      	ldr	r1, [pc, #292]	; (8008f70 <Parse_Params+0x1b0>)
 8008e4a:	6978      	ldr	r0, [r7, #20]
 8008e4c:	f003 faee 	bl	800c42c <siprintf>
    					TmpStr++;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	3301      	adds	r3, #1
 8008e54:	617b      	str	r3, [r7, #20]
    				}
                	// Manage data types : only %f (4 bytes), %d (4 bytes), %u (1 byte) supported
                	if( SetableParams[i].ScanFmt[1]=='f'){
 8008e56:	4943      	ldr	r1, [pc, #268]	; (8008f64 <Parse_Params+0x1a4>)
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	3308      	adds	r3, #8
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b66      	cmp	r3, #102	; 0x66
 8008e6e:	d118      	bne.n	8008ea2 <Parse_Params+0xe2>
    					n = sprintf(TmpStr, SetableParams[i].ScanFmt, *((float *)ParamsPtr));
 8008e70:	493c      	ldr	r1, [pc, #240]	; (8008f64 <Parse_Params+0x1a4>)
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	4613      	mov	r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	1a9b      	subs	r3, r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	3308      	adds	r3, #8
 8008e80:	681c      	ldr	r4, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f7 fb76 	bl	8000578 <__aeabi_f2d>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4621      	mov	r1, r4
 8008e92:	6978      	ldr	r0, [r7, #20]
 8008e94:	f003 faca 	bl	800c42c <siprintf>
 8008e98:	6138      	str	r0, [r7, #16]
    					ParamsPtr = ParamsPtr+4;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	e033      	b.n	8008f0a <Parse_Params+0x14a>
    				}
                	else if( SetableParams[i].ScanFmt[1]=='u'){
 8008ea2:	4930      	ldr	r1, [pc, #192]	; (8008f64 <Parse_Params+0x1a4>)
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b75      	cmp	r3, #117	; 0x75
 8008eba:	d113      	bne.n	8008ee4 <Parse_Params+0x124>
    					n = sprintf(TmpStr, SetableParams[i].ScanFmt, *((uint8_t *)ParamsPtr));
 8008ebc:	4929      	ldr	r1, [pc, #164]	; (8008f64 <Parse_Params+0x1a4>)
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	1a9b      	subs	r3, r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	3308      	adds	r3, #8
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6978      	ldr	r0, [r7, #20]
 8008ed6:	f003 faa9 	bl	800c42c <siprintf>
 8008eda:	6138      	str	r0, [r7, #16]
    					ParamsPtr = ParamsPtr+1;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e012      	b.n	8008f0a <Parse_Params+0x14a>
    				}
    				else{
    					n = sprintf(TmpStr, SetableParams[i].ScanFmt, *((uint32_t *)ParamsPtr));
 8008ee4:	491f      	ldr	r1, [pc, #124]	; (8008f64 <Parse_Params+0x1a4>)
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	6819      	ldr	r1, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	6978      	ldr	r0, [r7, #20]
 8008efe:	f003 fa95 	bl	800c42c <siprintf>
 8008f02:	6138      	str	r0, [r7, #16]
    					ParamsPtr = ParamsPtr+4;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	60fb      	str	r3, [r7, #12]
    				}
    				TmpStr = TmpStr+n;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	4413      	add	r3, r2
 8008f10:	617b      	str	r3, [r7, #20]
                for(j=0;j<SetableParams[i].size;j++){
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	3301      	adds	r3, #1
 8008f16:	61bb      	str	r3, [r7, #24]
 8008f18:	4912      	ldr	r1, [pc, #72]	; (8008f64 <Parse_Params+0x1a4>)
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	3318      	adds	r3, #24
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	db88      	blt.n	8008e42 <Parse_Params+0x82>
                }
                sprintf(TmpStr, "\n");
 8008f30:	4910      	ldr	r1, [pc, #64]	; (8008f74 <Parse_Params+0x1b4>)
 8008f32:	6978      	ldr	r0, [r7, #20]
 8008f34:	f003 fa7a 	bl	800c42c <siprintf>
                uart_printf(UartComm_TmpBuffer);
 8008f38:	4808      	ldr	r0, [pc, #32]	; (8008f5c <Parse_Params+0x19c>)
 8008f3a:	f003 fa01 	bl	800c340 <iprintf>
    for( i=0; i<ARRAY_SIZE(SetableParams); i++){
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	3301      	adds	r3, #1
 8008f42:	61fb      	str	r3, [r7, #28]
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	2b12      	cmp	r3, #18
 8008f48:	f67f af46 	bls.w	8008dd8 <Parse_Params+0x18>
            }
        }
        return 0;
 8008f4c:	2300      	movs	r3, #0
    }
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3724      	adds	r7, #36	; 0x24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd90      	pop	{r4, r7, pc}
 8008f56:	bf00      	nop
 8008f58:	08013214 	.word	0x08013214
 8008f5c:	20006338 	.word	0x20006338
 8008f60:	2000000c 	.word	0x2000000c
 8008f64:	20000090 	.word	0x20000090
 8008f68:	0800c46d 	.word	0x0800c46d
 8008f6c:	08013220 	.word	0x08013220
 8008f70:	08013224 	.word	0x08013224
 8008f74:	08013228 	.word	0x08013228

08008f78 <Parse_Calibrate>:

static int Parse_Calibrate(const struct BaseCommand_t *pCmd, const char *Buffer)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
	int n;
	int Cmd=-1; // 0 = valid
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f86:	617b      	str	r3, [r7, #20]
	char *TmpBuffer;
	(void)pCmd;
	TmpBuffer = SB_TmpBuffer();
 8008f88:	f7fc ff1c 	bl	8005dc4 <SB_TmpBuffer>
 8008f8c:	6138      	str	r0, [r7, #16]
	n=sscanf(Buffer, "%s", TmpBuffer);
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4915      	ldr	r1, [pc, #84]	; (8008fe8 <Parse_Calibrate+0x70>)
 8008f92:	6838      	ldr	r0, [r7, #0]
 8008f94:	f003 fa6a 	bl	800c46c <siscanf>
 8008f98:	60f8      	str	r0, [r7, #12]

	if( n<1 ){
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dc05      	bgt.n	8008fac <Parse_Calibrate+0x34>
		uart_printf("%s", "missing arg\n");
 8008fa0:	4812      	ldr	r0, [pc, #72]	; (8008fec <Parse_Calibrate+0x74>)
 8008fa2:	f003 fa3b 	bl	800c41c <puts>
		return -1;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008faa:	e018      	b.n	8008fde <Parse_Calibrate+0x66>
	}

	if( strcmp(TmpBuffer,"xtalk")==0 )
 8008fac:	4910      	ldr	r1, [pc, #64]	; (8008ff0 <Parse_Calibrate+0x78>)
 8008fae:	6938      	ldr	r0, [r7, #16]
 8008fb0:	f7f7 f916 	bl	80001e0 <strcmp>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d105      	bne.n	8008fc6 <Parse_Calibrate+0x4e>
	{
		Cmd = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
		CommandData.calibrate = 1;
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <Parse_Calibrate+0x7c>)
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
	else
	{  // add here new item to be parse
	}

	// no parsing of target
	if( Cmd == -1 ){
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fcc:	d106      	bne.n	8008fdc <Parse_Calibrate+0x64>
		uart_printf("Calibrate: invalid/wrong calibration data type (%s) : only xtalk supported\n", TmpBuffer);
 8008fce:	6939      	ldr	r1, [r7, #16]
 8008fd0:	4809      	ldr	r0, [pc, #36]	; (8008ff8 <Parse_Calibrate+0x80>)
 8008fd2:	f003 f9b5 	bl	800c340 <iprintf>
		return -2;
 8008fd6:	f06f 0301 	mvn.w	r3, #1
 8008fda:	e000      	b.n	8008fde <Parse_Calibrate+0x66>
	}

	return  0;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	0801322c 	.word	0x0801322c
 8008fec:	08013230 	.word	0x08013230
 8008ff0:	0801323c 	.word	0x0801323c
 8008ff4:	20005894 	.word	0x20005894
 8008ff8:	08013244 	.word	0x08013244

08008ffc <Parse_GetCalData>:

static int Parse_GetCalData(const struct BaseCommand_t *pCmd, const char *Buffer)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	int n;
	int Cmd=-1; // 0 = valid
 8009006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800900a:	617b      	str	r3, [r7, #20]
	char *TmpBuffer;

	(void)pCmd;
	TmpBuffer = SB_TmpBuffer();
 800900c:	f7fc feda 	bl	8005dc4 <SB_TmpBuffer>
 8009010:	6138      	str	r0, [r7, #16]
	n=sscanf(Buffer, "%s", TmpBuffer);
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4914      	ldr	r1, [pc, #80]	; (8009068 <Parse_GetCalData+0x6c>)
 8009016:	6838      	ldr	r0, [r7, #0]
 8009018:	f003 fa28 	bl	800c46c <siscanf>
 800901c:	60f8      	str	r0, [r7, #12]

	if( n<1 ){
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc05      	bgt.n	8009030 <Parse_GetCalData+0x34>
		uart_printf("%s", "missing arg\n");
 8009024:	4811      	ldr	r0, [pc, #68]	; (800906c <Parse_GetCalData+0x70>)
 8009026:	f003 f9f9 	bl	800c41c <puts>
		return -1;
 800902a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800902e:	e017      	b.n	8009060 <Parse_GetCalData+0x64>
	}

	if( strcmp(TmpBuffer,"xtalk")==0 )
 8009030:	490f      	ldr	r1, [pc, #60]	; (8009070 <Parse_GetCalData+0x74>)
 8009032:	6938      	ldr	r0, [r7, #16]
 8009034:	f7f7 f8d4 	bl	80001e0 <strcmp>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <Parse_GetCalData+0x4c>
	{
		Cmd = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
		CommandData.get_caldata = 1;
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <Parse_GetCalData+0x78>)
 8009044:	2201      	movs	r2, #1
 8009046:	609a      	str	r2, [r3, #8]
	else
	{  // add here new item to be parse
	}

	// no parsing of target
	if( Cmd == -1 ){
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800904e:	d106      	bne.n	800905e <Parse_GetCalData+0x62>
		uart_printf("GetCalData: invalid/wrong calibration data type (%s) : only xtalk supported", TmpBuffer);
 8009050:	6939      	ldr	r1, [r7, #16]
 8009052:	4809      	ldr	r0, [pc, #36]	; (8009078 <Parse_GetCalData+0x7c>)
 8009054:	f003 f974 	bl	800c340 <iprintf>
		return -2;
 8009058:	f06f 0301 	mvn.w	r3, #1
 800905c:	e000      	b.n	8009060 <Parse_GetCalData+0x64>
	}

	return  0;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	0801322c 	.word	0x0801322c
 800906c:	08013230 	.word	0x08013230
 8009070:	0801323c 	.word	0x0801323c
 8009074:	20005894 	.word	0x20005894
 8009078:	08013290 	.word	0x08013290

0800907c <Parse_Help>:
				.Syntax="'get_caldata xtalk'",
				.NoAnswer = 1
		},
};

static int Parse_Help( const struct BaseCommand_t *pCmd, const char *Unused){
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
    size_t i;
    char *TmpBuffer;

    (void)pCmd;
    (void)Unused;
    TmpBuffer = SB_TmpBuffer();
 8009086:	f7fc fe9d 	bl	8005dc4 <SB_TmpBuffer>
 800908a:	60b8      	str	r0, [r7, #8]

    for(i=0; i<ARRAY_SIZE(BaseCmd);i++){
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e093      	b.n	80091ba <Parse_Help+0x13e>
    	TmpBuffer[0]=0;    //star clean string
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
        strcat(TmpBuffer, BaseCmd[i].Name);
 8009098:	494c      	ldr	r1, [pc, #304]	; (80091cc <Parse_Help+0x150>)
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	4613      	mov	r3, r2
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	4413      	add	r3, r2
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	440b      	add	r3, r1
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4619      	mov	r1, r3
 80090aa:	68b8      	ldr	r0, [r7, #8]
 80090ac:	f003 faec 	bl	800c688 <strcat>
        if( BaseCmd[i].Help != NULL  ){
 80090b0:	4946      	ldr	r1, [pc, #280]	; (80091cc <Parse_Help+0x150>)
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4613      	mov	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	4413      	add	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	440b      	add	r3, r1
 80090be:	3308      	adds	r3, #8
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d018      	beq.n	80090f8 <Parse_Help+0x7c>
            strcat(TmpBuffer, "\t");
 80090c6:	68b8      	ldr	r0, [r7, #8]
 80090c8:	f7f7 f8ea 	bl	80002a0 <strlen>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4413      	add	r3, r2
 80090d4:	493e      	ldr	r1, [pc, #248]	; (80091d0 <Parse_Help+0x154>)
 80090d6:	461a      	mov	r2, r3
 80090d8:	460b      	mov	r3, r1
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	8013      	strh	r3, [r2, #0]
            strcat(TmpBuffer, BaseCmd[i].Help);
 80090de:	493b      	ldr	r1, [pc, #236]	; (80091cc <Parse_Help+0x150>)
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4613      	mov	r3, r2
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4413      	add	r3, r2
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	440b      	add	r3, r1
 80090ec:	3308      	adds	r3, #8
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4619      	mov	r1, r3
 80090f2:	68b8      	ldr	r0, [r7, #8]
 80090f4:	f003 fac8 	bl	800c688 <strcat>
        }
        if( BaseCmd[i].Syntax != NULL  ){
 80090f8:	4934      	ldr	r1, [pc, #208]	; (80091cc <Parse_Help+0x150>)
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4613      	mov	r3, r2
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	4413      	add	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	440b      	add	r3, r1
 8009106:	330c      	adds	r3, #12
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01d      	beq.n	800914a <Parse_Help+0xce>
            strcat(TmpBuffer, "\n\tSyntax:\t");
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7f7 f8c6 	bl	80002a0 <strlen>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4413      	add	r3, r2
 800911c:	492d      	ldr	r1, [pc, #180]	; (80091d4 <Parse_Help+0x158>)
 800911e:	461a      	mov	r2, r3
 8009120:	460b      	mov	r3, r1
 8009122:	cb03      	ldmia	r3!, {r0, r1}
 8009124:	6010      	str	r0, [r2, #0]
 8009126:	6051      	str	r1, [r2, #4]
 8009128:	8819      	ldrh	r1, [r3, #0]
 800912a:	789b      	ldrb	r3, [r3, #2]
 800912c:	8111      	strh	r1, [r2, #8]
 800912e:	7293      	strb	r3, [r2, #10]
            strcat(TmpBuffer, BaseCmd[i].Syntax);
 8009130:	4926      	ldr	r1, [pc, #152]	; (80091cc <Parse_Help+0x150>)
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4613      	mov	r3, r2
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	4413      	add	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	440b      	add	r3, r1
 800913e:	330c      	adds	r3, #12
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4619      	mov	r1, r3
 8009144:	68b8      	ldr	r0, [r7, #8]
 8009146:	f003 fa9f 	bl	800c688 <strcat>
        }
        if( BaseCmd[i].Example != NULL  ){
 800914a:	4920      	ldr	r1, [pc, #128]	; (80091cc <Parse_Help+0x150>)
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4613      	mov	r3, r2
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	4413      	add	r3, r2
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	440b      	add	r3, r1
 8009158:	3310      	adds	r3, #16
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01a      	beq.n	8009196 <Parse_Help+0x11a>
			strcat(TmpBuffer, "\n\tExample:\t");
 8009160:	68b8      	ldr	r0, [r7, #8]
 8009162:	f7f7 f89d 	bl	80002a0 <strlen>
 8009166:	4603      	mov	r3, r0
 8009168:	461a      	mov	r2, r3
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4413      	add	r3, r2
 800916e:	4a1a      	ldr	r2, [pc, #104]	; (80091d8 <Parse_Help+0x15c>)
 8009170:	461c      	mov	r4, r3
 8009172:	4613      	mov	r3, r2
 8009174:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	6061      	str	r1, [r4, #4]
 800917a:	60a2      	str	r2, [r4, #8]
			strcat(TmpBuffer, BaseCmd[i].Example);
 800917c:	4913      	ldr	r1, [pc, #76]	; (80091cc <Parse_Help+0x150>)
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	4413      	add	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	440b      	add	r3, r1
 800918a:	3310      	adds	r3, #16
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4619      	mov	r1, r3
 8009190:	68b8      	ldr	r0, [r7, #8]
 8009192:	f003 fa79 	bl	800c688 <strcat>
		}
        strcat(TmpBuffer, "\n");
 8009196:	68b8      	ldr	r0, [r7, #8]
 8009198:	f7f7 f882 	bl	80002a0 <strlen>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4413      	add	r3, r2
 80091a4:	490d      	ldr	r1, [pc, #52]	; (80091dc <Parse_Help+0x160>)
 80091a6:	461a      	mov	r2, r3
 80091a8:	460b      	mov	r3, r1
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	8013      	strh	r3, [r2, #0]
        uart_printf(TmpBuffer);
 80091ae:	68b8      	ldr	r0, [r7, #8]
 80091b0:	f003 f8c6 	bl	800c340 <iprintf>
    for(i=0; i<ARRAY_SIZE(BaseCmd);i++){
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3301      	adds	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b06      	cmp	r3, #6
 80091be:	f67f af68 	bls.w	8009092 <Parse_Help+0x16>
    }
    return 0;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd90      	pop	{r4, r7, pc}
 80091cc:	200002a4 	.word	0x200002a4
 80091d0:	08013510 	.word	0x08013510
 80091d4:	08013514 	.word	0x08013514
 80091d8:	08013520 	.word	0x08013520
 80091dc:	08013228 	.word	0x08013228

080091e0 <SC_HandleCmd>:


static const char StrCmdOk[]="ok\n";

int SC_HandleCmd(const char *Buffer){
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
    int Status =-1;
 80091e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ec:	61fb      	str	r3, [r7, #28]
    int CmdLen;
    int CmdDecoded=0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
    size_t i;

    for( i=0; i<ARRAY_SIZE(BaseCmd);i++){
 80091f2:	2300      	movs	r3, #0
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	e05d      	b.n	80092b4 <SC_HandleCmd+0xd4>
        int CmdRet;
        CmdLen=strlen(BaseCmd[i].Name);
 80091f8:	4932      	ldr	r1, [pc, #200]	; (80092c4 <SC_HandleCmd+0xe4>)
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	4613      	mov	r3, r2
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	440b      	add	r3, r1
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4618      	mov	r0, r3
 800920a:	f7f7 f849 	bl	80002a0 <strlen>
 800920e:	4603      	mov	r3, r0
 8009210:	613b      	str	r3, [r7, #16]
        if( strncmp( Buffer, BaseCmd[i].Name, CmdLen) == 0 &&
 8009212:	492c      	ldr	r1, [pc, #176]	; (80092c4 <SC_HandleCmd+0xe4>)
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	4613      	mov	r3, r2
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	4413      	add	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	440b      	add	r3, r1
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f003 fa4a 	bl	800c6c0 <strncmp>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d13d      	bne.n	80092ae <SC_HandleCmd+0xce>
                (Buffer[CmdLen]==' ' || Buffer[CmdLen]=='\t' || Buffer[CmdLen]==0 )
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	4413      	add	r3, r2
 8009238:	781b      	ldrb	r3, [r3, #0]
        if( strncmp( Buffer, BaseCmd[i].Name, CmdLen) == 0 &&
 800923a:	2b20      	cmp	r3, #32
 800923c:	d00b      	beq.n	8009256 <SC_HandleCmd+0x76>
                (Buffer[CmdLen]==' ' || Buffer[CmdLen]=='\t' || Buffer[CmdLen]==0 )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b09      	cmp	r3, #9
 8009248:	d005      	beq.n	8009256 <SC_HandleCmd+0x76>
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	4413      	add	r3, r2
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d12b      	bne.n	80092ae <SC_HandleCmd+0xce>
          ){
        	CmdRet=BaseCmd[i].Parse(&BaseCmd[i], Buffer+CmdLen);
 8009256:	491b      	ldr	r1, [pc, #108]	; (80092c4 <SC_HandleCmd+0xe4>)
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	4613      	mov	r3, r2
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	4413      	add	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	440b      	add	r3, r1
 8009264:	3304      	adds	r3, #4
 8009266:	681c      	ldr	r4, [r3, #0]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	4613      	mov	r3, r2
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	4413      	add	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	4a14      	ldr	r2, [pc, #80]	; (80092c4 <SC_HandleCmd+0xe4>)
 8009274:	1898      	adds	r0, r3, r2
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	4619      	mov	r1, r3
 800927e:	47a0      	blx	r4
 8009280:	60f8      	str	r0, [r7, #12]
            if( CmdRet == 0 ){
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10f      	bne.n	80092a8 <SC_HandleCmd+0xc8>
                Status =0;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
                if( BaseCmd[i].NoAnswer == 0 )
 800928c:	490d      	ldr	r1, [pc, #52]	; (80092c4 <SC_HandleCmd+0xe4>)
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	4613      	mov	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	4413      	add	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	440b      	add	r3, r1
 800929a:	3314      	adds	r3, #20
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <SC_HandleCmd+0xc8>
                	uart_printf(StrCmdOk);
 80092a2:	4809      	ldr	r0, [pc, #36]	; (80092c8 <SC_HandleCmd+0xe8>)
 80092a4:	f003 f8ba 	bl	800c41c <puts>
            }
            CmdDecoded=1;
 80092a8:	2301      	movs	r3, #1
 80092aa:	617b      	str	r3, [r7, #20]
            break;
 80092ac:	e005      	b.n	80092ba <SC_HandleCmd+0xda>
    for( i=0; i<ARRAY_SIZE(BaseCmd);i++){
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	3301      	adds	r3, #1
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2b06      	cmp	r3, #6
 80092b8:	d99e      	bls.n	80091f8 <SC_HandleCmd+0x18>
    }
    if( CmdDecoded == 0 ){
        // TODO command not decoded ?
    	// ParseError("unknown command %s", Buffer);
    }
    return Status;
 80092ba:	69fb      	ldr	r3, [r7, #28]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3724      	adds	r7, #36	; 0x24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd90      	pop	{r4, r7, pc}
 80092c4:	200002a4 	.word	0x200002a4
 80092c8:	0801307c 	.word	0x0801307c

080092cc <GW_set_params>:
 80092cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80092d4:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
 80092d8:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
 80092dc:	e9dd c615 	ldrd	ip, r6, [sp, #84]	; 0x54
 80092e0:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80092e4:	4604      	mov	r4, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f000 80d4 	beq.w	8009494 <GW_set_params+0x1c8>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	bfb8      	it	lt
 80092f0:	215f      	movlt	r1, #95	; 0x5f
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	bfb8      	it	lt
 80092f6:	22c8      	movlt	r2, #200	; 0xc8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfb8      	it	lt
 80092fc:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 8009300:	f1bb 0f00 	cmp.w	fp, #0
 8009304:	bfb8      	it	lt
 8009306:	f44f 7b16 	movlt.w	fp, #600	; 0x258
 800930a:	f1ba 0f00 	cmp.w	sl, #0
 800930e:	bfb8      	it	lt
 8009310:	f04f 0a14 	movlt.w	sl, #20
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	6103      	str	r3, [r0, #16]
 800931a:	bfb8      	it	lt
 800931c:	f44f 79fa 	movlt.w	r9, #500	; 0x1f4
 8009320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009322:	6082      	str	r2, [r0, #8]
 8009324:	f1b8 0f00 	cmp.w	r8, #0
 8009328:	bfb8      	it	lt
 800932a:	f44f 7816 	movlt.w	r8, #600	; 0x258
 800932e:	f1be 0f00 	cmp.w	lr, #0
 8009332:	bfb8      	it	lt
 8009334:	f44f 7e16 	movlt.w	lr, #600	; 0x258
 8009338:	2b00      	cmp	r3, #0
 800933a:	bfb8      	it	lt
 800933c:	f44f 63fa 	movlt.w	r3, #2000	; 0x7d0
 8009340:	6283      	str	r3, [r0, #40]	; 0x28
 8009342:	930f      	str	r3, [sp, #60]	; 0x3c
 8009344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009346:	6001      	str	r1, [r0, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bfb8      	it	lt
 800934c:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 8009350:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009352:	9312      	str	r3, [sp, #72]	; 0x48
 8009354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009356:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 800935a:	2b00      	cmp	r3, #0
 800935c:	bfb8      	it	lt
 800935e:	f44f 6396 	movlt.w	r3, #1200	; 0x4b0
 8009362:	6503      	str	r3, [r0, #80]	; 0x50
 8009364:	9313      	str	r3, [sp, #76]	; 0x4c
 8009366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009368:	f8c0 8020 	str.w	r8, [r0, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009372:	bfb8      	it	lt
 8009374:	2396      	movlt	r3, #150	; 0x96
 8009376:	60c2      	str	r2, [r0, #12]
 8009378:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800937a:	6543      	str	r3, [r0, #84]	; 0x54
 800937c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009380:	9314      	str	r3, [sp, #80]	; 0x50
 8009382:	f240 3352 	movw	r3, #850	; 0x352
 8009386:	ea32 0222 	bics.w	r2, r2, r2, asr #32
 800938a:	bf28      	it	cs
 800938c:	461a      	movcs	r2, r3
 800938e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009392:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8009396:	bfb8      	it	lt
 8009398:	ed9f 0a40 	vldrlt	s0, [pc, #256]	; 800949c <GW_set_params+0x1d0>
 800939c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800939e:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
 80093a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a6:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80093aa:	bfb8      	it	lt
 80093ac:	eef7 0a00 	vmovlt.f32	s1, #112	; 0x3f800000  1.0
 80093b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b4:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 80093b8:	bfb8      	it	lt
 80093ba:	ed9f 1a39 	vldrlt	s2, [pc, #228]	; 80094a0 <GW_set_params+0x1d4>
 80093be:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
 80093c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c6:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80093ca:	bfb8      	it	lt
 80093cc:	eddf 1a35 	vldrlt	s3, [pc, #212]	; 80094a4 <GW_set_params+0x1d8>
 80093d0:	ed80 1a0e 	vstr	s2, [r0, #56]	; 0x38
 80093d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d8:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 80093dc:	bfb8      	it	lt
 80093de:	eeb0 2a00 	vmovlt.f32	s4, #0	; 0x40000000  2.0
 80093e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e6:	bfb8      	it	lt
 80093e8:	eddf 2a2f 	vldrlt	s5, [pc, #188]	; 80094a8 <GW_set_params+0x1dc>
 80093ec:	edc0 1a0f 	vstr	s3, [r0, #60]	; 0x3c
 80093f0:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfd4      	ite	le
 80093f8:	2300      	movle	r3, #0
 80093fa:	2301      	movgt	r3, #1
 80093fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009400:	bfd8      	it	le
 8009402:	ed9f 3a2a 	vldrle	s6, [pc, #168]	; 80094ac <GW_set_params+0x1e0>
 8009406:	ed80 2a10 	vstr	s4, [r0, #64]	; 0x40
 800940a:	f1bc 0f00 	cmp.w	ip, #0
 800940e:	bfd8      	it	le
 8009410:	f44f 7c7a 	movle.w	ip, #1000	; 0x3e8
 8009414:	2e00      	cmp	r6, #0
 8009416:	bfd8      	it	le
 8009418:	f44f 76c8 	movle.w	r6, #400	; 0x190
 800941c:	2d00      	cmp	r5, #0
 800941e:	bfd8      	it	le
 8009420:	2564      	movle	r5, #100	; 0x64
 8009422:	43c9      	mvns	r1, r1
 8009424:	edc0 2a11 	vstr	s5, [r0, #68]	; 0x44
 8009428:	62c2      	str	r2, [r0, #44]	; 0x2c
 800942a:	6041      	str	r1, [r0, #4]
 800942c:	9210      	str	r2, [sp, #64]	; 0x40
 800942e:	f8c0 b014 	str.w	fp, [r0, #20]
 8009432:	f8c0 a018 	str.w	sl, [r0, #24]
 8009436:	f8c0 901c 	str.w	r9, [r0, #28]
 800943a:	f500 682f 	add.w	r8, r0, #2800	; 0xaf0
 800943e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 8009442:	ed80 3a16 	vstr	s6, [r0, #88]	; 0x58
 8009446:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
 800944a:	6606      	str	r6, [r0, #96]	; 0x60
 800944c:	6645      	str	r5, [r0, #100]	; 0x64
 800944e:	1b70      	subs	r0, r6, r5
 8009450:	f7f7 f880 	bl	8000554 <__aeabi_i2d>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	2000      	movs	r0, #0
 800945a:	4915      	ldr	r1, [pc, #84]	; (80094b0 <GW_set_params+0x1e4>)
 800945c:	f7f7 fa0e 	bl	800087c <__aeabi_ddiv>
 8009460:	f7f7 fbda 	bl	8000c18 <__aeabi_d2f>
 8009464:	2105      	movs	r1, #5
 8009466:	f8c8 0000 	str.w	r0, [r8]
 800946a:	f604 00dc 	addw	r0, r4, #2268	; 0x8dc
 800946e:	f001 fc70 	bl	800ad52 <RFBVM_init>
 8009472:	2105      	movs	r1, #5
 8009474:	f604 20f4 	addw	r0, r4, #2804	; 0xaf4
 8009478:	f001 fc6b 	bl	800ad52 <RFBVM_init>
 800947c:	2105      	movs	r1, #5
 800947e:	f604 5008 	addw	r0, r4, #3336	; 0xd08
 8009482:	f001 fc66 	bl	800ad52 <RFBVM_init>
 8009486:	2f00      	cmp	r7, #0
 8009488:	bfd8      	it	le
 800948a:	27fa      	movle	r7, #250	; 0xfa
 800948c:	66a7      	str	r7, [r4, #104]	; 0x68
 800948e:	2000      	movs	r0, #0
 8009490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009494:	f06f 0001 	mvn.w	r0, #1
 8009498:	e7fa      	b.n	8009490 <GW_set_params+0x1c4>
 800949a:	bf00      	nop
 800949c:	3ed58106 	.word	0x3ed58106
 80094a0:	3fcf7cee 	.word	0x3fcf7cee
 80094a4:	3f99999a 	.word	0x3f99999a
 80094a8:	3f8f1aa0 	.word	0x3f8f1aa0
 80094ac:	451c4000 	.word	0x451c4000
 80094b0:	40590000 	.word	0x40590000

080094b4 <GW_init>:
 80094b4:	b530      	push	{r4, r5, lr}
 80094b6:	460d      	mov	r5, r1
 80094b8:	b091      	sub	sp, #68	; 0x44
 80094ba:	4611      	mov	r1, r2
 80094bc:	4604      	mov	r4, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d04c      	beq.n	800955c <GW_init+0xa8>
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	d04a      	beq.n	800955c <GW_init+0xa8>
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d048      	beq.n	800955c <GW_init+0xa8>
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 fe99 	bl	800a202 <HT_init>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d141      	bne.n	8009558 <GW_init+0xa4>
 80094d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094d8:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 80094dc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80094e0:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80094e4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80094e8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80094ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80094f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80094f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	eef0 2a43 	vmov.f32	s5, s6
 80094fe:	eeb0 2a43 	vmov.f32	s4, s6
 8009502:	eef0 1a43 	vmov.f32	s3, s6
 8009506:	eeb0 1a43 	vmov.f32	s2, s6
 800950a:	eef0 0a43 	vmov.f32	s1, s6
 800950e:	eeb0 0a43 	vmov.f32	s0, s6
 8009512:	461a      	mov	r2, r3
 8009514:	4619      	mov	r1, r3
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff fed8 	bl	80092cc <GW_set_params>
 800951c:	b9e0      	cbnz	r0, 8009558 <GW_init+0xa4>
 800951e:	f884 0f1c 	strb.w	r0, [r4, #3868]	; 0xf1c
 8009522:	edd5 7a02 	vldr	s15, [r5, #8]
 8009526:	f8c4 0f20 	str.w	r0, [r4, #3872]	; 0xf20
 800952a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800952e:	f604 732c 	addw	r3, r4, #3884	; 0xf2c
 8009532:	f8c4 0f24 	str.w	r0, [r4, #3876]	; 0xf24
 8009536:	f8a4 0f28 	strh.w	r0, [r4, #3880]	; 0xf28
 800953a:	edc3 7a00 	vstr	s15, [r3]
 800953e:	2300      	movs	r3, #0
 8009540:	6723      	str	r3, [r4, #112]	; 0x70
 8009542:	6763      	str	r3, [r4, #116]	; 0x74
 8009544:	67a3      	str	r3, [r4, #120]	; 0x78
 8009546:	2364      	movs	r3, #100	; 0x64
 8009548:	f8c4 0f30 	str.w	r0, [r4, #3888]	; 0xf30
 800954c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8009550:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8009554:	f8c4 0f40 	str.w	r0, [r4, #3904]	; 0xf40
 8009558:	b011      	add	sp, #68	; 0x44
 800955a:	bd30      	pop	{r4, r5, pc}
 800955c:	f06f 0001 	mvn.w	r0, #1
 8009560:	e7fa      	b.n	8009558 <GW_init+0xa4>
	...

08009564 <GW_set_buffer_length>:
 8009564:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
 8009568:	ed2d 8b02 	vpush	{d8}
 800956c:	4683      	mov	fp, r0
 800956e:	b083      	sub	sp, #12
 8009570:	2800      	cmp	r0, #0
 8009572:	d071      	beq.n	8009658 <GW_set_buffer_length+0xf4>
 8009574:	2900      	cmp	r1, #0
 8009576:	d06f      	beq.n	8009658 <GW_set_buffer_length+0xf4>
 8009578:	edd0 7a02 	vldr	s15, [r0, #8]
 800957c:	ed91 7a03 	vldr	s14, [r1, #12]
 8009580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009584:	f10b 077c 	add.w	r7, fp, #124	; 0x7c
 8009588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800958c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009660 <GW_set_buffer_length+0xfc>
 8009590:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8009594:	ee17 0a90 	vmov	r0, s15
 8009598:	f7f6 ffee 	bl	8000578 <__aeabi_f2d>
 800959c:	ec41 0b10 	vmov	d0, r0, r1
 80095a0:	f007 f9ba 	bl	8010918 <ceil>
 80095a4:	ec51 0b10 	vmov	r0, r1, d0
 80095a8:	f7f7 faee 	bl	8000b88 <__aeabi_d2iz>
 80095ac:	2801      	cmp	r0, #1
 80095ae:	bfd6      	itet	le
 80095b0:	2302      	movle	r3, #2
 80095b2:	f8cb 000c 	strgt.w	r0, [fp, #12]
 80095b6:	f8cb 300c 	strle.w	r3, [fp, #12]
 80095ba:	f8db 100c 	ldr.w	r1, [fp, #12]
 80095be:	4638      	mov	r0, r7
 80095c0:	f001 fbc7 	bl	800ad52 <RFBVM_init>
 80095c4:	4604      	mov	r4, r0
 80095c6:	bb28      	cbnz	r0, 8009614 <GW_set_buffer_length+0xb0>
 80095c8:	f50b 7824 	add.w	r8, fp, #656	; 0x290
 80095cc:	f8db 100c 	ldr.w	r1, [fp, #12]
 80095d0:	4640      	mov	r0, r8
 80095d2:	f001 fbbe 	bl	800ad52 <RFBVM_init>
 80095d6:	4604      	mov	r4, r0
 80095d8:	b9e0      	cbnz	r0, 8009614 <GW_set_buffer_length+0xb0>
 80095da:	f20b 49a4 	addw	r9, fp, #1188	; 0x4a4
 80095de:	f8db 100c 	ldr.w	r1, [fp, #12]
 80095e2:	4648      	mov	r0, r9
 80095e4:	f001 fbb5 	bl	800ad52 <RFBVM_init>
 80095e8:	4604      	mov	r4, r0
 80095ea:	b998      	cbnz	r0, 8009614 <GW_set_buffer_length+0xb0>
 80095ec:	f50b 6ad7 	add.w	sl, fp, #1720	; 0x6b8
 80095f0:	f8db 100c 	ldr.w	r1, [fp, #12]
 80095f4:	4650      	mov	r0, sl
 80095f6:	f001 fbac 	bl	800ad52 <RFBVM_init>
 80095fa:	4604      	mov	r4, r0
 80095fc:	b950      	cbnz	r0, 8009614 <GW_set_buffer_length+0xb0>
 80095fe:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009664 <GW_set_buffer_length+0x100>
 8009602:	4603      	mov	r3, r0
 8009604:	f8db 200c 	ldr.w	r2, [fp, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	dc09      	bgt.n	8009620 <GW_set_buffer_length+0xbc>
 800960c:	2c00      	cmp	r4, #0
 800960e:	bf18      	it	ne
 8009610:	f06f 0407 	mvnne.w	r4, #7
 8009614:	4620      	mov	r0, r4
 8009616:	b003      	add	sp, #12
 8009618:	ecbd 8b02 	vpop	{d8}
 800961c:	e8bd 8f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, pc}
 8009620:	eeb0 0a48 	vmov.f32	s0, s16
 8009624:	4638      	mov	r0, r7
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	f001 fbaa 	bl	800ad80 <RFBVM_push>
 800962c:	eeb0 0a48 	vmov.f32	s0, s16
 8009630:	4404      	add	r4, r0
 8009632:	4640      	mov	r0, r8
 8009634:	f001 fba4 	bl	800ad80 <RFBVM_push>
 8009638:	eeb0 0a48 	vmov.f32	s0, s16
 800963c:	4404      	add	r4, r0
 800963e:	4648      	mov	r0, r9
 8009640:	f001 fb9e 	bl	800ad80 <RFBVM_push>
 8009644:	eeb0 0a48 	vmov.f32	s0, s16
 8009648:	4404      	add	r4, r0
 800964a:	4650      	mov	r0, sl
 800964c:	f001 fb98 	bl	800ad80 <RFBVM_push>
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	4404      	add	r4, r0
 8009654:	3301      	adds	r3, #1
 8009656:	e7d5      	b.n	8009604 <GW_set_buffer_length+0xa0>
 8009658:	f06f 0401 	mvn.w	r4, #1
 800965c:	e7da      	b.n	8009614 <GW_set_buffer_length+0xb0>
 800965e:	bf00      	nop
 8009660:	447a0000 	.word	0x447a0000
 8009664:	00000000 	.word	0x00000000

08009668 <GW_set_frequency>:
 8009668:	b513      	push	{r0, r1, r4, lr}
 800966a:	460b      	mov	r3, r1
 800966c:	4604      	mov	r4, r0
 800966e:	4611      	mov	r1, r2
 8009670:	b190      	cbz	r0, 8009698 <GW_set_frequency+0x30>
 8009672:	b18b      	cbz	r3, 8009698 <GW_set_frequency+0x30>
 8009674:	b182      	cbz	r2, 8009698 <GW_set_frequency+0x30>
 8009676:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	d90f      	bls.n	80096a0 <GW_set_frequency+0x38>
 8009680:	4618      	mov	r0, r3
 8009682:	9201      	str	r2, [sp, #4]
 8009684:	f000 fe02 	bl	800a28c <HT_set_frequency>
 8009688:	b940      	cbnz	r0, 800969c <GW_set_frequency+0x34>
 800968a:	9901      	ldr	r1, [sp, #4]
 800968c:	4620      	mov	r0, r4
 800968e:	b002      	add	sp, #8
 8009690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009694:	f7ff bf66 	b.w	8009564 <GW_set_buffer_length>
 8009698:	f06f 0001 	mvn.w	r0, #1
 800969c:	b002      	add	sp, #8
 800969e:	bd10      	pop	{r4, pc}
 80096a0:	f06f 0005 	mvn.w	r0, #5
 80096a4:	e7fa      	b.n	800969c <GW_set_frequency+0x34>

080096a6 <GW_update_hand_buffers>:
 80096a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096aa:	460d      	mov	r5, r1
 80096ac:	ed2d 8b04 	vpush	{d8-d9}
 80096b0:	4616      	mov	r6, r2
 80096b2:	4607      	mov	r7, r0
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f000 8082 	beq.w	80097be <GW_update_hand_buffers+0x118>
 80096ba:	2900      	cmp	r1, #0
 80096bc:	d07f      	beq.n	80097be <GW_update_hand_buffers+0x118>
 80096be:	f8d1 4178 	ldr.w	r4, [r1, #376]	; 0x178
 80096c2:	2c00      	cmp	r4, #0
 80096c4:	d04b      	beq.n	800975e <GW_update_hand_buffers+0xb8>
 80096c6:	68c3      	ldr	r3, [r0, #12]
 80096c8:	429c      	cmp	r4, r3
 80096ca:	dc7b      	bgt.n	80097c4 <GW_update_hand_buffers+0x11e>
 80096cc:	f8d1 1388 	ldr.w	r1, [r1, #904]	; 0x388
 80096d0:	f505 70be 	add.w	r0, r5, #380	; 0x17c
 80096d4:	1b09      	subs	r1, r1, r4
 80096d6:	f001 fbbb 	bl	800ae50 <RFBVM_get_element_value>
 80096da:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 80096de:	f8d5 159c 	ldr.w	r1, [r5, #1436]	; 0x59c
 80096e2:	f505 7064 	add.w	r0, r5, #912	; 0x390
 80096e6:	1ac9      	subs	r1, r1, r3
 80096e8:	eef0 9a40 	vmov.f32	s19, s0
 80096ec:	f001 fbb0 	bl	800ae50 <RFBVM_get_element_value>
 80096f0:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 80096f4:	f8d5 17b0 	ldr.w	r1, [r5, #1968]	; 0x7b0
 80096f8:	f205 50a4 	addw	r0, r5, #1444	; 0x5a4
 80096fc:	1ac9      	subs	r1, r1, r3
 80096fe:	eeb0 9a40 	vmov.f32	s18, s0
 8009702:	f001 fba5 	bl	800ae50 <RFBVM_get_element_value>
 8009706:	edd5 7a5b 	vldr	s15, [r5, #364]	; 0x16c
 800970a:	f895 3168 	ldrb.w	r3, [r5, #360]	; 0x168
 800970e:	eef0 8a40 	vmov.f32	s17, s0
 8009712:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009716:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800971a:	f507 7924 	add.w	r9, r7, #656	; 0x290
 800971e:	f207 48a4 	addw	r8, r7, #1188	; 0x4a4
 8009722:	eeb0 0a69 	vmov.f32	s0, s19
 8009726:	b39b      	cbz	r3, 8009790 <GW_update_hand_buffers+0xea>
 8009728:	f895 3169 	ldrb.w	r3, [r5, #361]	; 0x169
 800972c:	b383      	cbz	r3, 8009790 <GW_update_hand_buffers+0xea>
 800972e:	f001 fba6 	bl	800ae7e <RFBVM_fill>
 8009732:	eeb0 0a49 	vmov.f32	s0, s18
 8009736:	4604      	mov	r4, r0
 8009738:	4648      	mov	r0, r9
 800973a:	f001 fba0 	bl	800ae7e <RFBVM_fill>
 800973e:	eeb0 0a68 	vmov.f32	s0, s17
 8009742:	4404      	add	r4, r0
 8009744:	4640      	mov	r0, r8
 8009746:	f001 fb9a 	bl	800ae7e <RFBVM_fill>
 800974a:	2500      	movs	r5, #0
 800974c:	4404      	add	r4, r0
 800974e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8009752:	f507 69d7 	add.w	r9, r7, #1720	; 0x6b8
 8009756:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800975a:	42a9      	cmp	r1, r5
 800975c:	dc04      	bgt.n	8009768 <GW_update_hand_buffers+0xc2>
 800975e:	ecbd 8b04 	vpop	{d8-d9}
 8009762:	4620      	mov	r0, r4
 8009764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009768:	fb08 f305 	mul.w	r3, r8, r5
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	ed96 7a03 	vldr	s14, [r6, #12]
 8009774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009778:	3901      	subs	r1, #1
 800977a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800977e:	1b49      	subs	r1, r1, r5
 8009780:	4648      	mov	r0, r9
 8009782:	3501      	adds	r5, #1
 8009784:	ee38 0a40 	vsub.f32	s0, s16, s0
 8009788:	f001 fb6e 	bl	800ae68 <RFBVM_set_element_value>
 800978c:	4404      	add	r4, r0
 800978e:	e7e2      	b.n	8009756 <GW_update_hand_buffers+0xb0>
 8009790:	f001 faf6 	bl	800ad80 <RFBVM_push>
 8009794:	eeb0 0a49 	vmov.f32	s0, s18
 8009798:	4604      	mov	r4, r0
 800979a:	4648      	mov	r0, r9
 800979c:	f001 faf0 	bl	800ad80 <RFBVM_push>
 80097a0:	eeb0 0a68 	vmov.f32	s0, s17
 80097a4:	4404      	add	r4, r0
 80097a6:	4640      	mov	r0, r8
 80097a8:	f001 faea 	bl	800ad80 <RFBVM_push>
 80097ac:	eeb0 0a48 	vmov.f32	s0, s16
 80097b0:	4404      	add	r4, r0
 80097b2:	f507 60d7 	add.w	r0, r7, #1720	; 0x6b8
 80097b6:	f001 fae3 	bl	800ad80 <RFBVM_push>
 80097ba:	4404      	add	r4, r0
 80097bc:	e7cf      	b.n	800975e <GW_update_hand_buffers+0xb8>
 80097be:	f06f 0401 	mvn.w	r4, #1
 80097c2:	e7cc      	b.n	800975e <GW_update_hand_buffers+0xb8>
 80097c4:	2400      	movs	r4, #0
 80097c6:	e7ca      	b.n	800975e <GW_update_hand_buffers+0xb8>

080097c8 <GW_compute_speeds>:
 80097c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097cc:	4604      	mov	r4, r0
 80097ce:	ed2d 8b0c 	vpush	{d8-d13}
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f000 80cb 	beq.w	800996e <GW_compute_speeds+0x1a6>
 80097d8:	2900      	cmp	r1, #0
 80097da:	f000 80c8 	beq.w	800996e <GW_compute_speeds+0x1a6>
 80097de:	f890 6048 	ldrb.w	r6, [r0, #72]	; 0x48
 80097e2:	68c5      	ldr	r5, [r0, #12]
 80097e4:	2e00      	cmp	r6, #0
 80097e6:	f040 80a3 	bne.w	8009930 <GW_compute_speeds+0x168>
 80097ea:	edd1 6a03 	vldr	s13, [r1, #12]
 80097ee:	eddf 8a61 	vldr	s17, [pc, #388]	; 8009974 <GW_compute_speeds+0x1ac>
 80097f2:	ee07 5a10 	vmov	s14, r5
 80097f6:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80097fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009802:	fb05 f305 	mul.w	r3, r5, r5
 8009806:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800980a:	3b01      	subs	r3, #1
 800980c:	f100 077c 	add.w	r7, r0, #124	; 0x7c
 8009810:	f500 7824 	add.w	r8, r0, #656	; 0x290
 8009814:	f200 49a4 	addw	r9, r0, #1188	; 0x4a4
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009820:	1c6b      	adds	r3, r5, #1
 8009822:	ee86 9a27 	vdiv.f32	s18, s12, s15
 8009826:	eef9 7a08 	vmov.f32	s15, #152	; 0xc0c00000 -6.0
 800982a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8009836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800983a:	eef0 9a68 	vmov.f32	s19, s17
 800983e:	eec6 aa27 	vdiv.f32	s21, s12, s15
 8009842:	eeb0 aa68 	vmov.f32	s20, s17
 8009846:	42ae      	cmp	r6, r5
 8009848:	da67      	bge.n	800991a <GW_compute_speeds+0x152>
 800984a:	ee07 6a90 	vmov	s15, r6
 800984e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009852:	eeb0 8a6a 	vmov.f32	s16, s21
 8009856:	eea7 8a89 	vfma.f32	s16, s15, s18
 800985a:	4631      	mov	r1, r6
 800985c:	4638      	mov	r0, r7
 800985e:	f001 faf7 	bl	800ae50 <RFBVM_get_element_value>
 8009862:	4631      	mov	r1, r6
 8009864:	4640      	mov	r0, r8
 8009866:	eea8 aa00 	vfma.f32	s20, s16, s0
 800986a:	f001 faf1 	bl	800ae50 <RFBVM_get_element_value>
 800986e:	4631      	mov	r1, r6
 8009870:	4648      	mov	r0, r9
 8009872:	eee8 9a00 	vfma.f32	s19, s16, s0
 8009876:	f001 faeb 	bl	800ae50 <RFBVM_get_element_value>
 800987a:	3601      	adds	r6, #1
 800987c:	eee8 8a00 	vfma.f32	s17, s16, s0
 8009880:	e7e1      	b.n	8009846 <GW_compute_speeds+0x7e>
 8009882:	4631      	mov	r1, r6
 8009884:	4638      	mov	r0, r7
 8009886:	f001 fae3 	bl	800ae50 <RFBVM_get_element_value>
 800988a:	4631      	mov	r1, r6
 800988c:	4640      	mov	r0, r8
 800988e:	eeb0 ba40 	vmov.f32	s22, s0
 8009892:	f001 fadd 	bl	800ae50 <RFBVM_get_element_value>
 8009896:	4631      	mov	r1, r6
 8009898:	f204 40a4 	addw	r0, r4, #1188	; 0x4a4
 800989c:	eef0 aa40 	vmov.f32	s21, s0
 80098a0:	f001 fad6 	bl	800ae50 <RFBVM_get_element_value>
 80098a4:	4631      	mov	r1, r6
 80098a6:	f504 60d7 	add.w	r0, r4, #1720	; 0x6b8
 80098aa:	eeb0 aa40 	vmov.f32	s20, s0
 80098ae:	f001 facf 	bl	800ae50 <RFBVM_get_element_value>
 80098b2:	eec0 7a2d 	vdiv.f32	s15, s0, s27
 80098b6:	3601      	adds	r6, #1
 80098b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80098bc:	eea7 daa7 	vfma.f32	s26, s15, s15
 80098c0:	eeeb ca27 	vfma.f32	s25, s22, s15
 80098c4:	eeaa caa7 	vfma.f32	s24, s21, s15
 80098c8:	eeea ba27 	vfma.f32	s23, s20, s15
 80098cc:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80098d0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80098d4:	ee38 8a0a 	vadd.f32	s16, s16, s20
 80098d8:	42ae      	cmp	r6, r5
 80098da:	dbd2      	blt.n	8009882 <GW_compute_speeds+0xba>
 80098dc:	ee07 5a90 	vmov	s15, r5
 80098e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098e4:	ee68 7ae8 	vnmul.f32	s15, s17, s17
 80098e8:	eee7 7a0d 	vfma.f32	s15, s14, s26
 80098ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80098f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f4:	d034      	beq.n	8009960 <GW_compute_speeds+0x198>
 80098f6:	ee69 9ae8 	vnmul.f32	s19, s19, s17
 80098fa:	ee29 9a68 	vnmul.f32	s18, s18, s17
 80098fe:	ee28 8a68 	vnmul.f32	s16, s16, s17
 8009902:	eee7 9a2c 	vfma.f32	s19, s14, s25
 8009906:	eea7 9a0c 	vfma.f32	s18, s14, s24
 800990a:	eea7 8a2b 	vfma.f32	s16, s14, s23
 800990e:	ee89 aaa7 	vdiv.f32	s20, s19, s15
 8009912:	eec8 8a27 	vdiv.f32	s17, s16, s15
 8009916:	eec9 9a27 	vdiv.f32	s19, s18, s15
 800991a:	2000      	movs	r0, #0
 800991c:	ed84 aa1c 	vstr	s20, [r4, #112]	; 0x70
 8009920:	edc4 9a1d 	vstr	s19, [r4, #116]	; 0x74
 8009924:	edc4 8a1e 	vstr	s17, [r4, #120]	; 0x78
 8009928:	ecbd 8b0c 	vpop	{d8-d13}
 800992c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009930:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8009974 <GW_compute_speeds+0x1ac>
 8009934:	eddf da10 	vldr	s27, [pc, #64]	; 8009978 <GW_compute_speeds+0x1b0>
 8009938:	eeb0 9a48 	vmov.f32	s18, s16
 800993c:	eef0 9a48 	vmov.f32	s19, s16
 8009940:	eef0 ba48 	vmov.f32	s23, s16
 8009944:	eeb0 ca48 	vmov.f32	s24, s16
 8009948:	eef0 ca48 	vmov.f32	s25, s16
 800994c:	eeb0 da48 	vmov.f32	s26, s16
 8009950:	eef0 8a48 	vmov.f32	s17, s16
 8009954:	2600      	movs	r6, #0
 8009956:	f100 077c 	add.w	r7, r0, #124	; 0x7c
 800995a:	f500 7824 	add.w	r8, r0, #656	; 0x290
 800995e:	e7bb      	b.n	80098d8 <GW_compute_speeds+0x110>
 8009960:	eddf 8a04 	vldr	s17, [pc, #16]	; 8009974 <GW_compute_speeds+0x1ac>
 8009964:	eef0 9a68 	vmov.f32	s19, s17
 8009968:	eeb0 aa68 	vmov.f32	s20, s17
 800996c:	e7d5      	b.n	800991a <GW_compute_speeds+0x152>
 800996e:	f06f 0001 	mvn.w	r0, #1
 8009972:	e7d9      	b.n	8009928 <GW_compute_speeds+0x160>
 8009974:	00000000 	.word	0x00000000
 8009978:	447a0000 	.word	0x447a0000
 800997c:	00000000 	.word	0x00000000

08009980 <GW_interpret_speeds>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	ed2d 8b06 	vpush	{d8-d10}
 8009988:	4604      	mov	r4, r0
 800998a:	b087      	sub	sp, #28
 800998c:	2800      	cmp	r0, #0
 800998e:	f000 81cc 	beq.w	8009d2a <GW_interpret_speeds+0x3aa>
 8009992:	6803      	ldr	r3, [r0, #0]
 8009994:	f003 060c 	and.w	r6, r3, #12
 8009998:	f003 0570 	and.w	r5, r3, #112	; 0x70
 800999c:	079b      	lsls	r3, r3, #30
 800999e:	d051      	beq.n	8009a44 <GW_interpret_speeds+0xc4>
 80099a0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80099a2:	f7f6 fde9 	bl	8000578 <__aeabi_f2d>
 80099a6:	ec41 0b18 	vmov	d8, r0, r1
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d051      	beq.n	8009a52 <GW_interpret_speeds+0xd2>
 80099ae:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80099b0:	f7f6 fde2 	bl	8000578 <__aeabi_f2d>
 80099b4:	ec41 0b19 	vmov	d9, r0, r1
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	d051      	beq.n	8009a60 <GW_interpret_speeds+0xe0>
 80099bc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80099be:	f7f6 fddb 	bl	8000578 <__aeabi_f2d>
 80099c2:	e9cd 0100 	strd	r0, r1, [sp]
 80099c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80099c8:	f7f6 fdc4 	bl	8000554 <__aeabi_i2d>
 80099cc:	2300      	movs	r3, #0
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 80099d6:	ec51 0b18 	vmov	r0, r1, d8
 80099da:	ec53 2b18 	vmov	r2, r3, d8
 80099de:	f7f6 fe23 	bl	8000628 <__aeabi_dmul>
 80099e2:	ec53 2b19 	vmov	r2, r3, d9
 80099e6:	4680      	mov	r8, r0
 80099e8:	4689      	mov	r9, r1
 80099ea:	ec51 0b19 	vmov	r0, r1, d9
 80099ee:	f7f6 fe1b 	bl	8000628 <__aeabi_dmul>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4640      	mov	r0, r8
 80099f8:	4649      	mov	r1, r9
 80099fa:	f7f6 fc5f 	bl	80002bc <__adddf3>
 80099fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a02:	4680      	mov	r8, r0
 8009a04:	4689      	mov	r9, r1
 8009a06:	4610      	mov	r0, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7f6 fe0d 	bl	8000628 <__aeabi_dmul>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4640      	mov	r0, r8
 8009a14:	4649      	mov	r1, r9
 8009a16:	f7f6 fc51 	bl	80002bc <__adddf3>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	ec41 0b1a 	vmov	d10, r0, r1
 8009a20:	463b      	mov	r3, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	f7f6 fdff 	bl	8000628 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	ec51 0b1a 	vmov	r0, r1, d10
 8009a32:	f7f7 f86b 	bl	8000b0c <__aeabi_dcmplt>
 8009a36:	b9c0      	cbnz	r0, 8009a6a <GW_interpret_speeds+0xea>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	b007      	add	sp, #28
 8009a3c:	ecbd 8b06 	vpop	{d8-d10}
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	ed9f 7bbe 	vldr	d7, [pc, #760]	; 8009d40 <GW_interpret_speeds+0x3c0>
 8009a48:	eeb0 8a47 	vmov.f32	s16, s14
 8009a4c:	eef0 8a67 	vmov.f32	s17, s15
 8009a50:	e7ab      	b.n	80099aa <GW_interpret_speeds+0x2a>
 8009a52:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 8009d40 <GW_interpret_speeds+0x3c0>
 8009a56:	eeb0 9a47 	vmov.f32	s18, s14
 8009a5a:	eef0 9a67 	vmov.f32	s19, s15
 8009a5e:	e7ab      	b.n	80099b8 <GW_interpret_speeds+0x38>
 8009a60:	ed9f 7bb7 	vldr	d7, [pc, #732]	; 8009d40 <GW_interpret_speeds+0x3c0>
 8009a64:	ed8d 7b00 	vstr	d7, [sp]
 8009a68:	e7ad      	b.n	80099c6 <GW_interpret_speeds+0x46>
 8009a6a:	ee18 3a90 	vmov	r3, s17
 8009a6e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8009a72:	ee19 3a90 	vmov	r3, s19
 8009a76:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8009a7a:	ee19 0a10 	vmov	r0, s18
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2300      	movs	r3, #0
 8009a82:	4659      	mov	r1, fp
 8009a84:	ee18 6a10 	vmov	r6, s16
 8009a88:	ee19 aa10 	vmov	sl, s18
 8009a8c:	f7f7 f85c 	bl	8000b48 <__aeabi_dcmpgt>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f000 80ff 	beq.w	8009c94 <GW_interpret_speeds+0x314>
 8009a96:	ee19 2a10 	vmov	r2, s18
 8009a9a:	ee18 0a10 	vmov	r0, s16
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f6 feeb 	bl	800087c <__aeabi_ddiv>
 8009aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aaa:	e9dd 8300 	ldrd	r8, r3, [sp]
 8009aae:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f7 f845 	bl	8000b48 <__aeabi_dcmpgt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f000 80ed 	beq.w	8009c9e <GW_interpret_speeds+0x31e>
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fed6 	bl	800087c <__aeabi_ddiv>
 8009ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad4:	69e0      	ldr	r0, [r4, #28]
 8009ad6:	f7f6 fd3d 	bl	8000554 <__aeabi_i2d>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7f7 f831 	bl	8000b48 <__aeabi_dcmpgt>
 8009ae6:	b1f8      	cbz	r0, 8009b28 <GW_interpret_speeds+0x1a8>
 8009ae8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009aea:	f7f6 fd45 	bl	8000578 <__aeabi_f2d>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af6:	f7f7 f827 	bl	8000b48 <__aeabi_dcmpgt>
 8009afa:	b1a8      	cbz	r0, 8009b28 <GW_interpret_speeds+0x1a8>
 8009afc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009afe:	f7f6 fd3b 	bl	8000578 <__aeabi_f2d>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b0a:	f7f7 f81d 	bl	8000b48 <__aeabi_dcmpgt>
 8009b0e:	b158      	cbz	r0, 8009b28 <GW_interpret_speeds+0x1a8>
 8009b10:	ec51 0b18 	vmov	r0, r1, d8
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	f7f7 f816 	bl	8000b48 <__aeabi_dcmpgt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f000 80c3 	beq.w	8009ca8 <GW_interpret_speeds+0x328>
 8009b22:	2302      	movs	r3, #2
 8009b24:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	4639      	mov	r1, r7
 8009b30:	f7f7 f80a 	bl	8000b48 <__aeabi_dcmpgt>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f000 80c2 	beq.w	8009cbe <GW_interpret_speeds+0x33e>
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	463b      	mov	r3, r7
 8009b3e:	4650      	mov	r0, sl
 8009b40:	4659      	mov	r1, fp
 8009b42:	f7f6 fe9b 	bl	800087c <__aeabi_ddiv>
 8009b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4649      	mov	r1, r9
 8009b52:	f7f6 fff9 	bl	8000b48 <__aeabi_dcmpgt>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f000 80b6 	beq.w	8009cc8 <GW_interpret_speeds+0x348>
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	f7f6 fe8a 	bl	800087c <__aeabi_ddiv>
 8009b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b6c:	6a20      	ldr	r0, [r4, #32]
 8009b6e:	f7f6 fcf1 	bl	8000554 <__aeabi_i2d>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4650      	mov	r0, sl
 8009b78:	4659      	mov	r1, fp
 8009b7a:	f7f6 ffe5 	bl	8000b48 <__aeabi_dcmpgt>
 8009b7e:	b1f8      	cbz	r0, 8009bc0 <GW_interpret_speeds+0x240>
 8009b80:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009b82:	f7f6 fcf9 	bl	8000578 <__aeabi_f2d>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8e:	f7f6 ffdb 	bl	8000b48 <__aeabi_dcmpgt>
 8009b92:	b1a8      	cbz	r0, 8009bc0 <GW_interpret_speeds+0x240>
 8009b94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009b96:	f7f6 fcef 	bl	8000578 <__aeabi_f2d>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ba2:	f7f6 ffd1 	bl	8000b48 <__aeabi_dcmpgt>
 8009ba6:	b158      	cbz	r0, 8009bc0 <GW_interpret_speeds+0x240>
 8009ba8:	ec51 0b19 	vmov	r0, r1, d9
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f7f6 ffca 	bl	8000b48 <__aeabi_dcmpgt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f000 808c 	beq.w	8009cd2 <GW_interpret_speeds+0x352>
 8009bba:	2304      	movs	r3, #4
 8009bbc:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 ffbe 	bl	8000b48 <__aeabi_dcmpgt>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	f000 808b 	beq.w	8009ce8 <GW_interpret_speeds+0x368>
 8009bd2:	4632      	mov	r2, r6
 8009bd4:	463b      	mov	r3, r7
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f7f6 fe4f 	bl	800087c <__aeabi_ddiv>
 8009bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	4650      	mov	r0, sl
 8009be8:	4659      	mov	r1, fp
 8009bea:	f7f6 ffad 	bl	8000b48 <__aeabi_dcmpgt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d07f      	beq.n	8009cf2 <GW_interpret_speeds+0x372>
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	465b      	mov	r3, fp
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	f7f6 fe3f 	bl	800087c <__aeabi_ddiv>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c04:	f7f6 fca6 	bl	8000554 <__aeabi_i2d>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 ff9a 	bl	8000b48 <__aeabi_dcmpgt>
 8009c14:	b328      	cbz	r0, 8009c62 <GW_interpret_speeds+0x2e2>
 8009c16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009c18:	f7f6 fcae 	bl	8000578 <__aeabi_f2d>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c24:	f7f6 ff90 	bl	8000b48 <__aeabi_dcmpgt>
 8009c28:	b1d8      	cbz	r0, 8009c62 <GW_interpret_speeds+0x2e2>
 8009c2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009c2c:	f7f6 fca4 	bl	8000578 <__aeabi_f2d>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4630      	mov	r0, r6
 8009c36:	4639      	mov	r1, r7
 8009c38:	f7f6 ff86 	bl	8000b48 <__aeabi_dcmpgt>
 8009c3c:	b188      	cbz	r0, 8009c62 <GW_interpret_speeds+0x2e2>
 8009c3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	f8d4 5f48 	ldr.w	r5, [r4, #3912]	; 0xf48
 8009c4a:	f7f6 ff7d 	bl	8000b48 <__aeabi_dcmpgt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d053      	beq.n	8009cfa <GW_interpret_speeds+0x37a>
 8009c52:	2301      	movs	r3, #1
 8009c54:	f8c4 3f58 	str.w	r3, [r4, #3928]	; 0xf58
 8009c58:	f8c4 5f50 	str.w	r5, [r4, #3920]	; 0xf50
 8009c5c:	2306      	movs	r3, #6
 8009c5e:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8009c62:	f894 2f3c 	ldrb.w	r2, [r4, #3900]	; 0xf3c
 8009c66:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	d160      	bne.n	8009d30 <GW_interpret_speeds+0x3b0>
 8009c6e:	2bc8      	cmp	r3, #200	; 0xc8
 8009c70:	f47f aee2 	bne.w	8009a38 <GW_interpret_speeds+0xb8>
 8009c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c76:	f7f6 fc7f 	bl	8000578 <__aeabi_f2d>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	ec51 0b1a 	vmov	r0, r1, d10
 8009c82:	f7f6 ff43 	bl	8000b0c <__aeabi_dcmplt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f aed6 	beq.w	8009a38 <GW_interpret_speeds+0xb8>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f884 3f3c 	strb.w	r3, [r4, #3900]	; 0xf3c
 8009c92:	e6d1      	b.n	8009a38 <GW_interpret_speeds+0xb8>
 8009c94:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8009d48 <GW_interpret_speeds+0x3c8>
 8009c98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c9c:	e705      	b.n	8009aaa <GW_interpret_speeds+0x12a>
 8009c9e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8009d48 <GW_interpret_speeds+0x3c8>
 8009ca2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ca6:	e715      	b.n	8009ad4 <GW_interpret_speeds+0x154>
 8009ca8:	ec51 0b18 	vmov	r0, r1, d8
 8009cac:	2200      	movs	r2, #0
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f7f6 ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f43f af37 	beq.w	8009b28 <GW_interpret_speeds+0x1a8>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e732      	b.n	8009b24 <GW_interpret_speeds+0x1a4>
 8009cbe:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8009d48 <GW_interpret_speeds+0x3c8>
 8009cc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cc6:	e740      	b.n	8009b4a <GW_interpret_speeds+0x1ca>
 8009cc8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8009d48 <GW_interpret_speeds+0x3c8>
 8009ccc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cd0:	e74c      	b.n	8009b6c <GW_interpret_speeds+0x1ec>
 8009cd2:	ec51 0b19 	vmov	r0, r1, d9
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f7f6 ff17 	bl	8000b0c <__aeabi_dcmplt>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f af6e 	beq.w	8009bc0 <GW_interpret_speeds+0x240>
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e769      	b.n	8009bbc <GW_interpret_speeds+0x23c>
 8009ce8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8009d48 <GW_interpret_speeds+0x3c8>
 8009cec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cf0:	e777      	b.n	8009be2 <GW_interpret_speeds+0x262>
 8009cf2:	4f17      	ldr	r7, [pc, #92]	; (8009d50 <GW_interpret_speeds+0x3d0>)
 8009cf4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 8009cf8:	e783      	b.n	8009c02 <GW_interpret_speeds+0x282>
 8009cfa:	f8d4 3f58 	ldr.w	r3, [r4, #3928]	; 0xf58
 8009cfe:	f8c4 5f4c 	str.w	r5, [r4, #3916]	; 0xf4c
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d10f      	bne.n	8009d26 <GW_interpret_speeds+0x3a6>
 8009d06:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8009d0a:	f8c4 0f58 	str.w	r0, [r4, #3928]	; 0xf58
 8009d0e:	1aad      	subs	r5, r5, r2
 8009d10:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009d12:	f8c4 5f54 	str.w	r5, [r4, #3924]	; 0xf54
 8009d16:	4295      	cmp	r5, r2
 8009d18:	dc03      	bgt.n	8009d22 <GW_interpret_speeds+0x3a2>
 8009d1a:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
 8009d1e:	2307      	movs	r3, #7
 8009d20:	e79d      	b.n	8009c5e <GW_interpret_speeds+0x2de>
 8009d22:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
 8009d26:	2305      	movs	r3, #5
 8009d28:	e799      	b.n	8009c5e <GW_interpret_speeds+0x2de>
 8009d2a:	f06f 0001 	mvn.w	r0, #1
 8009d2e:	e684      	b.n	8009a3a <GW_interpret_speeds+0xba>
 8009d30:	2bc8      	cmp	r3, #200	; 0xc8
 8009d32:	f43f ae81 	beq.w	8009a38 <GW_interpret_speeds+0xb8>
 8009d36:	2000      	movs	r0, #0
 8009d38:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8009d3c:	e67d      	b.n	8009a3a <GW_interpret_speeds+0xba>
 8009d3e:	bf00      	nop
	...
 8009d48:	e0000000 	.word	0xe0000000
 8009d4c:	47efffff 	.word	0x47efffff
 8009d50:	47efffff 	.word	0x47efffff
 8009d54:	00000000 	.word	0x00000000

08009d58 <GW_update_prediction>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	4615      	mov	r5, r2
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f000 80b7 	beq.w	8009ed2 <GW_update_prediction+0x17a>
 8009d64:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
 8009d68:	f001 f848 	bl	800adfc <RFBVM_mean>
 8009d6c:	f504 660d 	add.w	r6, r4, #2256	; 0x8d0
 8009d70:	ed86 0a00 	vstr	s0, [r6]
 8009d74:	f894 38cc 	ldrb.w	r3, [r4, #2252]	; 0x8cc
 8009d78:	f894 cf1c 	ldrb.w	ip, [r4, #3868]	; 0xf1c
 8009d7c:	6920      	ldr	r0, [r4, #16]
 8009d7e:	ebac 0103 	sub.w	r1, ip, r3
 8009d82:	424a      	negs	r2, r1
 8009d84:	414a      	adcs	r2, r1
 8009d86:	f604 772c 	addw	r7, r4, #3884	; 0xf2c
 8009d8a:	f894 1f28 	ldrb.w	r1, [r4, #3880]	; 0xf28
 8009d8e:	edd7 7a00 	vldr	s15, [r7]
 8009d92:	f884 28d8 	strb.w	r2, [r4, #2264]	; 0x8d8
 8009d96:	2900      	cmp	r1, #0
 8009d98:	bf08      	it	eq
 8009d9a:	2200      	moveq	r2, #0
 8009d9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009da0:	edd4 7a06 	vldr	s15, [r4, #24]
 8009da4:	f884 28d5 	strb.w	r2, [r4, #2261]	; 0x8d5
 8009da8:	f8d4 2f24 	ldr.w	r2, [r4, #3876]	; 0xf24
 8009dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009db0:	1aaa      	subs	r2, r5, r2
 8009db2:	4282      	cmp	r2, r0
 8009db4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009db8:	bfd4      	ite	le
 8009dba:	2200      	movle	r2, #0
 8009dbc:	2201      	movgt	r2, #1
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	f884 28d6 	strb.w	r2, [r4, #2262]	; 0x8d6
 8009dc6:	bfcc      	ite	gt
 8009dc8:	2201      	movgt	r2, #1
 8009dca:	2200      	movle	r2, #0
 8009dcc:	f884 28d4 	strb.w	r2, [r4, #2260]	; 0x8d4
 8009dd0:	1e58      	subs	r0, r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d06e      	beq.n	8009eb4 <GW_update_prediction+0x15c>
 8009dd6:	4218      	tst	r0, r3
 8009dd8:	bf0c      	ite	eq
 8009dda:	2201      	moveq	r2, #1
 8009ddc:	2200      	movne	r2, #0
 8009dde:	459c      	cmp	ip, r3
 8009de0:	f884 28d9 	strb.w	r2, [r4, #2265]	; 0x8d9
 8009de4:	d003      	beq.n	8009dee <GW_update_prediction+0x96>
 8009de6:	b111      	cbz	r1, 8009dee <GW_update_prediction+0x96>
 8009de8:	2200      	movs	r2, #0
 8009dea:	f884 2f28 	strb.w	r2, [r4, #3880]	; 0xf28
 8009dee:	fab3 f383 	clz	r3, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	f884 38d7 	strb.w	r3, [r4, #2263]	; 0x8d7
 8009df8:	f7f6 fbac 	bl	8000554 <__aeabi_i2d>
 8009dfc:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8009ed8 <GW_update_prediction+0x180>
 8009e00:	ec41 0b11 	vmov	d1, r0, r1
 8009e04:	f006 fbd0 	bl	80105a8 <pow>
 8009e08:	ec51 0b10 	vmov	r0, r1, d0
 8009e0c:	f7f6 fee4 	bl	8000bd8 <__aeabi_d2uiz>
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	4218      	tst	r0, r3
 8009e14:	f894 38d7 	ldrb.w	r3, [r4, #2263]	; 0x8d7
 8009e18:	bf18      	it	ne
 8009e1a:	f043 0301 	orrne.w	r3, r3, #1
 8009e1e:	f884 38d7 	strb.w	r3, [r4, #2263]	; 0x8d7
 8009e22:	bb53      	cbnz	r3, 8009e7a <GW_update_prediction+0x122>
 8009e24:	f894 38d5 	ldrb.w	r3, [r4, #2261]	; 0x8d5
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d145      	bne.n	8009eb8 <GW_update_prediction+0x160>
 8009e2c:	f8d4 38d4 	ldr.w	r3, [r4, #2260]	; 0x8d4
 8009e30:	f013 1fff 	tst.w	r3, #16711935	; 0xff00ff
 8009e34:	d102      	bne.n	8009e3c <GW_update_prediction+0xe4>
 8009e36:	f894 38d8 	ldrb.w	r3, [r4, #2264]	; 0x8d8
 8009e3a:	b1f3      	cbz	r3, 8009e7a <GW_update_prediction+0x122>
 8009e3c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8009e40:	ed96 7a00 	vldr	s14, [r6]
 8009e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e50:	d513      	bpl.n	8009e7a <GW_update_prediction+0x122>
 8009e52:	f894 38cc 	ldrb.w	r3, [r4, #2252]	; 0x8cc
 8009e56:	f884 3f1c 	strb.w	r3, [r4, #3868]	; 0xf1c
 8009e5a:	f8d4 3f5c 	ldr.w	r3, [r4, #3932]	; 0xf5c
 8009e5e:	b113      	cbz	r3, 8009e66 <GW_update_prediction+0x10e>
 8009e60:	2307      	movs	r3, #7
 8009e62:	f884 3f1c 	strb.w	r3, [r4, #3868]	; 0xf1c
 8009e66:	f240 1301 	movw	r3, #257	; 0x101
 8009e6a:	f8c4 5f20 	str.w	r5, [r4, #3872]	; 0xf20
 8009e6e:	f8c4 5f24 	str.w	r5, [r4, #3876]	; 0xf24
 8009e72:	f8a4 3f28 	strh.w	r3, [r4, #3880]	; 0xf28
 8009e76:	ed87 7a00 	vstr	s14, [r7]
 8009e7a:	f8d4 2f20 	ldr.w	r2, [r4, #3872]	; 0xf20
 8009e7e:	6963      	ldr	r3, [r4, #20]
 8009e80:	1aad      	subs	r5, r5, r2
 8009e82:	429d      	cmp	r5, r3
 8009e84:	bfcc      	ite	gt
 8009e86:	2301      	movgt	r3, #1
 8009e88:	2300      	movle	r3, #0
 8009e8a:	f884 38da 	strb.w	r3, [r4, #2266]	; 0x8da
 8009e8e:	dd16      	ble.n	8009ebe <GW_update_prediction+0x166>
 8009e90:	f894 3f29 	ldrb.w	r3, [r4, #3881]	; 0xf29
 8009e94:	b19b      	cbz	r3, 8009ebe <GW_update_prediction+0x166>
 8009e96:	2301      	movs	r3, #1
 8009e98:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 8009e9c:	f894 3f1c 	ldrb.w	r3, [r4, #3868]	; 0xf1c
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	2b05      	cmp	r3, #5
 8009ea4:	f884 0f29 	strb.w	r0, [r4, #3881]	; 0xf29
 8009ea8:	d003      	beq.n	8009eb2 <GW_update_prediction+0x15a>
 8009eaa:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
 8009eae:	f8c4 0f58 	str.w	r0, [r4, #3928]	; 0xf58
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	e792      	b.n	8009dde <GW_update_prediction+0x86>
 8009eb8:	f8c4 5f24 	str.w	r5, [r4, #3876]	; 0xf24
 8009ebc:	e7dd      	b.n	8009e7a <GW_update_prediction+0x122>
 8009ebe:	f894 2f2a 	ldrb.w	r2, [r4, #3882]	; 0xf2a
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	b10a      	cbz	r2, 8009eca <GW_update_prediction+0x172>
 8009ec6:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
 8009eca:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e7ef      	b.n	8009eb2 <GW_update_prediction+0x15a>
 8009ed2:	f06f 0001 	mvn.w	r0, #1
 8009ed6:	e7ec      	b.n	8009eb2 <GW_update_prediction+0x15a>
 8009ed8:	00000000 	.word	0x00000000
 8009edc:	40000000 	.word	0x40000000

08009ee0 <GW_filter_prediction>:
 8009ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee4:	f600 7444 	addw	r4, r0, #3908	; 0xf44
 8009ee8:	2500      	movs	r5, #0
 8009eea:	2300      	movs	r3, #0
 8009eec:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009ef0:	6025      	str	r5, [r4, #0]
 8009ef2:	f102 0720 	add.w	r7, r2, #32
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8009efc:	f501 7e94 	add.w	lr, r1, #296	; 0x128
 8009f00:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8009f04:	45b4      	cmp	ip, r6
 8009f06:	dc46      	bgt.n	8009f96 <GW_filter_prediction+0xb6>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d069      	beq.n	8009fe0 <GW_filter_prediction+0x100>
 8009f0c:	ee07 3a90 	vmov	s15, r3
 8009f10:	edd4 6a00 	vldr	s13, [r4]
 8009f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1c:	f890 3f2a 	ldrb.w	r3, [r0, #3882]	; 0xf2a
 8009f20:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 8009f24:	ed84 7a00 	vstr	s14, [r4]
 8009f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f34:	bfc2      	ittt	gt
 8009f36:	ed90 7a14 	vldrgt	s14, [r0, #80]	; 0x50
 8009f3a:	eeb8 7ac7 	vcvtgt.f32.s32	s14, s14
 8009f3e:	ed84 7a00 	vstrgt	s14, [r4]
 8009f42:	ed90 7a15 	vldr	s14, [r0, #84]	; 0x54
 8009f46:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009f4a:	ed94 7a00 	vldr	s14, [r4]
 8009f4e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009f52:	b15b      	cbz	r3, 8009f6c <GW_filter_prediction+0x8c>
 8009f54:	f600 732c 	addw	r3, r0, #3884	; 0xf2c
 8009f58:	edd3 6a00 	vldr	s13, [r3]
 8009f5c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	bfc4      	itt	gt
 8009f66:	2300      	movgt	r3, #0
 8009f68:	f880 3f2a 	strbgt.w	r3, [r0, #3882]	; 0xf2a
 8009f6c:	edd1 6a09 	vldr	s13, [r1, #36]	; 0x24
 8009f70:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f78:	dd0a      	ble.n	8009f90 <GW_filter_prediction+0xb0>
 8009f7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f82:	d505      	bpl.n	8009f90 <GW_filter_prediction+0xb0>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f881 3168 	strb.w	r3, [r1, #360]	; 0x168
 8009f8a:	61cd      	str	r5, [r1, #28]
 8009f8c:	620d      	str	r5, [r1, #32]
 8009f8e:	624d      	str	r5, [r1, #36]	; 0x24
 8009f90:	2000      	movs	r0, #0
 8009f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f96:	f812 8b01 	ldrb.w	r8, [r2], #1
 8009f9a:	f1b8 0f00 	cmp.w	r8, #0
 8009f9e:	d016      	beq.n	8009fce <GW_filter_prediction+0xee>
 8009fa0:	ed90 7a14 	vldr	s14, [r0, #80]	; 0x50
 8009fa4:	edd7 7a00 	vldr	s15, [r7]
 8009fa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb4:	d50b      	bpl.n	8009fce <GW_filter_prediction+0xee>
 8009fb6:	f81e 8006 	ldrb.w	r8, [lr, r6]
 8009fba:	ed94 7a00 	vldr	s14, [r4]
 8009fbe:	f1b8 0f00 	cmp.w	r8, #0
 8009fc2:	d007      	beq.n	8009fd4 <GW_filter_prediction+0xf4>
 8009fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fc8:	3301      	adds	r3, #1
 8009fca:	edc4 7a00 	vstr	s15, [r4]
 8009fce:	3601      	adds	r6, #1
 8009fd0:	3704      	adds	r7, #4
 8009fd2:	e797      	b.n	8009f04 <GW_filter_prediction+0x24>
 8009fd4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009fd8:	330a      	adds	r3, #10
 8009fda:	ed84 7a00 	vstr	s14, [r4]
 8009fde:	e7f6      	b.n	8009fce <GW_filter_prediction+0xee>
 8009fe0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8009fe8 <GW_filter_prediction+0x108>
 8009fe4:	e79a      	b.n	8009f1c <GW_filter_prediction+0x3c>
 8009fe6:	bf00      	nop
 8009fe8:	00000000 	.word	0x00000000

08009fec <setLevelController>:
 8009fec:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8009ff0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ff6:	b538      	push	{r3, r4, r5, lr}
 8009ff8:	ee17 3a90 	vmov	r3, s15
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	4604      	mov	r4, r0
 800a000:	f600 05dc 	addw	r5, r0, #2268	; 0x8dc
 800a004:	da0e      	bge.n	800a024 <setLevelController+0x38>
 800a006:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800a050 <setLevelController+0x64>
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 feb8 	bl	800ad80 <RFBVM_push>
 800a010:	4628      	mov	r0, r5
 800a012:	f000 fef3 	bl	800adfc <RFBVM_mean>
 800a016:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800a01a:	ee10 3a10 	vmov	r3, s0
 800a01e:	f8c4 3f30 	str.w	r3, [r4, #3888]	; 0xf30
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a026:	429a      	cmp	r2, r3
 800a028:	dd02      	ble.n	800a030 <setLevelController+0x44>
 800a02a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a054 <setLevelController+0x68>
 800a02e:	e7ec      	b.n	800a00a <setLevelController+0x1e>
 800a030:	1a9b      	subs	r3, r3, r2
 800a032:	ee00 3a10 	vmov	s0, r3
 800a036:	f500 632f 	add.w	r3, r0, #2800	; 0xaf0
 800a03a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a03e:	edd3 7a00 	vldr	s15, [r3]
 800a042:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a046:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a04a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a04e:	e7dc      	b.n	800a00a <setLevelController+0x1e>
 800a050:	42c80000 	.word	0x42c80000
 800a054:	00000000 	.word	0x00000000

0800a058 <setPolarLevelController>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	ed91 0a08 	vldr	s0, [r1, #32]
 800a05e:	edd1 7a07 	vldr	s15, [r1, #28]
 800a062:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a066:	ed2d 8b02 	vpush	{d8}
 800a06a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800a06e:	460c      	mov	r4, r1
 800a070:	4605      	mov	r5, r0
 800a072:	f000 fe3d 	bl	800acf0 <taylor_sqrt>
 800a076:	edd4 7a07 	vldr	s15, [r4, #28]
 800a07a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a082:	eef0 8a40 	vmov.f32	s17, s0
 800a086:	d032      	beq.n	800a0ee <setPolarLevelController+0x96>
 800a088:	ed94 0a08 	vldr	s0, [r4, #32]
 800a08c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800a090:	f000 fdb6 	bl	800ac00 <taylor_atan>
 800a094:	ee10 0a10 	vmov	r0, s0
 800a098:	f7f6 fa6e 	bl	8000578 <__aeabi_f2d>
 800a09c:	a321      	add	r3, pc, #132	; (adr r3, 800a124 <setPolarLevelController+0xcc>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 fac1 	bl	8000628 <__aeabi_dmul>
 800a0a6:	f7f6 fdb7 	bl	8000c18 <__aeabi_d2f>
 800a0aa:	ee08 0a10 	vmov	s16, r0
 800a0ae:	edd4 7a07 	vldr	s15, [r4, #28]
 800a0b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ba:	d51b      	bpl.n	800a0f4 <setPolarLevelController+0x9c>
 800a0bc:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a118 <setPolarLevelController+0xc0>
 800a0c0:	ee38 8a27 	vadd.f32	s16, s16, s15
 800a0c4:	f605 24f4 	addw	r4, r5, #2804	; 0xaf4
 800a0c8:	eeb0 0a68 	vmov.f32	s0, s17
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 fe57 	bl	800ad80 <RFBVM_push>
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 fe92 	bl	800adfc <RFBVM_mean>
 800a0d8:	f605 7334 	addw	r3, r5, #3892	; 0xf34
 800a0dc:	f605 7538 	addw	r5, r5, #3896	; 0xf38
 800a0e0:	ed83 0a00 	vstr	s0, [r3]
 800a0e4:	ed85 8a00 	vstr	s16, [r5]
 800a0e8:	ecbd 8b02 	vpop	{d8}
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800a11c <setPolarLevelController+0xc4>
 800a0f2:	e7dc      	b.n	800a0ae <setPolarLevelController+0x56>
 800a0f4:	ed94 7a08 	vldr	s14, [r4, #32]
 800a0f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a100:	d5e0      	bpl.n	800a0c4 <setPolarLevelController+0x6c>
 800a102:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10a:	dddb      	ble.n	800a0c4 <setPolarLevelController+0x6c>
 800a10c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800a120 <setPolarLevelController+0xc8>
 800a110:	e7d6      	b.n	800a0c0 <setPolarLevelController+0x68>
 800a112:	bf00      	nop
 800a114:	f3af 8000 	nop.w
 800a118:	43340000 	.word	0x43340000
 800a11c:	42b40000 	.word	0x42b40000
 800a120:	43b40000 	.word	0x43b40000
 800a124:	7a711848 	.word	0x7a711848
 800a128:	404ca5dc 	.word	0x404ca5dc

0800a12c <GW_level_control>:
 800a12c:	b513      	push	{r0, r1, r4, lr}
 800a12e:	4604      	mov	r4, r0
 800a130:	b348      	cbz	r0, 800a186 <GW_level_control+0x5a>
 800a132:	f891 0168 	ldrb.w	r0, [r1, #360]	; 0x168
 800a136:	b918      	cbnz	r0, 800a140 <GW_level_control+0x14>
 800a138:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 800a13c:	b002      	add	sp, #8
 800a13e:	bd10      	pop	{r4, pc}
 800a140:	f894 3f3c 	ldrb.w	r3, [r4, #3900]	; 0xf3c
 800a144:	b91b      	cbnz	r3, 800a14e <GW_level_control+0x22>
 800a146:	f8c4 3f40 	str.w	r3, [r4, #3904]	; 0xf40
 800a14a:	2000      	movs	r0, #0
 800a14c:	e7f6      	b.n	800a13c <GW_level_control+0x10>
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d116      	bne.n	800a180 <GW_level_control+0x54>
 800a152:	f8d4 3f40 	ldr.w	r3, [r4, #3904]	; 0xf40
 800a156:	b90b      	cbnz	r3, 800a15c <GW_level_control+0x30>
 800a158:	f8c4 2f40 	str.w	r2, [r4, #3904]	; 0xf40
 800a15c:	f8d4 3f40 	ldr.w	r3, [r4, #3904]	; 0xf40
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a164:	429a      	cmp	r2, r3
 800a166:	ddf0      	ble.n	800a14a <GW_level_control+0x1e>
 800a168:	2302      	movs	r3, #2
 800a16a:	f884 3f3c 	strb.w	r3, [r4, #3900]	; 0xf3c
 800a16e:	4620      	mov	r0, r4
 800a170:	9101      	str	r1, [sp, #4]
 800a172:	f7ff ff3b 	bl	8009fec <setLevelController>
 800a176:	9901      	ldr	r1, [sp, #4]
 800a178:	4620      	mov	r0, r4
 800a17a:	f7ff ff6d 	bl	800a058 <setPolarLevelController>
 800a17e:	e7e4      	b.n	800a14a <GW_level_control+0x1e>
 800a180:	2b02      	cmp	r3, #2
 800a182:	d1e2      	bne.n	800a14a <GW_level_control+0x1e>
 800a184:	e7f3      	b.n	800a16e <GW_level_control+0x42>
 800a186:	f06f 0001 	mvn.w	r0, #1
 800a18a:	e7d7      	b.n	800a13c <GW_level_control+0x10>

0800a18c <GW_run>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	460e      	mov	r6, r1
 800a190:	4615      	mov	r5, r2
 800a192:	4604      	mov	r4, r0
 800a194:	b390      	cbz	r0, 800a1fc <GW_run+0x70>
 800a196:	b389      	cbz	r1, 800a1fc <GW_run+0x70>
 800a198:	b382      	cbz	r2, 800a1fc <GW_run+0x70>
 800a19a:	69d3      	ldr	r3, [r2, #28]
 800a19c:	f8c0 3f48 	str.w	r3, [r0, #3912]	; 0xf48
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f000 fd1c 	bl	800abe0 <HT_run>
 800a1a8:	bb50      	cbnz	r0, 800a200 <GW_run+0x74>
 800a1aa:	f896 3168 	ldrb.w	r3, [r6, #360]	; 0x168
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bf14      	ite	ne
 800a1b2:	23c8      	movne	r3, #200	; 0xc8
 800a1b4:	2364      	moveq	r3, #100	; 0x64
 800a1b6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff fa71 	bl	80096a6 <GW_update_hand_buffers>
 800a1c4:	b9e0      	cbnz	r0, 800a200 <GW_run+0x74>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f7ff fafd 	bl	80097c8 <GW_compute_speeds>
 800a1ce:	b9b8      	cbnz	r0, 800a200 <GW_run+0x74>
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff fbd5 	bl	8009980 <GW_interpret_speeds>
 800a1d6:	b998      	cbnz	r0, 800a200 <GW_run+0x74>
 800a1d8:	69ea      	ldr	r2, [r5, #28]
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7ff fdbb 	bl	8009d58 <GW_update_prediction>
 800a1e2:	b968      	cbnz	r0, 800a200 <GW_run+0x74>
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f7ff fe79 	bl	8009ee0 <GW_filter_prediction>
 800a1ee:	b938      	cbnz	r0, 800a200 <GW_run+0x74>
 800a1f0:	69ea      	ldr	r2, [r5, #28]
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1f8:	f7ff bf98 	b.w	800a12c <GW_level_control>
 800a1fc:	f06f 0001 	mvn.w	r0, #1
 800a200:	bd70      	pop	{r4, r5, r6, pc}

0800a202 <HT_init>:
 800a202:	b410      	push	{r4}
 800a204:	b1f0      	cbz	r0, 800a244 <HT_init+0x42>
 800a206:	b1e9      	cbz	r1, 800a244 <HT_init+0x42>
 800a208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a20c:	22fa      	movs	r2, #250	; 0xfa
 800a20e:	e9c0 3200 	strd	r3, r2, [r0]
 800a212:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 800a216:	2301      	movs	r3, #1
 800a218:	e9c0 4302 	strd	r4, r3, [r0, #8]
 800a21c:	7603      	strb	r3, [r0, #24]
 800a21e:	2300      	movs	r3, #0
 800a220:	2464      	movs	r4, #100	; 0x64
 800a222:	61c3      	str	r3, [r0, #28]
 800a224:	6203      	str	r3, [r0, #32]
 800a226:	6243      	str	r3, [r0, #36]	; 0x24
 800a228:	2300      	movs	r3, #0
 800a22a:	e9c0 4204 	strd	r4, r2, [r0, #16]
 800a22e:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
 800a232:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 800a236:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
 800a23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23e:	4608      	mov	r0, r1
 800a240:	f000 be32 	b.w	800aea8 <SEN_init>
 800a244:	f06f 0001 	mvn.w	r0, #1
 800a248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <HT_set_path_length>:
 800a24e:	b510      	push	{r4, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	b1a8      	cbz	r0, 800a280 <HT_set_path_length+0x32>
 800a254:	2900      	cmp	r1, #0
 800a256:	db16      	blt.n	800a286 <HT_set_path_length+0x38>
 800a258:	2300      	movs	r3, #0
 800a25a:	6001      	str	r1, [r0, #0]
 800a25c:	6083      	str	r3, [r0, #8]
 800a25e:	300c      	adds	r0, #12
 800a260:	f000 fd77 	bl	800ad52 <RFBVM_init>
 800a264:	b970      	cbnz	r0, 800a284 <HT_set_path_length+0x36>
 800a266:	6821      	ldr	r1, [r4, #0]
 800a268:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800a26c:	f000 fd71 	bl	800ad52 <RFBVM_init>
 800a270:	b940      	cbnz	r0, 800a284 <HT_set_path_length+0x36>
 800a272:	6821      	ldr	r1, [r4, #0]
 800a274:	f204 4034 	addw	r0, r4, #1076	; 0x434
 800a278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a27c:	f000 bd69 	b.w	800ad52 <RFBVM_init>
 800a280:	f06f 0001 	mvn.w	r0, #1
 800a284:	bd10      	pop	{r4, pc}
 800a286:	f06f 0003 	mvn.w	r0, #3
 800a28a:	e7fb      	b.n	800a284 <HT_set_path_length+0x36>

0800a28c <HT_set_frequency>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	460d      	mov	r5, r1
 800a290:	ed2d 8b02 	vpush	{d8}
 800a294:	4604      	mov	r4, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	d044      	beq.n	800a324 <HT_set_frequency+0x98>
 800a29a:	2900      	cmp	r1, #0
 800a29c:	d042      	beq.n	800a324 <HT_set_frequency+0x98>
 800a29e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a6:	d942      	bls.n	800a32e <HT_set_frequency+0xa2>
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	f000 fe1b 	bl	800aee4 <SEN_set_frequency>
 800a2ae:	bbd8      	cbnz	r0, 800a328 <HT_set_frequency+0x9c>
 800a2b0:	edd4 7a00 	vldr	s15, [r4]
 800a2b4:	edd5 8a03 	vldr	s17, [r5, #12]
 800a2b8:	ed9f 8a20 	vldr	s16, [pc, #128]	; 800a33c <HT_set_frequency+0xb0>
 800a2bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a2c0:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a2c4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800a2c8:	ee17 0a90 	vmov	r0, s15
 800a2cc:	f7f6 f954 	bl	8000578 <__aeabi_f2d>
 800a2d0:	ec41 0b10 	vmov	d0, r0, r1
 800a2d4:	f006 fb20 	bl	8010918 <ceil>
 800a2d8:	ec51 0b10 	vmov	r0, r1, d0
 800a2dc:	f7f6 fc54 	bl	8000b88 <__aeabi_d2iz>
 800a2e0:	edd4 7a01 	vldr	s15, [r4, #4]
 800a2e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a2ee:	eec7 7a88 	vdiv.f32	s15, s15, s16
 800a2f2:	ee17 0a90 	vmov	r0, s15
 800a2f6:	f7f6 f93f 	bl	8000578 <__aeabi_f2d>
 800a2fa:	ec41 0b10 	vmov	d0, r0, r1
 800a2fe:	f006 fb0b 	bl	8010918 <ceil>
 800a302:	ec51 0b10 	vmov	r0, r1, d0
 800a306:	f7f6 fc3f 	bl	8000b88 <__aeabi_d2iz>
 800a30a:	4285      	cmp	r5, r0
 800a30c:	db12      	blt.n	800a334 <HT_set_frequency+0xa8>
 800a30e:	ecbd 8b02 	vpop	{d8}
 800a312:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
 800a316:	4629      	mov	r1, r5
 800a318:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 800a31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a320:	f7ff bf95 	b.w	800a24e <HT_set_path_length>
 800a324:	f06f 0001 	mvn.w	r0, #1
 800a328:	ecbd 8b02 	vpop	{d8}
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	f06f 0005 	mvn.w	r0, #5
 800a332:	e7f9      	b.n	800a328 <HT_set_frequency+0x9c>
 800a334:	f06f 0006 	mvn.w	r0, #6
 800a338:	e7f6      	b.n	800a328 <HT_set_frequency+0x9c>
 800a33a:	bf00      	nop
 800a33c:	447a0000 	.word	0x447a0000

0800a340 <HT_struct_init>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	460d      	mov	r5, r1
 800a344:	4604      	mov	r4, r0
 800a346:	b178      	cbz	r0, 800a368 <HT_struct_init+0x28>
 800a348:	1e4b      	subs	r3, r1, #1
 800a34a:	2b3f      	cmp	r3, #63	; 0x3f
 800a34c:	d80f      	bhi.n	800a36e <HT_struct_init+0x2e>
 800a34e:	008a      	lsls	r2, r1, #2
 800a350:	300c      	adds	r0, #12
 800a352:	2100      	movs	r1, #0
 800a354:	f002 f990 	bl	800c678 <memset>
 800a358:	462a      	mov	r2, r5
 800a35a:	2100      	movs	r1, #0
 800a35c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 800a360:	f002 f98a 	bl	800c678 <memset>
 800a364:	2000      	movs	r0, #0
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	f06f 0001 	mvn.w	r0, #1
 800a36c:	e7fb      	b.n	800a366 <HT_struct_init+0x26>
 800a36e:	f06f 0003 	mvn.w	r0, #3
 800a372:	e7f8      	b.n	800a366 <HT_struct_init+0x26>

0800a374 <HT_set_square_resolution>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	460c      	mov	r4, r1
 800a378:	4605      	mov	r5, r0
 800a37a:	4611      	mov	r1, r2
 800a37c:	b168      	cbz	r0, 800a39a <HT_set_square_resolution+0x26>
 800a37e:	b164      	cbz	r4, 800a39a <HT_set_square_resolution+0x26>
 800a380:	2a00      	cmp	r2, #0
 800a382:	dd0d      	ble.n	800a3a0 <HT_set_square_resolution+0x2c>
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fdd1 	bl	800af2c <SEN_set_square_resolution>
 800a38a:	b940      	cbnz	r0, 800a39e <HT_set_square_resolution+0x2a>
 800a38c:	68a1      	ldr	r1, [r4, #8]
 800a38e:	f105 001c 	add.w	r0, r5, #28
 800a392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a396:	f7ff bfd3 	b.w	800a340 <HT_struct_init>
 800a39a:	f06f 0001 	mvn.w	r0, #1
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	f06f 0003 	mvn.w	r0, #3
 800a3a4:	e7fb      	b.n	800a39e <HT_set_square_resolution+0x2a>
	...

0800a3a8 <HT_find_hand>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b08 	vpush	{d8-d11}
 800a3b0:	468a      	mov	sl, r1
 800a3b2:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	f000 8334 	beq.w	800aa26 <HT_find_hand+0x67e>
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	f000 8331 	beq.w	800aa26 <HT_find_hand+0x67e>
 800a3c4:	688b      	ldr	r3, [r1, #8]
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f340 832f 	ble.w	800aa2c <HT_find_hand+0x684>
 800a3ce:	f501 7308 	add.w	r3, r1, #544	; 0x220
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	69cb      	ldr	r3, [r1, #28]
 800a3d6:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 800a3da:	9b01      	ldr	r3, [sp, #4]
 800a3dc:	ed9f 8a35 	vldr	s16, [pc, #212]	; 800a4b4 <HT_find_hand+0x10c>
 800a3e0:	edd0 9a07 	vldr	s19, [r0, #28]
 800a3e4:	ed90 aa08 	vldr	s20, [r0, #32]
 800a3e8:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 800a3ec:	ed80 8a07 	vstr	s16, [r0, #28]
 800a3f0:	009e      	lsls	r6, r3, #2
 800a3f2:	f100 0528 	add.w	r5, r0, #40	; 0x28
 800a3f6:	2700      	movs	r7, #0
 800a3f8:	f101 0920 	add.w	r9, r1, #32
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	ed80 8a08 	vstr	s16, [r0, #32]
 800a402:	ed80 8a09 	vstr	s16, [r0, #36]	; 0x24
 800a406:	f8a0 7168 	strh.w	r7, [r0, #360]	; 0x168
 800a40a:	4629      	mov	r1, r5
 800a40c:	a8e8      	add	r0, sp, #928	; 0x3a0
 800a40e:	f002 f9e0 	bl	800c7d2 <memcpy>
 800a412:	f504 7394 	add.w	r3, r4, #296	; 0x128
 800a416:	4619      	mov	r1, r3
 800a418:	9a01      	ldr	r2, [sp, #4]
 800a41a:	9304      	str	r3, [sp, #16]
 800a41c:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
 800a420:	f002 f9d7 	bl	800c7d2 <memcpy>
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	9209      	str	r2, [sp, #36]	; 0x24
 800a428:	f20a 231f 	addw	r3, sl, #543	; 0x21f
 800a42c:	4611      	mov	r1, r2
 800a42e:	f8cd 900c 	str.w	r9, [sp, #12]
 800a432:	444e      	add	r6, r9
 800a434:	4618      	mov	r0, r3
 800a436:	464a      	mov	r2, r9
 800a438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a43c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 800a440:	ecf2 7a01 	vldmia	r2!, {s15}
 800a444:	f1bc 0f00 	cmp.w	ip, #0
 800a448:	bf0c      	ite	eq
 800a44a:	eeb0 7a48 	vmoveq.f32	s14, s16
 800a44e:	eeb0 7a66 	vmovne.f32	s14, s13
 800a452:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a456:	42b2      	cmp	r2, r6
 800a458:	ece5 7a01 	vstmia	r5!, {s15}
 800a45c:	f801 7b01 	strb.w	r7, [r1], #1
 800a460:	d1ec      	bne.n	800a43c <HT_find_hand+0x94>
 800a462:	4649      	mov	r1, r9
 800a464:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a468:	2200      	movs	r2, #0
 800a46a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a46e:	b168      	cbz	r0, 800a48c <HT_find_hand+0xe4>
 800a470:	1c70      	adds	r0, r6, #1
 800a472:	d01b      	beq.n	800a4ac <HT_find_hand+0x104>
 800a474:	eb09 0086 	add.w	r0, r9, r6, lsl #2
 800a478:	ed91 7a00 	vldr	s14, [r1]
 800a47c:	edd0 7a00 	vldr	s15, [r0]
 800a480:	eeb4 7a67 	vcmp.f32	s14, s15
 800a484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a488:	bf48      	it	mi
 800a48a:	4616      	movmi	r6, r2
 800a48c:	9801      	ldr	r0, [sp, #4]
 800a48e:	3201      	adds	r2, #1
 800a490:	4290      	cmp	r0, r2
 800a492:	f101 0104 	add.w	r1, r1, #4
 800a496:	d1e8      	bne.n	800a46a <HT_find_hand+0xc2>
 800a498:	1c73      	adds	r3, r6, #1
 800a49a:	d10d      	bne.n	800a4b8 <HT_find_hand+0x110>
 800a49c:	2500      	movs	r5, #0
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 800a4a4:	ecbd 8b08 	vpop	{d8-d11}
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	4616      	mov	r6, r2
 800a4ae:	e7ed      	b.n	800a48c <HT_find_hand+0xe4>
 800a4b0:	43c80000 	.word	0x43c80000
 800a4b4:	00000000 	.word	0x00000000
 800a4b8:	4652      	mov	r2, sl
 800a4ba:	eeb0 1a49 	vmov.f32	s2, s18
 800a4be:	eef0 0a4a 	vmov.f32	s1, s20
 800a4c2:	eeb0 0a69 	vmov.f32	s0, s19
 800a4c6:	a919      	add	r1, sp, #100	; 0x64
 800a4c8:	a818      	add	r0, sp, #96	; 0x60
 800a4ca:	f000 febf 	bl	800b24c <SEN_mm_to_col_row>
 800a4ce:	1cc7      	adds	r7, r0, #3
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	d02b      	beq.n	800a52c <HT_find_hand+0x184>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d1e2      	bne.n	800a49e <HT_find_hand+0xf6>
 800a4d8:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 800a4dc:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800a4e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a4e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4e8:	ee17 2a10 	vmov	r2, s14
 800a4ec:	ee17 1a90 	vmov	r1, s15
 800a4f0:	4653      	mov	r3, sl
 800a4f2:	a816      	add	r0, sp, #88	; 0x58
 800a4f4:	f000 fd96 	bl	800b024 <SEN_col_row_to_idx>
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d1cf      	bne.n	800a49e <HT_find_hand+0xf6>
 800a4fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a500:	9a06      	ldr	r2, [sp, #24]
 800a502:	5cd2      	ldrb	r2, [r2, r3]
 800a504:	b192      	cbz	r2, 800a52c <HT_find_hand+0x184>
 800a506:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800a50a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 800a50e:	edd2 7a00 	vldr	s15, [r2]
 800a512:	ed93 7a00 	vldr	s14, [r3]
 800a516:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a51a:	edd4 7a04 	vldr	s15, [r4, #16]
 800a51e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a52a:	d400      	bmi.n	800a52e <HT_find_hand+0x186>
 800a52c:	9616      	str	r6, [sp, #88]	; 0x58
 800a52e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a530:	9325      	str	r3, [sp, #148]	; 0x94
 800a532:	18e1      	adds	r1, r4, r3
 800a534:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800a538:	2201      	movs	r2, #1
 800a53a:	ed93 8a00 	vldr	s16, [r3]
 800a53e:	f881 2128 	strb.w	r2, [r1, #296]	; 0x128
 800a542:	2300      	movs	r3, #0
 800a544:	9202      	str	r2, [sp, #8]
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	9a05      	ldr	r2, [sp, #20]
 800a54a:	ab25      	add	r3, sp, #148	; 0x94
 800a54c:	ae17      	add	r6, sp, #92	; 0x5c
 800a54e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a552:	4631      	mov	r1, r6
 800a554:	4653      	mov	r3, sl
 800a556:	462a      	mov	r2, r5
 800a558:	a815      	add	r0, sp, #84	; 0x54
 800a55a:	f000 fd23 	bl	800afa4 <SEN_idx_to_col_row>
 800a55e:	9000      	str	r0, [sp, #0]
 800a560:	2800      	cmp	r0, #0
 800a562:	f040 8266 	bne.w	800aa32 <HT_find_hand+0x68a>
 800a566:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 800a56a:	9312      	str	r3, [sp, #72]	; 0x48
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a570:	4680      	mov	r8, r0
 800a572:	9307      	str	r3, [sp, #28]
 800a574:	9613      	str	r6, [sp, #76]	; 0x4c
 800a576:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a57a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a57c:	9807      	ldr	r0, [sp, #28]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a582:	4653      	mov	r3, sl
 800a584:	4401      	add	r1, r0
 800a586:	445a      	add	r2, fp
 800a588:	a816      	add	r0, sp, #88	; 0x58
 800a58a:	f000 fd4b 	bl	800b024 <SEN_col_row_to_idx>
 800a58e:	1cc6      	adds	r6, r0, #3
 800a590:	4605      	mov	r5, r0
 800a592:	d018      	beq.n	800a5c6 <HT_find_hand+0x21e>
 800a594:	2800      	cmp	r0, #0
 800a596:	d182      	bne.n	800a49e <HT_find_hand+0xf6>
 800a598:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800a59a:	19a3      	adds	r3, r4, r6
 800a59c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800a5a0:	9308      	str	r3, [sp, #32]
 800a5a2:	b983      	cbnz	r3, 800a5c6 <HT_find_hand+0x21e>
 800a5a4:	9b06      	ldr	r3, [sp, #24]
 800a5a6:	5d9b      	ldrb	r3, [r3, r6]
 800a5a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5aa:	b163      	cbz	r3, 800a5c6 <HT_find_hand+0x21e>
 800a5ac:	af1c      	add	r7, sp, #112	; 0x70
 800a5ae:	4545      	cmp	r5, r8
 800a5b0:	f040 817a 	bne.w	800a8a8 <HT_find_hand+0x500>
 800a5b4:	9b08      	ldr	r3, [sp, #32]
 800a5b6:	b103      	cbz	r3, 800a5ba <HT_find_hand+0x212>
 800a5b8:	9616      	str	r6, [sp, #88]	; 0x58
 800a5ba:	aa1c      	add	r2, sp, #112	; 0x70
 800a5bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5be:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 800a5c2:	f108 0801 	add.w	r8, r8, #1
 800a5c6:	f10b 0b01 	add.w	fp, fp, #1
 800a5ca:	f1bb 0f02 	cmp.w	fp, #2
 800a5ce:	d1d4      	bne.n	800a57a <HT_find_hand+0x1d2>
 800a5d0:	9b07      	ldr	r3, [sp, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	9307      	str	r3, [sp, #28]
 800a5d8:	d1cd      	bne.n	800a576 <HT_find_hand+0x1ce>
 800a5da:	2500      	movs	r5, #0
 800a5dc:	9516      	str	r5, [sp, #88]	; 0x58
 800a5de:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	2701      	movs	r7, #1
 800a5e6:	4545      	cmp	r5, r8
 800a5e8:	f040 8194 	bne.w	800a914 <HT_find_hand+0x56c>
 800a5ec:	b103      	cbz	r3, 800a5f0 <HT_find_hand+0x248>
 800a5ee:	9516      	str	r5, [sp, #88]	; 0x58
 800a5f0:	9b05      	ldr	r3, [sp, #20]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	9a05      	ldr	r2, [sp, #20]
 800a5f8:	9b02      	ldr	r3, [sp, #8]
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	dca4      	bgt.n	800a548 <HT_find_hand+0x1a0>
 800a5fe:	edd4 7a02 	vldr	s15, [r4, #8]
 800a602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a606:	eef4 7ac8 	vcmpe.f32	s15, s16
 800a60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60e:	f53f af45 	bmi.w	800a49c <HT_find_hand+0xf4>
 800a612:	68e3      	ldr	r3, [r4, #12]
 800a614:	9a02      	ldr	r2, [sp, #8]
 800a616:	4293      	cmp	r3, r2
 800a618:	f6bf af40 	bge.w	800a49c <HT_find_hand+0xf4>
 800a61c:	6963      	ldr	r3, [r4, #20]
 800a61e:	eddd 7a01 	vldr	s15, [sp, #4]
 800a622:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a632:	eef4 7ac8 	vcmpe.f32	s15, s16
 800a636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63a:	bfdf      	itttt	le
 800a63c:	435b      	mulle	r3, r3
 800a63e:	ee07 3a90 	vmovle	s15, r3
 800a642:	ee68 6a08 	vmulle.f32	s13, s16, s16
 800a646:	eef8 7ae7 	vcvtle.f32.s32	s15, s15
 800a64a:	bfcf      	iteee	gt
 800a64c:	ee36 7a07 	vaddgt.f32	s14, s12, s14
 800a650:	eec6 5aa7 	vdivle.f32	s11, s13, s15
 800a654:	eec6 7a25 	vdivle.f32	s15, s12, s11
 800a658:	ee37 7a87 	vaddle.f32	s14, s15, s14
 800a65c:	eddd 7a02 	vldr	s15, [sp, #8]
 800a660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a664:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66c:	dd07      	ble.n	800a67e <HT_find_hand+0x2d6>
 800a66e:	ed5f 7a70 	vldr	s15, [pc, #-448]	; 800a4b0 <HT_find_hand+0x108>
 800a672:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67a:	f53f af0f 	bmi.w	800a49c <HT_find_hand+0xf4>
 800a67e:	2301      	movs	r3, #1
 800a680:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
 800a684:	f50d 7825 	add.w	r8, sp, #660	; 0x294
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	9302      	str	r3, [sp, #8]
 800a68c:	464f      	mov	r7, r9
 800a68e:	46c3      	mov	fp, r8
 800a690:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a694:	9a02      	ldr	r2, [sp, #8]
 800a696:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a69a:	9202      	str	r2, [sp, #8]
 800a69c:	b1f3      	cbz	r3, 800a6dc <HT_find_hand+0x334>
 800a69e:	9a00      	ldr	r2, [sp, #0]
 800a6a0:	ed97 0a00 	vldr	s0, [r7]
 800a6a4:	ad65      	add	r5, sp, #404	; 0x194
 800a6a6:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 800a6aa:	4653      	mov	r3, sl
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	f000 fdae 	bl	800b20e <SEN_idx_to_mm>
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f47f aef2 	bne.w	800a49e <HT_find_hand+0xf6>
 800a6ba:	1c70      	adds	r0, r6, #1
 800a6bc:	f000 8167 	beq.w	800a98e <HT_find_hand+0x5e6>
 800a6c0:	aba5      	add	r3, sp, #660	; 0x294
 800a6c2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a6c6:	ed93 7a00 	vldr	s14, [r3]
 800a6ca:	eddb 7a00 	vldr	s15, [fp]
 800a6ce:	9b00      	ldr	r3, [sp, #0]
 800a6d0:	eeb4 7a67 	vcmp.f32	s14, s15
 800a6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d8:	bf48      	it	mi
 800a6da:	461e      	movmi	r6, r3
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	f10b 0b04 	add.w	fp, fp, #4
 800a6ec:	f107 0704 	add.w	r7, r7, #4
 800a6f0:	dcd0      	bgt.n	800a694 <HT_find_hand+0x2ec>
 800a6f2:	1c71      	adds	r1, r6, #1
 800a6f4:	f43f aed2 	beq.w	800a49c <HT_find_hand+0xf4>
 800a6f8:	4652      	mov	r2, sl
 800a6fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a6fe:	a91a      	add	r1, sp, #104	; 0x68
 800a700:	a81b      	add	r0, sp, #108	; 0x6c
 800a702:	f000 fcd2 	bl	800b0aa <SEN_zone_size>
 800a706:	2800      	cmp	r0, #0
 800a708:	f040 8195 	bne.w	800aa36 <HT_find_hand+0x68e>
 800a70c:	6963      	ldr	r3, [r4, #20]
 800a70e:	435b      	muls	r3, r3
 800a710:	ee07 3a90 	vmov	s15, r3
 800a714:	ee28 8a08 	vmul.f32	s16, s16, s16
 800a718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a71c:	ad65      	add	r5, sp, #404	; 0x194
 800a71e:	eec8 7a27 	vdiv.f32	s15, s16, s15
 800a722:	ed1f 8a9c 	vldr	s16, [pc, #-624]	; 800a4b4 <HT_find_hand+0x10c>
 800a726:	ee17 0a90 	vmov	r0, s15
 800a72a:	f7f5 ff25 	bl	8000578 <__aeabi_f2d>
 800a72e:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 800aa40 <HT_find_hand+0x698>
 800a732:	ec41 0b11 	vmov	d1, r0, r1
 800a736:	f005 ff37 	bl	80105a8 <pow>
 800a73a:	49c3      	ldr	r1, [pc, #780]	; (800aa48 <HT_find_hand+0x6a0>)
 800a73c:	ec53 2b10 	vmov	r2, r3, d0
 800a740:	2000      	movs	r0, #0
 800a742:	f7f5 fdb9 	bl	80002b8 <__aeabi_dsub>
 800a746:	460b      	mov	r3, r1
 800a748:	4602      	mov	r2, r0
 800a74a:	f7f5 fdb7 	bl	80002bc <__adddf3>
 800a74e:	f7f6 fa63 	bl	8000c18 <__aeabi_d2f>
 800a752:	aba5      	add	r3, sp, #660	; 0x294
 800a754:	ee0a 0a90 	vmov	s21, r0
 800a758:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800a75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a75e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a762:	9209      	str	r2, [sp, #36]	; 0x24
 800a764:	b3db      	cbz	r3, 800a7de <HT_find_hand+0x436>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 800a76c:	7e23      	ldrb	r3, [r4, #24]
 800a76e:	b1db      	cbz	r3, 800a7a8 <HT_find_hand+0x400>
 800a770:	ed96 7a00 	vldr	s14, [r6]
 800a774:	edd8 7a00 	vldr	s15, [r8]
 800a778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a77c:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 800a780:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800a784:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a788:	ee17 0a90 	vmov	r0, s15
 800a78c:	f7f5 fef4 	bl	8000578 <__aeabi_f2d>
 800a790:	ec41 0b10 	vmov	d0, r0, r1
 800a794:	f005 fec0 	bl	8010518 <exp>
 800a798:	ec51 0b10 	vmov	r0, r1, d0
 800a79c:	f7f6 fa3c 	bl	8000c18 <__aeabi_d2f>
 800a7a0:	ee07 0a90 	vmov	s15, r0
 800a7a4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800a7a8:	ed95 7a00 	vldr	s14, [r5]
 800a7ac:	edd4 7a07 	vldr	s15, [r4, #28]
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a7b6:	ed98 7a00 	vldr	s14, [r8]
 800a7ba:	edc4 7a07 	vstr	s15, [r4, #28]
 800a7be:	edd4 7a08 	vldr	s15, [r4, #32]
 800a7c2:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a7c6:	ee38 8a28 	vadd.f32	s16, s16, s17
 800a7ca:	edc4 7a08 	vstr	s15, [r4, #32]
 800a7ce:	ed93 7a00 	vldr	s14, [r3]
 800a7d2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800a7d6:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a7da:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	9a01      	ldr	r2, [sp, #4]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	1b1b      	subs	r3, r3, r4
 800a7ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	f105 0504 	add.w	r5, r5, #4
 800a7f4:	f108 0804 	add.w	r8, r8, #4
 800a7f8:	dcb0      	bgt.n	800a75c <HT_find_hand+0x3b4>
 800a7fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a802:	d011      	beq.n	800a828 <HT_find_hand+0x480>
 800a804:	ed94 7a07 	vldr	s14, [r4, #28]
 800a808:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800a80c:	ed94 7a08 	vldr	s14, [r4, #32]
 800a810:	edc4 7a07 	vstr	s15, [r4, #28]
 800a814:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800a818:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800a81c:	edc4 7a08 	vstr	s15, [r4, #32]
 800a820:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800a824:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 800a828:	4651      	mov	r1, sl
 800a82a:	eeb0 1a49 	vmov.f32	s2, s18
 800a82e:	eef0 0a4a 	vmov.f32	s1, s20
 800a832:	eeb0 0a69 	vmov.f32	s0, s19
 800a836:	a816      	add	r0, sp, #88	; 0x58
 800a838:	f000 fd69 	bl	800b30e <SEN_mm_to_idx>
 800a83c:	1cc2      	adds	r2, r0, #3
 800a83e:	4605      	mov	r5, r0
 800a840:	f000 80e6 	beq.w	800aa10 <HT_find_hand+0x668>
 800a844:	2800      	cmp	r0, #0
 800a846:	f47f ae2a 	bne.w	800a49e <HT_find_hand+0xf6>
 800a84a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a84c:	18e2      	adds	r2, r4, r3
 800a84e:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 800a852:	2a00      	cmp	r2, #0
 800a854:	f47f ae22 	bne.w	800a49c <HT_find_hand+0xf4>
 800a858:	9a06      	ldr	r2, [sp, #24]
 800a85a:	5cd2      	ldrb	r2, [r2, r3]
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	f000 8098 	beq.w	800a992 <HT_find_hand+0x5ea>
 800a862:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	f7f5 fe86 	bl	8000578 <__aeabi_f2d>
 800a86c:	4606      	mov	r6, r0
 800a86e:	ee19 0a10 	vmov	r0, s18
 800a872:	460f      	mov	r7, r1
 800a874:	f7f5 fe80 	bl	8000578 <__aeabi_f2d>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f5 fd1a 	bl	80002b8 <__aeabi_dsub>
 800a884:	4606      	mov	r6, r0
 800a886:	6920      	ldr	r0, [r4, #16]
 800a888:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a88c:	f7f5 fe62 	bl	8000554 <__aeabi_i2d>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4630      	mov	r0, r6
 800a896:	4639      	mov	r1, r7
 800a898:	f7f6 f938 	bl	8000b0c <__aeabi_dcmplt>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d078      	beq.n	800a992 <HT_find_hand+0x5ea>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
 800a8a6:	e5f9      	b.n	800a49c <HT_find_hand+0xf4>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	f7f5 fe62 	bl	8000578 <__aeabi_f2d>
 800a8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800a8ba:	ec41 0b1b 	vmov	d11, r0, r1
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	f7f5 fe5a 	bl	8000578 <__aeabi_f2d>
 800a8c4:	ec53 2b1b 	vmov	r2, r3, d11
 800a8c8:	f7f5 fcf6 	bl	80002b8 <__aeabi_dsub>
 800a8cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d2:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800a8d6:	900c      	str	r0, [sp, #48]	; 0x30
 800a8d8:	6818      	ldr	r0, [r3, #0]
 800a8da:	f7f5 fe4d 	bl	8000578 <__aeabi_f2d>
 800a8de:	ec53 2b1b 	vmov	r2, r3, d11
 800a8e2:	f7f5 fce9 	bl	80002b8 <__aeabi_dsub>
 800a8e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8ea:	900e      	str	r0, [sp, #56]	; 0x38
 800a8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a8f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8f6:	f7f6 f927 	bl	8000b48 <__aeabi_dcmpgt>
 800a8fa:	b140      	cbz	r0, 800a90e <HT_find_hand+0x566>
 800a8fc:	aa1c      	add	r2, sp, #112	; 0x70
 800a8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a900:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 800a904:	603e      	str	r6, [r7, #0]
 800a906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a908:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 800a90c:	9308      	str	r3, [sp, #32]
 800a90e:	3501      	adds	r5, #1
 800a910:	3704      	adds	r7, #4
 800a912:	e64c      	b.n	800a5ae <HT_find_hand+0x206>
 800a914:	f85b 6b04 	ldr.w	r6, [fp], #4
 800a918:	ee18 0a10 	vmov	r0, s16
 800a91c:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800a920:	edd3 8a00 	vldr	s17, [r3]
 800a924:	f7f5 fe28 	bl	8000578 <__aeabi_f2d>
 800a928:	ec41 0b1b 	vmov	d11, r0, r1
 800a92c:	ee18 0a90 	vmov	r0, s17
 800a930:	f7f5 fe22 	bl	8000578 <__aeabi_f2d>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	ec51 0b1b 	vmov	r0, r1, d11
 800a93c:	f7f5 fcbc 	bl	80002b8 <__aeabi_dsub>
 800a940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a944:	9010      	str	r0, [sp, #64]	; 0x40
 800a946:	6920      	ldr	r0, [r4, #16]
 800a948:	9311      	str	r3, [sp, #68]	; 0x44
 800a94a:	f7f5 fe03 	bl	8000554 <__aeabi_i2d>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a956:	f7f6 f8d9 	bl	8000b0c <__aeabi_dcmplt>
 800a95a:	b1a8      	cbz	r0, 800a988 <HT_find_hand+0x5e0>
 800a95c:	9a02      	ldr	r2, [sp, #8]
 800a95e:	19a3      	adds	r3, r4, r6
 800a960:	ee07 2a90 	vmov	s15, r2
 800a964:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
 800a968:	9b02      	ldr	r3, [sp, #8]
 800a96a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a96e:	3301      	adds	r3, #1
 800a970:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a974:	a925      	add	r1, sp, #148	; 0x94
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	ee07 3a90 	vmov	s15, r3
 800a97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a980:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
 800a984:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 800a988:	3501      	adds	r5, #1
 800a98a:	2301      	movs	r3, #1
 800a98c:	e62b      	b.n	800a5e6 <HT_find_hand+0x23e>
 800a98e:	9e00      	ldr	r6, [sp, #0]
 800a990:	e6a4      	b.n	800a6dc <HT_find_hand+0x334>
 800a992:	ed94 1a09 	vldr	s2, [r4, #36]	; 0x24
 800a996:	edd4 0a08 	vldr	s1, [r4, #32]
 800a99a:	ed94 0a07 	vldr	s0, [r4, #28]
 800a99e:	4651      	mov	r1, sl
 800a9a0:	a816      	add	r0, sp, #88	; 0x58
 800a9a2:	f000 fcb4 	bl	800b30e <SEN_mm_to_idx>
 800a9a6:	1cc3      	adds	r3, r0, #3
 800a9a8:	f43f ad79 	beq.w	800a49e <HT_find_hand+0xf6>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d142      	bne.n	800aa36 <HT_find_hand+0x68e>
 800a9b0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a9b2:	9b06      	ldr	r3, [sp, #24]
 800a9b4:	5d5b      	ldrb	r3, [r3, r5]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f43f ad70 	beq.w	800a49c <HT_find_hand+0xf4>
 800a9bc:	abe5      	add	r3, sp, #916	; 0x394
 800a9be:	442b      	add	r3, r5
 800a9c0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f47f ad69 	bne.w	800a49c <HT_find_hand+0xf4>
 800a9ca:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	f7f5 fdd2 	bl	8000578 <__aeabi_f2d>
 800a9d4:	abe5      	add	r3, sp, #916	; 0x394
 800a9d6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a9da:	4606      	mov	r6, r0
 800a9dc:	68d8      	ldr	r0, [r3, #12]
 800a9de:	460f      	mov	r7, r1
 800a9e0:	f7f5 fdca 	bl	8000578 <__aeabi_f2d>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f5 fc64 	bl	80002b8 <__aeabi_dsub>
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	6920      	ldr	r0, [r4, #16]
 800a9f4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a9f8:	f7f5 fdac 	bl	8000554 <__aeabi_i2d>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4630      	mov	r0, r6
 800aa02:	4639      	mov	r1, r7
 800aa04:	f7f6 f882 	bl	8000b0c <__aeabi_dcmplt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f47f af49 	bne.w	800a8a0 <HT_find_hand+0x4f8>
 800aa0e:	e545      	b.n	800a49c <HT_find_hand+0xf4>
 800aa10:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f77f af43 	ble.w	800a8a0 <HT_find_hand+0x4f8>
 800aa1a:	f8d4 2174 	ldr.w	r2, [r4, #372]	; 0x174
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f73f af3e 	bgt.w	800a8a0 <HT_find_hand+0x4f8>
 800aa24:	e53a      	b.n	800a49c <HT_find_hand+0xf4>
 800aa26:	f06f 0501 	mvn.w	r5, #1
 800aa2a:	e538      	b.n	800a49e <HT_find_hand+0xf6>
 800aa2c:	f06f 0503 	mvn.w	r5, #3
 800aa30:	e535      	b.n	800a49e <HT_find_hand+0xf6>
 800aa32:	9d00      	ldr	r5, [sp, #0]
 800aa34:	e533      	b.n	800a49e <HT_find_hand+0xf6>
 800aa36:	4605      	mov	r5, r0
 800aa38:	e531      	b.n	800a49e <HT_find_hand+0xf6>
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	00000000 	.word	0x00000000
 800aa44:	3fe00000 	.word	0x3fe00000
 800aa48:	3ff00000 	.word	0x3ff00000

0800aa4c <HT_path_interpolate>:
 800aa4c:	e92d 4f58 	stmdb	sp!, {r3, r4, r6, r8, r9, sl, fp, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	ed2d 8b08 	vpush	{d8-d11}
 800aa56:	eeb0 8a40 	vmov.f32	s16, s0
 800aa5a:	eef0 8a60 	vmov.f32	s17, s1
 800aa5e:	eeb0 9a41 	vmov.f32	s18, s2
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d072      	beq.n	800ab4c <HT_path_interpolate+0x100>
 800aa66:	6883      	ldr	r3, [r0, #8]
 800aa68:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
 800aa6c:	f100 0b0c 	add.w	fp, r0, #12
 800aa70:	1ac9      	subs	r1, r1, r3
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 f9ec 	bl	800ae50 <RFBVM_get_element_value>
 800aa78:	68a3      	ldr	r3, [r4, #8]
 800aa7a:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 800aa7e:	f504 7908 	add.w	r9, r4, #544	; 0x220
 800aa82:	1ac9      	subs	r1, r1, r3
 800aa84:	4648      	mov	r0, r9
 800aa86:	eef0 9a40 	vmov.f32	s19, s0
 800aa8a:	f000 f9e1 	bl	800ae50 <RFBVM_get_element_value>
 800aa8e:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 800aa92:	68a3      	ldr	r3, [r4, #8]
 800aa94:	f204 4a34 	addw	sl, r4, #1076	; 0x434
 800aa98:	1ac9      	subs	r1, r1, r3
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	eeb0 aa40 	vmov.f32	s20, s0
 800aaa0:	f000 f9d6 	bl	800ae50 <RFBVM_get_element_value>
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	eef0 aa40 	vmov.f32	s21, s0
 800aaaa:	f04f 0801 	mov.w	r8, #1
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	4543      	cmp	r3, r8
 800aab2:	dc08      	bgt.n	800aac6 <HT_path_interpolate+0x7a>
 800aab4:	2e00      	cmp	r6, #0
 800aab6:	bf18      	it	ne
 800aab8:	f06f 0607 	mvnne.w	r6, #7
 800aabc:	ecbd 8b08 	vpop	{d8-d11}
 800aac0:	4630      	mov	r0, r6
 800aac2:	e8bd 8f58 	ldmia.w	sp!, {r3, r4, r6, r8, r9, sl, fp, pc}
 800aac6:	ee07 8a90 	vmov	s15, r8
 800aaca:	ee39 7ac8 	vsub.f32	s14, s19, s16
 800aace:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800aada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aade:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800aae2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800aae6:	eba1 0108 	sub.w	r1, r1, r8
 800aaea:	4658      	mov	r0, fp
 800aaec:	ee30 0a08 	vadd.f32	s0, s0, s16
 800aaf0:	f000 f9ba 	bl	800ae68 <RFBVM_set_element_value>
 800aaf4:	edd4 7a02 	vldr	s15, [r4, #8]
 800aaf8:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 800aafc:	ee3a 7a68 	vsub.f32	s14, s20, s17
 800ab00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab04:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800ab08:	eba1 0108 	sub.w	r1, r1, r8
 800ab0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ab10:	4406      	add	r6, r0
 800ab12:	4648      	mov	r0, r9
 800ab14:	ee30 0a28 	vadd.f32	s0, s0, s17
 800ab18:	f000 f9a6 	bl	800ae68 <RFBVM_set_element_value>
 800ab1c:	edd4 7a02 	vldr	s15, [r4, #8]
 800ab20:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 800ab24:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 800ab28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab2c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800ab30:	4406      	add	r6, r0
 800ab32:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ab36:	eba1 0108 	sub.w	r1, r1, r8
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	f108 0801 	add.w	r8, r8, #1
 800ab40:	ee30 0a09 	vadd.f32	s0, s0, s18
 800ab44:	f000 f990 	bl	800ae68 <RFBVM_set_element_value>
 800ab48:	4406      	add	r6, r0
 800ab4a:	e7b0      	b.n	800aaae <HT_path_interpolate+0x62>
 800ab4c:	f06f 0601 	mvn.w	r6, #1
 800ab50:	e7b4      	b.n	800aabc <HT_path_interpolate+0x70>

0800ab52 <HT_update_path>:
 800ab52:	b510      	push	{r4, lr}
 800ab54:	4604      	mov	r4, r0
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d03f      	beq.n	800abda <HT_update_path+0x88>
 800ab5a:	f890 2168 	ldrb.w	r2, [r0, #360]	; 0x168
 800ab5e:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
 800ab62:	b37a      	cbz	r2, 800abc4 <HT_update_path+0x72>
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	dc18      	bgt.n	800ab9a <HT_update_path+0x48>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	ed94 0a07 	vldr	s0, [r4, #28]
 800ab6e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 800ab72:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 800ab76:	f000 f903 	bl	800ad80 <RFBVM_push>
 800ab7a:	bb10      	cbnz	r0, 800abc2 <HT_update_path+0x70>
 800ab7c:	ed94 0a08 	vldr	s0, [r4, #32]
 800ab80:	f504 7064 	add.w	r0, r4, #912	; 0x390
 800ab84:	f000 f8fc 	bl	800ad80 <RFBVM_push>
 800ab88:	b9d8      	cbnz	r0, 800abc2 <HT_update_path+0x70>
 800ab8a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 800ab8e:	f204 50a4 	addw	r0, r4, #1444	; 0x5a4
 800ab92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab96:	f000 b8f3 	b.w	800ad80 <RFBVM_push>
 800ab9a:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	dbe2      	blt.n	800ab68 <HT_update_path+0x16>
 800aba2:	f890 3169 	ldrb.w	r3, [r0, #361]	; 0x169
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1de      	bne.n	800ab68 <HT_update_path+0x16>
 800abaa:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 800abae:	edd0 0a08 	vldr	s1, [r0, #32]
 800abb2:	ed90 0a07 	vldr	s0, [r0, #28]
 800abb6:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800abba:	f7ff ff47 	bl	800aa4c <HT_path_interpolate>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0d2      	beq.n	800ab68 <HT_update_path+0x16>
 800abc2:	bd10      	pop	{r4, pc}
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dd06      	ble.n	800abd6 <HT_update_path+0x84>
 800abc8:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
 800abcc:	1ad2      	subs	r2, r2, r3
 800abce:	2a00      	cmp	r2, #0
 800abd0:	dd01      	ble.n	800abd6 <HT_update_path+0x84>
 800abd2:	3301      	adds	r3, #1
 800abd4:	e7c9      	b.n	800ab6a <HT_update_path+0x18>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e7c7      	b.n	800ab6a <HT_update_path+0x18>
 800abda:	f06f 0001 	mvn.w	r0, #1
 800abde:	e7f0      	b.n	800abc2 <HT_update_path+0x70>

0800abe0 <HT_run>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4604      	mov	r4, r0
 800abe4:	b140      	cbz	r0, 800abf8 <HT_run+0x18>
 800abe6:	b139      	cbz	r1, 800abf8 <HT_run+0x18>
 800abe8:	f7ff fbde 	bl	800a3a8 <HT_find_hand>
 800abec:	b930      	cbnz	r0, 800abfc <HT_run+0x1c>
 800abee:	4620      	mov	r0, r4
 800abf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf4:	f7ff bfad 	b.w	800ab52 <HT_update_path>
 800abf8:	f06f 0001 	mvn.w	r0, #1
 800abfc:	bd10      	pop	{r4, pc}
	...

0800ac00 <taylor_atan>:
 800ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac02:	ee10 0a10 	vmov	r0, s0
 800ac06:	ed2d 8b02 	vpush	{d8}
 800ac0a:	eeb0 8a40 	vmov.f32	s16, s0
 800ac0e:	f7f5 fcb3 	bl	8000578 <__aeabi_f2d>
 800ac12:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ac16:	4606      	mov	r6, r0
 800ac18:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	ee17 0a90 	vmov	r0, s15
 800ac22:	f7f5 fca9 	bl	8000578 <__aeabi_f2d>
 800ac26:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800ac2a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ac2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac32:	4604      	mov	r4, r0
 800ac34:	460d      	mov	r5, r1
 800ac36:	db23      	blt.n	800ac80 <taylor_atan+0x80>
 800ac38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ac3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ac40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac44:	d81c      	bhi.n	800ac80 <taylor_atan+0x80>
 800ac46:	a322      	add	r3, pc, #136	; (adr r3, 800acd0 <taylor_atan+0xd0>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f7f5 fcea 	bl	8000628 <__aeabi_dmul>
 800ac54:	a320      	add	r3, pc, #128	; (adr r3, 800acd8 <taylor_atan+0xd8>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460f      	mov	r7, r1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7f5 fce1 	bl	8000628 <__aeabi_dmul>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	f7f5 fb23 	bl	80002b8 <__aeabi_dsub>
 800ac72:	f7f5 ffd1 	bl	8000c18 <__aeabi_d2f>
 800ac76:	ecbd 8b02 	vpop	{d8}
 800ac7a:	ee00 0a10 	vmov	s0, r0
 800ac7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac80:	4632      	mov	r2, r6
 800ac82:	463b      	mov	r3, r7
 800ac84:	a112      	add	r1, pc, #72	; (adr r1, 800acd0 <taylor_atan+0xd0>)
 800ac86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac8a:	f7f5 fdf7 	bl	800087c <__aeabi_ddiv>
 800ac8e:	4622      	mov	r2, r4
 800ac90:	462b      	mov	r3, r5
 800ac92:	4606      	mov	r6, r0
 800ac94:	460f      	mov	r7, r1
 800ac96:	a110      	add	r1, pc, #64	; (adr r1, 800acd8 <taylor_atan+0xd8>)
 800ac98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9c:	f7f5 fdee 	bl	800087c <__aeabi_ddiv>
 800aca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	d809      	bhi.n	800acc6 <taylor_atan+0xc6>
 800acb2:	a10b      	add	r1, pc, #44	; (adr r1, 800ace0 <taylor_atan+0xe0>)
 800acb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb8:	f7f5 fafe 	bl	80002b8 <__aeabi_dsub>
 800acbc:	4622      	mov	r2, r4
 800acbe:	462b      	mov	r3, r5
 800acc0:	f7f5 fafc 	bl	80002bc <__adddf3>
 800acc4:	e7d5      	b.n	800ac72 <taylor_atan+0x72>
 800acc6:	a108      	add	r1, pc, #32	; (adr r1, 800ace8 <taylor_atan+0xe8>)
 800acc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800accc:	e7f4      	b.n	800acb8 <taylor_atan+0xb8>
 800acce:	bf00      	nop
 800acd0:	9ad42c3d 	.word	0x9ad42c3d
 800acd4:	3fef1de6 	.word	0x3fef1de6
 800acd8:	e00d1b71 	.word	0xe00d1b71
 800acdc:	3fc8902d 	.word	0x3fc8902d
 800ace0:	00000000 	.word	0x00000000
 800ace4:	bff921fb 	.word	0xbff921fb
 800ace8:	00000000 	.word	0x00000000
 800acec:	3ff921fb 	.word	0x3ff921fb

0800acf0 <taylor_sqrt>:
 800acf0:	2301      	movs	r3, #1
 800acf2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800acf6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800acfa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800acfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad02:	dc22      	bgt.n	800ad4a <taylor_sqrt+0x5a>
 800ad04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ad0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad10:	eef0 6a47 	vmov.f32	s13, s14
 800ad14:	ee07 2a90 	vmov	s15, r2
 800ad18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad1c:	1cd1      	adds	r1, r2, #3
 800ad1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ad22:	ee06 1a10 	vmov	s12, r1
 800ad26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad2a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800ad2e:	3202      	adds	r2, #2
 800ad30:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800ad34:	2a09      	cmp	r2, #9
 800ad36:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ad3a:	d1eb      	bne.n	800ad14 <taylor_sqrt+0x24>
 800ad3c:	ee07 3a90 	vmov	s15, r3
 800ad40:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800ad44:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ad48:	4770      	bx	lr
 800ad4a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	e7d3      	b.n	800acfa <taylor_sqrt+0xa>

0800ad52 <RFBVM_init>:
 800ad52:	2901      	cmp	r1, #1
 800ad54:	460b      	mov	r3, r1
 800ad56:	bfb8      	it	lt
 800ad58:	2301      	movlt	r3, #1
 800ad5a:	2b80      	cmp	r3, #128	; 0x80
 800ad5c:	bfa8      	it	ge
 800ad5e:	2380      	movge	r3, #128	; 0x80
 800ad60:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800ad64:	e9c0 2080 	strd	r2, r0, [r0, #512]	; 0x200
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800ad6e:	f8c0 0208 	str.w	r0, [r0, #520]	; 0x208
 800ad72:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 800ad76:	1a58      	subs	r0, r3, r1
 800ad78:	bf18      	it	ne
 800ad7a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ad7e:	4770      	bx	lr

0800ad80 <RFBVM_push>:
 800ad80:	b1f0      	cbz	r0, 800adc0 <RFBVM_push+0x40>
 800ad82:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 800ad86:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 800ad8a:	eca3 0a01 	vstmia	r3!, {s0}
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	bf14      	ite	ne
 800ad92:	4619      	movne	r1, r3
 800ad94:	4601      	moveq	r1, r0
 800ad96:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
 800ad9a:	e9d0 3183 	ldrd	r3, r1, [r0, #524]	; 0x20c
 800ad9e:	428b      	cmp	r3, r1
 800ada0:	d10a      	bne.n	800adb8 <RFBVM_push+0x38>
 800ada2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800ada6:	3304      	adds	r3, #4
 800ada8:	429a      	cmp	r2, r3
 800adaa:	bf0c      	ite	eq
 800adac:	f8c0 0204 	streq.w	r0, [r0, #516]	; 0x204
 800adb0:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 800adb4:	2000      	movs	r0, #0
 800adb6:	4770      	bx	lr
 800adb8:	3301      	adds	r3, #1
 800adba:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
 800adbe:	e7f9      	b.n	800adb4 <RFBVM_push+0x34>
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adc4:	4770      	bx	lr
	...

0800adc8 <RFBVM_sum>:
 800adc8:	b530      	push	{r4, r5, lr}
 800adca:	f8d0 1204 	ldr.w	r1, [r0, #516]	; 0x204
 800adce:	f8d0 420c 	ldr.w	r4, [r0, #524]	; 0x20c
 800add2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800adf8 <RFBVM_sum+0x30>
 800add6:	2200      	movs	r2, #0
 800add8:	4294      	cmp	r4, r2
 800adda:	dc00      	bgt.n	800adde <RFBVM_sum+0x16>
 800addc:	bd30      	pop	{r4, r5, pc}
 800adde:	460b      	mov	r3, r1
 800ade0:	ecf3 7a01 	vldmia	r3!, {s15}
 800ade4:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 800ade8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800adec:	3201      	adds	r2, #1
 800adee:	429d      	cmp	r5, r3
 800adf0:	bf14      	ite	ne
 800adf2:	4619      	movne	r1, r3
 800adf4:	4601      	moveq	r1, r0
 800adf6:	e7ef      	b.n	800add8 <RFBVM_sum+0x10>
 800adf8:	00000000 	.word	0x00000000

0800adfc <RFBVM_mean>:
 800adfc:	b510      	push	{r4, lr}
 800adfe:	f8d0 420c 	ldr.w	r4, [r0, #524]	; 0x20c
 800ae02:	b154      	cbz	r4, 800ae1a <RFBVM_mean+0x1e>
 800ae04:	f7ff ffe0 	bl	800adc8 <RFBVM_sum>
 800ae08:	ee07 4a90 	vmov	s15, r4
 800ae0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae10:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800ae14:	eeb0 0a47 	vmov.f32	s0, s14
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800ae20 <RFBVM_mean+0x24>
 800ae1e:	e7f9      	b.n	800ae14 <RFBVM_mean+0x18>
 800ae20:	00000000 	.word	0x00000000

0800ae24 <RFBVM_get_element_pointer>:
 800ae24:	2900      	cmp	r1, #0
 800ae26:	4602      	mov	r2, r0
 800ae28:	db10      	blt.n	800ae4c <RFBVM_get_element_pointer+0x28>
 800ae2a:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
 800ae2e:	428b      	cmp	r3, r1
 800ae30:	dd0c      	ble.n	800ae4c <RFBVM_get_element_pointer+0x28>
 800ae32:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800ae36:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800ae3a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800ae3e:	4298      	cmp	r0, r3
 800ae40:	d305      	bcc.n	800ae4e <RFBVM_get_element_pointer+0x2a>
 800ae42:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800ae46:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800ae4a:	4770      	bx	lr
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	4770      	bx	lr

0800ae50 <RFBVM_get_element_value>:
 800ae50:	b508      	push	{r3, lr}
 800ae52:	f7ff ffe7 	bl	800ae24 <RFBVM_get_element_pointer>
 800ae56:	b110      	cbz	r0, 800ae5e <RFBVM_get_element_value+0xe>
 800ae58:	ed90 0a00 	vldr	s0, [r0]
 800ae5c:	bd08      	pop	{r3, pc}
 800ae5e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae64 <RFBVM_get_element_value+0x14>
 800ae62:	e7fb      	b.n	800ae5c <RFBVM_get_element_value+0xc>
 800ae64:	00000000 	.word	0x00000000

0800ae68 <RFBVM_set_element_value>:
 800ae68:	b508      	push	{r3, lr}
 800ae6a:	f7ff ffdb 	bl	800ae24 <RFBVM_get_element_pointer>
 800ae6e:	b118      	cbz	r0, 800ae78 <RFBVM_set_element_value+0x10>
 800ae70:	ed80 0a00 	vstr	s0, [r0]
 800ae74:	2000      	movs	r0, #0
 800ae76:	bd08      	pop	{r3, pc}
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae7c:	e7fb      	b.n	800ae76 <RFBVM_set_element_value+0xe>

0800ae7e <RFBVM_fill>:
 800ae7e:	b570      	push	{r4, r5, r6, lr}
 800ae80:	2400      	movs	r4, #0
 800ae82:	4606      	mov	r6, r0
 800ae84:	4625      	mov	r5, r4
 800ae86:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
 800ae8a:	42ab      	cmp	r3, r5
 800ae8c:	dc04      	bgt.n	800ae98 <RFBVM_fill+0x1a>
 800ae8e:	1e20      	subs	r0, r4, #0
 800ae90:	bf18      	it	ne
 800ae92:	2001      	movne	r0, #1
 800ae94:	4240      	negs	r0, r0
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7ff ffe4 	bl	800ae68 <RFBVM_set_element_value>
 800aea0:	3501      	adds	r5, #1
 800aea2:	4404      	add	r4, r0
 800aea4:	e7ef      	b.n	800ae86 <RFBVM_fill+0x8>
	...

0800aea8 <SEN_init>:
 800aea8:	b160      	cbz	r0, 800aec4 <SEN_init+0x1c>
 800aeaa:	2200      	movs	r2, #0
 800aeac:	60c2      	str	r2, [r0, #12]
 800aeae:	4a07      	ldr	r2, [pc, #28]	; (800aecc <SEN_init+0x24>)
 800aeb0:	6102      	str	r2, [r0, #16]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6142      	str	r2, [r0, #20]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	e9c0 3300 	strd	r3, r3, [r0]
 800aebc:	6083      	str	r3, [r0, #8]
 800aebe:	7602      	strb	r2, [r0, #24]
 800aec0:	4618      	mov	r0, r3
 800aec2:	4770      	bx	lr
 800aec4:	f06f 0001 	mvn.w	r0, #1
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	3f402037 	.word	0x3f402037

0800aed0 <SEN_set_orientation>:
 800aed0:	b128      	cbz	r0, 800aede <SEN_set_orientation+0xe>
 800aed2:	2908      	cmp	r1, #8
 800aed4:	bf28      	it	cs
 800aed6:	2101      	movcs	r1, #1
 800aed8:	7601      	strb	r1, [r0, #24]
 800aeda:	2000      	movs	r0, #0
 800aedc:	4770      	bx	lr
 800aede:	f06f 0001 	mvn.w	r0, #1
 800aee2:	4770      	bx	lr

0800aee4 <SEN_set_frequency>:
 800aee4:	b140      	cbz	r0, 800aef8 <SEN_set_frequency+0x14>
 800aee6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeee:	d906      	bls.n	800aefe <SEN_set_frequency+0x1a>
 800aef0:	ed80 0a03 	vstr	s0, [r0, #12]
 800aef4:	2000      	movs	r0, #0
 800aef6:	4770      	bx	lr
 800aef8:	f06f 0001 	mvn.w	r0, #1
 800aefc:	4770      	bx	lr
 800aefe:	f06f 0005 	mvn.w	r0, #5
 800af02:	4770      	bx	lr

0800af04 <SEN_set_resolution>:
 800af04:	b160      	cbz	r0, 800af20 <SEN_set_resolution+0x1c>
 800af06:	2900      	cmp	r1, #0
 800af08:	dd0d      	ble.n	800af26 <SEN_set_resolution+0x22>
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	dd0b      	ble.n	800af26 <SEN_set_resolution+0x22>
 800af0e:	fb02 f301 	mul.w	r3, r2, r1
 800af12:	2b40      	cmp	r3, #64	; 0x40
 800af14:	dc07      	bgt.n	800af26 <SEN_set_resolution+0x22>
 800af16:	e9c0 1200 	strd	r1, r2, [r0]
 800af1a:	6083      	str	r3, [r0, #8]
 800af1c:	2000      	movs	r0, #0
 800af1e:	4770      	bx	lr
 800af20:	f06f 0001 	mvn.w	r0, #1
 800af24:	4770      	bx	lr
 800af26:	f06f 0003 	mvn.w	r0, #3
 800af2a:	4770      	bx	lr

0800af2c <SEN_set_square_resolution>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	460c      	mov	r4, r1
 800af30:	4605      	mov	r5, r0
 800af32:	b1b8      	cbz	r0, 800af64 <SEN_set_square_resolution+0x38>
 800af34:	2900      	cmp	r1, #0
 800af36:	dd18      	ble.n	800af6a <SEN_set_square_resolution+0x3e>
 800af38:	4608      	mov	r0, r1
 800af3a:	f7f5 fb0b 	bl	8000554 <__aeabi_i2d>
 800af3e:	ec41 0b10 	vmov	d0, r0, r1
 800af42:	f005 fba1 	bl	8010688 <sqrt>
 800af46:	ec51 0b10 	vmov	r0, r1, d0
 800af4a:	f7f5 fe1d 	bl	8000b88 <__aeabi_d2iz>
 800af4e:	fb00 f300 	mul.w	r3, r0, r0
 800af52:	42a3      	cmp	r3, r4
 800af54:	4602      	mov	r2, r0
 800af56:	d10b      	bne.n	800af70 <SEN_set_square_resolution+0x44>
 800af58:	4601      	mov	r1, r0
 800af5a:	4628      	mov	r0, r5
 800af5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af60:	f7ff bfd0 	b.w	800af04 <SEN_set_resolution>
 800af64:	f06f 0001 	mvn.w	r0, #1
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	f06f 0003 	mvn.w	r0, #3
 800af6e:	e7fb      	b.n	800af68 <SEN_set_square_resolution+0x3c>
 800af70:	f06f 0004 	mvn.w	r0, #4
 800af74:	e7f8      	b.n	800af68 <SEN_set_square_resolution+0x3c>

0800af76 <SEN_set_data>:
 800af76:	b178      	cbz	r0, 800af98 <SEN_set_data+0x22>
 800af78:	2900      	cmp	r1, #0
 800af7a:	db10      	blt.n	800af9e <SEN_set_data+0x28>
 800af7c:	6883      	ldr	r3, [r0, #8]
 800af7e:	428b      	cmp	r3, r1
 800af80:	dd0d      	ble.n	800af9e <SEN_set_data+0x28>
 800af82:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800af86:	4408      	add	r0, r1
 800af88:	ed83 0a08 	vstr	s0, [r3, #32]
 800af8c:	edc3 0a48 	vstr	s1, [r3, #288]	; 0x120
 800af90:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
 800af94:	2000      	movs	r0, #0
 800af96:	4770      	bx	lr
 800af98:	f06f 0001 	mvn.w	r0, #1
 800af9c:	4770      	bx	lr
 800af9e:	f06f 0002 	mvn.w	r0, #2
 800afa2:	4770      	bx	lr

0800afa4 <SEN_idx_to_col_row>:
 800afa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa6:	b38b      	cbz	r3, 800b00c <SEN_idx_to_col_row+0x68>
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	db32      	blt.n	800b012 <SEN_idx_to_col_row+0x6e>
 800afac:	689c      	ldr	r4, [r3, #8]
 800afae:	4294      	cmp	r4, r2
 800afb0:	dd2f      	ble.n	800b012 <SEN_idx_to_col_row+0x6e>
 800afb2:	681d      	ldr	r5, [r3, #0]
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	dd2f      	ble.n	800b018 <SEN_idx_to_col_row+0x74>
 800afb8:	fb92 f6f5 	sdiv	r6, r2, r5
 800afbc:	7e1f      	ldrb	r7, [r3, #24]
 800afbe:	fb05 2216 	mls	r2, r5, r6, r2
 800afc2:	4634      	mov	r4, r6
 800afc4:	2f07      	cmp	r7, #7
 800afc6:	d82a      	bhi.n	800b01e <SEN_idx_to_col_row+0x7a>
 800afc8:	e8df f007 	tbb	[pc, r7]
 800afcc:	090d070f 	.word	0x090d070f
 800afd0:	1b041613 	.word	0x1b041613
 800afd4:	4614      	mov	r4, r2
 800afd6:	4632      	mov	r2, r6
 800afd8:	e007      	b.n	800afea <SEN_idx_to_col_row+0x46>
 800afda:	3d01      	subs	r5, #1
 800afdc:	1aaa      	subs	r2, r5, r2
 800afde:	685c      	ldr	r4, [r3, #4]
 800afe0:	3c01      	subs	r4, #1
 800afe2:	1ba4      	subs	r4, r4, r6
 800afe4:	e001      	b.n	800afea <SEN_idx_to_col_row+0x46>
 800afe6:	3d01      	subs	r5, #1
 800afe8:	1aaa      	subs	r2, r5, r2
 800afea:	6002      	str	r2, [r0, #0]
 800afec:	600c      	str	r4, [r1, #0]
 800afee:	2000      	movs	r0, #0
 800aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff2:	1e6c      	subs	r4, r5, #1
 800aff4:	1aa4      	subs	r4, r4, r2
 800aff6:	e7ee      	b.n	800afd6 <SEN_idx_to_col_row+0x32>
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	4614      	mov	r4, r2
 800affc:	3b01      	subs	r3, #1
 800affe:	1b9a      	subs	r2, r3, r6
 800b000:	e7f3      	b.n	800afea <SEN_idx_to_col_row+0x46>
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	1e6c      	subs	r4, r5, #1
 800b006:	3b01      	subs	r3, #1
 800b008:	1aa4      	subs	r4, r4, r2
 800b00a:	e7f8      	b.n	800affe <SEN_idx_to_col_row+0x5a>
 800b00c:	f06f 0001 	mvn.w	r0, #1
 800b010:	e7ee      	b.n	800aff0 <SEN_idx_to_col_row+0x4c>
 800b012:	f06f 0002 	mvn.w	r0, #2
 800b016:	e7eb      	b.n	800aff0 <SEN_idx_to_col_row+0x4c>
 800b018:	f06f 0003 	mvn.w	r0, #3
 800b01c:	e7e8      	b.n	800aff0 <SEN_idx_to_col_row+0x4c>
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b022:	e7e5      	b.n	800aff0 <SEN_idx_to_col_row+0x4c>

0800b024 <SEN_col_row_to_idx>:
 800b024:	b510      	push	{r4, lr}
 800b026:	2b00      	cmp	r3, #0
 800b028:	d036      	beq.n	800b098 <SEN_col_row_to_idx+0x74>
 800b02a:	7e1c      	ldrb	r4, [r3, #24]
 800b02c:	2c07      	cmp	r4, #7
 800b02e:	d836      	bhi.n	800b09e <SEN_col_row_to_idx+0x7a>
 800b030:	e8df f004 	tbb	[pc, r4]
 800b034:	0b0f0812 	.word	0x0b0f0812
 800b038:	2b042721 	.word	0x2b042721
 800b03c:	460c      	mov	r4, r1
 800b03e:	4611      	mov	r1, r2
 800b040:	4622      	mov	r2, r4
 800b042:	e009      	b.n	800b058 <SEN_col_row_to_idx+0x34>
 800b044:	681c      	ldr	r4, [r3, #0]
 800b046:	3c01      	subs	r4, #1
 800b048:	1a61      	subs	r1, r4, r1
 800b04a:	685c      	ldr	r4, [r3, #4]
 800b04c:	3c01      	subs	r4, #1
 800b04e:	1aa2      	subs	r2, r4, r2
 800b050:	e002      	b.n	800b058 <SEN_col_row_to_idx+0x34>
 800b052:	681c      	ldr	r4, [r3, #0]
 800b054:	3c01      	subs	r4, #1
 800b056:	1a61      	subs	r1, r4, r1
 800b058:	2900      	cmp	r1, #0
 800b05a:	db23      	blt.n	800b0a4 <SEN_col_row_to_idx+0x80>
 800b05c:	681c      	ldr	r4, [r3, #0]
 800b05e:	428c      	cmp	r4, r1
 800b060:	dd20      	ble.n	800b0a4 <SEN_col_row_to_idx+0x80>
 800b062:	2a00      	cmp	r2, #0
 800b064:	db1e      	blt.n	800b0a4 <SEN_col_row_to_idx+0x80>
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4293      	cmp	r3, r2
 800b06a:	dd1b      	ble.n	800b0a4 <SEN_col_row_to_idx+0x80>
 800b06c:	fb02 1104 	mla	r1, r2, r4, r1
 800b070:	6001      	str	r1, [r0, #0]
 800b072:	2000      	movs	r0, #0
 800b074:	bd10      	pop	{r4, pc}
 800b076:	681c      	ldr	r4, [r3, #0]
 800b078:	3c01      	subs	r4, #1
 800b07a:	1aa4      	subs	r4, r4, r2
 800b07c:	460a      	mov	r2, r1
 800b07e:	4621      	mov	r1, r4
 800b080:	e7ea      	b.n	800b058 <SEN_col_row_to_idx+0x34>
 800b082:	685c      	ldr	r4, [r3, #4]
 800b084:	3c01      	subs	r4, #1
 800b086:	1a64      	subs	r4, r4, r1
 800b088:	e7d9      	b.n	800b03e <SEN_col_row_to_idx+0x1a>
 800b08a:	681c      	ldr	r4, [r3, #0]
 800b08c:	3c01      	subs	r4, #1
 800b08e:	1aa4      	subs	r4, r4, r2
 800b090:	685a      	ldr	r2, [r3, #4]
 800b092:	3a01      	subs	r2, #1
 800b094:	1a52      	subs	r2, r2, r1
 800b096:	e7f2      	b.n	800b07e <SEN_col_row_to_idx+0x5a>
 800b098:	f06f 0001 	mvn.w	r0, #1
 800b09c:	e7ea      	b.n	800b074 <SEN_col_row_to_idx+0x50>
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0a2:	e7e7      	b.n	800b074 <SEN_col_row_to_idx+0x50>
 800b0a4:	f06f 0002 	mvn.w	r0, #2
 800b0a8:	e7e4      	b.n	800b074 <SEN_col_row_to_idx+0x50>

0800b0aa <SEN_zone_size>:
 800b0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	ed2d 8b04 	vpush	{d8-d9}
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	4614      	mov	r4, r2
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	d04e      	beq.n	800b15a <SEN_zone_size+0xb0>
 800b0bc:	6816      	ldr	r6, [r2, #0]
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	dd4e      	ble.n	800b160 <SEN_zone_size+0xb6>
 800b0c2:	6855      	ldr	r5, [r2, #4]
 800b0c4:	2d00      	cmp	r5, #0
 800b0c6:	dd4b      	ble.n	800b160 <SEN_zone_size+0xb6>
 800b0c8:	edd2 7a04 	vldr	s15, [r2, #16]
 800b0cc:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800b0d0:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b0d4:	ee30 8a00 	vadd.f32	s16, s0, s0
 800b0d8:	ee17 0a90 	vmov	r0, s15
 800b0dc:	f7f5 fa4c 	bl	8000578 <__aeabi_f2d>
 800b0e0:	ec41 0b10 	vmov	d0, r0, r1
 800b0e4:	f005 fafc 	bl	80106e0 <tan>
 800b0e8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ec:	f7f5 fd94 	bl	8000c18 <__aeabi_d2f>
 800b0f0:	ee07 0a90 	vmov	s15, r0
 800b0f4:	ee27 7a88 	vmul.f32	s14, s15, s16
 800b0f8:	ee07 6a90 	vmov	s15, r6
 800b0fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b100:	eec7 8a27 	vdiv.f32	s17, s14, s15
 800b104:	edd4 7a05 	vldr	s15, [r4, #20]
 800b108:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b10c:	ee17 0a90 	vmov	r0, s15
 800b110:	f7f5 fa32 	bl	8000578 <__aeabi_f2d>
 800b114:	ec41 0b10 	vmov	d0, r0, r1
 800b118:	f005 fae2 	bl	80106e0 <tan>
 800b11c:	ec51 0b10 	vmov	r0, r1, d0
 800b120:	f7f5 fd7a 	bl	8000c18 <__aeabi_d2f>
 800b124:	ee07 0a90 	vmov	s15, r0
 800b128:	ee27 8a88 	vmul.f32	s16, s15, s16
 800b12c:	ee07 5a90 	vmov	s15, r5
 800b130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b134:	7e23      	ldrb	r3, [r4, #24]
 800b136:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	f04f 0000 	mov.w	r0, #0
 800b140:	bf95      	itete	ls
 800b142:	edc8 8a00 	vstrls	s17, [r8]
 800b146:	ed88 7a00 	vstrhi	s14, [r8]
 800b14a:	ed87 7a00 	vstrls	s14, [r7]
 800b14e:	edc7 8a00 	vstrhi	s17, [r7]
 800b152:	ecbd 8b04 	vpop	{d8-d9}
 800b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15a:	f06f 0001 	mvn.w	r0, #1
 800b15e:	e7f8      	b.n	800b152 <SEN_zone_size+0xa8>
 800b160:	f06f 0003 	mvn.w	r0, #3
 800b164:	e7f5      	b.n	800b152 <SEN_zone_size+0xa8>

0800b166 <SEN_actual_res>:
 800b166:	b162      	cbz	r2, 800b182 <SEN_actual_res+0x1c>
 800b168:	7e13      	ldrb	r3, [r2, #24]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	bf95      	itete	ls
 800b16e:	6813      	ldrls	r3, [r2, #0]
 800b170:	6853      	ldrhi	r3, [r2, #4]
 800b172:	6003      	strls	r3, [r0, #0]
 800b174:	6003      	strhi	r3, [r0, #0]
 800b176:	bf94      	ite	ls
 800b178:	6853      	ldrls	r3, [r2, #4]
 800b17a:	6813      	ldrhi	r3, [r2, #0]
 800b17c:	600b      	str	r3, [r1, #0]
 800b17e:	2000      	movs	r0, #0
 800b180:	4770      	bx	lr
 800b182:	f06f 0001 	mvn.w	r0, #1
 800b186:	4770      	bx	lr

0800b188 <SEN_col_row_to_mm>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	ed2d 8b02 	vpush	{d8}
 800b18e:	b084      	sub	sp, #16
 800b190:	ee08 2a90 	vmov	s17, r2
 800b194:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b196:	ee08 3a10 	vmov	s16, r3
 800b19a:	4605      	mov	r5, r0
 800b19c:	460c      	mov	r4, r1
 800b19e:	b39e      	cbz	r6, 800b208 <SEN_col_row_to_mm+0x80>
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	a901      	add	r1, sp, #4
 800b1a4:	4668      	mov	r0, sp
 800b1a6:	f7ff ff80 	bl	800b0aa <SEN_zone_size>
 800b1aa:	bb48      	cbnz	r0, 800b200 <SEN_col_row_to_mm+0x78>
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	a903      	add	r1, sp, #12
 800b1b0:	a802      	add	r0, sp, #8
 800b1b2:	f7ff ffd8 	bl	800b166 <SEN_actual_res>
 800b1b6:	bb18      	cbnz	r0, 800b200 <SEN_col_row_to_mm+0x78>
 800b1b8:	eddd 7a02 	vldr	s15, [sp, #8]
 800b1bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1c8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800b1cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b1d0:	eee7 8aa6 	vfma.f32	s17, s15, s13
 800b1d4:	eddd 7a00 	vldr	s15, [sp]
 800b1d8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b1dc:	eddd 7a03 	vldr	s15, [sp, #12]
 800b1e0:	edc5 8a00 	vstr	s17, [r5]
 800b1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1e8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800b1ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b1f0:	eddd 7a01 	vldr	s15, [sp, #4]
 800b1f4:	eea7 8a26 	vfma.f32	s16, s14, s13
 800b1f8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b1fc:	ed84 8a00 	vstr	s16, [r4]
 800b200:	b004      	add	sp, #16
 800b202:	ecbd 8b02 	vpop	{d8}
 800b206:	bd70      	pop	{r4, r5, r6, pc}
 800b208:	f06f 0001 	mvn.w	r0, #1
 800b20c:	e7f8      	b.n	800b200 <SEN_col_row_to_mm+0x78>

0800b20e <SEN_idx_to_mm>:
 800b20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b210:	4606      	mov	r6, r0
 800b212:	b085      	sub	sp, #20
 800b214:	460f      	mov	r7, r1
 800b216:	461c      	mov	r4, r3
 800b218:	b193      	cbz	r3, 800b240 <SEN_idx_to_mm+0x32>
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	db13      	blt.n	800b246 <SEN_idx_to_mm+0x38>
 800b21e:	6899      	ldr	r1, [r3, #8]
 800b220:	4291      	cmp	r1, r2
 800b222:	dd10      	ble.n	800b246 <SEN_idx_to_mm+0x38>
 800b224:	a903      	add	r1, sp, #12
 800b226:	a802      	add	r0, sp, #8
 800b228:	f7ff febc 	bl	800afa4 <SEN_idx_to_col_row>
 800b22c:	b930      	cbnz	r0, 800b23c <SEN_idx_to_mm+0x2e>
 800b22e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b232:	9400      	str	r4, [sp, #0]
 800b234:	4639      	mov	r1, r7
 800b236:	4630      	mov	r0, r6
 800b238:	f7ff ffa6 	bl	800b188 <SEN_col_row_to_mm>
 800b23c:	b005      	add	sp, #20
 800b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b240:	f06f 0001 	mvn.w	r0, #1
 800b244:	e7fa      	b.n	800b23c <SEN_idx_to_mm+0x2e>
 800b246:	f06f 0002 	mvn.w	r0, #2
 800b24a:	e7f7      	b.n	800b23c <SEN_idx_to_mm+0x2e>

0800b24c <SEN_mm_to_col_row>:
 800b24c:	b570      	push	{r4, r5, r6, lr}
 800b24e:	ed2d 8b02 	vpush	{d8}
 800b252:	4606      	mov	r6, r0
 800b254:	eef0 8a40 	vmov.f32	s17, s0
 800b258:	b084      	sub	sp, #16
 800b25a:	460d      	mov	r5, r1
 800b25c:	eeb0 8a60 	vmov.f32	s16, s1
 800b260:	eeb0 0a41 	vmov.f32	s0, s2
 800b264:	4614      	mov	r4, r2
 800b266:	2a00      	cmp	r2, #0
 800b268:	d04e      	beq.n	800b308 <SEN_mm_to_col_row+0xbc>
 800b26a:	a901      	add	r1, sp, #4
 800b26c:	4668      	mov	r0, sp
 800b26e:	f7ff ff1c 	bl	800b0aa <SEN_zone_size>
 800b272:	b940      	cbnz	r0, 800b286 <SEN_mm_to_col_row+0x3a>
 800b274:	eddd 7a00 	vldr	s15, [sp]
 800b278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b280:	d805      	bhi.n	800b28e <SEN_mm_to_col_row+0x42>
 800b282:	f06f 0002 	mvn.w	r0, #2
 800b286:	b004      	add	sp, #16
 800b288:	ecbd 8b02 	vpop	{d8}
 800b28c:	bd70      	pop	{r4, r5, r6, pc}
 800b28e:	eddd 7a01 	vldr	s15, [sp, #4]
 800b292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29a:	d9f2      	bls.n	800b282 <SEN_mm_to_col_row+0x36>
 800b29c:	4622      	mov	r2, r4
 800b29e:	a903      	add	r1, sp, #12
 800b2a0:	a802      	add	r0, sp, #8
 800b2a2:	f7ff ff60 	bl	800b166 <SEN_actual_res>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d1ed      	bne.n	800b286 <SEN_mm_to_col_row+0x3a>
 800b2aa:	eddd 7a02 	vldr	s15, [sp, #8]
 800b2ae:	ed9d 5a01 	vldr	s10, [sp, #4]
 800b2b2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b2b6:	eddd 7a00 	vldr	s15, [sp]
 800b2ba:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800b2be:	eddd 7a03 	vldr	s15, [sp, #12]
 800b2c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b2c6:	eec8 7a05 	vdiv.f32	s15, s16, s10
 800b2ca:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800b2ce:	eea6 7a25 	vfma.f32	s14, s12, s11
 800b2d2:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b2d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2de:	d4d0      	bmi.n	800b282 <SEN_mm_to_col_row+0x36>
 800b2e0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800b2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e8:	d9cb      	bls.n	800b282 <SEN_mm_to_col_row+0x36>
 800b2ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f2:	d4c6      	bmi.n	800b282 <SEN_mm_to_col_row+0x36>
 800b2f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fc:	d9c1      	bls.n	800b282 <SEN_mm_to_col_row+0x36>
 800b2fe:	ed86 7a00 	vstr	s14, [r6]
 800b302:	edc5 7a00 	vstr	s15, [r5]
 800b306:	e7be      	b.n	800b286 <SEN_mm_to_col_row+0x3a>
 800b308:	f06f 0001 	mvn.w	r0, #1
 800b30c:	e7bb      	b.n	800b286 <SEN_mm_to_col_row+0x3a>

0800b30e <SEN_mm_to_idx>:
 800b30e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b310:	4604      	mov	r4, r0
 800b312:	b1c1      	cbz	r1, 800b346 <SEN_mm_to_idx+0x38>
 800b314:	460a      	mov	r2, r1
 800b316:	9101      	str	r1, [sp, #4]
 800b318:	a802      	add	r0, sp, #8
 800b31a:	a903      	add	r1, sp, #12
 800b31c:	f7ff ff96 	bl	800b24c <SEN_mm_to_col_row>
 800b320:	b978      	cbnz	r0, 800b342 <SEN_mm_to_idx+0x34>
 800b322:	eddd 7a03 	vldr	s15, [sp, #12]
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b32c:	4620      	mov	r0, r4
 800b32e:	ee17 2a90 	vmov	r2, s15
 800b332:	eddd 7a02 	vldr	s15, [sp, #8]
 800b336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b33a:	ee17 1a90 	vmov	r1, s15
 800b33e:	f7ff fe71 	bl	800b024 <SEN_col_row_to_idx>
 800b342:	b004      	add	sp, #16
 800b344:	bd10      	pop	{r4, pc}
 800b346:	f06f 0001 	mvn.w	r0, #1
 800b34a:	e7fa      	b.n	800b342 <SEN_mm_to_idx+0x34>

0800b34c <__cvt>:
 800b34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b350:	ec55 4b10 	vmov	r4, r5, d0
 800b354:	2d00      	cmp	r5, #0
 800b356:	460e      	mov	r6, r1
 800b358:	4619      	mov	r1, r3
 800b35a:	462b      	mov	r3, r5
 800b35c:	bfbb      	ittet	lt
 800b35e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b362:	461d      	movlt	r5, r3
 800b364:	2300      	movge	r3, #0
 800b366:	232d      	movlt	r3, #45	; 0x2d
 800b368:	700b      	strb	r3, [r1, #0]
 800b36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b36c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b370:	4691      	mov	r9, r2
 800b372:	f023 0820 	bic.w	r8, r3, #32
 800b376:	bfbc      	itt	lt
 800b378:	4622      	movlt	r2, r4
 800b37a:	4614      	movlt	r4, r2
 800b37c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b380:	d005      	beq.n	800b38e <__cvt+0x42>
 800b382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b386:	d100      	bne.n	800b38a <__cvt+0x3e>
 800b388:	3601      	adds	r6, #1
 800b38a:	2102      	movs	r1, #2
 800b38c:	e000      	b.n	800b390 <__cvt+0x44>
 800b38e:	2103      	movs	r1, #3
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	ab02      	add	r3, sp, #8
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	ec45 4b10 	vmov	d0, r4, r5
 800b39c:	4653      	mov	r3, sl
 800b39e:	4632      	mov	r2, r6
 800b3a0:	f001 fab6 	bl	800c910 <_dtoa_r>
 800b3a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	d102      	bne.n	800b3b2 <__cvt+0x66>
 800b3ac:	f019 0f01 	tst.w	r9, #1
 800b3b0:	d022      	beq.n	800b3f8 <__cvt+0xac>
 800b3b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3b6:	eb07 0906 	add.w	r9, r7, r6
 800b3ba:	d110      	bne.n	800b3de <__cvt+0x92>
 800b3bc:	783b      	ldrb	r3, [r7, #0]
 800b3be:	2b30      	cmp	r3, #48	; 0x30
 800b3c0:	d10a      	bne.n	800b3d8 <__cvt+0x8c>
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7f5 fb95 	bl	8000af8 <__aeabi_dcmpeq>
 800b3ce:	b918      	cbnz	r0, 800b3d8 <__cvt+0x8c>
 800b3d0:	f1c6 0601 	rsb	r6, r6, #1
 800b3d4:	f8ca 6000 	str.w	r6, [sl]
 800b3d8:	f8da 3000 	ldr.w	r3, [sl]
 800b3dc:	4499      	add	r9, r3
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f7f5 fb87 	bl	8000af8 <__aeabi_dcmpeq>
 800b3ea:	b108      	cbz	r0, 800b3f0 <__cvt+0xa4>
 800b3ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3f0:	2230      	movs	r2, #48	; 0x30
 800b3f2:	9b03      	ldr	r3, [sp, #12]
 800b3f4:	454b      	cmp	r3, r9
 800b3f6:	d307      	bcc.n	800b408 <__cvt+0xbc>
 800b3f8:	9b03      	ldr	r3, [sp, #12]
 800b3fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3fc:	1bdb      	subs	r3, r3, r7
 800b3fe:	4638      	mov	r0, r7
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	b004      	add	sp, #16
 800b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b408:	1c59      	adds	r1, r3, #1
 800b40a:	9103      	str	r1, [sp, #12]
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	e7f0      	b.n	800b3f2 <__cvt+0xa6>

0800b410 <__exponent>:
 800b410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b412:	4603      	mov	r3, r0
 800b414:	2900      	cmp	r1, #0
 800b416:	bfb8      	it	lt
 800b418:	4249      	neglt	r1, r1
 800b41a:	f803 2b02 	strb.w	r2, [r3], #2
 800b41e:	bfb4      	ite	lt
 800b420:	222d      	movlt	r2, #45	; 0x2d
 800b422:	222b      	movge	r2, #43	; 0x2b
 800b424:	2909      	cmp	r1, #9
 800b426:	7042      	strb	r2, [r0, #1]
 800b428:	dd2a      	ble.n	800b480 <__exponent+0x70>
 800b42a:	f10d 0207 	add.w	r2, sp, #7
 800b42e:	4617      	mov	r7, r2
 800b430:	260a      	movs	r6, #10
 800b432:	4694      	mov	ip, r2
 800b434:	fb91 f5f6 	sdiv	r5, r1, r6
 800b438:	fb06 1415 	mls	r4, r6, r5, r1
 800b43c:	3430      	adds	r4, #48	; 0x30
 800b43e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b442:	460c      	mov	r4, r1
 800b444:	2c63      	cmp	r4, #99	; 0x63
 800b446:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b44a:	4629      	mov	r1, r5
 800b44c:	dcf1      	bgt.n	800b432 <__exponent+0x22>
 800b44e:	3130      	adds	r1, #48	; 0x30
 800b450:	f1ac 0402 	sub.w	r4, ip, #2
 800b454:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b458:	1c41      	adds	r1, r0, #1
 800b45a:	4622      	mov	r2, r4
 800b45c:	42ba      	cmp	r2, r7
 800b45e:	d30a      	bcc.n	800b476 <__exponent+0x66>
 800b460:	f10d 0209 	add.w	r2, sp, #9
 800b464:	eba2 020c 	sub.w	r2, r2, ip
 800b468:	42bc      	cmp	r4, r7
 800b46a:	bf88      	it	hi
 800b46c:	2200      	movhi	r2, #0
 800b46e:	4413      	add	r3, r2
 800b470:	1a18      	subs	r0, r3, r0
 800b472:	b003      	add	sp, #12
 800b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b476:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b47a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b47e:	e7ed      	b.n	800b45c <__exponent+0x4c>
 800b480:	2330      	movs	r3, #48	; 0x30
 800b482:	3130      	adds	r1, #48	; 0x30
 800b484:	7083      	strb	r3, [r0, #2]
 800b486:	70c1      	strb	r1, [r0, #3]
 800b488:	1d03      	adds	r3, r0, #4
 800b48a:	e7f1      	b.n	800b470 <__exponent+0x60>

0800b48c <_printf_float>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	ed2d 8b02 	vpush	{d8}
 800b494:	b08d      	sub	sp, #52	; 0x34
 800b496:	460c      	mov	r4, r1
 800b498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b49c:	4616      	mov	r6, r2
 800b49e:	461f      	mov	r7, r3
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	f001 f91f 	bl	800c6e4 <_localeconv_r>
 800b4a6:	f8d0 a000 	ldr.w	sl, [r0]
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	f7f4 fef8 	bl	80002a0 <strlen>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	9305      	str	r3, [sp, #20]
 800b4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4c0:	3307      	adds	r3, #7
 800b4c2:	f023 0307 	bic.w	r3, r3, #7
 800b4c6:	f103 0208 	add.w	r2, r3, #8
 800b4ca:	f8c8 2000 	str.w	r2, [r8]
 800b4ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4d6:	9307      	str	r3, [sp, #28]
 800b4d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4dc:	ee08 0a10 	vmov	s16, r0
 800b4e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b4e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4e8:	4b9e      	ldr	r3, [pc, #632]	; (800b764 <_printf_float+0x2d8>)
 800b4ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4ee:	f7f5 fb35 	bl	8000b5c <__aeabi_dcmpun>
 800b4f2:	bb88      	cbnz	r0, 800b558 <_printf_float+0xcc>
 800b4f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4f8:	4b9a      	ldr	r3, [pc, #616]	; (800b764 <_printf_float+0x2d8>)
 800b4fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4fe:	f7f5 fb0f 	bl	8000b20 <__aeabi_dcmple>
 800b502:	bb48      	cbnz	r0, 800b558 <_printf_float+0xcc>
 800b504:	2200      	movs	r2, #0
 800b506:	2300      	movs	r3, #0
 800b508:	4640      	mov	r0, r8
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7f5 fafe 	bl	8000b0c <__aeabi_dcmplt>
 800b510:	b110      	cbz	r0, 800b518 <_printf_float+0x8c>
 800b512:	232d      	movs	r3, #45	; 0x2d
 800b514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b518:	4a93      	ldr	r2, [pc, #588]	; (800b768 <_printf_float+0x2dc>)
 800b51a:	4b94      	ldr	r3, [pc, #592]	; (800b76c <_printf_float+0x2e0>)
 800b51c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b520:	bf94      	ite	ls
 800b522:	4690      	movls	r8, r2
 800b524:	4698      	movhi	r8, r3
 800b526:	2303      	movs	r3, #3
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	f023 0304 	bic.w	r3, r3, #4
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	f04f 0900 	mov.w	r9, #0
 800b536:	9700      	str	r7, [sp, #0]
 800b538:	4633      	mov	r3, r6
 800b53a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b53c:	4621      	mov	r1, r4
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 f9da 	bl	800b8f8 <_printf_common>
 800b544:	3001      	adds	r0, #1
 800b546:	f040 8090 	bne.w	800b66a <_printf_float+0x1de>
 800b54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b54e:	b00d      	add	sp, #52	; 0x34
 800b550:	ecbd 8b02 	vpop	{d8}
 800b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	4642      	mov	r2, r8
 800b55a:	464b      	mov	r3, r9
 800b55c:	4640      	mov	r0, r8
 800b55e:	4649      	mov	r1, r9
 800b560:	f7f5 fafc 	bl	8000b5c <__aeabi_dcmpun>
 800b564:	b140      	cbz	r0, 800b578 <_printf_float+0xec>
 800b566:	464b      	mov	r3, r9
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfbc      	itt	lt
 800b56c:	232d      	movlt	r3, #45	; 0x2d
 800b56e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b572:	4a7f      	ldr	r2, [pc, #508]	; (800b770 <_printf_float+0x2e4>)
 800b574:	4b7f      	ldr	r3, [pc, #508]	; (800b774 <_printf_float+0x2e8>)
 800b576:	e7d1      	b.n	800b51c <_printf_float+0x90>
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b57e:	9206      	str	r2, [sp, #24]
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	d13f      	bne.n	800b604 <_printf_float+0x178>
 800b584:	2306      	movs	r3, #6
 800b586:	6063      	str	r3, [r4, #4]
 800b588:	9b05      	ldr	r3, [sp, #20]
 800b58a:	6861      	ldr	r1, [r4, #4]
 800b58c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b590:	2300      	movs	r3, #0
 800b592:	9303      	str	r3, [sp, #12]
 800b594:	ab0a      	add	r3, sp, #40	; 0x28
 800b596:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b59a:	ab09      	add	r3, sp, #36	; 0x24
 800b59c:	ec49 8b10 	vmov	d0, r8, r9
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f7ff fecf 	bl	800b34c <__cvt>
 800b5ae:	9b06      	ldr	r3, [sp, #24]
 800b5b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5b2:	2b47      	cmp	r3, #71	; 0x47
 800b5b4:	4680      	mov	r8, r0
 800b5b6:	d108      	bne.n	800b5ca <_printf_float+0x13e>
 800b5b8:	1cc8      	adds	r0, r1, #3
 800b5ba:	db02      	blt.n	800b5c2 <_printf_float+0x136>
 800b5bc:	6863      	ldr	r3, [r4, #4]
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	dd41      	ble.n	800b646 <_printf_float+0x1ba>
 800b5c2:	f1ab 0302 	sub.w	r3, fp, #2
 800b5c6:	fa5f fb83 	uxtb.w	fp, r3
 800b5ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5ce:	d820      	bhi.n	800b612 <_printf_float+0x186>
 800b5d0:	3901      	subs	r1, #1
 800b5d2:	465a      	mov	r2, fp
 800b5d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5d8:	9109      	str	r1, [sp, #36]	; 0x24
 800b5da:	f7ff ff19 	bl	800b410 <__exponent>
 800b5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5e0:	1813      	adds	r3, r2, r0
 800b5e2:	2a01      	cmp	r2, #1
 800b5e4:	4681      	mov	r9, r0
 800b5e6:	6123      	str	r3, [r4, #16]
 800b5e8:	dc02      	bgt.n	800b5f0 <_printf_float+0x164>
 800b5ea:	6822      	ldr	r2, [r4, #0]
 800b5ec:	07d2      	lsls	r2, r2, #31
 800b5ee:	d501      	bpl.n	800b5f4 <_printf_float+0x168>
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	6123      	str	r3, [r4, #16]
 800b5f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d09c      	beq.n	800b536 <_printf_float+0xaa>
 800b5fc:	232d      	movs	r3, #45	; 0x2d
 800b5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b602:	e798      	b.n	800b536 <_printf_float+0xaa>
 800b604:	9a06      	ldr	r2, [sp, #24]
 800b606:	2a47      	cmp	r2, #71	; 0x47
 800b608:	d1be      	bne.n	800b588 <_printf_float+0xfc>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1bc      	bne.n	800b588 <_printf_float+0xfc>
 800b60e:	2301      	movs	r3, #1
 800b610:	e7b9      	b.n	800b586 <_printf_float+0xfa>
 800b612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b616:	d118      	bne.n	800b64a <_printf_float+0x1be>
 800b618:	2900      	cmp	r1, #0
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	dd0b      	ble.n	800b636 <_printf_float+0x1aa>
 800b61e:	6121      	str	r1, [r4, #16]
 800b620:	b913      	cbnz	r3, 800b628 <_printf_float+0x19c>
 800b622:	6822      	ldr	r2, [r4, #0]
 800b624:	07d0      	lsls	r0, r2, #31
 800b626:	d502      	bpl.n	800b62e <_printf_float+0x1a2>
 800b628:	3301      	adds	r3, #1
 800b62a:	440b      	add	r3, r1
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	e7de      	b.n	800b5f4 <_printf_float+0x168>
 800b636:	b913      	cbnz	r3, 800b63e <_printf_float+0x1b2>
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	07d2      	lsls	r2, r2, #31
 800b63c:	d501      	bpl.n	800b642 <_printf_float+0x1b6>
 800b63e:	3302      	adds	r3, #2
 800b640:	e7f4      	b.n	800b62c <_printf_float+0x1a0>
 800b642:	2301      	movs	r3, #1
 800b644:	e7f2      	b.n	800b62c <_printf_float+0x1a0>
 800b646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64c:	4299      	cmp	r1, r3
 800b64e:	db05      	blt.n	800b65c <_printf_float+0x1d0>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	6121      	str	r1, [r4, #16]
 800b654:	07d8      	lsls	r0, r3, #31
 800b656:	d5ea      	bpl.n	800b62e <_printf_float+0x1a2>
 800b658:	1c4b      	adds	r3, r1, #1
 800b65a:	e7e7      	b.n	800b62c <_printf_float+0x1a0>
 800b65c:	2900      	cmp	r1, #0
 800b65e:	bfd4      	ite	le
 800b660:	f1c1 0202 	rsble	r2, r1, #2
 800b664:	2201      	movgt	r2, #1
 800b666:	4413      	add	r3, r2
 800b668:	e7e0      	b.n	800b62c <_printf_float+0x1a0>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	055a      	lsls	r2, r3, #21
 800b66e:	d407      	bmi.n	800b680 <_printf_float+0x1f4>
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	4642      	mov	r2, r8
 800b674:	4631      	mov	r1, r6
 800b676:	4628      	mov	r0, r5
 800b678:	47b8      	blx	r7
 800b67a:	3001      	adds	r0, #1
 800b67c:	d12c      	bne.n	800b6d8 <_printf_float+0x24c>
 800b67e:	e764      	b.n	800b54a <_printf_float+0xbe>
 800b680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b684:	f240 80e0 	bls.w	800b848 <_printf_float+0x3bc>
 800b688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	f7f5 fa32 	bl	8000af8 <__aeabi_dcmpeq>
 800b694:	2800      	cmp	r0, #0
 800b696:	d034      	beq.n	800b702 <_printf_float+0x276>
 800b698:	4a37      	ldr	r2, [pc, #220]	; (800b778 <_printf_float+0x2ec>)
 800b69a:	2301      	movs	r3, #1
 800b69c:	4631      	mov	r1, r6
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b8      	blx	r7
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	f43f af51 	beq.w	800b54a <_printf_float+0xbe>
 800b6a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	db02      	blt.n	800b6b6 <_printf_float+0x22a>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	07d8      	lsls	r0, r3, #31
 800b6b4:	d510      	bpl.n	800b6d8 <_printf_float+0x24c>
 800b6b6:	ee18 3a10 	vmov	r3, s16
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4628      	mov	r0, r5
 800b6c0:	47b8      	blx	r7
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	f43f af41 	beq.w	800b54a <_printf_float+0xbe>
 800b6c8:	f04f 0800 	mov.w	r8, #0
 800b6cc:	f104 091a 	add.w	r9, r4, #26
 800b6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	4543      	cmp	r3, r8
 800b6d6:	dc09      	bgt.n	800b6ec <_printf_float+0x260>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	079b      	lsls	r3, r3, #30
 800b6dc:	f100 8107 	bmi.w	800b8ee <_printf_float+0x462>
 800b6e0:	68e0      	ldr	r0, [r4, #12]
 800b6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	bfb8      	it	lt
 800b6e8:	4618      	movlt	r0, r3
 800b6ea:	e730      	b.n	800b54e <_printf_float+0xc2>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	464a      	mov	r2, r9
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f af27 	beq.w	800b54a <_printf_float+0xbe>
 800b6fc:	f108 0801 	add.w	r8, r8, #1
 800b700:	e7e6      	b.n	800b6d0 <_printf_float+0x244>
 800b702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	dc39      	bgt.n	800b77c <_printf_float+0x2f0>
 800b708:	4a1b      	ldr	r2, [pc, #108]	; (800b778 <_printf_float+0x2ec>)
 800b70a:	2301      	movs	r3, #1
 800b70c:	4631      	mov	r1, r6
 800b70e:	4628      	mov	r0, r5
 800b710:	47b8      	blx	r7
 800b712:	3001      	adds	r0, #1
 800b714:	f43f af19 	beq.w	800b54a <_printf_float+0xbe>
 800b718:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b71c:	4313      	orrs	r3, r2
 800b71e:	d102      	bne.n	800b726 <_printf_float+0x29a>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	07d9      	lsls	r1, r3, #31
 800b724:	d5d8      	bpl.n	800b6d8 <_printf_float+0x24c>
 800b726:	ee18 3a10 	vmov	r3, s16
 800b72a:	4652      	mov	r2, sl
 800b72c:	4631      	mov	r1, r6
 800b72e:	4628      	mov	r0, r5
 800b730:	47b8      	blx	r7
 800b732:	3001      	adds	r0, #1
 800b734:	f43f af09 	beq.w	800b54a <_printf_float+0xbe>
 800b738:	f04f 0900 	mov.w	r9, #0
 800b73c:	f104 0a1a 	add.w	sl, r4, #26
 800b740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b742:	425b      	negs	r3, r3
 800b744:	454b      	cmp	r3, r9
 800b746:	dc01      	bgt.n	800b74c <_printf_float+0x2c0>
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	e792      	b.n	800b672 <_printf_float+0x1e6>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4652      	mov	r2, sl
 800b750:	4631      	mov	r1, r6
 800b752:	4628      	mov	r0, r5
 800b754:	47b8      	blx	r7
 800b756:	3001      	adds	r0, #1
 800b758:	f43f aef7 	beq.w	800b54a <_printf_float+0xbe>
 800b75c:	f109 0901 	add.w	r9, r9, #1
 800b760:	e7ee      	b.n	800b740 <_printf_float+0x2b4>
 800b762:	bf00      	nop
 800b764:	7fefffff 	.word	0x7fefffff
 800b768:	0802946d 	.word	0x0802946d
 800b76c:	08029471 	.word	0x08029471
 800b770:	08029475 	.word	0x08029475
 800b774:	08029479 	.word	0x08029479
 800b778:	08029808 	.word	0x08029808
 800b77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b77e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b780:	429a      	cmp	r2, r3
 800b782:	bfa8      	it	ge
 800b784:	461a      	movge	r2, r3
 800b786:	2a00      	cmp	r2, #0
 800b788:	4691      	mov	r9, r2
 800b78a:	dc37      	bgt.n	800b7fc <_printf_float+0x370>
 800b78c:	f04f 0b00 	mov.w	fp, #0
 800b790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b794:	f104 021a 	add.w	r2, r4, #26
 800b798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b79a:	9305      	str	r3, [sp, #20]
 800b79c:	eba3 0309 	sub.w	r3, r3, r9
 800b7a0:	455b      	cmp	r3, fp
 800b7a2:	dc33      	bgt.n	800b80c <_printf_float+0x380>
 800b7a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	db3b      	blt.n	800b824 <_printf_float+0x398>
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	07da      	lsls	r2, r3, #31
 800b7b0:	d438      	bmi.n	800b824 <_printf_float+0x398>
 800b7b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b7b6:	eba2 0903 	sub.w	r9, r2, r3
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	1ad2      	subs	r2, r2, r3
 800b7be:	4591      	cmp	r9, r2
 800b7c0:	bfa8      	it	ge
 800b7c2:	4691      	movge	r9, r2
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	dc35      	bgt.n	800b836 <_printf_float+0x3aa>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7d2:	f104 0a1a 	add.w	sl, r4, #26
 800b7d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7da:	1a9b      	subs	r3, r3, r2
 800b7dc:	eba3 0309 	sub.w	r3, r3, r9
 800b7e0:	4543      	cmp	r3, r8
 800b7e2:	f77f af79 	ble.w	800b6d8 <_printf_float+0x24c>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4652      	mov	r2, sl
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b8      	blx	r7
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	f43f aeaa 	beq.w	800b54a <_printf_float+0xbe>
 800b7f6:	f108 0801 	add.w	r8, r8, #1
 800b7fa:	e7ec      	b.n	800b7d6 <_printf_float+0x34a>
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	4631      	mov	r1, r6
 800b800:	4642      	mov	r2, r8
 800b802:	4628      	mov	r0, r5
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	d1c0      	bne.n	800b78c <_printf_float+0x300>
 800b80a:	e69e      	b.n	800b54a <_printf_float+0xbe>
 800b80c:	2301      	movs	r3, #1
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	9205      	str	r2, [sp, #20]
 800b814:	47b8      	blx	r7
 800b816:	3001      	adds	r0, #1
 800b818:	f43f ae97 	beq.w	800b54a <_printf_float+0xbe>
 800b81c:	9a05      	ldr	r2, [sp, #20]
 800b81e:	f10b 0b01 	add.w	fp, fp, #1
 800b822:	e7b9      	b.n	800b798 <_printf_float+0x30c>
 800b824:	ee18 3a10 	vmov	r3, s16
 800b828:	4652      	mov	r2, sl
 800b82a:	4631      	mov	r1, r6
 800b82c:	4628      	mov	r0, r5
 800b82e:	47b8      	blx	r7
 800b830:	3001      	adds	r0, #1
 800b832:	d1be      	bne.n	800b7b2 <_printf_float+0x326>
 800b834:	e689      	b.n	800b54a <_printf_float+0xbe>
 800b836:	9a05      	ldr	r2, [sp, #20]
 800b838:	464b      	mov	r3, r9
 800b83a:	4442      	add	r2, r8
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	d1c1      	bne.n	800b7ca <_printf_float+0x33e>
 800b846:	e680      	b.n	800b54a <_printf_float+0xbe>
 800b848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b84a:	2a01      	cmp	r2, #1
 800b84c:	dc01      	bgt.n	800b852 <_printf_float+0x3c6>
 800b84e:	07db      	lsls	r3, r3, #31
 800b850:	d53a      	bpl.n	800b8c8 <_printf_float+0x43c>
 800b852:	2301      	movs	r3, #1
 800b854:	4642      	mov	r2, r8
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	f43f ae74 	beq.w	800b54a <_printf_float+0xbe>
 800b862:	ee18 3a10 	vmov	r3, s16
 800b866:	4652      	mov	r2, sl
 800b868:	4631      	mov	r1, r6
 800b86a:	4628      	mov	r0, r5
 800b86c:	47b8      	blx	r7
 800b86e:	3001      	adds	r0, #1
 800b870:	f43f ae6b 	beq.w	800b54a <_printf_float+0xbe>
 800b874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b878:	2200      	movs	r2, #0
 800b87a:	2300      	movs	r3, #0
 800b87c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b880:	f7f5 f93a 	bl	8000af8 <__aeabi_dcmpeq>
 800b884:	b9d8      	cbnz	r0, 800b8be <_printf_float+0x432>
 800b886:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b88a:	f108 0201 	add.w	r2, r8, #1
 800b88e:	4631      	mov	r1, r6
 800b890:	4628      	mov	r0, r5
 800b892:	47b8      	blx	r7
 800b894:	3001      	adds	r0, #1
 800b896:	d10e      	bne.n	800b8b6 <_printf_float+0x42a>
 800b898:	e657      	b.n	800b54a <_printf_float+0xbe>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4652      	mov	r2, sl
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f43f ae50 	beq.w	800b54a <_printf_float+0xbe>
 800b8aa:	f108 0801 	add.w	r8, r8, #1
 800b8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	4543      	cmp	r3, r8
 800b8b4:	dcf1      	bgt.n	800b89a <_printf_float+0x40e>
 800b8b6:	464b      	mov	r3, r9
 800b8b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8bc:	e6da      	b.n	800b674 <_printf_float+0x1e8>
 800b8be:	f04f 0800 	mov.w	r8, #0
 800b8c2:	f104 0a1a 	add.w	sl, r4, #26
 800b8c6:	e7f2      	b.n	800b8ae <_printf_float+0x422>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	4642      	mov	r2, r8
 800b8cc:	e7df      	b.n	800b88e <_printf_float+0x402>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	464a      	mov	r2, r9
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	47b8      	blx	r7
 800b8d8:	3001      	adds	r0, #1
 800b8da:	f43f ae36 	beq.w	800b54a <_printf_float+0xbe>
 800b8de:	f108 0801 	add.w	r8, r8, #1
 800b8e2:	68e3      	ldr	r3, [r4, #12]
 800b8e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8e6:	1a5b      	subs	r3, r3, r1
 800b8e8:	4543      	cmp	r3, r8
 800b8ea:	dcf0      	bgt.n	800b8ce <_printf_float+0x442>
 800b8ec:	e6f8      	b.n	800b6e0 <_printf_float+0x254>
 800b8ee:	f04f 0800 	mov.w	r8, #0
 800b8f2:	f104 0919 	add.w	r9, r4, #25
 800b8f6:	e7f4      	b.n	800b8e2 <_printf_float+0x456>

0800b8f8 <_printf_common>:
 800b8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8fc:	4616      	mov	r6, r2
 800b8fe:	4699      	mov	r9, r3
 800b900:	688a      	ldr	r2, [r1, #8]
 800b902:	690b      	ldr	r3, [r1, #16]
 800b904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b908:	4293      	cmp	r3, r2
 800b90a:	bfb8      	it	lt
 800b90c:	4613      	movlt	r3, r2
 800b90e:	6033      	str	r3, [r6, #0]
 800b910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b914:	4607      	mov	r7, r0
 800b916:	460c      	mov	r4, r1
 800b918:	b10a      	cbz	r2, 800b91e <_printf_common+0x26>
 800b91a:	3301      	adds	r3, #1
 800b91c:	6033      	str	r3, [r6, #0]
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	0699      	lsls	r1, r3, #26
 800b922:	bf42      	ittt	mi
 800b924:	6833      	ldrmi	r3, [r6, #0]
 800b926:	3302      	addmi	r3, #2
 800b928:	6033      	strmi	r3, [r6, #0]
 800b92a:	6825      	ldr	r5, [r4, #0]
 800b92c:	f015 0506 	ands.w	r5, r5, #6
 800b930:	d106      	bne.n	800b940 <_printf_common+0x48>
 800b932:	f104 0a19 	add.w	sl, r4, #25
 800b936:	68e3      	ldr	r3, [r4, #12]
 800b938:	6832      	ldr	r2, [r6, #0]
 800b93a:	1a9b      	subs	r3, r3, r2
 800b93c:	42ab      	cmp	r3, r5
 800b93e:	dc26      	bgt.n	800b98e <_printf_common+0x96>
 800b940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b944:	1e13      	subs	r3, r2, #0
 800b946:	6822      	ldr	r2, [r4, #0]
 800b948:	bf18      	it	ne
 800b94a:	2301      	movne	r3, #1
 800b94c:	0692      	lsls	r2, r2, #26
 800b94e:	d42b      	bmi.n	800b9a8 <_printf_common+0xb0>
 800b950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b954:	4649      	mov	r1, r9
 800b956:	4638      	mov	r0, r7
 800b958:	47c0      	blx	r8
 800b95a:	3001      	adds	r0, #1
 800b95c:	d01e      	beq.n	800b99c <_printf_common+0xa4>
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	6922      	ldr	r2, [r4, #16]
 800b962:	f003 0306 	and.w	r3, r3, #6
 800b966:	2b04      	cmp	r3, #4
 800b968:	bf02      	ittt	eq
 800b96a:	68e5      	ldreq	r5, [r4, #12]
 800b96c:	6833      	ldreq	r3, [r6, #0]
 800b96e:	1aed      	subeq	r5, r5, r3
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	bf0c      	ite	eq
 800b974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b978:	2500      	movne	r5, #0
 800b97a:	4293      	cmp	r3, r2
 800b97c:	bfc4      	itt	gt
 800b97e:	1a9b      	subgt	r3, r3, r2
 800b980:	18ed      	addgt	r5, r5, r3
 800b982:	2600      	movs	r6, #0
 800b984:	341a      	adds	r4, #26
 800b986:	42b5      	cmp	r5, r6
 800b988:	d11a      	bne.n	800b9c0 <_printf_common+0xc8>
 800b98a:	2000      	movs	r0, #0
 800b98c:	e008      	b.n	800b9a0 <_printf_common+0xa8>
 800b98e:	2301      	movs	r3, #1
 800b990:	4652      	mov	r2, sl
 800b992:	4649      	mov	r1, r9
 800b994:	4638      	mov	r0, r7
 800b996:	47c0      	blx	r8
 800b998:	3001      	adds	r0, #1
 800b99a:	d103      	bne.n	800b9a4 <_printf_common+0xac>
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	e7c6      	b.n	800b936 <_printf_common+0x3e>
 800b9a8:	18e1      	adds	r1, r4, r3
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	2030      	movs	r0, #48	; 0x30
 800b9ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9b2:	4422      	add	r2, r4
 800b9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9bc:	3302      	adds	r3, #2
 800b9be:	e7c7      	b.n	800b950 <_printf_common+0x58>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	47c0      	blx	r8
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d0e6      	beq.n	800b99c <_printf_common+0xa4>
 800b9ce:	3601      	adds	r6, #1
 800b9d0:	e7d9      	b.n	800b986 <_printf_common+0x8e>
	...

0800b9d4 <_printf_i>:
 800b9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d8:	7e0f      	ldrb	r7, [r1, #24]
 800b9da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9dc:	2f78      	cmp	r7, #120	; 0x78
 800b9de:	4691      	mov	r9, r2
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9ea:	d807      	bhi.n	800b9fc <_printf_i+0x28>
 800b9ec:	2f62      	cmp	r7, #98	; 0x62
 800b9ee:	d80a      	bhi.n	800ba06 <_printf_i+0x32>
 800b9f0:	2f00      	cmp	r7, #0
 800b9f2:	f000 80d4 	beq.w	800bb9e <_printf_i+0x1ca>
 800b9f6:	2f58      	cmp	r7, #88	; 0x58
 800b9f8:	f000 80c0 	beq.w	800bb7c <_printf_i+0x1a8>
 800b9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba04:	e03a      	b.n	800ba7c <_printf_i+0xa8>
 800ba06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba0a:	2b15      	cmp	r3, #21
 800ba0c:	d8f6      	bhi.n	800b9fc <_printf_i+0x28>
 800ba0e:	a101      	add	r1, pc, #4	; (adr r1, 800ba14 <_printf_i+0x40>)
 800ba10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba14:	0800ba6d 	.word	0x0800ba6d
 800ba18:	0800ba81 	.word	0x0800ba81
 800ba1c:	0800b9fd 	.word	0x0800b9fd
 800ba20:	0800b9fd 	.word	0x0800b9fd
 800ba24:	0800b9fd 	.word	0x0800b9fd
 800ba28:	0800b9fd 	.word	0x0800b9fd
 800ba2c:	0800ba81 	.word	0x0800ba81
 800ba30:	0800b9fd 	.word	0x0800b9fd
 800ba34:	0800b9fd 	.word	0x0800b9fd
 800ba38:	0800b9fd 	.word	0x0800b9fd
 800ba3c:	0800b9fd 	.word	0x0800b9fd
 800ba40:	0800bb85 	.word	0x0800bb85
 800ba44:	0800baad 	.word	0x0800baad
 800ba48:	0800bb3f 	.word	0x0800bb3f
 800ba4c:	0800b9fd 	.word	0x0800b9fd
 800ba50:	0800b9fd 	.word	0x0800b9fd
 800ba54:	0800bba7 	.word	0x0800bba7
 800ba58:	0800b9fd 	.word	0x0800b9fd
 800ba5c:	0800baad 	.word	0x0800baad
 800ba60:	0800b9fd 	.word	0x0800b9fd
 800ba64:	0800b9fd 	.word	0x0800b9fd
 800ba68:	0800bb47 	.word	0x0800bb47
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	1d1a      	adds	r2, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	602a      	str	r2, [r5, #0]
 800ba74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e09f      	b.n	800bbc0 <_printf_i+0x1ec>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	682b      	ldr	r3, [r5, #0]
 800ba84:	0607      	lsls	r7, r0, #24
 800ba86:	f103 0104 	add.w	r1, r3, #4
 800ba8a:	6029      	str	r1, [r5, #0]
 800ba8c:	d501      	bpl.n	800ba92 <_printf_i+0xbe>
 800ba8e:	681e      	ldr	r6, [r3, #0]
 800ba90:	e003      	b.n	800ba9a <_printf_i+0xc6>
 800ba92:	0646      	lsls	r6, r0, #25
 800ba94:	d5fb      	bpl.n	800ba8e <_printf_i+0xba>
 800ba96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba9a:	2e00      	cmp	r6, #0
 800ba9c:	da03      	bge.n	800baa6 <_printf_i+0xd2>
 800ba9e:	232d      	movs	r3, #45	; 0x2d
 800baa0:	4276      	negs	r6, r6
 800baa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa6:	485a      	ldr	r0, [pc, #360]	; (800bc10 <_printf_i+0x23c>)
 800baa8:	230a      	movs	r3, #10
 800baaa:	e012      	b.n	800bad2 <_printf_i+0xfe>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	6820      	ldr	r0, [r4, #0]
 800bab0:	1d19      	adds	r1, r3, #4
 800bab2:	6029      	str	r1, [r5, #0]
 800bab4:	0605      	lsls	r5, r0, #24
 800bab6:	d501      	bpl.n	800babc <_printf_i+0xe8>
 800bab8:	681e      	ldr	r6, [r3, #0]
 800baba:	e002      	b.n	800bac2 <_printf_i+0xee>
 800babc:	0641      	lsls	r1, r0, #25
 800babe:	d5fb      	bpl.n	800bab8 <_printf_i+0xe4>
 800bac0:	881e      	ldrh	r6, [r3, #0]
 800bac2:	4853      	ldr	r0, [pc, #332]	; (800bc10 <_printf_i+0x23c>)
 800bac4:	2f6f      	cmp	r7, #111	; 0x6f
 800bac6:	bf0c      	ite	eq
 800bac8:	2308      	moveq	r3, #8
 800baca:	230a      	movne	r3, #10
 800bacc:	2100      	movs	r1, #0
 800bace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bad2:	6865      	ldr	r5, [r4, #4]
 800bad4:	60a5      	str	r5, [r4, #8]
 800bad6:	2d00      	cmp	r5, #0
 800bad8:	bfa2      	ittt	ge
 800bada:	6821      	ldrge	r1, [r4, #0]
 800badc:	f021 0104 	bicge.w	r1, r1, #4
 800bae0:	6021      	strge	r1, [r4, #0]
 800bae2:	b90e      	cbnz	r6, 800bae8 <_printf_i+0x114>
 800bae4:	2d00      	cmp	r5, #0
 800bae6:	d04b      	beq.n	800bb80 <_printf_i+0x1ac>
 800bae8:	4615      	mov	r5, r2
 800baea:	fbb6 f1f3 	udiv	r1, r6, r3
 800baee:	fb03 6711 	mls	r7, r3, r1, r6
 800baf2:	5dc7      	ldrb	r7, [r0, r7]
 800baf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800baf8:	4637      	mov	r7, r6
 800bafa:	42bb      	cmp	r3, r7
 800bafc:	460e      	mov	r6, r1
 800bafe:	d9f4      	bls.n	800baea <_printf_i+0x116>
 800bb00:	2b08      	cmp	r3, #8
 800bb02:	d10b      	bne.n	800bb1c <_printf_i+0x148>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	07de      	lsls	r6, r3, #31
 800bb08:	d508      	bpl.n	800bb1c <_printf_i+0x148>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	4299      	cmp	r1, r3
 800bb10:	bfde      	ittt	le
 800bb12:	2330      	movle	r3, #48	; 0x30
 800bb14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb1c:	1b52      	subs	r2, r2, r5
 800bb1e:	6122      	str	r2, [r4, #16]
 800bb20:	f8cd a000 	str.w	sl, [sp]
 800bb24:	464b      	mov	r3, r9
 800bb26:	aa03      	add	r2, sp, #12
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	f7ff fee4 	bl	800b8f8 <_printf_common>
 800bb30:	3001      	adds	r0, #1
 800bb32:	d14a      	bne.n	800bbca <_printf_i+0x1f6>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb38:	b004      	add	sp, #16
 800bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	f043 0320 	orr.w	r3, r3, #32
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	4833      	ldr	r0, [pc, #204]	; (800bc14 <_printf_i+0x240>)
 800bb48:	2778      	movs	r7, #120	; 0x78
 800bb4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	6829      	ldr	r1, [r5, #0]
 800bb52:	061f      	lsls	r7, r3, #24
 800bb54:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb58:	d402      	bmi.n	800bb60 <_printf_i+0x18c>
 800bb5a:	065f      	lsls	r7, r3, #25
 800bb5c:	bf48      	it	mi
 800bb5e:	b2b6      	uxthmi	r6, r6
 800bb60:	07df      	lsls	r7, r3, #31
 800bb62:	bf48      	it	mi
 800bb64:	f043 0320 	orrmi.w	r3, r3, #32
 800bb68:	6029      	str	r1, [r5, #0]
 800bb6a:	bf48      	it	mi
 800bb6c:	6023      	strmi	r3, [r4, #0]
 800bb6e:	b91e      	cbnz	r6, 800bb78 <_printf_i+0x1a4>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	f023 0320 	bic.w	r3, r3, #32
 800bb76:	6023      	str	r3, [r4, #0]
 800bb78:	2310      	movs	r3, #16
 800bb7a:	e7a7      	b.n	800bacc <_printf_i+0xf8>
 800bb7c:	4824      	ldr	r0, [pc, #144]	; (800bc10 <_printf_i+0x23c>)
 800bb7e:	e7e4      	b.n	800bb4a <_printf_i+0x176>
 800bb80:	4615      	mov	r5, r2
 800bb82:	e7bd      	b.n	800bb00 <_printf_i+0x12c>
 800bb84:	682b      	ldr	r3, [r5, #0]
 800bb86:	6826      	ldr	r6, [r4, #0]
 800bb88:	6961      	ldr	r1, [r4, #20]
 800bb8a:	1d18      	adds	r0, r3, #4
 800bb8c:	6028      	str	r0, [r5, #0]
 800bb8e:	0635      	lsls	r5, r6, #24
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	d501      	bpl.n	800bb98 <_printf_i+0x1c4>
 800bb94:	6019      	str	r1, [r3, #0]
 800bb96:	e002      	b.n	800bb9e <_printf_i+0x1ca>
 800bb98:	0670      	lsls	r0, r6, #25
 800bb9a:	d5fb      	bpl.n	800bb94 <_printf_i+0x1c0>
 800bb9c:	8019      	strh	r1, [r3, #0]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	6123      	str	r3, [r4, #16]
 800bba2:	4615      	mov	r5, r2
 800bba4:	e7bc      	b.n	800bb20 <_printf_i+0x14c>
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	1d1a      	adds	r2, r3, #4
 800bbaa:	602a      	str	r2, [r5, #0]
 800bbac:	681d      	ldr	r5, [r3, #0]
 800bbae:	6862      	ldr	r2, [r4, #4]
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7f4 fb24 	bl	8000200 <memchr>
 800bbb8:	b108      	cbz	r0, 800bbbe <_printf_i+0x1ea>
 800bbba:	1b40      	subs	r0, r0, r5
 800bbbc:	6060      	str	r0, [r4, #4]
 800bbbe:	6863      	ldr	r3, [r4, #4]
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc8:	e7aa      	b.n	800bb20 <_printf_i+0x14c>
 800bbca:	6923      	ldr	r3, [r4, #16]
 800bbcc:	462a      	mov	r2, r5
 800bbce:	4649      	mov	r1, r9
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	47d0      	blx	sl
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d0ad      	beq.n	800bb34 <_printf_i+0x160>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	079b      	lsls	r3, r3, #30
 800bbdc:	d413      	bmi.n	800bc06 <_printf_i+0x232>
 800bbde:	68e0      	ldr	r0, [r4, #12]
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	4298      	cmp	r0, r3
 800bbe4:	bfb8      	it	lt
 800bbe6:	4618      	movlt	r0, r3
 800bbe8:	e7a6      	b.n	800bb38 <_printf_i+0x164>
 800bbea:	2301      	movs	r3, #1
 800bbec:	4632      	mov	r2, r6
 800bbee:	4649      	mov	r1, r9
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	47d0      	blx	sl
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	d09d      	beq.n	800bb34 <_printf_i+0x160>
 800bbf8:	3501      	adds	r5, #1
 800bbfa:	68e3      	ldr	r3, [r4, #12]
 800bbfc:	9903      	ldr	r1, [sp, #12]
 800bbfe:	1a5b      	subs	r3, r3, r1
 800bc00:	42ab      	cmp	r3, r5
 800bc02:	dcf2      	bgt.n	800bbea <_printf_i+0x216>
 800bc04:	e7eb      	b.n	800bbde <_printf_i+0x20a>
 800bc06:	2500      	movs	r5, #0
 800bc08:	f104 0619 	add.w	r6, r4, #25
 800bc0c:	e7f5      	b.n	800bbfa <_printf_i+0x226>
 800bc0e:	bf00      	nop
 800bc10:	0802947d 	.word	0x0802947d
 800bc14:	0802948e 	.word	0x0802948e

0800bc18 <_scanf_float>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	b087      	sub	sp, #28
 800bc1e:	4617      	mov	r7, r2
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	688b      	ldr	r3, [r1, #8]
 800bc24:	1e5a      	subs	r2, r3, #1
 800bc26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bc2a:	bf83      	ittte	hi
 800bc2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bc30:	195b      	addhi	r3, r3, r5
 800bc32:	9302      	strhi	r3, [sp, #8]
 800bc34:	2300      	movls	r3, #0
 800bc36:	bf86      	itte	hi
 800bc38:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bc3c:	608b      	strhi	r3, [r1, #8]
 800bc3e:	9302      	strls	r3, [sp, #8]
 800bc40:	680b      	ldr	r3, [r1, #0]
 800bc42:	468b      	mov	fp, r1
 800bc44:	2500      	movs	r5, #0
 800bc46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bc4a:	f84b 3b1c 	str.w	r3, [fp], #28
 800bc4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc52:	4680      	mov	r8, r0
 800bc54:	460c      	mov	r4, r1
 800bc56:	465e      	mov	r6, fp
 800bc58:	46aa      	mov	sl, r5
 800bc5a:	46a9      	mov	r9, r5
 800bc5c:	9501      	str	r5, [sp, #4]
 800bc5e:	68a2      	ldr	r2, [r4, #8]
 800bc60:	b152      	cbz	r2, 800bc78 <_scanf_float+0x60>
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b4e      	cmp	r3, #78	; 0x4e
 800bc68:	d864      	bhi.n	800bd34 <_scanf_float+0x11c>
 800bc6a:	2b40      	cmp	r3, #64	; 0x40
 800bc6c:	d83c      	bhi.n	800bce8 <_scanf_float+0xd0>
 800bc6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bc72:	b2c8      	uxtb	r0, r1
 800bc74:	280e      	cmp	r0, #14
 800bc76:	d93a      	bls.n	800bcee <_scanf_float+0xd6>
 800bc78:	f1b9 0f00 	cmp.w	r9, #0
 800bc7c:	d003      	beq.n	800bc86 <_scanf_float+0x6e>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc8a:	f1ba 0f01 	cmp.w	sl, #1
 800bc8e:	f200 8113 	bhi.w	800beb8 <_scanf_float+0x2a0>
 800bc92:	455e      	cmp	r6, fp
 800bc94:	f200 8105 	bhi.w	800bea2 <_scanf_float+0x28a>
 800bc98:	2501      	movs	r5, #1
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	b007      	add	sp, #28
 800bc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bca6:	2a0d      	cmp	r2, #13
 800bca8:	d8e6      	bhi.n	800bc78 <_scanf_float+0x60>
 800bcaa:	a101      	add	r1, pc, #4	; (adr r1, 800bcb0 <_scanf_float+0x98>)
 800bcac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bcb0:	0800bdef 	.word	0x0800bdef
 800bcb4:	0800bc79 	.word	0x0800bc79
 800bcb8:	0800bc79 	.word	0x0800bc79
 800bcbc:	0800bc79 	.word	0x0800bc79
 800bcc0:	0800be4f 	.word	0x0800be4f
 800bcc4:	0800be27 	.word	0x0800be27
 800bcc8:	0800bc79 	.word	0x0800bc79
 800bccc:	0800bc79 	.word	0x0800bc79
 800bcd0:	0800bdfd 	.word	0x0800bdfd
 800bcd4:	0800bc79 	.word	0x0800bc79
 800bcd8:	0800bc79 	.word	0x0800bc79
 800bcdc:	0800bc79 	.word	0x0800bc79
 800bce0:	0800bc79 	.word	0x0800bc79
 800bce4:	0800bdb5 	.word	0x0800bdb5
 800bce8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bcec:	e7db      	b.n	800bca6 <_scanf_float+0x8e>
 800bcee:	290e      	cmp	r1, #14
 800bcf0:	d8c2      	bhi.n	800bc78 <_scanf_float+0x60>
 800bcf2:	a001      	add	r0, pc, #4	; (adr r0, 800bcf8 <_scanf_float+0xe0>)
 800bcf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bcf8:	0800bda7 	.word	0x0800bda7
 800bcfc:	0800bc79 	.word	0x0800bc79
 800bd00:	0800bda7 	.word	0x0800bda7
 800bd04:	0800be3b 	.word	0x0800be3b
 800bd08:	0800bc79 	.word	0x0800bc79
 800bd0c:	0800bd55 	.word	0x0800bd55
 800bd10:	0800bd91 	.word	0x0800bd91
 800bd14:	0800bd91 	.word	0x0800bd91
 800bd18:	0800bd91 	.word	0x0800bd91
 800bd1c:	0800bd91 	.word	0x0800bd91
 800bd20:	0800bd91 	.word	0x0800bd91
 800bd24:	0800bd91 	.word	0x0800bd91
 800bd28:	0800bd91 	.word	0x0800bd91
 800bd2c:	0800bd91 	.word	0x0800bd91
 800bd30:	0800bd91 	.word	0x0800bd91
 800bd34:	2b6e      	cmp	r3, #110	; 0x6e
 800bd36:	d809      	bhi.n	800bd4c <_scanf_float+0x134>
 800bd38:	2b60      	cmp	r3, #96	; 0x60
 800bd3a:	d8b2      	bhi.n	800bca2 <_scanf_float+0x8a>
 800bd3c:	2b54      	cmp	r3, #84	; 0x54
 800bd3e:	d077      	beq.n	800be30 <_scanf_float+0x218>
 800bd40:	2b59      	cmp	r3, #89	; 0x59
 800bd42:	d199      	bne.n	800bc78 <_scanf_float+0x60>
 800bd44:	2d07      	cmp	r5, #7
 800bd46:	d197      	bne.n	800bc78 <_scanf_float+0x60>
 800bd48:	2508      	movs	r5, #8
 800bd4a:	e029      	b.n	800bda0 <_scanf_float+0x188>
 800bd4c:	2b74      	cmp	r3, #116	; 0x74
 800bd4e:	d06f      	beq.n	800be30 <_scanf_float+0x218>
 800bd50:	2b79      	cmp	r3, #121	; 0x79
 800bd52:	e7f6      	b.n	800bd42 <_scanf_float+0x12a>
 800bd54:	6821      	ldr	r1, [r4, #0]
 800bd56:	05c8      	lsls	r0, r1, #23
 800bd58:	d51a      	bpl.n	800bd90 <_scanf_float+0x178>
 800bd5a:	9b02      	ldr	r3, [sp, #8]
 800bd5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bd60:	6021      	str	r1, [r4, #0]
 800bd62:	f109 0901 	add.w	r9, r9, #1
 800bd66:	b11b      	cbz	r3, 800bd70 <_scanf_float+0x158>
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	3201      	adds	r2, #1
 800bd6c:	9302      	str	r3, [sp, #8]
 800bd6e:	60a2      	str	r2, [r4, #8]
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	6923      	ldr	r3, [r4, #16]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	607b      	str	r3, [r7, #4]
 800bd84:	f340 8084 	ble.w	800be90 <_scanf_float+0x278>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	603b      	str	r3, [r7, #0]
 800bd8e:	e766      	b.n	800bc5e <_scanf_float+0x46>
 800bd90:	eb1a 0f05 	cmn.w	sl, r5
 800bd94:	f47f af70 	bne.w	800bc78 <_scanf_float+0x60>
 800bd98:	6822      	ldr	r2, [r4, #0]
 800bd9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	f806 3b01 	strb.w	r3, [r6], #1
 800bda4:	e7e4      	b.n	800bd70 <_scanf_float+0x158>
 800bda6:	6822      	ldr	r2, [r4, #0]
 800bda8:	0610      	lsls	r0, r2, #24
 800bdaa:	f57f af65 	bpl.w	800bc78 <_scanf_float+0x60>
 800bdae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdb2:	e7f4      	b.n	800bd9e <_scanf_float+0x186>
 800bdb4:	f1ba 0f00 	cmp.w	sl, #0
 800bdb8:	d10e      	bne.n	800bdd8 <_scanf_float+0x1c0>
 800bdba:	f1b9 0f00 	cmp.w	r9, #0
 800bdbe:	d10e      	bne.n	800bdde <_scanf_float+0x1c6>
 800bdc0:	6822      	ldr	r2, [r4, #0]
 800bdc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bdc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bdca:	d108      	bne.n	800bdde <_scanf_float+0x1c6>
 800bdcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bdd0:	6022      	str	r2, [r4, #0]
 800bdd2:	f04f 0a01 	mov.w	sl, #1
 800bdd6:	e7e3      	b.n	800bda0 <_scanf_float+0x188>
 800bdd8:	f1ba 0f02 	cmp.w	sl, #2
 800bddc:	d055      	beq.n	800be8a <_scanf_float+0x272>
 800bdde:	2d01      	cmp	r5, #1
 800bde0:	d002      	beq.n	800bde8 <_scanf_float+0x1d0>
 800bde2:	2d04      	cmp	r5, #4
 800bde4:	f47f af48 	bne.w	800bc78 <_scanf_float+0x60>
 800bde8:	3501      	adds	r5, #1
 800bdea:	b2ed      	uxtb	r5, r5
 800bdec:	e7d8      	b.n	800bda0 <_scanf_float+0x188>
 800bdee:	f1ba 0f01 	cmp.w	sl, #1
 800bdf2:	f47f af41 	bne.w	800bc78 <_scanf_float+0x60>
 800bdf6:	f04f 0a02 	mov.w	sl, #2
 800bdfa:	e7d1      	b.n	800bda0 <_scanf_float+0x188>
 800bdfc:	b97d      	cbnz	r5, 800be1e <_scanf_float+0x206>
 800bdfe:	f1b9 0f00 	cmp.w	r9, #0
 800be02:	f47f af3c 	bne.w	800bc7e <_scanf_float+0x66>
 800be06:	6822      	ldr	r2, [r4, #0]
 800be08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800be0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800be10:	f47f af39 	bne.w	800bc86 <_scanf_float+0x6e>
 800be14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800be18:	6022      	str	r2, [r4, #0]
 800be1a:	2501      	movs	r5, #1
 800be1c:	e7c0      	b.n	800bda0 <_scanf_float+0x188>
 800be1e:	2d03      	cmp	r5, #3
 800be20:	d0e2      	beq.n	800bde8 <_scanf_float+0x1d0>
 800be22:	2d05      	cmp	r5, #5
 800be24:	e7de      	b.n	800bde4 <_scanf_float+0x1cc>
 800be26:	2d02      	cmp	r5, #2
 800be28:	f47f af26 	bne.w	800bc78 <_scanf_float+0x60>
 800be2c:	2503      	movs	r5, #3
 800be2e:	e7b7      	b.n	800bda0 <_scanf_float+0x188>
 800be30:	2d06      	cmp	r5, #6
 800be32:	f47f af21 	bne.w	800bc78 <_scanf_float+0x60>
 800be36:	2507      	movs	r5, #7
 800be38:	e7b2      	b.n	800bda0 <_scanf_float+0x188>
 800be3a:	6822      	ldr	r2, [r4, #0]
 800be3c:	0591      	lsls	r1, r2, #22
 800be3e:	f57f af1b 	bpl.w	800bc78 <_scanf_float+0x60>
 800be42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800be46:	6022      	str	r2, [r4, #0]
 800be48:	f8cd 9004 	str.w	r9, [sp, #4]
 800be4c:	e7a8      	b.n	800bda0 <_scanf_float+0x188>
 800be4e:	6822      	ldr	r2, [r4, #0]
 800be50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800be54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800be58:	d006      	beq.n	800be68 <_scanf_float+0x250>
 800be5a:	0550      	lsls	r0, r2, #21
 800be5c:	f57f af0c 	bpl.w	800bc78 <_scanf_float+0x60>
 800be60:	f1b9 0f00 	cmp.w	r9, #0
 800be64:	f43f af0f 	beq.w	800bc86 <_scanf_float+0x6e>
 800be68:	0591      	lsls	r1, r2, #22
 800be6a:	bf58      	it	pl
 800be6c:	9901      	ldrpl	r1, [sp, #4]
 800be6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800be72:	bf58      	it	pl
 800be74:	eba9 0101 	subpl.w	r1, r9, r1
 800be78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800be7c:	bf58      	it	pl
 800be7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800be82:	6022      	str	r2, [r4, #0]
 800be84:	f04f 0900 	mov.w	r9, #0
 800be88:	e78a      	b.n	800bda0 <_scanf_float+0x188>
 800be8a:	f04f 0a03 	mov.w	sl, #3
 800be8e:	e787      	b.n	800bda0 <_scanf_float+0x188>
 800be90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be94:	4639      	mov	r1, r7
 800be96:	4640      	mov	r0, r8
 800be98:	4798      	blx	r3
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f43f aedf 	beq.w	800bc5e <_scanf_float+0x46>
 800bea0:	e6ea      	b.n	800bc78 <_scanf_float+0x60>
 800bea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800beaa:	463a      	mov	r2, r7
 800beac:	4640      	mov	r0, r8
 800beae:	4798      	blx	r3
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	6123      	str	r3, [r4, #16]
 800beb6:	e6ec      	b.n	800bc92 <_scanf_float+0x7a>
 800beb8:	1e6b      	subs	r3, r5, #1
 800beba:	2b06      	cmp	r3, #6
 800bebc:	d825      	bhi.n	800bf0a <_scanf_float+0x2f2>
 800bebe:	2d02      	cmp	r5, #2
 800bec0:	d836      	bhi.n	800bf30 <_scanf_float+0x318>
 800bec2:	455e      	cmp	r6, fp
 800bec4:	f67f aee8 	bls.w	800bc98 <_scanf_float+0x80>
 800bec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800becc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bed0:	463a      	mov	r2, r7
 800bed2:	4640      	mov	r0, r8
 800bed4:	4798      	blx	r3
 800bed6:	6923      	ldr	r3, [r4, #16]
 800bed8:	3b01      	subs	r3, #1
 800beda:	6123      	str	r3, [r4, #16]
 800bedc:	e7f1      	b.n	800bec2 <_scanf_float+0x2aa>
 800bede:	9802      	ldr	r0, [sp, #8]
 800bee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bee4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bee8:	9002      	str	r0, [sp, #8]
 800beea:	463a      	mov	r2, r7
 800beec:	4640      	mov	r0, r8
 800beee:	4798      	blx	r3
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800befa:	fa5f fa8a 	uxtb.w	sl, sl
 800befe:	f1ba 0f02 	cmp.w	sl, #2
 800bf02:	d1ec      	bne.n	800bede <_scanf_float+0x2c6>
 800bf04:	3d03      	subs	r5, #3
 800bf06:	b2ed      	uxtb	r5, r5
 800bf08:	1b76      	subs	r6, r6, r5
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	05da      	lsls	r2, r3, #23
 800bf0e:	d52f      	bpl.n	800bf70 <_scanf_float+0x358>
 800bf10:	055b      	lsls	r3, r3, #21
 800bf12:	d510      	bpl.n	800bf36 <_scanf_float+0x31e>
 800bf14:	455e      	cmp	r6, fp
 800bf16:	f67f aebf 	bls.w	800bc98 <_scanf_float+0x80>
 800bf1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf22:	463a      	mov	r2, r7
 800bf24:	4640      	mov	r0, r8
 800bf26:	4798      	blx	r3
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	e7f1      	b.n	800bf14 <_scanf_float+0x2fc>
 800bf30:	46aa      	mov	sl, r5
 800bf32:	9602      	str	r6, [sp, #8]
 800bf34:	e7df      	b.n	800bef6 <_scanf_float+0x2de>
 800bf36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	2965      	cmp	r1, #101	; 0x65
 800bf3e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bf42:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800bf46:	6123      	str	r3, [r4, #16]
 800bf48:	d00c      	beq.n	800bf64 <_scanf_float+0x34c>
 800bf4a:	2945      	cmp	r1, #69	; 0x45
 800bf4c:	d00a      	beq.n	800bf64 <_scanf_float+0x34c>
 800bf4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf52:	463a      	mov	r2, r7
 800bf54:	4640      	mov	r0, r8
 800bf56:	4798      	blx	r3
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	1eb5      	subs	r5, r6, #2
 800bf62:	6123      	str	r3, [r4, #16]
 800bf64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf68:	463a      	mov	r2, r7
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	4798      	blx	r3
 800bf6e:	462e      	mov	r6, r5
 800bf70:	6825      	ldr	r5, [r4, #0]
 800bf72:	f015 0510 	ands.w	r5, r5, #16
 800bf76:	d158      	bne.n	800c02a <_scanf_float+0x412>
 800bf78:	7035      	strb	r5, [r6, #0]
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf84:	d11c      	bne.n	800bfc0 <_scanf_float+0x3a8>
 800bf86:	9b01      	ldr	r3, [sp, #4]
 800bf88:	454b      	cmp	r3, r9
 800bf8a:	eba3 0209 	sub.w	r2, r3, r9
 800bf8e:	d124      	bne.n	800bfda <_scanf_float+0x3c2>
 800bf90:	2200      	movs	r2, #0
 800bf92:	4659      	mov	r1, fp
 800bf94:	4640      	mov	r0, r8
 800bf96:	f002 fe67 	bl	800ec68 <_strtod_r>
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	6821      	ldr	r1, [r4, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f011 0f02 	tst.w	r1, #2
 800bfa4:	ec57 6b10 	vmov	r6, r7, d0
 800bfa8:	f103 0204 	add.w	r2, r3, #4
 800bfac:	d020      	beq.n	800bff0 <_scanf_float+0x3d8>
 800bfae:	9903      	ldr	r1, [sp, #12]
 800bfb0:	600a      	str	r2, [r1, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	e9c3 6700 	strd	r6, r7, [r3]
 800bfb8:	68e3      	ldr	r3, [r4, #12]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	60e3      	str	r3, [r4, #12]
 800bfbe:	e66c      	b.n	800bc9a <_scanf_float+0x82>
 800bfc0:	9b04      	ldr	r3, [sp, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0e4      	beq.n	800bf90 <_scanf_float+0x378>
 800bfc6:	9905      	ldr	r1, [sp, #20]
 800bfc8:	230a      	movs	r3, #10
 800bfca:	462a      	mov	r2, r5
 800bfcc:	3101      	adds	r1, #1
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f002 fed2 	bl	800ed78 <_strtol_r>
 800bfd4:	9b04      	ldr	r3, [sp, #16]
 800bfd6:	9e05      	ldr	r6, [sp, #20]
 800bfd8:	1ac2      	subs	r2, r0, r3
 800bfda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bfde:	429e      	cmp	r6, r3
 800bfe0:	bf28      	it	cs
 800bfe2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bfe6:	4912      	ldr	r1, [pc, #72]	; (800c030 <_scanf_float+0x418>)
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f000 fa1f 	bl	800c42c <siprintf>
 800bfee:	e7cf      	b.n	800bf90 <_scanf_float+0x378>
 800bff0:	f011 0f04 	tst.w	r1, #4
 800bff4:	9903      	ldr	r1, [sp, #12]
 800bff6:	600a      	str	r2, [r1, #0]
 800bff8:	d1db      	bne.n	800bfb2 <_scanf_float+0x39a>
 800bffa:	f8d3 8000 	ldr.w	r8, [r3]
 800bffe:	ee10 2a10 	vmov	r2, s0
 800c002:	ee10 0a10 	vmov	r0, s0
 800c006:	463b      	mov	r3, r7
 800c008:	4639      	mov	r1, r7
 800c00a:	f7f4 fda7 	bl	8000b5c <__aeabi_dcmpun>
 800c00e:	b128      	cbz	r0, 800c01c <_scanf_float+0x404>
 800c010:	4808      	ldr	r0, [pc, #32]	; (800c034 <_scanf_float+0x41c>)
 800c012:	f000 fbed 	bl	800c7f0 <nanf>
 800c016:	ed88 0a00 	vstr	s0, [r8]
 800c01a:	e7cd      	b.n	800bfb8 <_scanf_float+0x3a0>
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	f7f4 fdfa 	bl	8000c18 <__aeabi_d2f>
 800c024:	f8c8 0000 	str.w	r0, [r8]
 800c028:	e7c6      	b.n	800bfb8 <_scanf_float+0x3a0>
 800c02a:	2500      	movs	r5, #0
 800c02c:	e635      	b.n	800bc9a <_scanf_float+0x82>
 800c02e:	bf00      	nop
 800c030:	0802949f 	.word	0x0802949f
 800c034:	08029850 	.word	0x08029850

0800c038 <__sflush_r>:
 800c038:	898a      	ldrh	r2, [r1, #12]
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	4605      	mov	r5, r0
 800c040:	0710      	lsls	r0, r2, #28
 800c042:	460c      	mov	r4, r1
 800c044:	d458      	bmi.n	800c0f8 <__sflush_r+0xc0>
 800c046:	684b      	ldr	r3, [r1, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dc05      	bgt.n	800c058 <__sflush_r+0x20>
 800c04c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dc02      	bgt.n	800c058 <__sflush_r+0x20>
 800c052:	2000      	movs	r0, #0
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c05a:	2e00      	cmp	r6, #0
 800c05c:	d0f9      	beq.n	800c052 <__sflush_r+0x1a>
 800c05e:	2300      	movs	r3, #0
 800c060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c064:	682f      	ldr	r7, [r5, #0]
 800c066:	6a21      	ldr	r1, [r4, #32]
 800c068:	602b      	str	r3, [r5, #0]
 800c06a:	d032      	beq.n	800c0d2 <__sflush_r+0x9a>
 800c06c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	075a      	lsls	r2, r3, #29
 800c072:	d505      	bpl.n	800c080 <__sflush_r+0x48>
 800c074:	6863      	ldr	r3, [r4, #4]
 800c076:	1ac0      	subs	r0, r0, r3
 800c078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c07a:	b10b      	cbz	r3, 800c080 <__sflush_r+0x48>
 800c07c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c07e:	1ac0      	subs	r0, r0, r3
 800c080:	2300      	movs	r3, #0
 800c082:	4602      	mov	r2, r0
 800c084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c086:	6a21      	ldr	r1, [r4, #32]
 800c088:	4628      	mov	r0, r5
 800c08a:	47b0      	blx	r6
 800c08c:	1c43      	adds	r3, r0, #1
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	d106      	bne.n	800c0a0 <__sflush_r+0x68>
 800c092:	6829      	ldr	r1, [r5, #0]
 800c094:	291d      	cmp	r1, #29
 800c096:	d82b      	bhi.n	800c0f0 <__sflush_r+0xb8>
 800c098:	4a29      	ldr	r2, [pc, #164]	; (800c140 <__sflush_r+0x108>)
 800c09a:	410a      	asrs	r2, r1
 800c09c:	07d6      	lsls	r6, r2, #31
 800c09e:	d427      	bmi.n	800c0f0 <__sflush_r+0xb8>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	6062      	str	r2, [r4, #4]
 800c0a4:	04d9      	lsls	r1, r3, #19
 800c0a6:	6922      	ldr	r2, [r4, #16]
 800c0a8:	6022      	str	r2, [r4, #0]
 800c0aa:	d504      	bpl.n	800c0b6 <__sflush_r+0x7e>
 800c0ac:	1c42      	adds	r2, r0, #1
 800c0ae:	d101      	bne.n	800c0b4 <__sflush_r+0x7c>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b903      	cbnz	r3, 800c0b6 <__sflush_r+0x7e>
 800c0b4:	6560      	str	r0, [r4, #84]	; 0x54
 800c0b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0b8:	602f      	str	r7, [r5, #0]
 800c0ba:	2900      	cmp	r1, #0
 800c0bc:	d0c9      	beq.n	800c052 <__sflush_r+0x1a>
 800c0be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0c2:	4299      	cmp	r1, r3
 800c0c4:	d002      	beq.n	800c0cc <__sflush_r+0x94>
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f001 fa14 	bl	800d4f4 <_free_r>
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	6360      	str	r0, [r4, #52]	; 0x34
 800c0d0:	e7c0      	b.n	800c054 <__sflush_r+0x1c>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47b0      	blx	r6
 800c0d8:	1c41      	adds	r1, r0, #1
 800c0da:	d1c8      	bne.n	800c06e <__sflush_r+0x36>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d0c5      	beq.n	800c06e <__sflush_r+0x36>
 800c0e2:	2b1d      	cmp	r3, #29
 800c0e4:	d001      	beq.n	800c0ea <__sflush_r+0xb2>
 800c0e6:	2b16      	cmp	r3, #22
 800c0e8:	d101      	bne.n	800c0ee <__sflush_r+0xb6>
 800c0ea:	602f      	str	r7, [r5, #0]
 800c0ec:	e7b1      	b.n	800c052 <__sflush_r+0x1a>
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	e7ad      	b.n	800c054 <__sflush_r+0x1c>
 800c0f8:	690f      	ldr	r7, [r1, #16]
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	d0a9      	beq.n	800c052 <__sflush_r+0x1a>
 800c0fe:	0793      	lsls	r3, r2, #30
 800c100:	680e      	ldr	r6, [r1, #0]
 800c102:	bf08      	it	eq
 800c104:	694b      	ldreq	r3, [r1, #20]
 800c106:	600f      	str	r7, [r1, #0]
 800c108:	bf18      	it	ne
 800c10a:	2300      	movne	r3, #0
 800c10c:	eba6 0807 	sub.w	r8, r6, r7
 800c110:	608b      	str	r3, [r1, #8]
 800c112:	f1b8 0f00 	cmp.w	r8, #0
 800c116:	dd9c      	ble.n	800c052 <__sflush_r+0x1a>
 800c118:	6a21      	ldr	r1, [r4, #32]
 800c11a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c11c:	4643      	mov	r3, r8
 800c11e:	463a      	mov	r2, r7
 800c120:	4628      	mov	r0, r5
 800c122:	47b0      	blx	r6
 800c124:	2800      	cmp	r0, #0
 800c126:	dc06      	bgt.n	800c136 <__sflush_r+0xfe>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c134:	e78e      	b.n	800c054 <__sflush_r+0x1c>
 800c136:	4407      	add	r7, r0
 800c138:	eba8 0800 	sub.w	r8, r8, r0
 800c13c:	e7e9      	b.n	800c112 <__sflush_r+0xda>
 800c13e:	bf00      	nop
 800c140:	dfbffffe 	.word	0xdfbffffe

0800c144 <_fflush_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	690b      	ldr	r3, [r1, #16]
 800c148:	4605      	mov	r5, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	b913      	cbnz	r3, 800c154 <_fflush_r+0x10>
 800c14e:	2500      	movs	r5, #0
 800c150:	4628      	mov	r0, r5
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	b118      	cbz	r0, 800c15e <_fflush_r+0x1a>
 800c156:	6a03      	ldr	r3, [r0, #32]
 800c158:	b90b      	cbnz	r3, 800c15e <_fflush_r+0x1a>
 800c15a:	f000 f8bb 	bl	800c2d4 <__sinit>
 800c15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0f3      	beq.n	800c14e <_fflush_r+0xa>
 800c166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c168:	07d0      	lsls	r0, r2, #31
 800c16a:	d404      	bmi.n	800c176 <_fflush_r+0x32>
 800c16c:	0599      	lsls	r1, r3, #22
 800c16e:	d402      	bmi.n	800c176 <_fflush_r+0x32>
 800c170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c172:	f000 fb2c 	bl	800c7ce <__retarget_lock_acquire_recursive>
 800c176:	4628      	mov	r0, r5
 800c178:	4621      	mov	r1, r4
 800c17a:	f7ff ff5d 	bl	800c038 <__sflush_r>
 800c17e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c180:	07da      	lsls	r2, r3, #31
 800c182:	4605      	mov	r5, r0
 800c184:	d4e4      	bmi.n	800c150 <_fflush_r+0xc>
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	059b      	lsls	r3, r3, #22
 800c18a:	d4e1      	bmi.n	800c150 <_fflush_r+0xc>
 800c18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c18e:	f000 fb1f 	bl	800c7d0 <__retarget_lock_release_recursive>
 800c192:	e7dd      	b.n	800c150 <_fflush_r+0xc>

0800c194 <fflush>:
 800c194:	4601      	mov	r1, r0
 800c196:	b920      	cbnz	r0, 800c1a2 <fflush+0xe>
 800c198:	4a04      	ldr	r2, [pc, #16]	; (800c1ac <fflush+0x18>)
 800c19a:	4905      	ldr	r1, [pc, #20]	; (800c1b0 <fflush+0x1c>)
 800c19c:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <fflush+0x20>)
 800c19e:	f000 b8b1 	b.w	800c304 <_fwalk_sglue>
 800c1a2:	4b05      	ldr	r3, [pc, #20]	; (800c1b8 <fflush+0x24>)
 800c1a4:	6818      	ldr	r0, [r3, #0]
 800c1a6:	f7ff bfcd 	b.w	800c144 <_fflush_r>
 800c1aa:	bf00      	nop
 800c1ac:	2000034c 	.word	0x2000034c
 800c1b0:	0800c145 	.word	0x0800c145
 800c1b4:	20000358 	.word	0x20000358
 800c1b8:	200003a4 	.word	0x200003a4

0800c1bc <std>:
 800c1bc:	2300      	movs	r3, #0
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ca:	6083      	str	r3, [r0, #8]
 800c1cc:	8181      	strh	r1, [r0, #12]
 800c1ce:	6643      	str	r3, [r0, #100]	; 0x64
 800c1d0:	81c2      	strh	r2, [r0, #14]
 800c1d2:	6183      	str	r3, [r0, #24]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	305c      	adds	r0, #92	; 0x5c
 800c1da:	f000 fa4d 	bl	800c678 <memset>
 800c1de:	4b0d      	ldr	r3, [pc, #52]	; (800c214 <std+0x58>)
 800c1e0:	6263      	str	r3, [r4, #36]	; 0x24
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <std+0x5c>)
 800c1e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <std+0x60>)
 800c1e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1ea:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <std+0x64>)
 800c1ec:	6323      	str	r3, [r4, #48]	; 0x30
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	; (800c224 <std+0x68>)
 800c1f0:	6224      	str	r4, [r4, #32]
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d006      	beq.n	800c204 <std+0x48>
 800c1f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c1fa:	4294      	cmp	r4, r2
 800c1fc:	d002      	beq.n	800c204 <std+0x48>
 800c1fe:	33d0      	adds	r3, #208	; 0xd0
 800c200:	429c      	cmp	r4, r3
 800c202:	d105      	bne.n	800c210 <std+0x54>
 800c204:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c20c:	f000 bade 	b.w	800c7cc <__retarget_lock_init_recursive>
 800c210:	bd10      	pop	{r4, pc}
 800c212:	bf00      	nop
 800c214:	0800c4c5 	.word	0x0800c4c5
 800c218:	0800c4eb 	.word	0x0800c4eb
 800c21c:	0800c523 	.word	0x0800c523
 800c220:	0800c547 	.word	0x0800c547
 800c224:	20006538 	.word	0x20006538

0800c228 <stdio_exit_handler>:
 800c228:	4a02      	ldr	r2, [pc, #8]	; (800c234 <stdio_exit_handler+0xc>)
 800c22a:	4903      	ldr	r1, [pc, #12]	; (800c238 <stdio_exit_handler+0x10>)
 800c22c:	4803      	ldr	r0, [pc, #12]	; (800c23c <stdio_exit_handler+0x14>)
 800c22e:	f000 b869 	b.w	800c304 <_fwalk_sglue>
 800c232:	bf00      	nop
 800c234:	2000034c 	.word	0x2000034c
 800c238:	0800c145 	.word	0x0800c145
 800c23c:	20000358 	.word	0x20000358

0800c240 <cleanup_stdio>:
 800c240:	6841      	ldr	r1, [r0, #4]
 800c242:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <cleanup_stdio+0x34>)
 800c244:	4299      	cmp	r1, r3
 800c246:	b510      	push	{r4, lr}
 800c248:	4604      	mov	r4, r0
 800c24a:	d001      	beq.n	800c250 <cleanup_stdio+0x10>
 800c24c:	f7ff ff7a 	bl	800c144 <_fflush_r>
 800c250:	68a1      	ldr	r1, [r4, #8]
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <cleanup_stdio+0x38>)
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <cleanup_stdio+0x1e>
 800c258:	4620      	mov	r0, r4
 800c25a:	f7ff ff73 	bl	800c144 <_fflush_r>
 800c25e:	68e1      	ldr	r1, [r4, #12]
 800c260:	4b06      	ldr	r3, [pc, #24]	; (800c27c <cleanup_stdio+0x3c>)
 800c262:	4299      	cmp	r1, r3
 800c264:	d004      	beq.n	800c270 <cleanup_stdio+0x30>
 800c266:	4620      	mov	r0, r4
 800c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26c:	f7ff bf6a 	b.w	800c144 <_fflush_r>
 800c270:	bd10      	pop	{r4, pc}
 800c272:	bf00      	nop
 800c274:	20006538 	.word	0x20006538
 800c278:	200065a0 	.word	0x200065a0
 800c27c:	20006608 	.word	0x20006608

0800c280 <global_stdio_init.part.0>:
 800c280:	b510      	push	{r4, lr}
 800c282:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <global_stdio_init.part.0+0x30>)
 800c284:	4c0b      	ldr	r4, [pc, #44]	; (800c2b4 <global_stdio_init.part.0+0x34>)
 800c286:	4a0c      	ldr	r2, [pc, #48]	; (800c2b8 <global_stdio_init.part.0+0x38>)
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	4620      	mov	r0, r4
 800c28c:	2200      	movs	r2, #0
 800c28e:	2104      	movs	r1, #4
 800c290:	f7ff ff94 	bl	800c1bc <std>
 800c294:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c298:	2201      	movs	r2, #1
 800c29a:	2109      	movs	r1, #9
 800c29c:	f7ff ff8e 	bl	800c1bc <std>
 800c2a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2aa:	2112      	movs	r1, #18
 800c2ac:	f7ff bf86 	b.w	800c1bc <std>
 800c2b0:	20006670 	.word	0x20006670
 800c2b4:	20006538 	.word	0x20006538
 800c2b8:	0800c229 	.word	0x0800c229

0800c2bc <__sfp_lock_acquire>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__sfp_lock_acquire+0x8>)
 800c2be:	f000 ba86 	b.w	800c7ce <__retarget_lock_acquire_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	20006679 	.word	0x20006679

0800c2c8 <__sfp_lock_release>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	; (800c2d0 <__sfp_lock_release+0x8>)
 800c2ca:	f000 ba81 	b.w	800c7d0 <__retarget_lock_release_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	20006679 	.word	0x20006679

0800c2d4 <__sinit>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f7ff fff0 	bl	800c2bc <__sfp_lock_acquire>
 800c2dc:	6a23      	ldr	r3, [r4, #32]
 800c2de:	b11b      	cbz	r3, 800c2e8 <__sinit+0x14>
 800c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e4:	f7ff bff0 	b.w	800c2c8 <__sfp_lock_release>
 800c2e8:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <__sinit+0x28>)
 800c2ea:	6223      	str	r3, [r4, #32]
 800c2ec:	4b04      	ldr	r3, [pc, #16]	; (800c300 <__sinit+0x2c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1f5      	bne.n	800c2e0 <__sinit+0xc>
 800c2f4:	f7ff ffc4 	bl	800c280 <global_stdio_init.part.0>
 800c2f8:	e7f2      	b.n	800c2e0 <__sinit+0xc>
 800c2fa:	bf00      	nop
 800c2fc:	0800c241 	.word	0x0800c241
 800c300:	20006670 	.word	0x20006670

0800c304 <_fwalk_sglue>:
 800c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c308:	4607      	mov	r7, r0
 800c30a:	4688      	mov	r8, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	2600      	movs	r6, #0
 800c310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c314:	f1b9 0901 	subs.w	r9, r9, #1
 800c318:	d505      	bpl.n	800c326 <_fwalk_sglue+0x22>
 800c31a:	6824      	ldr	r4, [r4, #0]
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	d1f7      	bne.n	800c310 <_fwalk_sglue+0xc>
 800c320:	4630      	mov	r0, r6
 800c322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d907      	bls.n	800c33c <_fwalk_sglue+0x38>
 800c32c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c330:	3301      	adds	r3, #1
 800c332:	d003      	beq.n	800c33c <_fwalk_sglue+0x38>
 800c334:	4629      	mov	r1, r5
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	4306      	orrs	r6, r0
 800c33c:	3568      	adds	r5, #104	; 0x68
 800c33e:	e7e9      	b.n	800c314 <_fwalk_sglue+0x10>

0800c340 <iprintf>:
 800c340:	b40f      	push	{r0, r1, r2, r3}
 800c342:	b507      	push	{r0, r1, r2, lr}
 800c344:	4906      	ldr	r1, [pc, #24]	; (800c360 <iprintf+0x20>)
 800c346:	ab04      	add	r3, sp, #16
 800c348:	6808      	ldr	r0, [r1, #0]
 800c34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c34e:	6881      	ldr	r1, [r0, #8]
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	f003 f867 	bl	800f424 <_vfiprintf_r>
 800c356:	b003      	add	sp, #12
 800c358:	f85d eb04 	ldr.w	lr, [sp], #4
 800c35c:	b004      	add	sp, #16
 800c35e:	4770      	bx	lr
 800c360:	200003a4 	.word	0x200003a4

0800c364 <putchar>:
 800c364:	4b02      	ldr	r3, [pc, #8]	; (800c370 <putchar+0xc>)
 800c366:	4601      	mov	r1, r0
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	6882      	ldr	r2, [r0, #8]
 800c36c:	f003 bb24 	b.w	800f9b8 <_putc_r>
 800c370:	200003a4 	.word	0x200003a4

0800c374 <_puts_r>:
 800c374:	6a03      	ldr	r3, [r0, #32]
 800c376:	b570      	push	{r4, r5, r6, lr}
 800c378:	6884      	ldr	r4, [r0, #8]
 800c37a:	4605      	mov	r5, r0
 800c37c:	460e      	mov	r6, r1
 800c37e:	b90b      	cbnz	r3, 800c384 <_puts_r+0x10>
 800c380:	f7ff ffa8 	bl	800c2d4 <__sinit>
 800c384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c386:	07db      	lsls	r3, r3, #31
 800c388:	d405      	bmi.n	800c396 <_puts_r+0x22>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	0598      	lsls	r0, r3, #22
 800c38e:	d402      	bmi.n	800c396 <_puts_r+0x22>
 800c390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c392:	f000 fa1c 	bl	800c7ce <__retarget_lock_acquire_recursive>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	0719      	lsls	r1, r3, #28
 800c39a:	d513      	bpl.n	800c3c4 <_puts_r+0x50>
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	b18b      	cbz	r3, 800c3c4 <_puts_r+0x50>
 800c3a0:	3e01      	subs	r6, #1
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	60a3      	str	r3, [r4, #8]
 800c3ac:	b9e9      	cbnz	r1, 800c3ea <_puts_r+0x76>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	da2e      	bge.n	800c410 <_puts_r+0x9c>
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	210a      	movs	r1, #10
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f8c9 	bl	800c54e <__swbuf_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d007      	beq.n	800c3d0 <_puts_r+0x5c>
 800c3c0:	250a      	movs	r5, #10
 800c3c2:	e007      	b.n	800c3d4 <_puts_r+0x60>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 f8fe 	bl	800c5c8 <__swsetup_r>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d0e7      	beq.n	800c3a0 <_puts_r+0x2c>
 800c3d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c3d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d6:	07da      	lsls	r2, r3, #31
 800c3d8:	d405      	bmi.n	800c3e6 <_puts_r+0x72>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	059b      	lsls	r3, r3, #22
 800c3de:	d402      	bmi.n	800c3e6 <_puts_r+0x72>
 800c3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e2:	f000 f9f5 	bl	800c7d0 <__retarget_lock_release_recursive>
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	da04      	bge.n	800c3f8 <_puts_r+0x84>
 800c3ee:	69a2      	ldr	r2, [r4, #24]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	dc06      	bgt.n	800c402 <_puts_r+0x8e>
 800c3f4:	290a      	cmp	r1, #10
 800c3f6:	d004      	beq.n	800c402 <_puts_r+0x8e>
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	6022      	str	r2, [r4, #0]
 800c3fe:	7019      	strb	r1, [r3, #0]
 800c400:	e7cf      	b.n	800c3a2 <_puts_r+0x2e>
 800c402:	4622      	mov	r2, r4
 800c404:	4628      	mov	r0, r5
 800c406:	f000 f8a2 	bl	800c54e <__swbuf_r>
 800c40a:	3001      	adds	r0, #1
 800c40c:	d1c9      	bne.n	800c3a2 <_puts_r+0x2e>
 800c40e:	e7df      	b.n	800c3d0 <_puts_r+0x5c>
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	250a      	movs	r5, #10
 800c414:	1c5a      	adds	r2, r3, #1
 800c416:	6022      	str	r2, [r4, #0]
 800c418:	701d      	strb	r5, [r3, #0]
 800c41a:	e7db      	b.n	800c3d4 <_puts_r+0x60>

0800c41c <puts>:
 800c41c:	4b02      	ldr	r3, [pc, #8]	; (800c428 <puts+0xc>)
 800c41e:	4601      	mov	r1, r0
 800c420:	6818      	ldr	r0, [r3, #0]
 800c422:	f7ff bfa7 	b.w	800c374 <_puts_r>
 800c426:	bf00      	nop
 800c428:	200003a4 	.word	0x200003a4

0800c42c <siprintf>:
 800c42c:	b40e      	push	{r1, r2, r3}
 800c42e:	b500      	push	{lr}
 800c430:	b09c      	sub	sp, #112	; 0x70
 800c432:	ab1d      	add	r3, sp, #116	; 0x74
 800c434:	9002      	str	r0, [sp, #8]
 800c436:	9006      	str	r0, [sp, #24]
 800c438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c43c:	4809      	ldr	r0, [pc, #36]	; (800c464 <siprintf+0x38>)
 800c43e:	9107      	str	r1, [sp, #28]
 800c440:	9104      	str	r1, [sp, #16]
 800c442:	4909      	ldr	r1, [pc, #36]	; (800c468 <siprintf+0x3c>)
 800c444:	f853 2b04 	ldr.w	r2, [r3], #4
 800c448:	9105      	str	r1, [sp, #20]
 800c44a:	6800      	ldr	r0, [r0, #0]
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	a902      	add	r1, sp, #8
 800c450:	f002 fcee 	bl	800ee30 <_svfiprintf_r>
 800c454:	9b02      	ldr	r3, [sp, #8]
 800c456:	2200      	movs	r2, #0
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	b01c      	add	sp, #112	; 0x70
 800c45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c460:	b003      	add	sp, #12
 800c462:	4770      	bx	lr
 800c464:	200003a4 	.word	0x200003a4
 800c468:	ffff0208 	.word	0xffff0208

0800c46c <siscanf>:
 800c46c:	b40e      	push	{r1, r2, r3}
 800c46e:	b510      	push	{r4, lr}
 800c470:	b09f      	sub	sp, #124	; 0x7c
 800c472:	ac21      	add	r4, sp, #132	; 0x84
 800c474:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c478:	f854 2b04 	ldr.w	r2, [r4], #4
 800c47c:	9201      	str	r2, [sp, #4]
 800c47e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c482:	9004      	str	r0, [sp, #16]
 800c484:	9008      	str	r0, [sp, #32]
 800c486:	f7f3 ff0b 	bl	80002a0 <strlen>
 800c48a:	4b0c      	ldr	r3, [pc, #48]	; (800c4bc <siscanf+0x50>)
 800c48c:	9005      	str	r0, [sp, #20]
 800c48e:	9009      	str	r0, [sp, #36]	; 0x24
 800c490:	930d      	str	r3, [sp, #52]	; 0x34
 800c492:	480b      	ldr	r0, [pc, #44]	; (800c4c0 <siscanf+0x54>)
 800c494:	9a01      	ldr	r2, [sp, #4]
 800c496:	6800      	ldr	r0, [r0, #0]
 800c498:	9403      	str	r4, [sp, #12]
 800c49a:	2300      	movs	r3, #0
 800c49c:	9311      	str	r3, [sp, #68]	; 0x44
 800c49e:	9316      	str	r3, [sp, #88]	; 0x58
 800c4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c4a8:	a904      	add	r1, sp, #16
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	f002 fe18 	bl	800f0e0 <__ssvfiscanf_r>
 800c4b0:	b01f      	add	sp, #124	; 0x7c
 800c4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b6:	b003      	add	sp, #12
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	0800c4e7 	.word	0x0800c4e7
 800c4c0:	200003a4 	.word	0x200003a4

0800c4c4 <__sread>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4cc:	f000 f930 	bl	800c730 <_read_r>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	bfab      	itete	ge
 800c4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c4d8:	181b      	addge	r3, r3, r0
 800c4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4de:	bfac      	ite	ge
 800c4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4e2:	81a3      	strhlt	r3, [r4, #12]
 800c4e4:	bd10      	pop	{r4, pc}

0800c4e6 <__seofread>:
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	4770      	bx	lr

0800c4ea <__swrite>:
 800c4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ee:	461f      	mov	r7, r3
 800c4f0:	898b      	ldrh	r3, [r1, #12]
 800c4f2:	05db      	lsls	r3, r3, #23
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	4616      	mov	r6, r2
 800c4fa:	d505      	bpl.n	800c508 <__swrite+0x1e>
 800c4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c500:	2302      	movs	r3, #2
 800c502:	2200      	movs	r2, #0
 800c504:	f000 f902 	bl	800c70c <_lseek_r>
 800c508:	89a3      	ldrh	r3, [r4, #12]
 800c50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c512:	81a3      	strh	r3, [r4, #12]
 800c514:	4632      	mov	r2, r6
 800c516:	463b      	mov	r3, r7
 800c518:	4628      	mov	r0, r5
 800c51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c51e:	f000 b919 	b.w	800c754 <_write_r>

0800c522 <__sseek>:
 800c522:	b510      	push	{r4, lr}
 800c524:	460c      	mov	r4, r1
 800c526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52a:	f000 f8ef 	bl	800c70c <_lseek_r>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	bf15      	itete	ne
 800c534:	6560      	strne	r0, [r4, #84]	; 0x54
 800c536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c53e:	81a3      	strheq	r3, [r4, #12]
 800c540:	bf18      	it	ne
 800c542:	81a3      	strhne	r3, [r4, #12]
 800c544:	bd10      	pop	{r4, pc}

0800c546 <__sclose>:
 800c546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54a:	f000 b8cf 	b.w	800c6ec <_close_r>

0800c54e <__swbuf_r>:
 800c54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c550:	460e      	mov	r6, r1
 800c552:	4614      	mov	r4, r2
 800c554:	4605      	mov	r5, r0
 800c556:	b118      	cbz	r0, 800c560 <__swbuf_r+0x12>
 800c558:	6a03      	ldr	r3, [r0, #32]
 800c55a:	b90b      	cbnz	r3, 800c560 <__swbuf_r+0x12>
 800c55c:	f7ff feba 	bl	800c2d4 <__sinit>
 800c560:	69a3      	ldr	r3, [r4, #24]
 800c562:	60a3      	str	r3, [r4, #8]
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	071a      	lsls	r2, r3, #28
 800c568:	d525      	bpl.n	800c5b6 <__swbuf_r+0x68>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	b31b      	cbz	r3, 800c5b6 <__swbuf_r+0x68>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	6922      	ldr	r2, [r4, #16]
 800c572:	1a98      	subs	r0, r3, r2
 800c574:	6963      	ldr	r3, [r4, #20]
 800c576:	b2f6      	uxtb	r6, r6
 800c578:	4283      	cmp	r3, r0
 800c57a:	4637      	mov	r7, r6
 800c57c:	dc04      	bgt.n	800c588 <__swbuf_r+0x3a>
 800c57e:	4621      	mov	r1, r4
 800c580:	4628      	mov	r0, r5
 800c582:	f7ff fddf 	bl	800c144 <_fflush_r>
 800c586:	b9e0      	cbnz	r0, 800c5c2 <__swbuf_r+0x74>
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	3b01      	subs	r3, #1
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	6022      	str	r2, [r4, #0]
 800c594:	701e      	strb	r6, [r3, #0]
 800c596:	6962      	ldr	r2, [r4, #20]
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d004      	beq.n	800c5a8 <__swbuf_r+0x5a>
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	07db      	lsls	r3, r3, #31
 800c5a2:	d506      	bpl.n	800c5b2 <__swbuf_r+0x64>
 800c5a4:	2e0a      	cmp	r6, #10
 800c5a6:	d104      	bne.n	800c5b2 <__swbuf_r+0x64>
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f7ff fdca 	bl	800c144 <_fflush_r>
 800c5b0:	b938      	cbnz	r0, 800c5c2 <__swbuf_r+0x74>
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f000 f805 	bl	800c5c8 <__swsetup_r>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d0d5      	beq.n	800c56e <__swbuf_r+0x20>
 800c5c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c5c6:	e7f4      	b.n	800c5b2 <__swbuf_r+0x64>

0800c5c8 <__swsetup_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4b2a      	ldr	r3, [pc, #168]	; (800c674 <__swsetup_r+0xac>)
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	b118      	cbz	r0, 800c5dc <__swsetup_r+0x14>
 800c5d4:	6a03      	ldr	r3, [r0, #32]
 800c5d6:	b90b      	cbnz	r3, 800c5dc <__swsetup_r+0x14>
 800c5d8:	f7ff fe7c 	bl	800c2d4 <__sinit>
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5e2:	0718      	lsls	r0, r3, #28
 800c5e4:	d422      	bmi.n	800c62c <__swsetup_r+0x64>
 800c5e6:	06d9      	lsls	r1, r3, #27
 800c5e8:	d407      	bmi.n	800c5fa <__swsetup_r+0x32>
 800c5ea:	2309      	movs	r3, #9
 800c5ec:	602b      	str	r3, [r5, #0]
 800c5ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5f8:	e034      	b.n	800c664 <__swsetup_r+0x9c>
 800c5fa:	0758      	lsls	r0, r3, #29
 800c5fc:	d512      	bpl.n	800c624 <__swsetup_r+0x5c>
 800c5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c600:	b141      	cbz	r1, 800c614 <__swsetup_r+0x4c>
 800c602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c606:	4299      	cmp	r1, r3
 800c608:	d002      	beq.n	800c610 <__swsetup_r+0x48>
 800c60a:	4628      	mov	r0, r5
 800c60c:	f000 ff72 	bl	800d4f4 <_free_r>
 800c610:	2300      	movs	r3, #0
 800c612:	6363      	str	r3, [r4, #52]	; 0x34
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	2300      	movs	r3, #0
 800c61e:	6063      	str	r3, [r4, #4]
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	89a3      	ldrh	r3, [r4, #12]
 800c626:	f043 0308 	orr.w	r3, r3, #8
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	6923      	ldr	r3, [r4, #16]
 800c62e:	b94b      	cbnz	r3, 800c644 <__swsetup_r+0x7c>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c63a:	d003      	beq.n	800c644 <__swsetup_r+0x7c>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4628      	mov	r0, r5
 800c640:	f003 f97e 	bl	800f940 <__smakebuf_r>
 800c644:	89a0      	ldrh	r0, [r4, #12]
 800c646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c64a:	f010 0301 	ands.w	r3, r0, #1
 800c64e:	d00a      	beq.n	800c666 <__swsetup_r+0x9e>
 800c650:	2300      	movs	r3, #0
 800c652:	60a3      	str	r3, [r4, #8]
 800c654:	6963      	ldr	r3, [r4, #20]
 800c656:	425b      	negs	r3, r3
 800c658:	61a3      	str	r3, [r4, #24]
 800c65a:	6923      	ldr	r3, [r4, #16]
 800c65c:	b943      	cbnz	r3, 800c670 <__swsetup_r+0xa8>
 800c65e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c662:	d1c4      	bne.n	800c5ee <__swsetup_r+0x26>
 800c664:	bd38      	pop	{r3, r4, r5, pc}
 800c666:	0781      	lsls	r1, r0, #30
 800c668:	bf58      	it	pl
 800c66a:	6963      	ldrpl	r3, [r4, #20]
 800c66c:	60a3      	str	r3, [r4, #8]
 800c66e:	e7f4      	b.n	800c65a <__swsetup_r+0x92>
 800c670:	2000      	movs	r0, #0
 800c672:	e7f7      	b.n	800c664 <__swsetup_r+0x9c>
 800c674:	200003a4 	.word	0x200003a4

0800c678 <memset>:
 800c678:	4402      	add	r2, r0
 800c67a:	4603      	mov	r3, r0
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d100      	bne.n	800c682 <memset+0xa>
 800c680:	4770      	bx	lr
 800c682:	f803 1b01 	strb.w	r1, [r3], #1
 800c686:	e7f9      	b.n	800c67c <memset+0x4>

0800c688 <strcat>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	4602      	mov	r2, r0
 800c68c:	7814      	ldrb	r4, [r2, #0]
 800c68e:	4613      	mov	r3, r2
 800c690:	3201      	adds	r2, #1
 800c692:	2c00      	cmp	r4, #0
 800c694:	d1fa      	bne.n	800c68c <strcat+0x4>
 800c696:	3b01      	subs	r3, #1
 800c698:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c69c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	d1f9      	bne.n	800c698 <strcat+0x10>
 800c6a4:	bd10      	pop	{r4, pc}

0800c6a6 <strchr>:
 800c6a6:	b2c9      	uxtb	r1, r1
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6ae:	b11a      	cbz	r2, 800c6b8 <strchr+0x12>
 800c6b0:	428a      	cmp	r2, r1
 800c6b2:	d1f9      	bne.n	800c6a8 <strchr+0x2>
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	4770      	bx	lr
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	bf18      	it	ne
 800c6bc:	2300      	movne	r3, #0
 800c6be:	e7f9      	b.n	800c6b4 <strchr+0xe>

0800c6c0 <strncmp>:
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	b16a      	cbz	r2, 800c6e0 <strncmp+0x20>
 800c6c4:	3901      	subs	r1, #1
 800c6c6:	1884      	adds	r4, r0, r2
 800c6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d103      	bne.n	800c6dc <strncmp+0x1c>
 800c6d4:	42a0      	cmp	r0, r4
 800c6d6:	d001      	beq.n	800c6dc <strncmp+0x1c>
 800c6d8:	2a00      	cmp	r2, #0
 800c6da:	d1f5      	bne.n	800c6c8 <strncmp+0x8>
 800c6dc:	1ad0      	subs	r0, r2, r3
 800c6de:	bd10      	pop	{r4, pc}
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	e7fc      	b.n	800c6de <strncmp+0x1e>

0800c6e4 <_localeconv_r>:
 800c6e4:	4800      	ldr	r0, [pc, #0]	; (800c6e8 <_localeconv_r+0x4>)
 800c6e6:	4770      	bx	lr
 800c6e8:	20000498 	.word	0x20000498

0800c6ec <_close_r>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	4d06      	ldr	r5, [pc, #24]	; (800c708 <_close_r+0x1c>)
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	4608      	mov	r0, r1
 800c6f6:	602b      	str	r3, [r5, #0]
 800c6f8:	f7f5 f869 	bl	80017ce <_close>
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	d102      	bne.n	800c706 <_close_r+0x1a>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	b103      	cbz	r3, 800c706 <_close_r+0x1a>
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	20006674 	.word	0x20006674

0800c70c <_lseek_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4d07      	ldr	r5, [pc, #28]	; (800c72c <_lseek_r+0x20>)
 800c710:	4604      	mov	r4, r0
 800c712:	4608      	mov	r0, r1
 800c714:	4611      	mov	r1, r2
 800c716:	2200      	movs	r2, #0
 800c718:	602a      	str	r2, [r5, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	f7f5 f87e 	bl	800181c <_lseek>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_lseek_r+0x1e>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_lseek_r+0x1e>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20006674 	.word	0x20006674

0800c730 <_read_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d07      	ldr	r5, [pc, #28]	; (800c750 <_read_r+0x20>)
 800c734:	4604      	mov	r4, r0
 800c736:	4608      	mov	r0, r1
 800c738:	4611      	mov	r1, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	602a      	str	r2, [r5, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	f7f5 f80c 	bl	800175c <_read>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_read_r+0x1e>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_read_r+0x1e>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	20006674 	.word	0x20006674

0800c754 <_write_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	; (800c774 <_write_r+0x20>)
 800c758:	4604      	mov	r4, r0
 800c75a:	4608      	mov	r0, r1
 800c75c:	4611      	mov	r1, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	602a      	str	r2, [r5, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	f7f5 f817 	bl	8001796 <_write>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_write_r+0x1e>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_write_r+0x1e>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	20006674 	.word	0x20006674

0800c778 <__errno>:
 800c778:	4b01      	ldr	r3, [pc, #4]	; (800c780 <__errno+0x8>)
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	200003a4 	.word	0x200003a4

0800c784 <__libc_init_array>:
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	4d0d      	ldr	r5, [pc, #52]	; (800c7bc <__libc_init_array+0x38>)
 800c788:	4c0d      	ldr	r4, [pc, #52]	; (800c7c0 <__libc_init_array+0x3c>)
 800c78a:	1b64      	subs	r4, r4, r5
 800c78c:	10a4      	asrs	r4, r4, #2
 800c78e:	2600      	movs	r6, #0
 800c790:	42a6      	cmp	r6, r4
 800c792:	d109      	bne.n	800c7a8 <__libc_init_array+0x24>
 800c794:	4d0b      	ldr	r5, [pc, #44]	; (800c7c4 <__libc_init_array+0x40>)
 800c796:	4c0c      	ldr	r4, [pc, #48]	; (800c7c8 <__libc_init_array+0x44>)
 800c798:	f006 f88a 	bl	80128b0 <_init>
 800c79c:	1b64      	subs	r4, r4, r5
 800c79e:	10a4      	asrs	r4, r4, #2
 800c7a0:	2600      	movs	r6, #0
 800c7a2:	42a6      	cmp	r6, r4
 800c7a4:	d105      	bne.n	800c7b2 <__libc_init_array+0x2e>
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ac:	4798      	blx	r3
 800c7ae:	3601      	adds	r6, #1
 800c7b0:	e7ee      	b.n	800c790 <__libc_init_array+0xc>
 800c7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b6:	4798      	blx	r3
 800c7b8:	3601      	adds	r6, #1
 800c7ba:	e7f2      	b.n	800c7a2 <__libc_init_array+0x1e>
 800c7bc:	08029af8 	.word	0x08029af8
 800c7c0:	08029af8 	.word	0x08029af8
 800c7c4:	08029af8 	.word	0x08029af8
 800c7c8:	08029afc 	.word	0x08029afc

0800c7cc <__retarget_lock_init_recursive>:
 800c7cc:	4770      	bx	lr

0800c7ce <__retarget_lock_acquire_recursive>:
 800c7ce:	4770      	bx	lr

0800c7d0 <__retarget_lock_release_recursive>:
 800c7d0:	4770      	bx	lr

0800c7d2 <memcpy>:
 800c7d2:	440a      	add	r2, r1
 800c7d4:	4291      	cmp	r1, r2
 800c7d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c7da:	d100      	bne.n	800c7de <memcpy+0xc>
 800c7dc:	4770      	bx	lr
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7e8:	4291      	cmp	r1, r2
 800c7ea:	d1f9      	bne.n	800c7e0 <memcpy+0xe>
 800c7ec:	bd10      	pop	{r4, pc}
	...

0800c7f0 <nanf>:
 800c7f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c7f8 <nanf+0x8>
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	7fc00000 	.word	0x7fc00000

0800c7fc <quorem>:
 800c7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	6903      	ldr	r3, [r0, #16]
 800c802:	690c      	ldr	r4, [r1, #16]
 800c804:	42a3      	cmp	r3, r4
 800c806:	4607      	mov	r7, r0
 800c808:	db7e      	blt.n	800c908 <quorem+0x10c>
 800c80a:	3c01      	subs	r4, #1
 800c80c:	f101 0814 	add.w	r8, r1, #20
 800c810:	f100 0514 	add.w	r5, r0, #20
 800c814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c81e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c822:	3301      	adds	r3, #1
 800c824:	429a      	cmp	r2, r3
 800c826:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c82a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c82e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c832:	d331      	bcc.n	800c898 <quorem+0x9c>
 800c834:	f04f 0e00 	mov.w	lr, #0
 800c838:	4640      	mov	r0, r8
 800c83a:	46ac      	mov	ip, r5
 800c83c:	46f2      	mov	sl, lr
 800c83e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c842:	b293      	uxth	r3, r2
 800c844:	fb06 e303 	mla	r3, r6, r3, lr
 800c848:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c84c:	0c1a      	lsrs	r2, r3, #16
 800c84e:	b29b      	uxth	r3, r3
 800c850:	ebaa 0303 	sub.w	r3, sl, r3
 800c854:	f8dc a000 	ldr.w	sl, [ip]
 800c858:	fa13 f38a 	uxtah	r3, r3, sl
 800c85c:	fb06 220e 	mla	r2, r6, lr, r2
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	9b00      	ldr	r3, [sp, #0]
 800c864:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c868:	b292      	uxth	r2, r2
 800c86a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c86e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c872:	f8bd 3000 	ldrh.w	r3, [sp]
 800c876:	4581      	cmp	r9, r0
 800c878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c87c:	f84c 3b04 	str.w	r3, [ip], #4
 800c880:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c884:	d2db      	bcs.n	800c83e <quorem+0x42>
 800c886:	f855 300b 	ldr.w	r3, [r5, fp]
 800c88a:	b92b      	cbnz	r3, 800c898 <quorem+0x9c>
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	3b04      	subs	r3, #4
 800c890:	429d      	cmp	r5, r3
 800c892:	461a      	mov	r2, r3
 800c894:	d32c      	bcc.n	800c8f0 <quorem+0xf4>
 800c896:	613c      	str	r4, [r7, #16]
 800c898:	4638      	mov	r0, r7
 800c89a:	f001 f9f1 	bl	800dc80 <__mcmp>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	db22      	blt.n	800c8e8 <quorem+0xec>
 800c8a2:	3601      	adds	r6, #1
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8ac:	f8d1 c000 	ldr.w	ip, [r1]
 800c8b0:	b293      	uxth	r3, r2
 800c8b2:	1ac3      	subs	r3, r0, r3
 800c8b4:	0c12      	lsrs	r2, r2, #16
 800c8b6:	fa13 f38c 	uxtah	r3, r3, ip
 800c8ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c8be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8c8:	45c1      	cmp	r9, r8
 800c8ca:	f841 3b04 	str.w	r3, [r1], #4
 800c8ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c8d2:	d2e9      	bcs.n	800c8a8 <quorem+0xac>
 800c8d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8dc:	b922      	cbnz	r2, 800c8e8 <quorem+0xec>
 800c8de:	3b04      	subs	r3, #4
 800c8e0:	429d      	cmp	r5, r3
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	d30a      	bcc.n	800c8fc <quorem+0x100>
 800c8e6:	613c      	str	r4, [r7, #16]
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	b003      	add	sp, #12
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	6812      	ldr	r2, [r2, #0]
 800c8f2:	3b04      	subs	r3, #4
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	d1ce      	bne.n	800c896 <quorem+0x9a>
 800c8f8:	3c01      	subs	r4, #1
 800c8fa:	e7c9      	b.n	800c890 <quorem+0x94>
 800c8fc:	6812      	ldr	r2, [r2, #0]
 800c8fe:	3b04      	subs	r3, #4
 800c900:	2a00      	cmp	r2, #0
 800c902:	d1f0      	bne.n	800c8e6 <quorem+0xea>
 800c904:	3c01      	subs	r4, #1
 800c906:	e7eb      	b.n	800c8e0 <quorem+0xe4>
 800c908:	2000      	movs	r0, #0
 800c90a:	e7ee      	b.n	800c8ea <quorem+0xee>
 800c90c:	0000      	movs	r0, r0
	...

0800c910 <_dtoa_r>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ed2d 8b04 	vpush	{d8-d9}
 800c918:	69c5      	ldr	r5, [r0, #28]
 800c91a:	b093      	sub	sp, #76	; 0x4c
 800c91c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c920:	ec57 6b10 	vmov	r6, r7, d0
 800c924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c928:	9107      	str	r1, [sp, #28]
 800c92a:	4604      	mov	r4, r0
 800c92c:	920a      	str	r2, [sp, #40]	; 0x28
 800c92e:	930d      	str	r3, [sp, #52]	; 0x34
 800c930:	b975      	cbnz	r5, 800c950 <_dtoa_r+0x40>
 800c932:	2010      	movs	r0, #16
 800c934:	f000 fe2a 	bl	800d58c <malloc>
 800c938:	4602      	mov	r2, r0
 800c93a:	61e0      	str	r0, [r4, #28]
 800c93c:	b920      	cbnz	r0, 800c948 <_dtoa_r+0x38>
 800c93e:	4bae      	ldr	r3, [pc, #696]	; (800cbf8 <_dtoa_r+0x2e8>)
 800c940:	21ef      	movs	r1, #239	; 0xef
 800c942:	48ae      	ldr	r0, [pc, #696]	; (800cbfc <_dtoa_r+0x2ec>)
 800c944:	f003 f934 	bl	800fbb0 <__assert_func>
 800c948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c94c:	6005      	str	r5, [r0, #0]
 800c94e:	60c5      	str	r5, [r0, #12]
 800c950:	69e3      	ldr	r3, [r4, #28]
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	b151      	cbz	r1, 800c96c <_dtoa_r+0x5c>
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	604a      	str	r2, [r1, #4]
 800c95a:	2301      	movs	r3, #1
 800c95c:	4093      	lsls	r3, r2
 800c95e:	608b      	str	r3, [r1, #8]
 800c960:	4620      	mov	r0, r4
 800c962:	f000 ff07 	bl	800d774 <_Bfree>
 800c966:	69e3      	ldr	r3, [r4, #28]
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	1e3b      	subs	r3, r7, #0
 800c96e:	bfbb      	ittet	lt
 800c970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c974:	9303      	strlt	r3, [sp, #12]
 800c976:	2300      	movge	r3, #0
 800c978:	2201      	movlt	r2, #1
 800c97a:	bfac      	ite	ge
 800c97c:	f8c8 3000 	strge.w	r3, [r8]
 800c980:	f8c8 2000 	strlt.w	r2, [r8]
 800c984:	4b9e      	ldr	r3, [pc, #632]	; (800cc00 <_dtoa_r+0x2f0>)
 800c986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c98a:	ea33 0308 	bics.w	r3, r3, r8
 800c98e:	d11b      	bne.n	800c9c8 <_dtoa_r+0xb8>
 800c990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c992:	f242 730f 	movw	r3, #9999	; 0x270f
 800c996:	6013      	str	r3, [r2, #0]
 800c998:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c99c:	4333      	orrs	r3, r6
 800c99e:	f000 8593 	beq.w	800d4c8 <_dtoa_r+0xbb8>
 800c9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9a4:	b963      	cbnz	r3, 800c9c0 <_dtoa_r+0xb0>
 800c9a6:	4b97      	ldr	r3, [pc, #604]	; (800cc04 <_dtoa_r+0x2f4>)
 800c9a8:	e027      	b.n	800c9fa <_dtoa_r+0xea>
 800c9aa:	4b97      	ldr	r3, [pc, #604]	; (800cc08 <_dtoa_r+0x2f8>)
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	9800      	ldr	r0, [sp, #0]
 800c9b6:	b013      	add	sp, #76	; 0x4c
 800c9b8:	ecbd 8b04 	vpop	{d8-d9}
 800c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	4b90      	ldr	r3, [pc, #576]	; (800cc04 <_dtoa_r+0x2f4>)
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	3303      	adds	r3, #3
 800c9c6:	e7f3      	b.n	800c9b0 <_dtoa_r+0xa0>
 800c9c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	ec51 0b17 	vmov	r0, r1, d7
 800c9d2:	eeb0 8a47 	vmov.f32	s16, s14
 800c9d6:	eef0 8a67 	vmov.f32	s17, s15
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f7f4 f88c 	bl	8000af8 <__aeabi_dcmpeq>
 800c9e0:	4681      	mov	r9, r0
 800c9e2:	b160      	cbz	r0, 800c9fe <_dtoa_r+0xee>
 800c9e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 8568 	beq.w	800d4c2 <_dtoa_r+0xbb2>
 800c9f2:	4b86      	ldr	r3, [pc, #536]	; (800cc0c <_dtoa_r+0x2fc>)
 800c9f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	e7da      	b.n	800c9b4 <_dtoa_r+0xa4>
 800c9fe:	aa10      	add	r2, sp, #64	; 0x40
 800ca00:	a911      	add	r1, sp, #68	; 0x44
 800ca02:	4620      	mov	r0, r4
 800ca04:	eeb0 0a48 	vmov.f32	s0, s16
 800ca08:	eef0 0a68 	vmov.f32	s1, s17
 800ca0c:	f001 fa4e 	bl	800deac <__d2b>
 800ca10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ca14:	4682      	mov	sl, r0
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	d07f      	beq.n	800cb1a <_dtoa_r+0x20a>
 800ca1a:	ee18 3a90 	vmov	r3, s17
 800ca1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ca26:	ec51 0b18 	vmov	r0, r1, d8
 800ca2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ca36:	4619      	mov	r1, r3
 800ca38:	2200      	movs	r2, #0
 800ca3a:	4b75      	ldr	r3, [pc, #468]	; (800cc10 <_dtoa_r+0x300>)
 800ca3c:	f7f3 fc3c 	bl	80002b8 <__aeabi_dsub>
 800ca40:	a367      	add	r3, pc, #412	; (adr r3, 800cbe0 <_dtoa_r+0x2d0>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fdef 	bl	8000628 <__aeabi_dmul>
 800ca4a:	a367      	add	r3, pc, #412	; (adr r3, 800cbe8 <_dtoa_r+0x2d8>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fc34 	bl	80002bc <__adddf3>
 800ca54:	4606      	mov	r6, r0
 800ca56:	4628      	mov	r0, r5
 800ca58:	460f      	mov	r7, r1
 800ca5a:	f7f3 fd7b 	bl	8000554 <__aeabi_i2d>
 800ca5e:	a364      	add	r3, pc, #400	; (adr r3, 800cbf0 <_dtoa_r+0x2e0>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	f7f3 fde0 	bl	8000628 <__aeabi_dmul>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	4639      	mov	r1, r7
 800ca70:	f7f3 fc24 	bl	80002bc <__adddf3>
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	f7f4 f886 	bl	8000b88 <__aeabi_d2iz>
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	4683      	mov	fp, r0
 800ca80:	2300      	movs	r3, #0
 800ca82:	4630      	mov	r0, r6
 800ca84:	4639      	mov	r1, r7
 800ca86:	f7f4 f841 	bl	8000b0c <__aeabi_dcmplt>
 800ca8a:	b148      	cbz	r0, 800caa0 <_dtoa_r+0x190>
 800ca8c:	4658      	mov	r0, fp
 800ca8e:	f7f3 fd61 	bl	8000554 <__aeabi_i2d>
 800ca92:	4632      	mov	r2, r6
 800ca94:	463b      	mov	r3, r7
 800ca96:	f7f4 f82f 	bl	8000af8 <__aeabi_dcmpeq>
 800ca9a:	b908      	cbnz	r0, 800caa0 <_dtoa_r+0x190>
 800ca9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800caa0:	f1bb 0f16 	cmp.w	fp, #22
 800caa4:	d857      	bhi.n	800cb56 <_dtoa_r+0x246>
 800caa6:	4b5b      	ldr	r3, [pc, #364]	; (800cc14 <_dtoa_r+0x304>)
 800caa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	ec51 0b18 	vmov	r0, r1, d8
 800cab4:	f7f4 f82a 	bl	8000b0c <__aeabi_dcmplt>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d04e      	beq.n	800cb5a <_dtoa_r+0x24a>
 800cabc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cac0:	2300      	movs	r3, #0
 800cac2:	930c      	str	r3, [sp, #48]	; 0x30
 800cac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cac6:	1b5b      	subs	r3, r3, r5
 800cac8:	1e5a      	subs	r2, r3, #1
 800caca:	bf45      	ittet	mi
 800cacc:	f1c3 0301 	rsbmi	r3, r3, #1
 800cad0:	9305      	strmi	r3, [sp, #20]
 800cad2:	2300      	movpl	r3, #0
 800cad4:	2300      	movmi	r3, #0
 800cad6:	9206      	str	r2, [sp, #24]
 800cad8:	bf54      	ite	pl
 800cada:	9305      	strpl	r3, [sp, #20]
 800cadc:	9306      	strmi	r3, [sp, #24]
 800cade:	f1bb 0f00 	cmp.w	fp, #0
 800cae2:	db3c      	blt.n	800cb5e <_dtoa_r+0x24e>
 800cae4:	9b06      	ldr	r3, [sp, #24]
 800cae6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800caea:	445b      	add	r3, fp
 800caec:	9306      	str	r3, [sp, #24]
 800caee:	2300      	movs	r3, #0
 800caf0:	9308      	str	r3, [sp, #32]
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	d868      	bhi.n	800cbca <_dtoa_r+0x2ba>
 800caf8:	2b05      	cmp	r3, #5
 800cafa:	bfc4      	itt	gt
 800cafc:	3b04      	subgt	r3, #4
 800cafe:	9307      	strgt	r3, [sp, #28]
 800cb00:	9b07      	ldr	r3, [sp, #28]
 800cb02:	f1a3 0302 	sub.w	r3, r3, #2
 800cb06:	bfcc      	ite	gt
 800cb08:	2500      	movgt	r5, #0
 800cb0a:	2501      	movle	r5, #1
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	f200 8085 	bhi.w	800cc1c <_dtoa_r+0x30c>
 800cb12:	e8df f003 	tbb	[pc, r3]
 800cb16:	3b2e      	.short	0x3b2e
 800cb18:	5839      	.short	0x5839
 800cb1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cb1e:	441d      	add	r5, r3
 800cb20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb24:	2b20      	cmp	r3, #32
 800cb26:	bfc1      	itttt	gt
 800cb28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800cb30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cb34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cb38:	bfd6      	itet	le
 800cb3a:	f1c3 0320 	rsble	r3, r3, #32
 800cb3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800cb42:	fa06 f003 	lslle.w	r0, r6, r3
 800cb46:	f7f3 fcf5 	bl	8000534 <__aeabi_ui2d>
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cb50:	3d01      	subs	r5, #1
 800cb52:	920e      	str	r2, [sp, #56]	; 0x38
 800cb54:	e76f      	b.n	800ca36 <_dtoa_r+0x126>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e7b3      	b.n	800cac2 <_dtoa_r+0x1b2>
 800cb5a:	900c      	str	r0, [sp, #48]	; 0x30
 800cb5c:	e7b2      	b.n	800cac4 <_dtoa_r+0x1b4>
 800cb5e:	9b05      	ldr	r3, [sp, #20]
 800cb60:	eba3 030b 	sub.w	r3, r3, fp
 800cb64:	9305      	str	r3, [sp, #20]
 800cb66:	f1cb 0300 	rsb	r3, fp, #0
 800cb6a:	9308      	str	r3, [sp, #32]
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb70:	e7bf      	b.n	800caf2 <_dtoa_r+0x1e2>
 800cb72:	2300      	movs	r3, #0
 800cb74:	9309      	str	r3, [sp, #36]	; 0x24
 800cb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	dc52      	bgt.n	800cc22 <_dtoa_r+0x312>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	9304      	str	r3, [sp, #16]
 800cb82:	461a      	mov	r2, r3
 800cb84:	920a      	str	r2, [sp, #40]	; 0x28
 800cb86:	e00b      	b.n	800cba0 <_dtoa_r+0x290>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e7f3      	b.n	800cb74 <_dtoa_r+0x264>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb92:	445b      	add	r3, fp
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	3301      	adds	r3, #1
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	9304      	str	r3, [sp, #16]
 800cb9c:	bfb8      	it	lt
 800cb9e:	2301      	movlt	r3, #1
 800cba0:	69e0      	ldr	r0, [r4, #28]
 800cba2:	2100      	movs	r1, #0
 800cba4:	2204      	movs	r2, #4
 800cba6:	f102 0614 	add.w	r6, r2, #20
 800cbaa:	429e      	cmp	r6, r3
 800cbac:	d93d      	bls.n	800cc2a <_dtoa_r+0x31a>
 800cbae:	6041      	str	r1, [r0, #4]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f000 fd9f 	bl	800d6f4 <_Balloc>
 800cbb6:	9000      	str	r0, [sp, #0]
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d139      	bne.n	800cc30 <_dtoa_r+0x320>
 800cbbc:	4b16      	ldr	r3, [pc, #88]	; (800cc18 <_dtoa_r+0x308>)
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	f240 11af 	movw	r1, #431	; 0x1af
 800cbc4:	e6bd      	b.n	800c942 <_dtoa_r+0x32>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e7e1      	b.n	800cb8e <_dtoa_r+0x27e>
 800cbca:	2501      	movs	r5, #1
 800cbcc:	2300      	movs	r3, #0
 800cbce:	9307      	str	r3, [sp, #28]
 800cbd0:	9509      	str	r5, [sp, #36]	; 0x24
 800cbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	9304      	str	r3, [sp, #16]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	2312      	movs	r3, #18
 800cbde:	e7d1      	b.n	800cb84 <_dtoa_r+0x274>
 800cbe0:	636f4361 	.word	0x636f4361
 800cbe4:	3fd287a7 	.word	0x3fd287a7
 800cbe8:	8b60c8b3 	.word	0x8b60c8b3
 800cbec:	3fc68a28 	.word	0x3fc68a28
 800cbf0:	509f79fb 	.word	0x509f79fb
 800cbf4:	3fd34413 	.word	0x3fd34413
 800cbf8:	080294b1 	.word	0x080294b1
 800cbfc:	080294c8 	.word	0x080294c8
 800cc00:	7ff00000 	.word	0x7ff00000
 800cc04:	080294ad 	.word	0x080294ad
 800cc08:	080294a4 	.word	0x080294a4
 800cc0c:	08029809 	.word	0x08029809
 800cc10:	3ff80000 	.word	0x3ff80000
 800cc14:	080295b8 	.word	0x080295b8
 800cc18:	08029520 	.word	0x08029520
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc20:	e7d7      	b.n	800cbd2 <_dtoa_r+0x2c2>
 800cc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	e7ba      	b.n	800cba0 <_dtoa_r+0x290>
 800cc2a:	3101      	adds	r1, #1
 800cc2c:	0052      	lsls	r2, r2, #1
 800cc2e:	e7ba      	b.n	800cba6 <_dtoa_r+0x296>
 800cc30:	69e3      	ldr	r3, [r4, #28]
 800cc32:	9a00      	ldr	r2, [sp, #0]
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	9b04      	ldr	r3, [sp, #16]
 800cc38:	2b0e      	cmp	r3, #14
 800cc3a:	f200 80a8 	bhi.w	800cd8e <_dtoa_r+0x47e>
 800cc3e:	2d00      	cmp	r5, #0
 800cc40:	f000 80a5 	beq.w	800cd8e <_dtoa_r+0x47e>
 800cc44:	f1bb 0f00 	cmp.w	fp, #0
 800cc48:	dd38      	ble.n	800ccbc <_dtoa_r+0x3ac>
 800cc4a:	4bc0      	ldr	r3, [pc, #768]	; (800cf4c <_dtoa_r+0x63c>)
 800cc4c:	f00b 020f 	and.w	r2, fp, #15
 800cc50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cc58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cc5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cc60:	d019      	beq.n	800cc96 <_dtoa_r+0x386>
 800cc62:	4bbb      	ldr	r3, [pc, #748]	; (800cf50 <_dtoa_r+0x640>)
 800cc64:	ec51 0b18 	vmov	r0, r1, d8
 800cc68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc6c:	f7f3 fe06 	bl	800087c <__aeabi_ddiv>
 800cc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc74:	f008 080f 	and.w	r8, r8, #15
 800cc78:	2503      	movs	r5, #3
 800cc7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cf50 <_dtoa_r+0x640>
 800cc7e:	f1b8 0f00 	cmp.w	r8, #0
 800cc82:	d10a      	bne.n	800cc9a <_dtoa_r+0x38a>
 800cc84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc88:	4632      	mov	r2, r6
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	f7f3 fdf6 	bl	800087c <__aeabi_ddiv>
 800cc90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc94:	e02b      	b.n	800ccee <_dtoa_r+0x3de>
 800cc96:	2502      	movs	r5, #2
 800cc98:	e7ef      	b.n	800cc7a <_dtoa_r+0x36a>
 800cc9a:	f018 0f01 	tst.w	r8, #1
 800cc9e:	d008      	beq.n	800ccb2 <_dtoa_r+0x3a2>
 800cca0:	4630      	mov	r0, r6
 800cca2:	4639      	mov	r1, r7
 800cca4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cca8:	f7f3 fcbe 	bl	8000628 <__aeabi_dmul>
 800ccac:	3501      	adds	r5, #1
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460f      	mov	r7, r1
 800ccb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ccb6:	f109 0908 	add.w	r9, r9, #8
 800ccba:	e7e0      	b.n	800cc7e <_dtoa_r+0x36e>
 800ccbc:	f000 809f 	beq.w	800cdfe <_dtoa_r+0x4ee>
 800ccc0:	f1cb 0600 	rsb	r6, fp, #0
 800ccc4:	4ba1      	ldr	r3, [pc, #644]	; (800cf4c <_dtoa_r+0x63c>)
 800ccc6:	4fa2      	ldr	r7, [pc, #648]	; (800cf50 <_dtoa_r+0x640>)
 800ccc8:	f006 020f 	and.w	r2, r6, #15
 800cccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	ec51 0b18 	vmov	r0, r1, d8
 800ccd8:	f7f3 fca6 	bl	8000628 <__aeabi_dmul>
 800ccdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cce0:	1136      	asrs	r6, r6, #4
 800cce2:	2300      	movs	r3, #0
 800cce4:	2502      	movs	r5, #2
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	d17e      	bne.n	800cde8 <_dtoa_r+0x4d8>
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1d0      	bne.n	800cc90 <_dtoa_r+0x380>
 800ccee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f000 8084 	beq.w	800ce02 <_dtoa_r+0x4f2>
 800ccfa:	4b96      	ldr	r3, [pc, #600]	; (800cf54 <_dtoa_r+0x644>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4640      	mov	r0, r8
 800cd00:	4649      	mov	r1, r9
 800cd02:	f7f3 ff03 	bl	8000b0c <__aeabi_dcmplt>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d07b      	beq.n	800ce02 <_dtoa_r+0x4f2>
 800cd0a:	9b04      	ldr	r3, [sp, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d078      	beq.n	800ce02 <_dtoa_r+0x4f2>
 800cd10:	9b01      	ldr	r3, [sp, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	dd39      	ble.n	800cd8a <_dtoa_r+0x47a>
 800cd16:	4b90      	ldr	r3, [pc, #576]	; (800cf58 <_dtoa_r+0x648>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	f7f3 fc83 	bl	8000628 <__aeabi_dmul>
 800cd22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd26:	9e01      	ldr	r6, [sp, #4]
 800cd28:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800cd2c:	3501      	adds	r5, #1
 800cd2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cd32:	4628      	mov	r0, r5
 800cd34:	f7f3 fc0e 	bl	8000554 <__aeabi_i2d>
 800cd38:	4642      	mov	r2, r8
 800cd3a:	464b      	mov	r3, r9
 800cd3c:	f7f3 fc74 	bl	8000628 <__aeabi_dmul>
 800cd40:	4b86      	ldr	r3, [pc, #536]	; (800cf5c <_dtoa_r+0x64c>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	f7f3 faba 	bl	80002bc <__adddf3>
 800cd48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd50:	9303      	str	r3, [sp, #12]
 800cd52:	2e00      	cmp	r6, #0
 800cd54:	d158      	bne.n	800ce08 <_dtoa_r+0x4f8>
 800cd56:	4b82      	ldr	r3, [pc, #520]	; (800cf60 <_dtoa_r+0x650>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	f7f3 faab 	bl	80002b8 <__aeabi_dsub>
 800cd62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd66:	4680      	mov	r8, r0
 800cd68:	4689      	mov	r9, r1
 800cd6a:	f7f3 feed 	bl	8000b48 <__aeabi_dcmpgt>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	f040 8296 	bne.w	800d2a0 <_dtoa_r+0x990>
 800cd74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cd78:	4640      	mov	r0, r8
 800cd7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd7e:	4649      	mov	r1, r9
 800cd80:	f7f3 fec4 	bl	8000b0c <__aeabi_dcmplt>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f040 8289 	bne.w	800d29c <_dtoa_r+0x98c>
 800cd8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f2c0 814e 	blt.w	800d032 <_dtoa_r+0x722>
 800cd96:	f1bb 0f0e 	cmp.w	fp, #14
 800cd9a:	f300 814a 	bgt.w	800d032 <_dtoa_r+0x722>
 800cd9e:	4b6b      	ldr	r3, [pc, #428]	; (800cf4c <_dtoa_r+0x63c>)
 800cda0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cda4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f280 80dc 	bge.w	800cf68 <_dtoa_r+0x658>
 800cdb0:	9b04      	ldr	r3, [sp, #16]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f300 80d8 	bgt.w	800cf68 <_dtoa_r+0x658>
 800cdb8:	f040 826f 	bne.w	800d29a <_dtoa_r+0x98a>
 800cdbc:	4b68      	ldr	r3, [pc, #416]	; (800cf60 <_dtoa_r+0x650>)
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	f7f3 fc30 	bl	8000628 <__aeabi_dmul>
 800cdc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdcc:	f7f3 feb2 	bl	8000b34 <__aeabi_dcmpge>
 800cdd0:	9e04      	ldr	r6, [sp, #16]
 800cdd2:	4637      	mov	r7, r6
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	f040 8245 	bne.w	800d264 <_dtoa_r+0x954>
 800cdda:	9d00      	ldr	r5, [sp, #0]
 800cddc:	2331      	movs	r3, #49	; 0x31
 800cdde:	f805 3b01 	strb.w	r3, [r5], #1
 800cde2:	f10b 0b01 	add.w	fp, fp, #1
 800cde6:	e241      	b.n	800d26c <_dtoa_r+0x95c>
 800cde8:	07f2      	lsls	r2, r6, #31
 800cdea:	d505      	bpl.n	800cdf8 <_dtoa_r+0x4e8>
 800cdec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf0:	f7f3 fc1a 	bl	8000628 <__aeabi_dmul>
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	1076      	asrs	r6, r6, #1
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	e773      	b.n	800cce6 <_dtoa_r+0x3d6>
 800cdfe:	2502      	movs	r5, #2
 800ce00:	e775      	b.n	800ccee <_dtoa_r+0x3de>
 800ce02:	9e04      	ldr	r6, [sp, #16]
 800ce04:	465f      	mov	r7, fp
 800ce06:	e792      	b.n	800cd2e <_dtoa_r+0x41e>
 800ce08:	9900      	ldr	r1, [sp, #0]
 800ce0a:	4b50      	ldr	r3, [pc, #320]	; (800cf4c <_dtoa_r+0x63c>)
 800ce0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce10:	4431      	add	r1, r6
 800ce12:	9102      	str	r1, [sp, #8]
 800ce14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce16:	eeb0 9a47 	vmov.f32	s18, s14
 800ce1a:	eef0 9a67 	vmov.f32	s19, s15
 800ce1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ce22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce26:	2900      	cmp	r1, #0
 800ce28:	d044      	beq.n	800ceb4 <_dtoa_r+0x5a4>
 800ce2a:	494e      	ldr	r1, [pc, #312]	; (800cf64 <_dtoa_r+0x654>)
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	f7f3 fd25 	bl	800087c <__aeabi_ddiv>
 800ce32:	ec53 2b19 	vmov	r2, r3, d9
 800ce36:	f7f3 fa3f 	bl	80002b8 <__aeabi_dsub>
 800ce3a:	9d00      	ldr	r5, [sp, #0]
 800ce3c:	ec41 0b19 	vmov	d9, r0, r1
 800ce40:	4649      	mov	r1, r9
 800ce42:	4640      	mov	r0, r8
 800ce44:	f7f3 fea0 	bl	8000b88 <__aeabi_d2iz>
 800ce48:	4606      	mov	r6, r0
 800ce4a:	f7f3 fb83 	bl	8000554 <__aeabi_i2d>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	4640      	mov	r0, r8
 800ce54:	4649      	mov	r1, r9
 800ce56:	f7f3 fa2f 	bl	80002b8 <__aeabi_dsub>
 800ce5a:	3630      	adds	r6, #48	; 0x30
 800ce5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ce60:	ec53 2b19 	vmov	r2, r3, d9
 800ce64:	4680      	mov	r8, r0
 800ce66:	4689      	mov	r9, r1
 800ce68:	f7f3 fe50 	bl	8000b0c <__aeabi_dcmplt>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d164      	bne.n	800cf3a <_dtoa_r+0x62a>
 800ce70:	4642      	mov	r2, r8
 800ce72:	464b      	mov	r3, r9
 800ce74:	4937      	ldr	r1, [pc, #220]	; (800cf54 <_dtoa_r+0x644>)
 800ce76:	2000      	movs	r0, #0
 800ce78:	f7f3 fa1e 	bl	80002b8 <__aeabi_dsub>
 800ce7c:	ec53 2b19 	vmov	r2, r3, d9
 800ce80:	f7f3 fe44 	bl	8000b0c <__aeabi_dcmplt>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	f040 80b6 	bne.w	800cff6 <_dtoa_r+0x6e6>
 800ce8a:	9b02      	ldr	r3, [sp, #8]
 800ce8c:	429d      	cmp	r5, r3
 800ce8e:	f43f af7c 	beq.w	800cd8a <_dtoa_r+0x47a>
 800ce92:	4b31      	ldr	r3, [pc, #196]	; (800cf58 <_dtoa_r+0x648>)
 800ce94:	ec51 0b19 	vmov	r0, r1, d9
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f7f3 fbc5 	bl	8000628 <__aeabi_dmul>
 800ce9e:	4b2e      	ldr	r3, [pc, #184]	; (800cf58 <_dtoa_r+0x648>)
 800cea0:	ec41 0b19 	vmov	d9, r0, r1
 800cea4:	2200      	movs	r2, #0
 800cea6:	4640      	mov	r0, r8
 800cea8:	4649      	mov	r1, r9
 800ceaa:	f7f3 fbbd 	bl	8000628 <__aeabi_dmul>
 800ceae:	4680      	mov	r8, r0
 800ceb0:	4689      	mov	r9, r1
 800ceb2:	e7c5      	b.n	800ce40 <_dtoa_r+0x530>
 800ceb4:	ec51 0b17 	vmov	r0, r1, d7
 800ceb8:	f7f3 fbb6 	bl	8000628 <__aeabi_dmul>
 800cebc:	9b02      	ldr	r3, [sp, #8]
 800cebe:	9d00      	ldr	r5, [sp, #0]
 800cec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cec2:	ec41 0b19 	vmov	d9, r0, r1
 800cec6:	4649      	mov	r1, r9
 800cec8:	4640      	mov	r0, r8
 800ceca:	f7f3 fe5d 	bl	8000b88 <__aeabi_d2iz>
 800cece:	4606      	mov	r6, r0
 800ced0:	f7f3 fb40 	bl	8000554 <__aeabi_i2d>
 800ced4:	3630      	adds	r6, #48	; 0x30
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4640      	mov	r0, r8
 800cedc:	4649      	mov	r1, r9
 800cede:	f7f3 f9eb 	bl	80002b8 <__aeabi_dsub>
 800cee2:	f805 6b01 	strb.w	r6, [r5], #1
 800cee6:	9b02      	ldr	r3, [sp, #8]
 800cee8:	429d      	cmp	r5, r3
 800ceea:	4680      	mov	r8, r0
 800ceec:	4689      	mov	r9, r1
 800ceee:	f04f 0200 	mov.w	r2, #0
 800cef2:	d124      	bne.n	800cf3e <_dtoa_r+0x62e>
 800cef4:	4b1b      	ldr	r3, [pc, #108]	; (800cf64 <_dtoa_r+0x654>)
 800cef6:	ec51 0b19 	vmov	r0, r1, d9
 800cefa:	f7f3 f9df 	bl	80002bc <__adddf3>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4640      	mov	r0, r8
 800cf04:	4649      	mov	r1, r9
 800cf06:	f7f3 fe1f 	bl	8000b48 <__aeabi_dcmpgt>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d173      	bne.n	800cff6 <_dtoa_r+0x6e6>
 800cf0e:	ec53 2b19 	vmov	r2, r3, d9
 800cf12:	4914      	ldr	r1, [pc, #80]	; (800cf64 <_dtoa_r+0x654>)
 800cf14:	2000      	movs	r0, #0
 800cf16:	f7f3 f9cf 	bl	80002b8 <__aeabi_dsub>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4649      	mov	r1, r9
 800cf22:	f7f3 fdf3 	bl	8000b0c <__aeabi_dcmplt>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	f43f af2f 	beq.w	800cd8a <_dtoa_r+0x47a>
 800cf2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cf2e:	1e6b      	subs	r3, r5, #1
 800cf30:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf36:	2b30      	cmp	r3, #48	; 0x30
 800cf38:	d0f8      	beq.n	800cf2c <_dtoa_r+0x61c>
 800cf3a:	46bb      	mov	fp, r7
 800cf3c:	e04a      	b.n	800cfd4 <_dtoa_r+0x6c4>
 800cf3e:	4b06      	ldr	r3, [pc, #24]	; (800cf58 <_dtoa_r+0x648>)
 800cf40:	f7f3 fb72 	bl	8000628 <__aeabi_dmul>
 800cf44:	4680      	mov	r8, r0
 800cf46:	4689      	mov	r9, r1
 800cf48:	e7bd      	b.n	800cec6 <_dtoa_r+0x5b6>
 800cf4a:	bf00      	nop
 800cf4c:	080295b8 	.word	0x080295b8
 800cf50:	08029590 	.word	0x08029590
 800cf54:	3ff00000 	.word	0x3ff00000
 800cf58:	40240000 	.word	0x40240000
 800cf5c:	401c0000 	.word	0x401c0000
 800cf60:	40140000 	.word	0x40140000
 800cf64:	3fe00000 	.word	0x3fe00000
 800cf68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf6c:	9d00      	ldr	r5, [sp, #0]
 800cf6e:	4642      	mov	r2, r8
 800cf70:	464b      	mov	r3, r9
 800cf72:	4630      	mov	r0, r6
 800cf74:	4639      	mov	r1, r7
 800cf76:	f7f3 fc81 	bl	800087c <__aeabi_ddiv>
 800cf7a:	f7f3 fe05 	bl	8000b88 <__aeabi_d2iz>
 800cf7e:	9001      	str	r0, [sp, #4]
 800cf80:	f7f3 fae8 	bl	8000554 <__aeabi_i2d>
 800cf84:	4642      	mov	r2, r8
 800cf86:	464b      	mov	r3, r9
 800cf88:	f7f3 fb4e 	bl	8000628 <__aeabi_dmul>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4630      	mov	r0, r6
 800cf92:	4639      	mov	r1, r7
 800cf94:	f7f3 f990 	bl	80002b8 <__aeabi_dsub>
 800cf98:	9e01      	ldr	r6, [sp, #4]
 800cf9a:	9f04      	ldr	r7, [sp, #16]
 800cf9c:	3630      	adds	r6, #48	; 0x30
 800cf9e:	f805 6b01 	strb.w	r6, [r5], #1
 800cfa2:	9e00      	ldr	r6, [sp, #0]
 800cfa4:	1bae      	subs	r6, r5, r6
 800cfa6:	42b7      	cmp	r7, r6
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	d134      	bne.n	800d018 <_dtoa_r+0x708>
 800cfae:	f7f3 f985 	bl	80002bc <__adddf3>
 800cfb2:	4642      	mov	r2, r8
 800cfb4:	464b      	mov	r3, r9
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	460f      	mov	r7, r1
 800cfba:	f7f3 fdc5 	bl	8000b48 <__aeabi_dcmpgt>
 800cfbe:	b9c8      	cbnz	r0, 800cff4 <_dtoa_r+0x6e4>
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	464b      	mov	r3, r9
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 fd96 	bl	8000af8 <__aeabi_dcmpeq>
 800cfcc:	b110      	cbz	r0, 800cfd4 <_dtoa_r+0x6c4>
 800cfce:	9b01      	ldr	r3, [sp, #4]
 800cfd0:	07db      	lsls	r3, r3, #31
 800cfd2:	d40f      	bmi.n	800cff4 <_dtoa_r+0x6e4>
 800cfd4:	4651      	mov	r1, sl
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 fbcc 	bl	800d774 <_Bfree>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfe0:	702b      	strb	r3, [r5, #0]
 800cfe2:	f10b 0301 	add.w	r3, fp, #1
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f43f ace2 	beq.w	800c9b4 <_dtoa_r+0xa4>
 800cff0:	601d      	str	r5, [r3, #0]
 800cff2:	e4df      	b.n	800c9b4 <_dtoa_r+0xa4>
 800cff4:	465f      	mov	r7, fp
 800cff6:	462b      	mov	r3, r5
 800cff8:	461d      	mov	r5, r3
 800cffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cffe:	2a39      	cmp	r2, #57	; 0x39
 800d000:	d106      	bne.n	800d010 <_dtoa_r+0x700>
 800d002:	9a00      	ldr	r2, [sp, #0]
 800d004:	429a      	cmp	r2, r3
 800d006:	d1f7      	bne.n	800cff8 <_dtoa_r+0x6e8>
 800d008:	9900      	ldr	r1, [sp, #0]
 800d00a:	2230      	movs	r2, #48	; 0x30
 800d00c:	3701      	adds	r7, #1
 800d00e:	700a      	strb	r2, [r1, #0]
 800d010:	781a      	ldrb	r2, [r3, #0]
 800d012:	3201      	adds	r2, #1
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	e790      	b.n	800cf3a <_dtoa_r+0x62a>
 800d018:	4ba3      	ldr	r3, [pc, #652]	; (800d2a8 <_dtoa_r+0x998>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	f7f3 fb04 	bl	8000628 <__aeabi_dmul>
 800d020:	2200      	movs	r2, #0
 800d022:	2300      	movs	r3, #0
 800d024:	4606      	mov	r6, r0
 800d026:	460f      	mov	r7, r1
 800d028:	f7f3 fd66 	bl	8000af8 <__aeabi_dcmpeq>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d09e      	beq.n	800cf6e <_dtoa_r+0x65e>
 800d030:	e7d0      	b.n	800cfd4 <_dtoa_r+0x6c4>
 800d032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d034:	2a00      	cmp	r2, #0
 800d036:	f000 80ca 	beq.w	800d1ce <_dtoa_r+0x8be>
 800d03a:	9a07      	ldr	r2, [sp, #28]
 800d03c:	2a01      	cmp	r2, #1
 800d03e:	f300 80ad 	bgt.w	800d19c <_dtoa_r+0x88c>
 800d042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d044:	2a00      	cmp	r2, #0
 800d046:	f000 80a5 	beq.w	800d194 <_dtoa_r+0x884>
 800d04a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d04e:	9e08      	ldr	r6, [sp, #32]
 800d050:	9d05      	ldr	r5, [sp, #20]
 800d052:	9a05      	ldr	r2, [sp, #20]
 800d054:	441a      	add	r2, r3
 800d056:	9205      	str	r2, [sp, #20]
 800d058:	9a06      	ldr	r2, [sp, #24]
 800d05a:	2101      	movs	r1, #1
 800d05c:	441a      	add	r2, r3
 800d05e:	4620      	mov	r0, r4
 800d060:	9206      	str	r2, [sp, #24]
 800d062:	f000 fc87 	bl	800d974 <__i2b>
 800d066:	4607      	mov	r7, r0
 800d068:	b165      	cbz	r5, 800d084 <_dtoa_r+0x774>
 800d06a:	9b06      	ldr	r3, [sp, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	dd09      	ble.n	800d084 <_dtoa_r+0x774>
 800d070:	42ab      	cmp	r3, r5
 800d072:	9a05      	ldr	r2, [sp, #20]
 800d074:	bfa8      	it	ge
 800d076:	462b      	movge	r3, r5
 800d078:	1ad2      	subs	r2, r2, r3
 800d07a:	9205      	str	r2, [sp, #20]
 800d07c:	9a06      	ldr	r2, [sp, #24]
 800d07e:	1aed      	subs	r5, r5, r3
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	9306      	str	r3, [sp, #24]
 800d084:	9b08      	ldr	r3, [sp, #32]
 800d086:	b1f3      	cbz	r3, 800d0c6 <_dtoa_r+0x7b6>
 800d088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 80a3 	beq.w	800d1d6 <_dtoa_r+0x8c6>
 800d090:	2e00      	cmp	r6, #0
 800d092:	dd10      	ble.n	800d0b6 <_dtoa_r+0x7a6>
 800d094:	4639      	mov	r1, r7
 800d096:	4632      	mov	r2, r6
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fd2b 	bl	800daf4 <__pow5mult>
 800d09e:	4652      	mov	r2, sl
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 fc7b 	bl	800d9a0 <__multiply>
 800d0aa:	4651      	mov	r1, sl
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f000 fb60 	bl	800d774 <_Bfree>
 800d0b4:	46c2      	mov	sl, r8
 800d0b6:	9b08      	ldr	r3, [sp, #32]
 800d0b8:	1b9a      	subs	r2, r3, r6
 800d0ba:	d004      	beq.n	800d0c6 <_dtoa_r+0x7b6>
 800d0bc:	4651      	mov	r1, sl
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 fd18 	bl	800daf4 <__pow5mult>
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fc53 	bl	800d974 <__i2b>
 800d0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	f340 8081 	ble.w	800d1da <_dtoa_r+0x8ca>
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4601      	mov	r1, r0
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fd09 	bl	800daf4 <__pow5mult>
 800d0e2:	9b07      	ldr	r3, [sp, #28]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	dd7a      	ble.n	800d1e0 <_dtoa_r+0x8d0>
 800d0ea:	f04f 0800 	mov.w	r8, #0
 800d0ee:	6933      	ldr	r3, [r6, #16]
 800d0f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d0f4:	6918      	ldr	r0, [r3, #16]
 800d0f6:	f000 fbef 	bl	800d8d8 <__hi0bits>
 800d0fa:	f1c0 0020 	rsb	r0, r0, #32
 800d0fe:	9b06      	ldr	r3, [sp, #24]
 800d100:	4418      	add	r0, r3
 800d102:	f010 001f 	ands.w	r0, r0, #31
 800d106:	f000 8094 	beq.w	800d232 <_dtoa_r+0x922>
 800d10a:	f1c0 0320 	rsb	r3, r0, #32
 800d10e:	2b04      	cmp	r3, #4
 800d110:	f340 8085 	ble.w	800d21e <_dtoa_r+0x90e>
 800d114:	9b05      	ldr	r3, [sp, #20]
 800d116:	f1c0 001c 	rsb	r0, r0, #28
 800d11a:	4403      	add	r3, r0
 800d11c:	9305      	str	r3, [sp, #20]
 800d11e:	9b06      	ldr	r3, [sp, #24]
 800d120:	4403      	add	r3, r0
 800d122:	4405      	add	r5, r0
 800d124:	9306      	str	r3, [sp, #24]
 800d126:	9b05      	ldr	r3, [sp, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	dd05      	ble.n	800d138 <_dtoa_r+0x828>
 800d12c:	4651      	mov	r1, sl
 800d12e:	461a      	mov	r2, r3
 800d130:	4620      	mov	r0, r4
 800d132:	f000 fd39 	bl	800dba8 <__lshift>
 800d136:	4682      	mov	sl, r0
 800d138:	9b06      	ldr	r3, [sp, #24]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dd05      	ble.n	800d14a <_dtoa_r+0x83a>
 800d13e:	4631      	mov	r1, r6
 800d140:	461a      	mov	r2, r3
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fd30 	bl	800dba8 <__lshift>
 800d148:	4606      	mov	r6, r0
 800d14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d072      	beq.n	800d236 <_dtoa_r+0x926>
 800d150:	4631      	mov	r1, r6
 800d152:	4650      	mov	r0, sl
 800d154:	f000 fd94 	bl	800dc80 <__mcmp>
 800d158:	2800      	cmp	r0, #0
 800d15a:	da6c      	bge.n	800d236 <_dtoa_r+0x926>
 800d15c:	2300      	movs	r3, #0
 800d15e:	4651      	mov	r1, sl
 800d160:	220a      	movs	r2, #10
 800d162:	4620      	mov	r0, r4
 800d164:	f000 fb28 	bl	800d7b8 <__multadd>
 800d168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d16e:	4682      	mov	sl, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 81b0 	beq.w	800d4d6 <_dtoa_r+0xbc6>
 800d176:	2300      	movs	r3, #0
 800d178:	4639      	mov	r1, r7
 800d17a:	220a      	movs	r2, #10
 800d17c:	4620      	mov	r0, r4
 800d17e:	f000 fb1b 	bl	800d7b8 <__multadd>
 800d182:	9b01      	ldr	r3, [sp, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	4607      	mov	r7, r0
 800d188:	f300 8096 	bgt.w	800d2b8 <_dtoa_r+0x9a8>
 800d18c:	9b07      	ldr	r3, [sp, #28]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	dc59      	bgt.n	800d246 <_dtoa_r+0x936>
 800d192:	e091      	b.n	800d2b8 <_dtoa_r+0x9a8>
 800d194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d19a:	e758      	b.n	800d04e <_dtoa_r+0x73e>
 800d19c:	9b04      	ldr	r3, [sp, #16]
 800d19e:	1e5e      	subs	r6, r3, #1
 800d1a0:	9b08      	ldr	r3, [sp, #32]
 800d1a2:	42b3      	cmp	r3, r6
 800d1a4:	bfbf      	itttt	lt
 800d1a6:	9b08      	ldrlt	r3, [sp, #32]
 800d1a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d1aa:	9608      	strlt	r6, [sp, #32]
 800d1ac:	1af3      	sublt	r3, r6, r3
 800d1ae:	bfb4      	ite	lt
 800d1b0:	18d2      	addlt	r2, r2, r3
 800d1b2:	1b9e      	subge	r6, r3, r6
 800d1b4:	9b04      	ldr	r3, [sp, #16]
 800d1b6:	bfbc      	itt	lt
 800d1b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d1ba:	2600      	movlt	r6, #0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	bfb7      	itett	lt
 800d1c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d1c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d1c8:	1a9d      	sublt	r5, r3, r2
 800d1ca:	2300      	movlt	r3, #0
 800d1cc:	e741      	b.n	800d052 <_dtoa_r+0x742>
 800d1ce:	9e08      	ldr	r6, [sp, #32]
 800d1d0:	9d05      	ldr	r5, [sp, #20]
 800d1d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d1d4:	e748      	b.n	800d068 <_dtoa_r+0x758>
 800d1d6:	9a08      	ldr	r2, [sp, #32]
 800d1d8:	e770      	b.n	800d0bc <_dtoa_r+0x7ac>
 800d1da:	9b07      	ldr	r3, [sp, #28]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	dc19      	bgt.n	800d214 <_dtoa_r+0x904>
 800d1e0:	9b02      	ldr	r3, [sp, #8]
 800d1e2:	b9bb      	cbnz	r3, 800d214 <_dtoa_r+0x904>
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1ea:	b99b      	cbnz	r3, 800d214 <_dtoa_r+0x904>
 800d1ec:	9b03      	ldr	r3, [sp, #12]
 800d1ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1f2:	0d1b      	lsrs	r3, r3, #20
 800d1f4:	051b      	lsls	r3, r3, #20
 800d1f6:	b183      	cbz	r3, 800d21a <_dtoa_r+0x90a>
 800d1f8:	9b05      	ldr	r3, [sp, #20]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	9305      	str	r3, [sp, #20]
 800d1fe:	9b06      	ldr	r3, [sp, #24]
 800d200:	3301      	adds	r3, #1
 800d202:	9306      	str	r3, [sp, #24]
 800d204:	f04f 0801 	mov.w	r8, #1
 800d208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f47f af6f 	bne.w	800d0ee <_dtoa_r+0x7de>
 800d210:	2001      	movs	r0, #1
 800d212:	e774      	b.n	800d0fe <_dtoa_r+0x7ee>
 800d214:	f04f 0800 	mov.w	r8, #0
 800d218:	e7f6      	b.n	800d208 <_dtoa_r+0x8f8>
 800d21a:	4698      	mov	r8, r3
 800d21c:	e7f4      	b.n	800d208 <_dtoa_r+0x8f8>
 800d21e:	d082      	beq.n	800d126 <_dtoa_r+0x816>
 800d220:	9a05      	ldr	r2, [sp, #20]
 800d222:	331c      	adds	r3, #28
 800d224:	441a      	add	r2, r3
 800d226:	9205      	str	r2, [sp, #20]
 800d228:	9a06      	ldr	r2, [sp, #24]
 800d22a:	441a      	add	r2, r3
 800d22c:	441d      	add	r5, r3
 800d22e:	9206      	str	r2, [sp, #24]
 800d230:	e779      	b.n	800d126 <_dtoa_r+0x816>
 800d232:	4603      	mov	r3, r0
 800d234:	e7f4      	b.n	800d220 <_dtoa_r+0x910>
 800d236:	9b04      	ldr	r3, [sp, #16]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	dc37      	bgt.n	800d2ac <_dtoa_r+0x99c>
 800d23c:	9b07      	ldr	r3, [sp, #28]
 800d23e:	2b02      	cmp	r3, #2
 800d240:	dd34      	ble.n	800d2ac <_dtoa_r+0x99c>
 800d242:	9b04      	ldr	r3, [sp, #16]
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	9b01      	ldr	r3, [sp, #4]
 800d248:	b963      	cbnz	r3, 800d264 <_dtoa_r+0x954>
 800d24a:	4631      	mov	r1, r6
 800d24c:	2205      	movs	r2, #5
 800d24e:	4620      	mov	r0, r4
 800d250:	f000 fab2 	bl	800d7b8 <__multadd>
 800d254:	4601      	mov	r1, r0
 800d256:	4606      	mov	r6, r0
 800d258:	4650      	mov	r0, sl
 800d25a:	f000 fd11 	bl	800dc80 <__mcmp>
 800d25e:	2800      	cmp	r0, #0
 800d260:	f73f adbb 	bgt.w	800cdda <_dtoa_r+0x4ca>
 800d264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d266:	9d00      	ldr	r5, [sp, #0]
 800d268:	ea6f 0b03 	mvn.w	fp, r3
 800d26c:	f04f 0800 	mov.w	r8, #0
 800d270:	4631      	mov	r1, r6
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fa7e 	bl	800d774 <_Bfree>
 800d278:	2f00      	cmp	r7, #0
 800d27a:	f43f aeab 	beq.w	800cfd4 <_dtoa_r+0x6c4>
 800d27e:	f1b8 0f00 	cmp.w	r8, #0
 800d282:	d005      	beq.n	800d290 <_dtoa_r+0x980>
 800d284:	45b8      	cmp	r8, r7
 800d286:	d003      	beq.n	800d290 <_dtoa_r+0x980>
 800d288:	4641      	mov	r1, r8
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 fa72 	bl	800d774 <_Bfree>
 800d290:	4639      	mov	r1, r7
 800d292:	4620      	mov	r0, r4
 800d294:	f000 fa6e 	bl	800d774 <_Bfree>
 800d298:	e69c      	b.n	800cfd4 <_dtoa_r+0x6c4>
 800d29a:	2600      	movs	r6, #0
 800d29c:	4637      	mov	r7, r6
 800d29e:	e7e1      	b.n	800d264 <_dtoa_r+0x954>
 800d2a0:	46bb      	mov	fp, r7
 800d2a2:	4637      	mov	r7, r6
 800d2a4:	e599      	b.n	800cdda <_dtoa_r+0x4ca>
 800d2a6:	bf00      	nop
 800d2a8:	40240000 	.word	0x40240000
 800d2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 80c8 	beq.w	800d444 <_dtoa_r+0xb34>
 800d2b4:	9b04      	ldr	r3, [sp, #16]
 800d2b6:	9301      	str	r3, [sp, #4]
 800d2b8:	2d00      	cmp	r5, #0
 800d2ba:	dd05      	ble.n	800d2c8 <_dtoa_r+0x9b8>
 800d2bc:	4639      	mov	r1, r7
 800d2be:	462a      	mov	r2, r5
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fc71 	bl	800dba8 <__lshift>
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	f1b8 0f00 	cmp.w	r8, #0
 800d2cc:	d05b      	beq.n	800d386 <_dtoa_r+0xa76>
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 fa0f 	bl	800d6f4 <_Balloc>
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	b928      	cbnz	r0, 800d2e6 <_dtoa_r+0x9d6>
 800d2da:	4b83      	ldr	r3, [pc, #524]	; (800d4e8 <_dtoa_r+0xbd8>)
 800d2dc:	4602      	mov	r2, r0
 800d2de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d2e2:	f7ff bb2e 	b.w	800c942 <_dtoa_r+0x32>
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	3202      	adds	r2, #2
 800d2ea:	0092      	lsls	r2, r2, #2
 800d2ec:	f107 010c 	add.w	r1, r7, #12
 800d2f0:	300c      	adds	r0, #12
 800d2f2:	f7ff fa6e 	bl	800c7d2 <memcpy>
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fc54 	bl	800dba8 <__lshift>
 800d300:	9b00      	ldr	r3, [sp, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	9304      	str	r3, [sp, #16]
 800d306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d30a:	4413      	add	r3, r2
 800d30c:	9308      	str	r3, [sp, #32]
 800d30e:	9b02      	ldr	r3, [sp, #8]
 800d310:	f003 0301 	and.w	r3, r3, #1
 800d314:	46b8      	mov	r8, r7
 800d316:	9306      	str	r3, [sp, #24]
 800d318:	4607      	mov	r7, r0
 800d31a:	9b04      	ldr	r3, [sp, #16]
 800d31c:	4631      	mov	r1, r6
 800d31e:	3b01      	subs	r3, #1
 800d320:	4650      	mov	r0, sl
 800d322:	9301      	str	r3, [sp, #4]
 800d324:	f7ff fa6a 	bl	800c7fc <quorem>
 800d328:	4641      	mov	r1, r8
 800d32a:	9002      	str	r0, [sp, #8]
 800d32c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d330:	4650      	mov	r0, sl
 800d332:	f000 fca5 	bl	800dc80 <__mcmp>
 800d336:	463a      	mov	r2, r7
 800d338:	9005      	str	r0, [sp, #20]
 800d33a:	4631      	mov	r1, r6
 800d33c:	4620      	mov	r0, r4
 800d33e:	f000 fcbb 	bl	800dcb8 <__mdiff>
 800d342:	68c2      	ldr	r2, [r0, #12]
 800d344:	4605      	mov	r5, r0
 800d346:	bb02      	cbnz	r2, 800d38a <_dtoa_r+0xa7a>
 800d348:	4601      	mov	r1, r0
 800d34a:	4650      	mov	r0, sl
 800d34c:	f000 fc98 	bl	800dc80 <__mcmp>
 800d350:	4602      	mov	r2, r0
 800d352:	4629      	mov	r1, r5
 800d354:	4620      	mov	r0, r4
 800d356:	9209      	str	r2, [sp, #36]	; 0x24
 800d358:	f000 fa0c 	bl	800d774 <_Bfree>
 800d35c:	9b07      	ldr	r3, [sp, #28]
 800d35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d360:	9d04      	ldr	r5, [sp, #16]
 800d362:	ea43 0102 	orr.w	r1, r3, r2
 800d366:	9b06      	ldr	r3, [sp, #24]
 800d368:	4319      	orrs	r1, r3
 800d36a:	d110      	bne.n	800d38e <_dtoa_r+0xa7e>
 800d36c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d370:	d029      	beq.n	800d3c6 <_dtoa_r+0xab6>
 800d372:	9b05      	ldr	r3, [sp, #20]
 800d374:	2b00      	cmp	r3, #0
 800d376:	dd02      	ble.n	800d37e <_dtoa_r+0xa6e>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d37e:	9b01      	ldr	r3, [sp, #4]
 800d380:	f883 9000 	strb.w	r9, [r3]
 800d384:	e774      	b.n	800d270 <_dtoa_r+0x960>
 800d386:	4638      	mov	r0, r7
 800d388:	e7ba      	b.n	800d300 <_dtoa_r+0x9f0>
 800d38a:	2201      	movs	r2, #1
 800d38c:	e7e1      	b.n	800d352 <_dtoa_r+0xa42>
 800d38e:	9b05      	ldr	r3, [sp, #20]
 800d390:	2b00      	cmp	r3, #0
 800d392:	db04      	blt.n	800d39e <_dtoa_r+0xa8e>
 800d394:	9907      	ldr	r1, [sp, #28]
 800d396:	430b      	orrs	r3, r1
 800d398:	9906      	ldr	r1, [sp, #24]
 800d39a:	430b      	orrs	r3, r1
 800d39c:	d120      	bne.n	800d3e0 <_dtoa_r+0xad0>
 800d39e:	2a00      	cmp	r2, #0
 800d3a0:	dded      	ble.n	800d37e <_dtoa_r+0xa6e>
 800d3a2:	4651      	mov	r1, sl
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f000 fbfe 	bl	800dba8 <__lshift>
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4682      	mov	sl, r0
 800d3b0:	f000 fc66 	bl	800dc80 <__mcmp>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	dc03      	bgt.n	800d3c0 <_dtoa_r+0xab0>
 800d3b8:	d1e1      	bne.n	800d37e <_dtoa_r+0xa6e>
 800d3ba:	f019 0f01 	tst.w	r9, #1
 800d3be:	d0de      	beq.n	800d37e <_dtoa_r+0xa6e>
 800d3c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d3c4:	d1d8      	bne.n	800d378 <_dtoa_r+0xa68>
 800d3c6:	9a01      	ldr	r2, [sp, #4]
 800d3c8:	2339      	movs	r3, #57	; 0x39
 800d3ca:	7013      	strb	r3, [r2, #0]
 800d3cc:	462b      	mov	r3, r5
 800d3ce:	461d      	mov	r5, r3
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d3d6:	2a39      	cmp	r2, #57	; 0x39
 800d3d8:	d06c      	beq.n	800d4b4 <_dtoa_r+0xba4>
 800d3da:	3201      	adds	r2, #1
 800d3dc:	701a      	strb	r2, [r3, #0]
 800d3de:	e747      	b.n	800d270 <_dtoa_r+0x960>
 800d3e0:	2a00      	cmp	r2, #0
 800d3e2:	dd07      	ble.n	800d3f4 <_dtoa_r+0xae4>
 800d3e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d3e8:	d0ed      	beq.n	800d3c6 <_dtoa_r+0xab6>
 800d3ea:	9a01      	ldr	r2, [sp, #4]
 800d3ec:	f109 0301 	add.w	r3, r9, #1
 800d3f0:	7013      	strb	r3, [r2, #0]
 800d3f2:	e73d      	b.n	800d270 <_dtoa_r+0x960>
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	9a08      	ldr	r2, [sp, #32]
 800d3f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d043      	beq.n	800d488 <_dtoa_r+0xb78>
 800d400:	4651      	mov	r1, sl
 800d402:	2300      	movs	r3, #0
 800d404:	220a      	movs	r2, #10
 800d406:	4620      	mov	r0, r4
 800d408:	f000 f9d6 	bl	800d7b8 <__multadd>
 800d40c:	45b8      	cmp	r8, r7
 800d40e:	4682      	mov	sl, r0
 800d410:	f04f 0300 	mov.w	r3, #0
 800d414:	f04f 020a 	mov.w	r2, #10
 800d418:	4641      	mov	r1, r8
 800d41a:	4620      	mov	r0, r4
 800d41c:	d107      	bne.n	800d42e <_dtoa_r+0xb1e>
 800d41e:	f000 f9cb 	bl	800d7b8 <__multadd>
 800d422:	4680      	mov	r8, r0
 800d424:	4607      	mov	r7, r0
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	3301      	adds	r3, #1
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	e775      	b.n	800d31a <_dtoa_r+0xa0a>
 800d42e:	f000 f9c3 	bl	800d7b8 <__multadd>
 800d432:	4639      	mov	r1, r7
 800d434:	4680      	mov	r8, r0
 800d436:	2300      	movs	r3, #0
 800d438:	220a      	movs	r2, #10
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 f9bc 	bl	800d7b8 <__multadd>
 800d440:	4607      	mov	r7, r0
 800d442:	e7f0      	b.n	800d426 <_dtoa_r+0xb16>
 800d444:	9b04      	ldr	r3, [sp, #16]
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	9d00      	ldr	r5, [sp, #0]
 800d44a:	4631      	mov	r1, r6
 800d44c:	4650      	mov	r0, sl
 800d44e:	f7ff f9d5 	bl	800c7fc <quorem>
 800d452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d456:	9b00      	ldr	r3, [sp, #0]
 800d458:	f805 9b01 	strb.w	r9, [r5], #1
 800d45c:	1aea      	subs	r2, r5, r3
 800d45e:	9b01      	ldr	r3, [sp, #4]
 800d460:	4293      	cmp	r3, r2
 800d462:	dd07      	ble.n	800d474 <_dtoa_r+0xb64>
 800d464:	4651      	mov	r1, sl
 800d466:	2300      	movs	r3, #0
 800d468:	220a      	movs	r2, #10
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 f9a4 	bl	800d7b8 <__multadd>
 800d470:	4682      	mov	sl, r0
 800d472:	e7ea      	b.n	800d44a <_dtoa_r+0xb3a>
 800d474:	9b01      	ldr	r3, [sp, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfc8      	it	gt
 800d47a:	461d      	movgt	r5, r3
 800d47c:	9b00      	ldr	r3, [sp, #0]
 800d47e:	bfd8      	it	le
 800d480:	2501      	movle	r5, #1
 800d482:	441d      	add	r5, r3
 800d484:	f04f 0800 	mov.w	r8, #0
 800d488:	4651      	mov	r1, sl
 800d48a:	2201      	movs	r2, #1
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 fb8b 	bl	800dba8 <__lshift>
 800d492:	4631      	mov	r1, r6
 800d494:	4682      	mov	sl, r0
 800d496:	f000 fbf3 	bl	800dc80 <__mcmp>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	dc96      	bgt.n	800d3cc <_dtoa_r+0xabc>
 800d49e:	d102      	bne.n	800d4a6 <_dtoa_r+0xb96>
 800d4a0:	f019 0f01 	tst.w	r9, #1
 800d4a4:	d192      	bne.n	800d3cc <_dtoa_r+0xabc>
 800d4a6:	462b      	mov	r3, r5
 800d4a8:	461d      	mov	r5, r3
 800d4aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4ae:	2a30      	cmp	r2, #48	; 0x30
 800d4b0:	d0fa      	beq.n	800d4a8 <_dtoa_r+0xb98>
 800d4b2:	e6dd      	b.n	800d270 <_dtoa_r+0x960>
 800d4b4:	9a00      	ldr	r2, [sp, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d189      	bne.n	800d3ce <_dtoa_r+0xabe>
 800d4ba:	f10b 0b01 	add.w	fp, fp, #1
 800d4be:	2331      	movs	r3, #49	; 0x31
 800d4c0:	e796      	b.n	800d3f0 <_dtoa_r+0xae0>
 800d4c2:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <_dtoa_r+0xbdc>)
 800d4c4:	f7ff ba99 	b.w	800c9fa <_dtoa_r+0xea>
 800d4c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f47f aa6d 	bne.w	800c9aa <_dtoa_r+0x9a>
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <_dtoa_r+0xbe0>)
 800d4d2:	f7ff ba92 	b.w	800c9fa <_dtoa_r+0xea>
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dcb5      	bgt.n	800d448 <_dtoa_r+0xb38>
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	f73f aeb1 	bgt.w	800d246 <_dtoa_r+0x936>
 800d4e4:	e7b0      	b.n	800d448 <_dtoa_r+0xb38>
 800d4e6:	bf00      	nop
 800d4e8:	08029520 	.word	0x08029520
 800d4ec:	08029808 	.word	0x08029808
 800d4f0:	080294a4 	.word	0x080294a4

0800d4f4 <_free_r>:
 800d4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4f6:	2900      	cmp	r1, #0
 800d4f8:	d044      	beq.n	800d584 <_free_r+0x90>
 800d4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4fe:	9001      	str	r0, [sp, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	f1a1 0404 	sub.w	r4, r1, #4
 800d506:	bfb8      	it	lt
 800d508:	18e4      	addlt	r4, r4, r3
 800d50a:	f000 f8e7 	bl	800d6dc <__malloc_lock>
 800d50e:	4a1e      	ldr	r2, [pc, #120]	; (800d588 <_free_r+0x94>)
 800d510:	9801      	ldr	r0, [sp, #4]
 800d512:	6813      	ldr	r3, [r2, #0]
 800d514:	b933      	cbnz	r3, 800d524 <_free_r+0x30>
 800d516:	6063      	str	r3, [r4, #4]
 800d518:	6014      	str	r4, [r2, #0]
 800d51a:	b003      	add	sp, #12
 800d51c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d520:	f000 b8e2 	b.w	800d6e8 <__malloc_unlock>
 800d524:	42a3      	cmp	r3, r4
 800d526:	d908      	bls.n	800d53a <_free_r+0x46>
 800d528:	6825      	ldr	r5, [r4, #0]
 800d52a:	1961      	adds	r1, r4, r5
 800d52c:	428b      	cmp	r3, r1
 800d52e:	bf01      	itttt	eq
 800d530:	6819      	ldreq	r1, [r3, #0]
 800d532:	685b      	ldreq	r3, [r3, #4]
 800d534:	1949      	addeq	r1, r1, r5
 800d536:	6021      	streq	r1, [r4, #0]
 800d538:	e7ed      	b.n	800d516 <_free_r+0x22>
 800d53a:	461a      	mov	r2, r3
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	b10b      	cbz	r3, 800d544 <_free_r+0x50>
 800d540:	42a3      	cmp	r3, r4
 800d542:	d9fa      	bls.n	800d53a <_free_r+0x46>
 800d544:	6811      	ldr	r1, [r2, #0]
 800d546:	1855      	adds	r5, r2, r1
 800d548:	42a5      	cmp	r5, r4
 800d54a:	d10b      	bne.n	800d564 <_free_r+0x70>
 800d54c:	6824      	ldr	r4, [r4, #0]
 800d54e:	4421      	add	r1, r4
 800d550:	1854      	adds	r4, r2, r1
 800d552:	42a3      	cmp	r3, r4
 800d554:	6011      	str	r1, [r2, #0]
 800d556:	d1e0      	bne.n	800d51a <_free_r+0x26>
 800d558:	681c      	ldr	r4, [r3, #0]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	6053      	str	r3, [r2, #4]
 800d55e:	440c      	add	r4, r1
 800d560:	6014      	str	r4, [r2, #0]
 800d562:	e7da      	b.n	800d51a <_free_r+0x26>
 800d564:	d902      	bls.n	800d56c <_free_r+0x78>
 800d566:	230c      	movs	r3, #12
 800d568:	6003      	str	r3, [r0, #0]
 800d56a:	e7d6      	b.n	800d51a <_free_r+0x26>
 800d56c:	6825      	ldr	r5, [r4, #0]
 800d56e:	1961      	adds	r1, r4, r5
 800d570:	428b      	cmp	r3, r1
 800d572:	bf04      	itt	eq
 800d574:	6819      	ldreq	r1, [r3, #0]
 800d576:	685b      	ldreq	r3, [r3, #4]
 800d578:	6063      	str	r3, [r4, #4]
 800d57a:	bf04      	itt	eq
 800d57c:	1949      	addeq	r1, r1, r5
 800d57e:	6021      	streq	r1, [r4, #0]
 800d580:	6054      	str	r4, [r2, #4]
 800d582:	e7ca      	b.n	800d51a <_free_r+0x26>
 800d584:	b003      	add	sp, #12
 800d586:	bd30      	pop	{r4, r5, pc}
 800d588:	2000667c 	.word	0x2000667c

0800d58c <malloc>:
 800d58c:	4b02      	ldr	r3, [pc, #8]	; (800d598 <malloc+0xc>)
 800d58e:	4601      	mov	r1, r0
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	f000 b823 	b.w	800d5dc <_malloc_r>
 800d596:	bf00      	nop
 800d598:	200003a4 	.word	0x200003a4

0800d59c <sbrk_aligned>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	4e0e      	ldr	r6, [pc, #56]	; (800d5d8 <sbrk_aligned+0x3c>)
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	6831      	ldr	r1, [r6, #0]
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	b911      	cbnz	r1, 800d5ae <sbrk_aligned+0x12>
 800d5a8:	f002 faea 	bl	800fb80 <_sbrk_r>
 800d5ac:	6030      	str	r0, [r6, #0]
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f002 fae5 	bl	800fb80 <_sbrk_r>
 800d5b6:	1c43      	adds	r3, r0, #1
 800d5b8:	d00a      	beq.n	800d5d0 <sbrk_aligned+0x34>
 800d5ba:	1cc4      	adds	r4, r0, #3
 800d5bc:	f024 0403 	bic.w	r4, r4, #3
 800d5c0:	42a0      	cmp	r0, r4
 800d5c2:	d007      	beq.n	800d5d4 <sbrk_aligned+0x38>
 800d5c4:	1a21      	subs	r1, r4, r0
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f002 fada 	bl	800fb80 <_sbrk_r>
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	d101      	bne.n	800d5d4 <sbrk_aligned+0x38>
 800d5d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	20006680 	.word	0x20006680

0800d5dc <_malloc_r>:
 800d5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e0:	1ccd      	adds	r5, r1, #3
 800d5e2:	f025 0503 	bic.w	r5, r5, #3
 800d5e6:	3508      	adds	r5, #8
 800d5e8:	2d0c      	cmp	r5, #12
 800d5ea:	bf38      	it	cc
 800d5ec:	250c      	movcc	r5, #12
 800d5ee:	2d00      	cmp	r5, #0
 800d5f0:	4607      	mov	r7, r0
 800d5f2:	db01      	blt.n	800d5f8 <_malloc_r+0x1c>
 800d5f4:	42a9      	cmp	r1, r5
 800d5f6:	d905      	bls.n	800d604 <_malloc_r+0x28>
 800d5f8:	230c      	movs	r3, #12
 800d5fa:	603b      	str	r3, [r7, #0]
 800d5fc:	2600      	movs	r6, #0
 800d5fe:	4630      	mov	r0, r6
 800d600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6d8 <_malloc_r+0xfc>
 800d608:	f000 f868 	bl	800d6dc <__malloc_lock>
 800d60c:	f8d8 3000 	ldr.w	r3, [r8]
 800d610:	461c      	mov	r4, r3
 800d612:	bb5c      	cbnz	r4, 800d66c <_malloc_r+0x90>
 800d614:	4629      	mov	r1, r5
 800d616:	4638      	mov	r0, r7
 800d618:	f7ff ffc0 	bl	800d59c <sbrk_aligned>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	4604      	mov	r4, r0
 800d620:	d155      	bne.n	800d6ce <_malloc_r+0xf2>
 800d622:	f8d8 4000 	ldr.w	r4, [r8]
 800d626:	4626      	mov	r6, r4
 800d628:	2e00      	cmp	r6, #0
 800d62a:	d145      	bne.n	800d6b8 <_malloc_r+0xdc>
 800d62c:	2c00      	cmp	r4, #0
 800d62e:	d048      	beq.n	800d6c2 <_malloc_r+0xe6>
 800d630:	6823      	ldr	r3, [r4, #0]
 800d632:	4631      	mov	r1, r6
 800d634:	4638      	mov	r0, r7
 800d636:	eb04 0903 	add.w	r9, r4, r3
 800d63a:	f002 faa1 	bl	800fb80 <_sbrk_r>
 800d63e:	4581      	cmp	r9, r0
 800d640:	d13f      	bne.n	800d6c2 <_malloc_r+0xe6>
 800d642:	6821      	ldr	r1, [r4, #0]
 800d644:	1a6d      	subs	r5, r5, r1
 800d646:	4629      	mov	r1, r5
 800d648:	4638      	mov	r0, r7
 800d64a:	f7ff ffa7 	bl	800d59c <sbrk_aligned>
 800d64e:	3001      	adds	r0, #1
 800d650:	d037      	beq.n	800d6c2 <_malloc_r+0xe6>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	442b      	add	r3, r5
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	f8d8 3000 	ldr.w	r3, [r8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d038      	beq.n	800d6d2 <_malloc_r+0xf6>
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	42a2      	cmp	r2, r4
 800d664:	d12b      	bne.n	800d6be <_malloc_r+0xe2>
 800d666:	2200      	movs	r2, #0
 800d668:	605a      	str	r2, [r3, #4]
 800d66a:	e00f      	b.n	800d68c <_malloc_r+0xb0>
 800d66c:	6822      	ldr	r2, [r4, #0]
 800d66e:	1b52      	subs	r2, r2, r5
 800d670:	d41f      	bmi.n	800d6b2 <_malloc_r+0xd6>
 800d672:	2a0b      	cmp	r2, #11
 800d674:	d917      	bls.n	800d6a6 <_malloc_r+0xca>
 800d676:	1961      	adds	r1, r4, r5
 800d678:	42a3      	cmp	r3, r4
 800d67a:	6025      	str	r5, [r4, #0]
 800d67c:	bf18      	it	ne
 800d67e:	6059      	strne	r1, [r3, #4]
 800d680:	6863      	ldr	r3, [r4, #4]
 800d682:	bf08      	it	eq
 800d684:	f8c8 1000 	streq.w	r1, [r8]
 800d688:	5162      	str	r2, [r4, r5]
 800d68a:	604b      	str	r3, [r1, #4]
 800d68c:	4638      	mov	r0, r7
 800d68e:	f104 060b 	add.w	r6, r4, #11
 800d692:	f000 f829 	bl	800d6e8 <__malloc_unlock>
 800d696:	f026 0607 	bic.w	r6, r6, #7
 800d69a:	1d23      	adds	r3, r4, #4
 800d69c:	1af2      	subs	r2, r6, r3
 800d69e:	d0ae      	beq.n	800d5fe <_malloc_r+0x22>
 800d6a0:	1b9b      	subs	r3, r3, r6
 800d6a2:	50a3      	str	r3, [r4, r2]
 800d6a4:	e7ab      	b.n	800d5fe <_malloc_r+0x22>
 800d6a6:	42a3      	cmp	r3, r4
 800d6a8:	6862      	ldr	r2, [r4, #4]
 800d6aa:	d1dd      	bne.n	800d668 <_malloc_r+0x8c>
 800d6ac:	f8c8 2000 	str.w	r2, [r8]
 800d6b0:	e7ec      	b.n	800d68c <_malloc_r+0xb0>
 800d6b2:	4623      	mov	r3, r4
 800d6b4:	6864      	ldr	r4, [r4, #4]
 800d6b6:	e7ac      	b.n	800d612 <_malloc_r+0x36>
 800d6b8:	4634      	mov	r4, r6
 800d6ba:	6876      	ldr	r6, [r6, #4]
 800d6bc:	e7b4      	b.n	800d628 <_malloc_r+0x4c>
 800d6be:	4613      	mov	r3, r2
 800d6c0:	e7cc      	b.n	800d65c <_malloc_r+0x80>
 800d6c2:	230c      	movs	r3, #12
 800d6c4:	603b      	str	r3, [r7, #0]
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f000 f80e 	bl	800d6e8 <__malloc_unlock>
 800d6cc:	e797      	b.n	800d5fe <_malloc_r+0x22>
 800d6ce:	6025      	str	r5, [r4, #0]
 800d6d0:	e7dc      	b.n	800d68c <_malloc_r+0xb0>
 800d6d2:	605b      	str	r3, [r3, #4]
 800d6d4:	deff      	udf	#255	; 0xff
 800d6d6:	bf00      	nop
 800d6d8:	2000667c 	.word	0x2000667c

0800d6dc <__malloc_lock>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	; (800d6e4 <__malloc_lock+0x8>)
 800d6de:	f7ff b876 	b.w	800c7ce <__retarget_lock_acquire_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	20006678 	.word	0x20006678

0800d6e8 <__malloc_unlock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	; (800d6f0 <__malloc_unlock+0x8>)
 800d6ea:	f7ff b871 	b.w	800c7d0 <__retarget_lock_release_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20006678 	.word	0x20006678

0800d6f4 <_Balloc>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	69c6      	ldr	r6, [r0, #28]
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	b976      	cbnz	r6, 800d71c <_Balloc+0x28>
 800d6fe:	2010      	movs	r0, #16
 800d700:	f7ff ff44 	bl	800d58c <malloc>
 800d704:	4602      	mov	r2, r0
 800d706:	61e0      	str	r0, [r4, #28]
 800d708:	b920      	cbnz	r0, 800d714 <_Balloc+0x20>
 800d70a:	4b18      	ldr	r3, [pc, #96]	; (800d76c <_Balloc+0x78>)
 800d70c:	4818      	ldr	r0, [pc, #96]	; (800d770 <_Balloc+0x7c>)
 800d70e:	216b      	movs	r1, #107	; 0x6b
 800d710:	f002 fa4e 	bl	800fbb0 <__assert_func>
 800d714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d718:	6006      	str	r6, [r0, #0]
 800d71a:	60c6      	str	r6, [r0, #12]
 800d71c:	69e6      	ldr	r6, [r4, #28]
 800d71e:	68f3      	ldr	r3, [r6, #12]
 800d720:	b183      	cbz	r3, 800d744 <_Balloc+0x50>
 800d722:	69e3      	ldr	r3, [r4, #28]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d72a:	b9b8      	cbnz	r0, 800d75c <_Balloc+0x68>
 800d72c:	2101      	movs	r1, #1
 800d72e:	fa01 f605 	lsl.w	r6, r1, r5
 800d732:	1d72      	adds	r2, r6, #5
 800d734:	0092      	lsls	r2, r2, #2
 800d736:	4620      	mov	r0, r4
 800d738:	f002 fa58 	bl	800fbec <_calloc_r>
 800d73c:	b160      	cbz	r0, 800d758 <_Balloc+0x64>
 800d73e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d742:	e00e      	b.n	800d762 <_Balloc+0x6e>
 800d744:	2221      	movs	r2, #33	; 0x21
 800d746:	2104      	movs	r1, #4
 800d748:	4620      	mov	r0, r4
 800d74a:	f002 fa4f 	bl	800fbec <_calloc_r>
 800d74e:	69e3      	ldr	r3, [r4, #28]
 800d750:	60f0      	str	r0, [r6, #12]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1e4      	bne.n	800d722 <_Balloc+0x2e>
 800d758:	2000      	movs	r0, #0
 800d75a:	bd70      	pop	{r4, r5, r6, pc}
 800d75c:	6802      	ldr	r2, [r0, #0]
 800d75e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d762:	2300      	movs	r3, #0
 800d764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d768:	e7f7      	b.n	800d75a <_Balloc+0x66>
 800d76a:	bf00      	nop
 800d76c:	080294b1 	.word	0x080294b1
 800d770:	08029531 	.word	0x08029531

0800d774 <_Bfree>:
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	69c6      	ldr	r6, [r0, #28]
 800d778:	4605      	mov	r5, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	b976      	cbnz	r6, 800d79c <_Bfree+0x28>
 800d77e:	2010      	movs	r0, #16
 800d780:	f7ff ff04 	bl	800d58c <malloc>
 800d784:	4602      	mov	r2, r0
 800d786:	61e8      	str	r0, [r5, #28]
 800d788:	b920      	cbnz	r0, 800d794 <_Bfree+0x20>
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <_Bfree+0x3c>)
 800d78c:	4809      	ldr	r0, [pc, #36]	; (800d7b4 <_Bfree+0x40>)
 800d78e:	218f      	movs	r1, #143	; 0x8f
 800d790:	f002 fa0e 	bl	800fbb0 <__assert_func>
 800d794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d798:	6006      	str	r6, [r0, #0]
 800d79a:	60c6      	str	r6, [r0, #12]
 800d79c:	b13c      	cbz	r4, 800d7ae <_Bfree+0x3a>
 800d79e:	69eb      	ldr	r3, [r5, #28]
 800d7a0:	6862      	ldr	r2, [r4, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7a8:	6021      	str	r1, [r4, #0]
 800d7aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}
 800d7b0:	080294b1 	.word	0x080294b1
 800d7b4:	08029531 	.word	0x08029531

0800d7b8 <__multadd>:
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	690d      	ldr	r5, [r1, #16]
 800d7be:	4607      	mov	r7, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	461e      	mov	r6, r3
 800d7c4:	f101 0c14 	add.w	ip, r1, #20
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	f8dc 3000 	ldr.w	r3, [ip]
 800d7ce:	b299      	uxth	r1, r3
 800d7d0:	fb02 6101 	mla	r1, r2, r1, r6
 800d7d4:	0c1e      	lsrs	r6, r3, #16
 800d7d6:	0c0b      	lsrs	r3, r1, #16
 800d7d8:	fb02 3306 	mla	r3, r2, r6, r3
 800d7dc:	b289      	uxth	r1, r1
 800d7de:	3001      	adds	r0, #1
 800d7e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7e4:	4285      	cmp	r5, r0
 800d7e6:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ee:	dcec      	bgt.n	800d7ca <__multadd+0x12>
 800d7f0:	b30e      	cbz	r6, 800d836 <__multadd+0x7e>
 800d7f2:	68a3      	ldr	r3, [r4, #8]
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	dc19      	bgt.n	800d82c <__multadd+0x74>
 800d7f8:	6861      	ldr	r1, [r4, #4]
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	3101      	adds	r1, #1
 800d7fe:	f7ff ff79 	bl	800d6f4 <_Balloc>
 800d802:	4680      	mov	r8, r0
 800d804:	b928      	cbnz	r0, 800d812 <__multadd+0x5a>
 800d806:	4602      	mov	r2, r0
 800d808:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <__multadd+0x84>)
 800d80a:	480d      	ldr	r0, [pc, #52]	; (800d840 <__multadd+0x88>)
 800d80c:	21ba      	movs	r1, #186	; 0xba
 800d80e:	f002 f9cf 	bl	800fbb0 <__assert_func>
 800d812:	6922      	ldr	r2, [r4, #16]
 800d814:	3202      	adds	r2, #2
 800d816:	f104 010c 	add.w	r1, r4, #12
 800d81a:	0092      	lsls	r2, r2, #2
 800d81c:	300c      	adds	r0, #12
 800d81e:	f7fe ffd8 	bl	800c7d2 <memcpy>
 800d822:	4621      	mov	r1, r4
 800d824:	4638      	mov	r0, r7
 800d826:	f7ff ffa5 	bl	800d774 <_Bfree>
 800d82a:	4644      	mov	r4, r8
 800d82c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d830:	3501      	adds	r5, #1
 800d832:	615e      	str	r6, [r3, #20]
 800d834:	6125      	str	r5, [r4, #16]
 800d836:	4620      	mov	r0, r4
 800d838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d83c:	08029520 	.word	0x08029520
 800d840:	08029531 	.word	0x08029531

0800d844 <__s2b>:
 800d844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d848:	460c      	mov	r4, r1
 800d84a:	4615      	mov	r5, r2
 800d84c:	461f      	mov	r7, r3
 800d84e:	2209      	movs	r2, #9
 800d850:	3308      	adds	r3, #8
 800d852:	4606      	mov	r6, r0
 800d854:	fb93 f3f2 	sdiv	r3, r3, r2
 800d858:	2100      	movs	r1, #0
 800d85a:	2201      	movs	r2, #1
 800d85c:	429a      	cmp	r2, r3
 800d85e:	db09      	blt.n	800d874 <__s2b+0x30>
 800d860:	4630      	mov	r0, r6
 800d862:	f7ff ff47 	bl	800d6f4 <_Balloc>
 800d866:	b940      	cbnz	r0, 800d87a <__s2b+0x36>
 800d868:	4602      	mov	r2, r0
 800d86a:	4b19      	ldr	r3, [pc, #100]	; (800d8d0 <__s2b+0x8c>)
 800d86c:	4819      	ldr	r0, [pc, #100]	; (800d8d4 <__s2b+0x90>)
 800d86e:	21d3      	movs	r1, #211	; 0xd3
 800d870:	f002 f99e 	bl	800fbb0 <__assert_func>
 800d874:	0052      	lsls	r2, r2, #1
 800d876:	3101      	adds	r1, #1
 800d878:	e7f0      	b.n	800d85c <__s2b+0x18>
 800d87a:	9b08      	ldr	r3, [sp, #32]
 800d87c:	6143      	str	r3, [r0, #20]
 800d87e:	2d09      	cmp	r5, #9
 800d880:	f04f 0301 	mov.w	r3, #1
 800d884:	6103      	str	r3, [r0, #16]
 800d886:	dd16      	ble.n	800d8b6 <__s2b+0x72>
 800d888:	f104 0909 	add.w	r9, r4, #9
 800d88c:	46c8      	mov	r8, r9
 800d88e:	442c      	add	r4, r5
 800d890:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d894:	4601      	mov	r1, r0
 800d896:	3b30      	subs	r3, #48	; 0x30
 800d898:	220a      	movs	r2, #10
 800d89a:	4630      	mov	r0, r6
 800d89c:	f7ff ff8c 	bl	800d7b8 <__multadd>
 800d8a0:	45a0      	cmp	r8, r4
 800d8a2:	d1f5      	bne.n	800d890 <__s2b+0x4c>
 800d8a4:	f1a5 0408 	sub.w	r4, r5, #8
 800d8a8:	444c      	add	r4, r9
 800d8aa:	1b2d      	subs	r5, r5, r4
 800d8ac:	1963      	adds	r3, r4, r5
 800d8ae:	42bb      	cmp	r3, r7
 800d8b0:	db04      	blt.n	800d8bc <__s2b+0x78>
 800d8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b6:	340a      	adds	r4, #10
 800d8b8:	2509      	movs	r5, #9
 800d8ba:	e7f6      	b.n	800d8aa <__s2b+0x66>
 800d8bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8c0:	4601      	mov	r1, r0
 800d8c2:	3b30      	subs	r3, #48	; 0x30
 800d8c4:	220a      	movs	r2, #10
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff ff76 	bl	800d7b8 <__multadd>
 800d8cc:	e7ee      	b.n	800d8ac <__s2b+0x68>
 800d8ce:	bf00      	nop
 800d8d0:	08029520 	.word	0x08029520
 800d8d4:	08029531 	.word	0x08029531

0800d8d8 <__hi0bits>:
 800d8d8:	0c03      	lsrs	r3, r0, #16
 800d8da:	041b      	lsls	r3, r3, #16
 800d8dc:	b9d3      	cbnz	r3, 800d914 <__hi0bits+0x3c>
 800d8de:	0400      	lsls	r0, r0, #16
 800d8e0:	2310      	movs	r3, #16
 800d8e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8e6:	bf04      	itt	eq
 800d8e8:	0200      	lsleq	r0, r0, #8
 800d8ea:	3308      	addeq	r3, #8
 800d8ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8f0:	bf04      	itt	eq
 800d8f2:	0100      	lsleq	r0, r0, #4
 800d8f4:	3304      	addeq	r3, #4
 800d8f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8fa:	bf04      	itt	eq
 800d8fc:	0080      	lsleq	r0, r0, #2
 800d8fe:	3302      	addeq	r3, #2
 800d900:	2800      	cmp	r0, #0
 800d902:	db05      	blt.n	800d910 <__hi0bits+0x38>
 800d904:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d908:	f103 0301 	add.w	r3, r3, #1
 800d90c:	bf08      	it	eq
 800d90e:	2320      	moveq	r3, #32
 800d910:	4618      	mov	r0, r3
 800d912:	4770      	bx	lr
 800d914:	2300      	movs	r3, #0
 800d916:	e7e4      	b.n	800d8e2 <__hi0bits+0xa>

0800d918 <__lo0bits>:
 800d918:	6803      	ldr	r3, [r0, #0]
 800d91a:	f013 0207 	ands.w	r2, r3, #7
 800d91e:	d00c      	beq.n	800d93a <__lo0bits+0x22>
 800d920:	07d9      	lsls	r1, r3, #31
 800d922:	d422      	bmi.n	800d96a <__lo0bits+0x52>
 800d924:	079a      	lsls	r2, r3, #30
 800d926:	bf49      	itett	mi
 800d928:	085b      	lsrmi	r3, r3, #1
 800d92a:	089b      	lsrpl	r3, r3, #2
 800d92c:	6003      	strmi	r3, [r0, #0]
 800d92e:	2201      	movmi	r2, #1
 800d930:	bf5c      	itt	pl
 800d932:	6003      	strpl	r3, [r0, #0]
 800d934:	2202      	movpl	r2, #2
 800d936:	4610      	mov	r0, r2
 800d938:	4770      	bx	lr
 800d93a:	b299      	uxth	r1, r3
 800d93c:	b909      	cbnz	r1, 800d942 <__lo0bits+0x2a>
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	2210      	movs	r2, #16
 800d942:	b2d9      	uxtb	r1, r3
 800d944:	b909      	cbnz	r1, 800d94a <__lo0bits+0x32>
 800d946:	3208      	adds	r2, #8
 800d948:	0a1b      	lsrs	r3, r3, #8
 800d94a:	0719      	lsls	r1, r3, #28
 800d94c:	bf04      	itt	eq
 800d94e:	091b      	lsreq	r3, r3, #4
 800d950:	3204      	addeq	r2, #4
 800d952:	0799      	lsls	r1, r3, #30
 800d954:	bf04      	itt	eq
 800d956:	089b      	lsreq	r3, r3, #2
 800d958:	3202      	addeq	r2, #2
 800d95a:	07d9      	lsls	r1, r3, #31
 800d95c:	d403      	bmi.n	800d966 <__lo0bits+0x4e>
 800d95e:	085b      	lsrs	r3, r3, #1
 800d960:	f102 0201 	add.w	r2, r2, #1
 800d964:	d003      	beq.n	800d96e <__lo0bits+0x56>
 800d966:	6003      	str	r3, [r0, #0]
 800d968:	e7e5      	b.n	800d936 <__lo0bits+0x1e>
 800d96a:	2200      	movs	r2, #0
 800d96c:	e7e3      	b.n	800d936 <__lo0bits+0x1e>
 800d96e:	2220      	movs	r2, #32
 800d970:	e7e1      	b.n	800d936 <__lo0bits+0x1e>
	...

0800d974 <__i2b>:
 800d974:	b510      	push	{r4, lr}
 800d976:	460c      	mov	r4, r1
 800d978:	2101      	movs	r1, #1
 800d97a:	f7ff febb 	bl	800d6f4 <_Balloc>
 800d97e:	4602      	mov	r2, r0
 800d980:	b928      	cbnz	r0, 800d98e <__i2b+0x1a>
 800d982:	4b05      	ldr	r3, [pc, #20]	; (800d998 <__i2b+0x24>)
 800d984:	4805      	ldr	r0, [pc, #20]	; (800d99c <__i2b+0x28>)
 800d986:	f240 1145 	movw	r1, #325	; 0x145
 800d98a:	f002 f911 	bl	800fbb0 <__assert_func>
 800d98e:	2301      	movs	r3, #1
 800d990:	6144      	str	r4, [r0, #20]
 800d992:	6103      	str	r3, [r0, #16]
 800d994:	bd10      	pop	{r4, pc}
 800d996:	bf00      	nop
 800d998:	08029520 	.word	0x08029520
 800d99c:	08029531 	.word	0x08029531

0800d9a0 <__multiply>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	4691      	mov	r9, r2
 800d9a6:	690a      	ldr	r2, [r1, #16]
 800d9a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	bfb8      	it	lt
 800d9b0:	460b      	movlt	r3, r1
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	bfbc      	itt	lt
 800d9b6:	464c      	movlt	r4, r9
 800d9b8:	4699      	movlt	r9, r3
 800d9ba:	6927      	ldr	r7, [r4, #16]
 800d9bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9c0:	68a3      	ldr	r3, [r4, #8]
 800d9c2:	6861      	ldr	r1, [r4, #4]
 800d9c4:	eb07 060a 	add.w	r6, r7, sl
 800d9c8:	42b3      	cmp	r3, r6
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	bfb8      	it	lt
 800d9ce:	3101      	addlt	r1, #1
 800d9d0:	f7ff fe90 	bl	800d6f4 <_Balloc>
 800d9d4:	b930      	cbnz	r0, 800d9e4 <__multiply+0x44>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	4b44      	ldr	r3, [pc, #272]	; (800daec <__multiply+0x14c>)
 800d9da:	4845      	ldr	r0, [pc, #276]	; (800daf0 <__multiply+0x150>)
 800d9dc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d9e0:	f002 f8e6 	bl	800fbb0 <__assert_func>
 800d9e4:	f100 0514 	add.w	r5, r0, #20
 800d9e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9ec:	462b      	mov	r3, r5
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	4543      	cmp	r3, r8
 800d9f2:	d321      	bcc.n	800da38 <__multiply+0x98>
 800d9f4:	f104 0314 	add.w	r3, r4, #20
 800d9f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9fc:	f109 0314 	add.w	r3, r9, #20
 800da00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da04:	9202      	str	r2, [sp, #8]
 800da06:	1b3a      	subs	r2, r7, r4
 800da08:	3a15      	subs	r2, #21
 800da0a:	f022 0203 	bic.w	r2, r2, #3
 800da0e:	3204      	adds	r2, #4
 800da10:	f104 0115 	add.w	r1, r4, #21
 800da14:	428f      	cmp	r7, r1
 800da16:	bf38      	it	cc
 800da18:	2204      	movcc	r2, #4
 800da1a:	9201      	str	r2, [sp, #4]
 800da1c:	9a02      	ldr	r2, [sp, #8]
 800da1e:	9303      	str	r3, [sp, #12]
 800da20:	429a      	cmp	r2, r3
 800da22:	d80c      	bhi.n	800da3e <__multiply+0x9e>
 800da24:	2e00      	cmp	r6, #0
 800da26:	dd03      	ble.n	800da30 <__multiply+0x90>
 800da28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d05b      	beq.n	800dae8 <__multiply+0x148>
 800da30:	6106      	str	r6, [r0, #16]
 800da32:	b005      	add	sp, #20
 800da34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da38:	f843 2b04 	str.w	r2, [r3], #4
 800da3c:	e7d8      	b.n	800d9f0 <__multiply+0x50>
 800da3e:	f8b3 a000 	ldrh.w	sl, [r3]
 800da42:	f1ba 0f00 	cmp.w	sl, #0
 800da46:	d024      	beq.n	800da92 <__multiply+0xf2>
 800da48:	f104 0e14 	add.w	lr, r4, #20
 800da4c:	46a9      	mov	r9, r5
 800da4e:	f04f 0c00 	mov.w	ip, #0
 800da52:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da56:	f8d9 1000 	ldr.w	r1, [r9]
 800da5a:	fa1f fb82 	uxth.w	fp, r2
 800da5e:	b289      	uxth	r1, r1
 800da60:	fb0a 110b 	mla	r1, sl, fp, r1
 800da64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da68:	f8d9 2000 	ldr.w	r2, [r9]
 800da6c:	4461      	add	r1, ip
 800da6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da72:	fb0a c20b 	mla	r2, sl, fp, ip
 800da76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da7a:	b289      	uxth	r1, r1
 800da7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da80:	4577      	cmp	r7, lr
 800da82:	f849 1b04 	str.w	r1, [r9], #4
 800da86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da8a:	d8e2      	bhi.n	800da52 <__multiply+0xb2>
 800da8c:	9a01      	ldr	r2, [sp, #4]
 800da8e:	f845 c002 	str.w	ip, [r5, r2]
 800da92:	9a03      	ldr	r2, [sp, #12]
 800da94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da98:	3304      	adds	r3, #4
 800da9a:	f1b9 0f00 	cmp.w	r9, #0
 800da9e:	d021      	beq.n	800dae4 <__multiply+0x144>
 800daa0:	6829      	ldr	r1, [r5, #0]
 800daa2:	f104 0c14 	add.w	ip, r4, #20
 800daa6:	46ae      	mov	lr, r5
 800daa8:	f04f 0a00 	mov.w	sl, #0
 800daac:	f8bc b000 	ldrh.w	fp, [ip]
 800dab0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dab4:	fb09 220b 	mla	r2, r9, fp, r2
 800dab8:	4452      	add	r2, sl
 800daba:	b289      	uxth	r1, r1
 800dabc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dac0:	f84e 1b04 	str.w	r1, [lr], #4
 800dac4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dac8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dacc:	f8be 1000 	ldrh.w	r1, [lr]
 800dad0:	fb09 110a 	mla	r1, r9, sl, r1
 800dad4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dad8:	4567      	cmp	r7, ip
 800dada:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dade:	d8e5      	bhi.n	800daac <__multiply+0x10c>
 800dae0:	9a01      	ldr	r2, [sp, #4]
 800dae2:	50a9      	str	r1, [r5, r2]
 800dae4:	3504      	adds	r5, #4
 800dae6:	e799      	b.n	800da1c <__multiply+0x7c>
 800dae8:	3e01      	subs	r6, #1
 800daea:	e79b      	b.n	800da24 <__multiply+0x84>
 800daec:	08029520 	.word	0x08029520
 800daf0:	08029531 	.word	0x08029531

0800daf4 <__pow5mult>:
 800daf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf8:	4615      	mov	r5, r2
 800dafa:	f012 0203 	ands.w	r2, r2, #3
 800dafe:	4606      	mov	r6, r0
 800db00:	460f      	mov	r7, r1
 800db02:	d007      	beq.n	800db14 <__pow5mult+0x20>
 800db04:	4c25      	ldr	r4, [pc, #148]	; (800db9c <__pow5mult+0xa8>)
 800db06:	3a01      	subs	r2, #1
 800db08:	2300      	movs	r3, #0
 800db0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db0e:	f7ff fe53 	bl	800d7b8 <__multadd>
 800db12:	4607      	mov	r7, r0
 800db14:	10ad      	asrs	r5, r5, #2
 800db16:	d03d      	beq.n	800db94 <__pow5mult+0xa0>
 800db18:	69f4      	ldr	r4, [r6, #28]
 800db1a:	b97c      	cbnz	r4, 800db3c <__pow5mult+0x48>
 800db1c:	2010      	movs	r0, #16
 800db1e:	f7ff fd35 	bl	800d58c <malloc>
 800db22:	4602      	mov	r2, r0
 800db24:	61f0      	str	r0, [r6, #28]
 800db26:	b928      	cbnz	r0, 800db34 <__pow5mult+0x40>
 800db28:	4b1d      	ldr	r3, [pc, #116]	; (800dba0 <__pow5mult+0xac>)
 800db2a:	481e      	ldr	r0, [pc, #120]	; (800dba4 <__pow5mult+0xb0>)
 800db2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800db30:	f002 f83e 	bl	800fbb0 <__assert_func>
 800db34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db38:	6004      	str	r4, [r0, #0]
 800db3a:	60c4      	str	r4, [r0, #12]
 800db3c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800db40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db44:	b94c      	cbnz	r4, 800db5a <__pow5mult+0x66>
 800db46:	f240 2171 	movw	r1, #625	; 0x271
 800db4a:	4630      	mov	r0, r6
 800db4c:	f7ff ff12 	bl	800d974 <__i2b>
 800db50:	2300      	movs	r3, #0
 800db52:	f8c8 0008 	str.w	r0, [r8, #8]
 800db56:	4604      	mov	r4, r0
 800db58:	6003      	str	r3, [r0, #0]
 800db5a:	f04f 0900 	mov.w	r9, #0
 800db5e:	07eb      	lsls	r3, r5, #31
 800db60:	d50a      	bpl.n	800db78 <__pow5mult+0x84>
 800db62:	4639      	mov	r1, r7
 800db64:	4622      	mov	r2, r4
 800db66:	4630      	mov	r0, r6
 800db68:	f7ff ff1a 	bl	800d9a0 <__multiply>
 800db6c:	4639      	mov	r1, r7
 800db6e:	4680      	mov	r8, r0
 800db70:	4630      	mov	r0, r6
 800db72:	f7ff fdff 	bl	800d774 <_Bfree>
 800db76:	4647      	mov	r7, r8
 800db78:	106d      	asrs	r5, r5, #1
 800db7a:	d00b      	beq.n	800db94 <__pow5mult+0xa0>
 800db7c:	6820      	ldr	r0, [r4, #0]
 800db7e:	b938      	cbnz	r0, 800db90 <__pow5mult+0x9c>
 800db80:	4622      	mov	r2, r4
 800db82:	4621      	mov	r1, r4
 800db84:	4630      	mov	r0, r6
 800db86:	f7ff ff0b 	bl	800d9a0 <__multiply>
 800db8a:	6020      	str	r0, [r4, #0]
 800db8c:	f8c0 9000 	str.w	r9, [r0]
 800db90:	4604      	mov	r4, r0
 800db92:	e7e4      	b.n	800db5e <__pow5mult+0x6a>
 800db94:	4638      	mov	r0, r7
 800db96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9a:	bf00      	nop
 800db9c:	08029680 	.word	0x08029680
 800dba0:	080294b1 	.word	0x080294b1
 800dba4:	08029531 	.word	0x08029531

0800dba8 <__lshift>:
 800dba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbac:	460c      	mov	r4, r1
 800dbae:	6849      	ldr	r1, [r1, #4]
 800dbb0:	6923      	ldr	r3, [r4, #16]
 800dbb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbb6:	68a3      	ldr	r3, [r4, #8]
 800dbb8:	4607      	mov	r7, r0
 800dbba:	4691      	mov	r9, r2
 800dbbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbc0:	f108 0601 	add.w	r6, r8, #1
 800dbc4:	42b3      	cmp	r3, r6
 800dbc6:	db0b      	blt.n	800dbe0 <__lshift+0x38>
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7ff fd93 	bl	800d6f4 <_Balloc>
 800dbce:	4605      	mov	r5, r0
 800dbd0:	b948      	cbnz	r0, 800dbe6 <__lshift+0x3e>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	4b28      	ldr	r3, [pc, #160]	; (800dc78 <__lshift+0xd0>)
 800dbd6:	4829      	ldr	r0, [pc, #164]	; (800dc7c <__lshift+0xd4>)
 800dbd8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dbdc:	f001 ffe8 	bl	800fbb0 <__assert_func>
 800dbe0:	3101      	adds	r1, #1
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	e7ee      	b.n	800dbc4 <__lshift+0x1c>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f100 0114 	add.w	r1, r0, #20
 800dbec:	f100 0210 	add.w	r2, r0, #16
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	4553      	cmp	r3, sl
 800dbf4:	db33      	blt.n	800dc5e <__lshift+0xb6>
 800dbf6:	6920      	ldr	r0, [r4, #16]
 800dbf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbfc:	f104 0314 	add.w	r3, r4, #20
 800dc00:	f019 091f 	ands.w	r9, r9, #31
 800dc04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc0c:	d02b      	beq.n	800dc66 <__lshift+0xbe>
 800dc0e:	f1c9 0e20 	rsb	lr, r9, #32
 800dc12:	468a      	mov	sl, r1
 800dc14:	2200      	movs	r2, #0
 800dc16:	6818      	ldr	r0, [r3, #0]
 800dc18:	fa00 f009 	lsl.w	r0, r0, r9
 800dc1c:	4310      	orrs	r0, r2
 800dc1e:	f84a 0b04 	str.w	r0, [sl], #4
 800dc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc26:	459c      	cmp	ip, r3
 800dc28:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc2c:	d8f3      	bhi.n	800dc16 <__lshift+0x6e>
 800dc2e:	ebac 0304 	sub.w	r3, ip, r4
 800dc32:	3b15      	subs	r3, #21
 800dc34:	f023 0303 	bic.w	r3, r3, #3
 800dc38:	3304      	adds	r3, #4
 800dc3a:	f104 0015 	add.w	r0, r4, #21
 800dc3e:	4584      	cmp	ip, r0
 800dc40:	bf38      	it	cc
 800dc42:	2304      	movcc	r3, #4
 800dc44:	50ca      	str	r2, [r1, r3]
 800dc46:	b10a      	cbz	r2, 800dc4c <__lshift+0xa4>
 800dc48:	f108 0602 	add.w	r6, r8, #2
 800dc4c:	3e01      	subs	r6, #1
 800dc4e:	4638      	mov	r0, r7
 800dc50:	612e      	str	r6, [r5, #16]
 800dc52:	4621      	mov	r1, r4
 800dc54:	f7ff fd8e 	bl	800d774 <_Bfree>
 800dc58:	4628      	mov	r0, r5
 800dc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc62:	3301      	adds	r3, #1
 800dc64:	e7c5      	b.n	800dbf2 <__lshift+0x4a>
 800dc66:	3904      	subs	r1, #4
 800dc68:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc70:	459c      	cmp	ip, r3
 800dc72:	d8f9      	bhi.n	800dc68 <__lshift+0xc0>
 800dc74:	e7ea      	b.n	800dc4c <__lshift+0xa4>
 800dc76:	bf00      	nop
 800dc78:	08029520 	.word	0x08029520
 800dc7c:	08029531 	.word	0x08029531

0800dc80 <__mcmp>:
 800dc80:	b530      	push	{r4, r5, lr}
 800dc82:	6902      	ldr	r2, [r0, #16]
 800dc84:	690c      	ldr	r4, [r1, #16]
 800dc86:	1b12      	subs	r2, r2, r4
 800dc88:	d10e      	bne.n	800dca8 <__mcmp+0x28>
 800dc8a:	f100 0314 	add.w	r3, r0, #20
 800dc8e:	3114      	adds	r1, #20
 800dc90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dca0:	42a5      	cmp	r5, r4
 800dca2:	d003      	beq.n	800dcac <__mcmp+0x2c>
 800dca4:	d305      	bcc.n	800dcb2 <__mcmp+0x32>
 800dca6:	2201      	movs	r2, #1
 800dca8:	4610      	mov	r0, r2
 800dcaa:	bd30      	pop	{r4, r5, pc}
 800dcac:	4283      	cmp	r3, r0
 800dcae:	d3f3      	bcc.n	800dc98 <__mcmp+0x18>
 800dcb0:	e7fa      	b.n	800dca8 <__mcmp+0x28>
 800dcb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcb6:	e7f7      	b.n	800dca8 <__mcmp+0x28>

0800dcb8 <__mdiff>:
 800dcb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	4690      	mov	r8, r2
 800dcc6:	f7ff ffdb 	bl	800dc80 <__mcmp>
 800dcca:	1e05      	subs	r5, r0, #0
 800dccc:	d110      	bne.n	800dcf0 <__mdiff+0x38>
 800dcce:	4629      	mov	r1, r5
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f7ff fd0f 	bl	800d6f4 <_Balloc>
 800dcd6:	b930      	cbnz	r0, 800dce6 <__mdiff+0x2e>
 800dcd8:	4b3a      	ldr	r3, [pc, #232]	; (800ddc4 <__mdiff+0x10c>)
 800dcda:	4602      	mov	r2, r0
 800dcdc:	f240 2137 	movw	r1, #567	; 0x237
 800dce0:	4839      	ldr	r0, [pc, #228]	; (800ddc8 <__mdiff+0x110>)
 800dce2:	f001 ff65 	bl	800fbb0 <__assert_func>
 800dce6:	2301      	movs	r3, #1
 800dce8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	bfa4      	itt	ge
 800dcf2:	4643      	movge	r3, r8
 800dcf4:	46a0      	movge	r8, r4
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dcfc:	bfa6      	itte	ge
 800dcfe:	461c      	movge	r4, r3
 800dd00:	2500      	movge	r5, #0
 800dd02:	2501      	movlt	r5, #1
 800dd04:	f7ff fcf6 	bl	800d6f4 <_Balloc>
 800dd08:	b920      	cbnz	r0, 800dd14 <__mdiff+0x5c>
 800dd0a:	4b2e      	ldr	r3, [pc, #184]	; (800ddc4 <__mdiff+0x10c>)
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	f240 2145 	movw	r1, #581	; 0x245
 800dd12:	e7e5      	b.n	800dce0 <__mdiff+0x28>
 800dd14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd18:	6926      	ldr	r6, [r4, #16]
 800dd1a:	60c5      	str	r5, [r0, #12]
 800dd1c:	f104 0914 	add.w	r9, r4, #20
 800dd20:	f108 0514 	add.w	r5, r8, #20
 800dd24:	f100 0e14 	add.w	lr, r0, #20
 800dd28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd30:	f108 0210 	add.w	r2, r8, #16
 800dd34:	46f2      	mov	sl, lr
 800dd36:	2100      	movs	r1, #0
 800dd38:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd40:	fa11 f88b 	uxtah	r8, r1, fp
 800dd44:	b299      	uxth	r1, r3
 800dd46:	0c1b      	lsrs	r3, r3, #16
 800dd48:	eba8 0801 	sub.w	r8, r8, r1
 800dd4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd50:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd54:	fa1f f888 	uxth.w	r8, r8
 800dd58:	1419      	asrs	r1, r3, #16
 800dd5a:	454e      	cmp	r6, r9
 800dd5c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd60:	f84a 3b04 	str.w	r3, [sl], #4
 800dd64:	d8e8      	bhi.n	800dd38 <__mdiff+0x80>
 800dd66:	1b33      	subs	r3, r6, r4
 800dd68:	3b15      	subs	r3, #21
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	3304      	adds	r3, #4
 800dd70:	3415      	adds	r4, #21
 800dd72:	42a6      	cmp	r6, r4
 800dd74:	bf38      	it	cc
 800dd76:	2304      	movcc	r3, #4
 800dd78:	441d      	add	r5, r3
 800dd7a:	4473      	add	r3, lr
 800dd7c:	469e      	mov	lr, r3
 800dd7e:	462e      	mov	r6, r5
 800dd80:	4566      	cmp	r6, ip
 800dd82:	d30e      	bcc.n	800dda2 <__mdiff+0xea>
 800dd84:	f10c 0203 	add.w	r2, ip, #3
 800dd88:	1b52      	subs	r2, r2, r5
 800dd8a:	f022 0203 	bic.w	r2, r2, #3
 800dd8e:	3d03      	subs	r5, #3
 800dd90:	45ac      	cmp	ip, r5
 800dd92:	bf38      	it	cc
 800dd94:	2200      	movcc	r2, #0
 800dd96:	4413      	add	r3, r2
 800dd98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dd9c:	b17a      	cbz	r2, 800ddbe <__mdiff+0x106>
 800dd9e:	6107      	str	r7, [r0, #16]
 800dda0:	e7a4      	b.n	800dcec <__mdiff+0x34>
 800dda2:	f856 8b04 	ldr.w	r8, [r6], #4
 800dda6:	fa11 f288 	uxtah	r2, r1, r8
 800ddaa:	1414      	asrs	r4, r2, #16
 800ddac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddb0:	b292      	uxth	r2, r2
 800ddb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ddb6:	f84e 2b04 	str.w	r2, [lr], #4
 800ddba:	1421      	asrs	r1, r4, #16
 800ddbc:	e7e0      	b.n	800dd80 <__mdiff+0xc8>
 800ddbe:	3f01      	subs	r7, #1
 800ddc0:	e7ea      	b.n	800dd98 <__mdiff+0xe0>
 800ddc2:	bf00      	nop
 800ddc4:	08029520 	.word	0x08029520
 800ddc8:	08029531 	.word	0x08029531

0800ddcc <__ulp>:
 800ddcc:	b082      	sub	sp, #8
 800ddce:	ed8d 0b00 	vstr	d0, [sp]
 800ddd2:	9a01      	ldr	r2, [sp, #4]
 800ddd4:	4b0f      	ldr	r3, [pc, #60]	; (800de14 <__ulp+0x48>)
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	dc08      	bgt.n	800ddf2 <__ulp+0x26>
 800dde0:	425b      	negs	r3, r3
 800dde2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dde6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddea:	da04      	bge.n	800ddf6 <__ulp+0x2a>
 800ddec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ddf0:	4113      	asrs	r3, r2
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	e008      	b.n	800de08 <__ulp+0x3c>
 800ddf6:	f1a2 0314 	sub.w	r3, r2, #20
 800ddfa:	2b1e      	cmp	r3, #30
 800ddfc:	bfda      	itte	le
 800ddfe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800de02:	40da      	lsrle	r2, r3
 800de04:	2201      	movgt	r2, #1
 800de06:	2300      	movs	r3, #0
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	ec41 0b10 	vmov	d0, r0, r1
 800de10:	b002      	add	sp, #8
 800de12:	4770      	bx	lr
 800de14:	7ff00000 	.word	0x7ff00000

0800de18 <__b2d>:
 800de18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1c:	6906      	ldr	r6, [r0, #16]
 800de1e:	f100 0814 	add.w	r8, r0, #20
 800de22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800de26:	1f37      	subs	r7, r6, #4
 800de28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de2c:	4610      	mov	r0, r2
 800de2e:	f7ff fd53 	bl	800d8d8 <__hi0bits>
 800de32:	f1c0 0320 	rsb	r3, r0, #32
 800de36:	280a      	cmp	r0, #10
 800de38:	600b      	str	r3, [r1, #0]
 800de3a:	491b      	ldr	r1, [pc, #108]	; (800dea8 <__b2d+0x90>)
 800de3c:	dc15      	bgt.n	800de6a <__b2d+0x52>
 800de3e:	f1c0 0c0b 	rsb	ip, r0, #11
 800de42:	fa22 f30c 	lsr.w	r3, r2, ip
 800de46:	45b8      	cmp	r8, r7
 800de48:	ea43 0501 	orr.w	r5, r3, r1
 800de4c:	bf34      	ite	cc
 800de4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de52:	2300      	movcs	r3, #0
 800de54:	3015      	adds	r0, #21
 800de56:	fa02 f000 	lsl.w	r0, r2, r0
 800de5a:	fa23 f30c 	lsr.w	r3, r3, ip
 800de5e:	4303      	orrs	r3, r0
 800de60:	461c      	mov	r4, r3
 800de62:	ec45 4b10 	vmov	d0, r4, r5
 800de66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6a:	45b8      	cmp	r8, r7
 800de6c:	bf3a      	itte	cc
 800de6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de72:	f1a6 0708 	subcc.w	r7, r6, #8
 800de76:	2300      	movcs	r3, #0
 800de78:	380b      	subs	r0, #11
 800de7a:	d012      	beq.n	800dea2 <__b2d+0x8a>
 800de7c:	f1c0 0120 	rsb	r1, r0, #32
 800de80:	fa23 f401 	lsr.w	r4, r3, r1
 800de84:	4082      	lsls	r2, r0
 800de86:	4322      	orrs	r2, r4
 800de88:	4547      	cmp	r7, r8
 800de8a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800de8e:	bf8c      	ite	hi
 800de90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de94:	2200      	movls	r2, #0
 800de96:	4083      	lsls	r3, r0
 800de98:	40ca      	lsrs	r2, r1
 800de9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800de9e:	4313      	orrs	r3, r2
 800dea0:	e7de      	b.n	800de60 <__b2d+0x48>
 800dea2:	ea42 0501 	orr.w	r5, r2, r1
 800dea6:	e7db      	b.n	800de60 <__b2d+0x48>
 800dea8:	3ff00000 	.word	0x3ff00000

0800deac <__d2b>:
 800deac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800deb0:	460f      	mov	r7, r1
 800deb2:	2101      	movs	r1, #1
 800deb4:	ec59 8b10 	vmov	r8, r9, d0
 800deb8:	4616      	mov	r6, r2
 800deba:	f7ff fc1b 	bl	800d6f4 <_Balloc>
 800debe:	4604      	mov	r4, r0
 800dec0:	b930      	cbnz	r0, 800ded0 <__d2b+0x24>
 800dec2:	4602      	mov	r2, r0
 800dec4:	4b24      	ldr	r3, [pc, #144]	; (800df58 <__d2b+0xac>)
 800dec6:	4825      	ldr	r0, [pc, #148]	; (800df5c <__d2b+0xb0>)
 800dec8:	f240 310f 	movw	r1, #783	; 0x30f
 800decc:	f001 fe70 	bl	800fbb0 <__assert_func>
 800ded0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ded4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ded8:	bb2d      	cbnz	r5, 800df26 <__d2b+0x7a>
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	f1b8 0300 	subs.w	r3, r8, #0
 800dee0:	d026      	beq.n	800df30 <__d2b+0x84>
 800dee2:	4668      	mov	r0, sp
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	f7ff fd17 	bl	800d918 <__lo0bits>
 800deea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800deee:	b1e8      	cbz	r0, 800df2c <__d2b+0x80>
 800def0:	f1c0 0320 	rsb	r3, r0, #32
 800def4:	fa02 f303 	lsl.w	r3, r2, r3
 800def8:	430b      	orrs	r3, r1
 800defa:	40c2      	lsrs	r2, r0
 800defc:	6163      	str	r3, [r4, #20]
 800defe:	9201      	str	r2, [sp, #4]
 800df00:	9b01      	ldr	r3, [sp, #4]
 800df02:	61a3      	str	r3, [r4, #24]
 800df04:	2b00      	cmp	r3, #0
 800df06:	bf14      	ite	ne
 800df08:	2202      	movne	r2, #2
 800df0a:	2201      	moveq	r2, #1
 800df0c:	6122      	str	r2, [r4, #16]
 800df0e:	b1bd      	cbz	r5, 800df40 <__d2b+0x94>
 800df10:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df14:	4405      	add	r5, r0
 800df16:	603d      	str	r5, [r7, #0]
 800df18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df1c:	6030      	str	r0, [r6, #0]
 800df1e:	4620      	mov	r0, r4
 800df20:	b003      	add	sp, #12
 800df22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df2a:	e7d6      	b.n	800deda <__d2b+0x2e>
 800df2c:	6161      	str	r1, [r4, #20]
 800df2e:	e7e7      	b.n	800df00 <__d2b+0x54>
 800df30:	a801      	add	r0, sp, #4
 800df32:	f7ff fcf1 	bl	800d918 <__lo0bits>
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	6163      	str	r3, [r4, #20]
 800df3a:	3020      	adds	r0, #32
 800df3c:	2201      	movs	r2, #1
 800df3e:	e7e5      	b.n	800df0c <__d2b+0x60>
 800df40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df48:	6038      	str	r0, [r7, #0]
 800df4a:	6918      	ldr	r0, [r3, #16]
 800df4c:	f7ff fcc4 	bl	800d8d8 <__hi0bits>
 800df50:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df54:	e7e2      	b.n	800df1c <__d2b+0x70>
 800df56:	bf00      	nop
 800df58:	08029520 	.word	0x08029520
 800df5c:	08029531 	.word	0x08029531

0800df60 <__ratio>:
 800df60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	4688      	mov	r8, r1
 800df66:	4669      	mov	r1, sp
 800df68:	4681      	mov	r9, r0
 800df6a:	f7ff ff55 	bl	800de18 <__b2d>
 800df6e:	a901      	add	r1, sp, #4
 800df70:	4640      	mov	r0, r8
 800df72:	ec55 4b10 	vmov	r4, r5, d0
 800df76:	f7ff ff4f 	bl	800de18 <__b2d>
 800df7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df82:	eba3 0c02 	sub.w	ip, r3, r2
 800df86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df90:	ec51 0b10 	vmov	r0, r1, d0
 800df94:	2b00      	cmp	r3, #0
 800df96:	bfd6      	itet	le
 800df98:	460a      	movle	r2, r1
 800df9a:	462a      	movgt	r2, r5
 800df9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfa0:	468b      	mov	fp, r1
 800dfa2:	462f      	mov	r7, r5
 800dfa4:	bfd4      	ite	le
 800dfa6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dfaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfae:	4620      	mov	r0, r4
 800dfb0:	ee10 2a10 	vmov	r2, s0
 800dfb4:	465b      	mov	r3, fp
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	f7f2 fc60 	bl	800087c <__aeabi_ddiv>
 800dfbc:	ec41 0b10 	vmov	d0, r0, r1
 800dfc0:	b003      	add	sp, #12
 800dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfc6 <__copybits>:
 800dfc6:	3901      	subs	r1, #1
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	1149      	asrs	r1, r1, #5
 800dfcc:	6914      	ldr	r4, [r2, #16]
 800dfce:	3101      	adds	r1, #1
 800dfd0:	f102 0314 	add.w	r3, r2, #20
 800dfd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfdc:	1f05      	subs	r5, r0, #4
 800dfde:	42a3      	cmp	r3, r4
 800dfe0:	d30c      	bcc.n	800dffc <__copybits+0x36>
 800dfe2:	1aa3      	subs	r3, r4, r2
 800dfe4:	3b11      	subs	r3, #17
 800dfe6:	f023 0303 	bic.w	r3, r3, #3
 800dfea:	3211      	adds	r2, #17
 800dfec:	42a2      	cmp	r2, r4
 800dfee:	bf88      	it	hi
 800dff0:	2300      	movhi	r3, #0
 800dff2:	4418      	add	r0, r3
 800dff4:	2300      	movs	r3, #0
 800dff6:	4288      	cmp	r0, r1
 800dff8:	d305      	bcc.n	800e006 <__copybits+0x40>
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	f853 6b04 	ldr.w	r6, [r3], #4
 800e000:	f845 6f04 	str.w	r6, [r5, #4]!
 800e004:	e7eb      	b.n	800dfde <__copybits+0x18>
 800e006:	f840 3b04 	str.w	r3, [r0], #4
 800e00a:	e7f4      	b.n	800dff6 <__copybits+0x30>

0800e00c <__any_on>:
 800e00c:	f100 0214 	add.w	r2, r0, #20
 800e010:	6900      	ldr	r0, [r0, #16]
 800e012:	114b      	asrs	r3, r1, #5
 800e014:	4298      	cmp	r0, r3
 800e016:	b510      	push	{r4, lr}
 800e018:	db11      	blt.n	800e03e <__any_on+0x32>
 800e01a:	dd0a      	ble.n	800e032 <__any_on+0x26>
 800e01c:	f011 011f 	ands.w	r1, r1, #31
 800e020:	d007      	beq.n	800e032 <__any_on+0x26>
 800e022:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e026:	fa24 f001 	lsr.w	r0, r4, r1
 800e02a:	fa00 f101 	lsl.w	r1, r0, r1
 800e02e:	428c      	cmp	r4, r1
 800e030:	d10b      	bne.n	800e04a <__any_on+0x3e>
 800e032:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e036:	4293      	cmp	r3, r2
 800e038:	d803      	bhi.n	800e042 <__any_on+0x36>
 800e03a:	2000      	movs	r0, #0
 800e03c:	bd10      	pop	{r4, pc}
 800e03e:	4603      	mov	r3, r0
 800e040:	e7f7      	b.n	800e032 <__any_on+0x26>
 800e042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e046:	2900      	cmp	r1, #0
 800e048:	d0f5      	beq.n	800e036 <__any_on+0x2a>
 800e04a:	2001      	movs	r0, #1
 800e04c:	e7f6      	b.n	800e03c <__any_on+0x30>

0800e04e <sulp>:
 800e04e:	b570      	push	{r4, r5, r6, lr}
 800e050:	4604      	mov	r4, r0
 800e052:	460d      	mov	r5, r1
 800e054:	ec45 4b10 	vmov	d0, r4, r5
 800e058:	4616      	mov	r6, r2
 800e05a:	f7ff feb7 	bl	800ddcc <__ulp>
 800e05e:	ec51 0b10 	vmov	r0, r1, d0
 800e062:	b17e      	cbz	r6, 800e084 <sulp+0x36>
 800e064:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e068:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	dd09      	ble.n	800e084 <sulp+0x36>
 800e070:	051b      	lsls	r3, r3, #20
 800e072:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e076:	2400      	movs	r4, #0
 800e078:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e07c:	4622      	mov	r2, r4
 800e07e:	462b      	mov	r3, r5
 800e080:	f7f2 fad2 	bl	8000628 <__aeabi_dmul>
 800e084:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e088 <_strtod_l>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	ed2d 8b02 	vpush	{d8}
 800e090:	b09b      	sub	sp, #108	; 0x6c
 800e092:	4604      	mov	r4, r0
 800e094:	9213      	str	r2, [sp, #76]	; 0x4c
 800e096:	2200      	movs	r2, #0
 800e098:	9216      	str	r2, [sp, #88]	; 0x58
 800e09a:	460d      	mov	r5, r1
 800e09c:	f04f 0800 	mov.w	r8, #0
 800e0a0:	f04f 0900 	mov.w	r9, #0
 800e0a4:	460a      	mov	r2, r1
 800e0a6:	9215      	str	r2, [sp, #84]	; 0x54
 800e0a8:	7811      	ldrb	r1, [r2, #0]
 800e0aa:	292b      	cmp	r1, #43	; 0x2b
 800e0ac:	d04c      	beq.n	800e148 <_strtod_l+0xc0>
 800e0ae:	d83a      	bhi.n	800e126 <_strtod_l+0x9e>
 800e0b0:	290d      	cmp	r1, #13
 800e0b2:	d834      	bhi.n	800e11e <_strtod_l+0x96>
 800e0b4:	2908      	cmp	r1, #8
 800e0b6:	d834      	bhi.n	800e122 <_strtod_l+0x9a>
 800e0b8:	2900      	cmp	r1, #0
 800e0ba:	d03d      	beq.n	800e138 <_strtod_l+0xb0>
 800e0bc:	2200      	movs	r2, #0
 800e0be:	920a      	str	r2, [sp, #40]	; 0x28
 800e0c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e0c2:	7832      	ldrb	r2, [r6, #0]
 800e0c4:	2a30      	cmp	r2, #48	; 0x30
 800e0c6:	f040 80b4 	bne.w	800e232 <_strtod_l+0x1aa>
 800e0ca:	7872      	ldrb	r2, [r6, #1]
 800e0cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e0d0:	2a58      	cmp	r2, #88	; 0x58
 800e0d2:	d170      	bne.n	800e1b6 <_strtod_l+0x12e>
 800e0d4:	9302      	str	r3, [sp, #8]
 800e0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	ab16      	add	r3, sp, #88	; 0x58
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	4a8e      	ldr	r2, [pc, #568]	; (800e318 <_strtod_l+0x290>)
 800e0e0:	ab17      	add	r3, sp, #92	; 0x5c
 800e0e2:	a915      	add	r1, sp, #84	; 0x54
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f001 fdff 	bl	800fce8 <__gethex>
 800e0ea:	f010 070f 	ands.w	r7, r0, #15
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	d005      	beq.n	800e0fe <_strtod_l+0x76>
 800e0f2:	2f06      	cmp	r7, #6
 800e0f4:	d12a      	bne.n	800e14c <_strtod_l+0xc4>
 800e0f6:	3601      	adds	r6, #1
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	9615      	str	r6, [sp, #84]	; 0x54
 800e0fc:	930a      	str	r3, [sp, #40]	; 0x28
 800e0fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e100:	2b00      	cmp	r3, #0
 800e102:	f040 857f 	bne.w	800ec04 <_strtod_l+0xb7c>
 800e106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e108:	b1db      	cbz	r3, 800e142 <_strtod_l+0xba>
 800e10a:	4642      	mov	r2, r8
 800e10c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e110:	ec43 2b10 	vmov	d0, r2, r3
 800e114:	b01b      	add	sp, #108	; 0x6c
 800e116:	ecbd 8b02 	vpop	{d8}
 800e11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11e:	2920      	cmp	r1, #32
 800e120:	d1cc      	bne.n	800e0bc <_strtod_l+0x34>
 800e122:	3201      	adds	r2, #1
 800e124:	e7bf      	b.n	800e0a6 <_strtod_l+0x1e>
 800e126:	292d      	cmp	r1, #45	; 0x2d
 800e128:	d1c8      	bne.n	800e0bc <_strtod_l+0x34>
 800e12a:	2101      	movs	r1, #1
 800e12c:	910a      	str	r1, [sp, #40]	; 0x28
 800e12e:	1c51      	adds	r1, r2, #1
 800e130:	9115      	str	r1, [sp, #84]	; 0x54
 800e132:	7852      	ldrb	r2, [r2, #1]
 800e134:	2a00      	cmp	r2, #0
 800e136:	d1c3      	bne.n	800e0c0 <_strtod_l+0x38>
 800e138:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e13a:	9515      	str	r5, [sp, #84]	; 0x54
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 855f 	bne.w	800ec00 <_strtod_l+0xb78>
 800e142:	4642      	mov	r2, r8
 800e144:	464b      	mov	r3, r9
 800e146:	e7e3      	b.n	800e110 <_strtod_l+0x88>
 800e148:	2100      	movs	r1, #0
 800e14a:	e7ef      	b.n	800e12c <_strtod_l+0xa4>
 800e14c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e14e:	b13a      	cbz	r2, 800e160 <_strtod_l+0xd8>
 800e150:	2135      	movs	r1, #53	; 0x35
 800e152:	a818      	add	r0, sp, #96	; 0x60
 800e154:	f7ff ff37 	bl	800dfc6 <__copybits>
 800e158:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7ff fb0a 	bl	800d774 <_Bfree>
 800e160:	3f01      	subs	r7, #1
 800e162:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e164:	2f04      	cmp	r7, #4
 800e166:	d806      	bhi.n	800e176 <_strtod_l+0xee>
 800e168:	e8df f007 	tbb	[pc, r7]
 800e16c:	201d0314 	.word	0x201d0314
 800e170:	14          	.byte	0x14
 800e171:	00          	.byte	0x00
 800e172:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e176:	05e9      	lsls	r1, r5, #23
 800e178:	bf48      	it	mi
 800e17a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e17e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e182:	0d1b      	lsrs	r3, r3, #20
 800e184:	051b      	lsls	r3, r3, #20
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1b9      	bne.n	800e0fe <_strtod_l+0x76>
 800e18a:	f7fe faf5 	bl	800c778 <__errno>
 800e18e:	2322      	movs	r3, #34	; 0x22
 800e190:	6003      	str	r3, [r0, #0]
 800e192:	e7b4      	b.n	800e0fe <_strtod_l+0x76>
 800e194:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e198:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e19c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e1a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e1a4:	e7e7      	b.n	800e176 <_strtod_l+0xee>
 800e1a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e320 <_strtod_l+0x298>
 800e1aa:	e7e4      	b.n	800e176 <_strtod_l+0xee>
 800e1ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e1b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e1b4:	e7df      	b.n	800e176 <_strtod_l+0xee>
 800e1b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	9215      	str	r2, [sp, #84]	; 0x54
 800e1bc:	785b      	ldrb	r3, [r3, #1]
 800e1be:	2b30      	cmp	r3, #48	; 0x30
 800e1c0:	d0f9      	beq.n	800e1b6 <_strtod_l+0x12e>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d09b      	beq.n	800e0fe <_strtod_l+0x76>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	f04f 0a00 	mov.w	sl, #0
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e1d6:	46d3      	mov	fp, sl
 800e1d8:	220a      	movs	r2, #10
 800e1da:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e1dc:	7806      	ldrb	r6, [r0, #0]
 800e1de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e1e2:	b2d9      	uxtb	r1, r3
 800e1e4:	2909      	cmp	r1, #9
 800e1e6:	d926      	bls.n	800e236 <_strtod_l+0x1ae>
 800e1e8:	494c      	ldr	r1, [pc, #304]	; (800e31c <_strtod_l+0x294>)
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f7fe fa68 	bl	800c6c0 <strncmp>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d030      	beq.n	800e256 <_strtod_l+0x1ce>
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	4632      	mov	r2, r6
 800e1f8:	9005      	str	r0, [sp, #20]
 800e1fa:	465e      	mov	r6, fp
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2a65      	cmp	r2, #101	; 0x65
 800e200:	d001      	beq.n	800e206 <_strtod_l+0x17e>
 800e202:	2a45      	cmp	r2, #69	; 0x45
 800e204:	d113      	bne.n	800e22e <_strtod_l+0x1a6>
 800e206:	b91e      	cbnz	r6, 800e210 <_strtod_l+0x188>
 800e208:	9a04      	ldr	r2, [sp, #16]
 800e20a:	4302      	orrs	r2, r0
 800e20c:	d094      	beq.n	800e138 <_strtod_l+0xb0>
 800e20e:	2600      	movs	r6, #0
 800e210:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e212:	1c6a      	adds	r2, r5, #1
 800e214:	9215      	str	r2, [sp, #84]	; 0x54
 800e216:	786a      	ldrb	r2, [r5, #1]
 800e218:	2a2b      	cmp	r2, #43	; 0x2b
 800e21a:	d074      	beq.n	800e306 <_strtod_l+0x27e>
 800e21c:	2a2d      	cmp	r2, #45	; 0x2d
 800e21e:	d078      	beq.n	800e312 <_strtod_l+0x28a>
 800e220:	f04f 0c00 	mov.w	ip, #0
 800e224:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e228:	2909      	cmp	r1, #9
 800e22a:	d97f      	bls.n	800e32c <_strtod_l+0x2a4>
 800e22c:	9515      	str	r5, [sp, #84]	; 0x54
 800e22e:	2700      	movs	r7, #0
 800e230:	e09e      	b.n	800e370 <_strtod_l+0x2e8>
 800e232:	2300      	movs	r3, #0
 800e234:	e7c8      	b.n	800e1c8 <_strtod_l+0x140>
 800e236:	f1bb 0f08 	cmp.w	fp, #8
 800e23a:	bfd8      	it	le
 800e23c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e23e:	f100 0001 	add.w	r0, r0, #1
 800e242:	bfda      	itte	le
 800e244:	fb02 3301 	mlale	r3, r2, r1, r3
 800e248:	9309      	strle	r3, [sp, #36]	; 0x24
 800e24a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e24e:	f10b 0b01 	add.w	fp, fp, #1
 800e252:	9015      	str	r0, [sp, #84]	; 0x54
 800e254:	e7c1      	b.n	800e1da <_strtod_l+0x152>
 800e256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	9215      	str	r2, [sp, #84]	; 0x54
 800e25c:	785a      	ldrb	r2, [r3, #1]
 800e25e:	f1bb 0f00 	cmp.w	fp, #0
 800e262:	d037      	beq.n	800e2d4 <_strtod_l+0x24c>
 800e264:	9005      	str	r0, [sp, #20]
 800e266:	465e      	mov	r6, fp
 800e268:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e26c:	2b09      	cmp	r3, #9
 800e26e:	d912      	bls.n	800e296 <_strtod_l+0x20e>
 800e270:	2301      	movs	r3, #1
 800e272:	e7c4      	b.n	800e1fe <_strtod_l+0x176>
 800e274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e276:	1c5a      	adds	r2, r3, #1
 800e278:	9215      	str	r2, [sp, #84]	; 0x54
 800e27a:	785a      	ldrb	r2, [r3, #1]
 800e27c:	3001      	adds	r0, #1
 800e27e:	2a30      	cmp	r2, #48	; 0x30
 800e280:	d0f8      	beq.n	800e274 <_strtod_l+0x1ec>
 800e282:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e286:	2b08      	cmp	r3, #8
 800e288:	f200 84c1 	bhi.w	800ec0e <_strtod_l+0xb86>
 800e28c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e28e:	9005      	str	r0, [sp, #20]
 800e290:	2000      	movs	r0, #0
 800e292:	930b      	str	r3, [sp, #44]	; 0x2c
 800e294:	4606      	mov	r6, r0
 800e296:	3a30      	subs	r2, #48	; 0x30
 800e298:	f100 0301 	add.w	r3, r0, #1
 800e29c:	d014      	beq.n	800e2c8 <_strtod_l+0x240>
 800e29e:	9905      	ldr	r1, [sp, #20]
 800e2a0:	4419      	add	r1, r3
 800e2a2:	9105      	str	r1, [sp, #20]
 800e2a4:	4633      	mov	r3, r6
 800e2a6:	eb00 0c06 	add.w	ip, r0, r6
 800e2aa:	210a      	movs	r1, #10
 800e2ac:	4563      	cmp	r3, ip
 800e2ae:	d113      	bne.n	800e2d8 <_strtod_l+0x250>
 800e2b0:	1833      	adds	r3, r6, r0
 800e2b2:	2b08      	cmp	r3, #8
 800e2b4:	f106 0601 	add.w	r6, r6, #1
 800e2b8:	4406      	add	r6, r0
 800e2ba:	dc1a      	bgt.n	800e2f2 <_strtod_l+0x26a>
 800e2bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2be:	230a      	movs	r3, #10
 800e2c0:	fb03 2301 	mla	r3, r3, r1, r2
 800e2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e2ca:	1c51      	adds	r1, r2, #1
 800e2cc:	9115      	str	r1, [sp, #84]	; 0x54
 800e2ce:	7852      	ldrb	r2, [r2, #1]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	e7c9      	b.n	800e268 <_strtod_l+0x1e0>
 800e2d4:	4658      	mov	r0, fp
 800e2d6:	e7d2      	b.n	800e27e <_strtod_l+0x1f6>
 800e2d8:	2b08      	cmp	r3, #8
 800e2da:	f103 0301 	add.w	r3, r3, #1
 800e2de:	dc03      	bgt.n	800e2e8 <_strtod_l+0x260>
 800e2e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e2e2:	434f      	muls	r7, r1
 800e2e4:	9709      	str	r7, [sp, #36]	; 0x24
 800e2e6:	e7e1      	b.n	800e2ac <_strtod_l+0x224>
 800e2e8:	2b10      	cmp	r3, #16
 800e2ea:	bfd8      	it	le
 800e2ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e2f0:	e7dc      	b.n	800e2ac <_strtod_l+0x224>
 800e2f2:	2e10      	cmp	r6, #16
 800e2f4:	bfdc      	itt	le
 800e2f6:	230a      	movle	r3, #10
 800e2f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e2fc:	e7e3      	b.n	800e2c6 <_strtod_l+0x23e>
 800e2fe:	2300      	movs	r3, #0
 800e300:	9305      	str	r3, [sp, #20]
 800e302:	2301      	movs	r3, #1
 800e304:	e780      	b.n	800e208 <_strtod_l+0x180>
 800e306:	f04f 0c00 	mov.w	ip, #0
 800e30a:	1caa      	adds	r2, r5, #2
 800e30c:	9215      	str	r2, [sp, #84]	; 0x54
 800e30e:	78aa      	ldrb	r2, [r5, #2]
 800e310:	e788      	b.n	800e224 <_strtod_l+0x19c>
 800e312:	f04f 0c01 	mov.w	ip, #1
 800e316:	e7f8      	b.n	800e30a <_strtod_l+0x282>
 800e318:	08029690 	.word	0x08029690
 800e31c:	0802968c 	.word	0x0802968c
 800e320:	7ff00000 	.word	0x7ff00000
 800e324:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e326:	1c51      	adds	r1, r2, #1
 800e328:	9115      	str	r1, [sp, #84]	; 0x54
 800e32a:	7852      	ldrb	r2, [r2, #1]
 800e32c:	2a30      	cmp	r2, #48	; 0x30
 800e32e:	d0f9      	beq.n	800e324 <_strtod_l+0x29c>
 800e330:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e334:	2908      	cmp	r1, #8
 800e336:	f63f af7a 	bhi.w	800e22e <_strtod_l+0x1a6>
 800e33a:	3a30      	subs	r2, #48	; 0x30
 800e33c:	9208      	str	r2, [sp, #32]
 800e33e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e340:	920c      	str	r2, [sp, #48]	; 0x30
 800e342:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e344:	1c57      	adds	r7, r2, #1
 800e346:	9715      	str	r7, [sp, #84]	; 0x54
 800e348:	7852      	ldrb	r2, [r2, #1]
 800e34a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e34e:	f1be 0f09 	cmp.w	lr, #9
 800e352:	d938      	bls.n	800e3c6 <_strtod_l+0x33e>
 800e354:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e356:	1a7f      	subs	r7, r7, r1
 800e358:	2f08      	cmp	r7, #8
 800e35a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e35e:	dc03      	bgt.n	800e368 <_strtod_l+0x2e0>
 800e360:	9908      	ldr	r1, [sp, #32]
 800e362:	428f      	cmp	r7, r1
 800e364:	bfa8      	it	ge
 800e366:	460f      	movge	r7, r1
 800e368:	f1bc 0f00 	cmp.w	ip, #0
 800e36c:	d000      	beq.n	800e370 <_strtod_l+0x2e8>
 800e36e:	427f      	negs	r7, r7
 800e370:	2e00      	cmp	r6, #0
 800e372:	d14f      	bne.n	800e414 <_strtod_l+0x38c>
 800e374:	9904      	ldr	r1, [sp, #16]
 800e376:	4301      	orrs	r1, r0
 800e378:	f47f aec1 	bne.w	800e0fe <_strtod_l+0x76>
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f47f aedb 	bne.w	800e138 <_strtod_l+0xb0>
 800e382:	2a69      	cmp	r2, #105	; 0x69
 800e384:	d029      	beq.n	800e3da <_strtod_l+0x352>
 800e386:	dc26      	bgt.n	800e3d6 <_strtod_l+0x34e>
 800e388:	2a49      	cmp	r2, #73	; 0x49
 800e38a:	d026      	beq.n	800e3da <_strtod_l+0x352>
 800e38c:	2a4e      	cmp	r2, #78	; 0x4e
 800e38e:	f47f aed3 	bne.w	800e138 <_strtod_l+0xb0>
 800e392:	499b      	ldr	r1, [pc, #620]	; (800e600 <_strtod_l+0x578>)
 800e394:	a815      	add	r0, sp, #84	; 0x54
 800e396:	f001 fee7 	bl	8010168 <__match>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	f43f aecc 	beq.w	800e138 <_strtod_l+0xb0>
 800e3a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b28      	cmp	r3, #40	; 0x28
 800e3a6:	d12f      	bne.n	800e408 <_strtod_l+0x380>
 800e3a8:	4996      	ldr	r1, [pc, #600]	; (800e604 <_strtod_l+0x57c>)
 800e3aa:	aa18      	add	r2, sp, #96	; 0x60
 800e3ac:	a815      	add	r0, sp, #84	; 0x54
 800e3ae:	f001 feef 	bl	8010190 <__hexnan>
 800e3b2:	2805      	cmp	r0, #5
 800e3b4:	d128      	bne.n	800e408 <_strtod_l+0x380>
 800e3b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e3bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e3c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e3c4:	e69b      	b.n	800e0fe <_strtod_l+0x76>
 800e3c6:	9f08      	ldr	r7, [sp, #32]
 800e3c8:	210a      	movs	r1, #10
 800e3ca:	fb01 2107 	mla	r1, r1, r7, r2
 800e3ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e3d2:	9208      	str	r2, [sp, #32]
 800e3d4:	e7b5      	b.n	800e342 <_strtod_l+0x2ba>
 800e3d6:	2a6e      	cmp	r2, #110	; 0x6e
 800e3d8:	e7d9      	b.n	800e38e <_strtod_l+0x306>
 800e3da:	498b      	ldr	r1, [pc, #556]	; (800e608 <_strtod_l+0x580>)
 800e3dc:	a815      	add	r0, sp, #84	; 0x54
 800e3de:	f001 fec3 	bl	8010168 <__match>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	f43f aea8 	beq.w	800e138 <_strtod_l+0xb0>
 800e3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3ea:	4988      	ldr	r1, [pc, #544]	; (800e60c <_strtod_l+0x584>)
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	a815      	add	r0, sp, #84	; 0x54
 800e3f0:	9315      	str	r3, [sp, #84]	; 0x54
 800e3f2:	f001 feb9 	bl	8010168 <__match>
 800e3f6:	b910      	cbnz	r0, 800e3fe <_strtod_l+0x376>
 800e3f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	9315      	str	r3, [sp, #84]	; 0x54
 800e3fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e61c <_strtod_l+0x594>
 800e402:	f04f 0800 	mov.w	r8, #0
 800e406:	e67a      	b.n	800e0fe <_strtod_l+0x76>
 800e408:	4881      	ldr	r0, [pc, #516]	; (800e610 <_strtod_l+0x588>)
 800e40a:	f001 fbc9 	bl	800fba0 <nan>
 800e40e:	ec59 8b10 	vmov	r8, r9, d0
 800e412:	e674      	b.n	800e0fe <_strtod_l+0x76>
 800e414:	9b05      	ldr	r3, [sp, #20]
 800e416:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e418:	1afb      	subs	r3, r7, r3
 800e41a:	f1bb 0f00 	cmp.w	fp, #0
 800e41e:	bf08      	it	eq
 800e420:	46b3      	moveq	fp, r6
 800e422:	2e10      	cmp	r6, #16
 800e424:	9308      	str	r3, [sp, #32]
 800e426:	4635      	mov	r5, r6
 800e428:	bfa8      	it	ge
 800e42a:	2510      	movge	r5, #16
 800e42c:	f7f2 f882 	bl	8000534 <__aeabi_ui2d>
 800e430:	2e09      	cmp	r6, #9
 800e432:	4680      	mov	r8, r0
 800e434:	4689      	mov	r9, r1
 800e436:	dd13      	ble.n	800e460 <_strtod_l+0x3d8>
 800e438:	4b76      	ldr	r3, [pc, #472]	; (800e614 <_strtod_l+0x58c>)
 800e43a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e43e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e442:	f7f2 f8f1 	bl	8000628 <__aeabi_dmul>
 800e446:	4680      	mov	r8, r0
 800e448:	4650      	mov	r0, sl
 800e44a:	4689      	mov	r9, r1
 800e44c:	f7f2 f872 	bl	8000534 <__aeabi_ui2d>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4640      	mov	r0, r8
 800e456:	4649      	mov	r1, r9
 800e458:	f7f1 ff30 	bl	80002bc <__adddf3>
 800e45c:	4680      	mov	r8, r0
 800e45e:	4689      	mov	r9, r1
 800e460:	2e0f      	cmp	r6, #15
 800e462:	dc38      	bgt.n	800e4d6 <_strtod_l+0x44e>
 800e464:	9b08      	ldr	r3, [sp, #32]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f43f ae49 	beq.w	800e0fe <_strtod_l+0x76>
 800e46c:	dd24      	ble.n	800e4b8 <_strtod_l+0x430>
 800e46e:	2b16      	cmp	r3, #22
 800e470:	dc0b      	bgt.n	800e48a <_strtod_l+0x402>
 800e472:	4968      	ldr	r1, [pc, #416]	; (800e614 <_strtod_l+0x58c>)
 800e474:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e47c:	4642      	mov	r2, r8
 800e47e:	464b      	mov	r3, r9
 800e480:	f7f2 f8d2 	bl	8000628 <__aeabi_dmul>
 800e484:	4680      	mov	r8, r0
 800e486:	4689      	mov	r9, r1
 800e488:	e639      	b.n	800e0fe <_strtod_l+0x76>
 800e48a:	9a08      	ldr	r2, [sp, #32]
 800e48c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e490:	4293      	cmp	r3, r2
 800e492:	db20      	blt.n	800e4d6 <_strtod_l+0x44e>
 800e494:	4c5f      	ldr	r4, [pc, #380]	; (800e614 <_strtod_l+0x58c>)
 800e496:	f1c6 060f 	rsb	r6, r6, #15
 800e49a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e49e:	4642      	mov	r2, r8
 800e4a0:	464b      	mov	r3, r9
 800e4a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4a6:	f7f2 f8bf 	bl	8000628 <__aeabi_dmul>
 800e4aa:	9b08      	ldr	r3, [sp, #32]
 800e4ac:	1b9e      	subs	r6, r3, r6
 800e4ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e4b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e4b6:	e7e3      	b.n	800e480 <_strtod_l+0x3f8>
 800e4b8:	9b08      	ldr	r3, [sp, #32]
 800e4ba:	3316      	adds	r3, #22
 800e4bc:	db0b      	blt.n	800e4d6 <_strtod_l+0x44e>
 800e4be:	9b05      	ldr	r3, [sp, #20]
 800e4c0:	1bdf      	subs	r7, r3, r7
 800e4c2:	4b54      	ldr	r3, [pc, #336]	; (800e614 <_strtod_l+0x58c>)
 800e4c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4cc:	4640      	mov	r0, r8
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	f7f2 f9d4 	bl	800087c <__aeabi_ddiv>
 800e4d4:	e7d6      	b.n	800e484 <_strtod_l+0x3fc>
 800e4d6:	9b08      	ldr	r3, [sp, #32]
 800e4d8:	1b75      	subs	r5, r6, r5
 800e4da:	441d      	add	r5, r3
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	dd70      	ble.n	800e5c2 <_strtod_l+0x53a>
 800e4e0:	f015 030f 	ands.w	r3, r5, #15
 800e4e4:	d00a      	beq.n	800e4fc <_strtod_l+0x474>
 800e4e6:	494b      	ldr	r1, [pc, #300]	; (800e614 <_strtod_l+0x58c>)
 800e4e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4ec:	4642      	mov	r2, r8
 800e4ee:	464b      	mov	r3, r9
 800e4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f4:	f7f2 f898 	bl	8000628 <__aeabi_dmul>
 800e4f8:	4680      	mov	r8, r0
 800e4fa:	4689      	mov	r9, r1
 800e4fc:	f035 050f 	bics.w	r5, r5, #15
 800e500:	d04d      	beq.n	800e59e <_strtod_l+0x516>
 800e502:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e506:	dd22      	ble.n	800e54e <_strtod_l+0x4c6>
 800e508:	2500      	movs	r5, #0
 800e50a:	46ab      	mov	fp, r5
 800e50c:	9509      	str	r5, [sp, #36]	; 0x24
 800e50e:	9505      	str	r5, [sp, #20]
 800e510:	2322      	movs	r3, #34	; 0x22
 800e512:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e61c <_strtod_l+0x594>
 800e516:	6023      	str	r3, [r4, #0]
 800e518:	f04f 0800 	mov.w	r8, #0
 800e51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f43f aded 	beq.w	800e0fe <_strtod_l+0x76>
 800e524:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e526:	4620      	mov	r0, r4
 800e528:	f7ff f924 	bl	800d774 <_Bfree>
 800e52c:	9905      	ldr	r1, [sp, #20]
 800e52e:	4620      	mov	r0, r4
 800e530:	f7ff f920 	bl	800d774 <_Bfree>
 800e534:	4659      	mov	r1, fp
 800e536:	4620      	mov	r0, r4
 800e538:	f7ff f91c 	bl	800d774 <_Bfree>
 800e53c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e53e:	4620      	mov	r0, r4
 800e540:	f7ff f918 	bl	800d774 <_Bfree>
 800e544:	4629      	mov	r1, r5
 800e546:	4620      	mov	r0, r4
 800e548:	f7ff f914 	bl	800d774 <_Bfree>
 800e54c:	e5d7      	b.n	800e0fe <_strtod_l+0x76>
 800e54e:	4b32      	ldr	r3, [pc, #200]	; (800e618 <_strtod_l+0x590>)
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	2300      	movs	r3, #0
 800e554:	112d      	asrs	r5, r5, #4
 800e556:	4640      	mov	r0, r8
 800e558:	4649      	mov	r1, r9
 800e55a:	469a      	mov	sl, r3
 800e55c:	2d01      	cmp	r5, #1
 800e55e:	dc21      	bgt.n	800e5a4 <_strtod_l+0x51c>
 800e560:	b10b      	cbz	r3, 800e566 <_strtod_l+0x4de>
 800e562:	4680      	mov	r8, r0
 800e564:	4689      	mov	r9, r1
 800e566:	492c      	ldr	r1, [pc, #176]	; (800e618 <_strtod_l+0x590>)
 800e568:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e56c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e570:	4642      	mov	r2, r8
 800e572:	464b      	mov	r3, r9
 800e574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e578:	f7f2 f856 	bl	8000628 <__aeabi_dmul>
 800e57c:	4b27      	ldr	r3, [pc, #156]	; (800e61c <_strtod_l+0x594>)
 800e57e:	460a      	mov	r2, r1
 800e580:	400b      	ands	r3, r1
 800e582:	4927      	ldr	r1, [pc, #156]	; (800e620 <_strtod_l+0x598>)
 800e584:	428b      	cmp	r3, r1
 800e586:	4680      	mov	r8, r0
 800e588:	d8be      	bhi.n	800e508 <_strtod_l+0x480>
 800e58a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e58e:	428b      	cmp	r3, r1
 800e590:	bf86      	itte	hi
 800e592:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e624 <_strtod_l+0x59c>
 800e596:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800e59a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e59e:	2300      	movs	r3, #0
 800e5a0:	9304      	str	r3, [sp, #16]
 800e5a2:	e07b      	b.n	800e69c <_strtod_l+0x614>
 800e5a4:	07ea      	lsls	r2, r5, #31
 800e5a6:	d505      	bpl.n	800e5b4 <_strtod_l+0x52c>
 800e5a8:	9b04      	ldr	r3, [sp, #16]
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f7f2 f83b 	bl	8000628 <__aeabi_dmul>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	9a04      	ldr	r2, [sp, #16]
 800e5b6:	3208      	adds	r2, #8
 800e5b8:	f10a 0a01 	add.w	sl, sl, #1
 800e5bc:	106d      	asrs	r5, r5, #1
 800e5be:	9204      	str	r2, [sp, #16]
 800e5c0:	e7cc      	b.n	800e55c <_strtod_l+0x4d4>
 800e5c2:	d0ec      	beq.n	800e59e <_strtod_l+0x516>
 800e5c4:	426d      	negs	r5, r5
 800e5c6:	f015 020f 	ands.w	r2, r5, #15
 800e5ca:	d00a      	beq.n	800e5e2 <_strtod_l+0x55a>
 800e5cc:	4b11      	ldr	r3, [pc, #68]	; (800e614 <_strtod_l+0x58c>)
 800e5ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f2 f94f 	bl	800087c <__aeabi_ddiv>
 800e5de:	4680      	mov	r8, r0
 800e5e0:	4689      	mov	r9, r1
 800e5e2:	112d      	asrs	r5, r5, #4
 800e5e4:	d0db      	beq.n	800e59e <_strtod_l+0x516>
 800e5e6:	2d1f      	cmp	r5, #31
 800e5e8:	dd1e      	ble.n	800e628 <_strtod_l+0x5a0>
 800e5ea:	2500      	movs	r5, #0
 800e5ec:	46ab      	mov	fp, r5
 800e5ee:	9509      	str	r5, [sp, #36]	; 0x24
 800e5f0:	9505      	str	r5, [sp, #20]
 800e5f2:	2322      	movs	r3, #34	; 0x22
 800e5f4:	f04f 0800 	mov.w	r8, #0
 800e5f8:	f04f 0900 	mov.w	r9, #0
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	e78d      	b.n	800e51c <_strtod_l+0x494>
 800e600:	0802947a 	.word	0x0802947a
 800e604:	080296a4 	.word	0x080296a4
 800e608:	08029472 	.word	0x08029472
 800e60c:	080294a7 	.word	0x080294a7
 800e610:	08029850 	.word	0x08029850
 800e614:	080295b8 	.word	0x080295b8
 800e618:	08029590 	.word	0x08029590
 800e61c:	7ff00000 	.word	0x7ff00000
 800e620:	7ca00000 	.word	0x7ca00000
 800e624:	7fefffff 	.word	0x7fefffff
 800e628:	f015 0310 	ands.w	r3, r5, #16
 800e62c:	bf18      	it	ne
 800e62e:	236a      	movne	r3, #106	; 0x6a
 800e630:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e9d4 <_strtod_l+0x94c>
 800e634:	9304      	str	r3, [sp, #16]
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	2300      	movs	r3, #0
 800e63c:	07ea      	lsls	r2, r5, #31
 800e63e:	d504      	bpl.n	800e64a <_strtod_l+0x5c2>
 800e640:	e9da 2300 	ldrd	r2, r3, [sl]
 800e644:	f7f1 fff0 	bl	8000628 <__aeabi_dmul>
 800e648:	2301      	movs	r3, #1
 800e64a:	106d      	asrs	r5, r5, #1
 800e64c:	f10a 0a08 	add.w	sl, sl, #8
 800e650:	d1f4      	bne.n	800e63c <_strtod_l+0x5b4>
 800e652:	b10b      	cbz	r3, 800e658 <_strtod_l+0x5d0>
 800e654:	4680      	mov	r8, r0
 800e656:	4689      	mov	r9, r1
 800e658:	9b04      	ldr	r3, [sp, #16]
 800e65a:	b1bb      	cbz	r3, 800e68c <_strtod_l+0x604>
 800e65c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e660:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e664:	2b00      	cmp	r3, #0
 800e666:	4649      	mov	r1, r9
 800e668:	dd10      	ble.n	800e68c <_strtod_l+0x604>
 800e66a:	2b1f      	cmp	r3, #31
 800e66c:	f340 811e 	ble.w	800e8ac <_strtod_l+0x824>
 800e670:	2b34      	cmp	r3, #52	; 0x34
 800e672:	bfde      	ittt	le
 800e674:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e678:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e67c:	4093      	lslle	r3, r2
 800e67e:	f04f 0800 	mov.w	r8, #0
 800e682:	bfcc      	ite	gt
 800e684:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e688:	ea03 0901 	andle.w	r9, r3, r1
 800e68c:	2200      	movs	r2, #0
 800e68e:	2300      	movs	r3, #0
 800e690:	4640      	mov	r0, r8
 800e692:	4649      	mov	r1, r9
 800e694:	f7f2 fa30 	bl	8000af8 <__aeabi_dcmpeq>
 800e698:	2800      	cmp	r0, #0
 800e69a:	d1a6      	bne.n	800e5ea <_strtod_l+0x562>
 800e69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6a2:	4633      	mov	r3, r6
 800e6a4:	465a      	mov	r2, fp
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f7ff f8cc 	bl	800d844 <__s2b>
 800e6ac:	9009      	str	r0, [sp, #36]	; 0x24
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f af2a 	beq.w	800e508 <_strtod_l+0x480>
 800e6b4:	9a08      	ldr	r2, [sp, #32]
 800e6b6:	9b05      	ldr	r3, [sp, #20]
 800e6b8:	2a00      	cmp	r2, #0
 800e6ba:	eba3 0307 	sub.w	r3, r3, r7
 800e6be:	bfa8      	it	ge
 800e6c0:	2300      	movge	r3, #0
 800e6c2:	930c      	str	r3, [sp, #48]	; 0x30
 800e6c4:	2500      	movs	r5, #0
 800e6c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e6ca:	9312      	str	r3, [sp, #72]	; 0x48
 800e6cc:	46ab      	mov	fp, r5
 800e6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	6859      	ldr	r1, [r3, #4]
 800e6d4:	f7ff f80e 	bl	800d6f4 <_Balloc>
 800e6d8:	9005      	str	r0, [sp, #20]
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	f43f af18 	beq.w	800e510 <_strtod_l+0x488>
 800e6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6e2:	691a      	ldr	r2, [r3, #16]
 800e6e4:	3202      	adds	r2, #2
 800e6e6:	f103 010c 	add.w	r1, r3, #12
 800e6ea:	0092      	lsls	r2, r2, #2
 800e6ec:	300c      	adds	r0, #12
 800e6ee:	f7fe f870 	bl	800c7d2 <memcpy>
 800e6f2:	ec49 8b10 	vmov	d0, r8, r9
 800e6f6:	aa18      	add	r2, sp, #96	; 0x60
 800e6f8:	a917      	add	r1, sp, #92	; 0x5c
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff fbd6 	bl	800deac <__d2b>
 800e700:	ec49 8b18 	vmov	d8, r8, r9
 800e704:	9016      	str	r0, [sp, #88]	; 0x58
 800e706:	2800      	cmp	r0, #0
 800e708:	f43f af02 	beq.w	800e510 <_strtod_l+0x488>
 800e70c:	2101      	movs	r1, #1
 800e70e:	4620      	mov	r0, r4
 800e710:	f7ff f930 	bl	800d974 <__i2b>
 800e714:	4683      	mov	fp, r0
 800e716:	2800      	cmp	r0, #0
 800e718:	f43f aefa 	beq.w	800e510 <_strtod_l+0x488>
 800e71c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e71e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e720:	2e00      	cmp	r6, #0
 800e722:	bfab      	itete	ge
 800e724:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e726:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e728:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e72a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e72e:	bfac      	ite	ge
 800e730:	eb06 0a03 	addge.w	sl, r6, r3
 800e734:	1b9f      	sublt	r7, r3, r6
 800e736:	9b04      	ldr	r3, [sp, #16]
 800e738:	1af6      	subs	r6, r6, r3
 800e73a:	4416      	add	r6, r2
 800e73c:	4ba0      	ldr	r3, [pc, #640]	; (800e9c0 <_strtod_l+0x938>)
 800e73e:	3e01      	subs	r6, #1
 800e740:	429e      	cmp	r6, r3
 800e742:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e746:	f280 80c4 	bge.w	800e8d2 <_strtod_l+0x84a>
 800e74a:	1b9b      	subs	r3, r3, r6
 800e74c:	2b1f      	cmp	r3, #31
 800e74e:	eba2 0203 	sub.w	r2, r2, r3
 800e752:	f04f 0101 	mov.w	r1, #1
 800e756:	f300 80b0 	bgt.w	800e8ba <_strtod_l+0x832>
 800e75a:	fa01 f303 	lsl.w	r3, r1, r3
 800e75e:	930e      	str	r3, [sp, #56]	; 0x38
 800e760:	2300      	movs	r3, #0
 800e762:	930d      	str	r3, [sp, #52]	; 0x34
 800e764:	eb0a 0602 	add.w	r6, sl, r2
 800e768:	9b04      	ldr	r3, [sp, #16]
 800e76a:	45b2      	cmp	sl, r6
 800e76c:	4417      	add	r7, r2
 800e76e:	441f      	add	r7, r3
 800e770:	4653      	mov	r3, sl
 800e772:	bfa8      	it	ge
 800e774:	4633      	movge	r3, r6
 800e776:	42bb      	cmp	r3, r7
 800e778:	bfa8      	it	ge
 800e77a:	463b      	movge	r3, r7
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	bfc2      	ittt	gt
 800e780:	1af6      	subgt	r6, r6, r3
 800e782:	1aff      	subgt	r7, r7, r3
 800e784:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	dd17      	ble.n	800e7be <_strtod_l+0x736>
 800e78e:	4659      	mov	r1, fp
 800e790:	461a      	mov	r2, r3
 800e792:	4620      	mov	r0, r4
 800e794:	f7ff f9ae 	bl	800daf4 <__pow5mult>
 800e798:	4683      	mov	fp, r0
 800e79a:	2800      	cmp	r0, #0
 800e79c:	f43f aeb8 	beq.w	800e510 <_strtod_l+0x488>
 800e7a0:	4601      	mov	r1, r0
 800e7a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f7ff f8fb 	bl	800d9a0 <__multiply>
 800e7aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	f43f aeaf 	beq.w	800e510 <_strtod_l+0x488>
 800e7b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f7fe ffdd 	bl	800d774 <_Bfree>
 800e7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7bc:	9316      	str	r3, [sp, #88]	; 0x58
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	f300 808c 	bgt.w	800e8dc <_strtod_l+0x854>
 800e7c4:	9b08      	ldr	r3, [sp, #32]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	dd08      	ble.n	800e7dc <_strtod_l+0x754>
 800e7ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7cc:	9905      	ldr	r1, [sp, #20]
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f7ff f990 	bl	800daf4 <__pow5mult>
 800e7d4:	9005      	str	r0, [sp, #20]
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	f43f ae9a 	beq.w	800e510 <_strtod_l+0x488>
 800e7dc:	2f00      	cmp	r7, #0
 800e7de:	dd08      	ble.n	800e7f2 <_strtod_l+0x76a>
 800e7e0:	9905      	ldr	r1, [sp, #20]
 800e7e2:	463a      	mov	r2, r7
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f7ff f9df 	bl	800dba8 <__lshift>
 800e7ea:	9005      	str	r0, [sp, #20]
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f43f ae8f 	beq.w	800e510 <_strtod_l+0x488>
 800e7f2:	f1ba 0f00 	cmp.w	sl, #0
 800e7f6:	dd08      	ble.n	800e80a <_strtod_l+0x782>
 800e7f8:	4659      	mov	r1, fp
 800e7fa:	4652      	mov	r2, sl
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f7ff f9d3 	bl	800dba8 <__lshift>
 800e802:	4683      	mov	fp, r0
 800e804:	2800      	cmp	r0, #0
 800e806:	f43f ae83 	beq.w	800e510 <_strtod_l+0x488>
 800e80a:	9a05      	ldr	r2, [sp, #20]
 800e80c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e80e:	4620      	mov	r0, r4
 800e810:	f7ff fa52 	bl	800dcb8 <__mdiff>
 800e814:	4605      	mov	r5, r0
 800e816:	2800      	cmp	r0, #0
 800e818:	f43f ae7a 	beq.w	800e510 <_strtod_l+0x488>
 800e81c:	68c3      	ldr	r3, [r0, #12]
 800e81e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e820:	2300      	movs	r3, #0
 800e822:	60c3      	str	r3, [r0, #12]
 800e824:	4659      	mov	r1, fp
 800e826:	f7ff fa2b 	bl	800dc80 <__mcmp>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	da60      	bge.n	800e8f0 <_strtod_l+0x868>
 800e82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e830:	ea53 0308 	orrs.w	r3, r3, r8
 800e834:	f040 8084 	bne.w	800e940 <_strtod_l+0x8b8>
 800e838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d17f      	bne.n	800e940 <_strtod_l+0x8b8>
 800e840:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e844:	0d1b      	lsrs	r3, r3, #20
 800e846:	051b      	lsls	r3, r3, #20
 800e848:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e84c:	d978      	bls.n	800e940 <_strtod_l+0x8b8>
 800e84e:	696b      	ldr	r3, [r5, #20]
 800e850:	b913      	cbnz	r3, 800e858 <_strtod_l+0x7d0>
 800e852:	692b      	ldr	r3, [r5, #16]
 800e854:	2b01      	cmp	r3, #1
 800e856:	dd73      	ble.n	800e940 <_strtod_l+0x8b8>
 800e858:	4629      	mov	r1, r5
 800e85a:	2201      	movs	r2, #1
 800e85c:	4620      	mov	r0, r4
 800e85e:	f7ff f9a3 	bl	800dba8 <__lshift>
 800e862:	4659      	mov	r1, fp
 800e864:	4605      	mov	r5, r0
 800e866:	f7ff fa0b 	bl	800dc80 <__mcmp>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	dd68      	ble.n	800e940 <_strtod_l+0x8b8>
 800e86e:	9904      	ldr	r1, [sp, #16]
 800e870:	4a54      	ldr	r2, [pc, #336]	; (800e9c4 <_strtod_l+0x93c>)
 800e872:	464b      	mov	r3, r9
 800e874:	2900      	cmp	r1, #0
 800e876:	f000 8084 	beq.w	800e982 <_strtod_l+0x8fa>
 800e87a:	ea02 0109 	and.w	r1, r2, r9
 800e87e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e882:	dc7e      	bgt.n	800e982 <_strtod_l+0x8fa>
 800e884:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e888:	f77f aeb3 	ble.w	800e5f2 <_strtod_l+0x56a>
 800e88c:	4b4e      	ldr	r3, [pc, #312]	; (800e9c8 <_strtod_l+0x940>)
 800e88e:	4640      	mov	r0, r8
 800e890:	4649      	mov	r1, r9
 800e892:	2200      	movs	r2, #0
 800e894:	f7f1 fec8 	bl	8000628 <__aeabi_dmul>
 800e898:	4b4a      	ldr	r3, [pc, #296]	; (800e9c4 <_strtod_l+0x93c>)
 800e89a:	400b      	ands	r3, r1
 800e89c:	4680      	mov	r8, r0
 800e89e:	4689      	mov	r9, r1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f47f ae3f 	bne.w	800e524 <_strtod_l+0x49c>
 800e8a6:	2322      	movs	r3, #34	; 0x22
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	e63b      	b.n	800e524 <_strtod_l+0x49c>
 800e8ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b4:	ea03 0808 	and.w	r8, r3, r8
 800e8b8:	e6e8      	b.n	800e68c <_strtod_l+0x604>
 800e8ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e8be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e8c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e8c6:	36e2      	adds	r6, #226	; 0xe2
 800e8c8:	fa01 f306 	lsl.w	r3, r1, r6
 800e8cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e8d0:	e748      	b.n	800e764 <_strtod_l+0x6dc>
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e8da:	e743      	b.n	800e764 <_strtod_l+0x6dc>
 800e8dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e8de:	4632      	mov	r2, r6
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f7ff f961 	bl	800dba8 <__lshift>
 800e8e6:	9016      	str	r0, [sp, #88]	; 0x58
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	f47f af6b 	bne.w	800e7c4 <_strtod_l+0x73c>
 800e8ee:	e60f      	b.n	800e510 <_strtod_l+0x488>
 800e8f0:	46ca      	mov	sl, r9
 800e8f2:	d171      	bne.n	800e9d8 <_strtod_l+0x950>
 800e8f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8fa:	b352      	cbz	r2, 800e952 <_strtod_l+0x8ca>
 800e8fc:	4a33      	ldr	r2, [pc, #204]	; (800e9cc <_strtod_l+0x944>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d12a      	bne.n	800e958 <_strtod_l+0x8d0>
 800e902:	9b04      	ldr	r3, [sp, #16]
 800e904:	4641      	mov	r1, r8
 800e906:	b1fb      	cbz	r3, 800e948 <_strtod_l+0x8c0>
 800e908:	4b2e      	ldr	r3, [pc, #184]	; (800e9c4 <_strtod_l+0x93c>)
 800e90a:	ea09 0303 	and.w	r3, r9, r3
 800e90e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e916:	d81a      	bhi.n	800e94e <_strtod_l+0x8c6>
 800e918:	0d1b      	lsrs	r3, r3, #20
 800e91a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e91e:	fa02 f303 	lsl.w	r3, r2, r3
 800e922:	4299      	cmp	r1, r3
 800e924:	d118      	bne.n	800e958 <_strtod_l+0x8d0>
 800e926:	4b2a      	ldr	r3, [pc, #168]	; (800e9d0 <_strtod_l+0x948>)
 800e928:	459a      	cmp	sl, r3
 800e92a:	d102      	bne.n	800e932 <_strtod_l+0x8aa>
 800e92c:	3101      	adds	r1, #1
 800e92e:	f43f adef 	beq.w	800e510 <_strtod_l+0x488>
 800e932:	4b24      	ldr	r3, [pc, #144]	; (800e9c4 <_strtod_l+0x93c>)
 800e934:	ea0a 0303 	and.w	r3, sl, r3
 800e938:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e93c:	f04f 0800 	mov.w	r8, #0
 800e940:	9b04      	ldr	r3, [sp, #16]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1a2      	bne.n	800e88c <_strtod_l+0x804>
 800e946:	e5ed      	b.n	800e524 <_strtod_l+0x49c>
 800e948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e94c:	e7e9      	b.n	800e922 <_strtod_l+0x89a>
 800e94e:	4613      	mov	r3, r2
 800e950:	e7e7      	b.n	800e922 <_strtod_l+0x89a>
 800e952:	ea53 0308 	orrs.w	r3, r3, r8
 800e956:	d08a      	beq.n	800e86e <_strtod_l+0x7e6>
 800e958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e95a:	b1e3      	cbz	r3, 800e996 <_strtod_l+0x90e>
 800e95c:	ea13 0f0a 	tst.w	r3, sl
 800e960:	d0ee      	beq.n	800e940 <_strtod_l+0x8b8>
 800e962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e964:	9a04      	ldr	r2, [sp, #16]
 800e966:	4640      	mov	r0, r8
 800e968:	4649      	mov	r1, r9
 800e96a:	b1c3      	cbz	r3, 800e99e <_strtod_l+0x916>
 800e96c:	f7ff fb6f 	bl	800e04e <sulp>
 800e970:	4602      	mov	r2, r0
 800e972:	460b      	mov	r3, r1
 800e974:	ec51 0b18 	vmov	r0, r1, d8
 800e978:	f7f1 fca0 	bl	80002bc <__adddf3>
 800e97c:	4680      	mov	r8, r0
 800e97e:	4689      	mov	r9, r1
 800e980:	e7de      	b.n	800e940 <_strtod_l+0x8b8>
 800e982:	4013      	ands	r3, r2
 800e984:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e988:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e98c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e990:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e994:	e7d4      	b.n	800e940 <_strtod_l+0x8b8>
 800e996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e998:	ea13 0f08 	tst.w	r3, r8
 800e99c:	e7e0      	b.n	800e960 <_strtod_l+0x8d8>
 800e99e:	f7ff fb56 	bl	800e04e <sulp>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	ec51 0b18 	vmov	r0, r1, d8
 800e9aa:	f7f1 fc85 	bl	80002b8 <__aeabi_dsub>
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4680      	mov	r8, r0
 800e9b4:	4689      	mov	r9, r1
 800e9b6:	f7f2 f89f 	bl	8000af8 <__aeabi_dcmpeq>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d0c0      	beq.n	800e940 <_strtod_l+0x8b8>
 800e9be:	e618      	b.n	800e5f2 <_strtod_l+0x56a>
 800e9c0:	fffffc02 	.word	0xfffffc02
 800e9c4:	7ff00000 	.word	0x7ff00000
 800e9c8:	39500000 	.word	0x39500000
 800e9cc:	000fffff 	.word	0x000fffff
 800e9d0:	7fefffff 	.word	0x7fefffff
 800e9d4:	080296b8 	.word	0x080296b8
 800e9d8:	4659      	mov	r1, fp
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f7ff fac0 	bl	800df60 <__ratio>
 800e9e0:	ec57 6b10 	vmov	r6, r7, d0
 800e9e4:	ee10 0a10 	vmov	r0, s0
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9ee:	4639      	mov	r1, r7
 800e9f0:	f7f2 f896 	bl	8000b20 <__aeabi_dcmple>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d071      	beq.n	800eadc <_strtod_l+0xa54>
 800e9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d17c      	bne.n	800eaf8 <_strtod_l+0xa70>
 800e9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ea02:	d15a      	bne.n	800eaba <_strtod_l+0xa32>
 800ea04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d15d      	bne.n	800eac8 <_strtod_l+0xa40>
 800ea0c:	4b90      	ldr	r3, [pc, #576]	; (800ec50 <_strtod_l+0xbc8>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f2 f87a 	bl	8000b0c <__aeabi_dcmplt>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d15c      	bne.n	800ead6 <_strtod_l+0xa4e>
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	4639      	mov	r1, r7
 800ea20:	4b8c      	ldr	r3, [pc, #560]	; (800ec54 <_strtod_l+0xbcc>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	f7f1 fe00 	bl	8000628 <__aeabi_dmul>
 800ea28:	4606      	mov	r6, r0
 800ea2a:	460f      	mov	r7, r1
 800ea2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ea30:	9606      	str	r6, [sp, #24]
 800ea32:	9307      	str	r3, [sp, #28]
 800ea34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ea3c:	4b86      	ldr	r3, [pc, #536]	; (800ec58 <_strtod_l+0xbd0>)
 800ea3e:	ea0a 0303 	and.w	r3, sl, r3
 800ea42:	930d      	str	r3, [sp, #52]	; 0x34
 800ea44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea46:	4b85      	ldr	r3, [pc, #532]	; (800ec5c <_strtod_l+0xbd4>)
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	f040 8090 	bne.w	800eb6e <_strtod_l+0xae6>
 800ea4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ea52:	ec49 8b10 	vmov	d0, r8, r9
 800ea56:	f7ff f9b9 	bl	800ddcc <__ulp>
 800ea5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea5e:	ec51 0b10 	vmov	r0, r1, d0
 800ea62:	f7f1 fde1 	bl	8000628 <__aeabi_dmul>
 800ea66:	4642      	mov	r2, r8
 800ea68:	464b      	mov	r3, r9
 800ea6a:	f7f1 fc27 	bl	80002bc <__adddf3>
 800ea6e:	460b      	mov	r3, r1
 800ea70:	4979      	ldr	r1, [pc, #484]	; (800ec58 <_strtod_l+0xbd0>)
 800ea72:	4a7b      	ldr	r2, [pc, #492]	; (800ec60 <_strtod_l+0xbd8>)
 800ea74:	4019      	ands	r1, r3
 800ea76:	4291      	cmp	r1, r2
 800ea78:	4680      	mov	r8, r0
 800ea7a:	d944      	bls.n	800eb06 <_strtod_l+0xa7e>
 800ea7c:	ee18 2a90 	vmov	r2, s17
 800ea80:	4b78      	ldr	r3, [pc, #480]	; (800ec64 <_strtod_l+0xbdc>)
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d104      	bne.n	800ea90 <_strtod_l+0xa08>
 800ea86:	ee18 3a10 	vmov	r3, s16
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	f43f ad40 	beq.w	800e510 <_strtod_l+0x488>
 800ea90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ec64 <_strtod_l+0xbdc>
 800ea94:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ea98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f7fe fe6a 	bl	800d774 <_Bfree>
 800eaa0:	9905      	ldr	r1, [sp, #20]
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f7fe fe66 	bl	800d774 <_Bfree>
 800eaa8:	4659      	mov	r1, fp
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f7fe fe62 	bl	800d774 <_Bfree>
 800eab0:	4629      	mov	r1, r5
 800eab2:	4620      	mov	r0, r4
 800eab4:	f7fe fe5e 	bl	800d774 <_Bfree>
 800eab8:	e609      	b.n	800e6ce <_strtod_l+0x646>
 800eaba:	f1b8 0f01 	cmp.w	r8, #1
 800eabe:	d103      	bne.n	800eac8 <_strtod_l+0xa40>
 800eac0:	f1b9 0f00 	cmp.w	r9, #0
 800eac4:	f43f ad95 	beq.w	800e5f2 <_strtod_l+0x56a>
 800eac8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ec20 <_strtod_l+0xb98>
 800eacc:	4f60      	ldr	r7, [pc, #384]	; (800ec50 <_strtod_l+0xbc8>)
 800eace:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ead2:	2600      	movs	r6, #0
 800ead4:	e7ae      	b.n	800ea34 <_strtod_l+0x9ac>
 800ead6:	4f5f      	ldr	r7, [pc, #380]	; (800ec54 <_strtod_l+0xbcc>)
 800ead8:	2600      	movs	r6, #0
 800eada:	e7a7      	b.n	800ea2c <_strtod_l+0x9a4>
 800eadc:	4b5d      	ldr	r3, [pc, #372]	; (800ec54 <_strtod_l+0xbcc>)
 800eade:	4630      	mov	r0, r6
 800eae0:	4639      	mov	r1, r7
 800eae2:	2200      	movs	r2, #0
 800eae4:	f7f1 fda0 	bl	8000628 <__aeabi_dmul>
 800eae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaea:	4606      	mov	r6, r0
 800eaec:	460f      	mov	r7, r1
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d09c      	beq.n	800ea2c <_strtod_l+0x9a4>
 800eaf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eaf6:	e79d      	b.n	800ea34 <_strtod_l+0x9ac>
 800eaf8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ec28 <_strtod_l+0xba0>
 800eafc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb00:	ec57 6b17 	vmov	r6, r7, d7
 800eb04:	e796      	b.n	800ea34 <_strtod_l+0x9ac>
 800eb06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800eb0a:	9b04      	ldr	r3, [sp, #16]
 800eb0c:	46ca      	mov	sl, r9
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1c2      	bne.n	800ea98 <_strtod_l+0xa10>
 800eb12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb18:	0d1b      	lsrs	r3, r3, #20
 800eb1a:	051b      	lsls	r3, r3, #20
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d1bb      	bne.n	800ea98 <_strtod_l+0xa10>
 800eb20:	4630      	mov	r0, r6
 800eb22:	4639      	mov	r1, r7
 800eb24:	f7f2 f8e0 	bl	8000ce8 <__aeabi_d2lz>
 800eb28:	f7f1 fd50 	bl	80005cc <__aeabi_l2d>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4630      	mov	r0, r6
 800eb32:	4639      	mov	r1, r7
 800eb34:	f7f1 fbc0 	bl	80002b8 <__aeabi_dsub>
 800eb38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb3e:	ea43 0308 	orr.w	r3, r3, r8
 800eb42:	4313      	orrs	r3, r2
 800eb44:	4606      	mov	r6, r0
 800eb46:	460f      	mov	r7, r1
 800eb48:	d054      	beq.n	800ebf4 <_strtod_l+0xb6c>
 800eb4a:	a339      	add	r3, pc, #228	; (adr r3, 800ec30 <_strtod_l+0xba8>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f7f1 ffdc 	bl	8000b0c <__aeabi_dcmplt>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	f47f ace5 	bne.w	800e524 <_strtod_l+0x49c>
 800eb5a:	a337      	add	r3, pc, #220	; (adr r3, 800ec38 <_strtod_l+0xbb0>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 fff0 	bl	8000b48 <__aeabi_dcmpgt>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d095      	beq.n	800ea98 <_strtod_l+0xa10>
 800eb6c:	e4da      	b.n	800e524 <_strtod_l+0x49c>
 800eb6e:	9b04      	ldr	r3, [sp, #16]
 800eb70:	b333      	cbz	r3, 800ebc0 <_strtod_l+0xb38>
 800eb72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb78:	d822      	bhi.n	800ebc0 <_strtod_l+0xb38>
 800eb7a:	a331      	add	r3, pc, #196	; (adr r3, 800ec40 <_strtod_l+0xbb8>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	4630      	mov	r0, r6
 800eb82:	4639      	mov	r1, r7
 800eb84:	f7f1 ffcc 	bl	8000b20 <__aeabi_dcmple>
 800eb88:	b1a0      	cbz	r0, 800ebb4 <_strtod_l+0xb2c>
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f7f2 f823 	bl	8000bd8 <__aeabi_d2uiz>
 800eb92:	2801      	cmp	r0, #1
 800eb94:	bf38      	it	cc
 800eb96:	2001      	movcc	r0, #1
 800eb98:	f7f1 fccc 	bl	8000534 <__aeabi_ui2d>
 800eb9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb9e:	4606      	mov	r6, r0
 800eba0:	460f      	mov	r7, r1
 800eba2:	bb23      	cbnz	r3, 800ebee <_strtod_l+0xb66>
 800eba4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eba8:	9010      	str	r0, [sp, #64]	; 0x40
 800ebaa:	9311      	str	r3, [sp, #68]	; 0x44
 800ebac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ebb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ebbc:	1a9b      	subs	r3, r3, r2
 800ebbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ebc4:	eeb0 0a48 	vmov.f32	s0, s16
 800ebc8:	eef0 0a68 	vmov.f32	s1, s17
 800ebcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ebd0:	f7ff f8fc 	bl	800ddcc <__ulp>
 800ebd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ebd8:	ec53 2b10 	vmov	r2, r3, d0
 800ebdc:	f7f1 fd24 	bl	8000628 <__aeabi_dmul>
 800ebe0:	ec53 2b18 	vmov	r2, r3, d8
 800ebe4:	f7f1 fb6a 	bl	80002bc <__adddf3>
 800ebe8:	4680      	mov	r8, r0
 800ebea:	4689      	mov	r9, r1
 800ebec:	e78d      	b.n	800eb0a <_strtod_l+0xa82>
 800ebee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ebf2:	e7db      	b.n	800ebac <_strtod_l+0xb24>
 800ebf4:	a314      	add	r3, pc, #80	; (adr r3, 800ec48 <_strtod_l+0xbc0>)
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	f7f1 ff87 	bl	8000b0c <__aeabi_dcmplt>
 800ebfe:	e7b3      	b.n	800eb68 <_strtod_l+0xae0>
 800ec00:	2300      	movs	r3, #0
 800ec02:	930a      	str	r3, [sp, #40]	; 0x28
 800ec04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	f7ff ba7c 	b.w	800e106 <_strtod_l+0x7e>
 800ec0e:	2a65      	cmp	r2, #101	; 0x65
 800ec10:	f43f ab75 	beq.w	800e2fe <_strtod_l+0x276>
 800ec14:	2a45      	cmp	r2, #69	; 0x45
 800ec16:	f43f ab72 	beq.w	800e2fe <_strtod_l+0x276>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	f7ff bbaa 	b.w	800e374 <_strtod_l+0x2ec>
 800ec20:	00000000 	.word	0x00000000
 800ec24:	bff00000 	.word	0xbff00000
 800ec28:	00000000 	.word	0x00000000
 800ec2c:	3ff00000 	.word	0x3ff00000
 800ec30:	94a03595 	.word	0x94a03595
 800ec34:	3fdfffff 	.word	0x3fdfffff
 800ec38:	35afe535 	.word	0x35afe535
 800ec3c:	3fe00000 	.word	0x3fe00000
 800ec40:	ffc00000 	.word	0xffc00000
 800ec44:	41dfffff 	.word	0x41dfffff
 800ec48:	94a03595 	.word	0x94a03595
 800ec4c:	3fcfffff 	.word	0x3fcfffff
 800ec50:	3ff00000 	.word	0x3ff00000
 800ec54:	3fe00000 	.word	0x3fe00000
 800ec58:	7ff00000 	.word	0x7ff00000
 800ec5c:	7fe00000 	.word	0x7fe00000
 800ec60:	7c9fffff 	.word	0x7c9fffff
 800ec64:	7fefffff 	.word	0x7fefffff

0800ec68 <_strtod_r>:
 800ec68:	4b01      	ldr	r3, [pc, #4]	; (800ec70 <_strtod_r+0x8>)
 800ec6a:	f7ff ba0d 	b.w	800e088 <_strtod_l>
 800ec6e:	bf00      	nop
 800ec70:	200003a8 	.word	0x200003a8

0800ec74 <_strtol_l.constprop.0>:
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec7a:	d001      	beq.n	800ec80 <_strtol_l.constprop.0+0xc>
 800ec7c:	2b24      	cmp	r3, #36	; 0x24
 800ec7e:	d906      	bls.n	800ec8e <_strtol_l.constprop.0+0x1a>
 800ec80:	f7fd fd7a 	bl	800c778 <__errno>
 800ec84:	2316      	movs	r3, #22
 800ec86:	6003      	str	r3, [r0, #0]
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ed74 <_strtol_l.constprop.0+0x100>
 800ec92:	460d      	mov	r5, r1
 800ec94:	462e      	mov	r6, r5
 800ec96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ec9e:	f017 0708 	ands.w	r7, r7, #8
 800eca2:	d1f7      	bne.n	800ec94 <_strtol_l.constprop.0+0x20>
 800eca4:	2c2d      	cmp	r4, #45	; 0x2d
 800eca6:	d132      	bne.n	800ed0e <_strtol_l.constprop.0+0x9a>
 800eca8:	782c      	ldrb	r4, [r5, #0]
 800ecaa:	2701      	movs	r7, #1
 800ecac:	1cb5      	adds	r5, r6, #2
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d05b      	beq.n	800ed6a <_strtol_l.constprop.0+0xf6>
 800ecb2:	2b10      	cmp	r3, #16
 800ecb4:	d109      	bne.n	800ecca <_strtol_l.constprop.0+0x56>
 800ecb6:	2c30      	cmp	r4, #48	; 0x30
 800ecb8:	d107      	bne.n	800ecca <_strtol_l.constprop.0+0x56>
 800ecba:	782c      	ldrb	r4, [r5, #0]
 800ecbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ecc0:	2c58      	cmp	r4, #88	; 0x58
 800ecc2:	d14d      	bne.n	800ed60 <_strtol_l.constprop.0+0xec>
 800ecc4:	786c      	ldrb	r4, [r5, #1]
 800ecc6:	2310      	movs	r3, #16
 800ecc8:	3502      	adds	r5, #2
 800ecca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ecce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ecd2:	f04f 0e00 	mov.w	lr, #0
 800ecd6:	fbb8 f9f3 	udiv	r9, r8, r3
 800ecda:	4676      	mov	r6, lr
 800ecdc:	fb03 8a19 	mls	sl, r3, r9, r8
 800ece0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ece4:	f1bc 0f09 	cmp.w	ip, #9
 800ece8:	d816      	bhi.n	800ed18 <_strtol_l.constprop.0+0xa4>
 800ecea:	4664      	mov	r4, ip
 800ecec:	42a3      	cmp	r3, r4
 800ecee:	dd24      	ble.n	800ed3a <_strtol_l.constprop.0+0xc6>
 800ecf0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ecf4:	d008      	beq.n	800ed08 <_strtol_l.constprop.0+0x94>
 800ecf6:	45b1      	cmp	r9, r6
 800ecf8:	d31c      	bcc.n	800ed34 <_strtol_l.constprop.0+0xc0>
 800ecfa:	d101      	bne.n	800ed00 <_strtol_l.constprop.0+0x8c>
 800ecfc:	45a2      	cmp	sl, r4
 800ecfe:	db19      	blt.n	800ed34 <_strtol_l.constprop.0+0xc0>
 800ed00:	fb06 4603 	mla	r6, r6, r3, r4
 800ed04:	f04f 0e01 	mov.w	lr, #1
 800ed08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed0c:	e7e8      	b.n	800ece0 <_strtol_l.constprop.0+0x6c>
 800ed0e:	2c2b      	cmp	r4, #43	; 0x2b
 800ed10:	bf04      	itt	eq
 800ed12:	782c      	ldrbeq	r4, [r5, #0]
 800ed14:	1cb5      	addeq	r5, r6, #2
 800ed16:	e7ca      	b.n	800ecae <_strtol_l.constprop.0+0x3a>
 800ed18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ed1c:	f1bc 0f19 	cmp.w	ip, #25
 800ed20:	d801      	bhi.n	800ed26 <_strtol_l.constprop.0+0xb2>
 800ed22:	3c37      	subs	r4, #55	; 0x37
 800ed24:	e7e2      	b.n	800ecec <_strtol_l.constprop.0+0x78>
 800ed26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ed2a:	f1bc 0f19 	cmp.w	ip, #25
 800ed2e:	d804      	bhi.n	800ed3a <_strtol_l.constprop.0+0xc6>
 800ed30:	3c57      	subs	r4, #87	; 0x57
 800ed32:	e7db      	b.n	800ecec <_strtol_l.constprop.0+0x78>
 800ed34:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ed38:	e7e6      	b.n	800ed08 <_strtol_l.constprop.0+0x94>
 800ed3a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ed3e:	d105      	bne.n	800ed4c <_strtol_l.constprop.0+0xd8>
 800ed40:	2322      	movs	r3, #34	; 0x22
 800ed42:	6003      	str	r3, [r0, #0]
 800ed44:	4646      	mov	r6, r8
 800ed46:	b942      	cbnz	r2, 800ed5a <_strtol_l.constprop.0+0xe6>
 800ed48:	4630      	mov	r0, r6
 800ed4a:	e79e      	b.n	800ec8a <_strtol_l.constprop.0+0x16>
 800ed4c:	b107      	cbz	r7, 800ed50 <_strtol_l.constprop.0+0xdc>
 800ed4e:	4276      	negs	r6, r6
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	d0f9      	beq.n	800ed48 <_strtol_l.constprop.0+0xd4>
 800ed54:	f1be 0f00 	cmp.w	lr, #0
 800ed58:	d000      	beq.n	800ed5c <_strtol_l.constprop.0+0xe8>
 800ed5a:	1e69      	subs	r1, r5, #1
 800ed5c:	6011      	str	r1, [r2, #0]
 800ed5e:	e7f3      	b.n	800ed48 <_strtol_l.constprop.0+0xd4>
 800ed60:	2430      	movs	r4, #48	; 0x30
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1b1      	bne.n	800ecca <_strtol_l.constprop.0+0x56>
 800ed66:	2308      	movs	r3, #8
 800ed68:	e7af      	b.n	800ecca <_strtol_l.constprop.0+0x56>
 800ed6a:	2c30      	cmp	r4, #48	; 0x30
 800ed6c:	d0a5      	beq.n	800ecba <_strtol_l.constprop.0+0x46>
 800ed6e:	230a      	movs	r3, #10
 800ed70:	e7ab      	b.n	800ecca <_strtol_l.constprop.0+0x56>
 800ed72:	bf00      	nop
 800ed74:	080296e1 	.word	0x080296e1

0800ed78 <_strtol_r>:
 800ed78:	f7ff bf7c 	b.w	800ec74 <_strtol_l.constprop.0>

0800ed7c <__ssputs_r>:
 800ed7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed80:	688e      	ldr	r6, [r1, #8]
 800ed82:	461f      	mov	r7, r3
 800ed84:	42be      	cmp	r6, r7
 800ed86:	680b      	ldr	r3, [r1, #0]
 800ed88:	4682      	mov	sl, r0
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	4690      	mov	r8, r2
 800ed8e:	d82c      	bhi.n	800edea <__ssputs_r+0x6e>
 800ed90:	898a      	ldrh	r2, [r1, #12]
 800ed92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed96:	d026      	beq.n	800ede6 <__ssputs_r+0x6a>
 800ed98:	6965      	ldr	r5, [r4, #20]
 800ed9a:	6909      	ldr	r1, [r1, #16]
 800ed9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eda0:	eba3 0901 	sub.w	r9, r3, r1
 800eda4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eda8:	1c7b      	adds	r3, r7, #1
 800edaa:	444b      	add	r3, r9
 800edac:	106d      	asrs	r5, r5, #1
 800edae:	429d      	cmp	r5, r3
 800edb0:	bf38      	it	cc
 800edb2:	461d      	movcc	r5, r3
 800edb4:	0553      	lsls	r3, r2, #21
 800edb6:	d527      	bpl.n	800ee08 <__ssputs_r+0x8c>
 800edb8:	4629      	mov	r1, r5
 800edba:	f7fe fc0f 	bl	800d5dc <_malloc_r>
 800edbe:	4606      	mov	r6, r0
 800edc0:	b360      	cbz	r0, 800ee1c <__ssputs_r+0xa0>
 800edc2:	6921      	ldr	r1, [r4, #16]
 800edc4:	464a      	mov	r2, r9
 800edc6:	f7fd fd04 	bl	800c7d2 <memcpy>
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd4:	81a3      	strh	r3, [r4, #12]
 800edd6:	6126      	str	r6, [r4, #16]
 800edd8:	6165      	str	r5, [r4, #20]
 800edda:	444e      	add	r6, r9
 800eddc:	eba5 0509 	sub.w	r5, r5, r9
 800ede0:	6026      	str	r6, [r4, #0]
 800ede2:	60a5      	str	r5, [r4, #8]
 800ede4:	463e      	mov	r6, r7
 800ede6:	42be      	cmp	r6, r7
 800ede8:	d900      	bls.n	800edec <__ssputs_r+0x70>
 800edea:	463e      	mov	r6, r7
 800edec:	6820      	ldr	r0, [r4, #0]
 800edee:	4632      	mov	r2, r6
 800edf0:	4641      	mov	r1, r8
 800edf2:	f000 fe88 	bl	800fb06 <memmove>
 800edf6:	68a3      	ldr	r3, [r4, #8]
 800edf8:	1b9b      	subs	r3, r3, r6
 800edfa:	60a3      	str	r3, [r4, #8]
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	4433      	add	r3, r6
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	2000      	movs	r0, #0
 800ee04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee08:	462a      	mov	r2, r5
 800ee0a:	f001 fa6e 	bl	80102ea <_realloc_r>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d1e0      	bne.n	800edd6 <__ssputs_r+0x5a>
 800ee14:	6921      	ldr	r1, [r4, #16]
 800ee16:	4650      	mov	r0, sl
 800ee18:	f7fe fb6c 	bl	800d4f4 <_free_r>
 800ee1c:	230c      	movs	r3, #12
 800ee1e:	f8ca 3000 	str.w	r3, [sl]
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee28:	81a3      	strh	r3, [r4, #12]
 800ee2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee2e:	e7e9      	b.n	800ee04 <__ssputs_r+0x88>

0800ee30 <_svfiprintf_r>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	4698      	mov	r8, r3
 800ee36:	898b      	ldrh	r3, [r1, #12]
 800ee38:	061b      	lsls	r3, r3, #24
 800ee3a:	b09d      	sub	sp, #116	; 0x74
 800ee3c:	4607      	mov	r7, r0
 800ee3e:	460d      	mov	r5, r1
 800ee40:	4614      	mov	r4, r2
 800ee42:	d50e      	bpl.n	800ee62 <_svfiprintf_r+0x32>
 800ee44:	690b      	ldr	r3, [r1, #16]
 800ee46:	b963      	cbnz	r3, 800ee62 <_svfiprintf_r+0x32>
 800ee48:	2140      	movs	r1, #64	; 0x40
 800ee4a:	f7fe fbc7 	bl	800d5dc <_malloc_r>
 800ee4e:	6028      	str	r0, [r5, #0]
 800ee50:	6128      	str	r0, [r5, #16]
 800ee52:	b920      	cbnz	r0, 800ee5e <_svfiprintf_r+0x2e>
 800ee54:	230c      	movs	r3, #12
 800ee56:	603b      	str	r3, [r7, #0]
 800ee58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee5c:	e0d0      	b.n	800f000 <_svfiprintf_r+0x1d0>
 800ee5e:	2340      	movs	r3, #64	; 0x40
 800ee60:	616b      	str	r3, [r5, #20]
 800ee62:	2300      	movs	r3, #0
 800ee64:	9309      	str	r3, [sp, #36]	; 0x24
 800ee66:	2320      	movs	r3, #32
 800ee68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee70:	2330      	movs	r3, #48	; 0x30
 800ee72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f018 <_svfiprintf_r+0x1e8>
 800ee76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee7a:	f04f 0901 	mov.w	r9, #1
 800ee7e:	4623      	mov	r3, r4
 800ee80:	469a      	mov	sl, r3
 800ee82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee86:	b10a      	cbz	r2, 800ee8c <_svfiprintf_r+0x5c>
 800ee88:	2a25      	cmp	r2, #37	; 0x25
 800ee8a:	d1f9      	bne.n	800ee80 <_svfiprintf_r+0x50>
 800ee8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ee90:	d00b      	beq.n	800eeaa <_svfiprintf_r+0x7a>
 800ee92:	465b      	mov	r3, fp
 800ee94:	4622      	mov	r2, r4
 800ee96:	4629      	mov	r1, r5
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f7ff ff6f 	bl	800ed7c <__ssputs_r>
 800ee9e:	3001      	adds	r0, #1
 800eea0:	f000 80a9 	beq.w	800eff6 <_svfiprintf_r+0x1c6>
 800eea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea6:	445a      	add	r2, fp
 800eea8:	9209      	str	r2, [sp, #36]	; 0x24
 800eeaa:	f89a 3000 	ldrb.w	r3, [sl]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f000 80a1 	beq.w	800eff6 <_svfiprintf_r+0x1c6>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eebe:	f10a 0a01 	add.w	sl, sl, #1
 800eec2:	9304      	str	r3, [sp, #16]
 800eec4:	9307      	str	r3, [sp, #28]
 800eec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeca:	931a      	str	r3, [sp, #104]	; 0x68
 800eecc:	4654      	mov	r4, sl
 800eece:	2205      	movs	r2, #5
 800eed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed4:	4850      	ldr	r0, [pc, #320]	; (800f018 <_svfiprintf_r+0x1e8>)
 800eed6:	f7f1 f993 	bl	8000200 <memchr>
 800eeda:	9a04      	ldr	r2, [sp, #16]
 800eedc:	b9d8      	cbnz	r0, 800ef16 <_svfiprintf_r+0xe6>
 800eede:	06d0      	lsls	r0, r2, #27
 800eee0:	bf44      	itt	mi
 800eee2:	2320      	movmi	r3, #32
 800eee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eee8:	0711      	lsls	r1, r2, #28
 800eeea:	bf44      	itt	mi
 800eeec:	232b      	movmi	r3, #43	; 0x2b
 800eeee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef2:	f89a 3000 	ldrb.w	r3, [sl]
 800eef6:	2b2a      	cmp	r3, #42	; 0x2a
 800eef8:	d015      	beq.n	800ef26 <_svfiprintf_r+0xf6>
 800eefa:	9a07      	ldr	r2, [sp, #28]
 800eefc:	4654      	mov	r4, sl
 800eefe:	2000      	movs	r0, #0
 800ef00:	f04f 0c0a 	mov.w	ip, #10
 800ef04:	4621      	mov	r1, r4
 800ef06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef0a:	3b30      	subs	r3, #48	; 0x30
 800ef0c:	2b09      	cmp	r3, #9
 800ef0e:	d94d      	bls.n	800efac <_svfiprintf_r+0x17c>
 800ef10:	b1b0      	cbz	r0, 800ef40 <_svfiprintf_r+0x110>
 800ef12:	9207      	str	r2, [sp, #28]
 800ef14:	e014      	b.n	800ef40 <_svfiprintf_r+0x110>
 800ef16:	eba0 0308 	sub.w	r3, r0, r8
 800ef1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	9304      	str	r3, [sp, #16]
 800ef22:	46a2      	mov	sl, r4
 800ef24:	e7d2      	b.n	800eecc <_svfiprintf_r+0x9c>
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	1d19      	adds	r1, r3, #4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	9103      	str	r1, [sp, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	bfbb      	ittet	lt
 800ef32:	425b      	neglt	r3, r3
 800ef34:	f042 0202 	orrlt.w	r2, r2, #2
 800ef38:	9307      	strge	r3, [sp, #28]
 800ef3a:	9307      	strlt	r3, [sp, #28]
 800ef3c:	bfb8      	it	lt
 800ef3e:	9204      	strlt	r2, [sp, #16]
 800ef40:	7823      	ldrb	r3, [r4, #0]
 800ef42:	2b2e      	cmp	r3, #46	; 0x2e
 800ef44:	d10c      	bne.n	800ef60 <_svfiprintf_r+0x130>
 800ef46:	7863      	ldrb	r3, [r4, #1]
 800ef48:	2b2a      	cmp	r3, #42	; 0x2a
 800ef4a:	d134      	bne.n	800efb6 <_svfiprintf_r+0x186>
 800ef4c:	9b03      	ldr	r3, [sp, #12]
 800ef4e:	1d1a      	adds	r2, r3, #4
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	9203      	str	r2, [sp, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfb8      	it	lt
 800ef58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef5c:	3402      	adds	r4, #2
 800ef5e:	9305      	str	r3, [sp, #20]
 800ef60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f028 <_svfiprintf_r+0x1f8>
 800ef64:	7821      	ldrb	r1, [r4, #0]
 800ef66:	2203      	movs	r2, #3
 800ef68:	4650      	mov	r0, sl
 800ef6a:	f7f1 f949 	bl	8000200 <memchr>
 800ef6e:	b138      	cbz	r0, 800ef80 <_svfiprintf_r+0x150>
 800ef70:	9b04      	ldr	r3, [sp, #16]
 800ef72:	eba0 000a 	sub.w	r0, r0, sl
 800ef76:	2240      	movs	r2, #64	; 0x40
 800ef78:	4082      	lsls	r2, r0
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	3401      	adds	r4, #1
 800ef7e:	9304      	str	r3, [sp, #16]
 800ef80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef84:	4825      	ldr	r0, [pc, #148]	; (800f01c <_svfiprintf_r+0x1ec>)
 800ef86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef8a:	2206      	movs	r2, #6
 800ef8c:	f7f1 f938 	bl	8000200 <memchr>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d038      	beq.n	800f006 <_svfiprintf_r+0x1d6>
 800ef94:	4b22      	ldr	r3, [pc, #136]	; (800f020 <_svfiprintf_r+0x1f0>)
 800ef96:	bb1b      	cbnz	r3, 800efe0 <_svfiprintf_r+0x1b0>
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	3307      	adds	r3, #7
 800ef9c:	f023 0307 	bic.w	r3, r3, #7
 800efa0:	3308      	adds	r3, #8
 800efa2:	9303      	str	r3, [sp, #12]
 800efa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa6:	4433      	add	r3, r6
 800efa8:	9309      	str	r3, [sp, #36]	; 0x24
 800efaa:	e768      	b.n	800ee7e <_svfiprintf_r+0x4e>
 800efac:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb0:	460c      	mov	r4, r1
 800efb2:	2001      	movs	r0, #1
 800efb4:	e7a6      	b.n	800ef04 <_svfiprintf_r+0xd4>
 800efb6:	2300      	movs	r3, #0
 800efb8:	3401      	adds	r4, #1
 800efba:	9305      	str	r3, [sp, #20]
 800efbc:	4619      	mov	r1, r3
 800efbe:	f04f 0c0a 	mov.w	ip, #10
 800efc2:	4620      	mov	r0, r4
 800efc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc8:	3a30      	subs	r2, #48	; 0x30
 800efca:	2a09      	cmp	r2, #9
 800efcc:	d903      	bls.n	800efd6 <_svfiprintf_r+0x1a6>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0c6      	beq.n	800ef60 <_svfiprintf_r+0x130>
 800efd2:	9105      	str	r1, [sp, #20]
 800efd4:	e7c4      	b.n	800ef60 <_svfiprintf_r+0x130>
 800efd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800efda:	4604      	mov	r4, r0
 800efdc:	2301      	movs	r3, #1
 800efde:	e7f0      	b.n	800efc2 <_svfiprintf_r+0x192>
 800efe0:	ab03      	add	r3, sp, #12
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	462a      	mov	r2, r5
 800efe6:	4b0f      	ldr	r3, [pc, #60]	; (800f024 <_svfiprintf_r+0x1f4>)
 800efe8:	a904      	add	r1, sp, #16
 800efea:	4638      	mov	r0, r7
 800efec:	f7fc fa4e 	bl	800b48c <_printf_float>
 800eff0:	1c42      	adds	r2, r0, #1
 800eff2:	4606      	mov	r6, r0
 800eff4:	d1d6      	bne.n	800efa4 <_svfiprintf_r+0x174>
 800eff6:	89ab      	ldrh	r3, [r5, #12]
 800eff8:	065b      	lsls	r3, r3, #25
 800effa:	f53f af2d 	bmi.w	800ee58 <_svfiprintf_r+0x28>
 800effe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f000:	b01d      	add	sp, #116	; 0x74
 800f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f006:	ab03      	add	r3, sp, #12
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	462a      	mov	r2, r5
 800f00c:	4b05      	ldr	r3, [pc, #20]	; (800f024 <_svfiprintf_r+0x1f4>)
 800f00e:	a904      	add	r1, sp, #16
 800f010:	4638      	mov	r0, r7
 800f012:	f7fc fcdf 	bl	800b9d4 <_printf_i>
 800f016:	e7eb      	b.n	800eff0 <_svfiprintf_r+0x1c0>
 800f018:	080297e1 	.word	0x080297e1
 800f01c:	080297eb 	.word	0x080297eb
 800f020:	0800b48d 	.word	0x0800b48d
 800f024:	0800ed7d 	.word	0x0800ed7d
 800f028:	080297e7 	.word	0x080297e7

0800f02c <_sungetc_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	1c4b      	adds	r3, r1, #1
 800f030:	4614      	mov	r4, r2
 800f032:	d103      	bne.n	800f03c <_sungetc_r+0x10>
 800f034:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f038:	4628      	mov	r0, r5
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	8993      	ldrh	r3, [r2, #12]
 800f03e:	f023 0320 	bic.w	r3, r3, #32
 800f042:	8193      	strh	r3, [r2, #12]
 800f044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f046:	6852      	ldr	r2, [r2, #4]
 800f048:	b2cd      	uxtb	r5, r1
 800f04a:	b18b      	cbz	r3, 800f070 <_sungetc_r+0x44>
 800f04c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f04e:	4293      	cmp	r3, r2
 800f050:	dd08      	ble.n	800f064 <_sungetc_r+0x38>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	1e5a      	subs	r2, r3, #1
 800f056:	6022      	str	r2, [r4, #0]
 800f058:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	3301      	adds	r3, #1
 800f060:	6063      	str	r3, [r4, #4]
 800f062:	e7e9      	b.n	800f038 <_sungetc_r+0xc>
 800f064:	4621      	mov	r1, r4
 800f066:	f000 fd14 	bl	800fa92 <__submore>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d0f1      	beq.n	800f052 <_sungetc_r+0x26>
 800f06e:	e7e1      	b.n	800f034 <_sungetc_r+0x8>
 800f070:	6921      	ldr	r1, [r4, #16]
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	b151      	cbz	r1, 800f08c <_sungetc_r+0x60>
 800f076:	4299      	cmp	r1, r3
 800f078:	d208      	bcs.n	800f08c <_sungetc_r+0x60>
 800f07a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f07e:	42a9      	cmp	r1, r5
 800f080:	d104      	bne.n	800f08c <_sungetc_r+0x60>
 800f082:	3b01      	subs	r3, #1
 800f084:	3201      	adds	r2, #1
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	6062      	str	r2, [r4, #4]
 800f08a:	e7d5      	b.n	800f038 <_sungetc_r+0xc>
 800f08c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f094:	6363      	str	r3, [r4, #52]	; 0x34
 800f096:	2303      	movs	r3, #3
 800f098:	63a3      	str	r3, [r4, #56]	; 0x38
 800f09a:	4623      	mov	r3, r4
 800f09c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e7dc      	b.n	800f060 <_sungetc_r+0x34>

0800f0a6 <__ssrefill_r>:
 800f0a6:	b510      	push	{r4, lr}
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f0ac:	b169      	cbz	r1, 800f0ca <__ssrefill_r+0x24>
 800f0ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	d001      	beq.n	800f0ba <__ssrefill_r+0x14>
 800f0b6:	f7fe fa1d 	bl	800d4f4 <_free_r>
 800f0ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0bc:	6063      	str	r3, [r4, #4]
 800f0be:	2000      	movs	r0, #0
 800f0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800f0c2:	b113      	cbz	r3, 800f0ca <__ssrefill_r+0x24>
 800f0c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f0c6:	6023      	str	r3, [r4, #0]
 800f0c8:	bd10      	pop	{r4, pc}
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	6063      	str	r3, [r4, #4]
 800f0d2:	89a3      	ldrh	r3, [r4, #12]
 800f0d4:	f043 0320 	orr.w	r3, r3, #32
 800f0d8:	81a3      	strh	r3, [r4, #12]
 800f0da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0de:	e7f3      	b.n	800f0c8 <__ssrefill_r+0x22>

0800f0e0 <__ssvfiscanf_r>:
 800f0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f0f0:	49a6      	ldr	r1, [pc, #664]	; (800f38c <__ssvfiscanf_r+0x2ac>)
 800f0f2:	91a0      	str	r1, [sp, #640]	; 0x280
 800f0f4:	f10d 0804 	add.w	r8, sp, #4
 800f0f8:	49a5      	ldr	r1, [pc, #660]	; (800f390 <__ssvfiscanf_r+0x2b0>)
 800f0fa:	4fa6      	ldr	r7, [pc, #664]	; (800f394 <__ssvfiscanf_r+0x2b4>)
 800f0fc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f398 <__ssvfiscanf_r+0x2b8>
 800f100:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f104:	4606      	mov	r6, r0
 800f106:	91a1      	str	r1, [sp, #644]	; 0x284
 800f108:	9300      	str	r3, [sp, #0]
 800f10a:	7813      	ldrb	r3, [r2, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f000 815a 	beq.w	800f3c6 <__ssvfiscanf_r+0x2e6>
 800f112:	5cf9      	ldrb	r1, [r7, r3]
 800f114:	f011 0108 	ands.w	r1, r1, #8
 800f118:	f102 0501 	add.w	r5, r2, #1
 800f11c:	d019      	beq.n	800f152 <__ssvfiscanf_r+0x72>
 800f11e:	6863      	ldr	r3, [r4, #4]
 800f120:	2b00      	cmp	r3, #0
 800f122:	dd0f      	ble.n	800f144 <__ssvfiscanf_r+0x64>
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	781a      	ldrb	r2, [r3, #0]
 800f128:	5cba      	ldrb	r2, [r7, r2]
 800f12a:	0712      	lsls	r2, r2, #28
 800f12c:	d401      	bmi.n	800f132 <__ssvfiscanf_r+0x52>
 800f12e:	462a      	mov	r2, r5
 800f130:	e7eb      	b.n	800f10a <__ssvfiscanf_r+0x2a>
 800f132:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f134:	3201      	adds	r2, #1
 800f136:	9245      	str	r2, [sp, #276]	; 0x114
 800f138:	6862      	ldr	r2, [r4, #4]
 800f13a:	3301      	adds	r3, #1
 800f13c:	3a01      	subs	r2, #1
 800f13e:	6062      	str	r2, [r4, #4]
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	e7ec      	b.n	800f11e <__ssvfiscanf_r+0x3e>
 800f144:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f146:	4621      	mov	r1, r4
 800f148:	4630      	mov	r0, r6
 800f14a:	4798      	blx	r3
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d0e9      	beq.n	800f124 <__ssvfiscanf_r+0x44>
 800f150:	e7ed      	b.n	800f12e <__ssvfiscanf_r+0x4e>
 800f152:	2b25      	cmp	r3, #37	; 0x25
 800f154:	d012      	beq.n	800f17c <__ssvfiscanf_r+0x9c>
 800f156:	469a      	mov	sl, r3
 800f158:	6863      	ldr	r3, [r4, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f340 8091 	ble.w	800f282 <__ssvfiscanf_r+0x1a2>
 800f160:	6822      	ldr	r2, [r4, #0]
 800f162:	7813      	ldrb	r3, [r2, #0]
 800f164:	4553      	cmp	r3, sl
 800f166:	f040 812e 	bne.w	800f3c6 <__ssvfiscanf_r+0x2e6>
 800f16a:	6863      	ldr	r3, [r4, #4]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	6063      	str	r3, [r4, #4]
 800f170:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f172:	3201      	adds	r2, #1
 800f174:	3301      	adds	r3, #1
 800f176:	6022      	str	r2, [r4, #0]
 800f178:	9345      	str	r3, [sp, #276]	; 0x114
 800f17a:	e7d8      	b.n	800f12e <__ssvfiscanf_r+0x4e>
 800f17c:	9141      	str	r1, [sp, #260]	; 0x104
 800f17e:	9143      	str	r1, [sp, #268]	; 0x10c
 800f180:	7853      	ldrb	r3, [r2, #1]
 800f182:	2b2a      	cmp	r3, #42	; 0x2a
 800f184:	bf02      	ittt	eq
 800f186:	2310      	moveq	r3, #16
 800f188:	1c95      	addeq	r5, r2, #2
 800f18a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f18c:	220a      	movs	r2, #10
 800f18e:	46aa      	mov	sl, r5
 800f190:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f194:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f198:	2b09      	cmp	r3, #9
 800f19a:	d91c      	bls.n	800f1d6 <__ssvfiscanf_r+0xf6>
 800f19c:	487e      	ldr	r0, [pc, #504]	; (800f398 <__ssvfiscanf_r+0x2b8>)
 800f19e:	2203      	movs	r2, #3
 800f1a0:	f7f1 f82e 	bl	8000200 <memchr>
 800f1a4:	b138      	cbz	r0, 800f1b6 <__ssvfiscanf_r+0xd6>
 800f1a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f1a8:	eba0 0009 	sub.w	r0, r0, r9
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	4083      	lsls	r3, r0
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	9341      	str	r3, [sp, #260]	; 0x104
 800f1b4:	4655      	mov	r5, sl
 800f1b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1ba:	2b78      	cmp	r3, #120	; 0x78
 800f1bc:	d806      	bhi.n	800f1cc <__ssvfiscanf_r+0xec>
 800f1be:	2b57      	cmp	r3, #87	; 0x57
 800f1c0:	d810      	bhi.n	800f1e4 <__ssvfiscanf_r+0x104>
 800f1c2:	2b25      	cmp	r3, #37	; 0x25
 800f1c4:	d0c7      	beq.n	800f156 <__ssvfiscanf_r+0x76>
 800f1c6:	d857      	bhi.n	800f278 <__ssvfiscanf_r+0x198>
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d065      	beq.n	800f298 <__ssvfiscanf_r+0x1b8>
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800f1d0:	230a      	movs	r3, #10
 800f1d2:	9342      	str	r3, [sp, #264]	; 0x108
 800f1d4:	e076      	b.n	800f2c4 <__ssvfiscanf_r+0x1e4>
 800f1d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f1d8:	fb02 1103 	mla	r1, r2, r3, r1
 800f1dc:	3930      	subs	r1, #48	; 0x30
 800f1de:	9143      	str	r1, [sp, #268]	; 0x10c
 800f1e0:	4655      	mov	r5, sl
 800f1e2:	e7d4      	b.n	800f18e <__ssvfiscanf_r+0xae>
 800f1e4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f1e8:	2a20      	cmp	r2, #32
 800f1ea:	d8ef      	bhi.n	800f1cc <__ssvfiscanf_r+0xec>
 800f1ec:	a101      	add	r1, pc, #4	; (adr r1, 800f1f4 <__ssvfiscanf_r+0x114>)
 800f1ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1f2:	bf00      	nop
 800f1f4:	0800f2a7 	.word	0x0800f2a7
 800f1f8:	0800f1cd 	.word	0x0800f1cd
 800f1fc:	0800f1cd 	.word	0x0800f1cd
 800f200:	0800f305 	.word	0x0800f305
 800f204:	0800f1cd 	.word	0x0800f1cd
 800f208:	0800f1cd 	.word	0x0800f1cd
 800f20c:	0800f1cd 	.word	0x0800f1cd
 800f210:	0800f1cd 	.word	0x0800f1cd
 800f214:	0800f1cd 	.word	0x0800f1cd
 800f218:	0800f1cd 	.word	0x0800f1cd
 800f21c:	0800f1cd 	.word	0x0800f1cd
 800f220:	0800f31b 	.word	0x0800f31b
 800f224:	0800f301 	.word	0x0800f301
 800f228:	0800f27f 	.word	0x0800f27f
 800f22c:	0800f27f 	.word	0x0800f27f
 800f230:	0800f27f 	.word	0x0800f27f
 800f234:	0800f1cd 	.word	0x0800f1cd
 800f238:	0800f2bd 	.word	0x0800f2bd
 800f23c:	0800f1cd 	.word	0x0800f1cd
 800f240:	0800f1cd 	.word	0x0800f1cd
 800f244:	0800f1cd 	.word	0x0800f1cd
 800f248:	0800f1cd 	.word	0x0800f1cd
 800f24c:	0800f32b 	.word	0x0800f32b
 800f250:	0800f2f9 	.word	0x0800f2f9
 800f254:	0800f29f 	.word	0x0800f29f
 800f258:	0800f1cd 	.word	0x0800f1cd
 800f25c:	0800f1cd 	.word	0x0800f1cd
 800f260:	0800f327 	.word	0x0800f327
 800f264:	0800f1cd 	.word	0x0800f1cd
 800f268:	0800f301 	.word	0x0800f301
 800f26c:	0800f1cd 	.word	0x0800f1cd
 800f270:	0800f1cd 	.word	0x0800f1cd
 800f274:	0800f2a7 	.word	0x0800f2a7
 800f278:	3b45      	subs	r3, #69	; 0x45
 800f27a:	2b02      	cmp	r3, #2
 800f27c:	d8a6      	bhi.n	800f1cc <__ssvfiscanf_r+0xec>
 800f27e:	2305      	movs	r3, #5
 800f280:	e01f      	b.n	800f2c2 <__ssvfiscanf_r+0x1e2>
 800f282:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f284:	4621      	mov	r1, r4
 800f286:	4630      	mov	r0, r6
 800f288:	4798      	blx	r3
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f43f af68 	beq.w	800f160 <__ssvfiscanf_r+0x80>
 800f290:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f292:	2800      	cmp	r0, #0
 800f294:	f040 808d 	bne.w	800f3b2 <__ssvfiscanf_r+0x2d2>
 800f298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f29c:	e08f      	b.n	800f3be <__ssvfiscanf_r+0x2de>
 800f29e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2a0:	f042 0220 	orr.w	r2, r2, #32
 800f2a4:	9241      	str	r2, [sp, #260]	; 0x104
 800f2a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2ac:	9241      	str	r2, [sp, #260]	; 0x104
 800f2ae:	2210      	movs	r2, #16
 800f2b0:	2b6f      	cmp	r3, #111	; 0x6f
 800f2b2:	9242      	str	r2, [sp, #264]	; 0x108
 800f2b4:	bf34      	ite	cc
 800f2b6:	2303      	movcc	r3, #3
 800f2b8:	2304      	movcs	r3, #4
 800f2ba:	e002      	b.n	800f2c2 <__ssvfiscanf_r+0x1e2>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	9342      	str	r3, [sp, #264]	; 0x108
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2c4:	6863      	ldr	r3, [r4, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dd3d      	ble.n	800f346 <__ssvfiscanf_r+0x266>
 800f2ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2cc:	0659      	lsls	r1, r3, #25
 800f2ce:	d404      	bmi.n	800f2da <__ssvfiscanf_r+0x1fa>
 800f2d0:	6823      	ldr	r3, [r4, #0]
 800f2d2:	781a      	ldrb	r2, [r3, #0]
 800f2d4:	5cba      	ldrb	r2, [r7, r2]
 800f2d6:	0712      	lsls	r2, r2, #28
 800f2d8:	d43c      	bmi.n	800f354 <__ssvfiscanf_r+0x274>
 800f2da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f2dc:	2b02      	cmp	r3, #2
 800f2de:	dc4b      	bgt.n	800f378 <__ssvfiscanf_r+0x298>
 800f2e0:	466b      	mov	r3, sp
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	a941      	add	r1, sp, #260	; 0x104
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f000 f9b6 	bl	800f658 <_scanf_chars>
 800f2ec:	2801      	cmp	r0, #1
 800f2ee:	d06a      	beq.n	800f3c6 <__ssvfiscanf_r+0x2e6>
 800f2f0:	2802      	cmp	r0, #2
 800f2f2:	f47f af1c 	bne.w	800f12e <__ssvfiscanf_r+0x4e>
 800f2f6:	e7cb      	b.n	800f290 <__ssvfiscanf_r+0x1b0>
 800f2f8:	2308      	movs	r3, #8
 800f2fa:	9342      	str	r3, [sp, #264]	; 0x108
 800f2fc:	2304      	movs	r3, #4
 800f2fe:	e7e0      	b.n	800f2c2 <__ssvfiscanf_r+0x1e2>
 800f300:	220a      	movs	r2, #10
 800f302:	e7d5      	b.n	800f2b0 <__ssvfiscanf_r+0x1d0>
 800f304:	4629      	mov	r1, r5
 800f306:	4640      	mov	r0, r8
 800f308:	f000 fb8a 	bl	800fa20 <__sccl>
 800f30c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f312:	9341      	str	r3, [sp, #260]	; 0x104
 800f314:	4605      	mov	r5, r0
 800f316:	2301      	movs	r3, #1
 800f318:	e7d3      	b.n	800f2c2 <__ssvfiscanf_r+0x1e2>
 800f31a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f320:	9341      	str	r3, [sp, #260]	; 0x104
 800f322:	2300      	movs	r3, #0
 800f324:	e7cd      	b.n	800f2c2 <__ssvfiscanf_r+0x1e2>
 800f326:	2302      	movs	r3, #2
 800f328:	e7cb      	b.n	800f2c2 <__ssvfiscanf_r+0x1e2>
 800f32a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f32c:	06c3      	lsls	r3, r0, #27
 800f32e:	f53f aefe 	bmi.w	800f12e <__ssvfiscanf_r+0x4e>
 800f332:	9b00      	ldr	r3, [sp, #0]
 800f334:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f336:	1d19      	adds	r1, r3, #4
 800f338:	9100      	str	r1, [sp, #0]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	07c0      	lsls	r0, r0, #31
 800f33e:	bf4c      	ite	mi
 800f340:	801a      	strhmi	r2, [r3, #0]
 800f342:	601a      	strpl	r2, [r3, #0]
 800f344:	e6f3      	b.n	800f12e <__ssvfiscanf_r+0x4e>
 800f346:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f348:	4621      	mov	r1, r4
 800f34a:	4630      	mov	r0, r6
 800f34c:	4798      	blx	r3
 800f34e:	2800      	cmp	r0, #0
 800f350:	d0bb      	beq.n	800f2ca <__ssvfiscanf_r+0x1ea>
 800f352:	e79d      	b.n	800f290 <__ssvfiscanf_r+0x1b0>
 800f354:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f356:	3201      	adds	r2, #1
 800f358:	9245      	str	r2, [sp, #276]	; 0x114
 800f35a:	6862      	ldr	r2, [r4, #4]
 800f35c:	3a01      	subs	r2, #1
 800f35e:	2a00      	cmp	r2, #0
 800f360:	6062      	str	r2, [r4, #4]
 800f362:	dd02      	ble.n	800f36a <__ssvfiscanf_r+0x28a>
 800f364:	3301      	adds	r3, #1
 800f366:	6023      	str	r3, [r4, #0]
 800f368:	e7b2      	b.n	800f2d0 <__ssvfiscanf_r+0x1f0>
 800f36a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f36c:	4621      	mov	r1, r4
 800f36e:	4630      	mov	r0, r6
 800f370:	4798      	blx	r3
 800f372:	2800      	cmp	r0, #0
 800f374:	d0ac      	beq.n	800f2d0 <__ssvfiscanf_r+0x1f0>
 800f376:	e78b      	b.n	800f290 <__ssvfiscanf_r+0x1b0>
 800f378:	2b04      	cmp	r3, #4
 800f37a:	dc0f      	bgt.n	800f39c <__ssvfiscanf_r+0x2bc>
 800f37c:	466b      	mov	r3, sp
 800f37e:	4622      	mov	r2, r4
 800f380:	a941      	add	r1, sp, #260	; 0x104
 800f382:	4630      	mov	r0, r6
 800f384:	f000 f9c2 	bl	800f70c <_scanf_i>
 800f388:	e7b0      	b.n	800f2ec <__ssvfiscanf_r+0x20c>
 800f38a:	bf00      	nop
 800f38c:	0800f02d 	.word	0x0800f02d
 800f390:	0800f0a7 	.word	0x0800f0a7
 800f394:	080296e1 	.word	0x080296e1
 800f398:	080297e7 	.word	0x080297e7
 800f39c:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <__ssvfiscanf_r+0x2ec>)
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f43f aec5 	beq.w	800f12e <__ssvfiscanf_r+0x4e>
 800f3a4:	466b      	mov	r3, sp
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	a941      	add	r1, sp, #260	; 0x104
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	f7fc fc34 	bl	800bc18 <_scanf_float>
 800f3b0:	e79c      	b.n	800f2ec <__ssvfiscanf_r+0x20c>
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f3b8:	bf18      	it	ne
 800f3ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800f3be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f3c8:	e7f9      	b.n	800f3be <__ssvfiscanf_r+0x2de>
 800f3ca:	bf00      	nop
 800f3cc:	0800bc19 	.word	0x0800bc19

0800f3d0 <__sfputc_r>:
 800f3d0:	6893      	ldr	r3, [r2, #8]
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	b410      	push	{r4}
 800f3d8:	6093      	str	r3, [r2, #8]
 800f3da:	da08      	bge.n	800f3ee <__sfputc_r+0x1e>
 800f3dc:	6994      	ldr	r4, [r2, #24]
 800f3de:	42a3      	cmp	r3, r4
 800f3e0:	db01      	blt.n	800f3e6 <__sfputc_r+0x16>
 800f3e2:	290a      	cmp	r1, #10
 800f3e4:	d103      	bne.n	800f3ee <__sfputc_r+0x1e>
 800f3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ea:	f7fd b8b0 	b.w	800c54e <__swbuf_r>
 800f3ee:	6813      	ldr	r3, [r2, #0]
 800f3f0:	1c58      	adds	r0, r3, #1
 800f3f2:	6010      	str	r0, [r2, #0]
 800f3f4:	7019      	strb	r1, [r3, #0]
 800f3f6:	4608      	mov	r0, r1
 800f3f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3fc:	4770      	bx	lr

0800f3fe <__sfputs_r>:
 800f3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f400:	4606      	mov	r6, r0
 800f402:	460f      	mov	r7, r1
 800f404:	4614      	mov	r4, r2
 800f406:	18d5      	adds	r5, r2, r3
 800f408:	42ac      	cmp	r4, r5
 800f40a:	d101      	bne.n	800f410 <__sfputs_r+0x12>
 800f40c:	2000      	movs	r0, #0
 800f40e:	e007      	b.n	800f420 <__sfputs_r+0x22>
 800f410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f414:	463a      	mov	r2, r7
 800f416:	4630      	mov	r0, r6
 800f418:	f7ff ffda 	bl	800f3d0 <__sfputc_r>
 800f41c:	1c43      	adds	r3, r0, #1
 800f41e:	d1f3      	bne.n	800f408 <__sfputs_r+0xa>
 800f420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f424 <_vfiprintf_r>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	460d      	mov	r5, r1
 800f42a:	b09d      	sub	sp, #116	; 0x74
 800f42c:	4614      	mov	r4, r2
 800f42e:	4698      	mov	r8, r3
 800f430:	4606      	mov	r6, r0
 800f432:	b118      	cbz	r0, 800f43c <_vfiprintf_r+0x18>
 800f434:	6a03      	ldr	r3, [r0, #32]
 800f436:	b90b      	cbnz	r3, 800f43c <_vfiprintf_r+0x18>
 800f438:	f7fc ff4c 	bl	800c2d4 <__sinit>
 800f43c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f43e:	07d9      	lsls	r1, r3, #31
 800f440:	d405      	bmi.n	800f44e <_vfiprintf_r+0x2a>
 800f442:	89ab      	ldrh	r3, [r5, #12]
 800f444:	059a      	lsls	r2, r3, #22
 800f446:	d402      	bmi.n	800f44e <_vfiprintf_r+0x2a>
 800f448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f44a:	f7fd f9c0 	bl	800c7ce <__retarget_lock_acquire_recursive>
 800f44e:	89ab      	ldrh	r3, [r5, #12]
 800f450:	071b      	lsls	r3, r3, #28
 800f452:	d501      	bpl.n	800f458 <_vfiprintf_r+0x34>
 800f454:	692b      	ldr	r3, [r5, #16]
 800f456:	b99b      	cbnz	r3, 800f480 <_vfiprintf_r+0x5c>
 800f458:	4629      	mov	r1, r5
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7fd f8b4 	bl	800c5c8 <__swsetup_r>
 800f460:	b170      	cbz	r0, 800f480 <_vfiprintf_r+0x5c>
 800f462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f464:	07dc      	lsls	r4, r3, #31
 800f466:	d504      	bpl.n	800f472 <_vfiprintf_r+0x4e>
 800f468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f46c:	b01d      	add	sp, #116	; 0x74
 800f46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f472:	89ab      	ldrh	r3, [r5, #12]
 800f474:	0598      	lsls	r0, r3, #22
 800f476:	d4f7      	bmi.n	800f468 <_vfiprintf_r+0x44>
 800f478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f47a:	f7fd f9a9 	bl	800c7d0 <__retarget_lock_release_recursive>
 800f47e:	e7f3      	b.n	800f468 <_vfiprintf_r+0x44>
 800f480:	2300      	movs	r3, #0
 800f482:	9309      	str	r3, [sp, #36]	; 0x24
 800f484:	2320      	movs	r3, #32
 800f486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f48e:	2330      	movs	r3, #48	; 0x30
 800f490:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f644 <_vfiprintf_r+0x220>
 800f494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f498:	f04f 0901 	mov.w	r9, #1
 800f49c:	4623      	mov	r3, r4
 800f49e:	469a      	mov	sl, r3
 800f4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4a4:	b10a      	cbz	r2, 800f4aa <_vfiprintf_r+0x86>
 800f4a6:	2a25      	cmp	r2, #37	; 0x25
 800f4a8:	d1f9      	bne.n	800f49e <_vfiprintf_r+0x7a>
 800f4aa:	ebba 0b04 	subs.w	fp, sl, r4
 800f4ae:	d00b      	beq.n	800f4c8 <_vfiprintf_r+0xa4>
 800f4b0:	465b      	mov	r3, fp
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f7ff ffa1 	bl	800f3fe <__sfputs_r>
 800f4bc:	3001      	adds	r0, #1
 800f4be:	f000 80a9 	beq.w	800f614 <_vfiprintf_r+0x1f0>
 800f4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4c4:	445a      	add	r2, fp
 800f4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800f4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 80a1 	beq.w	800f614 <_vfiprintf_r+0x1f0>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4dc:	f10a 0a01 	add.w	sl, sl, #1
 800f4e0:	9304      	str	r3, [sp, #16]
 800f4e2:	9307      	str	r3, [sp, #28]
 800f4e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4e8:	931a      	str	r3, [sp, #104]	; 0x68
 800f4ea:	4654      	mov	r4, sl
 800f4ec:	2205      	movs	r2, #5
 800f4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f2:	4854      	ldr	r0, [pc, #336]	; (800f644 <_vfiprintf_r+0x220>)
 800f4f4:	f7f0 fe84 	bl	8000200 <memchr>
 800f4f8:	9a04      	ldr	r2, [sp, #16]
 800f4fa:	b9d8      	cbnz	r0, 800f534 <_vfiprintf_r+0x110>
 800f4fc:	06d1      	lsls	r1, r2, #27
 800f4fe:	bf44      	itt	mi
 800f500:	2320      	movmi	r3, #32
 800f502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f506:	0713      	lsls	r3, r2, #28
 800f508:	bf44      	itt	mi
 800f50a:	232b      	movmi	r3, #43	; 0x2b
 800f50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f510:	f89a 3000 	ldrb.w	r3, [sl]
 800f514:	2b2a      	cmp	r3, #42	; 0x2a
 800f516:	d015      	beq.n	800f544 <_vfiprintf_r+0x120>
 800f518:	9a07      	ldr	r2, [sp, #28]
 800f51a:	4654      	mov	r4, sl
 800f51c:	2000      	movs	r0, #0
 800f51e:	f04f 0c0a 	mov.w	ip, #10
 800f522:	4621      	mov	r1, r4
 800f524:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f528:	3b30      	subs	r3, #48	; 0x30
 800f52a:	2b09      	cmp	r3, #9
 800f52c:	d94d      	bls.n	800f5ca <_vfiprintf_r+0x1a6>
 800f52e:	b1b0      	cbz	r0, 800f55e <_vfiprintf_r+0x13a>
 800f530:	9207      	str	r2, [sp, #28]
 800f532:	e014      	b.n	800f55e <_vfiprintf_r+0x13a>
 800f534:	eba0 0308 	sub.w	r3, r0, r8
 800f538:	fa09 f303 	lsl.w	r3, r9, r3
 800f53c:	4313      	orrs	r3, r2
 800f53e:	9304      	str	r3, [sp, #16]
 800f540:	46a2      	mov	sl, r4
 800f542:	e7d2      	b.n	800f4ea <_vfiprintf_r+0xc6>
 800f544:	9b03      	ldr	r3, [sp, #12]
 800f546:	1d19      	adds	r1, r3, #4
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	9103      	str	r1, [sp, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	bfbb      	ittet	lt
 800f550:	425b      	neglt	r3, r3
 800f552:	f042 0202 	orrlt.w	r2, r2, #2
 800f556:	9307      	strge	r3, [sp, #28]
 800f558:	9307      	strlt	r3, [sp, #28]
 800f55a:	bfb8      	it	lt
 800f55c:	9204      	strlt	r2, [sp, #16]
 800f55e:	7823      	ldrb	r3, [r4, #0]
 800f560:	2b2e      	cmp	r3, #46	; 0x2e
 800f562:	d10c      	bne.n	800f57e <_vfiprintf_r+0x15a>
 800f564:	7863      	ldrb	r3, [r4, #1]
 800f566:	2b2a      	cmp	r3, #42	; 0x2a
 800f568:	d134      	bne.n	800f5d4 <_vfiprintf_r+0x1b0>
 800f56a:	9b03      	ldr	r3, [sp, #12]
 800f56c:	1d1a      	adds	r2, r3, #4
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	9203      	str	r2, [sp, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	bfb8      	it	lt
 800f576:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f57a:	3402      	adds	r4, #2
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f654 <_vfiprintf_r+0x230>
 800f582:	7821      	ldrb	r1, [r4, #0]
 800f584:	2203      	movs	r2, #3
 800f586:	4650      	mov	r0, sl
 800f588:	f7f0 fe3a 	bl	8000200 <memchr>
 800f58c:	b138      	cbz	r0, 800f59e <_vfiprintf_r+0x17a>
 800f58e:	9b04      	ldr	r3, [sp, #16]
 800f590:	eba0 000a 	sub.w	r0, r0, sl
 800f594:	2240      	movs	r2, #64	; 0x40
 800f596:	4082      	lsls	r2, r0
 800f598:	4313      	orrs	r3, r2
 800f59a:	3401      	adds	r4, #1
 800f59c:	9304      	str	r3, [sp, #16]
 800f59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a2:	4829      	ldr	r0, [pc, #164]	; (800f648 <_vfiprintf_r+0x224>)
 800f5a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5a8:	2206      	movs	r2, #6
 800f5aa:	f7f0 fe29 	bl	8000200 <memchr>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d03f      	beq.n	800f632 <_vfiprintf_r+0x20e>
 800f5b2:	4b26      	ldr	r3, [pc, #152]	; (800f64c <_vfiprintf_r+0x228>)
 800f5b4:	bb1b      	cbnz	r3, 800f5fe <_vfiprintf_r+0x1da>
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	3307      	adds	r3, #7
 800f5ba:	f023 0307 	bic.w	r3, r3, #7
 800f5be:	3308      	adds	r3, #8
 800f5c0:	9303      	str	r3, [sp, #12]
 800f5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5c4:	443b      	add	r3, r7
 800f5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c8:	e768      	b.n	800f49c <_vfiprintf_r+0x78>
 800f5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	2001      	movs	r0, #1
 800f5d2:	e7a6      	b.n	800f522 <_vfiprintf_r+0xfe>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	3401      	adds	r4, #1
 800f5d8:	9305      	str	r3, [sp, #20]
 800f5da:	4619      	mov	r1, r3
 800f5dc:	f04f 0c0a 	mov.w	ip, #10
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5e6:	3a30      	subs	r2, #48	; 0x30
 800f5e8:	2a09      	cmp	r2, #9
 800f5ea:	d903      	bls.n	800f5f4 <_vfiprintf_r+0x1d0>
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d0c6      	beq.n	800f57e <_vfiprintf_r+0x15a>
 800f5f0:	9105      	str	r1, [sp, #20]
 800f5f2:	e7c4      	b.n	800f57e <_vfiprintf_r+0x15a>
 800f5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e7f0      	b.n	800f5e0 <_vfiprintf_r+0x1bc>
 800f5fe:	ab03      	add	r3, sp, #12
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	462a      	mov	r2, r5
 800f604:	4b12      	ldr	r3, [pc, #72]	; (800f650 <_vfiprintf_r+0x22c>)
 800f606:	a904      	add	r1, sp, #16
 800f608:	4630      	mov	r0, r6
 800f60a:	f7fb ff3f 	bl	800b48c <_printf_float>
 800f60e:	4607      	mov	r7, r0
 800f610:	1c78      	adds	r0, r7, #1
 800f612:	d1d6      	bne.n	800f5c2 <_vfiprintf_r+0x19e>
 800f614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f616:	07d9      	lsls	r1, r3, #31
 800f618:	d405      	bmi.n	800f626 <_vfiprintf_r+0x202>
 800f61a:	89ab      	ldrh	r3, [r5, #12]
 800f61c:	059a      	lsls	r2, r3, #22
 800f61e:	d402      	bmi.n	800f626 <_vfiprintf_r+0x202>
 800f620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f622:	f7fd f8d5 	bl	800c7d0 <__retarget_lock_release_recursive>
 800f626:	89ab      	ldrh	r3, [r5, #12]
 800f628:	065b      	lsls	r3, r3, #25
 800f62a:	f53f af1d 	bmi.w	800f468 <_vfiprintf_r+0x44>
 800f62e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f630:	e71c      	b.n	800f46c <_vfiprintf_r+0x48>
 800f632:	ab03      	add	r3, sp, #12
 800f634:	9300      	str	r3, [sp, #0]
 800f636:	462a      	mov	r2, r5
 800f638:	4b05      	ldr	r3, [pc, #20]	; (800f650 <_vfiprintf_r+0x22c>)
 800f63a:	a904      	add	r1, sp, #16
 800f63c:	4630      	mov	r0, r6
 800f63e:	f7fc f9c9 	bl	800b9d4 <_printf_i>
 800f642:	e7e4      	b.n	800f60e <_vfiprintf_r+0x1ea>
 800f644:	080297e1 	.word	0x080297e1
 800f648:	080297eb 	.word	0x080297eb
 800f64c:	0800b48d 	.word	0x0800b48d
 800f650:	0800f3ff 	.word	0x0800f3ff
 800f654:	080297e7 	.word	0x080297e7

0800f658 <_scanf_chars>:
 800f658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f65c:	4615      	mov	r5, r2
 800f65e:	688a      	ldr	r2, [r1, #8]
 800f660:	4680      	mov	r8, r0
 800f662:	460c      	mov	r4, r1
 800f664:	b932      	cbnz	r2, 800f674 <_scanf_chars+0x1c>
 800f666:	698a      	ldr	r2, [r1, #24]
 800f668:	2a00      	cmp	r2, #0
 800f66a:	bf0c      	ite	eq
 800f66c:	2201      	moveq	r2, #1
 800f66e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f672:	608a      	str	r2, [r1, #8]
 800f674:	6822      	ldr	r2, [r4, #0]
 800f676:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f708 <_scanf_chars+0xb0>
 800f67a:	06d1      	lsls	r1, r2, #27
 800f67c:	bf5f      	itttt	pl
 800f67e:	681a      	ldrpl	r2, [r3, #0]
 800f680:	1d11      	addpl	r1, r2, #4
 800f682:	6019      	strpl	r1, [r3, #0]
 800f684:	6816      	ldrpl	r6, [r2, #0]
 800f686:	2700      	movs	r7, #0
 800f688:	69a0      	ldr	r0, [r4, #24]
 800f68a:	b188      	cbz	r0, 800f6b0 <_scanf_chars+0x58>
 800f68c:	2801      	cmp	r0, #1
 800f68e:	d107      	bne.n	800f6a0 <_scanf_chars+0x48>
 800f690:	682a      	ldr	r2, [r5, #0]
 800f692:	7811      	ldrb	r1, [r2, #0]
 800f694:	6962      	ldr	r2, [r4, #20]
 800f696:	5c52      	ldrb	r2, [r2, r1]
 800f698:	b952      	cbnz	r2, 800f6b0 <_scanf_chars+0x58>
 800f69a:	2f00      	cmp	r7, #0
 800f69c:	d031      	beq.n	800f702 <_scanf_chars+0xaa>
 800f69e:	e022      	b.n	800f6e6 <_scanf_chars+0x8e>
 800f6a0:	2802      	cmp	r0, #2
 800f6a2:	d120      	bne.n	800f6e6 <_scanf_chars+0x8e>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f6ac:	071b      	lsls	r3, r3, #28
 800f6ae:	d41a      	bmi.n	800f6e6 <_scanf_chars+0x8e>
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	06da      	lsls	r2, r3, #27
 800f6b4:	bf5e      	ittt	pl
 800f6b6:	682b      	ldrpl	r3, [r5, #0]
 800f6b8:	781b      	ldrbpl	r3, [r3, #0]
 800f6ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f6be:	682a      	ldr	r2, [r5, #0]
 800f6c0:	686b      	ldr	r3, [r5, #4]
 800f6c2:	3201      	adds	r2, #1
 800f6c4:	602a      	str	r2, [r5, #0]
 800f6c6:	68a2      	ldr	r2, [r4, #8]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	3a01      	subs	r2, #1
 800f6cc:	606b      	str	r3, [r5, #4]
 800f6ce:	3701      	adds	r7, #1
 800f6d0:	60a2      	str	r2, [r4, #8]
 800f6d2:	b142      	cbz	r2, 800f6e6 <_scanf_chars+0x8e>
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dcd7      	bgt.n	800f688 <_scanf_chars+0x30>
 800f6d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f6dc:	4629      	mov	r1, r5
 800f6de:	4640      	mov	r0, r8
 800f6e0:	4798      	blx	r3
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d0d0      	beq.n	800f688 <_scanf_chars+0x30>
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	f013 0310 	ands.w	r3, r3, #16
 800f6ec:	d105      	bne.n	800f6fa <_scanf_chars+0xa2>
 800f6ee:	68e2      	ldr	r2, [r4, #12]
 800f6f0:	3201      	adds	r2, #1
 800f6f2:	60e2      	str	r2, [r4, #12]
 800f6f4:	69a2      	ldr	r2, [r4, #24]
 800f6f6:	b102      	cbz	r2, 800f6fa <_scanf_chars+0xa2>
 800f6f8:	7033      	strb	r3, [r6, #0]
 800f6fa:	6923      	ldr	r3, [r4, #16]
 800f6fc:	443b      	add	r3, r7
 800f6fe:	6123      	str	r3, [r4, #16]
 800f700:	2000      	movs	r0, #0
 800f702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f706:	bf00      	nop
 800f708:	080296e1 	.word	0x080296e1

0800f70c <_scanf_i>:
 800f70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f710:	4698      	mov	r8, r3
 800f712:	4b74      	ldr	r3, [pc, #464]	; (800f8e4 <_scanf_i+0x1d8>)
 800f714:	460c      	mov	r4, r1
 800f716:	4682      	mov	sl, r0
 800f718:	4616      	mov	r6, r2
 800f71a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f71e:	b087      	sub	sp, #28
 800f720:	ab03      	add	r3, sp, #12
 800f722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f726:	4b70      	ldr	r3, [pc, #448]	; (800f8e8 <_scanf_i+0x1dc>)
 800f728:	69a1      	ldr	r1, [r4, #24]
 800f72a:	4a70      	ldr	r2, [pc, #448]	; (800f8ec <_scanf_i+0x1e0>)
 800f72c:	2903      	cmp	r1, #3
 800f72e:	bf18      	it	ne
 800f730:	461a      	movne	r2, r3
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	9201      	str	r2, [sp, #4]
 800f736:	1e5a      	subs	r2, r3, #1
 800f738:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f73c:	bf88      	it	hi
 800f73e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f742:	4627      	mov	r7, r4
 800f744:	bf82      	ittt	hi
 800f746:	eb03 0905 	addhi.w	r9, r3, r5
 800f74a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f74e:	60a3      	strhi	r3, [r4, #8]
 800f750:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f754:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f758:	bf98      	it	ls
 800f75a:	f04f 0900 	movls.w	r9, #0
 800f75e:	6023      	str	r3, [r4, #0]
 800f760:	463d      	mov	r5, r7
 800f762:	f04f 0b00 	mov.w	fp, #0
 800f766:	6831      	ldr	r1, [r6, #0]
 800f768:	ab03      	add	r3, sp, #12
 800f76a:	7809      	ldrb	r1, [r1, #0]
 800f76c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f770:	2202      	movs	r2, #2
 800f772:	f7f0 fd45 	bl	8000200 <memchr>
 800f776:	b328      	cbz	r0, 800f7c4 <_scanf_i+0xb8>
 800f778:	f1bb 0f01 	cmp.w	fp, #1
 800f77c:	d159      	bne.n	800f832 <_scanf_i+0x126>
 800f77e:	6862      	ldr	r2, [r4, #4]
 800f780:	b92a      	cbnz	r2, 800f78e <_scanf_i+0x82>
 800f782:	6822      	ldr	r2, [r4, #0]
 800f784:	2308      	movs	r3, #8
 800f786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f78a:	6063      	str	r3, [r4, #4]
 800f78c:	6022      	str	r2, [r4, #0]
 800f78e:	6822      	ldr	r2, [r4, #0]
 800f790:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f794:	6022      	str	r2, [r4, #0]
 800f796:	68a2      	ldr	r2, [r4, #8]
 800f798:	1e51      	subs	r1, r2, #1
 800f79a:	60a1      	str	r1, [r4, #8]
 800f79c:	b192      	cbz	r2, 800f7c4 <_scanf_i+0xb8>
 800f79e:	6832      	ldr	r2, [r6, #0]
 800f7a0:	1c51      	adds	r1, r2, #1
 800f7a2:	6031      	str	r1, [r6, #0]
 800f7a4:	7812      	ldrb	r2, [r2, #0]
 800f7a6:	f805 2b01 	strb.w	r2, [r5], #1
 800f7aa:	6872      	ldr	r2, [r6, #4]
 800f7ac:	3a01      	subs	r2, #1
 800f7ae:	2a00      	cmp	r2, #0
 800f7b0:	6072      	str	r2, [r6, #4]
 800f7b2:	dc07      	bgt.n	800f7c4 <_scanf_i+0xb8>
 800f7b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	4650      	mov	r0, sl
 800f7bc:	4790      	blx	r2
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	f040 8085 	bne.w	800f8ce <_scanf_i+0x1c2>
 800f7c4:	f10b 0b01 	add.w	fp, fp, #1
 800f7c8:	f1bb 0f03 	cmp.w	fp, #3
 800f7cc:	d1cb      	bne.n	800f766 <_scanf_i+0x5a>
 800f7ce:	6863      	ldr	r3, [r4, #4]
 800f7d0:	b90b      	cbnz	r3, 800f7d6 <_scanf_i+0xca>
 800f7d2:	230a      	movs	r3, #10
 800f7d4:	6063      	str	r3, [r4, #4]
 800f7d6:	6863      	ldr	r3, [r4, #4]
 800f7d8:	4945      	ldr	r1, [pc, #276]	; (800f8f0 <_scanf_i+0x1e4>)
 800f7da:	6960      	ldr	r0, [r4, #20]
 800f7dc:	1ac9      	subs	r1, r1, r3
 800f7de:	f000 f91f 	bl	800fa20 <__sccl>
 800f7e2:	f04f 0b00 	mov.w	fp, #0
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	6822      	ldr	r2, [r4, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d03d      	beq.n	800f86a <_scanf_i+0x15e>
 800f7ee:	6831      	ldr	r1, [r6, #0]
 800f7f0:	6960      	ldr	r0, [r4, #20]
 800f7f2:	f891 c000 	ldrb.w	ip, [r1]
 800f7f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d035      	beq.n	800f86a <_scanf_i+0x15e>
 800f7fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f802:	d124      	bne.n	800f84e <_scanf_i+0x142>
 800f804:	0510      	lsls	r0, r2, #20
 800f806:	d522      	bpl.n	800f84e <_scanf_i+0x142>
 800f808:	f10b 0b01 	add.w	fp, fp, #1
 800f80c:	f1b9 0f00 	cmp.w	r9, #0
 800f810:	d003      	beq.n	800f81a <_scanf_i+0x10e>
 800f812:	3301      	adds	r3, #1
 800f814:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f818:	60a3      	str	r3, [r4, #8]
 800f81a:	6873      	ldr	r3, [r6, #4]
 800f81c:	3b01      	subs	r3, #1
 800f81e:	2b00      	cmp	r3, #0
 800f820:	6073      	str	r3, [r6, #4]
 800f822:	dd1b      	ble.n	800f85c <_scanf_i+0x150>
 800f824:	6833      	ldr	r3, [r6, #0]
 800f826:	3301      	adds	r3, #1
 800f828:	6033      	str	r3, [r6, #0]
 800f82a:	68a3      	ldr	r3, [r4, #8]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	60a3      	str	r3, [r4, #8]
 800f830:	e7d9      	b.n	800f7e6 <_scanf_i+0xda>
 800f832:	f1bb 0f02 	cmp.w	fp, #2
 800f836:	d1ae      	bne.n	800f796 <_scanf_i+0x8a>
 800f838:	6822      	ldr	r2, [r4, #0]
 800f83a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f83e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f842:	d1bf      	bne.n	800f7c4 <_scanf_i+0xb8>
 800f844:	2310      	movs	r3, #16
 800f846:	6063      	str	r3, [r4, #4]
 800f848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f84c:	e7a2      	b.n	800f794 <_scanf_i+0x88>
 800f84e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f852:	6022      	str	r2, [r4, #0]
 800f854:	780b      	ldrb	r3, [r1, #0]
 800f856:	f805 3b01 	strb.w	r3, [r5], #1
 800f85a:	e7de      	b.n	800f81a <_scanf_i+0x10e>
 800f85c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f860:	4631      	mov	r1, r6
 800f862:	4650      	mov	r0, sl
 800f864:	4798      	blx	r3
 800f866:	2800      	cmp	r0, #0
 800f868:	d0df      	beq.n	800f82a <_scanf_i+0x11e>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	05d9      	lsls	r1, r3, #23
 800f86e:	d50d      	bpl.n	800f88c <_scanf_i+0x180>
 800f870:	42bd      	cmp	r5, r7
 800f872:	d909      	bls.n	800f888 <_scanf_i+0x17c>
 800f874:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f87c:	4632      	mov	r2, r6
 800f87e:	4650      	mov	r0, sl
 800f880:	4798      	blx	r3
 800f882:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800f886:	464d      	mov	r5, r9
 800f888:	42bd      	cmp	r5, r7
 800f88a:	d028      	beq.n	800f8de <_scanf_i+0x1d2>
 800f88c:	6822      	ldr	r2, [r4, #0]
 800f88e:	f012 0210 	ands.w	r2, r2, #16
 800f892:	d113      	bne.n	800f8bc <_scanf_i+0x1b0>
 800f894:	702a      	strb	r2, [r5, #0]
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	9e01      	ldr	r6, [sp, #4]
 800f89a:	4639      	mov	r1, r7
 800f89c:	4650      	mov	r0, sl
 800f89e:	47b0      	blx	r6
 800f8a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a4:	6821      	ldr	r1, [r4, #0]
 800f8a6:	1d1a      	adds	r2, r3, #4
 800f8a8:	f8c8 2000 	str.w	r2, [r8]
 800f8ac:	f011 0f20 	tst.w	r1, #32
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	d00f      	beq.n	800f8d4 <_scanf_i+0x1c8>
 800f8b4:	6018      	str	r0, [r3, #0]
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	60e3      	str	r3, [r4, #12]
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	1bed      	subs	r5, r5, r7
 800f8c0:	445d      	add	r5, fp
 800f8c2:	442b      	add	r3, r5
 800f8c4:	6123      	str	r3, [r4, #16]
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	b007      	add	sp, #28
 800f8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ce:	f04f 0b00 	mov.w	fp, #0
 800f8d2:	e7ca      	b.n	800f86a <_scanf_i+0x15e>
 800f8d4:	07ca      	lsls	r2, r1, #31
 800f8d6:	bf4c      	ite	mi
 800f8d8:	8018      	strhmi	r0, [r3, #0]
 800f8da:	6018      	strpl	r0, [r3, #0]
 800f8dc:	e7eb      	b.n	800f8b6 <_scanf_i+0x1aa>
 800f8de:	2001      	movs	r0, #1
 800f8e0:	e7f2      	b.n	800f8c8 <_scanf_i+0x1bc>
 800f8e2:	bf00      	nop
 800f8e4:	0801352c 	.word	0x0801352c
 800f8e8:	0801042d 	.word	0x0801042d
 800f8ec:	0800ed79 	.word	0x0800ed79
 800f8f0:	08029802 	.word	0x08029802

0800f8f4 <__swhatbuf_r>:
 800f8f4:	b570      	push	{r4, r5, r6, lr}
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	b096      	sub	sp, #88	; 0x58
 800f900:	4615      	mov	r5, r2
 800f902:	461e      	mov	r6, r3
 800f904:	da0d      	bge.n	800f922 <__swhatbuf_r+0x2e>
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f90c:	f04f 0100 	mov.w	r1, #0
 800f910:	bf0c      	ite	eq
 800f912:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f916:	2340      	movne	r3, #64	; 0x40
 800f918:	2000      	movs	r0, #0
 800f91a:	6031      	str	r1, [r6, #0]
 800f91c:	602b      	str	r3, [r5, #0]
 800f91e:	b016      	add	sp, #88	; 0x58
 800f920:	bd70      	pop	{r4, r5, r6, pc}
 800f922:	466a      	mov	r2, sp
 800f924:	f000 f90a 	bl	800fb3c <_fstat_r>
 800f928:	2800      	cmp	r0, #0
 800f92a:	dbec      	blt.n	800f906 <__swhatbuf_r+0x12>
 800f92c:	9901      	ldr	r1, [sp, #4]
 800f92e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f932:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f936:	4259      	negs	r1, r3
 800f938:	4159      	adcs	r1, r3
 800f93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f93e:	e7eb      	b.n	800f918 <__swhatbuf_r+0x24>

0800f940 <__smakebuf_r>:
 800f940:	898b      	ldrh	r3, [r1, #12]
 800f942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f944:	079d      	lsls	r5, r3, #30
 800f946:	4606      	mov	r6, r0
 800f948:	460c      	mov	r4, r1
 800f94a:	d507      	bpl.n	800f95c <__smakebuf_r+0x1c>
 800f94c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	6123      	str	r3, [r4, #16]
 800f954:	2301      	movs	r3, #1
 800f956:	6163      	str	r3, [r4, #20]
 800f958:	b002      	add	sp, #8
 800f95a:	bd70      	pop	{r4, r5, r6, pc}
 800f95c:	ab01      	add	r3, sp, #4
 800f95e:	466a      	mov	r2, sp
 800f960:	f7ff ffc8 	bl	800f8f4 <__swhatbuf_r>
 800f964:	9900      	ldr	r1, [sp, #0]
 800f966:	4605      	mov	r5, r0
 800f968:	4630      	mov	r0, r6
 800f96a:	f7fd fe37 	bl	800d5dc <_malloc_r>
 800f96e:	b948      	cbnz	r0, 800f984 <__smakebuf_r+0x44>
 800f970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f974:	059a      	lsls	r2, r3, #22
 800f976:	d4ef      	bmi.n	800f958 <__smakebuf_r+0x18>
 800f978:	f023 0303 	bic.w	r3, r3, #3
 800f97c:	f043 0302 	orr.w	r3, r3, #2
 800f980:	81a3      	strh	r3, [r4, #12]
 800f982:	e7e3      	b.n	800f94c <__smakebuf_r+0xc>
 800f984:	89a3      	ldrh	r3, [r4, #12]
 800f986:	6020      	str	r0, [r4, #0]
 800f988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f98c:	81a3      	strh	r3, [r4, #12]
 800f98e:	9b00      	ldr	r3, [sp, #0]
 800f990:	6163      	str	r3, [r4, #20]
 800f992:	9b01      	ldr	r3, [sp, #4]
 800f994:	6120      	str	r0, [r4, #16]
 800f996:	b15b      	cbz	r3, 800f9b0 <__smakebuf_r+0x70>
 800f998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f99c:	4630      	mov	r0, r6
 800f99e:	f000 f8df 	bl	800fb60 <_isatty_r>
 800f9a2:	b128      	cbz	r0, 800f9b0 <__smakebuf_r+0x70>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	f023 0303 	bic.w	r3, r3, #3
 800f9aa:	f043 0301 	orr.w	r3, r3, #1
 800f9ae:	81a3      	strh	r3, [r4, #12]
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	431d      	orrs	r5, r3
 800f9b4:	81a5      	strh	r5, [r4, #12]
 800f9b6:	e7cf      	b.n	800f958 <__smakebuf_r+0x18>

0800f9b8 <_putc_r>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	460d      	mov	r5, r1
 800f9bc:	4614      	mov	r4, r2
 800f9be:	4606      	mov	r6, r0
 800f9c0:	b118      	cbz	r0, 800f9ca <_putc_r+0x12>
 800f9c2:	6a03      	ldr	r3, [r0, #32]
 800f9c4:	b90b      	cbnz	r3, 800f9ca <_putc_r+0x12>
 800f9c6:	f7fc fc85 	bl	800c2d4 <__sinit>
 800f9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9cc:	07d8      	lsls	r0, r3, #31
 800f9ce:	d405      	bmi.n	800f9dc <_putc_r+0x24>
 800f9d0:	89a3      	ldrh	r3, [r4, #12]
 800f9d2:	0599      	lsls	r1, r3, #22
 800f9d4:	d402      	bmi.n	800f9dc <_putc_r+0x24>
 800f9d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9d8:	f7fc fef9 	bl	800c7ce <__retarget_lock_acquire_recursive>
 800f9dc:	68a3      	ldr	r3, [r4, #8]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	60a3      	str	r3, [r4, #8]
 800f9e4:	da05      	bge.n	800f9f2 <_putc_r+0x3a>
 800f9e6:	69a2      	ldr	r2, [r4, #24]
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	db12      	blt.n	800fa12 <_putc_r+0x5a>
 800f9ec:	b2eb      	uxtb	r3, r5
 800f9ee:	2b0a      	cmp	r3, #10
 800f9f0:	d00f      	beq.n	800fa12 <_putc_r+0x5a>
 800f9f2:	6823      	ldr	r3, [r4, #0]
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	6022      	str	r2, [r4, #0]
 800f9f8:	701d      	strb	r5, [r3, #0]
 800f9fa:	b2ed      	uxtb	r5, r5
 800f9fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9fe:	07da      	lsls	r2, r3, #31
 800fa00:	d405      	bmi.n	800fa0e <_putc_r+0x56>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	059b      	lsls	r3, r3, #22
 800fa06:	d402      	bmi.n	800fa0e <_putc_r+0x56>
 800fa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa0a:	f7fc fee1 	bl	800c7d0 <__retarget_lock_release_recursive>
 800fa0e:	4628      	mov	r0, r5
 800fa10:	bd70      	pop	{r4, r5, r6, pc}
 800fa12:	4629      	mov	r1, r5
 800fa14:	4622      	mov	r2, r4
 800fa16:	4630      	mov	r0, r6
 800fa18:	f7fc fd99 	bl	800c54e <__swbuf_r>
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	e7ed      	b.n	800f9fc <_putc_r+0x44>

0800fa20 <__sccl>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	780b      	ldrb	r3, [r1, #0]
 800fa24:	4604      	mov	r4, r0
 800fa26:	2b5e      	cmp	r3, #94	; 0x5e
 800fa28:	bf0b      	itete	eq
 800fa2a:	784b      	ldrbeq	r3, [r1, #1]
 800fa2c:	1c4a      	addne	r2, r1, #1
 800fa2e:	1c8a      	addeq	r2, r1, #2
 800fa30:	2100      	movne	r1, #0
 800fa32:	bf08      	it	eq
 800fa34:	2101      	moveq	r1, #1
 800fa36:	3801      	subs	r0, #1
 800fa38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fa3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fa40:	42a8      	cmp	r0, r5
 800fa42:	d1fb      	bne.n	800fa3c <__sccl+0x1c>
 800fa44:	b90b      	cbnz	r3, 800fa4a <__sccl+0x2a>
 800fa46:	1e50      	subs	r0, r2, #1
 800fa48:	bd70      	pop	{r4, r5, r6, pc}
 800fa4a:	f081 0101 	eor.w	r1, r1, #1
 800fa4e:	54e1      	strb	r1, [r4, r3]
 800fa50:	4610      	mov	r0, r2
 800fa52:	4602      	mov	r2, r0
 800fa54:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fa58:	2d2d      	cmp	r5, #45	; 0x2d
 800fa5a:	d005      	beq.n	800fa68 <__sccl+0x48>
 800fa5c:	2d5d      	cmp	r5, #93	; 0x5d
 800fa5e:	d016      	beq.n	800fa8e <__sccl+0x6e>
 800fa60:	2d00      	cmp	r5, #0
 800fa62:	d0f1      	beq.n	800fa48 <__sccl+0x28>
 800fa64:	462b      	mov	r3, r5
 800fa66:	e7f2      	b.n	800fa4e <__sccl+0x2e>
 800fa68:	7846      	ldrb	r6, [r0, #1]
 800fa6a:	2e5d      	cmp	r6, #93	; 0x5d
 800fa6c:	d0fa      	beq.n	800fa64 <__sccl+0x44>
 800fa6e:	42b3      	cmp	r3, r6
 800fa70:	dcf8      	bgt.n	800fa64 <__sccl+0x44>
 800fa72:	3002      	adds	r0, #2
 800fa74:	461a      	mov	r2, r3
 800fa76:	3201      	adds	r2, #1
 800fa78:	4296      	cmp	r6, r2
 800fa7a:	54a1      	strb	r1, [r4, r2]
 800fa7c:	dcfb      	bgt.n	800fa76 <__sccl+0x56>
 800fa7e:	1af2      	subs	r2, r6, r3
 800fa80:	3a01      	subs	r2, #1
 800fa82:	1c5d      	adds	r5, r3, #1
 800fa84:	42b3      	cmp	r3, r6
 800fa86:	bfa8      	it	ge
 800fa88:	2200      	movge	r2, #0
 800fa8a:	18ab      	adds	r3, r5, r2
 800fa8c:	e7e1      	b.n	800fa52 <__sccl+0x32>
 800fa8e:	4610      	mov	r0, r2
 800fa90:	e7da      	b.n	800fa48 <__sccl+0x28>

0800fa92 <__submore>:
 800fa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa96:	460c      	mov	r4, r1
 800fa98:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fa9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa9e:	4299      	cmp	r1, r3
 800faa0:	d11d      	bne.n	800fade <__submore+0x4c>
 800faa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800faa6:	f7fd fd99 	bl	800d5dc <_malloc_r>
 800faaa:	b918      	cbnz	r0, 800fab4 <__submore+0x22>
 800faac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fab8:	63a3      	str	r3, [r4, #56]	; 0x38
 800faba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fabe:	6360      	str	r0, [r4, #52]	; 0x34
 800fac0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fac4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fac8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800facc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fad0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fad4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fad8:	6020      	str	r0, [r4, #0]
 800fada:	2000      	movs	r0, #0
 800fadc:	e7e8      	b.n	800fab0 <__submore+0x1e>
 800fade:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fae0:	0077      	lsls	r7, r6, #1
 800fae2:	463a      	mov	r2, r7
 800fae4:	f000 fc01 	bl	80102ea <_realloc_r>
 800fae8:	4605      	mov	r5, r0
 800faea:	2800      	cmp	r0, #0
 800faec:	d0de      	beq.n	800faac <__submore+0x1a>
 800faee:	eb00 0806 	add.w	r8, r0, r6
 800faf2:	4601      	mov	r1, r0
 800faf4:	4632      	mov	r2, r6
 800faf6:	4640      	mov	r0, r8
 800faf8:	f7fc fe6b 	bl	800c7d2 <memcpy>
 800fafc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fb00:	f8c4 8000 	str.w	r8, [r4]
 800fb04:	e7e9      	b.n	800fada <__submore+0x48>

0800fb06 <memmove>:
 800fb06:	4288      	cmp	r0, r1
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	eb01 0402 	add.w	r4, r1, r2
 800fb0e:	d902      	bls.n	800fb16 <memmove+0x10>
 800fb10:	4284      	cmp	r4, r0
 800fb12:	4623      	mov	r3, r4
 800fb14:	d807      	bhi.n	800fb26 <memmove+0x20>
 800fb16:	1e43      	subs	r3, r0, #1
 800fb18:	42a1      	cmp	r1, r4
 800fb1a:	d008      	beq.n	800fb2e <memmove+0x28>
 800fb1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb24:	e7f8      	b.n	800fb18 <memmove+0x12>
 800fb26:	4402      	add	r2, r0
 800fb28:	4601      	mov	r1, r0
 800fb2a:	428a      	cmp	r2, r1
 800fb2c:	d100      	bne.n	800fb30 <memmove+0x2a>
 800fb2e:	bd10      	pop	{r4, pc}
 800fb30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb38:	e7f7      	b.n	800fb2a <memmove+0x24>
	...

0800fb3c <_fstat_r>:
 800fb3c:	b538      	push	{r3, r4, r5, lr}
 800fb3e:	4d07      	ldr	r5, [pc, #28]	; (800fb5c <_fstat_r+0x20>)
 800fb40:	2300      	movs	r3, #0
 800fb42:	4604      	mov	r4, r0
 800fb44:	4608      	mov	r0, r1
 800fb46:	4611      	mov	r1, r2
 800fb48:	602b      	str	r3, [r5, #0]
 800fb4a:	f7f1 fe4c 	bl	80017e6 <_fstat>
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	d102      	bne.n	800fb58 <_fstat_r+0x1c>
 800fb52:	682b      	ldr	r3, [r5, #0]
 800fb54:	b103      	cbz	r3, 800fb58 <_fstat_r+0x1c>
 800fb56:	6023      	str	r3, [r4, #0]
 800fb58:	bd38      	pop	{r3, r4, r5, pc}
 800fb5a:	bf00      	nop
 800fb5c:	20006674 	.word	0x20006674

0800fb60 <_isatty_r>:
 800fb60:	b538      	push	{r3, r4, r5, lr}
 800fb62:	4d06      	ldr	r5, [pc, #24]	; (800fb7c <_isatty_r+0x1c>)
 800fb64:	2300      	movs	r3, #0
 800fb66:	4604      	mov	r4, r0
 800fb68:	4608      	mov	r0, r1
 800fb6a:	602b      	str	r3, [r5, #0]
 800fb6c:	f7f1 fe4b 	bl	8001806 <_isatty>
 800fb70:	1c43      	adds	r3, r0, #1
 800fb72:	d102      	bne.n	800fb7a <_isatty_r+0x1a>
 800fb74:	682b      	ldr	r3, [r5, #0]
 800fb76:	b103      	cbz	r3, 800fb7a <_isatty_r+0x1a>
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	bd38      	pop	{r3, r4, r5, pc}
 800fb7c:	20006674 	.word	0x20006674

0800fb80 <_sbrk_r>:
 800fb80:	b538      	push	{r3, r4, r5, lr}
 800fb82:	4d06      	ldr	r5, [pc, #24]	; (800fb9c <_sbrk_r+0x1c>)
 800fb84:	2300      	movs	r3, #0
 800fb86:	4604      	mov	r4, r0
 800fb88:	4608      	mov	r0, r1
 800fb8a:	602b      	str	r3, [r5, #0]
 800fb8c:	f7f1 fe54 	bl	8001838 <_sbrk>
 800fb90:	1c43      	adds	r3, r0, #1
 800fb92:	d102      	bne.n	800fb9a <_sbrk_r+0x1a>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	b103      	cbz	r3, 800fb9a <_sbrk_r+0x1a>
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	20006674 	.word	0x20006674

0800fba0 <nan>:
 800fba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fba8 <nan+0x8>
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	00000000 	.word	0x00000000
 800fbac:	7ff80000 	.word	0x7ff80000

0800fbb0 <__assert_func>:
 800fbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbb2:	4614      	mov	r4, r2
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <__assert_func+0x2c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4605      	mov	r5, r0
 800fbbc:	68d8      	ldr	r0, [r3, #12]
 800fbbe:	b14c      	cbz	r4, 800fbd4 <__assert_func+0x24>
 800fbc0:	4b07      	ldr	r3, [pc, #28]	; (800fbe0 <__assert_func+0x30>)
 800fbc2:	9100      	str	r1, [sp, #0]
 800fbc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fbc8:	4906      	ldr	r1, [pc, #24]	; (800fbe4 <__assert_func+0x34>)
 800fbca:	462b      	mov	r3, r5
 800fbcc:	f000 fc3e 	bl	801044c <fiprintf>
 800fbd0:	f000 fc4e 	bl	8010470 <abort>
 800fbd4:	4b04      	ldr	r3, [pc, #16]	; (800fbe8 <__assert_func+0x38>)
 800fbd6:	461c      	mov	r4, r3
 800fbd8:	e7f3      	b.n	800fbc2 <__assert_func+0x12>
 800fbda:	bf00      	nop
 800fbdc:	200003a4 	.word	0x200003a4
 800fbe0:	08029815 	.word	0x08029815
 800fbe4:	08029822 	.word	0x08029822
 800fbe8:	08029850 	.word	0x08029850

0800fbec <_calloc_r>:
 800fbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbee:	fba1 2402 	umull	r2, r4, r1, r2
 800fbf2:	b94c      	cbnz	r4, 800fc08 <_calloc_r+0x1c>
 800fbf4:	4611      	mov	r1, r2
 800fbf6:	9201      	str	r2, [sp, #4]
 800fbf8:	f7fd fcf0 	bl	800d5dc <_malloc_r>
 800fbfc:	9a01      	ldr	r2, [sp, #4]
 800fbfe:	4605      	mov	r5, r0
 800fc00:	b930      	cbnz	r0, 800fc10 <_calloc_r+0x24>
 800fc02:	4628      	mov	r0, r5
 800fc04:	b003      	add	sp, #12
 800fc06:	bd30      	pop	{r4, r5, pc}
 800fc08:	220c      	movs	r2, #12
 800fc0a:	6002      	str	r2, [r0, #0]
 800fc0c:	2500      	movs	r5, #0
 800fc0e:	e7f8      	b.n	800fc02 <_calloc_r+0x16>
 800fc10:	4621      	mov	r1, r4
 800fc12:	f7fc fd31 	bl	800c678 <memset>
 800fc16:	e7f4      	b.n	800fc02 <_calloc_r+0x16>

0800fc18 <rshift>:
 800fc18:	6903      	ldr	r3, [r0, #16]
 800fc1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fc1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fc26:	f100 0414 	add.w	r4, r0, #20
 800fc2a:	dd45      	ble.n	800fcb8 <rshift+0xa0>
 800fc2c:	f011 011f 	ands.w	r1, r1, #31
 800fc30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fc34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc38:	d10c      	bne.n	800fc54 <rshift+0x3c>
 800fc3a:	f100 0710 	add.w	r7, r0, #16
 800fc3e:	4629      	mov	r1, r5
 800fc40:	42b1      	cmp	r1, r6
 800fc42:	d334      	bcc.n	800fcae <rshift+0x96>
 800fc44:	1a9b      	subs	r3, r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	1eea      	subs	r2, r5, #3
 800fc4a:	4296      	cmp	r6, r2
 800fc4c:	bf38      	it	cc
 800fc4e:	2300      	movcc	r3, #0
 800fc50:	4423      	add	r3, r4
 800fc52:	e015      	b.n	800fc80 <rshift+0x68>
 800fc54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc58:	f1c1 0820 	rsb	r8, r1, #32
 800fc5c:	40cf      	lsrs	r7, r1
 800fc5e:	f105 0e04 	add.w	lr, r5, #4
 800fc62:	46a1      	mov	r9, r4
 800fc64:	4576      	cmp	r6, lr
 800fc66:	46f4      	mov	ip, lr
 800fc68:	d815      	bhi.n	800fc96 <rshift+0x7e>
 800fc6a:	1a9a      	subs	r2, r3, r2
 800fc6c:	0092      	lsls	r2, r2, #2
 800fc6e:	3a04      	subs	r2, #4
 800fc70:	3501      	adds	r5, #1
 800fc72:	42ae      	cmp	r6, r5
 800fc74:	bf38      	it	cc
 800fc76:	2200      	movcc	r2, #0
 800fc78:	18a3      	adds	r3, r4, r2
 800fc7a:	50a7      	str	r7, [r4, r2]
 800fc7c:	b107      	cbz	r7, 800fc80 <rshift+0x68>
 800fc7e:	3304      	adds	r3, #4
 800fc80:	1b1a      	subs	r2, r3, r4
 800fc82:	42a3      	cmp	r3, r4
 800fc84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc88:	bf08      	it	eq
 800fc8a:	2300      	moveq	r3, #0
 800fc8c:	6102      	str	r2, [r0, #16]
 800fc8e:	bf08      	it	eq
 800fc90:	6143      	streq	r3, [r0, #20]
 800fc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc96:	f8dc c000 	ldr.w	ip, [ip]
 800fc9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800fc9e:	ea4c 0707 	orr.w	r7, ip, r7
 800fca2:	f849 7b04 	str.w	r7, [r9], #4
 800fca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fcaa:	40cf      	lsrs	r7, r1
 800fcac:	e7da      	b.n	800fc64 <rshift+0x4c>
 800fcae:	f851 cb04 	ldr.w	ip, [r1], #4
 800fcb2:	f847 cf04 	str.w	ip, [r7, #4]!
 800fcb6:	e7c3      	b.n	800fc40 <rshift+0x28>
 800fcb8:	4623      	mov	r3, r4
 800fcba:	e7e1      	b.n	800fc80 <rshift+0x68>

0800fcbc <__hexdig_fun>:
 800fcbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fcc0:	2b09      	cmp	r3, #9
 800fcc2:	d802      	bhi.n	800fcca <__hexdig_fun+0xe>
 800fcc4:	3820      	subs	r0, #32
 800fcc6:	b2c0      	uxtb	r0, r0
 800fcc8:	4770      	bx	lr
 800fcca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fcce:	2b05      	cmp	r3, #5
 800fcd0:	d801      	bhi.n	800fcd6 <__hexdig_fun+0x1a>
 800fcd2:	3847      	subs	r0, #71	; 0x47
 800fcd4:	e7f7      	b.n	800fcc6 <__hexdig_fun+0xa>
 800fcd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fcda:	2b05      	cmp	r3, #5
 800fcdc:	d801      	bhi.n	800fce2 <__hexdig_fun+0x26>
 800fcde:	3827      	subs	r0, #39	; 0x27
 800fce0:	e7f1      	b.n	800fcc6 <__hexdig_fun+0xa>
 800fce2:	2000      	movs	r0, #0
 800fce4:	4770      	bx	lr
	...

0800fce8 <__gethex>:
 800fce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcec:	4617      	mov	r7, r2
 800fcee:	680a      	ldr	r2, [r1, #0]
 800fcf0:	b085      	sub	sp, #20
 800fcf2:	f102 0b02 	add.w	fp, r2, #2
 800fcf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fcfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fcfe:	4681      	mov	r9, r0
 800fd00:	468a      	mov	sl, r1
 800fd02:	9302      	str	r3, [sp, #8]
 800fd04:	32fe      	adds	r2, #254	; 0xfe
 800fd06:	eb02 030b 	add.w	r3, r2, fp
 800fd0a:	46d8      	mov	r8, fp
 800fd0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	2830      	cmp	r0, #48	; 0x30
 800fd14:	d0f7      	beq.n	800fd06 <__gethex+0x1e>
 800fd16:	f7ff ffd1 	bl	800fcbc <__hexdig_fun>
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	d138      	bne.n	800fd92 <__gethex+0xaa>
 800fd20:	49a7      	ldr	r1, [pc, #668]	; (800ffc0 <__gethex+0x2d8>)
 800fd22:	2201      	movs	r2, #1
 800fd24:	4640      	mov	r0, r8
 800fd26:	f7fc fccb 	bl	800c6c0 <strncmp>
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d169      	bne.n	800fe04 <__gethex+0x11c>
 800fd30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fd34:	465d      	mov	r5, fp
 800fd36:	f7ff ffc1 	bl	800fcbc <__hexdig_fun>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d064      	beq.n	800fe08 <__gethex+0x120>
 800fd3e:	465a      	mov	r2, fp
 800fd40:	7810      	ldrb	r0, [r2, #0]
 800fd42:	2830      	cmp	r0, #48	; 0x30
 800fd44:	4690      	mov	r8, r2
 800fd46:	f102 0201 	add.w	r2, r2, #1
 800fd4a:	d0f9      	beq.n	800fd40 <__gethex+0x58>
 800fd4c:	f7ff ffb6 	bl	800fcbc <__hexdig_fun>
 800fd50:	2301      	movs	r3, #1
 800fd52:	fab0 f480 	clz	r4, r0
 800fd56:	0964      	lsrs	r4, r4, #5
 800fd58:	465e      	mov	r6, fp
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	4642      	mov	r2, r8
 800fd5e:	4615      	mov	r5, r2
 800fd60:	3201      	adds	r2, #1
 800fd62:	7828      	ldrb	r0, [r5, #0]
 800fd64:	f7ff ffaa 	bl	800fcbc <__hexdig_fun>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d1f8      	bne.n	800fd5e <__gethex+0x76>
 800fd6c:	4994      	ldr	r1, [pc, #592]	; (800ffc0 <__gethex+0x2d8>)
 800fd6e:	2201      	movs	r2, #1
 800fd70:	4628      	mov	r0, r5
 800fd72:	f7fc fca5 	bl	800c6c0 <strncmp>
 800fd76:	b978      	cbnz	r0, 800fd98 <__gethex+0xb0>
 800fd78:	b946      	cbnz	r6, 800fd8c <__gethex+0xa4>
 800fd7a:	1c6e      	adds	r6, r5, #1
 800fd7c:	4632      	mov	r2, r6
 800fd7e:	4615      	mov	r5, r2
 800fd80:	3201      	adds	r2, #1
 800fd82:	7828      	ldrb	r0, [r5, #0]
 800fd84:	f7ff ff9a 	bl	800fcbc <__hexdig_fun>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d1f8      	bne.n	800fd7e <__gethex+0x96>
 800fd8c:	1b73      	subs	r3, r6, r5
 800fd8e:	009e      	lsls	r6, r3, #2
 800fd90:	e004      	b.n	800fd9c <__gethex+0xb4>
 800fd92:	2400      	movs	r4, #0
 800fd94:	4626      	mov	r6, r4
 800fd96:	e7e1      	b.n	800fd5c <__gethex+0x74>
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	d1f7      	bne.n	800fd8c <__gethex+0xa4>
 800fd9c:	782b      	ldrb	r3, [r5, #0]
 800fd9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fda2:	2b50      	cmp	r3, #80	; 0x50
 800fda4:	d13d      	bne.n	800fe22 <__gethex+0x13a>
 800fda6:	786b      	ldrb	r3, [r5, #1]
 800fda8:	2b2b      	cmp	r3, #43	; 0x2b
 800fdaa:	d02f      	beq.n	800fe0c <__gethex+0x124>
 800fdac:	2b2d      	cmp	r3, #45	; 0x2d
 800fdae:	d031      	beq.n	800fe14 <__gethex+0x12c>
 800fdb0:	1c69      	adds	r1, r5, #1
 800fdb2:	f04f 0b00 	mov.w	fp, #0
 800fdb6:	7808      	ldrb	r0, [r1, #0]
 800fdb8:	f7ff ff80 	bl	800fcbc <__hexdig_fun>
 800fdbc:	1e42      	subs	r2, r0, #1
 800fdbe:	b2d2      	uxtb	r2, r2
 800fdc0:	2a18      	cmp	r2, #24
 800fdc2:	d82e      	bhi.n	800fe22 <__gethex+0x13a>
 800fdc4:	f1a0 0210 	sub.w	r2, r0, #16
 800fdc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdcc:	f7ff ff76 	bl	800fcbc <__hexdig_fun>
 800fdd0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800fdd4:	fa5f fc8c 	uxtb.w	ip, ip
 800fdd8:	f1bc 0f18 	cmp.w	ip, #24
 800fddc:	d91d      	bls.n	800fe1a <__gethex+0x132>
 800fdde:	f1bb 0f00 	cmp.w	fp, #0
 800fde2:	d000      	beq.n	800fde6 <__gethex+0xfe>
 800fde4:	4252      	negs	r2, r2
 800fde6:	4416      	add	r6, r2
 800fde8:	f8ca 1000 	str.w	r1, [sl]
 800fdec:	b1dc      	cbz	r4, 800fe26 <__gethex+0x13e>
 800fdee:	9b01      	ldr	r3, [sp, #4]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	bf14      	ite	ne
 800fdf4:	f04f 0800 	movne.w	r8, #0
 800fdf8:	f04f 0806 	moveq.w	r8, #6
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	b005      	add	sp, #20
 800fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe04:	4645      	mov	r5, r8
 800fe06:	4626      	mov	r6, r4
 800fe08:	2401      	movs	r4, #1
 800fe0a:	e7c7      	b.n	800fd9c <__gethex+0xb4>
 800fe0c:	f04f 0b00 	mov.w	fp, #0
 800fe10:	1ca9      	adds	r1, r5, #2
 800fe12:	e7d0      	b.n	800fdb6 <__gethex+0xce>
 800fe14:	f04f 0b01 	mov.w	fp, #1
 800fe18:	e7fa      	b.n	800fe10 <__gethex+0x128>
 800fe1a:	230a      	movs	r3, #10
 800fe1c:	fb03 0002 	mla	r0, r3, r2, r0
 800fe20:	e7d0      	b.n	800fdc4 <__gethex+0xdc>
 800fe22:	4629      	mov	r1, r5
 800fe24:	e7e0      	b.n	800fde8 <__gethex+0x100>
 800fe26:	eba5 0308 	sub.w	r3, r5, r8
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	2b07      	cmp	r3, #7
 800fe30:	dc0a      	bgt.n	800fe48 <__gethex+0x160>
 800fe32:	4648      	mov	r0, r9
 800fe34:	f7fd fc5e 	bl	800d6f4 <_Balloc>
 800fe38:	4604      	mov	r4, r0
 800fe3a:	b940      	cbnz	r0, 800fe4e <__gethex+0x166>
 800fe3c:	4b61      	ldr	r3, [pc, #388]	; (800ffc4 <__gethex+0x2dc>)
 800fe3e:	4602      	mov	r2, r0
 800fe40:	21e4      	movs	r1, #228	; 0xe4
 800fe42:	4861      	ldr	r0, [pc, #388]	; (800ffc8 <__gethex+0x2e0>)
 800fe44:	f7ff feb4 	bl	800fbb0 <__assert_func>
 800fe48:	3101      	adds	r1, #1
 800fe4a:	105b      	asrs	r3, r3, #1
 800fe4c:	e7ef      	b.n	800fe2e <__gethex+0x146>
 800fe4e:	f100 0a14 	add.w	sl, r0, #20
 800fe52:	2300      	movs	r3, #0
 800fe54:	495a      	ldr	r1, [pc, #360]	; (800ffc0 <__gethex+0x2d8>)
 800fe56:	f8cd a004 	str.w	sl, [sp, #4]
 800fe5a:	469b      	mov	fp, r3
 800fe5c:	45a8      	cmp	r8, r5
 800fe5e:	d342      	bcc.n	800fee6 <__gethex+0x1fe>
 800fe60:	9801      	ldr	r0, [sp, #4]
 800fe62:	f840 bb04 	str.w	fp, [r0], #4
 800fe66:	eba0 000a 	sub.w	r0, r0, sl
 800fe6a:	1080      	asrs	r0, r0, #2
 800fe6c:	6120      	str	r0, [r4, #16]
 800fe6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fe72:	4658      	mov	r0, fp
 800fe74:	f7fd fd30 	bl	800d8d8 <__hi0bits>
 800fe78:	683d      	ldr	r5, [r7, #0]
 800fe7a:	eba8 0000 	sub.w	r0, r8, r0
 800fe7e:	42a8      	cmp	r0, r5
 800fe80:	dd59      	ble.n	800ff36 <__gethex+0x24e>
 800fe82:	eba0 0805 	sub.w	r8, r0, r5
 800fe86:	4641      	mov	r1, r8
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f7fe f8bf 	bl	800e00c <__any_on>
 800fe8e:	4683      	mov	fp, r0
 800fe90:	b1b8      	cbz	r0, 800fec2 <__gethex+0x1da>
 800fe92:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800fe96:	1159      	asrs	r1, r3, #5
 800fe98:	f003 021f 	and.w	r2, r3, #31
 800fe9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fea0:	f04f 0b01 	mov.w	fp, #1
 800fea4:	fa0b f202 	lsl.w	r2, fp, r2
 800fea8:	420a      	tst	r2, r1
 800feaa:	d00a      	beq.n	800fec2 <__gethex+0x1da>
 800feac:	455b      	cmp	r3, fp
 800feae:	dd06      	ble.n	800febe <__gethex+0x1d6>
 800feb0:	f1a8 0102 	sub.w	r1, r8, #2
 800feb4:	4620      	mov	r0, r4
 800feb6:	f7fe f8a9 	bl	800e00c <__any_on>
 800feba:	2800      	cmp	r0, #0
 800febc:	d138      	bne.n	800ff30 <__gethex+0x248>
 800febe:	f04f 0b02 	mov.w	fp, #2
 800fec2:	4641      	mov	r1, r8
 800fec4:	4620      	mov	r0, r4
 800fec6:	f7ff fea7 	bl	800fc18 <rshift>
 800feca:	4446      	add	r6, r8
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	42b3      	cmp	r3, r6
 800fed0:	da41      	bge.n	800ff56 <__gethex+0x26e>
 800fed2:	4621      	mov	r1, r4
 800fed4:	4648      	mov	r0, r9
 800fed6:	f7fd fc4d 	bl	800d774 <_Bfree>
 800feda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fedc:	2300      	movs	r3, #0
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fee4:	e78a      	b.n	800fdfc <__gethex+0x114>
 800fee6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800feea:	2a2e      	cmp	r2, #46	; 0x2e
 800feec:	d014      	beq.n	800ff18 <__gethex+0x230>
 800feee:	2b20      	cmp	r3, #32
 800fef0:	d106      	bne.n	800ff00 <__gethex+0x218>
 800fef2:	9b01      	ldr	r3, [sp, #4]
 800fef4:	f843 bb04 	str.w	fp, [r3], #4
 800fef8:	f04f 0b00 	mov.w	fp, #0
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	465b      	mov	r3, fp
 800ff00:	7828      	ldrb	r0, [r5, #0]
 800ff02:	9303      	str	r3, [sp, #12]
 800ff04:	f7ff feda 	bl	800fcbc <__hexdig_fun>
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	f000 000f 	and.w	r0, r0, #15
 800ff0e:	4098      	lsls	r0, r3
 800ff10:	ea4b 0b00 	orr.w	fp, fp, r0
 800ff14:	3304      	adds	r3, #4
 800ff16:	e7a1      	b.n	800fe5c <__gethex+0x174>
 800ff18:	45a8      	cmp	r8, r5
 800ff1a:	d8e8      	bhi.n	800feee <__gethex+0x206>
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	4628      	mov	r0, r5
 800ff20:	9303      	str	r3, [sp, #12]
 800ff22:	f7fc fbcd 	bl	800c6c0 <strncmp>
 800ff26:	4926      	ldr	r1, [pc, #152]	; (800ffc0 <__gethex+0x2d8>)
 800ff28:	9b03      	ldr	r3, [sp, #12]
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d1df      	bne.n	800feee <__gethex+0x206>
 800ff2e:	e795      	b.n	800fe5c <__gethex+0x174>
 800ff30:	f04f 0b03 	mov.w	fp, #3
 800ff34:	e7c5      	b.n	800fec2 <__gethex+0x1da>
 800ff36:	da0b      	bge.n	800ff50 <__gethex+0x268>
 800ff38:	eba5 0800 	sub.w	r8, r5, r0
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	4642      	mov	r2, r8
 800ff40:	4648      	mov	r0, r9
 800ff42:	f7fd fe31 	bl	800dba8 <__lshift>
 800ff46:	eba6 0608 	sub.w	r6, r6, r8
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	f100 0a14 	add.w	sl, r0, #20
 800ff50:	f04f 0b00 	mov.w	fp, #0
 800ff54:	e7ba      	b.n	800fecc <__gethex+0x1e4>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	42b3      	cmp	r3, r6
 800ff5a:	dd73      	ble.n	8010044 <__gethex+0x35c>
 800ff5c:	1b9e      	subs	r6, r3, r6
 800ff5e:	42b5      	cmp	r5, r6
 800ff60:	dc34      	bgt.n	800ffcc <__gethex+0x2e4>
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d023      	beq.n	800ffb0 <__gethex+0x2c8>
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d025      	beq.n	800ffb8 <__gethex+0x2d0>
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d115      	bne.n	800ff9c <__gethex+0x2b4>
 800ff70:	42b5      	cmp	r5, r6
 800ff72:	d113      	bne.n	800ff9c <__gethex+0x2b4>
 800ff74:	2d01      	cmp	r5, #1
 800ff76:	d10b      	bne.n	800ff90 <__gethex+0x2a8>
 800ff78:	9a02      	ldr	r2, [sp, #8]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6013      	str	r3, [r2, #0]
 800ff7e:	2301      	movs	r3, #1
 800ff80:	6123      	str	r3, [r4, #16]
 800ff82:	f8ca 3000 	str.w	r3, [sl]
 800ff86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ff8c:	601c      	str	r4, [r3, #0]
 800ff8e:	e735      	b.n	800fdfc <__gethex+0x114>
 800ff90:	1e69      	subs	r1, r5, #1
 800ff92:	4620      	mov	r0, r4
 800ff94:	f7fe f83a 	bl	800e00c <__any_on>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d1ed      	bne.n	800ff78 <__gethex+0x290>
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	4648      	mov	r0, r9
 800ffa0:	f7fd fbe8 	bl	800d774 <_Bfree>
 800ffa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ffae:	e725      	b.n	800fdfc <__gethex+0x114>
 800ffb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1f2      	bne.n	800ff9c <__gethex+0x2b4>
 800ffb6:	e7df      	b.n	800ff78 <__gethex+0x290>
 800ffb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1dc      	bne.n	800ff78 <__gethex+0x290>
 800ffbe:	e7ed      	b.n	800ff9c <__gethex+0x2b4>
 800ffc0:	0802968c 	.word	0x0802968c
 800ffc4:	08029520 	.word	0x08029520
 800ffc8:	08029851 	.word	0x08029851
 800ffcc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ffd0:	f1bb 0f00 	cmp.w	fp, #0
 800ffd4:	d133      	bne.n	801003e <__gethex+0x356>
 800ffd6:	f1b8 0f00 	cmp.w	r8, #0
 800ffda:	d004      	beq.n	800ffe6 <__gethex+0x2fe>
 800ffdc:	4641      	mov	r1, r8
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f7fe f814 	bl	800e00c <__any_on>
 800ffe4:	4683      	mov	fp, r0
 800ffe6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ffea:	2301      	movs	r3, #1
 800ffec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fff0:	f008 081f 	and.w	r8, r8, #31
 800fff4:	fa03 f308 	lsl.w	r3, r3, r8
 800fff8:	4213      	tst	r3, r2
 800fffa:	4631      	mov	r1, r6
 800fffc:	4620      	mov	r0, r4
 800fffe:	bf18      	it	ne
 8010000:	f04b 0b02 	orrne.w	fp, fp, #2
 8010004:	1bad      	subs	r5, r5, r6
 8010006:	f7ff fe07 	bl	800fc18 <rshift>
 801000a:	687e      	ldr	r6, [r7, #4]
 801000c:	f04f 0802 	mov.w	r8, #2
 8010010:	f1bb 0f00 	cmp.w	fp, #0
 8010014:	d04a      	beq.n	80100ac <__gethex+0x3c4>
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2b02      	cmp	r3, #2
 801001a:	d016      	beq.n	801004a <__gethex+0x362>
 801001c:	2b03      	cmp	r3, #3
 801001e:	d018      	beq.n	8010052 <__gethex+0x36a>
 8010020:	2b01      	cmp	r3, #1
 8010022:	d109      	bne.n	8010038 <__gethex+0x350>
 8010024:	f01b 0f02 	tst.w	fp, #2
 8010028:	d006      	beq.n	8010038 <__gethex+0x350>
 801002a:	f8da 3000 	ldr.w	r3, [sl]
 801002e:	ea4b 0b03 	orr.w	fp, fp, r3
 8010032:	f01b 0f01 	tst.w	fp, #1
 8010036:	d10f      	bne.n	8010058 <__gethex+0x370>
 8010038:	f048 0810 	orr.w	r8, r8, #16
 801003c:	e036      	b.n	80100ac <__gethex+0x3c4>
 801003e:	f04f 0b01 	mov.w	fp, #1
 8010042:	e7d0      	b.n	800ffe6 <__gethex+0x2fe>
 8010044:	f04f 0801 	mov.w	r8, #1
 8010048:	e7e2      	b.n	8010010 <__gethex+0x328>
 801004a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801004c:	f1c3 0301 	rsb	r3, r3, #1
 8010050:	930f      	str	r3, [sp, #60]	; 0x3c
 8010052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0ef      	beq.n	8010038 <__gethex+0x350>
 8010058:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801005c:	f104 0214 	add.w	r2, r4, #20
 8010060:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010064:	9301      	str	r3, [sp, #4]
 8010066:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801006a:	2300      	movs	r3, #0
 801006c:	4694      	mov	ip, r2
 801006e:	f852 1b04 	ldr.w	r1, [r2], #4
 8010072:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8010076:	d01e      	beq.n	80100b6 <__gethex+0x3ce>
 8010078:	3101      	adds	r1, #1
 801007a:	f8cc 1000 	str.w	r1, [ip]
 801007e:	f1b8 0f02 	cmp.w	r8, #2
 8010082:	f104 0214 	add.w	r2, r4, #20
 8010086:	d13d      	bne.n	8010104 <__gethex+0x41c>
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	3b01      	subs	r3, #1
 801008c:	42ab      	cmp	r3, r5
 801008e:	d10b      	bne.n	80100a8 <__gethex+0x3c0>
 8010090:	1169      	asrs	r1, r5, #5
 8010092:	2301      	movs	r3, #1
 8010094:	f005 051f 	and.w	r5, r5, #31
 8010098:	fa03 f505 	lsl.w	r5, r3, r5
 801009c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100a0:	421d      	tst	r5, r3
 80100a2:	bf18      	it	ne
 80100a4:	f04f 0801 	movne.w	r8, #1
 80100a8:	f048 0820 	orr.w	r8, r8, #32
 80100ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100ae:	601c      	str	r4, [r3, #0]
 80100b0:	9b02      	ldr	r3, [sp, #8]
 80100b2:	601e      	str	r6, [r3, #0]
 80100b4:	e6a2      	b.n	800fdfc <__gethex+0x114>
 80100b6:	4290      	cmp	r0, r2
 80100b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80100bc:	d8d6      	bhi.n	801006c <__gethex+0x384>
 80100be:	68a2      	ldr	r2, [r4, #8]
 80100c0:	4593      	cmp	fp, r2
 80100c2:	db17      	blt.n	80100f4 <__gethex+0x40c>
 80100c4:	6861      	ldr	r1, [r4, #4]
 80100c6:	4648      	mov	r0, r9
 80100c8:	3101      	adds	r1, #1
 80100ca:	f7fd fb13 	bl	800d6f4 <_Balloc>
 80100ce:	4682      	mov	sl, r0
 80100d0:	b918      	cbnz	r0, 80100da <__gethex+0x3f2>
 80100d2:	4b1b      	ldr	r3, [pc, #108]	; (8010140 <__gethex+0x458>)
 80100d4:	4602      	mov	r2, r0
 80100d6:	2184      	movs	r1, #132	; 0x84
 80100d8:	e6b3      	b.n	800fe42 <__gethex+0x15a>
 80100da:	6922      	ldr	r2, [r4, #16]
 80100dc:	3202      	adds	r2, #2
 80100de:	f104 010c 	add.w	r1, r4, #12
 80100e2:	0092      	lsls	r2, r2, #2
 80100e4:	300c      	adds	r0, #12
 80100e6:	f7fc fb74 	bl	800c7d2 <memcpy>
 80100ea:	4621      	mov	r1, r4
 80100ec:	4648      	mov	r0, r9
 80100ee:	f7fd fb41 	bl	800d774 <_Bfree>
 80100f2:	4654      	mov	r4, sl
 80100f4:	6922      	ldr	r2, [r4, #16]
 80100f6:	1c51      	adds	r1, r2, #1
 80100f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80100fc:	6121      	str	r1, [r4, #16]
 80100fe:	2101      	movs	r1, #1
 8010100:	6151      	str	r1, [r2, #20]
 8010102:	e7bc      	b.n	801007e <__gethex+0x396>
 8010104:	6921      	ldr	r1, [r4, #16]
 8010106:	4559      	cmp	r1, fp
 8010108:	dd0b      	ble.n	8010122 <__gethex+0x43a>
 801010a:	2101      	movs	r1, #1
 801010c:	4620      	mov	r0, r4
 801010e:	f7ff fd83 	bl	800fc18 <rshift>
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	3601      	adds	r6, #1
 8010116:	42b3      	cmp	r3, r6
 8010118:	f6ff aedb 	blt.w	800fed2 <__gethex+0x1ea>
 801011c:	f04f 0801 	mov.w	r8, #1
 8010120:	e7c2      	b.n	80100a8 <__gethex+0x3c0>
 8010122:	f015 051f 	ands.w	r5, r5, #31
 8010126:	d0f9      	beq.n	801011c <__gethex+0x434>
 8010128:	9b01      	ldr	r3, [sp, #4]
 801012a:	441a      	add	r2, r3
 801012c:	f1c5 0520 	rsb	r5, r5, #32
 8010130:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010134:	f7fd fbd0 	bl	800d8d8 <__hi0bits>
 8010138:	42a8      	cmp	r0, r5
 801013a:	dbe6      	blt.n	801010a <__gethex+0x422>
 801013c:	e7ee      	b.n	801011c <__gethex+0x434>
 801013e:	bf00      	nop
 8010140:	08029520 	.word	0x08029520

08010144 <L_shift>:
 8010144:	f1c2 0208 	rsb	r2, r2, #8
 8010148:	0092      	lsls	r2, r2, #2
 801014a:	b570      	push	{r4, r5, r6, lr}
 801014c:	f1c2 0620 	rsb	r6, r2, #32
 8010150:	6843      	ldr	r3, [r0, #4]
 8010152:	6804      	ldr	r4, [r0, #0]
 8010154:	fa03 f506 	lsl.w	r5, r3, r6
 8010158:	432c      	orrs	r4, r5
 801015a:	40d3      	lsrs	r3, r2
 801015c:	6004      	str	r4, [r0, #0]
 801015e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010162:	4288      	cmp	r0, r1
 8010164:	d3f4      	bcc.n	8010150 <L_shift+0xc>
 8010166:	bd70      	pop	{r4, r5, r6, pc}

08010168 <__match>:
 8010168:	b530      	push	{r4, r5, lr}
 801016a:	6803      	ldr	r3, [r0, #0]
 801016c:	3301      	adds	r3, #1
 801016e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010172:	b914      	cbnz	r4, 801017a <__match+0x12>
 8010174:	6003      	str	r3, [r0, #0]
 8010176:	2001      	movs	r0, #1
 8010178:	bd30      	pop	{r4, r5, pc}
 801017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801017e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010182:	2d19      	cmp	r5, #25
 8010184:	bf98      	it	ls
 8010186:	3220      	addls	r2, #32
 8010188:	42a2      	cmp	r2, r4
 801018a:	d0f0      	beq.n	801016e <__match+0x6>
 801018c:	2000      	movs	r0, #0
 801018e:	e7f3      	b.n	8010178 <__match+0x10>

08010190 <__hexnan>:
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	680b      	ldr	r3, [r1, #0]
 8010196:	6801      	ldr	r1, [r0, #0]
 8010198:	115e      	asrs	r6, r3, #5
 801019a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801019e:	f013 031f 	ands.w	r3, r3, #31
 80101a2:	b087      	sub	sp, #28
 80101a4:	bf18      	it	ne
 80101a6:	3604      	addne	r6, #4
 80101a8:	2500      	movs	r5, #0
 80101aa:	1f37      	subs	r7, r6, #4
 80101ac:	4682      	mov	sl, r0
 80101ae:	4690      	mov	r8, r2
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80101b6:	46b9      	mov	r9, r7
 80101b8:	463c      	mov	r4, r7
 80101ba:	9502      	str	r5, [sp, #8]
 80101bc:	46ab      	mov	fp, r5
 80101be:	784a      	ldrb	r2, [r1, #1]
 80101c0:	1c4b      	adds	r3, r1, #1
 80101c2:	9303      	str	r3, [sp, #12]
 80101c4:	b342      	cbz	r2, 8010218 <__hexnan+0x88>
 80101c6:	4610      	mov	r0, r2
 80101c8:	9105      	str	r1, [sp, #20]
 80101ca:	9204      	str	r2, [sp, #16]
 80101cc:	f7ff fd76 	bl	800fcbc <__hexdig_fun>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d14f      	bne.n	8010274 <__hexnan+0xe4>
 80101d4:	9a04      	ldr	r2, [sp, #16]
 80101d6:	9905      	ldr	r1, [sp, #20]
 80101d8:	2a20      	cmp	r2, #32
 80101da:	d818      	bhi.n	801020e <__hexnan+0x7e>
 80101dc:	9b02      	ldr	r3, [sp, #8]
 80101de:	459b      	cmp	fp, r3
 80101e0:	dd13      	ble.n	801020a <__hexnan+0x7a>
 80101e2:	454c      	cmp	r4, r9
 80101e4:	d206      	bcs.n	80101f4 <__hexnan+0x64>
 80101e6:	2d07      	cmp	r5, #7
 80101e8:	dc04      	bgt.n	80101f4 <__hexnan+0x64>
 80101ea:	462a      	mov	r2, r5
 80101ec:	4649      	mov	r1, r9
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7ff ffa8 	bl	8010144 <L_shift>
 80101f4:	4544      	cmp	r4, r8
 80101f6:	d950      	bls.n	801029a <__hexnan+0x10a>
 80101f8:	2300      	movs	r3, #0
 80101fa:	f1a4 0904 	sub.w	r9, r4, #4
 80101fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010202:	f8cd b008 	str.w	fp, [sp, #8]
 8010206:	464c      	mov	r4, r9
 8010208:	461d      	mov	r5, r3
 801020a:	9903      	ldr	r1, [sp, #12]
 801020c:	e7d7      	b.n	80101be <__hexnan+0x2e>
 801020e:	2a29      	cmp	r2, #41	; 0x29
 8010210:	d155      	bne.n	80102be <__hexnan+0x12e>
 8010212:	3102      	adds	r1, #2
 8010214:	f8ca 1000 	str.w	r1, [sl]
 8010218:	f1bb 0f00 	cmp.w	fp, #0
 801021c:	d04f      	beq.n	80102be <__hexnan+0x12e>
 801021e:	454c      	cmp	r4, r9
 8010220:	d206      	bcs.n	8010230 <__hexnan+0xa0>
 8010222:	2d07      	cmp	r5, #7
 8010224:	dc04      	bgt.n	8010230 <__hexnan+0xa0>
 8010226:	462a      	mov	r2, r5
 8010228:	4649      	mov	r1, r9
 801022a:	4620      	mov	r0, r4
 801022c:	f7ff ff8a 	bl	8010144 <L_shift>
 8010230:	4544      	cmp	r4, r8
 8010232:	d934      	bls.n	801029e <__hexnan+0x10e>
 8010234:	f1a8 0204 	sub.w	r2, r8, #4
 8010238:	4623      	mov	r3, r4
 801023a:	f853 1b04 	ldr.w	r1, [r3], #4
 801023e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010242:	429f      	cmp	r7, r3
 8010244:	d2f9      	bcs.n	801023a <__hexnan+0xaa>
 8010246:	1b3b      	subs	r3, r7, r4
 8010248:	f023 0303 	bic.w	r3, r3, #3
 801024c:	3304      	adds	r3, #4
 801024e:	3e03      	subs	r6, #3
 8010250:	3401      	adds	r4, #1
 8010252:	42a6      	cmp	r6, r4
 8010254:	bf38      	it	cc
 8010256:	2304      	movcc	r3, #4
 8010258:	4443      	add	r3, r8
 801025a:	2200      	movs	r2, #0
 801025c:	f843 2b04 	str.w	r2, [r3], #4
 8010260:	429f      	cmp	r7, r3
 8010262:	d2fb      	bcs.n	801025c <__hexnan+0xcc>
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	b91b      	cbnz	r3, 8010270 <__hexnan+0xe0>
 8010268:	4547      	cmp	r7, r8
 801026a:	d126      	bne.n	80102ba <__hexnan+0x12a>
 801026c:	2301      	movs	r3, #1
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	2005      	movs	r0, #5
 8010272:	e025      	b.n	80102c0 <__hexnan+0x130>
 8010274:	3501      	adds	r5, #1
 8010276:	2d08      	cmp	r5, #8
 8010278:	f10b 0b01 	add.w	fp, fp, #1
 801027c:	dd06      	ble.n	801028c <__hexnan+0xfc>
 801027e:	4544      	cmp	r4, r8
 8010280:	d9c3      	bls.n	801020a <__hexnan+0x7a>
 8010282:	2300      	movs	r3, #0
 8010284:	f844 3c04 	str.w	r3, [r4, #-4]
 8010288:	2501      	movs	r5, #1
 801028a:	3c04      	subs	r4, #4
 801028c:	6822      	ldr	r2, [r4, #0]
 801028e:	f000 000f 	and.w	r0, r0, #15
 8010292:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010296:	6020      	str	r0, [r4, #0]
 8010298:	e7b7      	b.n	801020a <__hexnan+0x7a>
 801029a:	2508      	movs	r5, #8
 801029c:	e7b5      	b.n	801020a <__hexnan+0x7a>
 801029e:	9b01      	ldr	r3, [sp, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d0df      	beq.n	8010264 <__hexnan+0xd4>
 80102a4:	f1c3 0320 	rsb	r3, r3, #32
 80102a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102ac:	40da      	lsrs	r2, r3
 80102ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80102b2:	4013      	ands	r3, r2
 80102b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80102b8:	e7d4      	b.n	8010264 <__hexnan+0xd4>
 80102ba:	3f04      	subs	r7, #4
 80102bc:	e7d2      	b.n	8010264 <__hexnan+0xd4>
 80102be:	2004      	movs	r0, #4
 80102c0:	b007      	add	sp, #28
 80102c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102c6 <__ascii_mbtowc>:
 80102c6:	b082      	sub	sp, #8
 80102c8:	b901      	cbnz	r1, 80102cc <__ascii_mbtowc+0x6>
 80102ca:	a901      	add	r1, sp, #4
 80102cc:	b142      	cbz	r2, 80102e0 <__ascii_mbtowc+0x1a>
 80102ce:	b14b      	cbz	r3, 80102e4 <__ascii_mbtowc+0x1e>
 80102d0:	7813      	ldrb	r3, [r2, #0]
 80102d2:	600b      	str	r3, [r1, #0]
 80102d4:	7812      	ldrb	r2, [r2, #0]
 80102d6:	1e10      	subs	r0, r2, #0
 80102d8:	bf18      	it	ne
 80102da:	2001      	movne	r0, #1
 80102dc:	b002      	add	sp, #8
 80102de:	4770      	bx	lr
 80102e0:	4610      	mov	r0, r2
 80102e2:	e7fb      	b.n	80102dc <__ascii_mbtowc+0x16>
 80102e4:	f06f 0001 	mvn.w	r0, #1
 80102e8:	e7f8      	b.n	80102dc <__ascii_mbtowc+0x16>

080102ea <_realloc_r>:
 80102ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ee:	4680      	mov	r8, r0
 80102f0:	4614      	mov	r4, r2
 80102f2:	460e      	mov	r6, r1
 80102f4:	b921      	cbnz	r1, 8010300 <_realloc_r+0x16>
 80102f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102fa:	4611      	mov	r1, r2
 80102fc:	f7fd b96e 	b.w	800d5dc <_malloc_r>
 8010300:	b92a      	cbnz	r2, 801030e <_realloc_r+0x24>
 8010302:	f7fd f8f7 	bl	800d4f4 <_free_r>
 8010306:	4625      	mov	r5, r4
 8010308:	4628      	mov	r0, r5
 801030a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801030e:	f000 f8b6 	bl	801047e <_malloc_usable_size_r>
 8010312:	4284      	cmp	r4, r0
 8010314:	4607      	mov	r7, r0
 8010316:	d802      	bhi.n	801031e <_realloc_r+0x34>
 8010318:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801031c:	d812      	bhi.n	8010344 <_realloc_r+0x5a>
 801031e:	4621      	mov	r1, r4
 8010320:	4640      	mov	r0, r8
 8010322:	f7fd f95b 	bl	800d5dc <_malloc_r>
 8010326:	4605      	mov	r5, r0
 8010328:	2800      	cmp	r0, #0
 801032a:	d0ed      	beq.n	8010308 <_realloc_r+0x1e>
 801032c:	42bc      	cmp	r4, r7
 801032e:	4622      	mov	r2, r4
 8010330:	4631      	mov	r1, r6
 8010332:	bf28      	it	cs
 8010334:	463a      	movcs	r2, r7
 8010336:	f7fc fa4c 	bl	800c7d2 <memcpy>
 801033a:	4631      	mov	r1, r6
 801033c:	4640      	mov	r0, r8
 801033e:	f7fd f8d9 	bl	800d4f4 <_free_r>
 8010342:	e7e1      	b.n	8010308 <_realloc_r+0x1e>
 8010344:	4635      	mov	r5, r6
 8010346:	e7df      	b.n	8010308 <_realloc_r+0x1e>

08010348 <_strtoul_l.constprop.0>:
 8010348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801034c:	4f36      	ldr	r7, [pc, #216]	; (8010428 <_strtoul_l.constprop.0+0xe0>)
 801034e:	4686      	mov	lr, r0
 8010350:	460d      	mov	r5, r1
 8010352:	4628      	mov	r0, r5
 8010354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010358:	5d3e      	ldrb	r6, [r7, r4]
 801035a:	f016 0608 	ands.w	r6, r6, #8
 801035e:	d1f8      	bne.n	8010352 <_strtoul_l.constprop.0+0xa>
 8010360:	2c2d      	cmp	r4, #45	; 0x2d
 8010362:	d130      	bne.n	80103c6 <_strtoul_l.constprop.0+0x7e>
 8010364:	782c      	ldrb	r4, [r5, #0]
 8010366:	2601      	movs	r6, #1
 8010368:	1c85      	adds	r5, r0, #2
 801036a:	2b00      	cmp	r3, #0
 801036c:	d057      	beq.n	801041e <_strtoul_l.constprop.0+0xd6>
 801036e:	2b10      	cmp	r3, #16
 8010370:	d109      	bne.n	8010386 <_strtoul_l.constprop.0+0x3e>
 8010372:	2c30      	cmp	r4, #48	; 0x30
 8010374:	d107      	bne.n	8010386 <_strtoul_l.constprop.0+0x3e>
 8010376:	7828      	ldrb	r0, [r5, #0]
 8010378:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801037c:	2858      	cmp	r0, #88	; 0x58
 801037e:	d149      	bne.n	8010414 <_strtoul_l.constprop.0+0xcc>
 8010380:	786c      	ldrb	r4, [r5, #1]
 8010382:	2310      	movs	r3, #16
 8010384:	3502      	adds	r5, #2
 8010386:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801038a:	2700      	movs	r7, #0
 801038c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010390:	fb03 f908 	mul.w	r9, r3, r8
 8010394:	ea6f 0909 	mvn.w	r9, r9
 8010398:	4638      	mov	r0, r7
 801039a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801039e:	f1bc 0f09 	cmp.w	ip, #9
 80103a2:	d815      	bhi.n	80103d0 <_strtoul_l.constprop.0+0x88>
 80103a4:	4664      	mov	r4, ip
 80103a6:	42a3      	cmp	r3, r4
 80103a8:	dd23      	ble.n	80103f2 <_strtoul_l.constprop.0+0xaa>
 80103aa:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80103ae:	d007      	beq.n	80103c0 <_strtoul_l.constprop.0+0x78>
 80103b0:	4580      	cmp	r8, r0
 80103b2:	d31b      	bcc.n	80103ec <_strtoul_l.constprop.0+0xa4>
 80103b4:	d101      	bne.n	80103ba <_strtoul_l.constprop.0+0x72>
 80103b6:	45a1      	cmp	r9, r4
 80103b8:	db18      	blt.n	80103ec <_strtoul_l.constprop.0+0xa4>
 80103ba:	fb00 4003 	mla	r0, r0, r3, r4
 80103be:	2701      	movs	r7, #1
 80103c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103c4:	e7e9      	b.n	801039a <_strtoul_l.constprop.0+0x52>
 80103c6:	2c2b      	cmp	r4, #43	; 0x2b
 80103c8:	bf04      	itt	eq
 80103ca:	782c      	ldrbeq	r4, [r5, #0]
 80103cc:	1c85      	addeq	r5, r0, #2
 80103ce:	e7cc      	b.n	801036a <_strtoul_l.constprop.0+0x22>
 80103d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80103d4:	f1bc 0f19 	cmp.w	ip, #25
 80103d8:	d801      	bhi.n	80103de <_strtoul_l.constprop.0+0x96>
 80103da:	3c37      	subs	r4, #55	; 0x37
 80103dc:	e7e3      	b.n	80103a6 <_strtoul_l.constprop.0+0x5e>
 80103de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80103e2:	f1bc 0f19 	cmp.w	ip, #25
 80103e6:	d804      	bhi.n	80103f2 <_strtoul_l.constprop.0+0xaa>
 80103e8:	3c57      	subs	r4, #87	; 0x57
 80103ea:	e7dc      	b.n	80103a6 <_strtoul_l.constprop.0+0x5e>
 80103ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80103f0:	e7e6      	b.n	80103c0 <_strtoul_l.constprop.0+0x78>
 80103f2:	1c7b      	adds	r3, r7, #1
 80103f4:	d106      	bne.n	8010404 <_strtoul_l.constprop.0+0xbc>
 80103f6:	2322      	movs	r3, #34	; 0x22
 80103f8:	f8ce 3000 	str.w	r3, [lr]
 80103fc:	4638      	mov	r0, r7
 80103fe:	b932      	cbnz	r2, 801040e <_strtoul_l.constprop.0+0xc6>
 8010400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010404:	b106      	cbz	r6, 8010408 <_strtoul_l.constprop.0+0xc0>
 8010406:	4240      	negs	r0, r0
 8010408:	2a00      	cmp	r2, #0
 801040a:	d0f9      	beq.n	8010400 <_strtoul_l.constprop.0+0xb8>
 801040c:	b107      	cbz	r7, 8010410 <_strtoul_l.constprop.0+0xc8>
 801040e:	1e69      	subs	r1, r5, #1
 8010410:	6011      	str	r1, [r2, #0]
 8010412:	e7f5      	b.n	8010400 <_strtoul_l.constprop.0+0xb8>
 8010414:	2430      	movs	r4, #48	; 0x30
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1b5      	bne.n	8010386 <_strtoul_l.constprop.0+0x3e>
 801041a:	2308      	movs	r3, #8
 801041c:	e7b3      	b.n	8010386 <_strtoul_l.constprop.0+0x3e>
 801041e:	2c30      	cmp	r4, #48	; 0x30
 8010420:	d0a9      	beq.n	8010376 <_strtoul_l.constprop.0+0x2e>
 8010422:	230a      	movs	r3, #10
 8010424:	e7af      	b.n	8010386 <_strtoul_l.constprop.0+0x3e>
 8010426:	bf00      	nop
 8010428:	080296e1 	.word	0x080296e1

0801042c <_strtoul_r>:
 801042c:	f7ff bf8c 	b.w	8010348 <_strtoul_l.constprop.0>

08010430 <__ascii_wctomb>:
 8010430:	b149      	cbz	r1, 8010446 <__ascii_wctomb+0x16>
 8010432:	2aff      	cmp	r2, #255	; 0xff
 8010434:	bf85      	ittet	hi
 8010436:	238a      	movhi	r3, #138	; 0x8a
 8010438:	6003      	strhi	r3, [r0, #0]
 801043a:	700a      	strbls	r2, [r1, #0]
 801043c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010440:	bf98      	it	ls
 8010442:	2001      	movls	r0, #1
 8010444:	4770      	bx	lr
 8010446:	4608      	mov	r0, r1
 8010448:	4770      	bx	lr
	...

0801044c <fiprintf>:
 801044c:	b40e      	push	{r1, r2, r3}
 801044e:	b503      	push	{r0, r1, lr}
 8010450:	4601      	mov	r1, r0
 8010452:	ab03      	add	r3, sp, #12
 8010454:	4805      	ldr	r0, [pc, #20]	; (801046c <fiprintf+0x20>)
 8010456:	f853 2b04 	ldr.w	r2, [r3], #4
 801045a:	6800      	ldr	r0, [r0, #0]
 801045c:	9301      	str	r3, [sp, #4]
 801045e:	f7fe ffe1 	bl	800f424 <_vfiprintf_r>
 8010462:	b002      	add	sp, #8
 8010464:	f85d eb04 	ldr.w	lr, [sp], #4
 8010468:	b003      	add	sp, #12
 801046a:	4770      	bx	lr
 801046c:	200003a4 	.word	0x200003a4

08010470 <abort>:
 8010470:	b508      	push	{r3, lr}
 8010472:	2006      	movs	r0, #6
 8010474:	f000 f834 	bl	80104e0 <raise>
 8010478:	2001      	movs	r0, #1
 801047a:	f7f1 f965 	bl	8001748 <_exit>

0801047e <_malloc_usable_size_r>:
 801047e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010482:	1f18      	subs	r0, r3, #4
 8010484:	2b00      	cmp	r3, #0
 8010486:	bfbc      	itt	lt
 8010488:	580b      	ldrlt	r3, [r1, r0]
 801048a:	18c0      	addlt	r0, r0, r3
 801048c:	4770      	bx	lr

0801048e <_raise_r>:
 801048e:	291f      	cmp	r1, #31
 8010490:	b538      	push	{r3, r4, r5, lr}
 8010492:	4604      	mov	r4, r0
 8010494:	460d      	mov	r5, r1
 8010496:	d904      	bls.n	80104a2 <_raise_r+0x14>
 8010498:	2316      	movs	r3, #22
 801049a:	6003      	str	r3, [r0, #0]
 801049c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104a0:	bd38      	pop	{r3, r4, r5, pc}
 80104a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80104a4:	b112      	cbz	r2, 80104ac <_raise_r+0x1e>
 80104a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104aa:	b94b      	cbnz	r3, 80104c0 <_raise_r+0x32>
 80104ac:	4620      	mov	r0, r4
 80104ae:	f000 f831 	bl	8010514 <_getpid_r>
 80104b2:	462a      	mov	r2, r5
 80104b4:	4601      	mov	r1, r0
 80104b6:	4620      	mov	r0, r4
 80104b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104bc:	f000 b818 	b.w	80104f0 <_kill_r>
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d00a      	beq.n	80104da <_raise_r+0x4c>
 80104c4:	1c59      	adds	r1, r3, #1
 80104c6:	d103      	bne.n	80104d0 <_raise_r+0x42>
 80104c8:	2316      	movs	r3, #22
 80104ca:	6003      	str	r3, [r0, #0]
 80104cc:	2001      	movs	r0, #1
 80104ce:	e7e7      	b.n	80104a0 <_raise_r+0x12>
 80104d0:	2400      	movs	r4, #0
 80104d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104d6:	4628      	mov	r0, r5
 80104d8:	4798      	blx	r3
 80104da:	2000      	movs	r0, #0
 80104dc:	e7e0      	b.n	80104a0 <_raise_r+0x12>
	...

080104e0 <raise>:
 80104e0:	4b02      	ldr	r3, [pc, #8]	; (80104ec <raise+0xc>)
 80104e2:	4601      	mov	r1, r0
 80104e4:	6818      	ldr	r0, [r3, #0]
 80104e6:	f7ff bfd2 	b.w	801048e <_raise_r>
 80104ea:	bf00      	nop
 80104ec:	200003a4 	.word	0x200003a4

080104f0 <_kill_r>:
 80104f0:	b538      	push	{r3, r4, r5, lr}
 80104f2:	4d07      	ldr	r5, [pc, #28]	; (8010510 <_kill_r+0x20>)
 80104f4:	2300      	movs	r3, #0
 80104f6:	4604      	mov	r4, r0
 80104f8:	4608      	mov	r0, r1
 80104fa:	4611      	mov	r1, r2
 80104fc:	602b      	str	r3, [r5, #0]
 80104fe:	f7f1 f913 	bl	8001728 <_kill>
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	d102      	bne.n	801050c <_kill_r+0x1c>
 8010506:	682b      	ldr	r3, [r5, #0]
 8010508:	b103      	cbz	r3, 801050c <_kill_r+0x1c>
 801050a:	6023      	str	r3, [r4, #0]
 801050c:	bd38      	pop	{r3, r4, r5, pc}
 801050e:	bf00      	nop
 8010510:	20006674 	.word	0x20006674

08010514 <_getpid_r>:
 8010514:	f7f1 b900 	b.w	8001718 <_getpid>

08010518 <exp>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	ed2d 8b02 	vpush	{d8}
 801051e:	ec55 4b10 	vmov	r4, r5, d0
 8010522:	f000 fc85 	bl	8010e30 <__ieee754_exp>
 8010526:	eeb0 8a40 	vmov.f32	s16, s0
 801052a:	eef0 8a60 	vmov.f32	s17, s1
 801052e:	ec45 4b10 	vmov	d0, r4, r5
 8010532:	f000 f909 	bl	8010748 <finite>
 8010536:	b168      	cbz	r0, 8010554 <exp+0x3c>
 8010538:	a317      	add	r3, pc, #92	; (adr r3, 8010598 <exp+0x80>)
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	4620      	mov	r0, r4
 8010540:	4629      	mov	r1, r5
 8010542:	f7f0 fb01 	bl	8000b48 <__aeabi_dcmpgt>
 8010546:	b160      	cbz	r0, 8010562 <exp+0x4a>
 8010548:	f7fc f916 	bl	800c778 <__errno>
 801054c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010588 <exp+0x70>
 8010550:	2322      	movs	r3, #34	; 0x22
 8010552:	6003      	str	r3, [r0, #0]
 8010554:	eeb0 0a48 	vmov.f32	s0, s16
 8010558:	eef0 0a68 	vmov.f32	s1, s17
 801055c:	ecbd 8b02 	vpop	{d8}
 8010560:	bd38      	pop	{r3, r4, r5, pc}
 8010562:	a30f      	add	r3, pc, #60	; (adr r3, 80105a0 <exp+0x88>)
 8010564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010568:	4620      	mov	r0, r4
 801056a:	4629      	mov	r1, r5
 801056c:	f7f0 face 	bl	8000b0c <__aeabi_dcmplt>
 8010570:	2800      	cmp	r0, #0
 8010572:	d0ef      	beq.n	8010554 <exp+0x3c>
 8010574:	f7fc f900 	bl	800c778 <__errno>
 8010578:	2322      	movs	r3, #34	; 0x22
 801057a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010590 <exp+0x78>
 801057e:	6003      	str	r3, [r0, #0]
 8010580:	e7e8      	b.n	8010554 <exp+0x3c>
 8010582:	bf00      	nop
 8010584:	f3af 8000 	nop.w
 8010588:	00000000 	.word	0x00000000
 801058c:	7ff00000 	.word	0x7ff00000
	...
 8010598:	fefa39ef 	.word	0xfefa39ef
 801059c:	40862e42 	.word	0x40862e42
 80105a0:	d52d3051 	.word	0xd52d3051
 80105a4:	c0874910 	.word	0xc0874910

080105a8 <pow>:
 80105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105aa:	ed2d 8b02 	vpush	{d8}
 80105ae:	eeb0 8a40 	vmov.f32	s16, s0
 80105b2:	eef0 8a60 	vmov.f32	s17, s1
 80105b6:	ec55 4b11 	vmov	r4, r5, d1
 80105ba:	f000 fdbd 	bl	8011138 <__ieee754_pow>
 80105be:	4622      	mov	r2, r4
 80105c0:	462b      	mov	r3, r5
 80105c2:	4620      	mov	r0, r4
 80105c4:	4629      	mov	r1, r5
 80105c6:	ec57 6b10 	vmov	r6, r7, d0
 80105ca:	f7f0 fac7 	bl	8000b5c <__aeabi_dcmpun>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d13b      	bne.n	801064a <pow+0xa2>
 80105d2:	ec51 0b18 	vmov	r0, r1, d8
 80105d6:	2200      	movs	r2, #0
 80105d8:	2300      	movs	r3, #0
 80105da:	f7f0 fa8d 	bl	8000af8 <__aeabi_dcmpeq>
 80105de:	b1b8      	cbz	r0, 8010610 <pow+0x68>
 80105e0:	2200      	movs	r2, #0
 80105e2:	2300      	movs	r3, #0
 80105e4:	4620      	mov	r0, r4
 80105e6:	4629      	mov	r1, r5
 80105e8:	f7f0 fa86 	bl	8000af8 <__aeabi_dcmpeq>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d146      	bne.n	801067e <pow+0xd6>
 80105f0:	ec45 4b10 	vmov	d0, r4, r5
 80105f4:	f000 f8a8 	bl	8010748 <finite>
 80105f8:	b338      	cbz	r0, 801064a <pow+0xa2>
 80105fa:	2200      	movs	r2, #0
 80105fc:	2300      	movs	r3, #0
 80105fe:	4620      	mov	r0, r4
 8010600:	4629      	mov	r1, r5
 8010602:	f7f0 fa83 	bl	8000b0c <__aeabi_dcmplt>
 8010606:	b300      	cbz	r0, 801064a <pow+0xa2>
 8010608:	f7fc f8b6 	bl	800c778 <__errno>
 801060c:	2322      	movs	r3, #34	; 0x22
 801060e:	e01b      	b.n	8010648 <pow+0xa0>
 8010610:	ec47 6b10 	vmov	d0, r6, r7
 8010614:	f000 f898 	bl	8010748 <finite>
 8010618:	b9e0      	cbnz	r0, 8010654 <pow+0xac>
 801061a:	eeb0 0a48 	vmov.f32	s0, s16
 801061e:	eef0 0a68 	vmov.f32	s1, s17
 8010622:	f000 f891 	bl	8010748 <finite>
 8010626:	b1a8      	cbz	r0, 8010654 <pow+0xac>
 8010628:	ec45 4b10 	vmov	d0, r4, r5
 801062c:	f000 f88c 	bl	8010748 <finite>
 8010630:	b180      	cbz	r0, 8010654 <pow+0xac>
 8010632:	4632      	mov	r2, r6
 8010634:	463b      	mov	r3, r7
 8010636:	4630      	mov	r0, r6
 8010638:	4639      	mov	r1, r7
 801063a:	f7f0 fa8f 	bl	8000b5c <__aeabi_dcmpun>
 801063e:	2800      	cmp	r0, #0
 8010640:	d0e2      	beq.n	8010608 <pow+0x60>
 8010642:	f7fc f899 	bl	800c778 <__errno>
 8010646:	2321      	movs	r3, #33	; 0x21
 8010648:	6003      	str	r3, [r0, #0]
 801064a:	ecbd 8b02 	vpop	{d8}
 801064e:	ec47 6b10 	vmov	d0, r6, r7
 8010652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010654:	2200      	movs	r2, #0
 8010656:	2300      	movs	r3, #0
 8010658:	4630      	mov	r0, r6
 801065a:	4639      	mov	r1, r7
 801065c:	f7f0 fa4c 	bl	8000af8 <__aeabi_dcmpeq>
 8010660:	2800      	cmp	r0, #0
 8010662:	d0f2      	beq.n	801064a <pow+0xa2>
 8010664:	eeb0 0a48 	vmov.f32	s0, s16
 8010668:	eef0 0a68 	vmov.f32	s1, s17
 801066c:	f000 f86c 	bl	8010748 <finite>
 8010670:	2800      	cmp	r0, #0
 8010672:	d0ea      	beq.n	801064a <pow+0xa2>
 8010674:	ec45 4b10 	vmov	d0, r4, r5
 8010678:	f000 f866 	bl	8010748 <finite>
 801067c:	e7c3      	b.n	8010606 <pow+0x5e>
 801067e:	4f01      	ldr	r7, [pc, #4]	; (8010684 <pow+0xdc>)
 8010680:	2600      	movs	r6, #0
 8010682:	e7e2      	b.n	801064a <pow+0xa2>
 8010684:	3ff00000 	.word	0x3ff00000

08010688 <sqrt>:
 8010688:	b538      	push	{r3, r4, r5, lr}
 801068a:	ed2d 8b02 	vpush	{d8}
 801068e:	ec55 4b10 	vmov	r4, r5, d0
 8010692:	f000 f865 	bl	8010760 <__ieee754_sqrt>
 8010696:	4622      	mov	r2, r4
 8010698:	462b      	mov	r3, r5
 801069a:	4620      	mov	r0, r4
 801069c:	4629      	mov	r1, r5
 801069e:	eeb0 8a40 	vmov.f32	s16, s0
 80106a2:	eef0 8a60 	vmov.f32	s17, s1
 80106a6:	f7f0 fa59 	bl	8000b5c <__aeabi_dcmpun>
 80106aa:	b990      	cbnz	r0, 80106d2 <sqrt+0x4a>
 80106ac:	2200      	movs	r2, #0
 80106ae:	2300      	movs	r3, #0
 80106b0:	4620      	mov	r0, r4
 80106b2:	4629      	mov	r1, r5
 80106b4:	f7f0 fa2a 	bl	8000b0c <__aeabi_dcmplt>
 80106b8:	b158      	cbz	r0, 80106d2 <sqrt+0x4a>
 80106ba:	f7fc f85d 	bl	800c778 <__errno>
 80106be:	2321      	movs	r3, #33	; 0x21
 80106c0:	6003      	str	r3, [r0, #0]
 80106c2:	2200      	movs	r2, #0
 80106c4:	2300      	movs	r3, #0
 80106c6:	4610      	mov	r0, r2
 80106c8:	4619      	mov	r1, r3
 80106ca:	f7f0 f8d7 	bl	800087c <__aeabi_ddiv>
 80106ce:	ec41 0b18 	vmov	d8, r0, r1
 80106d2:	eeb0 0a48 	vmov.f32	s0, s16
 80106d6:	eef0 0a68 	vmov.f32	s1, s17
 80106da:	ecbd 8b02 	vpop	{d8}
 80106de:	bd38      	pop	{r3, r4, r5, pc}

080106e0 <tan>:
 80106e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106e2:	ec53 2b10 	vmov	r2, r3, d0
 80106e6:	4816      	ldr	r0, [pc, #88]	; (8010740 <tan+0x60>)
 80106e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80106ec:	4281      	cmp	r1, r0
 80106ee:	dc07      	bgt.n	8010700 <tan+0x20>
 80106f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010738 <tan+0x58>
 80106f4:	2001      	movs	r0, #1
 80106f6:	b005      	add	sp, #20
 80106f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106fc:	f000 b98c 	b.w	8010a18 <__kernel_tan>
 8010700:	4810      	ldr	r0, [pc, #64]	; (8010744 <tan+0x64>)
 8010702:	4281      	cmp	r1, r0
 8010704:	dd09      	ble.n	801071a <tan+0x3a>
 8010706:	ee10 0a10 	vmov	r0, s0
 801070a:	4619      	mov	r1, r3
 801070c:	f7ef fdd4 	bl	80002b8 <__aeabi_dsub>
 8010710:	ec41 0b10 	vmov	d0, r0, r1
 8010714:	b005      	add	sp, #20
 8010716:	f85d fb04 	ldr.w	pc, [sp], #4
 801071a:	4668      	mov	r0, sp
 801071c:	f001 fa38 	bl	8011b90 <__ieee754_rem_pio2>
 8010720:	0040      	lsls	r0, r0, #1
 8010722:	f000 0002 	and.w	r0, r0, #2
 8010726:	ed9d 1b02 	vldr	d1, [sp, #8]
 801072a:	ed9d 0b00 	vldr	d0, [sp]
 801072e:	f1c0 0001 	rsb	r0, r0, #1
 8010732:	f000 f971 	bl	8010a18 <__kernel_tan>
 8010736:	e7ed      	b.n	8010714 <tan+0x34>
	...
 8010740:	3fe921fb 	.word	0x3fe921fb
 8010744:	7fefffff 	.word	0x7fefffff

08010748 <finite>:
 8010748:	b082      	sub	sp, #8
 801074a:	ed8d 0b00 	vstr	d0, [sp]
 801074e:	9801      	ldr	r0, [sp, #4]
 8010750:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010754:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010758:	0fc0      	lsrs	r0, r0, #31
 801075a:	b002      	add	sp, #8
 801075c:	4770      	bx	lr
	...

08010760 <__ieee754_sqrt>:
 8010760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	ec55 4b10 	vmov	r4, r5, d0
 8010768:	4e67      	ldr	r6, [pc, #412]	; (8010908 <__ieee754_sqrt+0x1a8>)
 801076a:	43ae      	bics	r6, r5
 801076c:	ee10 0a10 	vmov	r0, s0
 8010770:	ee10 2a10 	vmov	r2, s0
 8010774:	4629      	mov	r1, r5
 8010776:	462b      	mov	r3, r5
 8010778:	d10d      	bne.n	8010796 <__ieee754_sqrt+0x36>
 801077a:	f7ef ff55 	bl	8000628 <__aeabi_dmul>
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	4620      	mov	r0, r4
 8010784:	4629      	mov	r1, r5
 8010786:	f7ef fd99 	bl	80002bc <__adddf3>
 801078a:	4604      	mov	r4, r0
 801078c:	460d      	mov	r5, r1
 801078e:	ec45 4b10 	vmov	d0, r4, r5
 8010792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010796:	2d00      	cmp	r5, #0
 8010798:	dc0b      	bgt.n	80107b2 <__ieee754_sqrt+0x52>
 801079a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801079e:	4326      	orrs	r6, r4
 80107a0:	d0f5      	beq.n	801078e <__ieee754_sqrt+0x2e>
 80107a2:	b135      	cbz	r5, 80107b2 <__ieee754_sqrt+0x52>
 80107a4:	f7ef fd88 	bl	80002b8 <__aeabi_dsub>
 80107a8:	4602      	mov	r2, r0
 80107aa:	460b      	mov	r3, r1
 80107ac:	f7f0 f866 	bl	800087c <__aeabi_ddiv>
 80107b0:	e7eb      	b.n	801078a <__ieee754_sqrt+0x2a>
 80107b2:	1509      	asrs	r1, r1, #20
 80107b4:	f000 808d 	beq.w	80108d2 <__ieee754_sqrt+0x172>
 80107b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107bc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80107c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107c4:	07c9      	lsls	r1, r1, #31
 80107c6:	bf5c      	itt	pl
 80107c8:	005b      	lslpl	r3, r3, #1
 80107ca:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80107ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80107d2:	bf58      	it	pl
 80107d4:	0052      	lslpl	r2, r2, #1
 80107d6:	2500      	movs	r5, #0
 80107d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80107dc:	1076      	asrs	r6, r6, #1
 80107de:	0052      	lsls	r2, r2, #1
 80107e0:	f04f 0e16 	mov.w	lr, #22
 80107e4:	46ac      	mov	ip, r5
 80107e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80107ea:	eb0c 0001 	add.w	r0, ip, r1
 80107ee:	4298      	cmp	r0, r3
 80107f0:	bfde      	ittt	le
 80107f2:	1a1b      	suble	r3, r3, r0
 80107f4:	eb00 0c01 	addle.w	ip, r0, r1
 80107f8:	186d      	addle	r5, r5, r1
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	f1be 0e01 	subs.w	lr, lr, #1
 8010800:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010804:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010808:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801080c:	d1ed      	bne.n	80107ea <__ieee754_sqrt+0x8a>
 801080e:	4674      	mov	r4, lr
 8010810:	2720      	movs	r7, #32
 8010812:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010816:	4563      	cmp	r3, ip
 8010818:	eb01 000e 	add.w	r0, r1, lr
 801081c:	dc02      	bgt.n	8010824 <__ieee754_sqrt+0xc4>
 801081e:	d113      	bne.n	8010848 <__ieee754_sqrt+0xe8>
 8010820:	4290      	cmp	r0, r2
 8010822:	d811      	bhi.n	8010848 <__ieee754_sqrt+0xe8>
 8010824:	2800      	cmp	r0, #0
 8010826:	eb00 0e01 	add.w	lr, r0, r1
 801082a:	da57      	bge.n	80108dc <__ieee754_sqrt+0x17c>
 801082c:	f1be 0f00 	cmp.w	lr, #0
 8010830:	db54      	blt.n	80108dc <__ieee754_sqrt+0x17c>
 8010832:	f10c 0801 	add.w	r8, ip, #1
 8010836:	eba3 030c 	sub.w	r3, r3, ip
 801083a:	4290      	cmp	r0, r2
 801083c:	bf88      	it	hi
 801083e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8010842:	1a12      	subs	r2, r2, r0
 8010844:	440c      	add	r4, r1
 8010846:	46c4      	mov	ip, r8
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	3f01      	subs	r7, #1
 801084c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010850:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010854:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010858:	d1dd      	bne.n	8010816 <__ieee754_sqrt+0xb6>
 801085a:	4313      	orrs	r3, r2
 801085c:	d01b      	beq.n	8010896 <__ieee754_sqrt+0x136>
 801085e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801090c <__ieee754_sqrt+0x1ac>
 8010862:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010910 <__ieee754_sqrt+0x1b0>
 8010866:	e9da 0100 	ldrd	r0, r1, [sl]
 801086a:	e9db 2300 	ldrd	r2, r3, [fp]
 801086e:	f7ef fd23 	bl	80002b8 <__aeabi_dsub>
 8010872:	e9da 8900 	ldrd	r8, r9, [sl]
 8010876:	4602      	mov	r2, r0
 8010878:	460b      	mov	r3, r1
 801087a:	4640      	mov	r0, r8
 801087c:	4649      	mov	r1, r9
 801087e:	f7f0 f94f 	bl	8000b20 <__aeabi_dcmple>
 8010882:	b140      	cbz	r0, 8010896 <__ieee754_sqrt+0x136>
 8010884:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010888:	e9da 0100 	ldrd	r0, r1, [sl]
 801088c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010890:	d126      	bne.n	80108e0 <__ieee754_sqrt+0x180>
 8010892:	3501      	adds	r5, #1
 8010894:	463c      	mov	r4, r7
 8010896:	106a      	asrs	r2, r5, #1
 8010898:	0863      	lsrs	r3, r4, #1
 801089a:	07e9      	lsls	r1, r5, #31
 801089c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80108a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80108a4:	bf48      	it	mi
 80108a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80108aa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80108ae:	461c      	mov	r4, r3
 80108b0:	e76d      	b.n	801078e <__ieee754_sqrt+0x2e>
 80108b2:	0ad3      	lsrs	r3, r2, #11
 80108b4:	3815      	subs	r0, #21
 80108b6:	0552      	lsls	r2, r2, #21
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d0fa      	beq.n	80108b2 <__ieee754_sqrt+0x152>
 80108bc:	02dc      	lsls	r4, r3, #11
 80108be:	d50a      	bpl.n	80108d6 <__ieee754_sqrt+0x176>
 80108c0:	f1c1 0420 	rsb	r4, r1, #32
 80108c4:	fa22 f404 	lsr.w	r4, r2, r4
 80108c8:	1e4d      	subs	r5, r1, #1
 80108ca:	408a      	lsls	r2, r1
 80108cc:	4323      	orrs	r3, r4
 80108ce:	1b41      	subs	r1, r0, r5
 80108d0:	e772      	b.n	80107b8 <__ieee754_sqrt+0x58>
 80108d2:	4608      	mov	r0, r1
 80108d4:	e7f0      	b.n	80108b8 <__ieee754_sqrt+0x158>
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	3101      	adds	r1, #1
 80108da:	e7ef      	b.n	80108bc <__ieee754_sqrt+0x15c>
 80108dc:	46e0      	mov	r8, ip
 80108de:	e7aa      	b.n	8010836 <__ieee754_sqrt+0xd6>
 80108e0:	f7ef fcec 	bl	80002bc <__adddf3>
 80108e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80108e8:	4602      	mov	r2, r0
 80108ea:	460b      	mov	r3, r1
 80108ec:	4640      	mov	r0, r8
 80108ee:	4649      	mov	r1, r9
 80108f0:	f7f0 f90c 	bl	8000b0c <__aeabi_dcmplt>
 80108f4:	b120      	cbz	r0, 8010900 <__ieee754_sqrt+0x1a0>
 80108f6:	1ca0      	adds	r0, r4, #2
 80108f8:	bf08      	it	eq
 80108fa:	3501      	addeq	r5, #1
 80108fc:	3402      	adds	r4, #2
 80108fe:	e7ca      	b.n	8010896 <__ieee754_sqrt+0x136>
 8010900:	3401      	adds	r4, #1
 8010902:	f024 0401 	bic.w	r4, r4, #1
 8010906:	e7c6      	b.n	8010896 <__ieee754_sqrt+0x136>
 8010908:	7ff00000 	.word	0x7ff00000
 801090c:	20000518 	.word	0x20000518
 8010910:	20000520 	.word	0x20000520
 8010914:	00000000 	.word	0x00000000

08010918 <ceil>:
 8010918:	ec51 0b10 	vmov	r0, r1, d0
 801091c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010924:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010928:	2e13      	cmp	r6, #19
 801092a:	ee10 5a10 	vmov	r5, s0
 801092e:	ee10 8a10 	vmov	r8, s0
 8010932:	460c      	mov	r4, r1
 8010934:	dc2f      	bgt.n	8010996 <ceil+0x7e>
 8010936:	2e00      	cmp	r6, #0
 8010938:	da12      	bge.n	8010960 <ceil+0x48>
 801093a:	a333      	add	r3, pc, #204	; (adr r3, 8010a08 <ceil+0xf0>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7ef fcbc 	bl	80002bc <__adddf3>
 8010944:	2200      	movs	r2, #0
 8010946:	2300      	movs	r3, #0
 8010948:	f7f0 f8fe 	bl	8000b48 <__aeabi_dcmpgt>
 801094c:	b128      	cbz	r0, 801095a <ceil+0x42>
 801094e:	2c00      	cmp	r4, #0
 8010950:	db51      	blt.n	80109f6 <ceil+0xde>
 8010952:	432c      	orrs	r4, r5
 8010954:	d053      	beq.n	80109fe <ceil+0xe6>
 8010956:	4c2e      	ldr	r4, [pc, #184]	; (8010a10 <ceil+0xf8>)
 8010958:	2500      	movs	r5, #0
 801095a:	4621      	mov	r1, r4
 801095c:	4628      	mov	r0, r5
 801095e:	e024      	b.n	80109aa <ceil+0x92>
 8010960:	4f2c      	ldr	r7, [pc, #176]	; (8010a14 <ceil+0xfc>)
 8010962:	4137      	asrs	r7, r6
 8010964:	ea01 0307 	and.w	r3, r1, r7
 8010968:	4303      	orrs	r3, r0
 801096a:	d01e      	beq.n	80109aa <ceil+0x92>
 801096c:	a326      	add	r3, pc, #152	; (adr r3, 8010a08 <ceil+0xf0>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7ef fca3 	bl	80002bc <__adddf3>
 8010976:	2200      	movs	r2, #0
 8010978:	2300      	movs	r3, #0
 801097a:	f7f0 f8e5 	bl	8000b48 <__aeabi_dcmpgt>
 801097e:	2800      	cmp	r0, #0
 8010980:	d0eb      	beq.n	801095a <ceil+0x42>
 8010982:	2c00      	cmp	r4, #0
 8010984:	bfc2      	ittt	gt
 8010986:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801098a:	4133      	asrgt	r3, r6
 801098c:	18e4      	addgt	r4, r4, r3
 801098e:	ea24 0407 	bic.w	r4, r4, r7
 8010992:	2500      	movs	r5, #0
 8010994:	e7e1      	b.n	801095a <ceil+0x42>
 8010996:	2e33      	cmp	r6, #51	; 0x33
 8010998:	dd0b      	ble.n	80109b2 <ceil+0x9a>
 801099a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801099e:	d104      	bne.n	80109aa <ceil+0x92>
 80109a0:	ee10 2a10 	vmov	r2, s0
 80109a4:	460b      	mov	r3, r1
 80109a6:	f7ef fc89 	bl	80002bc <__adddf3>
 80109aa:	ec41 0b10 	vmov	d0, r0, r1
 80109ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109b2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80109b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80109ba:	40df      	lsrs	r7, r3
 80109bc:	4238      	tst	r0, r7
 80109be:	d0f4      	beq.n	80109aa <ceil+0x92>
 80109c0:	a311      	add	r3, pc, #68	; (adr r3, 8010a08 <ceil+0xf0>)
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	f7ef fc79 	bl	80002bc <__adddf3>
 80109ca:	2200      	movs	r2, #0
 80109cc:	2300      	movs	r3, #0
 80109ce:	f7f0 f8bb 	bl	8000b48 <__aeabi_dcmpgt>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d0c1      	beq.n	801095a <ceil+0x42>
 80109d6:	2c00      	cmp	r4, #0
 80109d8:	dd0a      	ble.n	80109f0 <ceil+0xd8>
 80109da:	2e14      	cmp	r6, #20
 80109dc:	d101      	bne.n	80109e2 <ceil+0xca>
 80109de:	3401      	adds	r4, #1
 80109e0:	e006      	b.n	80109f0 <ceil+0xd8>
 80109e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80109e6:	2301      	movs	r3, #1
 80109e8:	40b3      	lsls	r3, r6
 80109ea:	441d      	add	r5, r3
 80109ec:	45a8      	cmp	r8, r5
 80109ee:	d8f6      	bhi.n	80109de <ceil+0xc6>
 80109f0:	ea25 0507 	bic.w	r5, r5, r7
 80109f4:	e7b1      	b.n	801095a <ceil+0x42>
 80109f6:	2500      	movs	r5, #0
 80109f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80109fc:	e7ad      	b.n	801095a <ceil+0x42>
 80109fe:	4625      	mov	r5, r4
 8010a00:	e7ab      	b.n	801095a <ceil+0x42>
 8010a02:	bf00      	nop
 8010a04:	f3af 8000 	nop.w
 8010a08:	8800759c 	.word	0x8800759c
 8010a0c:	7e37e43c 	.word	0x7e37e43c
 8010a10:	3ff00000 	.word	0x3ff00000
 8010a14:	000fffff 	.word	0x000fffff

08010a18 <__kernel_tan>:
 8010a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a1c:	ed2d 8b06 	vpush	{d8-d10}
 8010a20:	ec5b ab10 	vmov	sl, fp, d0
 8010a24:	4be0      	ldr	r3, [pc, #896]	; (8010da8 <__kernel_tan+0x390>)
 8010a26:	b083      	sub	sp, #12
 8010a28:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8010a2c:	429f      	cmp	r7, r3
 8010a2e:	ec59 8b11 	vmov	r8, r9, d1
 8010a32:	4606      	mov	r6, r0
 8010a34:	f8cd b000 	str.w	fp, [sp]
 8010a38:	dc61      	bgt.n	8010afe <__kernel_tan+0xe6>
 8010a3a:	ee10 0a10 	vmov	r0, s0
 8010a3e:	4659      	mov	r1, fp
 8010a40:	f7f0 f8a2 	bl	8000b88 <__aeabi_d2iz>
 8010a44:	4605      	mov	r5, r0
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f040 8083 	bne.w	8010b52 <__kernel_tan+0x13a>
 8010a4c:	1c73      	adds	r3, r6, #1
 8010a4e:	4652      	mov	r2, sl
 8010a50:	4313      	orrs	r3, r2
 8010a52:	433b      	orrs	r3, r7
 8010a54:	d112      	bne.n	8010a7c <__kernel_tan+0x64>
 8010a56:	ec4b ab10 	vmov	d0, sl, fp
 8010a5a:	f001 fa9f 	bl	8011f9c <fabs>
 8010a5e:	49d3      	ldr	r1, [pc, #844]	; (8010dac <__kernel_tan+0x394>)
 8010a60:	ec53 2b10 	vmov	r2, r3, d0
 8010a64:	2000      	movs	r0, #0
 8010a66:	f7ef ff09 	bl	800087c <__aeabi_ddiv>
 8010a6a:	4682      	mov	sl, r0
 8010a6c:	468b      	mov	fp, r1
 8010a6e:	ec4b ab10 	vmov	d0, sl, fp
 8010a72:	b003      	add	sp, #12
 8010a74:	ecbd 8b06 	vpop	{d8-d10}
 8010a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7c:	2e01      	cmp	r6, #1
 8010a7e:	d0f6      	beq.n	8010a6e <__kernel_tan+0x56>
 8010a80:	4642      	mov	r2, r8
 8010a82:	464b      	mov	r3, r9
 8010a84:	4650      	mov	r0, sl
 8010a86:	4659      	mov	r1, fp
 8010a88:	f7ef fc18 	bl	80002bc <__adddf3>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	460f      	mov	r7, r1
 8010a92:	2000      	movs	r0, #0
 8010a94:	49c6      	ldr	r1, [pc, #792]	; (8010db0 <__kernel_tan+0x398>)
 8010a96:	f7ef fef1 	bl	800087c <__aeabi_ddiv>
 8010a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8010a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010aa2:	462e      	mov	r6, r5
 8010aa4:	4652      	mov	r2, sl
 8010aa6:	462c      	mov	r4, r5
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	461d      	mov	r5, r3
 8010aac:	4639      	mov	r1, r7
 8010aae:	465b      	mov	r3, fp
 8010ab0:	f7ef fc02 	bl	80002b8 <__aeabi_dsub>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4640      	mov	r0, r8
 8010aba:	4649      	mov	r1, r9
 8010abc:	f7ef fbfc 	bl	80002b8 <__aeabi_dsub>
 8010ac0:	4632      	mov	r2, r6
 8010ac2:	462b      	mov	r3, r5
 8010ac4:	f7ef fdb0 	bl	8000628 <__aeabi_dmul>
 8010ac8:	4632      	mov	r2, r6
 8010aca:	4680      	mov	r8, r0
 8010acc:	4689      	mov	r9, r1
 8010ace:	462b      	mov	r3, r5
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	4639      	mov	r1, r7
 8010ad4:	f7ef fda8 	bl	8000628 <__aeabi_dmul>
 8010ad8:	4bb4      	ldr	r3, [pc, #720]	; (8010dac <__kernel_tan+0x394>)
 8010ada:	2200      	movs	r2, #0
 8010adc:	f7ef fbee 	bl	80002bc <__adddf3>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	4640      	mov	r0, r8
 8010ae6:	4649      	mov	r1, r9
 8010ae8:	f7ef fbe8 	bl	80002bc <__adddf3>
 8010aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010af0:	f7ef fd9a 	bl	8000628 <__aeabi_dmul>
 8010af4:	4622      	mov	r2, r4
 8010af6:	462b      	mov	r3, r5
 8010af8:	f7ef fbe0 	bl	80002bc <__adddf3>
 8010afc:	e7b5      	b.n	8010a6a <__kernel_tan+0x52>
 8010afe:	4bad      	ldr	r3, [pc, #692]	; (8010db4 <__kernel_tan+0x39c>)
 8010b00:	429f      	cmp	r7, r3
 8010b02:	dd26      	ble.n	8010b52 <__kernel_tan+0x13a>
 8010b04:	9b00      	ldr	r3, [sp, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	da09      	bge.n	8010b1e <__kernel_tan+0x106>
 8010b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b0e:	469b      	mov	fp, r3
 8010b10:	ee10 aa10 	vmov	sl, s0
 8010b14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010b18:	ee11 8a10 	vmov	r8, s2
 8010b1c:	4699      	mov	r9, r3
 8010b1e:	4652      	mov	r2, sl
 8010b20:	465b      	mov	r3, fp
 8010b22:	a183      	add	r1, pc, #524	; (adr r1, 8010d30 <__kernel_tan+0x318>)
 8010b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b28:	f7ef fbc6 	bl	80002b8 <__aeabi_dsub>
 8010b2c:	4642      	mov	r2, r8
 8010b2e:	464b      	mov	r3, r9
 8010b30:	4604      	mov	r4, r0
 8010b32:	460d      	mov	r5, r1
 8010b34:	a180      	add	r1, pc, #512	; (adr r1, 8010d38 <__kernel_tan+0x320>)
 8010b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b3a:	f7ef fbbd 	bl	80002b8 <__aeabi_dsub>
 8010b3e:	4622      	mov	r2, r4
 8010b40:	462b      	mov	r3, r5
 8010b42:	f7ef fbbb 	bl	80002bc <__adddf3>
 8010b46:	f04f 0800 	mov.w	r8, #0
 8010b4a:	4682      	mov	sl, r0
 8010b4c:	468b      	mov	fp, r1
 8010b4e:	f04f 0900 	mov.w	r9, #0
 8010b52:	4652      	mov	r2, sl
 8010b54:	465b      	mov	r3, fp
 8010b56:	4650      	mov	r0, sl
 8010b58:	4659      	mov	r1, fp
 8010b5a:	f7ef fd65 	bl	8000628 <__aeabi_dmul>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	460b      	mov	r3, r1
 8010b62:	ec43 2b18 	vmov	d8, r2, r3
 8010b66:	f7ef fd5f 	bl	8000628 <__aeabi_dmul>
 8010b6a:	ec53 2b18 	vmov	r2, r3, d8
 8010b6e:	4604      	mov	r4, r0
 8010b70:	460d      	mov	r5, r1
 8010b72:	4650      	mov	r0, sl
 8010b74:	4659      	mov	r1, fp
 8010b76:	f7ef fd57 	bl	8000628 <__aeabi_dmul>
 8010b7a:	a371      	add	r3, pc, #452	; (adr r3, 8010d40 <__kernel_tan+0x328>)
 8010b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b80:	ec41 0b19 	vmov	d9, r0, r1
 8010b84:	4620      	mov	r0, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fd4e 	bl	8000628 <__aeabi_dmul>
 8010b8c:	a36e      	add	r3, pc, #440	; (adr r3, 8010d48 <__kernel_tan+0x330>)
 8010b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b92:	f7ef fb93 	bl	80002bc <__adddf3>
 8010b96:	4622      	mov	r2, r4
 8010b98:	462b      	mov	r3, r5
 8010b9a:	f7ef fd45 	bl	8000628 <__aeabi_dmul>
 8010b9e:	a36c      	add	r3, pc, #432	; (adr r3, 8010d50 <__kernel_tan+0x338>)
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	f7ef fb8a 	bl	80002bc <__adddf3>
 8010ba8:	4622      	mov	r2, r4
 8010baa:	462b      	mov	r3, r5
 8010bac:	f7ef fd3c 	bl	8000628 <__aeabi_dmul>
 8010bb0:	a369      	add	r3, pc, #420	; (adr r3, 8010d58 <__kernel_tan+0x340>)
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	f7ef fb81 	bl	80002bc <__adddf3>
 8010bba:	4622      	mov	r2, r4
 8010bbc:	462b      	mov	r3, r5
 8010bbe:	f7ef fd33 	bl	8000628 <__aeabi_dmul>
 8010bc2:	a367      	add	r3, pc, #412	; (adr r3, 8010d60 <__kernel_tan+0x348>)
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	f7ef fb78 	bl	80002bc <__adddf3>
 8010bcc:	4622      	mov	r2, r4
 8010bce:	462b      	mov	r3, r5
 8010bd0:	f7ef fd2a 	bl	8000628 <__aeabi_dmul>
 8010bd4:	a364      	add	r3, pc, #400	; (adr r3, 8010d68 <__kernel_tan+0x350>)
 8010bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bda:	f7ef fb6f 	bl	80002bc <__adddf3>
 8010bde:	ec53 2b18 	vmov	r2, r3, d8
 8010be2:	f7ef fd21 	bl	8000628 <__aeabi_dmul>
 8010be6:	a362      	add	r3, pc, #392	; (adr r3, 8010d70 <__kernel_tan+0x358>)
 8010be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bec:	ec41 0b1a 	vmov	d10, r0, r1
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	f7ef fd18 	bl	8000628 <__aeabi_dmul>
 8010bf8:	a35f      	add	r3, pc, #380	; (adr r3, 8010d78 <__kernel_tan+0x360>)
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	f7ef fb5d 	bl	80002bc <__adddf3>
 8010c02:	4622      	mov	r2, r4
 8010c04:	462b      	mov	r3, r5
 8010c06:	f7ef fd0f 	bl	8000628 <__aeabi_dmul>
 8010c0a:	a35d      	add	r3, pc, #372	; (adr r3, 8010d80 <__kernel_tan+0x368>)
 8010c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c10:	f7ef fb54 	bl	80002bc <__adddf3>
 8010c14:	4622      	mov	r2, r4
 8010c16:	462b      	mov	r3, r5
 8010c18:	f7ef fd06 	bl	8000628 <__aeabi_dmul>
 8010c1c:	a35a      	add	r3, pc, #360	; (adr r3, 8010d88 <__kernel_tan+0x370>)
 8010c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c22:	f7ef fb4b 	bl	80002bc <__adddf3>
 8010c26:	4622      	mov	r2, r4
 8010c28:	462b      	mov	r3, r5
 8010c2a:	f7ef fcfd 	bl	8000628 <__aeabi_dmul>
 8010c2e:	a358      	add	r3, pc, #352	; (adr r3, 8010d90 <__kernel_tan+0x378>)
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	f7ef fb42 	bl	80002bc <__adddf3>
 8010c38:	4622      	mov	r2, r4
 8010c3a:	462b      	mov	r3, r5
 8010c3c:	f7ef fcf4 	bl	8000628 <__aeabi_dmul>
 8010c40:	a355      	add	r3, pc, #340	; (adr r3, 8010d98 <__kernel_tan+0x380>)
 8010c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c46:	f7ef fb39 	bl	80002bc <__adddf3>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	ec51 0b1a 	vmov	r0, r1, d10
 8010c52:	f7ef fb33 	bl	80002bc <__adddf3>
 8010c56:	ec53 2b19 	vmov	r2, r3, d9
 8010c5a:	f7ef fce5 	bl	8000628 <__aeabi_dmul>
 8010c5e:	4642      	mov	r2, r8
 8010c60:	464b      	mov	r3, r9
 8010c62:	f7ef fb2b 	bl	80002bc <__adddf3>
 8010c66:	ec53 2b18 	vmov	r2, r3, d8
 8010c6a:	f7ef fcdd 	bl	8000628 <__aeabi_dmul>
 8010c6e:	4642      	mov	r2, r8
 8010c70:	464b      	mov	r3, r9
 8010c72:	f7ef fb23 	bl	80002bc <__adddf3>
 8010c76:	a34a      	add	r3, pc, #296	; (adr r3, 8010da0 <__kernel_tan+0x388>)
 8010c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	460d      	mov	r5, r1
 8010c80:	ec51 0b19 	vmov	r0, r1, d9
 8010c84:	f7ef fcd0 	bl	8000628 <__aeabi_dmul>
 8010c88:	4622      	mov	r2, r4
 8010c8a:	462b      	mov	r3, r5
 8010c8c:	f7ef fb16 	bl	80002bc <__adddf3>
 8010c90:	460b      	mov	r3, r1
 8010c92:	ec41 0b18 	vmov	d8, r0, r1
 8010c96:	4602      	mov	r2, r0
 8010c98:	4659      	mov	r1, fp
 8010c9a:	4650      	mov	r0, sl
 8010c9c:	f7ef fb0e 	bl	80002bc <__adddf3>
 8010ca0:	4b44      	ldr	r3, [pc, #272]	; (8010db4 <__kernel_tan+0x39c>)
 8010ca2:	429f      	cmp	r7, r3
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	f340 8086 	ble.w	8010db8 <__kernel_tan+0x3a0>
 8010cac:	4630      	mov	r0, r6
 8010cae:	f7ef fc51 	bl	8000554 <__aeabi_i2d>
 8010cb2:	4622      	mov	r2, r4
 8010cb4:	4680      	mov	r8, r0
 8010cb6:	4689      	mov	r9, r1
 8010cb8:	462b      	mov	r3, r5
 8010cba:	4620      	mov	r0, r4
 8010cbc:	4629      	mov	r1, r5
 8010cbe:	f7ef fcb3 	bl	8000628 <__aeabi_dmul>
 8010cc2:	4642      	mov	r2, r8
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	460f      	mov	r7, r1
 8010cc8:	464b      	mov	r3, r9
 8010cca:	4620      	mov	r0, r4
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f7ef faf5 	bl	80002bc <__adddf3>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	4639      	mov	r1, r7
 8010cda:	f7ef fdcf 	bl	800087c <__aeabi_ddiv>
 8010cde:	ec53 2b18 	vmov	r2, r3, d8
 8010ce2:	f7ef fae9 	bl	80002b8 <__aeabi_dsub>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	460b      	mov	r3, r1
 8010cea:	4650      	mov	r0, sl
 8010cec:	4659      	mov	r1, fp
 8010cee:	f7ef fae3 	bl	80002b8 <__aeabi_dsub>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	f7ef fae1 	bl	80002bc <__adddf3>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	4640      	mov	r0, r8
 8010d00:	4649      	mov	r1, r9
 8010d02:	f7ef fad9 	bl	80002b8 <__aeabi_dsub>
 8010d06:	9b00      	ldr	r3, [sp, #0]
 8010d08:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8010d0c:	f00a 0a02 	and.w	sl, sl, #2
 8010d10:	4604      	mov	r4, r0
 8010d12:	f1ca 0001 	rsb	r0, sl, #1
 8010d16:	460d      	mov	r5, r1
 8010d18:	f7ef fc1c 	bl	8000554 <__aeabi_i2d>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	460b      	mov	r3, r1
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	f7ef fc80 	bl	8000628 <__aeabi_dmul>
 8010d28:	e69f      	b.n	8010a6a <__kernel_tan+0x52>
 8010d2a:	bf00      	nop
 8010d2c:	f3af 8000 	nop.w
 8010d30:	54442d18 	.word	0x54442d18
 8010d34:	3fe921fb 	.word	0x3fe921fb
 8010d38:	33145c07 	.word	0x33145c07
 8010d3c:	3c81a626 	.word	0x3c81a626
 8010d40:	74bf7ad4 	.word	0x74bf7ad4
 8010d44:	3efb2a70 	.word	0x3efb2a70
 8010d48:	32f0a7e9 	.word	0x32f0a7e9
 8010d4c:	3f12b80f 	.word	0x3f12b80f
 8010d50:	1a8d1068 	.word	0x1a8d1068
 8010d54:	3f3026f7 	.word	0x3f3026f7
 8010d58:	fee08315 	.word	0xfee08315
 8010d5c:	3f57dbc8 	.word	0x3f57dbc8
 8010d60:	e96e8493 	.word	0xe96e8493
 8010d64:	3f8226e3 	.word	0x3f8226e3
 8010d68:	1bb341fe 	.word	0x1bb341fe
 8010d6c:	3faba1ba 	.word	0x3faba1ba
 8010d70:	db605373 	.word	0xdb605373
 8010d74:	bef375cb 	.word	0xbef375cb
 8010d78:	a03792a6 	.word	0xa03792a6
 8010d7c:	3f147e88 	.word	0x3f147e88
 8010d80:	f2f26501 	.word	0xf2f26501
 8010d84:	3f4344d8 	.word	0x3f4344d8
 8010d88:	c9560328 	.word	0xc9560328
 8010d8c:	3f6d6d22 	.word	0x3f6d6d22
 8010d90:	8406d637 	.word	0x8406d637
 8010d94:	3f9664f4 	.word	0x3f9664f4
 8010d98:	1110fe7a 	.word	0x1110fe7a
 8010d9c:	3fc11111 	.word	0x3fc11111
 8010da0:	55555563 	.word	0x55555563
 8010da4:	3fd55555 	.word	0x3fd55555
 8010da8:	3e2fffff 	.word	0x3e2fffff
 8010dac:	3ff00000 	.word	0x3ff00000
 8010db0:	bff00000 	.word	0xbff00000
 8010db4:	3fe59427 	.word	0x3fe59427
 8010db8:	2e01      	cmp	r6, #1
 8010dba:	d02f      	beq.n	8010e1c <__kernel_tan+0x404>
 8010dbc:	460f      	mov	r7, r1
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4689      	mov	r9, r1
 8010dc4:	2000      	movs	r0, #0
 8010dc6:	4917      	ldr	r1, [pc, #92]	; (8010e24 <__kernel_tan+0x40c>)
 8010dc8:	f7ef fd58 	bl	800087c <__aeabi_ddiv>
 8010dcc:	2600      	movs	r6, #0
 8010dce:	e9cd 0100 	strd	r0, r1, [sp]
 8010dd2:	4652      	mov	r2, sl
 8010dd4:	465b      	mov	r3, fp
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	4639      	mov	r1, r7
 8010dda:	f7ef fa6d 	bl	80002b8 <__aeabi_dsub>
 8010dde:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	ec51 0b18 	vmov	r0, r1, d8
 8010dea:	f7ef fa65 	bl	80002b8 <__aeabi_dsub>
 8010dee:	4632      	mov	r2, r6
 8010df0:	462b      	mov	r3, r5
 8010df2:	f7ef fc19 	bl	8000628 <__aeabi_dmul>
 8010df6:	46b0      	mov	r8, r6
 8010df8:	460f      	mov	r7, r1
 8010dfa:	4642      	mov	r2, r8
 8010dfc:	462b      	mov	r3, r5
 8010dfe:	4634      	mov	r4, r6
 8010e00:	4649      	mov	r1, r9
 8010e02:	4606      	mov	r6, r0
 8010e04:	4640      	mov	r0, r8
 8010e06:	f7ef fc0f 	bl	8000628 <__aeabi_dmul>
 8010e0a:	4b07      	ldr	r3, [pc, #28]	; (8010e28 <__kernel_tan+0x410>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f7ef fa55 	bl	80002bc <__adddf3>
 8010e12:	4602      	mov	r2, r0
 8010e14:	460b      	mov	r3, r1
 8010e16:	4630      	mov	r0, r6
 8010e18:	4639      	mov	r1, r7
 8010e1a:	e665      	b.n	8010ae8 <__kernel_tan+0xd0>
 8010e1c:	4682      	mov	sl, r0
 8010e1e:	468b      	mov	fp, r1
 8010e20:	e625      	b.n	8010a6e <__kernel_tan+0x56>
 8010e22:	bf00      	nop
 8010e24:	bff00000 	.word	0xbff00000
 8010e28:	3ff00000 	.word	0x3ff00000
 8010e2c:	00000000 	.word	0x00000000

08010e30 <__ieee754_exp>:
 8010e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e34:	ec55 4b10 	vmov	r4, r5, d0
 8010e38:	49b5      	ldr	r1, [pc, #724]	; (8011110 <__ieee754_exp+0x2e0>)
 8010e3a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010e3e:	428a      	cmp	r2, r1
 8010e40:	ed2d 8b04 	vpush	{d8-d9}
 8010e44:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010e48:	d93b      	bls.n	8010ec2 <__ieee754_exp+0x92>
 8010e4a:	49b2      	ldr	r1, [pc, #712]	; (8011114 <__ieee754_exp+0x2e4>)
 8010e4c:	428a      	cmp	r2, r1
 8010e4e:	d916      	bls.n	8010e7e <__ieee754_exp+0x4e>
 8010e50:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010e54:	4323      	orrs	r3, r4
 8010e56:	ee10 2a10 	vmov	r2, s0
 8010e5a:	d007      	beq.n	8010e6c <__ieee754_exp+0x3c>
 8010e5c:	462b      	mov	r3, r5
 8010e5e:	4620      	mov	r0, r4
 8010e60:	4629      	mov	r1, r5
 8010e62:	f7ef fa2b 	bl	80002bc <__adddf3>
 8010e66:	4604      	mov	r4, r0
 8010e68:	460d      	mov	r5, r1
 8010e6a:	e002      	b.n	8010e72 <__ieee754_exp+0x42>
 8010e6c:	b10e      	cbz	r6, 8010e72 <__ieee754_exp+0x42>
 8010e6e:	2400      	movs	r4, #0
 8010e70:	2500      	movs	r5, #0
 8010e72:	ecbd 8b04 	vpop	{d8-d9}
 8010e76:	ec45 4b10 	vmov	d0, r4, r5
 8010e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e7e:	a38e      	add	r3, pc, #568	; (adr r3, 80110b8 <__ieee754_exp+0x288>)
 8010e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e84:	ee10 0a10 	vmov	r0, s0
 8010e88:	4629      	mov	r1, r5
 8010e8a:	f7ef fe5d 	bl	8000b48 <__aeabi_dcmpgt>
 8010e8e:	4607      	mov	r7, r0
 8010e90:	b130      	cbz	r0, 8010ea0 <__ieee754_exp+0x70>
 8010e92:	ecbd 8b04 	vpop	{d8-d9}
 8010e96:	2000      	movs	r0, #0
 8010e98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e9c:	f001 b92d 	b.w	80120fa <__math_oflow>
 8010ea0:	a387      	add	r3, pc, #540	; (adr r3, 80110c0 <__ieee754_exp+0x290>)
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	f7ef fe2f 	bl	8000b0c <__aeabi_dcmplt>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	f000 808b 	beq.w	8010fca <__ieee754_exp+0x19a>
 8010eb4:	ecbd 8b04 	vpop	{d8-d9}
 8010eb8:	4638      	mov	r0, r7
 8010eba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ebe:	f001 b913 	b.w	80120e8 <__math_uflow>
 8010ec2:	4b95      	ldr	r3, [pc, #596]	; (8011118 <__ieee754_exp+0x2e8>)
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	f240 80ac 	bls.w	8011022 <__ieee754_exp+0x1f2>
 8010eca:	4b94      	ldr	r3, [pc, #592]	; (801111c <__ieee754_exp+0x2ec>)
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d87c      	bhi.n	8010fca <__ieee754_exp+0x19a>
 8010ed0:	4b93      	ldr	r3, [pc, #588]	; (8011120 <__ieee754_exp+0x2f0>)
 8010ed2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	ee10 0a10 	vmov	r0, s0
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef f9ea 	bl	80002b8 <__aeabi_dsub>
 8010ee4:	4b8f      	ldr	r3, [pc, #572]	; (8011124 <__ieee754_exp+0x2f4>)
 8010ee6:	00f7      	lsls	r7, r6, #3
 8010ee8:	443b      	add	r3, r7
 8010eea:	ed93 7b00 	vldr	d7, [r3]
 8010eee:	f1c6 0a01 	rsb	sl, r6, #1
 8010ef2:	4680      	mov	r8, r0
 8010ef4:	4689      	mov	r9, r1
 8010ef6:	ebaa 0a06 	sub.w	sl, sl, r6
 8010efa:	eeb0 8a47 	vmov.f32	s16, s14
 8010efe:	eef0 8a67 	vmov.f32	s17, s15
 8010f02:	ec53 2b18 	vmov	r2, r3, d8
 8010f06:	4640      	mov	r0, r8
 8010f08:	4649      	mov	r1, r9
 8010f0a:	f7ef f9d5 	bl	80002b8 <__aeabi_dsub>
 8010f0e:	4604      	mov	r4, r0
 8010f10:	460d      	mov	r5, r1
 8010f12:	4622      	mov	r2, r4
 8010f14:	462b      	mov	r3, r5
 8010f16:	4620      	mov	r0, r4
 8010f18:	4629      	mov	r1, r5
 8010f1a:	f7ef fb85 	bl	8000628 <__aeabi_dmul>
 8010f1e:	a36a      	add	r3, pc, #424	; (adr r3, 80110c8 <__ieee754_exp+0x298>)
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	4606      	mov	r6, r0
 8010f26:	460f      	mov	r7, r1
 8010f28:	f7ef fb7e 	bl	8000628 <__aeabi_dmul>
 8010f2c:	a368      	add	r3, pc, #416	; (adr r3, 80110d0 <__ieee754_exp+0x2a0>)
 8010f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f32:	f7ef f9c1 	bl	80002b8 <__aeabi_dsub>
 8010f36:	4632      	mov	r2, r6
 8010f38:	463b      	mov	r3, r7
 8010f3a:	f7ef fb75 	bl	8000628 <__aeabi_dmul>
 8010f3e:	a366      	add	r3, pc, #408	; (adr r3, 80110d8 <__ieee754_exp+0x2a8>)
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	f7ef f9ba 	bl	80002bc <__adddf3>
 8010f48:	4632      	mov	r2, r6
 8010f4a:	463b      	mov	r3, r7
 8010f4c:	f7ef fb6c 	bl	8000628 <__aeabi_dmul>
 8010f50:	a363      	add	r3, pc, #396	; (adr r3, 80110e0 <__ieee754_exp+0x2b0>)
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	f7ef f9af 	bl	80002b8 <__aeabi_dsub>
 8010f5a:	4632      	mov	r2, r6
 8010f5c:	463b      	mov	r3, r7
 8010f5e:	f7ef fb63 	bl	8000628 <__aeabi_dmul>
 8010f62:	a361      	add	r3, pc, #388	; (adr r3, 80110e8 <__ieee754_exp+0x2b8>)
 8010f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f68:	f7ef f9a8 	bl	80002bc <__adddf3>
 8010f6c:	4632      	mov	r2, r6
 8010f6e:	463b      	mov	r3, r7
 8010f70:	f7ef fb5a 	bl	8000628 <__aeabi_dmul>
 8010f74:	4602      	mov	r2, r0
 8010f76:	460b      	mov	r3, r1
 8010f78:	4620      	mov	r0, r4
 8010f7a:	4629      	mov	r1, r5
 8010f7c:	f7ef f99c 	bl	80002b8 <__aeabi_dsub>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4606      	mov	r6, r0
 8010f86:	460f      	mov	r7, r1
 8010f88:	4620      	mov	r0, r4
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	f7ef fb4c 	bl	8000628 <__aeabi_dmul>
 8010f90:	ec41 0b19 	vmov	d9, r0, r1
 8010f94:	f1ba 0f00 	cmp.w	sl, #0
 8010f98:	d15d      	bne.n	8011056 <__ieee754_exp+0x226>
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	4639      	mov	r1, r7
 8010fa4:	f7ef f988 	bl	80002b8 <__aeabi_dsub>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	ec51 0b19 	vmov	r0, r1, d9
 8010fb0:	f7ef fc64 	bl	800087c <__aeabi_ddiv>
 8010fb4:	4622      	mov	r2, r4
 8010fb6:	462b      	mov	r3, r5
 8010fb8:	f7ef f97e 	bl	80002b8 <__aeabi_dsub>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	2000      	movs	r0, #0
 8010fc2:	4959      	ldr	r1, [pc, #356]	; (8011128 <__ieee754_exp+0x2f8>)
 8010fc4:	f7ef f978 	bl	80002b8 <__aeabi_dsub>
 8010fc8:	e74d      	b.n	8010e66 <__ieee754_exp+0x36>
 8010fca:	4b58      	ldr	r3, [pc, #352]	; (801112c <__ieee754_exp+0x2fc>)
 8010fcc:	4620      	mov	r0, r4
 8010fce:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	a346      	add	r3, pc, #280	; (adr r3, 80110f0 <__ieee754_exp+0x2c0>)
 8010fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fda:	f7ef fb25 	bl	8000628 <__aeabi_dmul>
 8010fde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010fe2:	f7ef f96b 	bl	80002bc <__adddf3>
 8010fe6:	f7ef fdcf 	bl	8000b88 <__aeabi_d2iz>
 8010fea:	4682      	mov	sl, r0
 8010fec:	f7ef fab2 	bl	8000554 <__aeabi_i2d>
 8010ff0:	a341      	add	r3, pc, #260	; (adr r3, 80110f8 <__ieee754_exp+0x2c8>)
 8010ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff6:	4606      	mov	r6, r0
 8010ff8:	460f      	mov	r7, r1
 8010ffa:	f7ef fb15 	bl	8000628 <__aeabi_dmul>
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	4620      	mov	r0, r4
 8011004:	4629      	mov	r1, r5
 8011006:	f7ef f957 	bl	80002b8 <__aeabi_dsub>
 801100a:	a33d      	add	r3, pc, #244	; (adr r3, 8011100 <__ieee754_exp+0x2d0>)
 801100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011010:	4680      	mov	r8, r0
 8011012:	4689      	mov	r9, r1
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	f7ef fb06 	bl	8000628 <__aeabi_dmul>
 801101c:	ec41 0b18 	vmov	d8, r0, r1
 8011020:	e76f      	b.n	8010f02 <__ieee754_exp+0xd2>
 8011022:	4b43      	ldr	r3, [pc, #268]	; (8011130 <__ieee754_exp+0x300>)
 8011024:	429a      	cmp	r2, r3
 8011026:	d811      	bhi.n	801104c <__ieee754_exp+0x21c>
 8011028:	a337      	add	r3, pc, #220	; (adr r3, 8011108 <__ieee754_exp+0x2d8>)
 801102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102e:	ee10 0a10 	vmov	r0, s0
 8011032:	4629      	mov	r1, r5
 8011034:	f7ef f942 	bl	80002bc <__adddf3>
 8011038:	4b3b      	ldr	r3, [pc, #236]	; (8011128 <__ieee754_exp+0x2f8>)
 801103a:	2200      	movs	r2, #0
 801103c:	f7ef fd84 	bl	8000b48 <__aeabi_dcmpgt>
 8011040:	b138      	cbz	r0, 8011052 <__ieee754_exp+0x222>
 8011042:	4b39      	ldr	r3, [pc, #228]	; (8011128 <__ieee754_exp+0x2f8>)
 8011044:	2200      	movs	r2, #0
 8011046:	4620      	mov	r0, r4
 8011048:	4629      	mov	r1, r5
 801104a:	e70a      	b.n	8010e62 <__ieee754_exp+0x32>
 801104c:	f04f 0a00 	mov.w	sl, #0
 8011050:	e75f      	b.n	8010f12 <__ieee754_exp+0xe2>
 8011052:	4682      	mov	sl, r0
 8011054:	e75d      	b.n	8010f12 <__ieee754_exp+0xe2>
 8011056:	4632      	mov	r2, r6
 8011058:	463b      	mov	r3, r7
 801105a:	2000      	movs	r0, #0
 801105c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011060:	f7ef f92a 	bl	80002b8 <__aeabi_dsub>
 8011064:	4602      	mov	r2, r0
 8011066:	460b      	mov	r3, r1
 8011068:	ec51 0b19 	vmov	r0, r1, d9
 801106c:	f7ef fc06 	bl	800087c <__aeabi_ddiv>
 8011070:	4602      	mov	r2, r0
 8011072:	460b      	mov	r3, r1
 8011074:	ec51 0b18 	vmov	r0, r1, d8
 8011078:	f7ef f91e 	bl	80002b8 <__aeabi_dsub>
 801107c:	4642      	mov	r2, r8
 801107e:	464b      	mov	r3, r9
 8011080:	f7ef f91a 	bl	80002b8 <__aeabi_dsub>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	2000      	movs	r0, #0
 801108a:	4927      	ldr	r1, [pc, #156]	; (8011128 <__ieee754_exp+0x2f8>)
 801108c:	f7ef f914 	bl	80002b8 <__aeabi_dsub>
 8011090:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011094:	4592      	cmp	sl, r2
 8011096:	db02      	blt.n	801109e <__ieee754_exp+0x26e>
 8011098:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801109c:	e6e3      	b.n	8010e66 <__ieee754_exp+0x36>
 801109e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80110a2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80110a6:	2200      	movs	r2, #0
 80110a8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80110ac:	f7ef fabc 	bl	8000628 <__aeabi_dmul>
 80110b0:	e6d9      	b.n	8010e66 <__ieee754_exp+0x36>
 80110b2:	bf00      	nop
 80110b4:	f3af 8000 	nop.w
 80110b8:	fefa39ef 	.word	0xfefa39ef
 80110bc:	40862e42 	.word	0x40862e42
 80110c0:	d52d3051 	.word	0xd52d3051
 80110c4:	c0874910 	.word	0xc0874910
 80110c8:	72bea4d0 	.word	0x72bea4d0
 80110cc:	3e663769 	.word	0x3e663769
 80110d0:	c5d26bf1 	.word	0xc5d26bf1
 80110d4:	3ebbbd41 	.word	0x3ebbbd41
 80110d8:	af25de2c 	.word	0xaf25de2c
 80110dc:	3f11566a 	.word	0x3f11566a
 80110e0:	16bebd93 	.word	0x16bebd93
 80110e4:	3f66c16c 	.word	0x3f66c16c
 80110e8:	5555553e 	.word	0x5555553e
 80110ec:	3fc55555 	.word	0x3fc55555
 80110f0:	652b82fe 	.word	0x652b82fe
 80110f4:	3ff71547 	.word	0x3ff71547
 80110f8:	fee00000 	.word	0xfee00000
 80110fc:	3fe62e42 	.word	0x3fe62e42
 8011100:	35793c76 	.word	0x35793c76
 8011104:	3dea39ef 	.word	0x3dea39ef
 8011108:	8800759c 	.word	0x8800759c
 801110c:	7e37e43c 	.word	0x7e37e43c
 8011110:	40862e41 	.word	0x40862e41
 8011114:	7fefffff 	.word	0x7fefffff
 8011118:	3fd62e42 	.word	0x3fd62e42
 801111c:	3ff0a2b1 	.word	0x3ff0a2b1
 8011120:	080298c8 	.word	0x080298c8
 8011124:	080298d8 	.word	0x080298d8
 8011128:	3ff00000 	.word	0x3ff00000
 801112c:	080298b8 	.word	0x080298b8
 8011130:	3defffff 	.word	0x3defffff
 8011134:	00000000 	.word	0x00000000

08011138 <__ieee754_pow>:
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	ed2d 8b06 	vpush	{d8-d10}
 8011140:	b089      	sub	sp, #36	; 0x24
 8011142:	ed8d 1b00 	vstr	d1, [sp]
 8011146:	e9dd 2900 	ldrd	r2, r9, [sp]
 801114a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801114e:	ea58 0102 	orrs.w	r1, r8, r2
 8011152:	ec57 6b10 	vmov	r6, r7, d0
 8011156:	d115      	bne.n	8011184 <__ieee754_pow+0x4c>
 8011158:	19b3      	adds	r3, r6, r6
 801115a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801115e:	4152      	adcs	r2, r2
 8011160:	4299      	cmp	r1, r3
 8011162:	4b89      	ldr	r3, [pc, #548]	; (8011388 <__ieee754_pow+0x250>)
 8011164:	4193      	sbcs	r3, r2
 8011166:	f080 84d1 	bcs.w	8011b0c <__ieee754_pow+0x9d4>
 801116a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801116e:	4630      	mov	r0, r6
 8011170:	4639      	mov	r1, r7
 8011172:	f7ef f8a3 	bl	80002bc <__adddf3>
 8011176:	ec41 0b10 	vmov	d0, r0, r1
 801117a:	b009      	add	sp, #36	; 0x24
 801117c:	ecbd 8b06 	vpop	{d8-d10}
 8011180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011184:	4b81      	ldr	r3, [pc, #516]	; (801138c <__ieee754_pow+0x254>)
 8011186:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801118a:	429c      	cmp	r4, r3
 801118c:	ee10 aa10 	vmov	sl, s0
 8011190:	463d      	mov	r5, r7
 8011192:	dc06      	bgt.n	80111a2 <__ieee754_pow+0x6a>
 8011194:	d101      	bne.n	801119a <__ieee754_pow+0x62>
 8011196:	2e00      	cmp	r6, #0
 8011198:	d1e7      	bne.n	801116a <__ieee754_pow+0x32>
 801119a:	4598      	cmp	r8, r3
 801119c:	dc01      	bgt.n	80111a2 <__ieee754_pow+0x6a>
 801119e:	d10f      	bne.n	80111c0 <__ieee754_pow+0x88>
 80111a0:	b172      	cbz	r2, 80111c0 <__ieee754_pow+0x88>
 80111a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80111a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80111aa:	ea55 050a 	orrs.w	r5, r5, sl
 80111ae:	d1dc      	bne.n	801116a <__ieee754_pow+0x32>
 80111b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80111b4:	18db      	adds	r3, r3, r3
 80111b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80111ba:	4152      	adcs	r2, r2
 80111bc:	429d      	cmp	r5, r3
 80111be:	e7d0      	b.n	8011162 <__ieee754_pow+0x2a>
 80111c0:	2d00      	cmp	r5, #0
 80111c2:	da3b      	bge.n	801123c <__ieee754_pow+0x104>
 80111c4:	4b72      	ldr	r3, [pc, #456]	; (8011390 <__ieee754_pow+0x258>)
 80111c6:	4598      	cmp	r8, r3
 80111c8:	dc51      	bgt.n	801126e <__ieee754_pow+0x136>
 80111ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80111ce:	4598      	cmp	r8, r3
 80111d0:	f340 84ab 	ble.w	8011b2a <__ieee754_pow+0x9f2>
 80111d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80111d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80111dc:	2b14      	cmp	r3, #20
 80111de:	dd0f      	ble.n	8011200 <__ieee754_pow+0xc8>
 80111e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80111e4:	fa22 f103 	lsr.w	r1, r2, r3
 80111e8:	fa01 f303 	lsl.w	r3, r1, r3
 80111ec:	4293      	cmp	r3, r2
 80111ee:	f040 849c 	bne.w	8011b2a <__ieee754_pow+0x9f2>
 80111f2:	f001 0101 	and.w	r1, r1, #1
 80111f6:	f1c1 0302 	rsb	r3, r1, #2
 80111fa:	9304      	str	r3, [sp, #16]
 80111fc:	b182      	cbz	r2, 8011220 <__ieee754_pow+0xe8>
 80111fe:	e05f      	b.n	80112c0 <__ieee754_pow+0x188>
 8011200:	2a00      	cmp	r2, #0
 8011202:	d15b      	bne.n	80112bc <__ieee754_pow+0x184>
 8011204:	f1c3 0314 	rsb	r3, r3, #20
 8011208:	fa48 f103 	asr.w	r1, r8, r3
 801120c:	fa01 f303 	lsl.w	r3, r1, r3
 8011210:	4543      	cmp	r3, r8
 8011212:	f040 8487 	bne.w	8011b24 <__ieee754_pow+0x9ec>
 8011216:	f001 0101 	and.w	r1, r1, #1
 801121a:	f1c1 0302 	rsb	r3, r1, #2
 801121e:	9304      	str	r3, [sp, #16]
 8011220:	4b5c      	ldr	r3, [pc, #368]	; (8011394 <__ieee754_pow+0x25c>)
 8011222:	4598      	cmp	r8, r3
 8011224:	d132      	bne.n	801128c <__ieee754_pow+0x154>
 8011226:	f1b9 0f00 	cmp.w	r9, #0
 801122a:	f280 8477 	bge.w	8011b1c <__ieee754_pow+0x9e4>
 801122e:	4959      	ldr	r1, [pc, #356]	; (8011394 <__ieee754_pow+0x25c>)
 8011230:	4632      	mov	r2, r6
 8011232:	463b      	mov	r3, r7
 8011234:	2000      	movs	r0, #0
 8011236:	f7ef fb21 	bl	800087c <__aeabi_ddiv>
 801123a:	e79c      	b.n	8011176 <__ieee754_pow+0x3e>
 801123c:	2300      	movs	r3, #0
 801123e:	9304      	str	r3, [sp, #16]
 8011240:	2a00      	cmp	r2, #0
 8011242:	d13d      	bne.n	80112c0 <__ieee754_pow+0x188>
 8011244:	4b51      	ldr	r3, [pc, #324]	; (801138c <__ieee754_pow+0x254>)
 8011246:	4598      	cmp	r8, r3
 8011248:	d1ea      	bne.n	8011220 <__ieee754_pow+0xe8>
 801124a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801124e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011252:	ea53 030a 	orrs.w	r3, r3, sl
 8011256:	f000 8459 	beq.w	8011b0c <__ieee754_pow+0x9d4>
 801125a:	4b4f      	ldr	r3, [pc, #316]	; (8011398 <__ieee754_pow+0x260>)
 801125c:	429c      	cmp	r4, r3
 801125e:	dd08      	ble.n	8011272 <__ieee754_pow+0x13a>
 8011260:	f1b9 0f00 	cmp.w	r9, #0
 8011264:	f2c0 8456 	blt.w	8011b14 <__ieee754_pow+0x9dc>
 8011268:	e9dd 0100 	ldrd	r0, r1, [sp]
 801126c:	e783      	b.n	8011176 <__ieee754_pow+0x3e>
 801126e:	2302      	movs	r3, #2
 8011270:	e7e5      	b.n	801123e <__ieee754_pow+0x106>
 8011272:	f1b9 0f00 	cmp.w	r9, #0
 8011276:	f04f 0000 	mov.w	r0, #0
 801127a:	f04f 0100 	mov.w	r1, #0
 801127e:	f6bf af7a 	bge.w	8011176 <__ieee754_pow+0x3e>
 8011282:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011286:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801128a:	e774      	b.n	8011176 <__ieee754_pow+0x3e>
 801128c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011290:	d106      	bne.n	80112a0 <__ieee754_pow+0x168>
 8011292:	4632      	mov	r2, r6
 8011294:	463b      	mov	r3, r7
 8011296:	4630      	mov	r0, r6
 8011298:	4639      	mov	r1, r7
 801129a:	f7ef f9c5 	bl	8000628 <__aeabi_dmul>
 801129e:	e76a      	b.n	8011176 <__ieee754_pow+0x3e>
 80112a0:	4b3e      	ldr	r3, [pc, #248]	; (801139c <__ieee754_pow+0x264>)
 80112a2:	4599      	cmp	r9, r3
 80112a4:	d10c      	bne.n	80112c0 <__ieee754_pow+0x188>
 80112a6:	2d00      	cmp	r5, #0
 80112a8:	db0a      	blt.n	80112c0 <__ieee754_pow+0x188>
 80112aa:	ec47 6b10 	vmov	d0, r6, r7
 80112ae:	b009      	add	sp, #36	; 0x24
 80112b0:	ecbd 8b06 	vpop	{d8-d10}
 80112b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	f7ff ba52 	b.w	8010760 <__ieee754_sqrt>
 80112bc:	2300      	movs	r3, #0
 80112be:	9304      	str	r3, [sp, #16]
 80112c0:	ec47 6b10 	vmov	d0, r6, r7
 80112c4:	f000 fe6a 	bl	8011f9c <fabs>
 80112c8:	ec51 0b10 	vmov	r0, r1, d0
 80112cc:	f1ba 0f00 	cmp.w	sl, #0
 80112d0:	d129      	bne.n	8011326 <__ieee754_pow+0x1ee>
 80112d2:	b124      	cbz	r4, 80112de <__ieee754_pow+0x1a6>
 80112d4:	4b2f      	ldr	r3, [pc, #188]	; (8011394 <__ieee754_pow+0x25c>)
 80112d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80112da:	429a      	cmp	r2, r3
 80112dc:	d123      	bne.n	8011326 <__ieee754_pow+0x1ee>
 80112de:	f1b9 0f00 	cmp.w	r9, #0
 80112e2:	da05      	bge.n	80112f0 <__ieee754_pow+0x1b8>
 80112e4:	4602      	mov	r2, r0
 80112e6:	460b      	mov	r3, r1
 80112e8:	2000      	movs	r0, #0
 80112ea:	492a      	ldr	r1, [pc, #168]	; (8011394 <__ieee754_pow+0x25c>)
 80112ec:	f7ef fac6 	bl	800087c <__aeabi_ddiv>
 80112f0:	2d00      	cmp	r5, #0
 80112f2:	f6bf af40 	bge.w	8011176 <__ieee754_pow+0x3e>
 80112f6:	9b04      	ldr	r3, [sp, #16]
 80112f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80112fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011300:	431c      	orrs	r4, r3
 8011302:	d108      	bne.n	8011316 <__ieee754_pow+0x1de>
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	4610      	mov	r0, r2
 801130a:	4619      	mov	r1, r3
 801130c:	f7ee ffd4 	bl	80002b8 <__aeabi_dsub>
 8011310:	4602      	mov	r2, r0
 8011312:	460b      	mov	r3, r1
 8011314:	e78f      	b.n	8011236 <__ieee754_pow+0xfe>
 8011316:	9b04      	ldr	r3, [sp, #16]
 8011318:	2b01      	cmp	r3, #1
 801131a:	f47f af2c 	bne.w	8011176 <__ieee754_pow+0x3e>
 801131e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011322:	4619      	mov	r1, r3
 8011324:	e727      	b.n	8011176 <__ieee754_pow+0x3e>
 8011326:	0feb      	lsrs	r3, r5, #31
 8011328:	3b01      	subs	r3, #1
 801132a:	9306      	str	r3, [sp, #24]
 801132c:	9a06      	ldr	r2, [sp, #24]
 801132e:	9b04      	ldr	r3, [sp, #16]
 8011330:	4313      	orrs	r3, r2
 8011332:	d102      	bne.n	801133a <__ieee754_pow+0x202>
 8011334:	4632      	mov	r2, r6
 8011336:	463b      	mov	r3, r7
 8011338:	e7e6      	b.n	8011308 <__ieee754_pow+0x1d0>
 801133a:	4b19      	ldr	r3, [pc, #100]	; (80113a0 <__ieee754_pow+0x268>)
 801133c:	4598      	cmp	r8, r3
 801133e:	f340 80fb 	ble.w	8011538 <__ieee754_pow+0x400>
 8011342:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011346:	4598      	cmp	r8, r3
 8011348:	4b13      	ldr	r3, [pc, #76]	; (8011398 <__ieee754_pow+0x260>)
 801134a:	dd0c      	ble.n	8011366 <__ieee754_pow+0x22e>
 801134c:	429c      	cmp	r4, r3
 801134e:	dc0f      	bgt.n	8011370 <__ieee754_pow+0x238>
 8011350:	f1b9 0f00 	cmp.w	r9, #0
 8011354:	da0f      	bge.n	8011376 <__ieee754_pow+0x23e>
 8011356:	2000      	movs	r0, #0
 8011358:	b009      	add	sp, #36	; 0x24
 801135a:	ecbd 8b06 	vpop	{d8-d10}
 801135e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011362:	f000 beca 	b.w	80120fa <__math_oflow>
 8011366:	429c      	cmp	r4, r3
 8011368:	dbf2      	blt.n	8011350 <__ieee754_pow+0x218>
 801136a:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <__ieee754_pow+0x25c>)
 801136c:	429c      	cmp	r4, r3
 801136e:	dd19      	ble.n	80113a4 <__ieee754_pow+0x26c>
 8011370:	f1b9 0f00 	cmp.w	r9, #0
 8011374:	dcef      	bgt.n	8011356 <__ieee754_pow+0x21e>
 8011376:	2000      	movs	r0, #0
 8011378:	b009      	add	sp, #36	; 0x24
 801137a:	ecbd 8b06 	vpop	{d8-d10}
 801137e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011382:	f000 beb1 	b.w	80120e8 <__math_uflow>
 8011386:	bf00      	nop
 8011388:	fff00000 	.word	0xfff00000
 801138c:	7ff00000 	.word	0x7ff00000
 8011390:	433fffff 	.word	0x433fffff
 8011394:	3ff00000 	.word	0x3ff00000
 8011398:	3fefffff 	.word	0x3fefffff
 801139c:	3fe00000 	.word	0x3fe00000
 80113a0:	41e00000 	.word	0x41e00000
 80113a4:	4b60      	ldr	r3, [pc, #384]	; (8011528 <__ieee754_pow+0x3f0>)
 80113a6:	2200      	movs	r2, #0
 80113a8:	f7ee ff86 	bl	80002b8 <__aeabi_dsub>
 80113ac:	a354      	add	r3, pc, #336	; (adr r3, 8011500 <__ieee754_pow+0x3c8>)
 80113ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b2:	4604      	mov	r4, r0
 80113b4:	460d      	mov	r5, r1
 80113b6:	f7ef f937 	bl	8000628 <__aeabi_dmul>
 80113ba:	a353      	add	r3, pc, #332	; (adr r3, 8011508 <__ieee754_pow+0x3d0>)
 80113bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c0:	4606      	mov	r6, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	4620      	mov	r0, r4
 80113c6:	4629      	mov	r1, r5
 80113c8:	f7ef f92e 	bl	8000628 <__aeabi_dmul>
 80113cc:	4b57      	ldr	r3, [pc, #348]	; (801152c <__ieee754_pow+0x3f4>)
 80113ce:	4682      	mov	sl, r0
 80113d0:	468b      	mov	fp, r1
 80113d2:	2200      	movs	r2, #0
 80113d4:	4620      	mov	r0, r4
 80113d6:	4629      	mov	r1, r5
 80113d8:	f7ef f926 	bl	8000628 <__aeabi_dmul>
 80113dc:	4602      	mov	r2, r0
 80113de:	460b      	mov	r3, r1
 80113e0:	a14b      	add	r1, pc, #300	; (adr r1, 8011510 <__ieee754_pow+0x3d8>)
 80113e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113e6:	f7ee ff67 	bl	80002b8 <__aeabi_dsub>
 80113ea:	4622      	mov	r2, r4
 80113ec:	462b      	mov	r3, r5
 80113ee:	f7ef f91b 	bl	8000628 <__aeabi_dmul>
 80113f2:	4602      	mov	r2, r0
 80113f4:	460b      	mov	r3, r1
 80113f6:	2000      	movs	r0, #0
 80113f8:	494d      	ldr	r1, [pc, #308]	; (8011530 <__ieee754_pow+0x3f8>)
 80113fa:	f7ee ff5d 	bl	80002b8 <__aeabi_dsub>
 80113fe:	4622      	mov	r2, r4
 8011400:	4680      	mov	r8, r0
 8011402:	4689      	mov	r9, r1
 8011404:	462b      	mov	r3, r5
 8011406:	4620      	mov	r0, r4
 8011408:	4629      	mov	r1, r5
 801140a:	f7ef f90d 	bl	8000628 <__aeabi_dmul>
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	4640      	mov	r0, r8
 8011414:	4649      	mov	r1, r9
 8011416:	f7ef f907 	bl	8000628 <__aeabi_dmul>
 801141a:	a33f      	add	r3, pc, #252	; (adr r3, 8011518 <__ieee754_pow+0x3e0>)
 801141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011420:	f7ef f902 	bl	8000628 <__aeabi_dmul>
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	4650      	mov	r0, sl
 801142a:	4659      	mov	r1, fp
 801142c:	f7ee ff44 	bl	80002b8 <__aeabi_dsub>
 8011430:	4602      	mov	r2, r0
 8011432:	460b      	mov	r3, r1
 8011434:	4680      	mov	r8, r0
 8011436:	4689      	mov	r9, r1
 8011438:	4630      	mov	r0, r6
 801143a:	4639      	mov	r1, r7
 801143c:	f7ee ff3e 	bl	80002bc <__adddf3>
 8011440:	2000      	movs	r0, #0
 8011442:	4632      	mov	r2, r6
 8011444:	463b      	mov	r3, r7
 8011446:	4604      	mov	r4, r0
 8011448:	460d      	mov	r5, r1
 801144a:	f7ee ff35 	bl	80002b8 <__aeabi_dsub>
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	4640      	mov	r0, r8
 8011454:	4649      	mov	r1, r9
 8011456:	f7ee ff2f 	bl	80002b8 <__aeabi_dsub>
 801145a:	9b04      	ldr	r3, [sp, #16]
 801145c:	9a06      	ldr	r2, [sp, #24]
 801145e:	3b01      	subs	r3, #1
 8011460:	4313      	orrs	r3, r2
 8011462:	4682      	mov	sl, r0
 8011464:	468b      	mov	fp, r1
 8011466:	f040 81e7 	bne.w	8011838 <__ieee754_pow+0x700>
 801146a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011520 <__ieee754_pow+0x3e8>
 801146e:	eeb0 8a47 	vmov.f32	s16, s14
 8011472:	eef0 8a67 	vmov.f32	s17, s15
 8011476:	e9dd 6700 	ldrd	r6, r7, [sp]
 801147a:	2600      	movs	r6, #0
 801147c:	4632      	mov	r2, r6
 801147e:	463b      	mov	r3, r7
 8011480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011484:	f7ee ff18 	bl	80002b8 <__aeabi_dsub>
 8011488:	4622      	mov	r2, r4
 801148a:	462b      	mov	r3, r5
 801148c:	f7ef f8cc 	bl	8000628 <__aeabi_dmul>
 8011490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011494:	4680      	mov	r8, r0
 8011496:	4689      	mov	r9, r1
 8011498:	4650      	mov	r0, sl
 801149a:	4659      	mov	r1, fp
 801149c:	f7ef f8c4 	bl	8000628 <__aeabi_dmul>
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	4640      	mov	r0, r8
 80114a6:	4649      	mov	r1, r9
 80114a8:	f7ee ff08 	bl	80002bc <__adddf3>
 80114ac:	4632      	mov	r2, r6
 80114ae:	463b      	mov	r3, r7
 80114b0:	4680      	mov	r8, r0
 80114b2:	4689      	mov	r9, r1
 80114b4:	4620      	mov	r0, r4
 80114b6:	4629      	mov	r1, r5
 80114b8:	f7ef f8b6 	bl	8000628 <__aeabi_dmul>
 80114bc:	460b      	mov	r3, r1
 80114be:	4604      	mov	r4, r0
 80114c0:	460d      	mov	r5, r1
 80114c2:	4602      	mov	r2, r0
 80114c4:	4649      	mov	r1, r9
 80114c6:	4640      	mov	r0, r8
 80114c8:	f7ee fef8 	bl	80002bc <__adddf3>
 80114cc:	4b19      	ldr	r3, [pc, #100]	; (8011534 <__ieee754_pow+0x3fc>)
 80114ce:	4299      	cmp	r1, r3
 80114d0:	ec45 4b19 	vmov	d9, r4, r5
 80114d4:	4606      	mov	r6, r0
 80114d6:	460f      	mov	r7, r1
 80114d8:	468b      	mov	fp, r1
 80114da:	f340 82f0 	ble.w	8011abe <__ieee754_pow+0x986>
 80114de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80114e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80114e6:	4303      	orrs	r3, r0
 80114e8:	f000 81e4 	beq.w	80118b4 <__ieee754_pow+0x77c>
 80114ec:	ec51 0b18 	vmov	r0, r1, d8
 80114f0:	2200      	movs	r2, #0
 80114f2:	2300      	movs	r3, #0
 80114f4:	f7ef fb0a 	bl	8000b0c <__aeabi_dcmplt>
 80114f8:	3800      	subs	r0, #0
 80114fa:	bf18      	it	ne
 80114fc:	2001      	movne	r0, #1
 80114fe:	e72b      	b.n	8011358 <__ieee754_pow+0x220>
 8011500:	60000000 	.word	0x60000000
 8011504:	3ff71547 	.word	0x3ff71547
 8011508:	f85ddf44 	.word	0xf85ddf44
 801150c:	3e54ae0b 	.word	0x3e54ae0b
 8011510:	55555555 	.word	0x55555555
 8011514:	3fd55555 	.word	0x3fd55555
 8011518:	652b82fe 	.word	0x652b82fe
 801151c:	3ff71547 	.word	0x3ff71547
 8011520:	00000000 	.word	0x00000000
 8011524:	bff00000 	.word	0xbff00000
 8011528:	3ff00000 	.word	0x3ff00000
 801152c:	3fd00000 	.word	0x3fd00000
 8011530:	3fe00000 	.word	0x3fe00000
 8011534:	408fffff 	.word	0x408fffff
 8011538:	4bd5      	ldr	r3, [pc, #852]	; (8011890 <__ieee754_pow+0x758>)
 801153a:	402b      	ands	r3, r5
 801153c:	2200      	movs	r2, #0
 801153e:	b92b      	cbnz	r3, 801154c <__ieee754_pow+0x414>
 8011540:	4bd4      	ldr	r3, [pc, #848]	; (8011894 <__ieee754_pow+0x75c>)
 8011542:	f7ef f871 	bl	8000628 <__aeabi_dmul>
 8011546:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801154a:	460c      	mov	r4, r1
 801154c:	1523      	asrs	r3, r4, #20
 801154e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011552:	4413      	add	r3, r2
 8011554:	9305      	str	r3, [sp, #20]
 8011556:	4bd0      	ldr	r3, [pc, #832]	; (8011898 <__ieee754_pow+0x760>)
 8011558:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801155c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011560:	429c      	cmp	r4, r3
 8011562:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011566:	dd08      	ble.n	801157a <__ieee754_pow+0x442>
 8011568:	4bcc      	ldr	r3, [pc, #816]	; (801189c <__ieee754_pow+0x764>)
 801156a:	429c      	cmp	r4, r3
 801156c:	f340 8162 	ble.w	8011834 <__ieee754_pow+0x6fc>
 8011570:	9b05      	ldr	r3, [sp, #20]
 8011572:	3301      	adds	r3, #1
 8011574:	9305      	str	r3, [sp, #20]
 8011576:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801157a:	2400      	movs	r4, #0
 801157c:	00e3      	lsls	r3, r4, #3
 801157e:	9307      	str	r3, [sp, #28]
 8011580:	4bc7      	ldr	r3, [pc, #796]	; (80118a0 <__ieee754_pow+0x768>)
 8011582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011586:	ed93 7b00 	vldr	d7, [r3]
 801158a:	4629      	mov	r1, r5
 801158c:	ec53 2b17 	vmov	r2, r3, d7
 8011590:	eeb0 9a47 	vmov.f32	s18, s14
 8011594:	eef0 9a67 	vmov.f32	s19, s15
 8011598:	4682      	mov	sl, r0
 801159a:	f7ee fe8d 	bl	80002b8 <__aeabi_dsub>
 801159e:	4652      	mov	r2, sl
 80115a0:	4606      	mov	r6, r0
 80115a2:	460f      	mov	r7, r1
 80115a4:	462b      	mov	r3, r5
 80115a6:	ec51 0b19 	vmov	r0, r1, d9
 80115aa:	f7ee fe87 	bl	80002bc <__adddf3>
 80115ae:	4602      	mov	r2, r0
 80115b0:	460b      	mov	r3, r1
 80115b2:	2000      	movs	r0, #0
 80115b4:	49bb      	ldr	r1, [pc, #748]	; (80118a4 <__ieee754_pow+0x76c>)
 80115b6:	f7ef f961 	bl	800087c <__aeabi_ddiv>
 80115ba:	ec41 0b1a 	vmov	d10, r0, r1
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	4630      	mov	r0, r6
 80115c4:	4639      	mov	r1, r7
 80115c6:	f7ef f82f 	bl	8000628 <__aeabi_dmul>
 80115ca:	2300      	movs	r3, #0
 80115cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115d0:	9302      	str	r3, [sp, #8]
 80115d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80115d6:	46ab      	mov	fp, r5
 80115d8:	106d      	asrs	r5, r5, #1
 80115da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80115de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80115e2:	ec41 0b18 	vmov	d8, r0, r1
 80115e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80115ea:	2200      	movs	r2, #0
 80115ec:	4640      	mov	r0, r8
 80115ee:	4649      	mov	r1, r9
 80115f0:	4614      	mov	r4, r2
 80115f2:	461d      	mov	r5, r3
 80115f4:	f7ef f818 	bl	8000628 <__aeabi_dmul>
 80115f8:	4602      	mov	r2, r0
 80115fa:	460b      	mov	r3, r1
 80115fc:	4630      	mov	r0, r6
 80115fe:	4639      	mov	r1, r7
 8011600:	f7ee fe5a 	bl	80002b8 <__aeabi_dsub>
 8011604:	ec53 2b19 	vmov	r2, r3, d9
 8011608:	4606      	mov	r6, r0
 801160a:	460f      	mov	r7, r1
 801160c:	4620      	mov	r0, r4
 801160e:	4629      	mov	r1, r5
 8011610:	f7ee fe52 	bl	80002b8 <__aeabi_dsub>
 8011614:	4602      	mov	r2, r0
 8011616:	460b      	mov	r3, r1
 8011618:	4650      	mov	r0, sl
 801161a:	4659      	mov	r1, fp
 801161c:	f7ee fe4c 	bl	80002b8 <__aeabi_dsub>
 8011620:	4642      	mov	r2, r8
 8011622:	464b      	mov	r3, r9
 8011624:	f7ef f800 	bl	8000628 <__aeabi_dmul>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4630      	mov	r0, r6
 801162e:	4639      	mov	r1, r7
 8011630:	f7ee fe42 	bl	80002b8 <__aeabi_dsub>
 8011634:	ec53 2b1a 	vmov	r2, r3, d10
 8011638:	f7ee fff6 	bl	8000628 <__aeabi_dmul>
 801163c:	ec53 2b18 	vmov	r2, r3, d8
 8011640:	ec41 0b19 	vmov	d9, r0, r1
 8011644:	ec51 0b18 	vmov	r0, r1, d8
 8011648:	f7ee ffee 	bl	8000628 <__aeabi_dmul>
 801164c:	a37c      	add	r3, pc, #496	; (adr r3, 8011840 <__ieee754_pow+0x708>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	4604      	mov	r4, r0
 8011654:	460d      	mov	r5, r1
 8011656:	f7ee ffe7 	bl	8000628 <__aeabi_dmul>
 801165a:	a37b      	add	r3, pc, #492	; (adr r3, 8011848 <__ieee754_pow+0x710>)
 801165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011660:	f7ee fe2c 	bl	80002bc <__adddf3>
 8011664:	4622      	mov	r2, r4
 8011666:	462b      	mov	r3, r5
 8011668:	f7ee ffde 	bl	8000628 <__aeabi_dmul>
 801166c:	a378      	add	r3, pc, #480	; (adr r3, 8011850 <__ieee754_pow+0x718>)
 801166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011672:	f7ee fe23 	bl	80002bc <__adddf3>
 8011676:	4622      	mov	r2, r4
 8011678:	462b      	mov	r3, r5
 801167a:	f7ee ffd5 	bl	8000628 <__aeabi_dmul>
 801167e:	a376      	add	r3, pc, #472	; (adr r3, 8011858 <__ieee754_pow+0x720>)
 8011680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011684:	f7ee fe1a 	bl	80002bc <__adddf3>
 8011688:	4622      	mov	r2, r4
 801168a:	462b      	mov	r3, r5
 801168c:	f7ee ffcc 	bl	8000628 <__aeabi_dmul>
 8011690:	a373      	add	r3, pc, #460	; (adr r3, 8011860 <__ieee754_pow+0x728>)
 8011692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011696:	f7ee fe11 	bl	80002bc <__adddf3>
 801169a:	4622      	mov	r2, r4
 801169c:	462b      	mov	r3, r5
 801169e:	f7ee ffc3 	bl	8000628 <__aeabi_dmul>
 80116a2:	a371      	add	r3, pc, #452	; (adr r3, 8011868 <__ieee754_pow+0x730>)
 80116a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a8:	f7ee fe08 	bl	80002bc <__adddf3>
 80116ac:	4622      	mov	r2, r4
 80116ae:	4606      	mov	r6, r0
 80116b0:	460f      	mov	r7, r1
 80116b2:	462b      	mov	r3, r5
 80116b4:	4620      	mov	r0, r4
 80116b6:	4629      	mov	r1, r5
 80116b8:	f7ee ffb6 	bl	8000628 <__aeabi_dmul>
 80116bc:	4602      	mov	r2, r0
 80116be:	460b      	mov	r3, r1
 80116c0:	4630      	mov	r0, r6
 80116c2:	4639      	mov	r1, r7
 80116c4:	f7ee ffb0 	bl	8000628 <__aeabi_dmul>
 80116c8:	4642      	mov	r2, r8
 80116ca:	4604      	mov	r4, r0
 80116cc:	460d      	mov	r5, r1
 80116ce:	464b      	mov	r3, r9
 80116d0:	ec51 0b18 	vmov	r0, r1, d8
 80116d4:	f7ee fdf2 	bl	80002bc <__adddf3>
 80116d8:	ec53 2b19 	vmov	r2, r3, d9
 80116dc:	f7ee ffa4 	bl	8000628 <__aeabi_dmul>
 80116e0:	4622      	mov	r2, r4
 80116e2:	462b      	mov	r3, r5
 80116e4:	f7ee fdea 	bl	80002bc <__adddf3>
 80116e8:	4642      	mov	r2, r8
 80116ea:	4682      	mov	sl, r0
 80116ec:	468b      	mov	fp, r1
 80116ee:	464b      	mov	r3, r9
 80116f0:	4640      	mov	r0, r8
 80116f2:	4649      	mov	r1, r9
 80116f4:	f7ee ff98 	bl	8000628 <__aeabi_dmul>
 80116f8:	4b6b      	ldr	r3, [pc, #428]	; (80118a8 <__ieee754_pow+0x770>)
 80116fa:	2200      	movs	r2, #0
 80116fc:	4606      	mov	r6, r0
 80116fe:	460f      	mov	r7, r1
 8011700:	f7ee fddc 	bl	80002bc <__adddf3>
 8011704:	4652      	mov	r2, sl
 8011706:	465b      	mov	r3, fp
 8011708:	f7ee fdd8 	bl	80002bc <__adddf3>
 801170c:	2000      	movs	r0, #0
 801170e:	4604      	mov	r4, r0
 8011710:	460d      	mov	r5, r1
 8011712:	4602      	mov	r2, r0
 8011714:	460b      	mov	r3, r1
 8011716:	4640      	mov	r0, r8
 8011718:	4649      	mov	r1, r9
 801171a:	f7ee ff85 	bl	8000628 <__aeabi_dmul>
 801171e:	4b62      	ldr	r3, [pc, #392]	; (80118a8 <__ieee754_pow+0x770>)
 8011720:	4680      	mov	r8, r0
 8011722:	4689      	mov	r9, r1
 8011724:	2200      	movs	r2, #0
 8011726:	4620      	mov	r0, r4
 8011728:	4629      	mov	r1, r5
 801172a:	f7ee fdc5 	bl	80002b8 <__aeabi_dsub>
 801172e:	4632      	mov	r2, r6
 8011730:	463b      	mov	r3, r7
 8011732:	f7ee fdc1 	bl	80002b8 <__aeabi_dsub>
 8011736:	4602      	mov	r2, r0
 8011738:	460b      	mov	r3, r1
 801173a:	4650      	mov	r0, sl
 801173c:	4659      	mov	r1, fp
 801173e:	f7ee fdbb 	bl	80002b8 <__aeabi_dsub>
 8011742:	ec53 2b18 	vmov	r2, r3, d8
 8011746:	f7ee ff6f 	bl	8000628 <__aeabi_dmul>
 801174a:	4622      	mov	r2, r4
 801174c:	4606      	mov	r6, r0
 801174e:	460f      	mov	r7, r1
 8011750:	462b      	mov	r3, r5
 8011752:	ec51 0b19 	vmov	r0, r1, d9
 8011756:	f7ee ff67 	bl	8000628 <__aeabi_dmul>
 801175a:	4602      	mov	r2, r0
 801175c:	460b      	mov	r3, r1
 801175e:	4630      	mov	r0, r6
 8011760:	4639      	mov	r1, r7
 8011762:	f7ee fdab 	bl	80002bc <__adddf3>
 8011766:	4606      	mov	r6, r0
 8011768:	460f      	mov	r7, r1
 801176a:	4602      	mov	r2, r0
 801176c:	460b      	mov	r3, r1
 801176e:	4640      	mov	r0, r8
 8011770:	4649      	mov	r1, r9
 8011772:	f7ee fda3 	bl	80002bc <__adddf3>
 8011776:	a33e      	add	r3, pc, #248	; (adr r3, 8011870 <__ieee754_pow+0x738>)
 8011778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177c:	2000      	movs	r0, #0
 801177e:	4604      	mov	r4, r0
 8011780:	460d      	mov	r5, r1
 8011782:	f7ee ff51 	bl	8000628 <__aeabi_dmul>
 8011786:	4642      	mov	r2, r8
 8011788:	ec41 0b18 	vmov	d8, r0, r1
 801178c:	464b      	mov	r3, r9
 801178e:	4620      	mov	r0, r4
 8011790:	4629      	mov	r1, r5
 8011792:	f7ee fd91 	bl	80002b8 <__aeabi_dsub>
 8011796:	4602      	mov	r2, r0
 8011798:	460b      	mov	r3, r1
 801179a:	4630      	mov	r0, r6
 801179c:	4639      	mov	r1, r7
 801179e:	f7ee fd8b 	bl	80002b8 <__aeabi_dsub>
 80117a2:	a335      	add	r3, pc, #212	; (adr r3, 8011878 <__ieee754_pow+0x740>)
 80117a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a8:	f7ee ff3e 	bl	8000628 <__aeabi_dmul>
 80117ac:	a334      	add	r3, pc, #208	; (adr r3, 8011880 <__ieee754_pow+0x748>)
 80117ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b2:	4606      	mov	r6, r0
 80117b4:	460f      	mov	r7, r1
 80117b6:	4620      	mov	r0, r4
 80117b8:	4629      	mov	r1, r5
 80117ba:	f7ee ff35 	bl	8000628 <__aeabi_dmul>
 80117be:	4602      	mov	r2, r0
 80117c0:	460b      	mov	r3, r1
 80117c2:	4630      	mov	r0, r6
 80117c4:	4639      	mov	r1, r7
 80117c6:	f7ee fd79 	bl	80002bc <__adddf3>
 80117ca:	9a07      	ldr	r2, [sp, #28]
 80117cc:	4b37      	ldr	r3, [pc, #220]	; (80118ac <__ieee754_pow+0x774>)
 80117ce:	4413      	add	r3, r2
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f7ee fd72 	bl	80002bc <__adddf3>
 80117d8:	4682      	mov	sl, r0
 80117da:	9805      	ldr	r0, [sp, #20]
 80117dc:	468b      	mov	fp, r1
 80117de:	f7ee feb9 	bl	8000554 <__aeabi_i2d>
 80117e2:	9a07      	ldr	r2, [sp, #28]
 80117e4:	4b32      	ldr	r3, [pc, #200]	; (80118b0 <__ieee754_pow+0x778>)
 80117e6:	4413      	add	r3, r2
 80117e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117ec:	4606      	mov	r6, r0
 80117ee:	460f      	mov	r7, r1
 80117f0:	4652      	mov	r2, sl
 80117f2:	465b      	mov	r3, fp
 80117f4:	ec51 0b18 	vmov	r0, r1, d8
 80117f8:	f7ee fd60 	bl	80002bc <__adddf3>
 80117fc:	4642      	mov	r2, r8
 80117fe:	464b      	mov	r3, r9
 8011800:	f7ee fd5c 	bl	80002bc <__adddf3>
 8011804:	4632      	mov	r2, r6
 8011806:	463b      	mov	r3, r7
 8011808:	f7ee fd58 	bl	80002bc <__adddf3>
 801180c:	2000      	movs	r0, #0
 801180e:	4632      	mov	r2, r6
 8011810:	463b      	mov	r3, r7
 8011812:	4604      	mov	r4, r0
 8011814:	460d      	mov	r5, r1
 8011816:	f7ee fd4f 	bl	80002b8 <__aeabi_dsub>
 801181a:	4642      	mov	r2, r8
 801181c:	464b      	mov	r3, r9
 801181e:	f7ee fd4b 	bl	80002b8 <__aeabi_dsub>
 8011822:	ec53 2b18 	vmov	r2, r3, d8
 8011826:	f7ee fd47 	bl	80002b8 <__aeabi_dsub>
 801182a:	4602      	mov	r2, r0
 801182c:	460b      	mov	r3, r1
 801182e:	4650      	mov	r0, sl
 8011830:	4659      	mov	r1, fp
 8011832:	e610      	b.n	8011456 <__ieee754_pow+0x31e>
 8011834:	2401      	movs	r4, #1
 8011836:	e6a1      	b.n	801157c <__ieee754_pow+0x444>
 8011838:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011888 <__ieee754_pow+0x750>
 801183c:	e617      	b.n	801146e <__ieee754_pow+0x336>
 801183e:	bf00      	nop
 8011840:	4a454eef 	.word	0x4a454eef
 8011844:	3fca7e28 	.word	0x3fca7e28
 8011848:	93c9db65 	.word	0x93c9db65
 801184c:	3fcd864a 	.word	0x3fcd864a
 8011850:	a91d4101 	.word	0xa91d4101
 8011854:	3fd17460 	.word	0x3fd17460
 8011858:	518f264d 	.word	0x518f264d
 801185c:	3fd55555 	.word	0x3fd55555
 8011860:	db6fabff 	.word	0xdb6fabff
 8011864:	3fdb6db6 	.word	0x3fdb6db6
 8011868:	33333303 	.word	0x33333303
 801186c:	3fe33333 	.word	0x3fe33333
 8011870:	e0000000 	.word	0xe0000000
 8011874:	3feec709 	.word	0x3feec709
 8011878:	dc3a03fd 	.word	0xdc3a03fd
 801187c:	3feec709 	.word	0x3feec709
 8011880:	145b01f5 	.word	0x145b01f5
 8011884:	be3e2fe0 	.word	0xbe3e2fe0
 8011888:	00000000 	.word	0x00000000
 801188c:	3ff00000 	.word	0x3ff00000
 8011890:	7ff00000 	.word	0x7ff00000
 8011894:	43400000 	.word	0x43400000
 8011898:	0003988e 	.word	0x0003988e
 801189c:	000bb679 	.word	0x000bb679
 80118a0:	080298e8 	.word	0x080298e8
 80118a4:	3ff00000 	.word	0x3ff00000
 80118a8:	40080000 	.word	0x40080000
 80118ac:	08029908 	.word	0x08029908
 80118b0:	080298f8 	.word	0x080298f8
 80118b4:	a3b3      	add	r3, pc, #716	; (adr r3, 8011b84 <__ieee754_pow+0xa4c>)
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	4640      	mov	r0, r8
 80118bc:	4649      	mov	r1, r9
 80118be:	f7ee fcfd 	bl	80002bc <__adddf3>
 80118c2:	4622      	mov	r2, r4
 80118c4:	ec41 0b1a 	vmov	d10, r0, r1
 80118c8:	462b      	mov	r3, r5
 80118ca:	4630      	mov	r0, r6
 80118cc:	4639      	mov	r1, r7
 80118ce:	f7ee fcf3 	bl	80002b8 <__aeabi_dsub>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	ec51 0b1a 	vmov	r0, r1, d10
 80118da:	f7ef f935 	bl	8000b48 <__aeabi_dcmpgt>
 80118de:	2800      	cmp	r0, #0
 80118e0:	f47f ae04 	bne.w	80114ec <__ieee754_pow+0x3b4>
 80118e4:	4aa2      	ldr	r2, [pc, #648]	; (8011b70 <__ieee754_pow+0xa38>)
 80118e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118ea:	4293      	cmp	r3, r2
 80118ec:	f340 8107 	ble.w	8011afe <__ieee754_pow+0x9c6>
 80118f0:	151b      	asrs	r3, r3, #20
 80118f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80118f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80118fa:	fa4a fa03 	asr.w	sl, sl, r3
 80118fe:	44da      	add	sl, fp
 8011900:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011904:	489b      	ldr	r0, [pc, #620]	; (8011b74 <__ieee754_pow+0xa3c>)
 8011906:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801190a:	4108      	asrs	r0, r1
 801190c:	ea00 030a 	and.w	r3, r0, sl
 8011910:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011914:	f1c1 0114 	rsb	r1, r1, #20
 8011918:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801191c:	fa4a fa01 	asr.w	sl, sl, r1
 8011920:	f1bb 0f00 	cmp.w	fp, #0
 8011924:	f04f 0200 	mov.w	r2, #0
 8011928:	4620      	mov	r0, r4
 801192a:	4629      	mov	r1, r5
 801192c:	bfb8      	it	lt
 801192e:	f1ca 0a00 	rsblt	sl, sl, #0
 8011932:	f7ee fcc1 	bl	80002b8 <__aeabi_dsub>
 8011936:	ec41 0b19 	vmov	d9, r0, r1
 801193a:	4642      	mov	r2, r8
 801193c:	464b      	mov	r3, r9
 801193e:	ec51 0b19 	vmov	r0, r1, d9
 8011942:	f7ee fcbb 	bl	80002bc <__adddf3>
 8011946:	a37a      	add	r3, pc, #488	; (adr r3, 8011b30 <__ieee754_pow+0x9f8>)
 8011948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194c:	2000      	movs	r0, #0
 801194e:	4604      	mov	r4, r0
 8011950:	460d      	mov	r5, r1
 8011952:	f7ee fe69 	bl	8000628 <__aeabi_dmul>
 8011956:	ec53 2b19 	vmov	r2, r3, d9
 801195a:	4606      	mov	r6, r0
 801195c:	460f      	mov	r7, r1
 801195e:	4620      	mov	r0, r4
 8011960:	4629      	mov	r1, r5
 8011962:	f7ee fca9 	bl	80002b8 <__aeabi_dsub>
 8011966:	4602      	mov	r2, r0
 8011968:	460b      	mov	r3, r1
 801196a:	4640      	mov	r0, r8
 801196c:	4649      	mov	r1, r9
 801196e:	f7ee fca3 	bl	80002b8 <__aeabi_dsub>
 8011972:	a371      	add	r3, pc, #452	; (adr r3, 8011b38 <__ieee754_pow+0xa00>)
 8011974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011978:	f7ee fe56 	bl	8000628 <__aeabi_dmul>
 801197c:	a370      	add	r3, pc, #448	; (adr r3, 8011b40 <__ieee754_pow+0xa08>)
 801197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011982:	4680      	mov	r8, r0
 8011984:	4689      	mov	r9, r1
 8011986:	4620      	mov	r0, r4
 8011988:	4629      	mov	r1, r5
 801198a:	f7ee fe4d 	bl	8000628 <__aeabi_dmul>
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	4640      	mov	r0, r8
 8011994:	4649      	mov	r1, r9
 8011996:	f7ee fc91 	bl	80002bc <__adddf3>
 801199a:	4604      	mov	r4, r0
 801199c:	460d      	mov	r5, r1
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	4630      	mov	r0, r6
 80119a4:	4639      	mov	r1, r7
 80119a6:	f7ee fc89 	bl	80002bc <__adddf3>
 80119aa:	4632      	mov	r2, r6
 80119ac:	463b      	mov	r3, r7
 80119ae:	4680      	mov	r8, r0
 80119b0:	4689      	mov	r9, r1
 80119b2:	f7ee fc81 	bl	80002b8 <__aeabi_dsub>
 80119b6:	4602      	mov	r2, r0
 80119b8:	460b      	mov	r3, r1
 80119ba:	4620      	mov	r0, r4
 80119bc:	4629      	mov	r1, r5
 80119be:	f7ee fc7b 	bl	80002b8 <__aeabi_dsub>
 80119c2:	4642      	mov	r2, r8
 80119c4:	4606      	mov	r6, r0
 80119c6:	460f      	mov	r7, r1
 80119c8:	464b      	mov	r3, r9
 80119ca:	4640      	mov	r0, r8
 80119cc:	4649      	mov	r1, r9
 80119ce:	f7ee fe2b 	bl	8000628 <__aeabi_dmul>
 80119d2:	a35d      	add	r3, pc, #372	; (adr r3, 8011b48 <__ieee754_pow+0xa10>)
 80119d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d8:	4604      	mov	r4, r0
 80119da:	460d      	mov	r5, r1
 80119dc:	f7ee fe24 	bl	8000628 <__aeabi_dmul>
 80119e0:	a35b      	add	r3, pc, #364	; (adr r3, 8011b50 <__ieee754_pow+0xa18>)
 80119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e6:	f7ee fc67 	bl	80002b8 <__aeabi_dsub>
 80119ea:	4622      	mov	r2, r4
 80119ec:	462b      	mov	r3, r5
 80119ee:	f7ee fe1b 	bl	8000628 <__aeabi_dmul>
 80119f2:	a359      	add	r3, pc, #356	; (adr r3, 8011b58 <__ieee754_pow+0xa20>)
 80119f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f8:	f7ee fc60 	bl	80002bc <__adddf3>
 80119fc:	4622      	mov	r2, r4
 80119fe:	462b      	mov	r3, r5
 8011a00:	f7ee fe12 	bl	8000628 <__aeabi_dmul>
 8011a04:	a356      	add	r3, pc, #344	; (adr r3, 8011b60 <__ieee754_pow+0xa28>)
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	f7ee fc55 	bl	80002b8 <__aeabi_dsub>
 8011a0e:	4622      	mov	r2, r4
 8011a10:	462b      	mov	r3, r5
 8011a12:	f7ee fe09 	bl	8000628 <__aeabi_dmul>
 8011a16:	a354      	add	r3, pc, #336	; (adr r3, 8011b68 <__ieee754_pow+0xa30>)
 8011a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1c:	f7ee fc4e 	bl	80002bc <__adddf3>
 8011a20:	4622      	mov	r2, r4
 8011a22:	462b      	mov	r3, r5
 8011a24:	f7ee fe00 	bl	8000628 <__aeabi_dmul>
 8011a28:	4602      	mov	r2, r0
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	4649      	mov	r1, r9
 8011a30:	f7ee fc42 	bl	80002b8 <__aeabi_dsub>
 8011a34:	4604      	mov	r4, r0
 8011a36:	460d      	mov	r5, r1
 8011a38:	4602      	mov	r2, r0
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	4640      	mov	r0, r8
 8011a3e:	4649      	mov	r1, r9
 8011a40:	f7ee fdf2 	bl	8000628 <__aeabi_dmul>
 8011a44:	2200      	movs	r2, #0
 8011a46:	ec41 0b19 	vmov	d9, r0, r1
 8011a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a4e:	4620      	mov	r0, r4
 8011a50:	4629      	mov	r1, r5
 8011a52:	f7ee fc31 	bl	80002b8 <__aeabi_dsub>
 8011a56:	4602      	mov	r2, r0
 8011a58:	460b      	mov	r3, r1
 8011a5a:	ec51 0b19 	vmov	r0, r1, d9
 8011a5e:	f7ee ff0d 	bl	800087c <__aeabi_ddiv>
 8011a62:	4632      	mov	r2, r6
 8011a64:	4604      	mov	r4, r0
 8011a66:	460d      	mov	r5, r1
 8011a68:	463b      	mov	r3, r7
 8011a6a:	4640      	mov	r0, r8
 8011a6c:	4649      	mov	r1, r9
 8011a6e:	f7ee fddb 	bl	8000628 <__aeabi_dmul>
 8011a72:	4632      	mov	r2, r6
 8011a74:	463b      	mov	r3, r7
 8011a76:	f7ee fc21 	bl	80002bc <__adddf3>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	4620      	mov	r0, r4
 8011a80:	4629      	mov	r1, r5
 8011a82:	f7ee fc19 	bl	80002b8 <__aeabi_dsub>
 8011a86:	4642      	mov	r2, r8
 8011a88:	464b      	mov	r3, r9
 8011a8a:	f7ee fc15 	bl	80002b8 <__aeabi_dsub>
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4602      	mov	r2, r0
 8011a92:	4939      	ldr	r1, [pc, #228]	; (8011b78 <__ieee754_pow+0xa40>)
 8011a94:	2000      	movs	r0, #0
 8011a96:	f7ee fc0f 	bl	80002b8 <__aeabi_dsub>
 8011a9a:	ec41 0b10 	vmov	d0, r0, r1
 8011a9e:	ee10 3a90 	vmov	r3, s1
 8011aa2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011aaa:	da2b      	bge.n	8011b04 <__ieee754_pow+0x9cc>
 8011aac:	4650      	mov	r0, sl
 8011aae:	f000 fa7f 	bl	8011fb0 <scalbn>
 8011ab2:	ec51 0b10 	vmov	r0, r1, d0
 8011ab6:	ec53 2b18 	vmov	r2, r3, d8
 8011aba:	f7ff bbee 	b.w	801129a <__ieee754_pow+0x162>
 8011abe:	4b2f      	ldr	r3, [pc, #188]	; (8011b7c <__ieee754_pow+0xa44>)
 8011ac0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011ac4:	429e      	cmp	r6, r3
 8011ac6:	f77f af0d 	ble.w	80118e4 <__ieee754_pow+0x7ac>
 8011aca:	4b2d      	ldr	r3, [pc, #180]	; (8011b80 <__ieee754_pow+0xa48>)
 8011acc:	440b      	add	r3, r1
 8011ace:	4303      	orrs	r3, r0
 8011ad0:	d009      	beq.n	8011ae6 <__ieee754_pow+0x9ae>
 8011ad2:	ec51 0b18 	vmov	r0, r1, d8
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	2300      	movs	r3, #0
 8011ada:	f7ef f817 	bl	8000b0c <__aeabi_dcmplt>
 8011ade:	3800      	subs	r0, #0
 8011ae0:	bf18      	it	ne
 8011ae2:	2001      	movne	r0, #1
 8011ae4:	e448      	b.n	8011378 <__ieee754_pow+0x240>
 8011ae6:	4622      	mov	r2, r4
 8011ae8:	462b      	mov	r3, r5
 8011aea:	f7ee fbe5 	bl	80002b8 <__aeabi_dsub>
 8011aee:	4642      	mov	r2, r8
 8011af0:	464b      	mov	r3, r9
 8011af2:	f7ef f81f 	bl	8000b34 <__aeabi_dcmpge>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	f43f aef4 	beq.w	80118e4 <__ieee754_pow+0x7ac>
 8011afc:	e7e9      	b.n	8011ad2 <__ieee754_pow+0x99a>
 8011afe:	f04f 0a00 	mov.w	sl, #0
 8011b02:	e71a      	b.n	801193a <__ieee754_pow+0x802>
 8011b04:	ec51 0b10 	vmov	r0, r1, d0
 8011b08:	4619      	mov	r1, r3
 8011b0a:	e7d4      	b.n	8011ab6 <__ieee754_pow+0x97e>
 8011b0c:	491a      	ldr	r1, [pc, #104]	; (8011b78 <__ieee754_pow+0xa40>)
 8011b0e:	2000      	movs	r0, #0
 8011b10:	f7ff bb31 	b.w	8011176 <__ieee754_pow+0x3e>
 8011b14:	2000      	movs	r0, #0
 8011b16:	2100      	movs	r1, #0
 8011b18:	f7ff bb2d 	b.w	8011176 <__ieee754_pow+0x3e>
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	4639      	mov	r1, r7
 8011b20:	f7ff bb29 	b.w	8011176 <__ieee754_pow+0x3e>
 8011b24:	9204      	str	r2, [sp, #16]
 8011b26:	f7ff bb7b 	b.w	8011220 <__ieee754_pow+0xe8>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f7ff bb65 	b.w	80111fa <__ieee754_pow+0xc2>
 8011b30:	00000000 	.word	0x00000000
 8011b34:	3fe62e43 	.word	0x3fe62e43
 8011b38:	fefa39ef 	.word	0xfefa39ef
 8011b3c:	3fe62e42 	.word	0x3fe62e42
 8011b40:	0ca86c39 	.word	0x0ca86c39
 8011b44:	be205c61 	.word	0xbe205c61
 8011b48:	72bea4d0 	.word	0x72bea4d0
 8011b4c:	3e663769 	.word	0x3e663769
 8011b50:	c5d26bf1 	.word	0xc5d26bf1
 8011b54:	3ebbbd41 	.word	0x3ebbbd41
 8011b58:	af25de2c 	.word	0xaf25de2c
 8011b5c:	3f11566a 	.word	0x3f11566a
 8011b60:	16bebd93 	.word	0x16bebd93
 8011b64:	3f66c16c 	.word	0x3f66c16c
 8011b68:	5555553e 	.word	0x5555553e
 8011b6c:	3fc55555 	.word	0x3fc55555
 8011b70:	3fe00000 	.word	0x3fe00000
 8011b74:	fff00000 	.word	0xfff00000
 8011b78:	3ff00000 	.word	0x3ff00000
 8011b7c:	4090cbff 	.word	0x4090cbff
 8011b80:	3f6f3400 	.word	0x3f6f3400
 8011b84:	652b82fe 	.word	0x652b82fe
 8011b88:	3c971547 	.word	0x3c971547
 8011b8c:	00000000 	.word	0x00000000

08011b90 <__ieee754_rem_pio2>:
 8011b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	ed2d 8b02 	vpush	{d8}
 8011b98:	ec55 4b10 	vmov	r4, r5, d0
 8011b9c:	4bca      	ldr	r3, [pc, #808]	; (8011ec8 <__ieee754_rem_pio2+0x338>)
 8011b9e:	b08b      	sub	sp, #44	; 0x2c
 8011ba0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011ba4:	4598      	cmp	r8, r3
 8011ba6:	4682      	mov	sl, r0
 8011ba8:	9502      	str	r5, [sp, #8]
 8011baa:	dc08      	bgt.n	8011bbe <__ieee754_rem_pio2+0x2e>
 8011bac:	2200      	movs	r2, #0
 8011bae:	2300      	movs	r3, #0
 8011bb0:	ed80 0b00 	vstr	d0, [r0]
 8011bb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011bb8:	f04f 0b00 	mov.w	fp, #0
 8011bbc:	e028      	b.n	8011c10 <__ieee754_rem_pio2+0x80>
 8011bbe:	4bc3      	ldr	r3, [pc, #780]	; (8011ecc <__ieee754_rem_pio2+0x33c>)
 8011bc0:	4598      	cmp	r8, r3
 8011bc2:	dc78      	bgt.n	8011cb6 <__ieee754_rem_pio2+0x126>
 8011bc4:	9b02      	ldr	r3, [sp, #8]
 8011bc6:	4ec2      	ldr	r6, [pc, #776]	; (8011ed0 <__ieee754_rem_pio2+0x340>)
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	ee10 0a10 	vmov	r0, s0
 8011bce:	a3b0      	add	r3, pc, #704	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x300>)
 8011bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	dd39      	ble.n	8011c4c <__ieee754_rem_pio2+0xbc>
 8011bd8:	f7ee fb6e 	bl	80002b8 <__aeabi_dsub>
 8011bdc:	45b0      	cmp	r8, r6
 8011bde:	4604      	mov	r4, r0
 8011be0:	460d      	mov	r5, r1
 8011be2:	d01b      	beq.n	8011c1c <__ieee754_rem_pio2+0x8c>
 8011be4:	a3ac      	add	r3, pc, #688	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x308>)
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	f7ee fb65 	bl	80002b8 <__aeabi_dsub>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	e9ca 2300 	strd	r2, r3, [sl]
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	f7ee fb5d 	bl	80002b8 <__aeabi_dsub>
 8011bfe:	a3a6      	add	r3, pc, #664	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x308>)
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	f7ee fb58 	bl	80002b8 <__aeabi_dsub>
 8011c08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c0c:	f04f 0b01 	mov.w	fp, #1
 8011c10:	4658      	mov	r0, fp
 8011c12:	b00b      	add	sp, #44	; 0x2c
 8011c14:	ecbd 8b02 	vpop	{d8}
 8011c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x310>)
 8011c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c22:	f7ee fb49 	bl	80002b8 <__aeabi_dsub>
 8011c26:	a3a0      	add	r3, pc, #640	; (adr r3, 8011ea8 <__ieee754_rem_pio2+0x318>)
 8011c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	460d      	mov	r5, r1
 8011c30:	f7ee fb42 	bl	80002b8 <__aeabi_dsub>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	e9ca 2300 	strd	r2, r3, [sl]
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	4629      	mov	r1, r5
 8011c40:	f7ee fb3a 	bl	80002b8 <__aeabi_dsub>
 8011c44:	a398      	add	r3, pc, #608	; (adr r3, 8011ea8 <__ieee754_rem_pio2+0x318>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	e7db      	b.n	8011c04 <__ieee754_rem_pio2+0x74>
 8011c4c:	f7ee fb36 	bl	80002bc <__adddf3>
 8011c50:	45b0      	cmp	r8, r6
 8011c52:	4604      	mov	r4, r0
 8011c54:	460d      	mov	r5, r1
 8011c56:	d016      	beq.n	8011c86 <__ieee754_rem_pio2+0xf6>
 8011c58:	a38f      	add	r3, pc, #572	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x308>)
 8011c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5e:	f7ee fb2d 	bl	80002bc <__adddf3>
 8011c62:	4602      	mov	r2, r0
 8011c64:	460b      	mov	r3, r1
 8011c66:	e9ca 2300 	strd	r2, r3, [sl]
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	f7ee fb23 	bl	80002b8 <__aeabi_dsub>
 8011c72:	a389      	add	r3, pc, #548	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x308>)
 8011c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c78:	f7ee fb20 	bl	80002bc <__adddf3>
 8011c7c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011c80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c84:	e7c4      	b.n	8011c10 <__ieee754_rem_pio2+0x80>
 8011c86:	a386      	add	r3, pc, #536	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x310>)
 8011c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8c:	f7ee fb16 	bl	80002bc <__adddf3>
 8011c90:	a385      	add	r3, pc, #532	; (adr r3, 8011ea8 <__ieee754_rem_pio2+0x318>)
 8011c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c96:	4604      	mov	r4, r0
 8011c98:	460d      	mov	r5, r1
 8011c9a:	f7ee fb0f 	bl	80002bc <__adddf3>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	e9ca 2300 	strd	r2, r3, [sl]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	4629      	mov	r1, r5
 8011caa:	f7ee fb05 	bl	80002b8 <__aeabi_dsub>
 8011cae:	a37e      	add	r3, pc, #504	; (adr r3, 8011ea8 <__ieee754_rem_pio2+0x318>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	e7e0      	b.n	8011c78 <__ieee754_rem_pio2+0xe8>
 8011cb6:	4b87      	ldr	r3, [pc, #540]	; (8011ed4 <__ieee754_rem_pio2+0x344>)
 8011cb8:	4598      	cmp	r8, r3
 8011cba:	f300 80d8 	bgt.w	8011e6e <__ieee754_rem_pio2+0x2de>
 8011cbe:	f000 f96d 	bl	8011f9c <fabs>
 8011cc2:	ec55 4b10 	vmov	r4, r5, d0
 8011cc6:	ee10 0a10 	vmov	r0, s0
 8011cca:	a379      	add	r3, pc, #484	; (adr r3, 8011eb0 <__ieee754_rem_pio2+0x320>)
 8011ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd0:	4629      	mov	r1, r5
 8011cd2:	f7ee fca9 	bl	8000628 <__aeabi_dmul>
 8011cd6:	4b80      	ldr	r3, [pc, #512]	; (8011ed8 <__ieee754_rem_pio2+0x348>)
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f7ee faef 	bl	80002bc <__adddf3>
 8011cde:	f7ee ff53 	bl	8000b88 <__aeabi_d2iz>
 8011ce2:	4683      	mov	fp, r0
 8011ce4:	f7ee fc36 	bl	8000554 <__aeabi_i2d>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	ec43 2b18 	vmov	d8, r2, r3
 8011cf0:	a367      	add	r3, pc, #412	; (adr r3, 8011e90 <__ieee754_rem_pio2+0x300>)
 8011cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf6:	f7ee fc97 	bl	8000628 <__aeabi_dmul>
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	460b      	mov	r3, r1
 8011cfe:	4620      	mov	r0, r4
 8011d00:	4629      	mov	r1, r5
 8011d02:	f7ee fad9 	bl	80002b8 <__aeabi_dsub>
 8011d06:	a364      	add	r3, pc, #400	; (adr r3, 8011e98 <__ieee754_rem_pio2+0x308>)
 8011d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	460f      	mov	r7, r1
 8011d10:	ec51 0b18 	vmov	r0, r1, d8
 8011d14:	f7ee fc88 	bl	8000628 <__aeabi_dmul>
 8011d18:	f1bb 0f1f 	cmp.w	fp, #31
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	460d      	mov	r5, r1
 8011d20:	dc0d      	bgt.n	8011d3e <__ieee754_rem_pio2+0x1ae>
 8011d22:	4b6e      	ldr	r3, [pc, #440]	; (8011edc <__ieee754_rem_pio2+0x34c>)
 8011d24:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8011d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d2c:	4543      	cmp	r3, r8
 8011d2e:	d006      	beq.n	8011d3e <__ieee754_rem_pio2+0x1ae>
 8011d30:	4622      	mov	r2, r4
 8011d32:	462b      	mov	r3, r5
 8011d34:	4630      	mov	r0, r6
 8011d36:	4639      	mov	r1, r7
 8011d38:	f7ee fabe 	bl	80002b8 <__aeabi_dsub>
 8011d3c:	e00e      	b.n	8011d5c <__ieee754_rem_pio2+0x1cc>
 8011d3e:	462b      	mov	r3, r5
 8011d40:	4622      	mov	r2, r4
 8011d42:	4630      	mov	r0, r6
 8011d44:	4639      	mov	r1, r7
 8011d46:	f7ee fab7 	bl	80002b8 <__aeabi_dsub>
 8011d4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d4e:	9303      	str	r3, [sp, #12]
 8011d50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d54:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011d58:	2b10      	cmp	r3, #16
 8011d5a:	dc02      	bgt.n	8011d62 <__ieee754_rem_pio2+0x1d2>
 8011d5c:	e9ca 0100 	strd	r0, r1, [sl]
 8011d60:	e039      	b.n	8011dd6 <__ieee754_rem_pio2+0x246>
 8011d62:	a34f      	add	r3, pc, #316	; (adr r3, 8011ea0 <__ieee754_rem_pio2+0x310>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	ec51 0b18 	vmov	r0, r1, d8
 8011d6c:	f7ee fc5c 	bl	8000628 <__aeabi_dmul>
 8011d70:	4604      	mov	r4, r0
 8011d72:	460d      	mov	r5, r1
 8011d74:	4602      	mov	r2, r0
 8011d76:	460b      	mov	r3, r1
 8011d78:	4630      	mov	r0, r6
 8011d7a:	4639      	mov	r1, r7
 8011d7c:	f7ee fa9c 	bl	80002b8 <__aeabi_dsub>
 8011d80:	4602      	mov	r2, r0
 8011d82:	460b      	mov	r3, r1
 8011d84:	4680      	mov	r8, r0
 8011d86:	4689      	mov	r9, r1
 8011d88:	4630      	mov	r0, r6
 8011d8a:	4639      	mov	r1, r7
 8011d8c:	f7ee fa94 	bl	80002b8 <__aeabi_dsub>
 8011d90:	4622      	mov	r2, r4
 8011d92:	462b      	mov	r3, r5
 8011d94:	f7ee fa90 	bl	80002b8 <__aeabi_dsub>
 8011d98:	a343      	add	r3, pc, #268	; (adr r3, 8011ea8 <__ieee754_rem_pio2+0x318>)
 8011d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9e:	4604      	mov	r4, r0
 8011da0:	460d      	mov	r5, r1
 8011da2:	ec51 0b18 	vmov	r0, r1, d8
 8011da6:	f7ee fc3f 	bl	8000628 <__aeabi_dmul>
 8011daa:	4622      	mov	r2, r4
 8011dac:	462b      	mov	r3, r5
 8011dae:	f7ee fa83 	bl	80002b8 <__aeabi_dsub>
 8011db2:	4602      	mov	r2, r0
 8011db4:	460b      	mov	r3, r1
 8011db6:	4604      	mov	r4, r0
 8011db8:	460d      	mov	r5, r1
 8011dba:	4640      	mov	r0, r8
 8011dbc:	4649      	mov	r1, r9
 8011dbe:	f7ee fa7b 	bl	80002b8 <__aeabi_dsub>
 8011dc2:	9a03      	ldr	r2, [sp, #12]
 8011dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	2b31      	cmp	r3, #49	; 0x31
 8011dcc:	dc24      	bgt.n	8011e18 <__ieee754_rem_pio2+0x288>
 8011dce:	e9ca 0100 	strd	r0, r1, [sl]
 8011dd2:	4646      	mov	r6, r8
 8011dd4:	464f      	mov	r7, r9
 8011dd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8011dda:	4630      	mov	r0, r6
 8011ddc:	4642      	mov	r2, r8
 8011dde:	464b      	mov	r3, r9
 8011de0:	4639      	mov	r1, r7
 8011de2:	f7ee fa69 	bl	80002b8 <__aeabi_dsub>
 8011de6:	462b      	mov	r3, r5
 8011de8:	4622      	mov	r2, r4
 8011dea:	f7ee fa65 	bl	80002b8 <__aeabi_dsub>
 8011dee:	9b02      	ldr	r3, [sp, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011df6:	f6bf af0b 	bge.w	8011c10 <__ieee754_rem_pio2+0x80>
 8011dfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011dfe:	f8ca 3004 	str.w	r3, [sl, #4]
 8011e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e06:	f8ca 8000 	str.w	r8, [sl]
 8011e0a:	f8ca 0008 	str.w	r0, [sl, #8]
 8011e0e:	f8ca 300c 	str.w	r3, [sl, #12]
 8011e12:	f1cb 0b00 	rsb	fp, fp, #0
 8011e16:	e6fb      	b.n	8011c10 <__ieee754_rem_pio2+0x80>
 8011e18:	a327      	add	r3, pc, #156	; (adr r3, 8011eb8 <__ieee754_rem_pio2+0x328>)
 8011e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1e:	ec51 0b18 	vmov	r0, r1, d8
 8011e22:	f7ee fc01 	bl	8000628 <__aeabi_dmul>
 8011e26:	4604      	mov	r4, r0
 8011e28:	460d      	mov	r5, r1
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	4640      	mov	r0, r8
 8011e30:	4649      	mov	r1, r9
 8011e32:	f7ee fa41 	bl	80002b8 <__aeabi_dsub>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460f      	mov	r7, r1
 8011e3e:	4640      	mov	r0, r8
 8011e40:	4649      	mov	r1, r9
 8011e42:	f7ee fa39 	bl	80002b8 <__aeabi_dsub>
 8011e46:	4622      	mov	r2, r4
 8011e48:	462b      	mov	r3, r5
 8011e4a:	f7ee fa35 	bl	80002b8 <__aeabi_dsub>
 8011e4e:	a31c      	add	r3, pc, #112	; (adr r3, 8011ec0 <__ieee754_rem_pio2+0x330>)
 8011e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e54:	4604      	mov	r4, r0
 8011e56:	460d      	mov	r5, r1
 8011e58:	ec51 0b18 	vmov	r0, r1, d8
 8011e5c:	f7ee fbe4 	bl	8000628 <__aeabi_dmul>
 8011e60:	4622      	mov	r2, r4
 8011e62:	462b      	mov	r3, r5
 8011e64:	f7ee fa28 	bl	80002b8 <__aeabi_dsub>
 8011e68:	4604      	mov	r4, r0
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	e760      	b.n	8011d30 <__ieee754_rem_pio2+0x1a0>
 8011e6e:	4b1c      	ldr	r3, [pc, #112]	; (8011ee0 <__ieee754_rem_pio2+0x350>)
 8011e70:	4598      	cmp	r8, r3
 8011e72:	dd37      	ble.n	8011ee4 <__ieee754_rem_pio2+0x354>
 8011e74:	ee10 2a10 	vmov	r2, s0
 8011e78:	462b      	mov	r3, r5
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	f7ee fa1b 	bl	80002b8 <__aeabi_dsub>
 8011e82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e86:	e9ca 0100 	strd	r0, r1, [sl]
 8011e8a:	e695      	b.n	8011bb8 <__ieee754_rem_pio2+0x28>
 8011e8c:	f3af 8000 	nop.w
 8011e90:	54400000 	.word	0x54400000
 8011e94:	3ff921fb 	.word	0x3ff921fb
 8011e98:	1a626331 	.word	0x1a626331
 8011e9c:	3dd0b461 	.word	0x3dd0b461
 8011ea0:	1a600000 	.word	0x1a600000
 8011ea4:	3dd0b461 	.word	0x3dd0b461
 8011ea8:	2e037073 	.word	0x2e037073
 8011eac:	3ba3198a 	.word	0x3ba3198a
 8011eb0:	6dc9c883 	.word	0x6dc9c883
 8011eb4:	3fe45f30 	.word	0x3fe45f30
 8011eb8:	2e000000 	.word	0x2e000000
 8011ebc:	3ba3198a 	.word	0x3ba3198a
 8011ec0:	252049c1 	.word	0x252049c1
 8011ec4:	397b839a 	.word	0x397b839a
 8011ec8:	3fe921fb 	.word	0x3fe921fb
 8011ecc:	4002d97b 	.word	0x4002d97b
 8011ed0:	3ff921fb 	.word	0x3ff921fb
 8011ed4:	413921fb 	.word	0x413921fb
 8011ed8:	3fe00000 	.word	0x3fe00000
 8011edc:	08029918 	.word	0x08029918
 8011ee0:	7fefffff 	.word	0x7fefffff
 8011ee4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8011ee8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8011eec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	460d      	mov	r5, r1
 8011ef4:	f7ee fe48 	bl	8000b88 <__aeabi_d2iz>
 8011ef8:	f7ee fb2c 	bl	8000554 <__aeabi_i2d>
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	4620      	mov	r0, r4
 8011f02:	4629      	mov	r1, r5
 8011f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f08:	f7ee f9d6 	bl	80002b8 <__aeabi_dsub>
 8011f0c:	4b21      	ldr	r3, [pc, #132]	; (8011f94 <__ieee754_rem_pio2+0x404>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f7ee fb8a 	bl	8000628 <__aeabi_dmul>
 8011f14:	460d      	mov	r5, r1
 8011f16:	4604      	mov	r4, r0
 8011f18:	f7ee fe36 	bl	8000b88 <__aeabi_d2iz>
 8011f1c:	f7ee fb1a 	bl	8000554 <__aeabi_i2d>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4620      	mov	r0, r4
 8011f26:	4629      	mov	r1, r5
 8011f28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f2c:	f7ee f9c4 	bl	80002b8 <__aeabi_dsub>
 8011f30:	4b18      	ldr	r3, [pc, #96]	; (8011f94 <__ieee754_rem_pio2+0x404>)
 8011f32:	2200      	movs	r2, #0
 8011f34:	f7ee fb78 	bl	8000628 <__aeabi_dmul>
 8011f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011f40:	2703      	movs	r7, #3
 8011f42:	2400      	movs	r4, #0
 8011f44:	2500      	movs	r5, #0
 8011f46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8011f4a:	4622      	mov	r2, r4
 8011f4c:	462b      	mov	r3, r5
 8011f4e:	46b9      	mov	r9, r7
 8011f50:	3f01      	subs	r7, #1
 8011f52:	f7ee fdd1 	bl	8000af8 <__aeabi_dcmpeq>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d1f5      	bne.n	8011f46 <__ieee754_rem_pio2+0x3b6>
 8011f5a:	4b0f      	ldr	r3, [pc, #60]	; (8011f98 <__ieee754_rem_pio2+0x408>)
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	2302      	movs	r3, #2
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	4632      	mov	r2, r6
 8011f64:	464b      	mov	r3, r9
 8011f66:	4651      	mov	r1, sl
 8011f68:	a804      	add	r0, sp, #16
 8011f6a:	f000 f8d1 	bl	8012110 <__kernel_rem_pio2>
 8011f6e:	9b02      	ldr	r3, [sp, #8]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	4683      	mov	fp, r0
 8011f74:	f6bf ae4c 	bge.w	8011c10 <__ieee754_rem_pio2+0x80>
 8011f78:	e9da 2100 	ldrd	r2, r1, [sl]
 8011f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f80:	e9ca 2300 	strd	r2, r3, [sl]
 8011f84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011f88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011f90:	e73f      	b.n	8011e12 <__ieee754_rem_pio2+0x282>
 8011f92:	bf00      	nop
 8011f94:	41700000 	.word	0x41700000
 8011f98:	08029998 	.word	0x08029998

08011f9c <fabs>:
 8011f9c:	ec51 0b10 	vmov	r0, r1, d0
 8011fa0:	ee10 2a10 	vmov	r2, s0
 8011fa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011fa8:	ec43 2b10 	vmov	d0, r2, r3
 8011fac:	4770      	bx	lr
	...

08011fb0 <scalbn>:
 8011fb0:	b570      	push	{r4, r5, r6, lr}
 8011fb2:	ec55 4b10 	vmov	r4, r5, d0
 8011fb6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011fba:	4606      	mov	r6, r0
 8011fbc:	462b      	mov	r3, r5
 8011fbe:	b999      	cbnz	r1, 8011fe8 <scalbn+0x38>
 8011fc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011fc4:	4323      	orrs	r3, r4
 8011fc6:	d03f      	beq.n	8012048 <scalbn+0x98>
 8011fc8:	4b35      	ldr	r3, [pc, #212]	; (80120a0 <scalbn+0xf0>)
 8011fca:	4629      	mov	r1, r5
 8011fcc:	ee10 0a10 	vmov	r0, s0
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f7ee fb29 	bl	8000628 <__aeabi_dmul>
 8011fd6:	4b33      	ldr	r3, [pc, #204]	; (80120a4 <scalbn+0xf4>)
 8011fd8:	429e      	cmp	r6, r3
 8011fda:	4604      	mov	r4, r0
 8011fdc:	460d      	mov	r5, r1
 8011fde:	da10      	bge.n	8012002 <scalbn+0x52>
 8011fe0:	a327      	add	r3, pc, #156	; (adr r3, 8012080 <scalbn+0xd0>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	e01f      	b.n	8012028 <scalbn+0x78>
 8011fe8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011fec:	4291      	cmp	r1, r2
 8011fee:	d10c      	bne.n	801200a <scalbn+0x5a>
 8011ff0:	ee10 2a10 	vmov	r2, s0
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	f7ee f960 	bl	80002bc <__adddf3>
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	460d      	mov	r5, r1
 8012000:	e022      	b.n	8012048 <scalbn+0x98>
 8012002:	460b      	mov	r3, r1
 8012004:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012008:	3936      	subs	r1, #54	; 0x36
 801200a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801200e:	4296      	cmp	r6, r2
 8012010:	dd0d      	ble.n	801202e <scalbn+0x7e>
 8012012:	2d00      	cmp	r5, #0
 8012014:	a11c      	add	r1, pc, #112	; (adr r1, 8012088 <scalbn+0xd8>)
 8012016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801201a:	da02      	bge.n	8012022 <scalbn+0x72>
 801201c:	a11c      	add	r1, pc, #112	; (adr r1, 8012090 <scalbn+0xe0>)
 801201e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012022:	a319      	add	r3, pc, #100	; (adr r3, 8012088 <scalbn+0xd8>)
 8012024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012028:	f7ee fafe 	bl	8000628 <__aeabi_dmul>
 801202c:	e7e6      	b.n	8011ffc <scalbn+0x4c>
 801202e:	1872      	adds	r2, r6, r1
 8012030:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012034:	428a      	cmp	r2, r1
 8012036:	dcec      	bgt.n	8012012 <scalbn+0x62>
 8012038:	2a00      	cmp	r2, #0
 801203a:	dd08      	ble.n	801204e <scalbn+0x9e>
 801203c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012040:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012044:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012048:	ec45 4b10 	vmov	d0, r4, r5
 801204c:	bd70      	pop	{r4, r5, r6, pc}
 801204e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012052:	da08      	bge.n	8012066 <scalbn+0xb6>
 8012054:	2d00      	cmp	r5, #0
 8012056:	a10a      	add	r1, pc, #40	; (adr r1, 8012080 <scalbn+0xd0>)
 8012058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801205c:	dac0      	bge.n	8011fe0 <scalbn+0x30>
 801205e:	a10e      	add	r1, pc, #56	; (adr r1, 8012098 <scalbn+0xe8>)
 8012060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012064:	e7bc      	b.n	8011fe0 <scalbn+0x30>
 8012066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801206a:	3236      	adds	r2, #54	; 0x36
 801206c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012070:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012074:	4620      	mov	r0, r4
 8012076:	4b0c      	ldr	r3, [pc, #48]	; (80120a8 <scalbn+0xf8>)
 8012078:	2200      	movs	r2, #0
 801207a:	e7d5      	b.n	8012028 <scalbn+0x78>
 801207c:	f3af 8000 	nop.w
 8012080:	c2f8f359 	.word	0xc2f8f359
 8012084:	01a56e1f 	.word	0x01a56e1f
 8012088:	8800759c 	.word	0x8800759c
 801208c:	7e37e43c 	.word	0x7e37e43c
 8012090:	8800759c 	.word	0x8800759c
 8012094:	fe37e43c 	.word	0xfe37e43c
 8012098:	c2f8f359 	.word	0xc2f8f359
 801209c:	81a56e1f 	.word	0x81a56e1f
 80120a0:	43500000 	.word	0x43500000
 80120a4:	ffff3cb0 	.word	0xffff3cb0
 80120a8:	3c900000 	.word	0x3c900000

080120ac <with_errno>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	4604      	mov	r4, r0
 80120b0:	460d      	mov	r5, r1
 80120b2:	4616      	mov	r6, r2
 80120b4:	f7fa fb60 	bl	800c778 <__errno>
 80120b8:	4629      	mov	r1, r5
 80120ba:	6006      	str	r6, [r0, #0]
 80120bc:	4620      	mov	r0, r4
 80120be:	bd70      	pop	{r4, r5, r6, pc}

080120c0 <xflow>:
 80120c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120c2:	4614      	mov	r4, r2
 80120c4:	461d      	mov	r5, r3
 80120c6:	b108      	cbz	r0, 80120cc <xflow+0xc>
 80120c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80120cc:	e9cd 2300 	strd	r2, r3, [sp]
 80120d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120d4:	4620      	mov	r0, r4
 80120d6:	4629      	mov	r1, r5
 80120d8:	f7ee faa6 	bl	8000628 <__aeabi_dmul>
 80120dc:	2222      	movs	r2, #34	; 0x22
 80120de:	b003      	add	sp, #12
 80120e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120e4:	f7ff bfe2 	b.w	80120ac <with_errno>

080120e8 <__math_uflow>:
 80120e8:	b508      	push	{r3, lr}
 80120ea:	2200      	movs	r2, #0
 80120ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80120f0:	f7ff ffe6 	bl	80120c0 <xflow>
 80120f4:	ec41 0b10 	vmov	d0, r0, r1
 80120f8:	bd08      	pop	{r3, pc}

080120fa <__math_oflow>:
 80120fa:	b508      	push	{r3, lr}
 80120fc:	2200      	movs	r2, #0
 80120fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012102:	f7ff ffdd 	bl	80120c0 <xflow>
 8012106:	ec41 0b10 	vmov	d0, r0, r1
 801210a:	bd08      	pop	{r3, pc}
 801210c:	0000      	movs	r0, r0
	...

08012110 <__kernel_rem_pio2>:
 8012110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	ed2d 8b02 	vpush	{d8}
 8012118:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801211c:	f112 0f14 	cmn.w	r2, #20
 8012120:	9306      	str	r3, [sp, #24]
 8012122:	9104      	str	r1, [sp, #16]
 8012124:	4bc2      	ldr	r3, [pc, #776]	; (8012430 <__kernel_rem_pio2+0x320>)
 8012126:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012128:	9009      	str	r0, [sp, #36]	; 0x24
 801212a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	9b06      	ldr	r3, [sp, #24]
 8012132:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012136:	bfa8      	it	ge
 8012138:	1ed4      	subge	r4, r2, #3
 801213a:	9305      	str	r3, [sp, #20]
 801213c:	bfb2      	itee	lt
 801213e:	2400      	movlt	r4, #0
 8012140:	2318      	movge	r3, #24
 8012142:	fb94 f4f3 	sdivge	r4, r4, r3
 8012146:	f06f 0317 	mvn.w	r3, #23
 801214a:	fb04 3303 	mla	r3, r4, r3, r3
 801214e:	eb03 0a02 	add.w	sl, r3, r2
 8012152:	9b00      	ldr	r3, [sp, #0]
 8012154:	9a05      	ldr	r2, [sp, #20]
 8012156:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8012420 <__kernel_rem_pio2+0x310>
 801215a:	eb03 0802 	add.w	r8, r3, r2
 801215e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012160:	1aa7      	subs	r7, r4, r2
 8012162:	ae20      	add	r6, sp, #128	; 0x80
 8012164:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012168:	2500      	movs	r5, #0
 801216a:	4545      	cmp	r5, r8
 801216c:	dd13      	ble.n	8012196 <__kernel_rem_pio2+0x86>
 801216e:	9b06      	ldr	r3, [sp, #24]
 8012170:	aa20      	add	r2, sp, #128	; 0x80
 8012172:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012176:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801217a:	f04f 0800 	mov.w	r8, #0
 801217e:	9b00      	ldr	r3, [sp, #0]
 8012180:	4598      	cmp	r8, r3
 8012182:	dc31      	bgt.n	80121e8 <__kernel_rem_pio2+0xd8>
 8012184:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8012420 <__kernel_rem_pio2+0x310>
 8012188:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801218c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012190:	462f      	mov	r7, r5
 8012192:	2600      	movs	r6, #0
 8012194:	e01b      	b.n	80121ce <__kernel_rem_pio2+0xbe>
 8012196:	42ef      	cmn	r7, r5
 8012198:	d407      	bmi.n	80121aa <__kernel_rem_pio2+0x9a>
 801219a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801219e:	f7ee f9d9 	bl	8000554 <__aeabi_i2d>
 80121a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121a6:	3501      	adds	r5, #1
 80121a8:	e7df      	b.n	801216a <__kernel_rem_pio2+0x5a>
 80121aa:	ec51 0b18 	vmov	r0, r1, d8
 80121ae:	e7f8      	b.n	80121a2 <__kernel_rem_pio2+0x92>
 80121b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80121b8:	f7ee fa36 	bl	8000628 <__aeabi_dmul>
 80121bc:	4602      	mov	r2, r0
 80121be:	460b      	mov	r3, r1
 80121c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121c4:	f7ee f87a 	bl	80002bc <__adddf3>
 80121c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121cc:	3601      	adds	r6, #1
 80121ce:	9b05      	ldr	r3, [sp, #20]
 80121d0:	429e      	cmp	r6, r3
 80121d2:	f1a7 0708 	sub.w	r7, r7, #8
 80121d6:	ddeb      	ble.n	80121b0 <__kernel_rem_pio2+0xa0>
 80121d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121dc:	f108 0801 	add.w	r8, r8, #1
 80121e0:	ecab 7b02 	vstmia	fp!, {d7}
 80121e4:	3508      	adds	r5, #8
 80121e6:	e7ca      	b.n	801217e <__kernel_rem_pio2+0x6e>
 80121e8:	9b00      	ldr	r3, [sp, #0]
 80121ea:	aa0c      	add	r2, sp, #48	; 0x30
 80121ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80121f2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80121f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80121f8:	9c00      	ldr	r4, [sp, #0]
 80121fa:	930a      	str	r3, [sp, #40]	; 0x28
 80121fc:	00e3      	lsls	r3, r4, #3
 80121fe:	9308      	str	r3, [sp, #32]
 8012200:	ab98      	add	r3, sp, #608	; 0x260
 8012202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012206:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801220a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801220e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012210:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012214:	46c3      	mov	fp, r8
 8012216:	46a1      	mov	r9, r4
 8012218:	f1b9 0f00 	cmp.w	r9, #0
 801221c:	f1a5 0508 	sub.w	r5, r5, #8
 8012220:	dc77      	bgt.n	8012312 <__kernel_rem_pio2+0x202>
 8012222:	ec47 6b10 	vmov	d0, r6, r7
 8012226:	4650      	mov	r0, sl
 8012228:	f7ff fec2 	bl	8011fb0 <scalbn>
 801222c:	ec57 6b10 	vmov	r6, r7, d0
 8012230:	2200      	movs	r2, #0
 8012232:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012236:	ee10 0a10 	vmov	r0, s0
 801223a:	4639      	mov	r1, r7
 801223c:	f7ee f9f4 	bl	8000628 <__aeabi_dmul>
 8012240:	ec41 0b10 	vmov	d0, r0, r1
 8012244:	f000 fab4 	bl	80127b0 <floor>
 8012248:	4b7a      	ldr	r3, [pc, #488]	; (8012434 <__kernel_rem_pio2+0x324>)
 801224a:	ec51 0b10 	vmov	r0, r1, d0
 801224e:	2200      	movs	r2, #0
 8012250:	f7ee f9ea 	bl	8000628 <__aeabi_dmul>
 8012254:	4602      	mov	r2, r0
 8012256:	460b      	mov	r3, r1
 8012258:	4630      	mov	r0, r6
 801225a:	4639      	mov	r1, r7
 801225c:	f7ee f82c 	bl	80002b8 <__aeabi_dsub>
 8012260:	460f      	mov	r7, r1
 8012262:	4606      	mov	r6, r0
 8012264:	f7ee fc90 	bl	8000b88 <__aeabi_d2iz>
 8012268:	9002      	str	r0, [sp, #8]
 801226a:	f7ee f973 	bl	8000554 <__aeabi_i2d>
 801226e:	4602      	mov	r2, r0
 8012270:	460b      	mov	r3, r1
 8012272:	4630      	mov	r0, r6
 8012274:	4639      	mov	r1, r7
 8012276:	f7ee f81f 	bl	80002b8 <__aeabi_dsub>
 801227a:	f1ba 0f00 	cmp.w	sl, #0
 801227e:	4606      	mov	r6, r0
 8012280:	460f      	mov	r7, r1
 8012282:	dd6d      	ble.n	8012360 <__kernel_rem_pio2+0x250>
 8012284:	1e61      	subs	r1, r4, #1
 8012286:	ab0c      	add	r3, sp, #48	; 0x30
 8012288:	9d02      	ldr	r5, [sp, #8]
 801228a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801228e:	f1ca 0018 	rsb	r0, sl, #24
 8012292:	fa43 f200 	asr.w	r2, r3, r0
 8012296:	4415      	add	r5, r2
 8012298:	4082      	lsls	r2, r0
 801229a:	1a9b      	subs	r3, r3, r2
 801229c:	aa0c      	add	r2, sp, #48	; 0x30
 801229e:	9502      	str	r5, [sp, #8]
 80122a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80122a4:	f1ca 0217 	rsb	r2, sl, #23
 80122a8:	fa43 fb02 	asr.w	fp, r3, r2
 80122ac:	f1bb 0f00 	cmp.w	fp, #0
 80122b0:	dd65      	ble.n	801237e <__kernel_rem_pio2+0x26e>
 80122b2:	9b02      	ldr	r3, [sp, #8]
 80122b4:	2200      	movs	r2, #0
 80122b6:	3301      	adds	r3, #1
 80122b8:	9302      	str	r3, [sp, #8]
 80122ba:	4615      	mov	r5, r2
 80122bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80122c0:	4294      	cmp	r4, r2
 80122c2:	f300 809f 	bgt.w	8012404 <__kernel_rem_pio2+0x2f4>
 80122c6:	f1ba 0f00 	cmp.w	sl, #0
 80122ca:	dd07      	ble.n	80122dc <__kernel_rem_pio2+0x1cc>
 80122cc:	f1ba 0f01 	cmp.w	sl, #1
 80122d0:	f000 80c1 	beq.w	8012456 <__kernel_rem_pio2+0x346>
 80122d4:	f1ba 0f02 	cmp.w	sl, #2
 80122d8:	f000 80c7 	beq.w	801246a <__kernel_rem_pio2+0x35a>
 80122dc:	f1bb 0f02 	cmp.w	fp, #2
 80122e0:	d14d      	bne.n	801237e <__kernel_rem_pio2+0x26e>
 80122e2:	4632      	mov	r2, r6
 80122e4:	463b      	mov	r3, r7
 80122e6:	4954      	ldr	r1, [pc, #336]	; (8012438 <__kernel_rem_pio2+0x328>)
 80122e8:	2000      	movs	r0, #0
 80122ea:	f7ed ffe5 	bl	80002b8 <__aeabi_dsub>
 80122ee:	4606      	mov	r6, r0
 80122f0:	460f      	mov	r7, r1
 80122f2:	2d00      	cmp	r5, #0
 80122f4:	d043      	beq.n	801237e <__kernel_rem_pio2+0x26e>
 80122f6:	4650      	mov	r0, sl
 80122f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8012428 <__kernel_rem_pio2+0x318>
 80122fc:	f7ff fe58 	bl	8011fb0 <scalbn>
 8012300:	4630      	mov	r0, r6
 8012302:	4639      	mov	r1, r7
 8012304:	ec53 2b10 	vmov	r2, r3, d0
 8012308:	f7ed ffd6 	bl	80002b8 <__aeabi_dsub>
 801230c:	4606      	mov	r6, r0
 801230e:	460f      	mov	r7, r1
 8012310:	e035      	b.n	801237e <__kernel_rem_pio2+0x26e>
 8012312:	4b4a      	ldr	r3, [pc, #296]	; (801243c <__kernel_rem_pio2+0x32c>)
 8012314:	2200      	movs	r2, #0
 8012316:	4630      	mov	r0, r6
 8012318:	4639      	mov	r1, r7
 801231a:	f7ee f985 	bl	8000628 <__aeabi_dmul>
 801231e:	f7ee fc33 	bl	8000b88 <__aeabi_d2iz>
 8012322:	f7ee f917 	bl	8000554 <__aeabi_i2d>
 8012326:	4602      	mov	r2, r0
 8012328:	460b      	mov	r3, r1
 801232a:	ec43 2b18 	vmov	d8, r2, r3
 801232e:	4b44      	ldr	r3, [pc, #272]	; (8012440 <__kernel_rem_pio2+0x330>)
 8012330:	2200      	movs	r2, #0
 8012332:	f7ee f979 	bl	8000628 <__aeabi_dmul>
 8012336:	4602      	mov	r2, r0
 8012338:	460b      	mov	r3, r1
 801233a:	4630      	mov	r0, r6
 801233c:	4639      	mov	r1, r7
 801233e:	f7ed ffbb 	bl	80002b8 <__aeabi_dsub>
 8012342:	f7ee fc21 	bl	8000b88 <__aeabi_d2iz>
 8012346:	e9d5 2300 	ldrd	r2, r3, [r5]
 801234a:	f84b 0b04 	str.w	r0, [fp], #4
 801234e:	ec51 0b18 	vmov	r0, r1, d8
 8012352:	f7ed ffb3 	bl	80002bc <__adddf3>
 8012356:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801235a:	4606      	mov	r6, r0
 801235c:	460f      	mov	r7, r1
 801235e:	e75b      	b.n	8012218 <__kernel_rem_pio2+0x108>
 8012360:	d106      	bne.n	8012370 <__kernel_rem_pio2+0x260>
 8012362:	1e63      	subs	r3, r4, #1
 8012364:	aa0c      	add	r2, sp, #48	; 0x30
 8012366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801236a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801236e:	e79d      	b.n	80122ac <__kernel_rem_pio2+0x19c>
 8012370:	4b34      	ldr	r3, [pc, #208]	; (8012444 <__kernel_rem_pio2+0x334>)
 8012372:	2200      	movs	r2, #0
 8012374:	f7ee fbde 	bl	8000b34 <__aeabi_dcmpge>
 8012378:	2800      	cmp	r0, #0
 801237a:	d140      	bne.n	80123fe <__kernel_rem_pio2+0x2ee>
 801237c:	4683      	mov	fp, r0
 801237e:	2200      	movs	r2, #0
 8012380:	2300      	movs	r3, #0
 8012382:	4630      	mov	r0, r6
 8012384:	4639      	mov	r1, r7
 8012386:	f7ee fbb7 	bl	8000af8 <__aeabi_dcmpeq>
 801238a:	2800      	cmp	r0, #0
 801238c:	f000 80c1 	beq.w	8012512 <__kernel_rem_pio2+0x402>
 8012390:	1e65      	subs	r5, r4, #1
 8012392:	462b      	mov	r3, r5
 8012394:	2200      	movs	r2, #0
 8012396:	9900      	ldr	r1, [sp, #0]
 8012398:	428b      	cmp	r3, r1
 801239a:	da6d      	bge.n	8012478 <__kernel_rem_pio2+0x368>
 801239c:	2a00      	cmp	r2, #0
 801239e:	f000 808a 	beq.w	80124b6 <__kernel_rem_pio2+0x3a6>
 80123a2:	ab0c      	add	r3, sp, #48	; 0x30
 80123a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80123a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 80ae 	beq.w	801250e <__kernel_rem_pio2+0x3fe>
 80123b2:	4650      	mov	r0, sl
 80123b4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012428 <__kernel_rem_pio2+0x318>
 80123b8:	f7ff fdfa 	bl	8011fb0 <scalbn>
 80123bc:	1c6b      	adds	r3, r5, #1
 80123be:	00da      	lsls	r2, r3, #3
 80123c0:	9205      	str	r2, [sp, #20]
 80123c2:	ec57 6b10 	vmov	r6, r7, d0
 80123c6:	aa70      	add	r2, sp, #448	; 0x1c0
 80123c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801243c <__kernel_rem_pio2+0x32c>
 80123cc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80123d0:	462c      	mov	r4, r5
 80123d2:	f04f 0800 	mov.w	r8, #0
 80123d6:	2c00      	cmp	r4, #0
 80123d8:	f280 80d4 	bge.w	8012584 <__kernel_rem_pio2+0x474>
 80123dc:	462c      	mov	r4, r5
 80123de:	2c00      	cmp	r4, #0
 80123e0:	f2c0 8102 	blt.w	80125e8 <__kernel_rem_pio2+0x4d8>
 80123e4:	4b18      	ldr	r3, [pc, #96]	; (8012448 <__kernel_rem_pio2+0x338>)
 80123e6:	461e      	mov	r6, r3
 80123e8:	ab70      	add	r3, sp, #448	; 0x1c0
 80123ea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80123ee:	1b2b      	subs	r3, r5, r4
 80123f0:	f04f 0900 	mov.w	r9, #0
 80123f4:	f04f 0a00 	mov.w	sl, #0
 80123f8:	2700      	movs	r7, #0
 80123fa:	9306      	str	r3, [sp, #24]
 80123fc:	e0e6      	b.n	80125cc <__kernel_rem_pio2+0x4bc>
 80123fe:	f04f 0b02 	mov.w	fp, #2
 8012402:	e756      	b.n	80122b2 <__kernel_rem_pio2+0x1a2>
 8012404:	f8d8 3000 	ldr.w	r3, [r8]
 8012408:	bb05      	cbnz	r5, 801244c <__kernel_rem_pio2+0x33c>
 801240a:	b123      	cbz	r3, 8012416 <__kernel_rem_pio2+0x306>
 801240c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012410:	f8c8 3000 	str.w	r3, [r8]
 8012414:	2301      	movs	r3, #1
 8012416:	3201      	adds	r2, #1
 8012418:	f108 0804 	add.w	r8, r8, #4
 801241c:	461d      	mov	r5, r3
 801241e:	e74f      	b.n	80122c0 <__kernel_rem_pio2+0x1b0>
	...
 801242c:	3ff00000 	.word	0x3ff00000
 8012430:	08029ae0 	.word	0x08029ae0
 8012434:	40200000 	.word	0x40200000
 8012438:	3ff00000 	.word	0x3ff00000
 801243c:	3e700000 	.word	0x3e700000
 8012440:	41700000 	.word	0x41700000
 8012444:	3fe00000 	.word	0x3fe00000
 8012448:	08029aa0 	.word	0x08029aa0
 801244c:	1acb      	subs	r3, r1, r3
 801244e:	f8c8 3000 	str.w	r3, [r8]
 8012452:	462b      	mov	r3, r5
 8012454:	e7df      	b.n	8012416 <__kernel_rem_pio2+0x306>
 8012456:	1e62      	subs	r2, r4, #1
 8012458:	ab0c      	add	r3, sp, #48	; 0x30
 801245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801245e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012462:	a90c      	add	r1, sp, #48	; 0x30
 8012464:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012468:	e738      	b.n	80122dc <__kernel_rem_pio2+0x1cc>
 801246a:	1e62      	subs	r2, r4, #1
 801246c:	ab0c      	add	r3, sp, #48	; 0x30
 801246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012472:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012476:	e7f4      	b.n	8012462 <__kernel_rem_pio2+0x352>
 8012478:	a90c      	add	r1, sp, #48	; 0x30
 801247a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801247e:	3b01      	subs	r3, #1
 8012480:	430a      	orrs	r2, r1
 8012482:	e788      	b.n	8012396 <__kernel_rem_pio2+0x286>
 8012484:	3301      	adds	r3, #1
 8012486:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801248a:	2900      	cmp	r1, #0
 801248c:	d0fa      	beq.n	8012484 <__kernel_rem_pio2+0x374>
 801248e:	9a08      	ldr	r2, [sp, #32]
 8012490:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012494:	446a      	add	r2, sp
 8012496:	3a98      	subs	r2, #152	; 0x98
 8012498:	9208      	str	r2, [sp, #32]
 801249a:	9a06      	ldr	r2, [sp, #24]
 801249c:	a920      	add	r1, sp, #128	; 0x80
 801249e:	18a2      	adds	r2, r4, r2
 80124a0:	18e3      	adds	r3, r4, r3
 80124a2:	f104 0801 	add.w	r8, r4, #1
 80124a6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80124aa:	9302      	str	r3, [sp, #8]
 80124ac:	9b02      	ldr	r3, [sp, #8]
 80124ae:	4543      	cmp	r3, r8
 80124b0:	da04      	bge.n	80124bc <__kernel_rem_pio2+0x3ac>
 80124b2:	461c      	mov	r4, r3
 80124b4:	e6a2      	b.n	80121fc <__kernel_rem_pio2+0xec>
 80124b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124b8:	2301      	movs	r3, #1
 80124ba:	e7e4      	b.n	8012486 <__kernel_rem_pio2+0x376>
 80124bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80124c2:	f7ee f847 	bl	8000554 <__aeabi_i2d>
 80124c6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80124ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124cc:	46ab      	mov	fp, r5
 80124ce:	461c      	mov	r4, r3
 80124d0:	f04f 0900 	mov.w	r9, #0
 80124d4:	2600      	movs	r6, #0
 80124d6:	2700      	movs	r7, #0
 80124d8:	9b05      	ldr	r3, [sp, #20]
 80124da:	4599      	cmp	r9, r3
 80124dc:	dd06      	ble.n	80124ec <__kernel_rem_pio2+0x3dc>
 80124de:	9b08      	ldr	r3, [sp, #32]
 80124e0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80124e4:	f108 0801 	add.w	r8, r8, #1
 80124e8:	9308      	str	r3, [sp, #32]
 80124ea:	e7df      	b.n	80124ac <__kernel_rem_pio2+0x39c>
 80124ec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80124f0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80124f4:	f7ee f898 	bl	8000628 <__aeabi_dmul>
 80124f8:	4602      	mov	r2, r0
 80124fa:	460b      	mov	r3, r1
 80124fc:	4630      	mov	r0, r6
 80124fe:	4639      	mov	r1, r7
 8012500:	f7ed fedc 	bl	80002bc <__adddf3>
 8012504:	f109 0901 	add.w	r9, r9, #1
 8012508:	4606      	mov	r6, r0
 801250a:	460f      	mov	r7, r1
 801250c:	e7e4      	b.n	80124d8 <__kernel_rem_pio2+0x3c8>
 801250e:	3d01      	subs	r5, #1
 8012510:	e747      	b.n	80123a2 <__kernel_rem_pio2+0x292>
 8012512:	ec47 6b10 	vmov	d0, r6, r7
 8012516:	f1ca 0000 	rsb	r0, sl, #0
 801251a:	f7ff fd49 	bl	8011fb0 <scalbn>
 801251e:	ec57 6b10 	vmov	r6, r7, d0
 8012522:	4ba0      	ldr	r3, [pc, #640]	; (80127a4 <__kernel_rem_pio2+0x694>)
 8012524:	ee10 0a10 	vmov	r0, s0
 8012528:	2200      	movs	r2, #0
 801252a:	4639      	mov	r1, r7
 801252c:	f7ee fb02 	bl	8000b34 <__aeabi_dcmpge>
 8012530:	b1f8      	cbz	r0, 8012572 <__kernel_rem_pio2+0x462>
 8012532:	4b9d      	ldr	r3, [pc, #628]	; (80127a8 <__kernel_rem_pio2+0x698>)
 8012534:	2200      	movs	r2, #0
 8012536:	4630      	mov	r0, r6
 8012538:	4639      	mov	r1, r7
 801253a:	f7ee f875 	bl	8000628 <__aeabi_dmul>
 801253e:	f7ee fb23 	bl	8000b88 <__aeabi_d2iz>
 8012542:	4680      	mov	r8, r0
 8012544:	f7ee f806 	bl	8000554 <__aeabi_i2d>
 8012548:	4b96      	ldr	r3, [pc, #600]	; (80127a4 <__kernel_rem_pio2+0x694>)
 801254a:	2200      	movs	r2, #0
 801254c:	f7ee f86c 	bl	8000628 <__aeabi_dmul>
 8012550:	460b      	mov	r3, r1
 8012552:	4602      	mov	r2, r0
 8012554:	4639      	mov	r1, r7
 8012556:	4630      	mov	r0, r6
 8012558:	f7ed feae 	bl	80002b8 <__aeabi_dsub>
 801255c:	f7ee fb14 	bl	8000b88 <__aeabi_d2iz>
 8012560:	1c65      	adds	r5, r4, #1
 8012562:	ab0c      	add	r3, sp, #48	; 0x30
 8012564:	f10a 0a18 	add.w	sl, sl, #24
 8012568:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801256c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012570:	e71f      	b.n	80123b2 <__kernel_rem_pio2+0x2a2>
 8012572:	4630      	mov	r0, r6
 8012574:	4639      	mov	r1, r7
 8012576:	f7ee fb07 	bl	8000b88 <__aeabi_d2iz>
 801257a:	ab0c      	add	r3, sp, #48	; 0x30
 801257c:	4625      	mov	r5, r4
 801257e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012582:	e716      	b.n	80123b2 <__kernel_rem_pio2+0x2a2>
 8012584:	ab0c      	add	r3, sp, #48	; 0x30
 8012586:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801258a:	f7ed ffe3 	bl	8000554 <__aeabi_i2d>
 801258e:	4632      	mov	r2, r6
 8012590:	463b      	mov	r3, r7
 8012592:	f7ee f849 	bl	8000628 <__aeabi_dmul>
 8012596:	4642      	mov	r2, r8
 8012598:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801259c:	464b      	mov	r3, r9
 801259e:	4630      	mov	r0, r6
 80125a0:	4639      	mov	r1, r7
 80125a2:	f7ee f841 	bl	8000628 <__aeabi_dmul>
 80125a6:	3c01      	subs	r4, #1
 80125a8:	4606      	mov	r6, r0
 80125aa:	460f      	mov	r7, r1
 80125ac:	e713      	b.n	80123d6 <__kernel_rem_pio2+0x2c6>
 80125ae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80125b2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80125b6:	f7ee f837 	bl	8000628 <__aeabi_dmul>
 80125ba:	4602      	mov	r2, r0
 80125bc:	460b      	mov	r3, r1
 80125be:	4648      	mov	r0, r9
 80125c0:	4651      	mov	r1, sl
 80125c2:	f7ed fe7b 	bl	80002bc <__adddf3>
 80125c6:	3701      	adds	r7, #1
 80125c8:	4681      	mov	r9, r0
 80125ca:	468a      	mov	sl, r1
 80125cc:	9b00      	ldr	r3, [sp, #0]
 80125ce:	429f      	cmp	r7, r3
 80125d0:	dc02      	bgt.n	80125d8 <__kernel_rem_pio2+0x4c8>
 80125d2:	9b06      	ldr	r3, [sp, #24]
 80125d4:	429f      	cmp	r7, r3
 80125d6:	ddea      	ble.n	80125ae <__kernel_rem_pio2+0x49e>
 80125d8:	9a06      	ldr	r2, [sp, #24]
 80125da:	ab48      	add	r3, sp, #288	; 0x120
 80125dc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80125e0:	e9c6 9a00 	strd	r9, sl, [r6]
 80125e4:	3c01      	subs	r4, #1
 80125e6:	e6fa      	b.n	80123de <__kernel_rem_pio2+0x2ce>
 80125e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80125ea:	2b02      	cmp	r3, #2
 80125ec:	dc0b      	bgt.n	8012606 <__kernel_rem_pio2+0x4f6>
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	dc39      	bgt.n	8012666 <__kernel_rem_pio2+0x556>
 80125f2:	d05d      	beq.n	80126b0 <__kernel_rem_pio2+0x5a0>
 80125f4:	9b02      	ldr	r3, [sp, #8]
 80125f6:	f003 0007 	and.w	r0, r3, #7
 80125fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80125fe:	ecbd 8b02 	vpop	{d8}
 8012602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012606:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012608:	2b03      	cmp	r3, #3
 801260a:	d1f3      	bne.n	80125f4 <__kernel_rem_pio2+0x4e4>
 801260c:	9b05      	ldr	r3, [sp, #20]
 801260e:	9500      	str	r5, [sp, #0]
 8012610:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012614:	eb0d 0403 	add.w	r4, sp, r3
 8012618:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801261c:	46a2      	mov	sl, r4
 801261e:	9b00      	ldr	r3, [sp, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	f1aa 0a08 	sub.w	sl, sl, #8
 8012626:	dc69      	bgt.n	80126fc <__kernel_rem_pio2+0x5ec>
 8012628:	46aa      	mov	sl, r5
 801262a:	f1ba 0f01 	cmp.w	sl, #1
 801262e:	f1a4 0408 	sub.w	r4, r4, #8
 8012632:	f300 8083 	bgt.w	801273c <__kernel_rem_pio2+0x62c>
 8012636:	9c05      	ldr	r4, [sp, #20]
 8012638:	ab48      	add	r3, sp, #288	; 0x120
 801263a:	441c      	add	r4, r3
 801263c:	2000      	movs	r0, #0
 801263e:	2100      	movs	r1, #0
 8012640:	2d01      	cmp	r5, #1
 8012642:	f300 809a 	bgt.w	801277a <__kernel_rem_pio2+0x66a>
 8012646:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801264a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801264e:	f1bb 0f00 	cmp.w	fp, #0
 8012652:	f040 8098 	bne.w	8012786 <__kernel_rem_pio2+0x676>
 8012656:	9b04      	ldr	r3, [sp, #16]
 8012658:	e9c3 7800 	strd	r7, r8, [r3]
 801265c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012660:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012664:	e7c6      	b.n	80125f4 <__kernel_rem_pio2+0x4e4>
 8012666:	9e05      	ldr	r6, [sp, #20]
 8012668:	ab48      	add	r3, sp, #288	; 0x120
 801266a:	441e      	add	r6, r3
 801266c:	462c      	mov	r4, r5
 801266e:	2000      	movs	r0, #0
 8012670:	2100      	movs	r1, #0
 8012672:	2c00      	cmp	r4, #0
 8012674:	da33      	bge.n	80126de <__kernel_rem_pio2+0x5ce>
 8012676:	f1bb 0f00 	cmp.w	fp, #0
 801267a:	d036      	beq.n	80126ea <__kernel_rem_pio2+0x5da>
 801267c:	4602      	mov	r2, r0
 801267e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012682:	9c04      	ldr	r4, [sp, #16]
 8012684:	e9c4 2300 	strd	r2, r3, [r4]
 8012688:	4602      	mov	r2, r0
 801268a:	460b      	mov	r3, r1
 801268c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012690:	f7ed fe12 	bl	80002b8 <__aeabi_dsub>
 8012694:	ae4a      	add	r6, sp, #296	; 0x128
 8012696:	2401      	movs	r4, #1
 8012698:	42a5      	cmp	r5, r4
 801269a:	da29      	bge.n	80126f0 <__kernel_rem_pio2+0x5e0>
 801269c:	f1bb 0f00 	cmp.w	fp, #0
 80126a0:	d002      	beq.n	80126a8 <__kernel_rem_pio2+0x598>
 80126a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126a6:	4619      	mov	r1, r3
 80126a8:	9b04      	ldr	r3, [sp, #16]
 80126aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80126ae:	e7a1      	b.n	80125f4 <__kernel_rem_pio2+0x4e4>
 80126b0:	9c05      	ldr	r4, [sp, #20]
 80126b2:	ab48      	add	r3, sp, #288	; 0x120
 80126b4:	441c      	add	r4, r3
 80126b6:	2000      	movs	r0, #0
 80126b8:	2100      	movs	r1, #0
 80126ba:	2d00      	cmp	r5, #0
 80126bc:	da09      	bge.n	80126d2 <__kernel_rem_pio2+0x5c2>
 80126be:	f1bb 0f00 	cmp.w	fp, #0
 80126c2:	d002      	beq.n	80126ca <__kernel_rem_pio2+0x5ba>
 80126c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126c8:	4619      	mov	r1, r3
 80126ca:	9b04      	ldr	r3, [sp, #16]
 80126cc:	e9c3 0100 	strd	r0, r1, [r3]
 80126d0:	e790      	b.n	80125f4 <__kernel_rem_pio2+0x4e4>
 80126d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126d6:	f7ed fdf1 	bl	80002bc <__adddf3>
 80126da:	3d01      	subs	r5, #1
 80126dc:	e7ed      	b.n	80126ba <__kernel_rem_pio2+0x5aa>
 80126de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80126e2:	f7ed fdeb 	bl	80002bc <__adddf3>
 80126e6:	3c01      	subs	r4, #1
 80126e8:	e7c3      	b.n	8012672 <__kernel_rem_pio2+0x562>
 80126ea:	4602      	mov	r2, r0
 80126ec:	460b      	mov	r3, r1
 80126ee:	e7c8      	b.n	8012682 <__kernel_rem_pio2+0x572>
 80126f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80126f4:	f7ed fde2 	bl	80002bc <__adddf3>
 80126f8:	3401      	adds	r4, #1
 80126fa:	e7cd      	b.n	8012698 <__kernel_rem_pio2+0x588>
 80126fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8012700:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012704:	9b00      	ldr	r3, [sp, #0]
 8012706:	3b01      	subs	r3, #1
 8012708:	9300      	str	r3, [sp, #0]
 801270a:	4632      	mov	r2, r6
 801270c:	463b      	mov	r3, r7
 801270e:	4640      	mov	r0, r8
 8012710:	4649      	mov	r1, r9
 8012712:	f7ed fdd3 	bl	80002bc <__adddf3>
 8012716:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801271a:	4602      	mov	r2, r0
 801271c:	460b      	mov	r3, r1
 801271e:	4640      	mov	r0, r8
 8012720:	4649      	mov	r1, r9
 8012722:	f7ed fdc9 	bl	80002b8 <__aeabi_dsub>
 8012726:	4632      	mov	r2, r6
 8012728:	463b      	mov	r3, r7
 801272a:	f7ed fdc7 	bl	80002bc <__adddf3>
 801272e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012732:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012736:	ed8a 7b00 	vstr	d7, [sl]
 801273a:	e770      	b.n	801261e <__kernel_rem_pio2+0x50e>
 801273c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012740:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012744:	4640      	mov	r0, r8
 8012746:	4632      	mov	r2, r6
 8012748:	463b      	mov	r3, r7
 801274a:	4649      	mov	r1, r9
 801274c:	f7ed fdb6 	bl	80002bc <__adddf3>
 8012750:	e9cd 0100 	strd	r0, r1, [sp]
 8012754:	4602      	mov	r2, r0
 8012756:	460b      	mov	r3, r1
 8012758:	4640      	mov	r0, r8
 801275a:	4649      	mov	r1, r9
 801275c:	f7ed fdac 	bl	80002b8 <__aeabi_dsub>
 8012760:	4632      	mov	r2, r6
 8012762:	463b      	mov	r3, r7
 8012764:	f7ed fdaa 	bl	80002bc <__adddf3>
 8012768:	ed9d 7b00 	vldr	d7, [sp]
 801276c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012770:	ed84 7b00 	vstr	d7, [r4]
 8012774:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012778:	e757      	b.n	801262a <__kernel_rem_pio2+0x51a>
 801277a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801277e:	f7ed fd9d 	bl	80002bc <__adddf3>
 8012782:	3d01      	subs	r5, #1
 8012784:	e75c      	b.n	8012640 <__kernel_rem_pio2+0x530>
 8012786:	9b04      	ldr	r3, [sp, #16]
 8012788:	9a04      	ldr	r2, [sp, #16]
 801278a:	601f      	str	r7, [r3, #0]
 801278c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012790:	605c      	str	r4, [r3, #4]
 8012792:	609d      	str	r5, [r3, #8]
 8012794:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012798:	60d3      	str	r3, [r2, #12]
 801279a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801279e:	6110      	str	r0, [r2, #16]
 80127a0:	6153      	str	r3, [r2, #20]
 80127a2:	e727      	b.n	80125f4 <__kernel_rem_pio2+0x4e4>
 80127a4:	41700000 	.word	0x41700000
 80127a8:	3e700000 	.word	0x3e700000
 80127ac:	00000000 	.word	0x00000000

080127b0 <floor>:
 80127b0:	ec51 0b10 	vmov	r0, r1, d0
 80127b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80127b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80127c0:	2e13      	cmp	r6, #19
 80127c2:	ee10 5a10 	vmov	r5, s0
 80127c6:	ee10 8a10 	vmov	r8, s0
 80127ca:	460c      	mov	r4, r1
 80127cc:	dc31      	bgt.n	8012832 <floor+0x82>
 80127ce:	2e00      	cmp	r6, #0
 80127d0:	da14      	bge.n	80127fc <floor+0x4c>
 80127d2:	a333      	add	r3, pc, #204	; (adr r3, 80128a0 <floor+0xf0>)
 80127d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d8:	f7ed fd70 	bl	80002bc <__adddf3>
 80127dc:	2200      	movs	r2, #0
 80127de:	2300      	movs	r3, #0
 80127e0:	f7ee f9b2 	bl	8000b48 <__aeabi_dcmpgt>
 80127e4:	b138      	cbz	r0, 80127f6 <floor+0x46>
 80127e6:	2c00      	cmp	r4, #0
 80127e8:	da53      	bge.n	8012892 <floor+0xe2>
 80127ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80127ee:	4325      	orrs	r5, r4
 80127f0:	d052      	beq.n	8012898 <floor+0xe8>
 80127f2:	4c2d      	ldr	r4, [pc, #180]	; (80128a8 <floor+0xf8>)
 80127f4:	2500      	movs	r5, #0
 80127f6:	4621      	mov	r1, r4
 80127f8:	4628      	mov	r0, r5
 80127fa:	e024      	b.n	8012846 <floor+0x96>
 80127fc:	4f2b      	ldr	r7, [pc, #172]	; (80128ac <floor+0xfc>)
 80127fe:	4137      	asrs	r7, r6
 8012800:	ea01 0307 	and.w	r3, r1, r7
 8012804:	4303      	orrs	r3, r0
 8012806:	d01e      	beq.n	8012846 <floor+0x96>
 8012808:	a325      	add	r3, pc, #148	; (adr r3, 80128a0 <floor+0xf0>)
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ed fd55 	bl	80002bc <__adddf3>
 8012812:	2200      	movs	r2, #0
 8012814:	2300      	movs	r3, #0
 8012816:	f7ee f997 	bl	8000b48 <__aeabi_dcmpgt>
 801281a:	2800      	cmp	r0, #0
 801281c:	d0eb      	beq.n	80127f6 <floor+0x46>
 801281e:	2c00      	cmp	r4, #0
 8012820:	bfbe      	ittt	lt
 8012822:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012826:	4133      	asrlt	r3, r6
 8012828:	18e4      	addlt	r4, r4, r3
 801282a:	ea24 0407 	bic.w	r4, r4, r7
 801282e:	2500      	movs	r5, #0
 8012830:	e7e1      	b.n	80127f6 <floor+0x46>
 8012832:	2e33      	cmp	r6, #51	; 0x33
 8012834:	dd0b      	ble.n	801284e <floor+0x9e>
 8012836:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801283a:	d104      	bne.n	8012846 <floor+0x96>
 801283c:	ee10 2a10 	vmov	r2, s0
 8012840:	460b      	mov	r3, r1
 8012842:	f7ed fd3b 	bl	80002bc <__adddf3>
 8012846:	ec41 0b10 	vmov	d0, r0, r1
 801284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8012852:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012856:	40df      	lsrs	r7, r3
 8012858:	4238      	tst	r0, r7
 801285a:	d0f4      	beq.n	8012846 <floor+0x96>
 801285c:	a310      	add	r3, pc, #64	; (adr r3, 80128a0 <floor+0xf0>)
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	f7ed fd2b 	bl	80002bc <__adddf3>
 8012866:	2200      	movs	r2, #0
 8012868:	2300      	movs	r3, #0
 801286a:	f7ee f96d 	bl	8000b48 <__aeabi_dcmpgt>
 801286e:	2800      	cmp	r0, #0
 8012870:	d0c1      	beq.n	80127f6 <floor+0x46>
 8012872:	2c00      	cmp	r4, #0
 8012874:	da0a      	bge.n	801288c <floor+0xdc>
 8012876:	2e14      	cmp	r6, #20
 8012878:	d101      	bne.n	801287e <floor+0xce>
 801287a:	3401      	adds	r4, #1
 801287c:	e006      	b.n	801288c <floor+0xdc>
 801287e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012882:	2301      	movs	r3, #1
 8012884:	40b3      	lsls	r3, r6
 8012886:	441d      	add	r5, r3
 8012888:	45a8      	cmp	r8, r5
 801288a:	d8f6      	bhi.n	801287a <floor+0xca>
 801288c:	ea25 0507 	bic.w	r5, r5, r7
 8012890:	e7b1      	b.n	80127f6 <floor+0x46>
 8012892:	2500      	movs	r5, #0
 8012894:	462c      	mov	r4, r5
 8012896:	e7ae      	b.n	80127f6 <floor+0x46>
 8012898:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801289c:	e7ab      	b.n	80127f6 <floor+0x46>
 801289e:	bf00      	nop
 80128a0:	8800759c 	.word	0x8800759c
 80128a4:	7e37e43c 	.word	0x7e37e43c
 80128a8:	bff00000 	.word	0xbff00000
 80128ac:	000fffff 	.word	0x000fffff

080128b0 <_init>:
 80128b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b2:	bf00      	nop
 80128b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128b6:	bc08      	pop	{r3}
 80128b8:	469e      	mov	lr, r3
 80128ba:	4770      	bx	lr

080128bc <_fini>:
 80128bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128be:	bf00      	nop
 80128c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128c2:	bc08      	pop	{r3}
 80128c4:	469e      	mov	lr, r3
 80128c6:	4770      	bx	lr
