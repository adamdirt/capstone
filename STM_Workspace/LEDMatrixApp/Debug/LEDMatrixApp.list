
LEDMatrixApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015d78  08009e80  08009e80  00019e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fbf8  0801fbf8  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801fbf8  0801fbf8  0002fbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc00  0801fc00  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc00  0801fc00  0002fc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc04  0801fc04  0002fc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801fc08  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035ec  20000080  0801fc88  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000366c  0801fc88  0003366c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0f3  00000000  00000000  00030143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a2  00000000  00000000  0003e236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  000402d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f4  00000000  00000000  00040e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173c4  00000000  00000000  0004173c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f855  00000000  00000000  00058b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a730  00000000  00000000  00068355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003868  00000000  00000000  000f2a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000f62f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009e68 	.word	0x08009e68

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08009e68 	.word	0x08009e68

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b970 	b.w	8000e98 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	460f      	mov	r7, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14a      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4694      	mov	ip, r2
 8000be4:	d965      	bls.n	8000cb2 <__udivmoddi4+0xe2>
 8000be6:	fab2 f382 	clz	r3, r2
 8000bea:	b143      	cbz	r3, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf0:	f1c3 0220 	rsb	r2, r3, #32
 8000bf4:	409f      	lsls	r7, r3
 8000bf6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfa:	4317      	orrs	r7, r2
 8000bfc:	409c      	lsls	r4, r3
 8000bfe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c02:	fa1f f58c 	uxth.w	r5, ip
 8000c06:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0a:	0c22      	lsrs	r2, r4, #16
 8000c0c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c14:	fb01 f005 	mul.w	r0, r1, r5
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x62>
 8000c1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c20:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c24:	f080 811c 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f240 8119 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c2e:	3902      	subs	r1, #2
 8000c30:	4462      	add	r2, ip
 8000c32:	1a12      	subs	r2, r2, r0
 8000c34:	b2a4      	uxth	r4, r4
 8000c36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c42:	fb00 f505 	mul.w	r5, r0, r5
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x90>
 8000c4a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c52:	f080 8107 	bcs.w	8000e64 <__udivmoddi4+0x294>
 8000c56:	42a5      	cmp	r5, r4
 8000c58:	f240 8104 	bls.w	8000e64 <__udivmoddi4+0x294>
 8000c5c:	4464      	add	r4, ip
 8000c5e:	3802      	subs	r0, #2
 8000c60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	2100      	movs	r1, #0
 8000c68:	b11e      	cbz	r6, 8000c72 <__udivmoddi4+0xa2>
 8000c6a:	40dc      	lsrs	r4, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0xbc>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80ed 	beq.w	8000e5a <__udivmoddi4+0x28a>
 8000c80:	2100      	movs	r1, #0
 8000c82:	e9c6 0500 	strd	r0, r5, [r6]
 8000c86:	4608      	mov	r0, r1
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	fab3 f183 	clz	r1, r3
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d149      	bne.n	8000d28 <__udivmoddi4+0x158>
 8000c94:	42ab      	cmp	r3, r5
 8000c96:	d302      	bcc.n	8000c9e <__udivmoddi4+0xce>
 8000c98:	4282      	cmp	r2, r0
 8000c9a:	f200 80f8 	bhi.w	8000e8e <__udivmoddi4+0x2be>
 8000c9e:	1a84      	subs	r4, r0, r2
 8000ca0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4617      	mov	r7, r2
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d0e2      	beq.n	8000c72 <__udivmoddi4+0xa2>
 8000cac:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb0:	e7df      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000cb2:	b902      	cbnz	r2, 8000cb6 <__udivmoddi4+0xe6>
 8000cb4:	deff      	udf	#255	; 0xff
 8000cb6:	fab2 f382 	clz	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc0:	1a8a      	subs	r2, r1, r2
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2101      	movs	r1, #1
 8000ccc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cda:	fb0e f005 	mul.w	r0, lr, r5
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4290      	cmp	r0, r2
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2b8>
 8000cf2:	4645      	mov	r5, r8
 8000cf4:	1a12      	subs	r2, r2, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cfc:	fb07 2210 	mls	r2, r7, r0, r2
 8000d00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x14e>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x14c>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2c2>
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d26:	e79f      	b.n	8000c68 <__udivmoddi4+0x98>
 8000d28:	f1c1 0720 	rsb	r7, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3e:	40fd      	lsrs	r5, r7
 8000d40:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d44:	4323      	orrs	r3, r4
 8000d46:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d58:	fb08 f50e 	mul.w	r5, r8, lr
 8000d5c:	42a5      	cmp	r5, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	fa00 f001 	lsl.w	r0, r0, r1
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2b4>
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2b4>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4464      	add	r4, ip
 8000d80:	1b64      	subs	r4, r4, r5
 8000d82:	b29d      	uxth	r5, r3
 8000d84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d88:	fb09 4413 	mls	r4, r9, r3, r4
 8000d8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d90:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d94:	45a6      	cmp	lr, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2ac>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2ac>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dae:	fba3 9502 	umull	r9, r5, r3, r2
 8000db2:	eba4 040e 	sub.w	r4, r4, lr
 8000db6:	42ac      	cmp	r4, r5
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46ae      	mov	lr, r5
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x29c>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x298>
 8000dc0:	b156      	cbz	r6, 8000dd8 <__udivmoddi4+0x208>
 8000dc2:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dca:	fa04 f707 	lsl.w	r7, r4, r7
 8000dce:	40ca      	lsrs	r2, r1
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	4317      	orrs	r7, r2
 8000dd4:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	f1c3 0120 	rsb	r1, r3, #32
 8000de4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dec:	fa25 f101 	lsr.w	r1, r5, r1
 8000df0:	409d      	lsls	r5, r3
 8000df2:	432a      	orrs	r2, r5
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e00:	fb07 1510 	mls	r5, r7, r0, r1
 8000e04:	0c11      	lsrs	r1, r2, #16
 8000e06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0e:	428d      	cmp	r5, r1
 8000e10:	fa04 f403 	lsl.w	r4, r4, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x258>
 8000e16:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e20:	428d      	cmp	r5, r1
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4461      	add	r1, ip
 8000e28:	1b49      	subs	r1, r1, r5
 8000e2a:	b292      	uxth	r2, r2
 8000e2c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e30:	fb07 1115 	mls	r1, r7, r5, r1
 8000e34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e38:	fb05 f10e 	mul.w	r1, r5, lr
 8000e3c:	4291      	cmp	r1, r2
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x282>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4a:	4291      	cmp	r1, r2
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	3d02      	subs	r5, #2
 8000e50:	4462      	add	r2, ip
 8000e52:	1a52      	subs	r2, r2, r1
 8000e54:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0xfc>
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e708      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000e60:	4639      	mov	r1, r7
 8000e62:	e6e6      	b.n	8000c32 <__udivmoddi4+0x62>
 8000e64:	4610      	mov	r0, r2
 8000e66:	e6fb      	b.n	8000c60 <__udivmoddi4+0x90>
 8000e68:	4548      	cmp	r0, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e74:	3b01      	subs	r3, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e78:	4645      	mov	r5, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x282>
 8000e7c:	462b      	mov	r3, r5
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x258>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e88:	3d02      	subs	r5, #2
 8000e8a:	4462      	add	r2, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e70a      	b.n	8000ca8 <__udivmoddi4+0xd8>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x14e>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fcc0 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f80c 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 f8f8 	bl	800109c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eac:	f000 f874 	bl	8000f98 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f8a0 	bl	8000ff4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000eb4:	f000 f8c8 	bl	8001048 <MX_USART6_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  matrix_app_main();
 8000eb8:	f000 fc22 	bl	8001700 <matrix_app_main>
 8000ebc:	e7fc      	b.n	8000eb8 <main+0x1c>
	...

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	; 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fdbe 	bl	8007a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <SystemClock_Config+0xd0>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <SystemClock_Config+0xd0>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <SystemClock_Config+0xd0>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <SystemClock_Config+0xd4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <SystemClock_Config+0xd4>)
 8000f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <SystemClock_Config+0xd4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f34:	2310      	movs	r3, #16
 8000f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f42:	2307      	movs	r3, #7
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f9a6 	bl	800329c <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f56:	f000 f963 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2102      	movs	r1, #2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fc08 	bl	800378c <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f82:	f000 f94d 	bl	8001220 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	; 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <MX_I2C1_Init+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fa4:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x58>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd6:	f001 f83b 	bl	8002050 <HAL_I2C_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe0:	f000 f91e 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	00061a80 	.word	0x00061a80

08000ff4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f002 fdce 	bl	8003bcc <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f8f3 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000f0 	.word	0x200000f0
 8001044:	40004400 	.word	0x40004400

08001048 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART6_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART6_UART_Init+0x4c>)
 8001080:	f002 fda4 	bl	8003bcc <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f000 f8c9 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000134 	.word	0x20000134
 8001098:	40011400 	.word	0x40011400

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <MX_GPIO_Init+0x174>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a55      	ldr	r2, [pc, #340]	; (8001210 <MX_GPIO_Init+0x174>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <MX_GPIO_Init+0x174>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <MX_GPIO_Init+0x174>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <MX_GPIO_Init+0x174>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <MX_GPIO_Init+0x174>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <MX_GPIO_Init+0x174>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a47      	ldr	r2, [pc, #284]	; (8001210 <MX_GPIO_Init+0x174>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b45      	ldr	r3, [pc, #276]	; (8001210 <MX_GPIO_Init+0x174>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <MX_GPIO_Init+0x174>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a40      	ldr	r2, [pc, #256]	; (8001210 <MX_GPIO_Init+0x174>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <MX_GPIO_Init+0x174>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLEX_SPI_I2C_N_Pin|LPn1_Pin|LPn2_Pin|LPn3_Pin
 8001122:	2200      	movs	r2, #0
 8001124:	f242 010f 	movw	r1, #8207	; 0x200f
 8001128:	483a      	ldr	r0, [pc, #232]	; (8001214 <MX_GPIO_Init+0x178>)
 800112a:	f000 ff39 	bl	8001fa0 <HAL_GPIO_WritePin>
                          |LPn4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	4839      	ldr	r0, [pc, #228]	; (8001218 <MX_GPIO_Init+0x17c>)
 8001134:	f000 ff34 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2111      	movs	r1, #17
 800113c:	4837      	ldr	r0, [pc, #220]	; (800121c <MX_GPIO_Init+0x180>)
 800113e:	f000 ff2f 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_C_GPIO_Port, I2C_RST_C_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2108      	movs	r1, #8
 8001146:	4835      	ldr	r0, [pc, #212]	; (800121c <MX_GPIO_Init+0x180>)
 8001148:	f000 ff2a 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLEX_SPI_I2C_N_Pin LPn3_Pin */
  GPIO_InitStruct.Pin = FLEX_SPI_I2C_N_Pin|LPn3_Pin;
 800114c:	f242 0304 	movw	r3, #8196	; 0x2004
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	482b      	ldr	r0, [pc, #172]	; (8001214 <MX_GPIO_Init+0x178>)
 8001166:	f000 fd97 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn4_Pin;
 800116a:	230b      	movs	r3, #11
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4824      	ldr	r0, [pc, #144]	; (8001214 <MX_GPIO_Init+0x178>)
 8001182:	f000 fd89 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_C_Pin INT1_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8001186:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 800118a:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	481e      	ldr	r0, [pc, #120]	; (8001218 <MX_GPIO_Init+0x17c>)
 800119e:	f000 fd7b 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a2:	2320      	movs	r3, #32
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <MX_GPIO_Init+0x17c>)
 80011ba:	f000 fd6d 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_C_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|LPn_C_Pin;
 80011be:	2311      	movs	r3, #17
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4811      	ldr	r0, [pc, #68]	; (800121c <MX_GPIO_Init+0x180>)
 80011d6:	f000 fd5f 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_C_Pin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 80011da:	2308      	movs	r3, #8
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <MX_GPIO_Init+0x180>)
 80011f2:	f000 fd51 	bl	8001c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200a      	movs	r0, #10
 80011fc:	f000 fc83 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001200:	200a      	movs	r0, #10
 8001202:	f000 fc9c 	bl	8001b3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <HAL_MspInit+0x4c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126a:	2007      	movs	r0, #7
 800126c:	f000 fc40 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_I2C_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12c      	bne.n	80012f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c0:	2312      	movs	r3, #18
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012cc:	2304      	movs	r3, #4
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <HAL_I2C_MspInit+0x8c>)
 80012d8:	f000 fcde 	bl	8001c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ea:	6413      	str	r3, [r2, #64]	; 0x40
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_I2C_MspInit+0x88>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40005400 	.word	0x40005400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <HAL_UART_MspInit+0xf8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d134      	bne.n	8001398 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_UART_MspInit+0xfc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_UART_MspInit+0xfc>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <HAL_UART_MspInit+0xfc>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_UART_MspInit+0xfc>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <HAL_UART_MspInit+0xfc>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_UART_MspInit+0xfc>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001366:	230c      	movs	r3, #12
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001376:	2307      	movs	r3, #7
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4822      	ldr	r0, [pc, #136]	; (800140c <HAL_UART_MspInit+0x100>)
 8001382:	f000 fc89 	bl	8001c98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2026      	movs	r0, #38	; 0x26
 800138c:	f000 fbbb 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001390:	2026      	movs	r0, #38	; 0x26
 8001392:	f000 fbd4 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001396:	e031      	b.n	80013fc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_UART_MspInit+0x104>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12c      	bne.n	80013fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_UART_MspInit+0xfc>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_UART_MspInit+0xfc>)
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0xfc>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0xfc>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_UART_MspInit+0xfc>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0xfc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013ec:	2308      	movs	r3, #8
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x100>)
 80013f8:	f000 fc4e 	bl	8001c98 <HAL_GPIO_Init>
}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40011400 	.word	0x40011400

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 fa32 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 800146c:	2010      	movs	r0, #16
 800146e:	f000 fdcb 	bl	8002008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f002 fbf3 	bl	8003c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000f0 	.word	0x200000f0

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <init_tof>:
GW_proc_t gest_predictor;
HT_proc_t hand_tracker;
SEN_data_t sensor_data;


uint8_t init_tof(VL53LMZ_Configuration	*config){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

	config->platform.address = VL53LMZ_DEFAULT_I2C_ADDRESS;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2252      	movs	r2, #82	; 0x52
 80014c0:	801a      	strh	r2, [r3, #0]

	status |= vl53lmz_init(config);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f003 ff34 	bl	8005330 <vl53lmz_init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	f000 fa17 	bl	8001908 <HAL_Delay>
	//TODO more initialization
	status |= vl53lmz_set_resolution(config, VL53LMZ_RESOLUTION_8X8);
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f004 fefb 	bl	80062d8 <vl53lmz_set_resolution>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	73fb      	strb	r3, [r7, #15]
	status |= vl53lmz_set_ranging_frequency_hz(config, 15);
 80014ec:	210f      	movs	r1, #15
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f004 ffc6 	bl	8006480 <vl53lmz_set_ranging_frequency_hz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(500);
 80014fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001502:	f000 fa01 	bl	8001908 <HAL_Delay>

	return status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <init_tracking>:

uint8_t init_tracking(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]

	status |= HT_init(&hand_tracker, &sensor_data);
 800151a:	4914      	ldr	r1, [pc, #80]	; (800156c <init_tracking+0x5c>)
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <init_tracking+0x60>)
 800151e:	f005 fae5 	bl	8006aec <HT_init>
 8001522:	4603      	mov	r3, r0
 8001524:	b25a      	sxtb	r2, r3
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	4313      	orrs	r3, r2
 800152c:	b25b      	sxtb	r3, r3
 800152e:	71fb      	strb	r3, [r7, #7]

	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53LMZ_RESOLUTION_8X8);
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <init_tracking+0x5c>)
 8001534:	480e      	ldr	r0, [pc, #56]	; (8001570 <init_tracking+0x60>)
 8001536:	f005 fb93 	bl	8006c60 <HT_set_square_resolution>
 800153a:	4603      	mov	r3, r0
 800153c:	b25a      	sxtb	r2, r3
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	4313      	orrs	r3, r2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	71fb      	strb	r3, [r7, #7]

	status |= HT_set_frequency(&hand_tracker, &sensor_data, 15);
 8001548:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <init_tracking+0x5c>)
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <init_tracking+0x60>)
 8001550:	f005 fb12 	bl	8006b78 <HT_set_frequency>
 8001554:	4603      	mov	r3, r0
 8001556:	b25a      	sxtb	r2, r3
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4313      	orrs	r3, r2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	71fb      	strb	r3, [r7, #7]

	return status;
 8001562:	79fb      	ldrb	r3, [r7, #7]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20003250 	.word	0x20003250
 8001570:	20002a98 	.word	0x20002a98

08001574 <select_target_index>:

	return status;
}

int* select_target_index(int *target_indices, int zone_index, VL53LMZ_ResultsData *pRangingData)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	(void) pRangingData;
	target_indices[0] = zone_index * VL53LMZ_NB_TARGET_PER_ZONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
	return target_indices;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <sample_once>:

uint8_t sample_once(VL53LMZ_Configuration* config, VL53LMZ_ResultsData* results){
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
	uint8_t is_ready = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73bb      	strb	r3, [r7, #14]

	while(is_ready == 0){ // poll ;)
 80015a6:	e00a      	b.n	80015be <sample_once+0x2a>
		status |= vl53lmz_check_data_ready(config, &is_ready);
 80015a8:	f107 030e 	add.w	r3, r7, #14
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f004 fca2 	bl	8005ef8 <vl53lmz_check_data_ready>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	73fb      	strb	r3, [r7, #15]
	while(is_ready == 0){ // poll ;)
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f1      	beq.n	80015a8 <sample_once+0x14>
	}
	vl53lmz_get_ranging_data(config, results);
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f004 fcec 	bl	8005fa4 <vl53lmz_get_ranging_data>

	return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <SEN_CopyRangingData>:

uint8_t SEN_CopyRangingData(SEN_data_t* pDest, VL53LMZ_ResultsData *pRangingData)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	float ranging, peak;
	bool valid;
	int idx, result, nb_targets, target_idx[3], target_status;

	if (pDest == NULL || pRangingData == NULL) return -1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <SEN_CopyRangingData+0x16>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <SEN_CopyRangingData+0x1a>
 80015ee:	23ff      	movs	r3, #255	; 0xff
 80015f0:	e07e      	b.n	80016f0 <SEN_CopyRangingData+0x118>

	pDest->timestamp_ms = GET_TIME_STAMP();
 80015f2:	f000 f97d 	bl	80018f0 <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	61da      	str	r2, [r3, #28]

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001602:	e06f      	b.n	80016e4 <SEN_CopyRangingData+0x10c>
	{
		select_target_index(target_idx, idx, pRangingData);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffb1 	bl	8001574 <select_target_index>

		ranging = pRangingData->distance_mm[target_idx[0]]/4.0; // Signed 14.2
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff2a 	bl	800047c <__aeabi_i2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <SEN_CopyRangingData+0x120>)
 800162e:	f7ff f8b9 	bl	80007a4 <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa61 	bl	8000b00 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28

		peak = pRangingData->signal_per_spad[target_idx[0]]/2048.0; // Unsigned 21.11
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	3390      	adds	r3, #144	; 0x90
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff04 	bl	800045c <__aeabi_ui2d>
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <SEN_CopyRangingData+0x124>)
 800165a:	f7ff f8a3 	bl	80007a4 <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa4b 	bl	8000b00 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
		nb_targets = pRangingData->nb_target_detected[idx];
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	4413      	add	r3, r2
 8001674:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	623b      	str	r3, [r7, #32]
		target_status = pRangingData->target_status[target_idx[0]];
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8001686:	61fb      	str	r3, [r7, #28]

		valid = (nb_targets > 0)
				&& (target_status == 4 || target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10);
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd10      	ble.n	80016b0 <SEN_CopyRangingData+0xd8>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d00b      	beq.n	80016ac <SEN_CopyRangingData+0xd4>
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d008      	beq.n	80016ac <SEN_CopyRangingData+0xd4>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2b06      	cmp	r3, #6
 800169e:	d005      	beq.n	80016ac <SEN_CopyRangingData+0xd4>
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b09      	cmp	r3, #9
 80016a4:	d002      	beq.n	80016ac <SEN_CopyRangingData+0xd4>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b0a      	cmp	r3, #10
 80016aa:	d101      	bne.n	80016b0 <SEN_CopyRangingData+0xd8>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <SEN_CopyRangingData+0xda>
 80016b0:	2300      	movs	r3, #0
		valid = (nb_targets > 0)
 80016b2:	76fb      	strb	r3, [r7, #27]
 80016b4:	7efb      	ldrb	r3, [r7, #27]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	76fb      	strb	r3, [r7, #27]
		result = SEN_set_data(pDest, idx, ranging, peak, valid);
 80016bc:	7efb      	ldrb	r3, [r7, #27]
 80016be:	461a      	mov	r2, r3
 80016c0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80016c4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80016c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f005 ffd5 	bl	800767a <SEN_set_data>
 80016d0:	6178      	str	r0, [r7, #20]

		if (result != 0) return result;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <SEN_CopyRangingData+0x106>
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	e008      	b.n	80016f0 <SEN_CopyRangingData+0x118>
	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	3301      	adds	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ea:	429a      	cmp	r2, r3
 80016ec:	db8a      	blt.n	8001604 <SEN_CopyRangingData+0x2c>
	}

	return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40100000 	.word	0x40100000
 80016fc:	40a00000 	.word	0x40a00000

08001700 <matrix_app_main>:

uint8_t matrix_app_main(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	// variables
	uint8_t status = VL53LMZ_STATUS_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]
	uint16_t ranging = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	80bb      	strh	r3, [r7, #4]

	// initialization
    status |= init_tof(&Sensor1Cfg);
 800170e:	482b      	ldr	r0, [pc, #172]	; (80017bc <matrix_app_main+0xbc>)
 8001710:	f7ff fece 	bl	80014b0 <init_tof>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4313      	orrs	r3, r2
 800171c:	71fb      	strb	r3, [r7, #7]

    status |= init_tracking();
 800171e:	f7ff fef7 	bl	8001510 <init_tracking>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	4313      	orrs	r3, r2
 800172a:	71fb      	strb	r3, [r7, #7]

	status |= vl53lmz_start_ranging(&Sensor1Cfg);
 800172c:	4823      	ldr	r0, [pc, #140]	; (80017bc <matrix_app_main+0xbc>)
 800172e:	f004 faf7 	bl	8005d20 <vl53lmz_start_ranging>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4313      	orrs	r3, r2
 800173a:	71fb      	strb	r3, [r7, #7]

    // begin app
    while (1){
    	ranging++;
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	80bb      	strh	r3, [r7, #4]

    	status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8001742:	491f      	ldr	r1, [pc, #124]	; (80017c0 <matrix_app_main+0xc0>)
 8001744:	481d      	ldr	r0, [pc, #116]	; (80017bc <matrix_app_main+0xbc>)
 8001746:	f7ff ff25 	bl	8001594 <sample_once>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4313      	orrs	r3, r2
 8001752:	71fb      	strb	r3, [r7, #7]

    	status |= SEN_CopyRangingData(&sensor_data, &Sensor1Results);
 8001754:	491a      	ldr	r1, [pc, #104]	; (80017c0 <matrix_app_main+0xc0>)
 8001756:	481b      	ldr	r0, [pc, #108]	; (80017c4 <matrix_app_main+0xc4>)
 8001758:	f7ff ff3e 	bl	80015d8 <SEN_CopyRangingData>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4313      	orrs	r3, r2
 8001764:	71fb      	strb	r3, [r7, #7]

		status |= HT_run(&hand_tracker, &sensor_data);
 8001766:	4917      	ldr	r1, [pc, #92]	; (80017c4 <matrix_app_main+0xc4>)
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <matrix_app_main+0xc8>)
 800176a:	f005 feb1 	bl	80074d0 <HT_run>
 800176e:	4603      	mov	r3, r0
 8001770:	b25a      	sxtb	r2, r3
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	71fb      	strb	r3, [r7, #7]

		if(hand_tracker.hand.found){
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <matrix_app_main+0xc8>)
 800177e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <matrix_app_main+0x92>
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2120      	movs	r1, #32
 800178a:	4810      	ldr	r0, [pc, #64]	; (80017cc <matrix_app_main+0xcc>)
 800178c:	f000 fc08 	bl	8001fa0 <HAL_GPIO_WritePin>
 8001790:	e004      	b.n	800179c <matrix_app_main+0x9c>
		}
		else {
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2120      	movs	r1, #32
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <matrix_app_main+0xcc>)
 8001798:	f000 fc02 	bl	8001fa0 <HAL_GPIO_WritePin>
		}


    	if(ranging > 500){
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017a2:	d9cb      	bls.n	800173c <matrix_app_main+0x3c>
    		vl53lmz_stop_ranging(&Sensor1Cfg);
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <matrix_app_main+0xbc>)
 80017a6:	f004 fad5 	bl	8005d54 <vl53lmz_stop_ranging>

    		while(1){
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017aa:	2120      	movs	r1, #32
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <matrix_app_main+0xcc>)
 80017ae:	f000 fc10 	bl	8001fd2 <HAL_GPIO_TogglePin>
    			HAL_Delay(1000);
 80017b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b6:	f000 f8a7 	bl	8001908 <HAL_Delay>
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017ba:	e7f6      	b.n	80017aa <matrix_app_main+0xaa>
 80017bc:	20000178 	.word	0x20000178
 80017c0:	20002548 	.word	0x20002548
 80017c4:	20003250 	.word	0x20003250
 80017c8:	20002a98 	.word	0x20002a98
 80017cc:	40020000 	.word	0x40020000

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d6:	490e      	ldr	r1, [pc, #56]	; (8001810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ec:	4c0b      	ldr	r4, [pc, #44]	; (800181c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fa:	f7ff fe47 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f006 f935 	bl	8007a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff fb4b 	bl	8000e9c <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001808:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001814:	0801fc08 	.word	0x0801fc08
  ldr r2, =_sbss
 8001818:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800181c:	2000366c 	.word	0x2000366c

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f94f 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fce8 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f967 	bl	8001b5a <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a4:	f000 f92f 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	200034b0 	.word	0x200034b0

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200034b0 	.word	0x200034b0

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff feb6 	bl	80018f0 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d008      	beq.n	8001ba4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e052      	b.n	8001c4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0216 	bic.w	r2, r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <HAL_DMA_Abort+0x62>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf4:	e013      	b.n	8001c1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bf6:	f7ff fe7b 	bl	80018f0 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d90c      	bls.n	8001c1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e015      	b.n	8001c4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e4      	bne.n	8001bf6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d004      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e00c      	b.n	8001c8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2205      	movs	r2, #5
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e159      	b.n	8001f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8148 	bne.w	8001f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d005      	beq.n	8001cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d017      	beq.n	8001d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d123      	bne.n	8001ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a2 	beq.w	8001f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a56      	ldr	r2, [pc, #344]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3a:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x2ec>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a49      	ldr	r2, [pc, #292]	; (8001f88 <HAL_GPIO_Init+0x2f0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x202>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a48      	ldr	r2, [pc, #288]	; (8001f8c <HAL_GPIO_Init+0x2f4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x1fe>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <HAL_GPIO_Init+0x2f8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <HAL_GPIO_Init+0x2fc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x1f6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a45      	ldr	r2, [pc, #276]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x1f2>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x204>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	; (8001f84 <HAL_GPIO_Init+0x2ec>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f32:	4a1a      	ldr	r2, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f aea2 	bls.w	8001cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	041a      	lsls	r2, r3, #16
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f806 	bl	8002038 <HAL_GPIO_EXTI_Callback>
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e12b      	b.n	80022ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff f900 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2224      	movs	r2, #36	; 0x24
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b4:	f001 fd62 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80020b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a81      	ldr	r2, [pc, #516]	; (80022c4 <HAL_I2C_Init+0x274>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d807      	bhi.n	80020d4 <HAL_I2C_Init+0x84>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <HAL_I2C_Init+0x278>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	bf94      	ite	ls
 80020cc:	2301      	movls	r3, #1
 80020ce:	2300      	movhi	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e006      	b.n	80020e2 <HAL_I2C_Init+0x92>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a7d      	ldr	r2, [pc, #500]	; (80022cc <HAL_I2C_Init+0x27c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	bf94      	ite	ls
 80020dc:	2301      	movls	r3, #1
 80020de:	2300      	movhi	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0e7      	b.n	80022ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a78      	ldr	r2, [pc, #480]	; (80022d0 <HAL_I2C_Init+0x280>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0c9b      	lsrs	r3, r3, #18
 80020f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_I2C_Init+0x274>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d802      	bhi.n	8002124 <HAL_I2C_Init+0xd4>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	e009      	b.n	8002138 <HAL_I2C_Init+0xe8>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	4a69      	ldr	r2, [pc, #420]	; (80022d4 <HAL_I2C_Init+0x284>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	3301      	adds	r3, #1
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	430b      	orrs	r3, r1
 800213e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800214a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	495c      	ldr	r1, [pc, #368]	; (80022c4 <HAL_I2C_Init+0x274>)
 8002154:	428b      	cmp	r3, r1
 8002156:	d819      	bhi.n	800218c <HAL_I2C_Init+0x13c>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e59      	subs	r1, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fbb1 f3f3 	udiv	r3, r1, r3
 8002166:	1c59      	adds	r1, r3, #1
 8002168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800216c:	400b      	ands	r3, r1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_I2C_Init+0x138>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e59      	subs	r1, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	e051      	b.n	800222c <HAL_I2C_Init+0x1dc>
 8002188:	2304      	movs	r3, #4
 800218a:	e04f      	b.n	800222c <HAL_I2C_Init+0x1dc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <HAL_I2C_Init+0x168>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e012      	b.n	80021de <HAL_I2C_Init+0x18e>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Init+0x196>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e022      	b.n	800222c <HAL_I2C_Init+0x1dc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <HAL_I2C_Init+0x1bc>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e58      	subs	r0, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	440b      	add	r3, r1
 80021fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220a:	e00f      	b.n	800222c <HAL_I2C_Init+0x1dc>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	0099      	lsls	r1, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	6809      	ldr	r1, [r1, #0]
 8002230:	4313      	orrs	r3, r2
 8002232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800225a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6911      	ldr	r1, [r2, #16]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68d2      	ldr	r2, [r2, #12]
 8002266:	4311      	orrs	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	000186a0 	.word	0x000186a0
 80022c8:	001e847f 	.word	0x001e847f
 80022cc:	003d08ff 	.word	0x003d08ff
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	10624dd3 	.word	0x10624dd3

080022d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	461a      	mov	r2, r3
 80022e4:	460b      	mov	r3, r1
 80022e6:	817b      	strh	r3, [r7, #10]
 80022e8:	4613      	mov	r3, r2
 80022ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff fb00 	bl	80018f0 <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	f040 80e0 	bne.w	80024c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2319      	movs	r3, #25
 8002306:	2201      	movs	r2, #1
 8002308:	4970      	ldr	r1, [pc, #448]	; (80024cc <HAL_I2C_Master_Transmit+0x1f4>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fde8 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	e0d3      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_I2C_Master_Transmit+0x50>
 8002324:	2302      	movs	r3, #2
 8002326:	e0cc      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d007      	beq.n	800234e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2221      	movs	r2, #33	; 0x21
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2210      	movs	r2, #16
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	893a      	ldrh	r2, [r7, #8]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a50      	ldr	r2, [pc, #320]	; (80024d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fbbc 	bl	8002b14 <I2C_MasterRequestWrite>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e08d      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023bc:	e066      	b.n	800248c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fe62 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d107      	bne.n	80023e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06b      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d11b      	bne.n	8002460 <HAL_I2C_Master_Transmit+0x188>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d017      	beq.n	8002460 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6a39      	ldr	r1, [r7, #32]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fe52 	bl	800310e <I2C_WaitOnBTFFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b04      	cmp	r3, #4
 8002476:	d107      	bne.n	8002488 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01a      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d194      	bne.n	80023be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	00100002 	.word	0x00100002
 80024d0:	ffff0000 	.word	0xffff0000

080024d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	460b      	mov	r3, r1
 80024e2:	817b      	strh	r3, [r7, #10]
 80024e4:	4613      	mov	r3, r2
 80024e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff fa02 	bl	80018f0 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	f040 820b 	bne.w	8002912 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2319      	movs	r3, #25
 8002502:	2201      	movs	r2, #1
 8002504:	497c      	ldr	r1, [pc, #496]	; (80026f8 <HAL_I2C_Master_Receive+0x224>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fcea 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
 8002514:	e1fe      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_I2C_Master_Receive+0x50>
 8002520:	2302      	movs	r3, #2
 8002522:	e1f7      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d007      	beq.n	800254a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2222      	movs	r2, #34	; 0x22
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2210      	movs	r2, #16
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_I2C_Master_Receive+0x228>)
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800258c:	8979      	ldrh	r1, [r7, #10]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fb40 	bl	8002c18 <I2C_MasterRequestRead>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1b8      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d113      	bne.n	80025d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	623b      	str	r3, [r7, #32]
 80025be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e18c      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d11b      	bne.n	8002612 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e16c      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	2b02      	cmp	r3, #2
 8002618:	d11b      	bne.n	8002652 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002628:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	e14c      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002678:	e138      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	2b03      	cmp	r3, #3
 8002680:	f200 80f1 	bhi.w	8002866 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b01      	cmp	r3, #1
 800268a:	d123      	bne.n	80026d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fd7d 	bl	8003190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e139      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d2:	e10b      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d14e      	bne.n	800277a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2200      	movs	r2, #0
 80026e4:	4906      	ldr	r1, [pc, #24]	; (8002700 <HAL_I2C_Master_Receive+0x22c>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fbfa 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e10e      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
 80026f6:	bf00      	nop
 80026f8:	00100002 	.word	0x00100002
 80026fc:	ffff0000 	.word	0xffff0000
 8002700:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002778:	e0b8      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2200      	movs	r2, #0
 8002782:	4966      	ldr	r1, [pc, #408]	; (800291c <HAL_I2C_Master_Receive+0x448>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fbab 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0bf      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	2200      	movs	r2, #0
 80027de:	494f      	ldr	r1, [pc, #316]	; (800291c <HAL_I2C_Master_Receive+0x448>)
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fb7d 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e091      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002864:	e042      	b.n	80028ec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fc90 	bl	8003190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e04c      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d118      	bne.n	80028ec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f aec2 	bne.w	800267a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00010004 	.word	0x00010004

08002920 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4603      	mov	r3, r0
 8002930:	817b      	strh	r3, [r7, #10]
 8002932:	460b      	mov	r3, r1
 8002934:	813b      	strh	r3, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800293a:	f7fe ffd9 	bl	80018f0 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b20      	cmp	r3, #32
 800294a:	f040 80d9 	bne.w	8002b00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2319      	movs	r3, #25
 8002954:	2201      	movs	r2, #1
 8002956:	496d      	ldr	r1, [pc, #436]	; (8002b0c <HAL_I2C_Mem_Write+0x1ec>)
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fac1 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
 8002966:	e0cc      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Mem_Write+0x56>
 8002972:	2302      	movs	r3, #2
 8002974:	e0c5      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d007      	beq.n	800299c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2221      	movs	r2, #33	; 0x21
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a4d      	ldr	r2, [pc, #308]	; (8002b10 <HAL_I2C_Mem_Write+0x1f0>)
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029de:	88f8      	ldrh	r0, [r7, #6]
 80029e0:	893a      	ldrh	r2, [r7, #8]
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4603      	mov	r3, r0
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f9e0 	bl	8002db4 <I2C_RequestMemoryWrite>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d052      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e081      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fb42 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1aa      	bne.n	80029fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fb2e 	bl	800310e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d107      	bne.n	8002ad0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e016      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	00100002 	.word	0x00100002
 8002b10:	ffff0000 	.word	0xffff0000

08002b14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d006      	beq.n	8002b3e <I2C_MasterRequestWrite+0x2a>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d003      	beq.n	8002b3e <I2C_MasterRequestWrite+0x2a>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b3c:	d108      	bne.n	8002b50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e00b      	b.n	8002b68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	2b12      	cmp	r3, #18
 8002b56:	d107      	bne.n	8002b68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f9b3 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00d      	beq.n	8002b9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8e:	d103      	bne.n	8002b98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e035      	b.n	8002c08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba4:	d108      	bne.n	8002bb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e01b      	b.n	8002bf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bb8:	897b      	ldrh	r3, [r7, #10]
 8002bba:	11db      	asrs	r3, r3, #7
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 0306 	and.w	r3, r3, #6
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f063 030f 	orn	r3, r3, #15
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <I2C_MasterRequestWrite+0xfc>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f9d9 	bl	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e010      	b.n	8002c08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <I2C_MasterRequestWrite+0x100>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f9c9 	bl	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	00010008 	.word	0x00010008
 8002c14:	00010002 	.word	0x00010002

08002c18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	460b      	mov	r3, r1
 8002c26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d006      	beq.n	8002c52 <I2C_MasterRequestRead+0x3a>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d003      	beq.n	8002c52 <I2C_MasterRequestRead+0x3a>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c50:	d108      	bne.n	8002c64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e00b      	b.n	8002c7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	2b11      	cmp	r3, #17
 8002c6a:	d107      	bne.n	8002c7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f929 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00d      	beq.n	8002cb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d103      	bne.n	8002cac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e079      	b.n	8002da4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb8:	d108      	bne.n	8002ccc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]
 8002cca:	e05f      	b.n	8002d8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ccc:	897b      	ldrh	r3, [r7, #10]
 8002cce:	11db      	asrs	r3, r3, #7
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0306 	and.w	r3, r3, #6
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f063 030f 	orn	r3, r3, #15
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4930      	ldr	r1, [pc, #192]	; (8002dac <I2C_MasterRequestRead+0x194>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f94f 	bl	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e054      	b.n	8002da4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4929      	ldr	r1, [pc, #164]	; (8002db0 <I2C_MasterRequestRead+0x198>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f93f 	bl	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e044      	b.n	8002da4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f8c7 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d66:	d103      	bne.n	8002d70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e017      	b.n	8002da4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d74:	897b      	ldrh	r3, [r7, #10]
 8002d76:	11db      	asrs	r3, r3, #7
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 0306 	and.w	r3, r3, #6
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f063 030e 	orn	r3, r3, #14
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4907      	ldr	r1, [pc, #28]	; (8002db0 <I2C_MasterRequestRead+0x198>)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8fb 	bl	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00010008 	.word	0x00010008
 8002db0:	00010002 	.word	0x00010002

08002db4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	813b      	strh	r3, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f878 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e04:	d103      	bne.n	8002e0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e05f      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	492d      	ldr	r1, [pc, #180]	; (8002edc <I2C_RequestMemoryWrite+0x128>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f8b0 	bl	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e04c      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	6a39      	ldr	r1, [r7, #32]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f91a 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d107      	bne.n	8002e76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e02b      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	e021      	b.n	8002ed0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e8c:	893b      	ldrh	r3, [r7, #8]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8f4 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e005      	b.n	8002ed2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00010002 	.word	0x00010002

08002ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef0:	e025      	b.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef8:	d021      	beq.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fe fcf9 	bl	80018f0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e023      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10d      	bne.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	e00c      	b.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d0b6      	beq.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f9c:	e051      	b.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d123      	bne.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e046      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffc:	d021      	beq.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7fe fc77 	bl	80018f0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e020      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10c      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e00b      	b.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	43da      	mvns	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d18d      	bne.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003098:	e02d      	b.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f8ce 	bl	800323c <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e02d      	b.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b0:	d021      	beq.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fe fc1d 	bl	80018f0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e007      	b.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d1ca      	bne.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800311a:	e02d      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f88d 	bl	800323c <I2C_IsAcknowledgeFailed>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e02d      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003132:	d021      	beq.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003134:	f7fe fbdc 	bl	80018f0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d1ca      	bne.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800319c:	e042      	b.n	8003224 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d119      	bne.n	80031e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0210 	mvn.w	r2, #16
 80031b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e029      	b.n	8003234 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe fb86 	bl	80018f0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d1b5      	bne.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d11b      	bne.n	800328c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800325c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0204 	orr.w	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e267      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e242      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6f      	ldr	r2, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a68      	ldr	r2, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe facc 	bl	80018f0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fac8 	bl	80018f0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e207      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fab8 	bl	80018f0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fab4 	bl	80018f0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1f3      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c7      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fa6d 	bl	80018f0 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe fa69 	bl	80018f0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a8      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x244>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fa4c 	bl	80018f0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fa48 	bl	80018f0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e187      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fa2c 	bl	80018f0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fa28 	bl	80018f0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e167      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x240>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x248>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fa15 	bl	80018f0 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe fa11 	bl	80018f0 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e150      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a7c      	ldr	r2, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b77      	ldr	r3, [pc, #476]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b74      	ldr	r3, [pc, #464]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe f9d1 	bl	80018f0 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe f9cd 	bl	80018f0 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x474>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x2ea>
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a63      	ldr	r2, [pc, #396]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x30c>
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a5e      	ldr	r2, [pc, #376]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 80035a8:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a57      	ldr	r2, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a54      	ldr	r2, [pc, #336]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f992 	bl	80018f0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe f98e 	bl	80018f0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0cb      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe f97c 	bl	80018f0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f978 	bl	80018f0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b5      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x470>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d05c      	beq.n	8003700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d141      	bne.n	80036d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe f94c 	bl	80018f0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f948 	bl	80018f0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	491b      	ldr	r1, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe f921 	bl	80018f0 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe f91d 	bl	80018f0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e05c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x416>
 80036d0:	e054      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe f90a 	bl	80018f0 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe f906 	bl	80018f0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e045      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e038      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
 8003714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d028      	beq.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d121      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cc      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d90c      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0b8      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f8:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a52      	ldr	r2, [pc, #328]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	494d      	ldr	r1, [pc, #308]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d044      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d119      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	2b03      	cmp	r3, #3
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e067      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4934      	ldr	r1, [pc, #208]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fe f838 	bl	80018f0 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe f834 	bl	80018f0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e04f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e032      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4916      	ldr	r1, [pc, #88]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd ff98 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00
 8003948:	40023800 	.word	0x40023800
 800394c:	08009edc 	.word	0x08009edc
 8003950:	20000000 	.word	0x20000000
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b094      	sub	sp, #80	; 0x50
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	647b      	str	r3, [r7, #68]	; 0x44
 8003964:	2300      	movs	r3, #0
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003968:	2300      	movs	r3, #0
 800396a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b79      	ldr	r3, [pc, #484]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80e1 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e0db      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b73      	ldr	r3, [pc, #460]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800398e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003990:	e0db      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003996:	e0d8      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b6d      	ldr	r3, [pc, #436]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
 80039c2:	2300      	movs	r3, #0
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
 80039c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039ca:	4622      	mov	r2, r4
 80039cc:	462b      	mov	r3, r5
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	0159      	lsls	r1, r3, #5
 80039d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039dc:	0150      	lsls	r0, r2, #5
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4621      	mov	r1, r4
 80039e4:	1a51      	subs	r1, r2, r1
 80039e6:	6139      	str	r1, [r7, #16]
 80039e8:	4629      	mov	r1, r5
 80039ea:	eb63 0301 	sbc.w	r3, r3, r1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039fc:	4659      	mov	r1, fp
 80039fe:	018b      	lsls	r3, r1, #6
 8003a00:	4651      	mov	r1, sl
 8003a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a06:	4651      	mov	r1, sl
 8003a08:	018a      	lsls	r2, r1, #6
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a10:	4659      	mov	r1, fp
 8003a12:	eb63 0901 	sbc.w	r9, r3, r1
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	eb18 0303 	adds.w	r3, r8, r3
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	462b      	mov	r3, r5
 8003a38:	eb49 0303 	adc.w	r3, r9, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	024b      	lsls	r3, r1, #9
 8003a4e:	4621      	mov	r1, r4
 8003a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a54:	4621      	mov	r1, r4
 8003a56:	024a      	lsls	r2, r1, #9
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5e:	2200      	movs	r2, #0
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a68:	f7fd f89a 	bl	8000ba0 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4613      	mov	r3, r2
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a74:	e058      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4611      	mov	r1, r2
 8003a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	f04f 0000 	mov.w	r0, #0
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	0159      	lsls	r1, r3, #5
 8003a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa2:	0150      	lsls	r0, r2, #5
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8003acc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	00eb      	lsls	r3, r5, #3
 8003ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ade:	00e2      	lsls	r2, r4, #3
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	18e3      	adds	r3, r4, r3
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb45 0303 	adc.w	r3, r5, r3
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	61fa      	str	r2, [r7, #28]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	f7fd f840 	bl	8000ba0 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3750      	adds	r7, #80	; 0x50
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08009eec 	.word	0x08009eec

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ba8:	f7ff ffdc 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0b5b      	lsrs	r3, r3, #13
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08009eec 	.word	0x08009eec

08003bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e03f      	b.n	8003c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fb8a 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fc7b 	bl	800450c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b0ba      	sub	sp, #232	; 0xe8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_UART_IRQHandler+0x66>
 8003cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fb65 	bl	8004396 <UART_Receive_IT>
      return;
 8003ccc:	e256      	b.n	800417c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80de 	beq.w	8003e94 <HAL_UART_IRQHandler+0x22c>
 8003cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80d1 	beq.w	8003e94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_UART_IRQHandler+0xae>
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_UART_IRQHandler+0xd2>
 8003d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0202 	orr.w	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_UART_IRQHandler+0xf6>
 8003d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d011      	beq.n	8003d8e <HAL_UART_IRQHandler+0x126>
 8003d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0208 	orr.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 81ed 	beq.w	8004172 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_UART_IRQHandler+0x14e>
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 faf0 	bl	8004396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_UART_IRQHandler+0x17a>
 8003dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d04f      	beq.n	8003e82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9f8 	bl	80041d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d141      	bne.n	8003e7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1d9      	bne.n	8003df6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d013      	beq.n	8003e72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	4a7d      	ldr	r2, [pc, #500]	; (8004044 <HAL_UART_IRQHandler+0x3dc>)
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd fefb 	bl	8001c52 <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	e00e      	b.n	8003e90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f99a 	bl	80041ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	e00a      	b.n	8003e90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f996 	bl	80041ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e006      	b.n	8003e90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f992 	bl	80041ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e8e:	e170      	b.n	8004172 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	bf00      	nop
    return;
 8003e92:	e16e      	b.n	8004172 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 814a 	bne.w	8004132 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8143 	beq.w	8004132 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 813c 	beq.w	8004132 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	f040 80b4 	bne.w	8004048 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8140 	beq.w	8004176 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f080 8139 	bcs.w	8004176 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f16:	f000 8088 	beq.w	800402a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d9      	bne.n	8003f1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e1      	bne.n	8003f66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e3      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800400c:	65ba      	str	r2, [r7, #88]	; 0x58
 800400e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e3      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	4618      	mov	r0, r3
 8004026:	f7fd fda4 	bl	8001b72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004032:	b29b      	uxth	r3, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	b29b      	uxth	r3, r3
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8c0 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004040:	e099      	b.n	8004176 <HAL_UART_IRQHandler+0x50e>
 8004042:	bf00      	nop
 8004044:	0800429f 	.word	0x0800429f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004050:	b29b      	uxth	r3, r3
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 808b 	beq.w	800417a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8086 	beq.w	800417a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004092:	647a      	str	r2, [r7, #68]	; 0x44
 8004094:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e3      	bne.n	800406e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3314      	adds	r3, #20
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	623b      	str	r3, [r7, #32]
   return(result);
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040ca:	633a      	str	r2, [r7, #48]	; 0x30
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e3      	bne.n	80040a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0310 	bic.w	r3, r3, #16
 8004102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004110:	61fa      	str	r2, [r7, #28]
 8004112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	617b      	str	r3, [r7, #20]
   return(result);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e3      	bne.n	80040ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f848 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004130:	e023      	b.n	800417a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_UART_IRQHandler+0x4ea>
 800413e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8bb 	bl	80042c6 <UART_Transmit_IT>
    return;
 8004150:	e014      	b.n	800417c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00e      	beq.n	800417c <HAL_UART_IRQHandler+0x514>
 800415e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8fb 	bl	8004366 <UART_EndTransmit_IT>
    return;
 8004170:	e004      	b.n	800417c <HAL_UART_IRQHandler+0x514>
    return;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <HAL_UART_IRQHandler+0x514>
      return;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <HAL_UART_IRQHandler+0x514>
      return;
 800417a:	bf00      	nop
  }
}
 800417c:	37e8      	adds	r7, #232	; 0xe8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b095      	sub	sp, #84	; 0x54
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004200:	643a      	str	r2, [r7, #64]	; 0x40
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	61fb      	str	r3, [r7, #28]
   return(result);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004234:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e5      	bne.n	8004214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	d119      	bne.n	8004284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f023 0310 	bic.w	r3, r3, #16
 8004266:	647b      	str	r3, [r7, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004270:	61ba      	str	r2, [r7, #24]
 8004272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6979      	ldr	r1, [r7, #20]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	613b      	str	r3, [r7, #16]
   return(result);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e5      	bne.n	8004250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004292:	bf00      	nop
 8004294:	3754      	adds	r7, #84	; 0x54
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff ff77 	bl	80041ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b21      	cmp	r3, #33	; 0x21
 80042d8:	d13e      	bne.n	8004358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d114      	bne.n	800430e <UART_Transmit_IT+0x48>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d110      	bne.n	800430e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	1c9a      	adds	r2, r3, #2
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	621a      	str	r2, [r3, #32]
 800430c:	e008      	b.n	8004320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6211      	str	r1, [r2, #32]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4619      	mov	r1, r3
 800432e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10f      	bne.n	8004354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fefc 	bl	8004184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b08c      	sub	sp, #48	; 0x30
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b22      	cmp	r3, #34	; 0x22
 80043a8:	f040 80ab 	bne.w	8004502 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d117      	bne.n	80043e6 <UART_Receive_IT+0x50>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d113      	bne.n	80043e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
 80043e4:	e026      	b.n	8004434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d007      	beq.n	800440a <UART_Receive_IT+0x74>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <UART_Receive_IT+0x82>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e008      	b.n	800442a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004424:	b2da      	uxtb	r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29b      	uxth	r3, r3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4619      	mov	r1, r3
 8004442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004444:	2b00      	cmp	r3, #0
 8004446:	d15a      	bne.n	80044fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0220 	bic.w	r2, r2, #32
 8004456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d135      	bne.n	80044f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	613b      	str	r3, [r7, #16]
   return(result);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f023 0310 	bic.w	r3, r3, #16
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ae:	623a      	str	r2, [r7, #32]
 80044b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	6a3a      	ldr	r2, [r7, #32]
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d10a      	bne.n	80044e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fe67 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
 80044f2:	e002      	b.n	80044fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fe4f 	bl	8004198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e002      	b.n	8004504 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3730      	adds	r7, #48	; 0x30
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b0c0      	sub	sp, #256	; 0x100
 8004512:	af00      	add	r7, sp, #0
 8004514:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	68d9      	ldr	r1, [r3, #12]
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	ea40 0301 	orr.w	r3, r0, r1
 8004534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004564:	f021 010c 	bic.w	r1, r1, #12
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004572:	430b      	orrs	r3, r1
 8004574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	6999      	ldr	r1, [r3, #24]
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	ea40 0301 	orr.w	r3, r0, r1
 8004592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b8f      	ldr	r3, [pc, #572]	; (80047d8 <UART_SetConfig+0x2cc>)
 800459c:	429a      	cmp	r2, r3
 800459e:	d005      	beq.n	80045ac <UART_SetConfig+0xa0>
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b8d      	ldr	r3, [pc, #564]	; (80047dc <UART_SetConfig+0x2d0>)
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d104      	bne.n	80045b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ac:	f7ff fafa 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 80045b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045b4:	e003      	b.n	80045be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045b6:	f7ff fae1 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80045ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c8:	f040 810c 	bne.w	80047e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045de:	4622      	mov	r2, r4
 80045e0:	462b      	mov	r3, r5
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80045e6:	415b      	adcs	r3, r3
 80045e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045ee:	4621      	mov	r1, r4
 80045f0:	eb12 0801 	adds.w	r8, r2, r1
 80045f4:	4629      	mov	r1, r5
 80045f6:	eb43 0901 	adc.w	r9, r3, r1
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800460a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800460e:	4690      	mov	r8, r2
 8004610:	4699      	mov	r9, r3
 8004612:	4623      	mov	r3, r4
 8004614:	eb18 0303 	adds.w	r3, r8, r3
 8004618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800461c:	462b      	mov	r3, r5
 800461e:	eb49 0303 	adc.w	r3, r9, r3
 8004622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004632:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800463a:	460b      	mov	r3, r1
 800463c:	18db      	adds	r3, r3, r3
 800463e:	653b      	str	r3, [r7, #80]	; 0x50
 8004640:	4613      	mov	r3, r2
 8004642:	eb42 0303 	adc.w	r3, r2, r3
 8004646:	657b      	str	r3, [r7, #84]	; 0x54
 8004648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800464c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004650:	f7fc faa6 	bl	8000ba0 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <UART_SetConfig+0x2d4>)
 800465a:	fba3 2302 	umull	r2, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	011c      	lsls	r4, r3, #4
 8004662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004666:	2200      	movs	r2, #0
 8004668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800466c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	1891      	adds	r1, r2, r2
 800467a:	64b9      	str	r1, [r7, #72]	; 0x48
 800467c:	415b      	adcs	r3, r3
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004684:	4641      	mov	r1, r8
 8004686:	eb12 0a01 	adds.w	sl, r2, r1
 800468a:	4649      	mov	r1, r9
 800468c:	eb43 0b01 	adc.w	fp, r3, r1
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800469c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046a4:	4692      	mov	sl, r2
 80046a6:	469b      	mov	fp, r3
 80046a8:	4643      	mov	r3, r8
 80046aa:	eb1a 0303 	adds.w	r3, sl, r3
 80046ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046b2:	464b      	mov	r3, r9
 80046b4:	eb4b 0303 	adc.w	r3, fp, r3
 80046b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046d0:	460b      	mov	r3, r1
 80046d2:	18db      	adds	r3, r3, r3
 80046d4:	643b      	str	r3, [r7, #64]	; 0x40
 80046d6:	4613      	mov	r3, r2
 80046d8:	eb42 0303 	adc.w	r3, r2, r3
 80046dc:	647b      	str	r3, [r7, #68]	; 0x44
 80046de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046e6:	f7fc fa5b 	bl	8000ba0 <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <UART_SetConfig+0x2d4>)
 80046f2:	fba3 2301 	umull	r2, r3, r3, r1
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2264      	movs	r2, #100	; 0x64
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	1acb      	subs	r3, r1, r3
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <UART_SetConfig+0x2d4>)
 8004708:	fba3 2302 	umull	r2, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004714:	441c      	add	r4, r3
 8004716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004720:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004728:	4642      	mov	r2, r8
 800472a:	464b      	mov	r3, r9
 800472c:	1891      	adds	r1, r2, r2
 800472e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004730:	415b      	adcs	r3, r3
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004738:	4641      	mov	r1, r8
 800473a:	1851      	adds	r1, r2, r1
 800473c:	6339      	str	r1, [r7, #48]	; 0x30
 800473e:	4649      	mov	r1, r9
 8004740:	414b      	adcs	r3, r1
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004750:	4659      	mov	r1, fp
 8004752:	00cb      	lsls	r3, r1, #3
 8004754:	4651      	mov	r1, sl
 8004756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475a:	4651      	mov	r1, sl
 800475c:	00ca      	lsls	r2, r1, #3
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	4603      	mov	r3, r0
 8004764:	4642      	mov	r2, r8
 8004766:	189b      	adds	r3, r3, r2
 8004768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800476c:	464b      	mov	r3, r9
 800476e:	460a      	mov	r2, r1
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004784:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800478c:	460b      	mov	r3, r1
 800478e:	18db      	adds	r3, r3, r3
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
 8004792:	4613      	mov	r3, r2
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800479e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047a2:	f7fc f9fd 	bl	8000ba0 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <UART_SetConfig+0x2d4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	; 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	3332      	adds	r3, #50	; 0x32
 80047be:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <UART_SetConfig+0x2d4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 0207 	and.w	r2, r3, #7
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4422      	add	r2, r4
 80047d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047d4:	e106      	b.n	80049e4 <UART_SetConfig+0x4d8>
 80047d6:	bf00      	nop
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047f6:	4642      	mov	r2, r8
 80047f8:	464b      	mov	r3, r9
 80047fa:	1891      	adds	r1, r2, r2
 80047fc:	6239      	str	r1, [r7, #32]
 80047fe:	415b      	adcs	r3, r3
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004806:	4641      	mov	r1, r8
 8004808:	1854      	adds	r4, r2, r1
 800480a:	4649      	mov	r1, r9
 800480c:	eb43 0501 	adc.w	r5, r3, r1
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	00eb      	lsls	r3, r5, #3
 800481a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481e:	00e2      	lsls	r2, r4, #3
 8004820:	4614      	mov	r4, r2
 8004822:	461d      	mov	r5, r3
 8004824:	4643      	mov	r3, r8
 8004826:	18e3      	adds	r3, r4, r3
 8004828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800482c:	464b      	mov	r3, r9
 800482e:	eb45 0303 	adc.w	r3, r5, r3
 8004832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004852:	4629      	mov	r1, r5
 8004854:	008b      	lsls	r3, r1, #2
 8004856:	4621      	mov	r1, r4
 8004858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485c:	4621      	mov	r1, r4
 800485e:	008a      	lsls	r2, r1, #2
 8004860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004864:	f7fc f99c 	bl	8000ba0 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4b60      	ldr	r3, [pc, #384]	; (80049f0 <UART_SetConfig+0x4e4>)
 800486e:	fba3 2302 	umull	r2, r3, r3, r2
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	011c      	lsls	r4, r3, #4
 8004876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487a:	2200      	movs	r2, #0
 800487c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004880:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004888:	4642      	mov	r2, r8
 800488a:	464b      	mov	r3, r9
 800488c:	1891      	adds	r1, r2, r2
 800488e:	61b9      	str	r1, [r7, #24]
 8004890:	415b      	adcs	r3, r3
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004898:	4641      	mov	r1, r8
 800489a:	1851      	adds	r1, r2, r1
 800489c:	6139      	str	r1, [r7, #16]
 800489e:	4649      	mov	r1, r9
 80048a0:	414b      	adcs	r3, r1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b0:	4659      	mov	r1, fp
 80048b2:	00cb      	lsls	r3, r1, #3
 80048b4:	4651      	mov	r1, sl
 80048b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ba:	4651      	mov	r1, sl
 80048bc:	00ca      	lsls	r2, r1, #3
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	4642      	mov	r2, r8
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048cc:	464b      	mov	r3, r9
 80048ce:	460a      	mov	r2, r1
 80048d0:	eb42 0303 	adc.w	r3, r2, r3
 80048d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80048e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048f0:	4649      	mov	r1, r9
 80048f2:	008b      	lsls	r3, r1, #2
 80048f4:	4641      	mov	r1, r8
 80048f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048fa:	4641      	mov	r1, r8
 80048fc:	008a      	lsls	r2, r1, #2
 80048fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004902:	f7fc f94d 	bl	8000ba0 <__aeabi_uldivmod>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4611      	mov	r1, r2
 800490c:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <UART_SetConfig+0x4e4>)
 800490e:	fba3 2301 	umull	r2, r3, r3, r1
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2264      	movs	r2, #100	; 0x64
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	1acb      	subs	r3, r1, r3
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	3332      	adds	r3, #50	; 0x32
 8004920:	4a33      	ldr	r2, [pc, #204]	; (80049f0 <UART_SetConfig+0x4e4>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800492c:	441c      	add	r4, r3
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	673b      	str	r3, [r7, #112]	; 0x70
 8004936:	677a      	str	r2, [r7, #116]	; 0x74
 8004938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	415b      	adcs	r3, r3
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800494c:	4641      	mov	r1, r8
 800494e:	1851      	adds	r1, r2, r1
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	4649      	mov	r1, r9
 8004954:	414b      	adcs	r3, r1
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004964:	4659      	mov	r1, fp
 8004966:	00cb      	lsls	r3, r1, #3
 8004968:	4651      	mov	r1, sl
 800496a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496e:	4651      	mov	r1, sl
 8004970:	00ca      	lsls	r2, r1, #3
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	4603      	mov	r3, r0
 8004978:	4642      	mov	r2, r8
 800497a:	189b      	adds	r3, r3, r2
 800497c:	66bb      	str	r3, [r7, #104]	; 0x68
 800497e:	464b      	mov	r3, r9
 8004980:	460a      	mov	r2, r1
 8004982:	eb42 0303 	adc.w	r3, r2, r3
 8004986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	663b      	str	r3, [r7, #96]	; 0x60
 8004992:	667a      	str	r2, [r7, #100]	; 0x64
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049a0:	4649      	mov	r1, r9
 80049a2:	008b      	lsls	r3, r1, #2
 80049a4:	4641      	mov	r1, r8
 80049a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049aa:	4641      	mov	r1, r8
 80049ac:	008a      	lsls	r2, r1, #2
 80049ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049b2:	f7fc f8f5 	bl	8000ba0 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <UART_SetConfig+0x4e4>)
 80049bc:	fba3 1302 	umull	r1, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	2164      	movs	r1, #100	; 0x64
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	3332      	adds	r3, #50	; 0x32
 80049ce:	4a08      	ldr	r2, [pc, #32]	; (80049f0 <UART_SetConfig+0x4e4>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	f003 020f 	and.w	r2, r3, #15
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4422      	add	r2, r4
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	bf00      	nop
 80049e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f0:	51eb851f 	.word	0x51eb851f

080049f4 <RdByte>:

uint8_t RdByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	460b      	mov	r3, r1
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8004a10:	897b      	ldrh	r3, [r7, #10]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8819      	ldrh	r1, [r3, #0]
 8004a1a:	f107 0214 	add.w	r2, r7, #20
 8004a1e:	2364      	movs	r3, #100	; 0x64
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2302      	movs	r3, #2
 8004a24:	480c      	ldr	r0, [pc, #48]	; (8004a58 <RdByte+0x64>)
 8004a26:	f7fd fc57 	bl	80022d8 <HAL_I2C_Master_Transmit>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8819      	ldrh	r1, [r3, #0]
 8004a32:	f107 0210 	add.w	r2, r7, #16
 8004a36:	2364      	movs	r3, #100	; 0x64
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4806      	ldr	r0, [pc, #24]	; (8004a58 <RdByte+0x64>)
 8004a3e:	f7fd fd49 	bl	80024d4 <HAL_I2C_Master_Receive>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8004a46:	7c3a      	ldrb	r2, [r7, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");
	return status;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000009c 	.word	0x2000009c

08004a5c <WrByte>:

uint8_t WrByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004a7a:	887b      	ldrh	r3, [r7, #2]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8004a80:	787b      	ldrb	r3, [r7, #1]
 8004a82:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 3, 100);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8819      	ldrh	r1, [r3, #0]
 8004a88:	f107 020c 	add.w	r2, r7, #12
 8004a8c:	2364      	movs	r3, #100	; 0x64
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2303      	movs	r3, #3
 8004a92:	4805      	ldr	r0, [pc, #20]	; (8004aa8 <WrByte+0x4c>)
 8004a94:	f7fd fc20 	bl	80022d8 <HAL_I2C_Master_Transmit>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
	//uart_printf("write 1 byte\n");
	return status;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000009c 	.word	0x2000009c

08004aac <WrMulti>:
uint8_t WrMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8819      	ldrh	r1, [r3, #0]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	897a      	ldrh	r2, [r7, #10]
 8004ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004aca:	9002      	str	r0, [sp, #8]
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	4804      	ldr	r0, [pc, #16]	; (8004ae8 <WrMulti+0x3c>)
 8004ad6:	f7fd ff23 	bl	8002920 <HAL_I2C_Mem_Write>
 8004ada:	4603      	mov	r3, r0
 8004adc:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	2000009c 	.word	0x2000009c

08004aec <RdMulti>:
uint8_t RdMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	460b      	mov	r3, r1
 8004afa:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 10);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8819      	ldrh	r1, [r3, #0]
 8004b10:	f107 0214 	add.w	r2, r7, #20
 8004b14:	230a      	movs	r3, #10
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	2302      	movs	r3, #2
 8004b1a:	480d      	ldr	r0, [pc, #52]	; (8004b50 <RdMulti+0x64>)
 8004b1c:	f7fd fbdc 	bl	80022d8 <HAL_I2C_Master_Transmit>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 400);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8819      	ldrh	r1, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004b30:	9200      	str	r2, [sp, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4806      	ldr	r0, [pc, #24]	; (8004b50 <RdMulti+0x64>)
 8004b36:	f7fd fccd 	bl	80024d4 <HAL_I2C_Master_Receive>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	4413      	add	r3, r2
 8004b42:	75fb      	strb	r3, [r7, #23]
    //uart_printf("read %d bytes\n",size);

	return status;
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2000009c 	.word	0x2000009c

08004b54 <SwapBuffer>:


void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e021      	b.n	8004baa <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	440b      	add	r3, r1
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3302      	adds	r3, #2
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	440b      	add	r3, r1
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	3203      	adds	r2, #3
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	440a      	add	r2, r1
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	4313      	orrs	r3, r2
		tmp = (
 8004b98:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d3d9      	bcc.n	8004b66 <SwapBuffer+0x12>
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <WaitMs>:

uint8_t WaitMs(
		VL53LMZ_Platform *p_platform,
		uint32_t TimeMs)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	f7fc fe9c 	bl	8001908 <HAL_Delay>
	return 0;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <_vl53lmz_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
 8004be6:	461a      	mov	r2, r3
 8004be8:	4603      	mov	r3, r0
 8004bea:	70fb      	strb	r3, [r7, #3]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70bb      	strb	r3, [r7, #2]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8004bfc:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), address,
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	8839      	ldrh	r1, [r7, #0]
 8004c08:	f7ff ff70 	bl	8004aec <RdMulti>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	210a      	movs	r1, #10
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ffd0 	bl	8004bc0 <WaitMs>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	2bc7      	cmp	r3, #199	; 0xc7
 8004c2e:	d904      	bls.n	8004c3a <_vl53lmz_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53LMZ_STATUS_TIMEOUT_ERROR;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
			break;
 8004c38:	e01a      	b.n	8004c70 <_vl53lmz_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d909      	bls.n	8004c54 <_vl53lmz_poll_for_answer+0x7a>
						 && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8004c46:	2b7e      	cmp	r3, #126	; 0x7e
 8004c48:	d904      	bls.n	8004c54 <_vl53lmz_poll_for_answer+0x7a>
		{
			status |= VL53LMZ_MCU_ERROR;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c50:	73fb      	strb	r3, [r7, #15]
			break;
 8004c52:	e00d      	b.n	8004c70 <_vl53lmz_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8004c54:	7bbb      	ldrb	r3, [r7, #14]
 8004c56:	3301      	adds	r3, #1
 8004c58:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8004c5a:	78bb      	ldrb	r3, [r7, #2]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8004c64:	7e3b      	ldrb	r3, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	7f3a      	ldrb	r2, [r7, #28]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d1c5      	bne.n	8004bfc <_vl53lmz_poll_for_answer+0x22>

	return status;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_vl53lmz_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53lmz_poll_for_mcu_boot(
			  VL53LMZ_Configuration		 *p_dev)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53LMZ_STATUS_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f107 020b 	add.w	r2, r7, #11
 8004c90:	2106      	movs	r1, #6
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff feae 	bl	80049f4 <RdByte>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	b25b      	sxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da10      	bge.n	8004ccc <_vl53lmz_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f107 020a 	add.w	r2, r7, #10
 8004cb0:	2107      	movs	r1, #7
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fe9e 	bl	80049f4 <RdByte>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	73fb      	strb	r3, [r7, #15]
			if(go2_status1 & (uint8_t)0x01)
 8004cc2:	7abb      	ldrb	r3, [r7, #10]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <_vl53lmz_poll_for_mcu_boot+0x76>
			{
				status |= VL53LMZ_STATUS_OK;
				break;
			}
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff75 	bl	8004bc0 <WaitMs>
		timeout++;
 8004cd6:	89bb      	ldrh	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <_vl53lmz_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8004ce6:	89bb      	ldrh	r3, [r7, #12]
 8004ce8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cec:	d3cd      	bcc.n	8004c8a <_vl53lmz_poll_for_mcu_boot+0x10>
 8004cee:	e002      	b.n	8004cf6 <_vl53lmz_poll_for_mcu_boot+0x7c>
				break;
 8004cf0:	bf00      	nop
 8004cf2:	e000      	b.n	8004cf6 <_vl53lmz_poll_for_mcu_boot+0x7c>
			break;
 8004cf4:	bf00      	nop

   return status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_vl53lmz_send_offset_data>:
 */

static uint8_t _vl53lmz_send_offset_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t						resolution)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0ea      	sub	sp, #424	; 0x1a8
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d0e:	6018      	str	r0, [r3, #0]
 8004d10:	460a      	mov	r2, r1
 8004d12:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d16:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8004d1a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8004d22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d2a:	4ad9      	ldr	r2, [pc, #868]	; (8005090 <_vl53lmz_send_offset_data+0x390>)
 8004d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d30:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8004d34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d38:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d3c:	4ad5      	ldr	r2, [pc, #852]	; (8005094 <_vl53lmz_send_offset_data+0x394>)
 8004d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d42:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8004d46:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f203 5004 	addw	r0, r3, #1284	; 0x504
			   p_dev->offset_data, VL53LMZ_OFFSET_BUFFER_SIZE);
 8004d54:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
	(void)memcpy(p_dev->temp_buffer,
 8004d60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004d64:	4619      	mov	r1, r3
 8004d66:	f002 fea5 	bl	8007ab4 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4){
 8004d6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d6e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	f040 8122 	bne.w	8004fbe <_vl53lmz_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8004d7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d7e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f203 5214 	addw	r2, r3, #1300	; 0x514
 8004d88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d90:	cb03      	ldmia	r3!, {r0, r1}
 8004d92:	6010      	str	r0, [r2, #0]
 8004d94:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 8004d96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004d9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8004da4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fed3 	bl	8004b54 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8004dae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004db2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
 8004dbc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f002 fe75 	bl	8007ab4 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8004dca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004dce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f203 6144 	addw	r1, r3, #1604	; 0x644
 8004dd8:	f107 0318 	add.w	r3, r7, #24
 8004ddc:	2280      	movs	r2, #128	; 0x80
 8004dde:	4618      	mov	r0, r3
 8004de0:	f002 fe68 	bl	8007ab4 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8004dea:	e0ac      	b.n	8004f46 <_vl53lmz_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8004df2:	e09c      	b.n	8004f2e <_vl53lmz_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8004df4:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8004df8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	005a      	lsls	r2, r3, #1
 8004e02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8004e0e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004e12:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	440b      	add	r3, r1
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	1c59      	adds	r1, r3, #1
 8004e1e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e2a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8004e2c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004e30:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	3304      	adds	r3, #4
 8004e3a:	0059      	lsls	r1, r3, #1
 8004e3c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e48:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8004e4a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004e4e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	440b      	add	r3, r1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	f103 0109 	add.w	r1, r3, #9
 8004e5c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e68:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8004e6a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004e6e:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	440a      	add	r2, r1
								  /(uint32_t)4;
 8004e76:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8004e78:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8004e84:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8004e88:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4413      	add	r3, r2
 8004e90:	005a      	lsls	r2, r3, #1
 8004e92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004e96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004e9e:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8004ea0:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8004ea4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004eb4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004eb8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004ebc:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8004ebe:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004ec2:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8004ec6:	00d2      	lsls	r2, r2, #3
 8004ec8:	440a      	add	r2, r1
 8004eca:	3204      	adds	r2, #4
 8004ecc:	0051      	lsls	r1, r2, #1
 8004ece:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004ed2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8004ed6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004eda:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8004edc:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8004ee0:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8004ee4:	00d2      	lsls	r2, r2, #3
 8004ee6:	440a      	add	r2, r1
 8004ee8:	0052      	lsls	r2, r2, #1
 8004eea:	f102 0109 	add.w	r1, r2, #9
 8004eee:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004ef2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8004ef6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004efa:	4413      	add	r3, r2
								  /(int16_t)4;
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da00      	bge.n	8004f02 <_vl53lmz_send_offset_data+0x202>
 8004f00:	3303      	adds	r3, #3
 8004f02:	109b      	asrs	r3, r3, #2
 8004f04:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8004f06:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8004f0a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	b209      	sxth	r1, r1
 8004f14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004f18:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8004f20:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8004f2e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	f77f af5e 	ble.w	8004df4 <_vl53lmz_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8004f38:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8004f46:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	f77f af4e 	ble.w	8004dec <_vl53lmz_send_offset_data+0xec>
			}
		}
		(void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8004f50:	f107 0318 	add.w	r3, r7, #24
 8004f54:	3320      	adds	r3, #32
 8004f56:	2260      	movs	r2, #96	; 0x60
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 fd78 	bl	8007a50 <memset>
		(void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8004f60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f64:	3340      	adds	r3, #64	; 0x40
 8004f66:	22c0      	movs	r2, #192	; 0xc0
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fd70 	bl	8007a50 <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8004f70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004f74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8004f7e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f86:	4618      	mov	r0, r3
 8004f88:	f002 fd94 	bl	8007ab4 <memcpy>
					signal_grid, sizeof(signal_grid));
		(void)memcpy(&(p_dev->temp_buffer[0x140]),
 8004f8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004f90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8004f9a:	f107 0118 	add.w	r1, r7, #24
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 fd87 	bl	8007ab4 <memcpy>
					range_grid, sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 8004fa6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004faa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8004fb4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fdcb 	bl	8004b54 <SwapBuffer>
	}

	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8004fc4:	e01b      	b.n	8004ffe <_vl53lmz_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8004fc6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8004fd2:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8004fd6:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8004fda:	6809      	ldr	r1, [r1, #0]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 8004fe2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004fe6:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	460a      	mov	r2, r1
 8004ff0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8004ff4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8004ffe:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8005002:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8005006:	d3de      	bcc.n	8004fc6 <_vl53lmz_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8005008:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800500c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f203 62e4 	addw	r2, r3, #1764	; 0x6e4
 8005016:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800501a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800501e:	cb03      	ldmia	r3!, {r0, r1}
 8005020:	6010      	str	r0, [r2, #0]
 8005022:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8005024:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005028:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005032:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f203 5204 	addw	r2, r3, #1284	; 0x504
 800503c:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8005040:	f642 6118 	movw	r1, #11800	; 0x2e18
 8005044:	f7ff fd32 	bl	8004aac <WrMulti>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8005050:	4313      	orrs	r3, r2
 8005052:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 8005056:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800505a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800505e:	2303      	movs	r3, #3
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	23ff      	movs	r3, #255	; 0xff
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800506a:	2201      	movs	r2, #1
 800506c:	2104      	movs	r1, #4
 800506e:	6800      	ldr	r0, [r0, #0]
 8005070:	f7ff fdb3 	bl	8004bda <_vl53lmz_poll_for_answer>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800507c:	4313      	orrs	r3, r2
 800507e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8005082:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8005086:	4618      	mov	r0, r3
 8005088:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	08009e80 	.word	0x08009e80
 8005094:	08009e88 	.word	0x08009e88

08005098 <_vl53lmz_send_xtalk_data>:
 */

static uint8_t _vl53lmz_send_xtalk_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				resolution)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b0ca      	sub	sp, #296	; 0x128
 800509c:	af02      	add	r7, sp, #8
 800509e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050a6:	6018      	str	r0, [r3, #0]
 80050a8:	460a      	mov	r2, r1
 80050aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ae:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80050b2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80050ba:	4a9a      	ldr	r2, [pc, #616]	; (8005324 <_vl53lmz_send_xtalk_data+0x28c>)
 80050bc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80050c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050c4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80050c8:	4a97      	ldr	r2, [pc, #604]	; (8005328 <_vl53lmz_send_xtalk_data+0x290>)
 80050ca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80050ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80050d6:	4b95      	ldr	r3, [pc, #596]	; (800532c <_vl53lmz_send_xtalk_data+0x294>)
 80050d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80050dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f203 5004 	addw	r0, r3, #1284	; 0x504
 80050ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80050f8:	f44f 7242 	mov.w	r2, #776	; 0x308
 80050fc:	4619      	mov	r1, r3
 80050fe:	f002 fcd9 	bl	8007ab4 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4)
 8005102:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005106:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b10      	cmp	r3, #16
 800510e:	f040 80d2 	bne.w	80052b6 <_vl53lmz_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8005112:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005116:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8005120:	461a      	mov	r2, r3
 8005122:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005126:	cb03      	ldmia	r3!, {r0, r1}
 8005128:	6010      	str	r0, [r2, #0]
 800512a:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 800512c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005130:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800513a:	461a      	mov	r2, r3
 800513c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005140:	cb03      	ldmia	r3!, {r0, r1}
 8005142:	6010      	str	r0, [r2, #0]
 8005144:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8005146:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800514a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005154:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fcfb 	bl	8004b54 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800515e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005162:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005174:	4618      	mov	r0, r3
 8005176:	f002 fc9d 	bl	8007ab4 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800517a:	2300      	movs	r3, #0
 800517c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005180:	e05d      	b.n	800523e <_vl53lmz_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8005188:	e04e      	b.n	8005228 <_vl53lmz_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800518a:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 800518e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	005a      	lsls	r2, r3, #1
 8005198:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800519c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80051a4:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80051a8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051c0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80051c2:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80051c6:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	440b      	add	r3, r1
 80051ce:	3304      	adds	r3, #4
 80051d0:	0059      	lsls	r1, r3, #1
 80051d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051de:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80051e0:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80051e4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	f103 0109 	add.w	r1, r3, #9
 80051f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051fe:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8005200:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8005204:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8005208:	0092      	lsls	r2, r2, #2
 800520a:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800520c:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800520e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005212:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800521a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3301      	adds	r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8005228:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800522c:	2b03      	cmp	r3, #3
 800522e:	ddac      	ble.n	800518a <_vl53lmz_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8005230:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005234:	b2db      	uxtb	r3, r3
 8005236:	3301      	adds	r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800523e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005242:	2b03      	cmp	r3, #3
 8005244:	dd9d      	ble.n	8005182 <_vl53lmz_send_xtalk_data+0xea>
			}
		}
		(void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	3340      	adds	r3, #64	; 0x40
 800524c:	22c0      	movs	r2, #192	; 0xc0
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f002 fbfd 	bl	8007a50 <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x34]),
 8005256:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800525a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005264:	f107 0108 	add.w	r1, r7, #8
 8005268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800526c:	4618      	mov	r0, r3
 800526e:	f002 fc21 	bl	8007ab4 <memcpy>
				  signal_grid, sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8005272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005276:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005280:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fc65 	bl	8004b54 <SwapBuffer>
		(void)memcpy(&(p_dev->temp_buffer[0x134]),
 800528a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800528e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8005298:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800529c:	601a      	str	r2, [r3, #0]
		profile_4x4, sizeof(profile_4x4));
		(void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800529e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80052ac:	2204      	movs	r2, #4
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 fbcd 	bl	8007a50 <memset>
						 (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80052b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052be:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80052c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80052ce:	f44f 7342 	mov.w	r3, #776	; 0x308
 80052d2:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 80052d6:	f7ff fbe9 	bl	8004aac <WrMulti>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 80052e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052ec:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80052f0:	2303      	movs	r3, #3
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	23ff      	movs	r3, #255	; 0xff
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80052fc:	2201      	movs	r2, #1
 80052fe:	2104      	movs	r1, #4
 8005300:	6800      	ldr	r0, [r0, #0]
 8005302:	f7ff fc6a 	bl	8004bda <_vl53lmz_poll_for_answer>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800530e:	4313      	orrs	r3, r2
 8005310:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8005314:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8005318:	4618      	mov	r0, r3
 800531a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	08009e90 	.word	0x08009e90
 8005328:	08009e98 	.word	0x08009e98
 800532c:	0001fca0 	.word	0x0001fca0

08005330 <vl53lmz_init>:
	return status;
}

uint8_t vl53lmz_init(
		VL53LMZ_Configuration		*p_dev)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53LMZ_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800533c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005340:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8005342:	2301      	movs	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800534c:	2200      	movs	r2, #0
 800534e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	/* method below copied from vl52l5cx_is_alive() */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fb7e 	bl	8004a5c <WrByte>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	4313      	orrs	r3, r2
 8005368:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0, &(p_dev->device_id));
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8005372:	330d      	adds	r3, #13
 8005374:	461a      	mov	r2, r3
 8005376:	2100      	movs	r1, #0
 8005378:	f7ff fb3c 	bl	80049f4 <RdByte>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	4313      	orrs	r3, r2
 8005384:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 1, &(p_dev->revision_id));
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800538e:	330e      	adds	r3, #14
 8005390:	461a      	mov	r2, r3
 8005392:	2101      	movs	r1, #1
 8005394:	f7ff fb2e 	bl	80049f4 <RdByte>
 8005398:	4603      	mov	r3, r0
 800539a:	461a      	mov	r2, r3
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	4313      	orrs	r3, r2
 80053a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fb56 	bl	8004a5c <WrByte>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461a      	mov	r2, r3
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	75fb      	strb	r3, [r7, #23]
	if((p_dev->device_id!=(uint8_t)0xF0)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053c0:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 80053c4:	2bf0      	cmp	r3, #240	; 0xf0
 80053c6:	d114      	bne.n	80053f2 <vl53lmz_init+0xc2>
		|| ((p_dev->revision_id!=(uint8_t)REVISION_CUT11) && (p_dev->revision_id!=(uint8_t)REVISION_CUT12) && (p_dev->revision_id!=(uint8_t)REVISION_L8))) {
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ce:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d011      	beq.n	80053fa <vl53lmz_init+0xca>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053dc:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d00a      	beq.n	80053fa <vl53lmz_init+0xca>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ea:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d003      	beq.n	80053fa <vl53lmz_init+0xca>
		/* unexpected combination of device and revision IDs */
		status = VL53LMZ_STATUS_UNKNOWN_DEVICE;
 80053f2:	2304      	movs	r3, #4
 80053f4:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80053f6:	f000 bc8c 	b.w	8005d12 <vl53lmz_init+0x9e2>
	}

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fb2a 	bl	8004a5c <WrByte>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	4313      	orrs	r3, r2
 8005410:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	2109      	movs	r1, #9
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fb1f 	bl	8004a5c <WrByte>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	4313      	orrs	r3, r2
 8005426:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2240      	movs	r2, #64	; 0x40
 800542c:	210f      	movs	r1, #15
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fb14 	bl	8004a5c <WrByte>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	4313      	orrs	r3, r2
 800543c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2203      	movs	r2, #3
 8005442:	210a      	movs	r1, #10
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fb09 	bl	8004a5c <WrByte>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	4313      	orrs	r3, r2
 8005452:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f107 0216 	add.w	r2, r7, #22
 800545a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fac8 	bl	80049f4 <RdByte>
 8005464:	4603      	mov	r3, r0
 8005466:	461a      	mov	r2, r3
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	4313      	orrs	r3, r2
 800546c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	210c      	movs	r1, #12
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff faf1 	bl	8004a5c <WrByte>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	4313      	orrs	r3, r2
 8005482:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f240 1101 	movw	r1, #257	; 0x101
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fae5 	bl	8004a5c <WrByte>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	4313      	orrs	r3, r2
 800549a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fad9 	bl	8004a5c <WrByte>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff facd 	bl	8004a5c <WrByte>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f244 0102 	movw	r1, #16386	; 0x4002
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fac1 	bl	8004a5c <WrByte>
 80054da:	4603      	mov	r3, r0
 80054dc:	461a      	mov	r2, r3
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f244 0102 	movw	r1, #16386	; 0x4002
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fab5 	bl	8004a5c <WrByte>
 80054f2:	4603      	mov	r3, r0
 80054f4:	461a      	mov	r2, r3
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2203      	movs	r2, #3
 8005500:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff faa9 	bl	8004a5c <WrByte>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	4313      	orrs	r3, r2
 8005512:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f240 1103 	movw	r1, #259	; 0x103
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fa9d 	bl	8004a5c <WrByte>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	4313      	orrs	r3, r2
 800552a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	210c      	movs	r1, #12
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fa92 	bl	8004a5c <WrByte>
 8005538:	4603      	mov	r3, r0
 800553a:	461a      	mov	r2, r3
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	4313      	orrs	r3, r2
 8005540:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2243      	movs	r2, #67	; 0x43
 8005546:	210f      	movs	r1, #15
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fa87 	bl	8004a5c <WrByte>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	4313      	orrs	r3, r2
 8005556:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fb2f 	bl	8004bc0 <WaitMs>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	4313      	orrs	r3, r2
 800556a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2240      	movs	r2, #64	; 0x40
 8005570:	210f      	movs	r1, #15
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fa72 	bl	8004a5c <WrByte>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	4313      	orrs	r3, r2
 8005580:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	210a      	movs	r1, #10
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff fa67 	bl	8004a5c <WrByte>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	4313      	orrs	r3, r2
 8005596:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2164      	movs	r1, #100	; 0x64
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fb0f 	bl	8004bc0 <WaitMs>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fa51 	bl	8004a5c <WrByte>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80055c4:	2301      	movs	r3, #1
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	23ff      	movs	r3, #255	; 0xff
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	2306      	movs	r3, #6
 80055ce:	2200      	movs	r2, #0
 80055d0:	2101      	movs	r1, #1
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff fb01 	bl	8004bda <_vl53lmz_poll_for_answer>
 80055d8:	4603      	mov	r3, r0
 80055da:	461a      	mov	r2, r3
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	4313      	orrs	r3, r2
 80055e0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f040 838f 	bne.w	8005d08 <vl53lmz_init+0x9d8>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	210e      	movs	r1, #14
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fa33 	bl	8004a5c <WrByte>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005606:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d126      	bne.n	800565c <vl53lmz_init+0x32c>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fa20 	bl	8004a5c <WrByte>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	4313      	orrs	r3, r2
 8005624:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	2106      	movs	r1, #6
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fa15 	bl	8004a5c <WrByte>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	4313      	orrs	r3, r2
 800563a:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 800563c:	2304      	movs	r3, #4
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	23ff      	movs	r3, #255	; 0xff
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2321      	movs	r3, #33	; 0x21
 8005646:	2200      	movs	r2, #0
 8005648:	2101      	movs	r1, #1
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fac5 	bl	8004bda <_vl53lmz_poll_for_answer>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	4313      	orrs	r3, r2
 8005658:	75fb      	strb	r3, [r7, #23]
 800565a:	e031      	b.n	80056c0 <vl53lmz_init+0x390>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff f9f9 	bl	8004a5c <WrByte>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	4313      	orrs	r3, r2
 8005672:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	220d      	movs	r2, #13
 8005678:	2103      	movs	r1, #3
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff f9ee 	bl	8004a5c <WrByte>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	4313      	orrs	r3, r2
 8005688:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff f9e2 	bl	8004a5c <WrByte>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	4313      	orrs	r3, r2
 80056a0:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80056a2:	2310      	movs	r3, #16
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	2310      	movs	r3, #16
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	2321      	movs	r3, #33	; 0x21
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fa92 	bl	8004bda <_vl53lmz_poll_for_answer>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	4313      	orrs	r3, r2
 80056be:	75fb      	strb	r3, [r7, #23]
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f9c7 	bl	8004a5c <WrByte>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f107 0216 	add.w	r2, r7, #22
 80056de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f986 	bl	80049f4 <RdByte>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	210c      	movs	r1, #12
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f9af 	bl	8004a5c <WrByte>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	4313      	orrs	r3, r2
 8005706:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff f9a3 	bl	8004a5c <WrByte>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	4313      	orrs	r3, r2
 800571e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f240 1101 	movw	r1, #257	; 0x101
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff f997 	bl	8004a5c <WrByte>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	4313      	orrs	r3, r2
 8005736:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff f98b 	bl	8004a5c <WrByte>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	4313      	orrs	r3, r2
 800574e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff f97f 	bl	8004a5c <WrByte>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	4313      	orrs	r3, r2
 8005766:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f244 0102 	movw	r1, #16386	; 0x4002
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff f973 	bl	8004a5c <WrByte>
 8005776:	4603      	mov	r3, r0
 8005778:	461a      	mov	r2, r3
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	4313      	orrs	r3, r2
 800577e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f244 0102 	movw	r1, #16386	; 0x4002
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff f967 	bl	8004a5c <WrByte>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	4313      	orrs	r3, r2
 8005796:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2203      	movs	r2, #3
 800579c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff f95b 	bl	8004a5c <WrByte>
 80057a6:	4603      	mov	r3, r0
 80057a8:	461a      	mov	r2, r3
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f240 1103 	movw	r1, #259	; 0x103
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff f94f 	bl	8004a5c <WrByte>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f244 010f 	movw	r1, #16399	; 0x400f
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff f943 	bl	8004a5c <WrByte>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	4313      	orrs	r3, r2
 80057de:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2243      	movs	r2, #67	; 0x43
 80057e4:	f240 211a 	movw	r1, #538	; 0x21a
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff f937 	bl	8004a5c <WrByte>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2203      	movs	r2, #3
 80057fc:	f240 211a 	movw	r1, #538	; 0x21a
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff f92b 	bl	8004a5c <WrByte>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	4313      	orrs	r3, r2
 800580e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f240 211a 	movw	r1, #538	; 0x21a
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff f91f 	bl	8004a5c <WrByte>
 800581e:	4603      	mov	r3, r0
 8005820:	461a      	mov	r2, r3
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	4313      	orrs	r3, r2
 8005826:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f240 211a 	movw	r1, #538	; 0x21a
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff f913 	bl	8004a5c <WrByte>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	4313      	orrs	r3, r2
 800583e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f240 2119 	movw	r1, #537	; 0x219
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f907 	bl	8004a5c <WrByte>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	4313      	orrs	r3, r2
 8005856:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f240 211b 	movw	r1, #539	; 0x21b
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f8fb 	bl	8004a5c <WrByte>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	4313      	orrs	r3, r2
 800586e:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff f8ef 	bl	8004a5c <WrByte>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	4313      	orrs	r3, r2
 8005886:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f107 0216 	add.w	r2, r7, #22
 800588e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff f8ae 	bl	80049f4 <RdByte>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	4313      	orrs	r3, r2
 80058a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff f8d6 	bl	8004a5c <WrByte>
 80058b0:	4603      	mov	r3, r0
 80058b2:	461a      	mov	r2, r3
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2207      	movs	r2, #7
 80058be:	2120      	movs	r1, #32
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff f8cb 	bl	8004a5c <WrByte>
 80058c6:	4603      	mov	r3, r0
 80058c8:	461a      	mov	r2, r3
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2206      	movs	r2, #6
 80058d4:	2120      	movs	r1, #32
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff f8c0 	bl	8004a5c <WrByte>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53LMZ */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2209      	movs	r2, #9
 80058ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff f8b4 	bl	8004a5c <WrByte>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005904:	4adc      	ldr	r2, [pc, #880]	; (8005c78 <vl53lmz_init+0x948>)
 8005906:	2100      	movs	r1, #0
 8005908:	f7ff f8d0 	bl	8004aac <WrMulti>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	4313      	orrs	r3, r2
 8005914:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	220a      	movs	r2, #10
 800591a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f89c 	bl	8004a5c <WrByte>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	4313      	orrs	r3, r2
 800592c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005934:	4ad1      	ldr	r2, [pc, #836]	; (8005c7c <vl53lmz_init+0x94c>)
 8005936:	2100      	movs	r1, #0
 8005938:	f7ff f8b8 	bl	8004aac <WrMulti>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	4313      	orrs	r3, r2
 8005944:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	220b      	movs	r2, #11
 800594a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff f884 	bl	8004a5c <WrByte>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	4313      	orrs	r3, r2
 800595c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8005964:	4ac6      	ldr	r2, [pc, #792]	; (8005c80 <vl53lmz_init+0x950>)
 8005966:	2100      	movs	r1, #0
 8005968:	f7ff f8a0 	bl	8004aac <WrMulti>
 800596c:	4603      	mov	r3, r0
 800596e:	461a      	mov	r2, r3
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	4313      	orrs	r3, r2
 8005974:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff f86c 	bl	8004a5c <WrByte>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	4313      	orrs	r3, r2
 800598c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005994:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005998:	2b0c      	cmp	r3, #12
 800599a:	d121      	bne.n	80059e0 <vl53lmz_init+0x6b0>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff f859 	bl	8004a5c <WrByte>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2203      	movs	r2, #3
 80059b8:	2106      	movs	r1, #6
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f84e 	bl	8004a5c <WrByte>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	75fb      	strb	r3, [r7, #23]
		status |= WaitMs(&(p_dev->platform), 5);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2105      	movs	r1, #5
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff f8f6 	bl	8004bc0 <WaitMs>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	4313      	orrs	r3, r2
 80059dc:	75fb      	strb	r3, [r7, #23]
 80059de:	e031      	b.n	8005a44 <vl53lmz_init+0x714>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff f837 	bl	8004a5c <WrByte>
 80059ee:	4603      	mov	r3, r0
 80059f0:	461a      	mov	r2, r3
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	220d      	movs	r2, #13
 80059fc:	2103      	movs	r1, #3
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff f82c 	bl	8004a5c <WrByte>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff f820 	bl	8004a5c <WrByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8005a26:	2310      	movs	r3, #16
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2321      	movs	r3, #33	; 0x21
 8005a30:	2200      	movs	r2, #0
 8005a32:	2101      	movs	r1, #1
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff f8d0 	bl	8004bda <_vl53lmz_poll_for_answer>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	75fb      	strb	r3, [r7, #23]
	}
	if(status != (uint8_t)0) {
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8160 	bne.w	8005d0c <vl53lmz_init+0x9dc>
		goto exit;
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff f801 	bl	8004a5c <WrByte>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f107 0216 	add.w	r2, r7, #22
 8005a6a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe ffc0 	bl	80049f4 <RdByte>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	210c      	movs	r1, #12
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe ffe9 	bl	8004a5c <WrByte>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe ffdd 	bl	8004a5c <WrByte>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe ffd1 	bl	8004a5c <WrByte>
 8005aba:	4603      	mov	r3, r0
 8005abc:	461a      	mov	r2, r3
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f240 1115 	movw	r1, #277	; 0x115
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe ffc5 	bl	8004a5c <WrByte>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2242      	movs	r2, #66	; 0x42
 8005ae0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe ffb9 	bl	8004a5c <WrByte>
 8005aea:	4603      	mov	r3, r0
 8005aec:	461a      	mov	r2, r3
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f240 1117 	movw	r1, #279	; 0x117
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe ffad 	bl	8004a5c <WrByte>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	210b      	movs	r1, #11
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe ffa2 	bl	8004a5c <WrByte>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f107 0216 	add.w	r2, r7, #22
 8005b28:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe ff61 	bl	80049f4 <RdByte>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	210c      	movs	r1, #12
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe ff8a 	bl	8004a5c <WrByte>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	210b      	movs	r1, #11
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe ff7f 	bl	8004a5c <WrByte>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	75fb      	strb	r3, [r7, #23]

	status |= _vl53lmz_poll_for_mcu_boot(p_dev);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff f886 	bl	8004c7a <_vl53lmz_poll_for_mcu_boot>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 80c8 	bne.w	8005d10 <vl53lmz_init+0x9e0>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe ff67 	bl	8004a5c <WrByte>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	2328      	movs	r3, #40	; 0x28
 8005b9c:	4a39      	ldr	r2, [pc, #228]	; (8005c84 <vl53lmz_init+0x954>)
 8005b9e:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8005ba2:	f7fe ff83 	bl	8004aac <WrMulti>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53LMZ_GET_NVM_CMD, sizeof(VL53LMZ_GET_NVM_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 0,
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	23ff      	movs	r3, #255	; 0xff
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff f80a 	bl	8004bda <_vl53lmz_poll_for_answer>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	75fb      	strb	r3, [r7, #23]
		VL53LMZ_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005bd0:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53LMZ_NVM_DATA_SIZE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005bd8:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8005bdc:	f642 4104 	movw	r1, #11268	; 0x2c04
 8005be0:	f7fe ff84 	bl	8004aec <RdMulti>
 8005be4:	4603      	mov	r3, r0
 8005be6:	461a      	mov	r2, r3
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f103 0014 	add.w	r0, r3, #20
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005bfa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f001 ff58 	bl	8007ab4 <memcpy>
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |= _vl53lmz_send_offset_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8005c04:	2110      	movs	r1, #16
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff f87a 	bl	8004d00 <_vl53lmz_send_offset_data>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	p_dev->default_xtalk = (uint8_t*)VL53LMZ_DEFAULT_XTALK;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <vl53lmz_init+0x958>)
 8005c1a:	611a      	str	r2, [r3, #16]
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53LMZ_DEFAULT_XTALK,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c22:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <vl53lmz_init+0x958>)
 8005c24:	4618      	mov	r0, r3
 8005c26:	4611      	mov	r1, r2
 8005c28:	f44f 7342 	mov.w	r3, #776	; 0x308
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f001 ff41 	bl	8007ab4 <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);
	status |= _vl53lmz_send_xtalk_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8005c32:	2110      	movs	r1, #16
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff fa2f 	bl	8005098 <_vl53lmz_send_xtalk_data>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c4a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d11e      	bne.n	8005c90 <vl53lmz_init+0x960>
		p_dev->default_configuration = (uint8_t*)VL53L8_DEFAULT_CONFIGURATION;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a0d      	ldr	r2, [pc, #52]	; (8005c8c <vl53lmz_init+0x95c>)
 8005c56:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8005c62:	f642 4134 	movw	r1, #11316	; 0x2c34
 8005c66:	f7fe ff21 	bl	8004aac <WrMulti>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	75fb      	strb	r3, [r7, #23]
 8005c74:	e01d      	b.n	8005cb2 <vl53lmz_init+0x982>
 8005c76:	bf00      	nop
 8005c78:	08009ef4 	.word	0x08009ef4
 8005c7c:	08011ef4 	.word	0x08011ef4
 8005c80:	08019ef4 	.word	0x08019ef4
 8005c84:	0801f994 	.word	0x0801f994
 8005c88:	0801f68c 	.word	0x0801f68c
 8005c8c:	0801eef4 	.word	0x0801eef4
							p_dev->default_configuration,
							sizeof(VL53L8_DEFAULT_CONFIGURATION));
	}
	else {
		p_dev->default_configuration = (uint8_t*)VL53L7_DEFAULT_CONFIGURATION;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <vl53lmz_init+0x9ec>)
 8005c94:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8005ca0:	f642 4134 	movw	r1, #11316	; 0x2c34
 8005ca4:	f7fe ff02 	bl	8004aac <WrMulti>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	75fb      	strb	r3, [r7, #23]
							p_dev->default_configuration,
							sizeof(VL53L7_DEFAULT_CONFIGURATION));
	}

	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1, VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	23ff      	movs	r3, #255	; 0xff
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	2104      	movs	r1, #4
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fe ff89 	bl	8004bda <_vl53lmz_poll_for_answer>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8005cd2:	f107 0110 	add.w	r1, r7, #16
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	f64d 3280 	movw	r2, #56192	; 0xdb80
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fc7b 	bl	80065d8 <vl53lmz_dci_write_data>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53LMZ_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 8005cec:	f107 010c 	add.w	r1, r7, #12
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f64d 1264 	movw	r2, #55652	; 0xd964
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fc6e 	bl	80065d8 <vl53lmz_dci_write_data>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	75fb      	strb	r3, [r7, #23]
 8005d06:	e004      	b.n	8005d12 <vl53lmz_init+0x9e2>
		goto exit;
 8005d08:	bf00      	nop
 8005d0a:	e002      	b.n	8005d12 <vl53lmz_init+0x9e2>
		goto exit;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <vl53lmz_init+0x9e2>
		goto exit;
 8005d10:	bf00      	nop
			VL53LMZ_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	0801f2c0 	.word	0x0801f2c0

08005d20 <vl53lmz_start_ranging>:
	return status;
}

uint8_t vl53lmz_start_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]

	status = vl53lmz_create_output_config( p_dev );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fd1f 	bl	8006770 <vl53lmz_create_output_config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73fb      	strb	r3, [r7, #15]
	if (status != VL53LMZ_STATUS_OK)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <vl53lmz_start_ranging+0x20>
		return status;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	e005      	b.n	8005d4c <vl53lmz_start_ranging+0x2c>

	status = vl53lmz_send_output_config_and_start( p_dev );
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fd83 	bl	800684c <vl53lmz_send_output_config_and_start>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]

	return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <vl53lmz_stop_ranging>:

uint8_t vl53lmz_stop_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53LMZ_STATUS_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	74fb      	strb	r3, [r7, #19]
 8005d60:	2300      	movs	r3, #0
 8005d62:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f107 020c 	add.w	r2, r7, #12
 8005d72:	2304      	movs	r3, #4
 8005d74:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8005d78:	f7fe feb8 	bl	8004aec <RdMulti>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	75fb      	strb	r3, [r7, #23]
						  0x2FFC, (uint8_t*)&auto_stop_flag, 4);

	if((auto_stop_flag != (uint32_t)0x4FF)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d04f      	beq.n	8005e30 <vl53lmz_stop_ranging+0xdc>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d96:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d148      	bne.n	8005e30 <vl53lmz_stop_ranging+0xdc>
	{
			status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fe58 	bl	8004a5c <WrByte>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	75fb      	strb	r3, [r7, #23]

			/* Provoke MCU stop */
			status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2216      	movs	r2, #22
 8005dba:	2115      	movs	r1, #21
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fe4d 	bl	8004a5c <WrByte>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	75fb      	strb	r3, [r7, #23]
			status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	2114      	movs	r1, #20
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fe42 	bl	8004a5c <WrByte>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	461a      	mov	r2, r3
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	75fb      	strb	r3, [r7, #23]

			/* Poll for G02 status 0 MCU stop */
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8005de2:	e021      	b.n	8005e28 <vl53lmz_stop_ranging+0xd4>
			{
				status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f107 0213 	add.w	r2, r7, #19
 8005dea:	2106      	movs	r1, #6
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe fe01 	bl	80049f4 <RdByte>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	75fb      	strb	r3, [r7, #23]
				status |= WaitMs(&(p_dev->platform), 10);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	210a      	movs	r1, #10
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fedd 	bl	8004bc0 <WaitMs>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	75fb      	strb	r3, [r7, #23]
				timeout++;	/* Timeout reached after 5 seconds */
 8005e10:	8abb      	ldrh	r3, [r7, #20]
 8005e12:	3301      	adds	r3, #1
 8005e14:	82bb      	strh	r3, [r7, #20]

				if(timeout > (uint16_t)500)
 8005e16:	8abb      	ldrh	r3, [r7, #20]
 8005e18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e1c:	d904      	bls.n	8005e28 <vl53lmz_stop_ranging+0xd4>
				{
					status |= tmp;
 8005e1e:	7cfa      	ldrb	r2, [r7, #19]
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	75fb      	strb	r3, [r7, #23]
					break;
 8005e26:	e003      	b.n	8005e30 <vl53lmz_stop_ranging+0xdc>
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dad9      	bge.n	8005de4 <vl53lmz_stop_ranging+0x90>
				}
			}
		}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f107 0213 	add.w	r2, r7, #19
 8005e36:	2106      	movs	r1, #6
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fddb 	bl	80049f4 <RdByte>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	da15      	bge.n	8005e7c <vl53lmz_stop_ranging+0x128>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f107 0213 	add.w	r2, r7, #19
 8005e56:	2107      	movs	r1, #7
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fdcb 	bl	80049f4 <RdByte>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8005e68:	7cfb      	ldrb	r3, [r7, #19]
 8005e6a:	2b84      	cmp	r3, #132	; 0x84
 8005e6c:	d006      	beq.n	8005e7c <vl53lmz_stop_ranging+0x128>
 8005e6e:	7cfb      	ldrb	r3, [r7, #19]
 8005e70:	2b85      	cmp	r3, #133	; 0x85
 8005e72:	d003      	beq.n	8005e7c <vl53lmz_stop_ranging+0x128>
		   status |= tmp;
 8005e74:	7cfa      	ldrb	r2, [r7, #19]
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fde9 	bl	8004a5c <WrByte>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	2114      	movs	r1, #20
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fdde 	bl	8004a5c <WrByte>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2115      	movs	r1, #21
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fdd3 	bl	8004a5c <WrByte>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	2109      	movs	r1, #9
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fdc8 	bl	8004a5c <WrByte>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fdbc 	bl	8004a5c <WrByte>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	75fb      	strb	r3, [r7, #23]

	return status;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <vl53lmz_check_data_ready>:

uint8_t vl53lmz_check_data_ready(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
	*p_isReady = 0;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8005f14:	2304      	movs	r3, #4
 8005f16:	2100      	movs	r1, #0
 8005f18:	f7fe fde8 	bl	8004aec <RdMulti>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	73fb      	strb	r3, [r7, #15]

	if ( status == VL53LMZ_STATUS_OK ){
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d136      	bne.n	8005f9a <vl53lmz_check_data_ready+0xa2>
		if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	791b      	ldrb	r3, [r3, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d020      	beq.n	8005f7c <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005f40:	2bff      	cmp	r3, #255	; 0xff
 8005f42:	d01b      	beq.n	8005f7c <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d116      	bne.n	8005f7c <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8005f54:	f003 0305 	and.w	r3, r3, #5
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d10f      	bne.n	8005f7c <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <vl53lmz_check_data_ready+0x84>
				)
		{
			*p_isReady = (uint8_t)1;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
			 p_dev->streamcount = p_dev->temp_buffer[0];
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	711a      	strb	r2, [r3, #4]
 8005f7a:	e00e      	b.n	8005f9a <vl53lmz_check_data_ready+0xa2>
		}
		else
		{
			if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 8005f82:	b25b      	sxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da05      	bge.n	8005f94 <vl53lmz_check_data_ready+0x9c>
			{
				status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 2506 	ldrb.w	r2, [r3, #1286]	; 0x506
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	73fb      	strb	r3, [r7, #15]
			}

			*p_isReady = 0;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <vl53lmz_get_ranging_data>:

uint8_t vl53lmz_get_ranging_data(
		VL53LMZ_Configuration		*p_dev,
		VL53LMZ_ResultsData		*p_results)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8005fb2:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), 0x0,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	f7fe fd94 	bl	8004aec <RdMulti>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	7ffb      	ldrb	r3, [r7, #31]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	711a      	strb	r2, [r3, #4]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f7fe fdb4 	bl	8004b54 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8005fec:	2310      	movs	r3, #16
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e118      	b.n	8006224 <vl53lmz_get_ranging_data+0x280>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d915      	bls.n	800603a <vl53lmz_get_ranging_data+0x96>
					&& (bh_ptr->type < (uint32_t)0xd))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d80e      	bhi.n	800603a <vl53lmz_get_ranging_data+0x96>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8006030:	b29b      	uxth	r3, r3
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e005      	b.n	8006046 <vl53lmz_get_ranging_data+0xa2>
		}
		else
		{
			msize = bh_ptr->size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8006042:	b29b      	uxth	r3, r3
 8006044:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	f24e 0284 	movw	r2, #57476	; 0xe084
 800604e:	4293      	cmp	r3, r2
 8006050:	f000 80c2 	beq.w	80061d8 <vl53lmz_get_ranging_data+0x234>
 8006054:	f24e 0284 	movw	r2, #57476	; 0xe084
 8006058:	4293      	cmp	r3, r2
 800605a:	f300 80db 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 800605e:	f24e 0244 	movw	r2, #57412	; 0xe044
 8006062:	4293      	cmp	r3, r2
 8006064:	f000 80a9 	beq.w	80061ba <vl53lmz_get_ranging_data+0x216>
 8006068:	f24e 0244 	movw	r2, #57412	; 0xe044
 800606c:	4293      	cmp	r3, r2
 800606e:	f300 80d1 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 8006072:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8006076:	4293      	cmp	r3, r2
 8006078:	f000 8090 	beq.w	800619c <vl53lmz_get_ranging_data+0x1f8>
 800607c:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8006080:	4293      	cmp	r3, r2
 8006082:	f300 80c7 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 8006086:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 800608a:	4293      	cmp	r3, r2
 800608c:	d077      	beq.n	800617e <vl53lmz_get_ranging_data+0x1da>
 800608e:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 8006092:	4293      	cmp	r3, r2
 8006094:	f300 80be 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 8006098:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 800609c:	4293      	cmp	r3, r2
 800609e:	d05f      	beq.n	8006160 <vl53lmz_get_ranging_data+0x1bc>
 80060a0:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f300 80b5 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 80060aa:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d047      	beq.n	8006142 <vl53lmz_get_ranging_data+0x19e>
 80060b2:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f300 80ac 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 80060bc:	f64d 0258 	movw	r2, #55384	; 0xd858
 80060c0:	4293      	cmp	r3, r2
 80060c2:	f000 8098 	beq.w	80061f6 <vl53lmz_get_ranging_data+0x252>
 80060c6:	f64d 0258 	movw	r2, #55384	; 0xd858
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f300 80a2 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 80060d0:	f245 52d0 	movw	r2, #21968	; 0x55d0
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d025      	beq.n	8006124 <vl53lmz_get_ranging_data+0x180>
 80060d8:	f245 52d0 	movw	r2, #21968	; 0x55d0
 80060dc:	4293      	cmp	r3, r2
 80060de:	f300 8099 	bgt.w	8006214 <vl53lmz_get_ranging_data+0x270>
 80060e2:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <vl53lmz_get_ranging_data+0x150>
 80060ea:	f245 42d0 	movw	r2, #21712	; 0x54d0
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00a      	beq.n	8006108 <vl53lmz_get_ranging_data+0x164>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80060f2:	e08f      	b.n	8006214 <vl53lmz_get_ranging_data+0x270>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	330c      	adds	r3, #12
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8006100:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	701a      	strb	r2, [r3, #0]
				break;
 8006106:	e086      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->ambient_per_spad,
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3304      	adds	r3, #4
 8006110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	3304      	adds	r3, #4
				(void)memcpy(p_results->ambient_per_spad,
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4619      	mov	r1, r3
 800611e:	f001 fcc9 	bl	8007ab4 <memcpy>
				break;
 8006122:	e078      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_spads_enabled,
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3304      	adds	r3, #4
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_spads_enabled,
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4619      	mov	r1, r3
 800613c:	f001 fcba 	bl	8007ab4 <memcpy>
				break;
 8006140:	e069      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_target_detected,
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	3304      	adds	r3, #4
 800614c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_target_detected,
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4619      	mov	r1, r3
 800615a:	f001 fcab 	bl	8007ab4 <memcpy>
				break;
 800615e:	e05a      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->signal_per_spad,
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	3304      	adds	r3, #4
 800616a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	3304      	adds	r3, #4
				(void)memcpy(p_results->signal_per_spad,
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4619      	mov	r1, r3
 8006178:	f001 fc9c 	bl	8007ab4 <memcpy>
				break;
 800617c:	e04b      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->range_sigma_mm,
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3304      	adds	r3, #4
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	3304      	adds	r3, #4
				(void)memcpy(p_results->range_sigma_mm,
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4619      	mov	r1, r3
 8006196:	f001 fc8d 	bl	8007ab4 <memcpy>
				break;
 800619a:	e03c      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->distance_mm,
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	3304      	adds	r3, #4
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	3304      	adds	r3, #4
				(void)memcpy(p_results->distance_mm,
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4619      	mov	r1, r3
 80061b4:	f001 fc7e 	bl	8007ab4 <memcpy>
				break;
 80061b8:	e02d      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->reflectance,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	f203 4044 	addw	r0, r3, #1092	; 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	3304      	adds	r3, #4
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	3304      	adds	r3, #4
				(void)memcpy(p_results->reflectance,
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4619      	mov	r1, r3
 80061d2:	f001 fc6f 	bl	8007ab4 <memcpy>
				break;
 80061d6:	e01e      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->target_status,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f203 4084 	addw	r0, r3, #1156	; 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	3304      	adds	r3, #4
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4413      	add	r3, r2
 80061ea:	3304      	adds	r3, #4
				(void)memcpy(p_results->target_status,
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4619      	mov	r1, r3
 80061f0:	f001 fc60 	bl	8007ab4 <memcpy>
				break;
 80061f4:	e00f      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(&p_results->motion_indicator,
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f203 40c4 	addw	r0, r3, #1220	; 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	3304      	adds	r3, #4
 8006200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	3304      	adds	r3, #4
				(void)memcpy(&p_results->motion_indicator,
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4619      	mov	r1, r3
 800620e:	f001 fc51 	bl	8007ab4 <memcpy>
				break;
 8006212:	e000      	b.n	8006216 <vl53lmz_get_ranging_data+0x272>
				break;
 8006214:	bf00      	nop
		}
		i += msize;
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4413      	add	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	3304      	adds	r3, #4
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	429a      	cmp	r2, r3
 800622c:	f4ff aee1 	bcc.w	8005ff2 <vl53lmz_get_ranging_data+0x4e>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 8006236:	b29b      	uxth	r3, r3
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	827b      	strh	r3, [r7, #18]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 8006242:	b29a      	uxth	r2, r3
 8006244:	8a7b      	ldrh	r3, [r7, #18]
 8006246:	4313      	orrs	r3, r2
 8006248:	827b      	strh	r3, [r7, #18]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800624e:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8006258:	b29b      	uxth	r3, r3
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	823b      	strh	r3, [r7, #16]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)3])) & 0xFFU;
 8006262:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800626c:	b29a      	uxth	r2, r3
 800626e:	8a3b      	ldrh	r3, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	823b      	strh	r3, [r7, #16]

	if(header_id != footer_id)
 8006274:	8a7a      	ldrh	r2, [r7, #18]
 8006276:	8a3b      	ldrh	r3, [r7, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d003      	beq.n	8006284 <vl53lmz_get_ranging_data+0x2e0>
	{
		status |= VL53LMZ_STATUS_CORRUPTED_FRAME;
 800627c:	7ffb      	ldrb	r3, [r7, #31]
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8006284:	7ffb      	ldrb	r3, [r7, #31]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <vl53lmz_get_resolution>:

uint8_t vl53lmz_get_resolution(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f203 5104 	addw	r1, r3, #1284	; 0x504
 80062a2:	2308      	movs	r3, #8
 80062a4:	f245 4250 	movw	r2, #21584	; 0x5450
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f90b 	bl	80064c4 <vl53lmz_dci_read_data>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 80062c4:	fb12 f303 	smulbb	r3, r2, r3
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	701a      	strb	r2, [r3, #0]

	return status;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <vl53lmz_set_resolution>:


uint8_t vl53lmz_set_resolution(
		VL53LMZ_Configuration		 *p_dev,
		uint8_t				resolution)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d002      	beq.n	80062f4 <vl53lmz_set_resolution+0x1c>
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d055      	beq.n	800639e <vl53lmz_set_resolution+0xc6>
 80062f2:	e0a9      	b.n	8006448 <vl53lmz_set_resolution+0x170>
		case VL53LMZ_RESOLUTION_4X4:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80062fa:	2310      	movs	r3, #16
 80062fc:	f64a 5238 	movw	r2, #44344	; 0xad38
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8df 	bl	80064c4 <vl53lmz_dci_read_data>
 8006306:	4603      	mov	r3, r0
 8006308:	461a      	mov	r2, r3
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	4313      	orrs	r3, r2
 800630e:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2240      	movs	r2, #64	; 0x40
 8006314:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 64;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2240      	movs	r2, #64	; 0x40
 800631c:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 4;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2204      	movs	r2, #4
 8006324:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 800632e:	2310      	movs	r3, #16
 8006330:	f64a 5238 	movw	r2, #44344	; 0xad38
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f94f 	bl	80065d8 <vl53lmz_dci_write_data>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	4313      	orrs	r3, r2
 8006342:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 800634a:	2308      	movs	r3, #8
 800634c:	f245 4250 	movw	r2, #21584	; 0x5450
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8b7 	bl	80064c4 <vl53lmz_dci_read_data>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	4313      	orrs	r3, r2
 800635e:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2204      	movs	r2, #4
 8006364:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 4;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2204      	movs	r2, #4
 800636c:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 8;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2208      	movs	r2, #8
 8006374:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 8;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2208      	movs	r2, #8
 800637c:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8006386:	2308      	movs	r3, #8
 8006388:	f245 4250 	movw	r2, #21584	; 0x5450
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f923 	bl	80065d8 <vl53lmz_dci_write_data>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	4313      	orrs	r3, r2
 800639a:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			break;
 800639c:	e057      	b.n	800644e <vl53lmz_set_resolution+0x176>

		case VL53LMZ_RESOLUTION_8X8:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80063a4:	2310      	movs	r3, #16
 80063a6:	f64a 5238 	movw	r2, #44344	; 0xad38
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f88a 	bl	80064c4 <vl53lmz_dci_read_data>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2210      	movs	r2, #16
 80063be:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 16;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2210      	movs	r2, #16
 80063c6:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80063d8:	2310      	movs	r3, #16
 80063da:	f64a 5238 	movw	r2, #44344	; 0xad38
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8fa 	bl	80065d8 <vl53lmz_dci_write_data>
 80063e4:	4603      	mov	r3, r0
 80063e6:	461a      	mov	r2, r3
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80063f4:	2308      	movs	r3, #8
 80063f6:	f245 4250 	movw	r2, #21584	; 0x5450
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f862 	bl	80064c4 <vl53lmz_dci_read_data>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	4313      	orrs	r3, r2
 8006408:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2208      	movs	r2, #8
 800640e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 8;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2208      	movs	r2, #8
 8006416:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 4;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 4;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8006430:	2308      	movs	r3, #8
 8006432:	f245 4250 	movw	r2, #21584	; 0x5450
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8ce 	bl	80065d8 <vl53lmz_dci_write_data>
 800643c:	4603      	mov	r3, r0
 800643e:	461a      	mov	r2, r3
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4313      	orrs	r3, r2
 8006444:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);

			break;
 8006446:	e002      	b.n	800644e <vl53lmz_set_resolution+0x176>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 8006448:	237f      	movs	r3, #127	; 0x7f
 800644a:	73fb      	strb	r3, [r7, #15]
			break;
 800644c:	bf00      	nop
		}

	status |= _vl53lmz_send_offset_data(p_dev, resolution);
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fe fc54 	bl	8004d00 <_vl53lmz_send_offset_data>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	4313      	orrs	r3, r2
 8006460:	73fb      	strb	r3, [r7, #15]
	status |= _vl53lmz_send_xtalk_data(p_dev, resolution);
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fe fe16 	bl	8005098 <_vl53lmz_send_xtalk_data>
 800646c:	4603      	mov	r3, r0
 800646e:	461a      	mov	r2, r3
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	4313      	orrs	r3, r2
 8006474:	73fb      	strb	r3, [r7, #15]

	return status;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <vl53lmz_set_ranging_frequency_hz>:
}

uint8_t vl53lmz_set_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af04      	add	r7, sp, #16
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8006496:	2301      	movs	r3, #1
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	2301      	movs	r3, #1
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	1cfb      	adds	r3, r7, #3
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	2304      	movs	r3, #4
 80064a4:	f245 4258 	movw	r2, #21592	; 0x5458
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f935 	bl	8006718 <vl53lmz_dci_replace_data>
 80064ae:	4603      	mov	r3, r0
 80064b0:	461a      	mov	r2, r3
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <vl53lmz_dci_read_data>:
uint8_t vl53lmz_dci_read_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08c      	sub	sp, #48	; 0x30
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53LMZ_STATUS_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	330c      	adds	r3, #12
 80064dc:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80064de:	4a3d      	ldr	r2, [pc, #244]	; (80065d4 <vl53lmz_dci_read_data+0x110>)
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80064e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
 80064ea:	887b      	ldrh	r3, [r7, #2]
 80064ec:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d903      	bls.n	80064fc <vl53lmz_dci_read_data+0x38>
	{
		status |= VL53LMZ_STATUS_ERROR;
 80064f4:	23ff      	movs	r3, #255	; 0xff
 80064f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80064fa:	e065      	b.n	80065c8 <vl53lmz_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	b2db      	uxtb	r3, r3
 8006502:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 800650a:	887b      	ldrh	r3, [r7, #2]
 800650c:	111b      	asrs	r3, r3, #4
 800650e:	b2db      	uxtb	r3, r3
 8006510:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006512:	887b      	ldrh	r3, [r7, #2]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	b2db      	uxtb	r3, r3
 800651a:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f107 0214 	add.w	r2, r7, #20
 8006522:	230c      	movs	r3, #12
 8006524:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8006528:	f7fe fac0 	bl	8004aac <WrMulti>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006534:	4313      	orrs	r3, r2
 8006536:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53LMZ_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 800653a:	2303      	movs	r3, #3
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	23ff      	movs	r3, #255	; 0xff
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006546:	2201      	movs	r2, #1
 8006548:	2104      	movs	r1, #4
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7fe fb45 	bl	8004bda <_vl53lmz_poll_for_answer>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006558:	4313      	orrs	r3, r2
 800655a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53LMZ_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800655e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	f642 4104 	movw	r1, #11268	; 0x2c04
 800656c:	f7fe fabe 	bl	8004aec <RdMulti>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006578:	4313      	orrs	r3, r2
 800657a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8006584:	887b      	ldrh	r3, [r7, #2]
 8006586:	330c      	adds	r3, #12
 8006588:	b29b      	uxth	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f7fe fae1 	bl	8004b54 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006592:	2300      	movs	r3, #0
 8006594:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006596:	e011      	b.n	80065bc <vl53lmz_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8006598:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	440b      	add	r3, r1
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f892 2504 	ldrb.w	r2, [r2, #1284]	; 0x504
 80065ae:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80065b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3301      	adds	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065c0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80065c4:	429a      	cmp	r2, r3
 80065c6:	dbe7      	blt.n	8006598 <vl53lmz_dci_read_data+0xd4>
		}
	}

	return status;
 80065c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	08009ea0 	.word	0x08009ea0

080065d8 <vl53lmz_dci_write_data>:
uint8_t vl53lmz_dci_write_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80065f0:	2300      	movs	r3, #0
 80065f2:	753b      	strb	r3, [r7, #20]
 80065f4:	2300      	movs	r3, #0
 80065f6:	757b      	strb	r3, [r7, #21]
 80065f8:	2300      	movs	r3, #0
 80065fa:	75bb      	strb	r3, [r7, #22]
 80065fc:	230f      	movs	r3, #15
 80065fe:	75fb      	strb	r3, [r7, #23]
 8006600:	2305      	movs	r3, #5
 8006602:	763b      	strb	r3, [r7, #24]
 8006604:	2301      	movs	r3, #1
 8006606:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	3308      	adds	r3, #8
 800660c:	121b      	asrs	r3, r3, #8
 800660e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006610:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	3308      	adds	r3, #8
 8006618:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800661a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53LMZ_UI_CMD_END -
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8006622:	3334      	adds	r3, #52	; 0x34
 8006624:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 800662c:	4293      	cmp	r3, r2
 800662e:	d903      	bls.n	8006638 <vl53lmz_dci_write_data+0x60>
		   > (uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53LMZ_STATUS_ERROR;
 8006630:	23ff      	movs	r3, #255	; 0xff
 8006632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006636:	e069      	b.n	800670c <vl53lmz_dci_write_data+0x134>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	b2db      	uxtb	r3, r3
 800663e:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	111b      	asrs	r3, r3, #4
 800664a:	b2db      	uxtb	r3, r3
 800664c:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800664e:	887b      	ldrh	r3, [r7, #2]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	b2db      	uxtb	r3, r3
 8006656:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	4619      	mov	r1, r3
 800665c:	68b8      	ldr	r0, [r7, #8]
 800665e:	f7fe fa79 	bl	8004b54 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	3b01      	subs	r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	84bb      	strh	r3, [r7, #36]	; 0x24
 800666a:	e012      	b.n	8006692 <vl53lmz_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800666c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	441a      	add	r2, r3
 8006674:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006678:	3304      	adds	r3, #4
 800667a:	7811      	ldrb	r1, [r2, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	460a      	mov	r2, r1
 8006682:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006686:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29b      	uxth	r3, r3
 8006690:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006692:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	dae8      	bge.n	800666c <vl53lmz_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80066a4:	887b      	ldrh	r3, [r7, #2]
 80066a6:	3304      	adds	r3, #4
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	3304      	adds	r3, #4
 80066b2:	461a      	mov	r2, r3
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	cb03      	ldmia	r3!, {r0, r1}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80066be:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f203 5204 	addw	r2, r3, #1284	; 0x504
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80066c6:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80066c8:	330c      	adds	r3, #12
 80066ca:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80066cc:	f7fe f9ee 	bl	8004aac <WrMulti>
 80066d0:	4603      	mov	r3, r0
 80066d2:	461a      	mov	r2, r3
 80066d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d8:	4313      	orrs	r3, r2
 80066da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 80066de:	2303      	movs	r3, #3
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80066ea:	2201      	movs	r2, #1
 80066ec:	2104      	movs	r1, #4
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7fe fa73 	bl	8004bda <_vl53lmz_poll_for_answer>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	4619      	mov	r1, r3
 8006706:	68b8      	ldr	r0, [r7, #8]
 8006708:	f7fe fa24 	bl	8004b54 <SwapBuffer>
	}

	return status;
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006710:	4618      	mov	r0, r3
 8006712:	3728      	adds	r7, #40	; 0x28
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <vl53lmz_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_read_data(p_dev, data, index, data_size);
 800672a:	887b      	ldrh	r3, [r7, #2]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fec7 	bl	80064c4 <vl53lmz_dci_read_data>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	4313      	orrs	r3, r2
 800673e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8006740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	4413      	add	r3, r2
 8006746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006748:	6a39      	ldr	r1, [r7, #32]
 800674a:	4618      	mov	r0, r3
 800674c:	f001 f9b2 	bl	8007ab4 <memcpy>
	status |= vl53lmz_dci_write_data(p_dev, data, index, data_size);
 8006750:	887b      	ldrh	r3, [r7, #2]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff ff3e 	bl	80065d8 <vl53lmz_dci_write_data>
 800675c:	4603      	mov	r3, r0
 800675e:	461a      	mov	r2, r3
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	4313      	orrs	r3, r2
 8006764:	75fb      	strb	r3, [r7, #23]

	return status;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <vl53lmz_create_output_config>:
uint8_t vl53lmz_create_output_config(
		VL53LMZ_Configuration	  *p_dev ) {
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b090      	sub	sp, #64	; 0x40
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

	uint8_t status = VL53LMZ_STATUS_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Send addresses of possible output */
	uint32_t default_output_config[] ={
 800677e:	4b30      	ldr	r3, [pc, #192]	; (8006840 <vl53lmz_create_output_config+0xd0>)
 8006780:	f107 040c 	add.w	r4, r7, #12
 8006784:	461d      	mov	r5, r3
 8006786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800678c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53LMZ_DISTANCE_BH,
		VL53LMZ_REFLECTANCE_BH,
		VL53LMZ_TARGET_STATUS_BH,
		VL53LMZ_MOTION_DETECT_BH };

	memset(g_output_config, 0x00, sizeof(g_output_config));
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	2100      	movs	r1, #0
 800679a:	482a      	ldr	r0, [pc, #168]	; (8006844 <vl53lmz_create_output_config+0xd4>)
 800679c:	f001 f958 	bl	8007a50 <memset>
	memcpy(g_output_config, default_output_config, sizeof(default_output_config));
 80067a0:	4b28      	ldr	r3, [pc, #160]	; (8006844 <vl53lmz_create_output_config+0xd4>)
 80067a2:	461d      	mov	r5, r3
 80067a4:	f107 040c 	add.w	r4, r7, #12
 80067a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80067b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	/* Enable mandatory output (meta and common data) */
	g_output_bh_enable[0] = 0x00000007U;
 80067b8:	4b23      	ldr	r3, [pc, #140]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067ba:	2207      	movs	r2, #7
 80067bc:	601a      	str	r2, [r3, #0]
	g_output_bh_enable[1] = 0x00000000U;
 80067be:	4b22      	ldr	r3, [pc, #136]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
	g_output_bh_enable[2] = 0x00000000U;
 80067c4:	4b20      	ldr	r3, [pc, #128]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
	g_output_bh_enable[3] = 0x00000000U;
 80067ca:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	60da      	str	r2, [r3, #12]

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53LMZ_DISABLE_AMBIENT_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)8;
 80067d0:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067d8:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_SPADS_ENABLED
	g_output_bh_enable[0] += (uint32_t)16;
 80067da:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3310      	adds	r3, #16
 80067e0:	4a19      	ldr	r2, [pc, #100]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067e2:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_TARGET_DETECTED
	g_output_bh_enable[0] += (uint32_t)32;
 80067e4:	4b18      	ldr	r3, [pc, #96]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3320      	adds	r3, #32
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067ec:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_SIGNAL_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)64;
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3340      	adds	r3, #64	; 0x40
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067f6:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_RANGE_SIGMA_MM
	g_output_bh_enable[0] += (uint32_t)128;
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3380      	adds	r3, #128	; 0x80
 80067fe:	4a12      	ldr	r2, [pc, #72]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006800:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_DISTANCE_MM
	g_output_bh_enable[0] += (uint32_t)256;
 8006802:	4b11      	ldr	r3, [pc, #68]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800680a:	4a0f      	ldr	r2, [pc, #60]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 800680c:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_REFLECTANCE_PERCENT
	g_output_bh_enable[0] += (uint32_t)512;
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006816:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006818:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_TARGET_STATUS
	g_output_bh_enable[0] += (uint32_t)1024;
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006822:	4a09      	ldr	r2, [pc, #36]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006824:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_MOTION_INDICATOR
	g_output_bh_enable[0] += (uint32_t)2048;
 8006826:	4b08      	ldr	r3, [pc, #32]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	4a06      	ldr	r2, [pc, #24]	; (8006848 <vl53lmz_create_output_config+0xd8>)
 8006830:	6013      	str	r3, [r2, #0]
#endif

	return status;
 8006832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006836:	4618      	mov	r0, r3
 8006838:	3740      	adds	r7, #64	; 0x40
 800683a:	46bd      	mov	sp, r7
 800683c:	bdb0      	pop	{r4, r5, r7, pc}
 800683e:	bf00      	nop
 8006840:	08009eac 	.word	0x08009eac
 8006844:	200034b4 	.word	0x200034b4
 8006848:	2000000c 	.word	0x2000000c

0800684c <vl53lmz_send_output_config_and_start>:


uint8_t vl53lmz_send_output_config_and_start(
		VL53LMZ_Configuration	  *p_dev ) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b08c      	sub	sp, #48	; 0x30
 8006850:	af02      	add	r7, sp, #8
 8006852:	6078      	str	r0, [r7, #4]

	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8006862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8006868:	f107 031b 	add.w	r3, r7, #27
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fd0d 	bl	800628e <vl53lmz_get_resolution>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800687c:	4313      	orrs	r3, r2
 800687e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	p_dev->data_read_size = 0;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	609a      	str	r2, [r3, #8]
	p_dev->streamcount = 255;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	22ff      	movs	r2, #255	; 0xff
 800688c:	711a      	strb	r2, [r3, #4]

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	e072      	b.n	800697a <vl53lmz_send_output_config_and_start+0x12e>
	{
		if ((g_output_config[i] == (uint8_t)0)
 8006894:	4a93      	ldr	r2, [pc, #588]	; (8006ae4 <vl53lmz_send_output_config_and_start+0x298>)
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d068      	beq.n	8006972 <vl53lmz_send_output_config_and_start+0x126>
					|| ((g_output_bh_enable[i/(uint32_t)32]
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	4a90      	ldr	r2, [pc, #576]	; (8006ae8 <vl53lmz_send_output_config_and_start+0x29c>)
 80068a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						 &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	f003 0301 	and.w	r3, r3, #1
					|| ((g_output_bh_enable[i/(uint32_t)32]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05a      	beq.n	8006972 <vl53lmz_send_output_config_and_start+0x126>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(g_output_config[i]);
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a88      	ldr	r2, [pc, #544]	; (8006ae4 <vl53lmz_send_output_config_and_start+0x298>)
 80068c2:	4413      	add	r3, r2
 80068c4:	61fb      	str	r3, [r7, #28]
		if ( (bh_ptr->type >= 0x1) && (bh_ptr->type < 0x0d))
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d03e      	beq.n	8006952 <vl53lmz_send_output_config_and_start+0x106>
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b0c      	cmp	r3, #12
 80068e0:	d837      	bhi.n	8006952 <vl53lmz_send_output_config_and_start+0x106>
		{
			if ( bh_ptr->idx >= 0x54d0 ) {
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	885b      	ldrh	r3, [r3, #2]
 80068e6:	f245 42cf 	movw	r2, #21711	; 0x54cf
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d91e      	bls.n	800692c <vl53lmz_send_output_config_and_start+0xe0>
				/* might be a zone or target data block */
				if ( bh_ptr->idx < (0x5890) )
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	885b      	ldrh	r3, [r3, #2]
 80068f2:	f645 028f 	movw	r2, #22671	; 0x588f
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d809      	bhi.n	800690e <vl53lmz_send_output_config_and_start+0xc2>
				{
					/* it is zone data (does not depend on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution;
 80068fa:	7efb      	ldrb	r3, [r7, #27]
 80068fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006900:	b299      	uxth	r1, r3
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	8813      	ldrh	r3, [r2, #0]
 8006906:	f361 130f 	bfi	r3, r1, #4, #12
 800690a:	8013      	strh	r3, [r2, #0]
 800690c:	e00e      	b.n	800692c <vl53lmz_send_output_config_and_start+0xe0>
				}
				else if (bh_ptr->idx < (uint16_t)(0x6C90))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	f646 428f 	movw	r2, #27791	; 0x6c8f
 8006916:	4293      	cmp	r3, r2
 8006918:	d808      	bhi.n	800692c <vl53lmz_send_output_config_and_start+0xe0>
				{
					/* it is a per-target data block (depends on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution * VL53LMZ_NB_TARGET_PER_ZONE;
 800691a:	7efb      	ldrb	r3, [r7, #27]
 800691c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006920:	b299      	uxth	r1, r3
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	8813      	ldrh	r3, [r2, #0]
 8006926:	f361 130f 	bfi	r3, r1, #4, #12
 800692a:	8013      	strh	r3, [r2, #0]
				}
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	4611      	mov	r1, r2
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006944:	b292      	uxth	r2, r2
 8006946:	fb01 f202 	mul.w	r2, r1, r2
 800694a:	441a      	add	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	e009      	b.n	8006966 <vl53lmz_send_output_config_and_start+0x11a>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	8812      	ldrh	r2, [r2, #0]
 800695a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800695e:	b292      	uxth	r2, r2
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	609a      	str	r2, [r3, #8]
		}
		p_dev->data_read_size += (uint32_t)4;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	609a      	str	r2, [r3, #8]
 8006970:	e000      	b.n	8006974 <vl53lmz_send_output_config_and_start+0x128>
			continue;
 8006972:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3301      	adds	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2b1f      	cmp	r3, #31
 800697e:	d989      	bls.n	8006894 <vl53lmz_send_output_config_and_start+0x48>
	}
	p_dev->data_read_size += (uint32_t)24;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f103 0218 	add.w	r2, r3, #24
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	609a      	str	r2, [r3, #8]


	if (p_dev->data_read_size > VL53LMZ_MAX_RESULTS_SIZE) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f641 62c8 	movw	r2, #7880	; 0x1ec8
 8006994:	4293      	cmp	r3, r2
 8006996:	d905      	bls.n	80069a4 <vl53lmz_send_output_config_and_start+0x158>
		status |= VL53LMZ_STATUS_ERROR;
 8006998:	23ff      	movs	r3, #255	; 0xff
 800699a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return status;
 800699e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a2:	e09b      	b.n	8006adc <vl53lmz_send_output_config_and_start+0x290>
	}

	status |= vl53lmz_dci_write_data(p_dev,
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	f64d 1280 	movw	r2, #55680	; 0xd980
 80069aa:	494e      	ldr	r1, [pc, #312]	; (8006ae4 <vl53lmz_send_output_config_and_start+0x298>)
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff fe13 	bl	80065d8 <vl53lmz_dci_write_data>
 80069b2:	4603      	mov	r3, r0
 80069b4:	461a      	mov	r2, r3
 80069b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_config), VL53LMZ_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(g_output_config));

	header_config[0] = p_dev->data_read_size;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	613b      	str	r3, [r7, #16]
	header_config[1] = i + (uint32_t)1;
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	3301      	adds	r3, #1
 80069ca:	617b      	str	r3, [r7, #20]

	status |= vl53lmz_dci_write_data(p_dev,
 80069cc:	f107 0110 	add.w	r1, r7, #16
 80069d0:	2308      	movs	r3, #8
 80069d2:	f64d 1268 	movw	r2, #55656	; 0xd968
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fdfe 	bl	80065d8 <vl53lmz_dci_write_data>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(header_config), VL53LMZ_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53lmz_dci_write_data(p_dev,
 80069ea:	2310      	movs	r3, #16
 80069ec:	f64d 1270 	movw	r2, #55664	; 0xd970
 80069f0:	493d      	ldr	r1, [pc, #244]	; (8006ae8 <vl53lmz_send_output_config_and_start+0x29c>)
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff fdf0 	bl	80065d8 <vl53lmz_dci_write_data>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_bh_enable), VL53LMZ_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(g_output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe f824 	bl	8004a5c <WrByte>
 8006a14:	4603      	mov	r3, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2205      	movs	r2, #5
 8006a26:	2109      	movs	r1, #9
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fe f817 	bl	8004a5c <WrByte>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe f809 	bl	8004a5c <WrByte>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53LMZ_UI_CMD_END -
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f107 020c 	add.w	r2, r7, #12
 8006a5e:	2304      	movs	r3, #4
 8006a60:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8006a64:	f7fe f822 	bl	8004aac <WrMulti>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006a76:	2303      	movs	r3, #3
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	23ff      	movs	r3, #255	; 0xff
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a82:	2201      	movs	r2, #1
 8006a84:	2104      	movs	r1, #4
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fe f8a7 	bl	8004bda <_vl53lmz_poll_for_answer>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53lmz_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f203 5104 	addw	r1, r3, #1284	; 0x504
	status |= vl53lmz_dci_read_data(p_dev,
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	f245 4240 	movw	r2, #21568	; 0x5440
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fd0c 	bl	80064c4 <vl53lmz_dci_read_data>
 8006aac:	4603      	mov	r3, r0
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	833b      	strh	r3, [r7, #24]
	if(tmp != p_dev->data_read_size) {
 8006ac6:	8b3b      	ldrh	r3, [r7, #24]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d002      	beq.n	8006ad8 <vl53lmz_send_output_config_and_start+0x28c>
		status |= VL53LMZ_STATUS_ERROR;
 8006ad2:	23ff      	movs	r3, #255	; 0xff
 8006ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8006ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200034b4 	.word	0x200034b4
 8006ae8:	2000000c 	.word	0x2000000c

08006aec <HT_init>:
 8006aec:	b410      	push	{r4}
 8006aee:	b1f0      	cbz	r0, 8006b2e <HT_init+0x42>
 8006af0:	b1e9      	cbz	r1, 8006b2e <HT_init+0x42>
 8006af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006af6:	22fa      	movs	r2, #250	; 0xfa
 8006af8:	e9c0 3200 	strd	r3, r2, [r0]
 8006afc:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8006b00:	2301      	movs	r3, #1
 8006b02:	e9c0 4302 	strd	r4, r3, [r0, #8]
 8006b06:	7603      	strb	r3, [r0, #24]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2464      	movs	r4, #100	; 0x64
 8006b0c:	61c3      	str	r3, [r0, #28]
 8006b0e:	6203      	str	r3, [r0, #32]
 8006b10:	6243      	str	r3, [r0, #36]	; 0x24
 8006b12:	2300      	movs	r3, #0
 8006b14:	e9c0 4204 	strd	r4, r2, [r0, #16]
 8006b18:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
 8006b1c:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 8006b20:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
 8006b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b28:	4608      	mov	r0, r1
 8006b2a:	f000 bd49 	b.w	80075c0 <SEN_init>
 8006b2e:	f06f 0001 	mvn.w	r0, #1
 8006b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HT_set_path_length>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b1a8      	cbz	r0, 8006b6a <HT_set_path_length+0x32>
 8006b3e:	2900      	cmp	r1, #0
 8006b40:	db16      	blt.n	8006b70 <HT_set_path_length+0x38>
 8006b42:	2300      	movs	r3, #0
 8006b44:	6001      	str	r1, [r0, #0]
 8006b46:	6083      	str	r3, [r0, #8]
 8006b48:	300c      	adds	r0, #12
 8006b4a:	f000 fcd0 	bl	80074ee <RFBVM_init>
 8006b4e:	b970      	cbnz	r0, 8006b6e <HT_set_path_length+0x36>
 8006b50:	6821      	ldr	r1, [r4, #0]
 8006b52:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8006b56:	f000 fcca 	bl	80074ee <RFBVM_init>
 8006b5a:	b940      	cbnz	r0, 8006b6e <HT_set_path_length+0x36>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	f204 4034 	addw	r0, r4, #1076	; 0x434
 8006b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b66:	f000 bcc2 	b.w	80074ee <RFBVM_init>
 8006b6a:	f06f 0001 	mvn.w	r0, #1
 8006b6e:	bd10      	pop	{r4, pc}
 8006b70:	f06f 0003 	mvn.w	r0, #3
 8006b74:	e7fb      	b.n	8006b6e <HT_set_path_length+0x36>
	...

08006b78 <HT_set_frequency>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	ed2d 8b02 	vpush	{d8}
 8006b80:	4604      	mov	r4, r0
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d044      	beq.n	8006c10 <HT_set_frequency+0x98>
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d042      	beq.n	8006c10 <HT_set_frequency+0x98>
 8006b8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b92:	d942      	bls.n	8006c1a <HT_set_frequency+0xa2>
 8006b94:	4608      	mov	r0, r1
 8006b96:	f000 fd27 	bl	80075e8 <SEN_set_frequency>
 8006b9a:	bbd8      	cbnz	r0, 8006c14 <HT_set_frequency+0x9c>
 8006b9c:	edd4 7a00 	vldr	s15, [r4]
 8006ba0:	edd5 8a03 	vldr	s17, [r5, #12]
 8006ba4:	ed9f 8a20 	vldr	s16, [pc, #128]	; 8006c28 <HT_set_frequency+0xb0>
 8006ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bac:	ee27 7a28 	vmul.f32	s14, s14, s17
 8006bb0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8006bb4:	ee17 0a90 	vmov	r0, s15
 8006bb8:	f7f9 fc72 	bl	80004a0 <__aeabi_f2d>
 8006bbc:	ec41 0b10 	vmov	d0, r0, r1
 8006bc0:	f001 f986 	bl	8007ed0 <ceil>
 8006bc4:	ec51 0b10 	vmov	r0, r1, d0
 8006bc8:	f7f9 ff72 	bl	8000ab0 <__aeabi_d2iz>
 8006bcc:	edd4 7a01 	vldr	s15, [r4, #4]
 8006bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8006bda:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8006bde:	ee17 0a90 	vmov	r0, s15
 8006be2:	f7f9 fc5d 	bl	80004a0 <__aeabi_f2d>
 8006be6:	ec41 0b10 	vmov	d0, r0, r1
 8006bea:	f001 f971 	bl	8007ed0 <ceil>
 8006bee:	ec51 0b10 	vmov	r0, r1, d0
 8006bf2:	f7f9 ff5d 	bl	8000ab0 <__aeabi_d2iz>
 8006bf6:	4285      	cmp	r5, r0
 8006bf8:	db12      	blt.n	8006c20 <HT_set_frequency+0xa8>
 8006bfa:	ecbd 8b02 	vpop	{d8}
 8006bfe:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
 8006c02:	4629      	mov	r1, r5
 8006c04:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 8006c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0c:	f7ff bf94 	b.w	8006b38 <HT_set_path_length>
 8006c10:	f06f 0001 	mvn.w	r0, #1
 8006c14:	ecbd 8b02 	vpop	{d8}
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
 8006c1a:	f06f 0005 	mvn.w	r0, #5
 8006c1e:	e7f9      	b.n	8006c14 <HT_set_frequency+0x9c>
 8006c20:	f06f 0006 	mvn.w	r0, #6
 8006c24:	e7f6      	b.n	8006c14 <HT_set_frequency+0x9c>
 8006c26:	bf00      	nop
 8006c28:	447a0000 	.word	0x447a0000

08006c2c <HT_struct_init>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	460d      	mov	r5, r1
 8006c30:	4604      	mov	r4, r0
 8006c32:	b178      	cbz	r0, 8006c54 <HT_struct_init+0x28>
 8006c34:	1e4b      	subs	r3, r1, #1
 8006c36:	2b3f      	cmp	r3, #63	; 0x3f
 8006c38:	d80f      	bhi.n	8006c5a <HT_struct_init+0x2e>
 8006c3a:	008a      	lsls	r2, r1, #2
 8006c3c:	300c      	adds	r0, #12
 8006c3e:	2100      	movs	r1, #0
 8006c40:	f000 ff06 	bl	8007a50 <memset>
 8006c44:	462a      	mov	r2, r5
 8006c46:	2100      	movs	r1, #0
 8006c48:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8006c4c:	f000 ff00 	bl	8007a50 <memset>
 8006c50:	2000      	movs	r0, #0
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	f06f 0001 	mvn.w	r0, #1
 8006c58:	e7fb      	b.n	8006c52 <HT_struct_init+0x26>
 8006c5a:	f06f 0003 	mvn.w	r0, #3
 8006c5e:	e7f8      	b.n	8006c52 <HT_struct_init+0x26>

08006c60 <HT_set_square_resolution>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	4605      	mov	r5, r0
 8006c66:	4611      	mov	r1, r2
 8006c68:	b168      	cbz	r0, 8006c86 <HT_set_square_resolution+0x26>
 8006c6a:	b164      	cbz	r4, 8006c86 <HT_set_square_resolution+0x26>
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	dd0d      	ble.n	8006c8c <HT_set_square_resolution+0x2c>
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fcdd 	bl	8007630 <SEN_set_square_resolution>
 8006c76:	b940      	cbnz	r0, 8006c8a <HT_set_square_resolution+0x2a>
 8006c78:	68a1      	ldr	r1, [r4, #8]
 8006c7a:	f105 001c 	add.w	r0, r5, #28
 8006c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c82:	f7ff bfd3 	b.w	8006c2c <HT_struct_init>
 8006c86:	f06f 0001 	mvn.w	r0, #1
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	f06f 0003 	mvn.w	r0, #3
 8006c90:	e7fb      	b.n	8006c8a <HT_set_square_resolution+0x2a>
 8006c92:	0000      	movs	r0, r0
 8006c94:	0000      	movs	r0, r0
	...

08006c98 <HT_find_hand>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	ed2d 8b08 	vpush	{d8-d11}
 8006ca0:	468a      	mov	sl, r1
 8006ca2:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f000 8334 	beq.w	8007316 <HT_find_hand+0x67e>
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	f000 8331 	beq.w	8007316 <HT_find_hand+0x67e>
 8006cb4:	688b      	ldr	r3, [r1, #8]
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f340 832f 	ble.w	800731c <HT_find_hand+0x684>
 8006cbe:	f501 7308 	add.w	r3, r1, #544	; 0x220
 8006cc2:	9306      	str	r3, [sp, #24]
 8006cc4:	69cb      	ldr	r3, [r1, #28]
 8006cc6:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8006da4 <HT_find_hand+0x10c>
 8006cd0:	edd0 9a07 	vldr	s19, [r0, #28]
 8006cd4:	ed90 aa08 	vldr	s20, [r0, #32]
 8006cd8:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 8006cdc:	ed80 8a07 	vstr	s16, [r0, #28]
 8006ce0:	009e      	lsls	r6, r3, #2
 8006ce2:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8006ce6:	2700      	movs	r7, #0
 8006ce8:	f101 0920 	add.w	r9, r1, #32
 8006cec:	4632      	mov	r2, r6
 8006cee:	ed80 8a08 	vstr	s16, [r0, #32]
 8006cf2:	ed80 8a09 	vstr	s16, [r0, #36]	; 0x24
 8006cf6:	f8a0 7168 	strh.w	r7, [r0, #360]	; 0x168
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	a8e8      	add	r0, sp, #928	; 0x3a0
 8006cfe:	f000 fed9 	bl	8007ab4 <memcpy>
 8006d02:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8006d06:	4619      	mov	r1, r3
 8006d08:	9a01      	ldr	r2, [sp, #4]
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
 8006d10:	f000 fed0 	bl	8007ab4 <memcpy>
 8006d14:	9a04      	ldr	r2, [sp, #16]
 8006d16:	9209      	str	r2, [sp, #36]	; 0x24
 8006d18:	f20a 231f 	addw	r3, sl, #543	; 0x21f
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d22:	444e      	add	r6, r9
 8006d24:	4618      	mov	r0, r3
 8006d26:	464a      	mov	r2, r9
 8006d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8006d30:	ecf2 7a01 	vldmia	r2!, {s15}
 8006d34:	f1bc 0f00 	cmp.w	ip, #0
 8006d38:	bf0c      	ite	eq
 8006d3a:	eeb0 7a48 	vmoveq.f32	s14, s16
 8006d3e:	eeb0 7a66 	vmovne.f32	s14, s13
 8006d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d46:	42b2      	cmp	r2, r6
 8006d48:	ece5 7a01 	vstmia	r5!, {s15}
 8006d4c:	f801 7b01 	strb.w	r7, [r1], #1
 8006d50:	d1ec      	bne.n	8006d2c <HT_find_hand+0x94>
 8006d52:	4649      	mov	r1, r9
 8006d54:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006d5e:	b168      	cbz	r0, 8006d7c <HT_find_hand+0xe4>
 8006d60:	1c70      	adds	r0, r6, #1
 8006d62:	d01b      	beq.n	8006d9c <HT_find_hand+0x104>
 8006d64:	eb09 0086 	add.w	r0, r9, r6, lsl #2
 8006d68:	ed91 7a00 	vldr	s14, [r1]
 8006d6c:	edd0 7a00 	vldr	s15, [r0]
 8006d70:	eeb4 7a67 	vcmp.f32	s14, s15
 8006d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d78:	bf48      	it	mi
 8006d7a:	4616      	movmi	r6, r2
 8006d7c:	9801      	ldr	r0, [sp, #4]
 8006d7e:	3201      	adds	r2, #1
 8006d80:	4290      	cmp	r0, r2
 8006d82:	f101 0104 	add.w	r1, r1, #4
 8006d86:	d1e8      	bne.n	8006d5a <HT_find_hand+0xc2>
 8006d88:	1c73      	adds	r3, r6, #1
 8006d8a:	d10d      	bne.n	8006da8 <HT_find_hand+0x110>
 8006d8c:	2500      	movs	r5, #0
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8006d94:	ecbd 8b08 	vpop	{d8-d11}
 8006d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	e7ed      	b.n	8006d7c <HT_find_hand+0xe4>
 8006da0:	43c80000 	.word	0x43c80000
 8006da4:	00000000 	.word	0x00000000
 8006da8:	4652      	mov	r2, sl
 8006daa:	eeb0 1a49 	vmov.f32	s2, s18
 8006dae:	eef0 0a4a 	vmov.f32	s1, s20
 8006db2:	eeb0 0a69 	vmov.f32	s0, s19
 8006db6:	a919      	add	r1, sp, #100	; 0x64
 8006db8:	a818      	add	r0, sp, #96	; 0x60
 8006dba:	f000 fdc9 	bl	8007950 <SEN_mm_to_col_row>
 8006dbe:	1cc7      	adds	r7, r0, #3
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	d02b      	beq.n	8006e1c <HT_find_hand+0x184>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d1e2      	bne.n	8006d8e <HT_find_hand+0xf6>
 8006dc8:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 8006dcc:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8006dd0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dd8:	ee17 2a10 	vmov	r2, s14
 8006ddc:	ee17 1a90 	vmov	r1, s15
 8006de0:	4653      	mov	r3, sl
 8006de2:	a816      	add	r0, sp, #88	; 0x58
 8006de4:	f000 fca0 	bl	8007728 <SEN_col_row_to_idx>
 8006de8:	4605      	mov	r5, r0
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d1cf      	bne.n	8006d8e <HT_find_hand+0xf6>
 8006dee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006df0:	9a06      	ldr	r2, [sp, #24]
 8006df2:	5cd2      	ldrb	r2, [r2, r3]
 8006df4:	b192      	cbz	r2, 8006e1c <HT_find_hand+0x184>
 8006df6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8006dfa:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8006dfe:	edd2 7a00 	vldr	s15, [r2]
 8006e02:	ed93 7a00 	vldr	s14, [r3]
 8006e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e0a:	edd4 7a04 	vldr	s15, [r4, #16]
 8006e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e1a:	d400      	bmi.n	8006e1e <HT_find_hand+0x186>
 8006e1c:	9616      	str	r6, [sp, #88]	; 0x58
 8006e1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e20:	9325      	str	r3, [sp, #148]	; 0x94
 8006e22:	18e1      	adds	r1, r4, r3
 8006e24:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8006e28:	2201      	movs	r2, #1
 8006e2a:	ed93 8a00 	vldr	s16, [r3]
 8006e2e:	f881 2128 	strb.w	r2, [r1, #296]	; 0x128
 8006e32:	2300      	movs	r3, #0
 8006e34:	9202      	str	r2, [sp, #8]
 8006e36:	9305      	str	r3, [sp, #20]
 8006e38:	9a05      	ldr	r2, [sp, #20]
 8006e3a:	ab25      	add	r3, sp, #148	; 0x94
 8006e3c:	ae17      	add	r6, sp, #92	; 0x5c
 8006e3e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006e42:	4631      	mov	r1, r6
 8006e44:	4653      	mov	r3, sl
 8006e46:	462a      	mov	r2, r5
 8006e48:	a815      	add	r0, sp, #84	; 0x54
 8006e4a:	f000 fc2d 	bl	80076a8 <SEN_idx_to_col_row>
 8006e4e:	9000      	str	r0, [sp, #0]
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f040 8266 	bne.w	8007322 <HT_find_hand+0x68a>
 8006e56:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 8006e5a:	9312      	str	r3, [sp, #72]	; 0x48
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e60:	4680      	mov	r8, r0
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	9613      	str	r6, [sp, #76]	; 0x4c
 8006e66:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e6c:	9807      	ldr	r0, [sp, #28]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006e72:	4653      	mov	r3, sl
 8006e74:	4401      	add	r1, r0
 8006e76:	445a      	add	r2, fp
 8006e78:	a816      	add	r0, sp, #88	; 0x58
 8006e7a:	f000 fc55 	bl	8007728 <SEN_col_row_to_idx>
 8006e7e:	1cc6      	adds	r6, r0, #3
 8006e80:	4605      	mov	r5, r0
 8006e82:	d018      	beq.n	8006eb6 <HT_find_hand+0x21e>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d182      	bne.n	8006d8e <HT_find_hand+0xf6>
 8006e88:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8006e8a:	19a3      	adds	r3, r4, r6
 8006e8c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8006e90:	9308      	str	r3, [sp, #32]
 8006e92:	b983      	cbnz	r3, 8006eb6 <HT_find_hand+0x21e>
 8006e94:	9b06      	ldr	r3, [sp, #24]
 8006e96:	5d9b      	ldrb	r3, [r3, r6]
 8006e98:	930a      	str	r3, [sp, #40]	; 0x28
 8006e9a:	b163      	cbz	r3, 8006eb6 <HT_find_hand+0x21e>
 8006e9c:	af1c      	add	r7, sp, #112	; 0x70
 8006e9e:	4545      	cmp	r5, r8
 8006ea0:	f040 817a 	bne.w	8007198 <HT_find_hand+0x500>
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	b103      	cbz	r3, 8006eaa <HT_find_hand+0x212>
 8006ea8:	9616      	str	r6, [sp, #88]	; 0x58
 8006eaa:	aa1c      	add	r2, sp, #112	; 0x70
 8006eac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eae:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	f10b 0b01 	add.w	fp, fp, #1
 8006eba:	f1bb 0f02 	cmp.w	fp, #2
 8006ebe:	d1d4      	bne.n	8006e6a <HT_find_hand+0x1d2>
 8006ec0:	9b07      	ldr	r3, [sp, #28]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	d1cd      	bne.n	8006e66 <HT_find_hand+0x1ce>
 8006eca:	2500      	movs	r5, #0
 8006ecc:	9516      	str	r5, [sp, #88]	; 0x58
 8006ece:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	2701      	movs	r7, #1
 8006ed6:	4545      	cmp	r5, r8
 8006ed8:	f040 8194 	bne.w	8007204 <HT_find_hand+0x56c>
 8006edc:	b103      	cbz	r3, 8006ee0 <HT_find_hand+0x248>
 8006ede:	9516      	str	r5, [sp, #88]	; 0x58
 8006ee0:	9b05      	ldr	r3, [sp, #20]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	9a05      	ldr	r2, [sp, #20]
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	4293      	cmp	r3, r2
 8006eec:	dca4      	bgt.n	8006e38 <HT_find_hand+0x1a0>
 8006eee:	edd4 7a02 	vldr	s15, [r4, #8]
 8006ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ef6:	eef4 7ac8 	vcmpe.f32	s15, s16
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	f53f af45 	bmi.w	8006d8c <HT_find_hand+0xf4>
 8006f02:	68e3      	ldr	r3, [r4, #12]
 8006f04:	9a02      	ldr	r2, [sp, #8]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	f6bf af40 	bge.w	8006d8c <HT_find_hand+0xf4>
 8006f0c:	6963      	ldr	r3, [r4, #20]
 8006f0e:	eddd 7a01 	vldr	s15, [sp, #4]
 8006f12:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f22:	eef4 7ac8 	vcmpe.f32	s15, s16
 8006f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2a:	bfdf      	itttt	le
 8006f2c:	435b      	mulle	r3, r3
 8006f2e:	ee07 3a90 	vmovle	s15, r3
 8006f32:	ee68 6a08 	vmulle.f32	s13, s16, s16
 8006f36:	eef8 7ae7 	vcvtle.f32.s32	s15, s15
 8006f3a:	bfcf      	iteee	gt
 8006f3c:	ee36 7a07 	vaddgt.f32	s14, s12, s14
 8006f40:	eec6 5aa7 	vdivle.f32	s11, s13, s15
 8006f44:	eec6 7a25 	vdivle.f32	s15, s12, s11
 8006f48:	ee37 7a87 	vaddle.f32	s14, s15, s14
 8006f4c:	eddd 7a02 	vldr	s15, [sp, #8]
 8006f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5c:	dd07      	ble.n	8006f6e <HT_find_hand+0x2d6>
 8006f5e:	ed5f 7a70 	vldr	s15, [pc, #-448]	; 8006da0 <HT_find_hand+0x108>
 8006f62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6a:	f53f af0f 	bmi.w	8006d8c <HT_find_hand+0xf4>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
 8006f74:	f50d 7825 	add.w	r8, sp, #660	; 0x294
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	9302      	str	r3, [sp, #8]
 8006f7c:	464f      	mov	r7, r9
 8006f7e:	46c3      	mov	fp, r8
 8006f80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006f84:	9a02      	ldr	r2, [sp, #8]
 8006f86:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006f8a:	9202      	str	r2, [sp, #8]
 8006f8c:	b1f3      	cbz	r3, 8006fcc <HT_find_hand+0x334>
 8006f8e:	9a00      	ldr	r2, [sp, #0]
 8006f90:	ed97 0a00 	vldr	s0, [r7]
 8006f94:	ad65      	add	r5, sp, #404	; 0x194
 8006f96:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8006f9a:	4653      	mov	r3, sl
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	f000 fcb8 	bl	8007912 <SEN_idx_to_mm>
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f47f aef2 	bne.w	8006d8e <HT_find_hand+0xf6>
 8006faa:	1c70      	adds	r0, r6, #1
 8006fac:	f000 8167 	beq.w	800727e <HT_find_hand+0x5e6>
 8006fb0:	aba5      	add	r3, sp, #660	; 0x294
 8006fb2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006fb6:	ed93 7a00 	vldr	s14, [r3]
 8006fba:	eddb 7a00 	vldr	s15, [fp]
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	eeb4 7a67 	vcmp.f32	s14, s15
 8006fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc8:	bf48      	it	mi
 8006fca:	461e      	movmi	r6, r3
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	f10b 0b04 	add.w	fp, fp, #4
 8006fdc:	f107 0704 	add.w	r7, r7, #4
 8006fe0:	dcd0      	bgt.n	8006f84 <HT_find_hand+0x2ec>
 8006fe2:	1c71      	adds	r1, r6, #1
 8006fe4:	f43f aed2 	beq.w	8006d8c <HT_find_hand+0xf4>
 8006fe8:	4652      	mov	r2, sl
 8006fea:	eeb0 0a48 	vmov.f32	s0, s16
 8006fee:	a91a      	add	r1, sp, #104	; 0x68
 8006ff0:	a81b      	add	r0, sp, #108	; 0x6c
 8006ff2:	f000 fbdc 	bl	80077ae <SEN_zone_size>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8195 	bne.w	8007326 <HT_find_hand+0x68e>
 8006ffc:	6963      	ldr	r3, [r4, #20]
 8006ffe:	435b      	muls	r3, r3
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	ee28 8a08 	vmul.f32	s16, s16, s16
 8007008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800700c:	ad65      	add	r5, sp, #404	; 0x194
 800700e:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8007012:	ed1f 8a9c 	vldr	s16, [pc, #-624]	; 8006da4 <HT_find_hand+0x10c>
 8007016:	ee17 0a90 	vmov	r0, s15
 800701a:	f7f9 fa41 	bl	80004a0 <__aeabi_f2d>
 800701e:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 8007330 <HT_find_hand+0x698>
 8007022:	ec41 0b11 	vmov	d1, r0, r1
 8007026:	f000 fd9b 	bl	8007b60 <pow>
 800702a:	49c3      	ldr	r1, [pc, #780]	; (8007338 <HT_find_hand+0x6a0>)
 800702c:	ec53 2b10 	vmov	r2, r3, d0
 8007030:	2000      	movs	r0, #0
 8007032:	f7f9 f8d5 	bl	80001e0 <__aeabi_dsub>
 8007036:	460b      	mov	r3, r1
 8007038:	4602      	mov	r2, r0
 800703a:	f7f9 f8d3 	bl	80001e4 <__adddf3>
 800703e:	f7f9 fd5f 	bl	8000b00 <__aeabi_d2f>
 8007042:	aba5      	add	r3, sp, #660	; 0x294
 8007044:	ee0a 0a90 	vmov	s21, r0
 8007048:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800704c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800704e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007052:	9209      	str	r2, [sp, #36]	; 0x24
 8007054:	b3db      	cbz	r3, 80070ce <HT_find_hand+0x436>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 800705c:	7e23      	ldrb	r3, [r4, #24]
 800705e:	b1db      	cbz	r3, 8007098 <HT_find_hand+0x400>
 8007060:	ed96 7a00 	vldr	s14, [r6]
 8007064:	edd8 7a00 	vldr	s15, [r8]
 8007068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800706c:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8007070:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8007074:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8007078:	ee17 0a90 	vmov	r0, s15
 800707c:	f7f9 fa10 	bl	80004a0 <__aeabi_f2d>
 8007080:	ec41 0b10 	vmov	d0, r0, r1
 8007084:	f000 fd24 	bl	8007ad0 <exp>
 8007088:	ec51 0b10 	vmov	r0, r1, d0
 800708c:	f7f9 fd38 	bl	8000b00 <__aeabi_d2f>
 8007090:	ee07 0a90 	vmov	s15, r0
 8007094:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8007098:	ed95 7a00 	vldr	s14, [r5]
 800709c:	edd4 7a07 	vldr	s15, [r4, #28]
 80070a0:	9b03      	ldr	r3, [sp, #12]
 80070a2:	eee7 7a28 	vfma.f32	s15, s14, s17
 80070a6:	ed98 7a00 	vldr	s14, [r8]
 80070aa:	edc4 7a07 	vstr	s15, [r4, #28]
 80070ae:	edd4 7a08 	vldr	s15, [r4, #32]
 80070b2:	eee7 7a28 	vfma.f32	s15, s14, s17
 80070b6:	ee38 8a28 	vadd.f32	s16, s16, s17
 80070ba:	edc4 7a08 	vstr	s15, [r4, #32]
 80070be:	ed93 7a00 	vldr	s14, [r3]
 80070c2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80070c6:	eee7 7a28 	vfma.f32	s15, s14, s17
 80070ca:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	9a01      	ldr	r2, [sp, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	9303      	str	r3, [sp, #12]
 80070d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d8:	1b1b      	subs	r3, r3, r4
 80070da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80070de:	429a      	cmp	r2, r3
 80070e0:	f105 0504 	add.w	r5, r5, #4
 80070e4:	f108 0804 	add.w	r8, r8, #4
 80070e8:	dcb0      	bgt.n	800704c <HT_find_hand+0x3b4>
 80070ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80070ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f2:	d011      	beq.n	8007118 <HT_find_hand+0x480>
 80070f4:	ed94 7a07 	vldr	s14, [r4, #28]
 80070f8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80070fc:	ed94 7a08 	vldr	s14, [r4, #32]
 8007100:	edc4 7a07 	vstr	s15, [r4, #28]
 8007104:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007108:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800710c:	edc4 7a08 	vstr	s15, [r4, #32]
 8007110:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007114:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 8007118:	4651      	mov	r1, sl
 800711a:	eeb0 1a49 	vmov.f32	s2, s18
 800711e:	eef0 0a4a 	vmov.f32	s1, s20
 8007122:	eeb0 0a69 	vmov.f32	s0, s19
 8007126:	a816      	add	r0, sp, #88	; 0x58
 8007128:	f000 fc73 	bl	8007a12 <SEN_mm_to_idx>
 800712c:	1cc2      	adds	r2, r0, #3
 800712e:	4605      	mov	r5, r0
 8007130:	f000 80e6 	beq.w	8007300 <HT_find_hand+0x668>
 8007134:	2800      	cmp	r0, #0
 8007136:	f47f ae2a 	bne.w	8006d8e <HT_find_hand+0xf6>
 800713a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800713c:	18e2      	adds	r2, r4, r3
 800713e:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 8007142:	2a00      	cmp	r2, #0
 8007144:	f47f ae22 	bne.w	8006d8c <HT_find_hand+0xf4>
 8007148:	9a06      	ldr	r2, [sp, #24]
 800714a:	5cd2      	ldrb	r2, [r2, r3]
 800714c:	2a00      	cmp	r2, #0
 800714e:	f000 8098 	beq.w	8007282 <HT_find_hand+0x5ea>
 8007152:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	f7f9 f9a2 	bl	80004a0 <__aeabi_f2d>
 800715c:	4606      	mov	r6, r0
 800715e:	ee19 0a10 	vmov	r0, s18
 8007162:	460f      	mov	r7, r1
 8007164:	f7f9 f99c 	bl	80004a0 <__aeabi_f2d>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4630      	mov	r0, r6
 800716e:	4639      	mov	r1, r7
 8007170:	f7f9 f836 	bl	80001e0 <__aeabi_dsub>
 8007174:	4606      	mov	r6, r0
 8007176:	6920      	ldr	r0, [r4, #16]
 8007178:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800717c:	f7f9 f97e 	bl	800047c <__aeabi_i2d>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f7f9 fc54 	bl	8000a34 <__aeabi_dcmplt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d078      	beq.n	8007282 <HT_find_hand+0x5ea>
 8007190:	2301      	movs	r3, #1
 8007192:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
 8007196:	e5f9      	b.n	8006d8c <HT_find_hand+0xf4>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	930b      	str	r3, [sp, #44]	; 0x2c
 800719c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	f7f9 f97e 	bl	80004a0 <__aeabi_f2d>
 80071a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80071aa:	ec41 0b1b 	vmov	d11, r0, r1
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f7f9 f976 	bl	80004a0 <__aeabi_f2d>
 80071b4:	ec53 2b1b 	vmov	r2, r3, d11
 80071b8:	f7f9 f812 	bl	80001e0 <__aeabi_dsub>
 80071bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071c0:	930d      	str	r3, [sp, #52]	; 0x34
 80071c2:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80071c6:	900c      	str	r0, [sp, #48]	; 0x30
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f7f9 f969 	bl	80004a0 <__aeabi_f2d>
 80071ce:	ec53 2b1b 	vmov	r2, r3, d11
 80071d2:	f7f9 f805 	bl	80001e0 <__aeabi_dsub>
 80071d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071da:	900e      	str	r0, [sp, #56]	; 0x38
 80071dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80071de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071e6:	f7f9 fc43 	bl	8000a70 <__aeabi_dcmpgt>
 80071ea:	b140      	cbz	r0, 80071fe <HT_find_hand+0x566>
 80071ec:	aa1c      	add	r2, sp, #112	; 0x70
 80071ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f0:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 80071f4:	603e      	str	r6, [r7, #0]
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	3501      	adds	r5, #1
 8007200:	3704      	adds	r7, #4
 8007202:	e64c      	b.n	8006e9e <HT_find_hand+0x206>
 8007204:	f85b 6b04 	ldr.w	r6, [fp], #4
 8007208:	ee18 0a10 	vmov	r0, s16
 800720c:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8007210:	edd3 8a00 	vldr	s17, [r3]
 8007214:	f7f9 f944 	bl	80004a0 <__aeabi_f2d>
 8007218:	ec41 0b1b 	vmov	d11, r0, r1
 800721c:	ee18 0a90 	vmov	r0, s17
 8007220:	f7f9 f93e 	bl	80004a0 <__aeabi_f2d>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	ec51 0b1b 	vmov	r0, r1, d11
 800722c:	f7f8 ffd8 	bl	80001e0 <__aeabi_dsub>
 8007230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007234:	9010      	str	r0, [sp, #64]	; 0x40
 8007236:	6920      	ldr	r0, [r4, #16]
 8007238:	9311      	str	r3, [sp, #68]	; 0x44
 800723a:	f7f9 f91f 	bl	800047c <__aeabi_i2d>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007246:	f7f9 fbf5 	bl	8000a34 <__aeabi_dcmplt>
 800724a:	b1a8      	cbz	r0, 8007278 <HT_find_hand+0x5e0>
 800724c:	9a02      	ldr	r2, [sp, #8]
 800724e:	19a3      	adds	r3, r4, r6
 8007250:	ee07 2a90 	vmov	s15, r2
 8007254:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800725e:	3301      	adds	r3, #1
 8007260:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007264:	a925      	add	r1, sp, #148	; 0x94
 8007266:	9302      	str	r3, [sp, #8]
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007270:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
 8007274:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8007278:	3501      	adds	r5, #1
 800727a:	2301      	movs	r3, #1
 800727c:	e62b      	b.n	8006ed6 <HT_find_hand+0x23e>
 800727e:	9e00      	ldr	r6, [sp, #0]
 8007280:	e6a4      	b.n	8006fcc <HT_find_hand+0x334>
 8007282:	ed94 1a09 	vldr	s2, [r4, #36]	; 0x24
 8007286:	edd4 0a08 	vldr	s1, [r4, #32]
 800728a:	ed94 0a07 	vldr	s0, [r4, #28]
 800728e:	4651      	mov	r1, sl
 8007290:	a816      	add	r0, sp, #88	; 0x58
 8007292:	f000 fbbe 	bl	8007a12 <SEN_mm_to_idx>
 8007296:	1cc3      	adds	r3, r0, #3
 8007298:	f43f ad79 	beq.w	8006d8e <HT_find_hand+0xf6>
 800729c:	2800      	cmp	r0, #0
 800729e:	d142      	bne.n	8007326 <HT_find_hand+0x68e>
 80072a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80072a2:	9b06      	ldr	r3, [sp, #24]
 80072a4:	5d5b      	ldrb	r3, [r3, r5]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f43f ad70 	beq.w	8006d8c <HT_find_hand+0xf4>
 80072ac:	abe5      	add	r3, sp, #916	; 0x394
 80072ae:	442b      	add	r3, r5
 80072b0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f47f ad69 	bne.w	8006d8c <HT_find_hand+0xf4>
 80072ba:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	f7f9 f8ee 	bl	80004a0 <__aeabi_f2d>
 80072c4:	abe5      	add	r3, sp, #916	; 0x394
 80072c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80072ca:	4606      	mov	r6, r0
 80072cc:	68d8      	ldr	r0, [r3, #12]
 80072ce:	460f      	mov	r7, r1
 80072d0:	f7f9 f8e6 	bl	80004a0 <__aeabi_f2d>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f8 ff80 	bl	80001e0 <__aeabi_dsub>
 80072e0:	4606      	mov	r6, r0
 80072e2:	6920      	ldr	r0, [r4, #16]
 80072e4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80072e8:	f7f9 f8c8 	bl	800047c <__aeabi_i2d>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f9 fb9e 	bl	8000a34 <__aeabi_dcmplt>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	f47f af49 	bne.w	8007190 <HT_find_hand+0x4f8>
 80072fe:	e545      	b.n	8006d8c <HT_find_hand+0xf4>
 8007300:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 8007304:	2b00      	cmp	r3, #0
 8007306:	f77f af43 	ble.w	8007190 <HT_find_hand+0x4f8>
 800730a:	f8d4 2174 	ldr.w	r2, [r4, #372]	; 0x174
 800730e:	4293      	cmp	r3, r2
 8007310:	f73f af3e 	bgt.w	8007190 <HT_find_hand+0x4f8>
 8007314:	e53a      	b.n	8006d8c <HT_find_hand+0xf4>
 8007316:	f06f 0501 	mvn.w	r5, #1
 800731a:	e538      	b.n	8006d8e <HT_find_hand+0xf6>
 800731c:	f06f 0503 	mvn.w	r5, #3
 8007320:	e535      	b.n	8006d8e <HT_find_hand+0xf6>
 8007322:	9d00      	ldr	r5, [sp, #0]
 8007324:	e533      	b.n	8006d8e <HT_find_hand+0xf6>
 8007326:	4605      	mov	r5, r0
 8007328:	e531      	b.n	8006d8e <HT_find_hand+0xf6>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
 8007330:	00000000 	.word	0x00000000
 8007334:	3fe00000 	.word	0x3fe00000
 8007338:	3ff00000 	.word	0x3ff00000

0800733c <HT_path_interpolate>:
 800733c:	e92d 4f58 	stmdb	sp!, {r3, r4, r6, r8, r9, sl, fp, lr}
 8007340:	4604      	mov	r4, r0
 8007342:	ed2d 8b08 	vpush	{d8-d11}
 8007346:	eeb0 8a40 	vmov.f32	s16, s0
 800734a:	eef0 8a60 	vmov.f32	s17, s1
 800734e:	eeb0 9a41 	vmov.f32	s18, s2
 8007352:	2800      	cmp	r0, #0
 8007354:	d072      	beq.n	800743c <HT_path_interpolate+0x100>
 8007356:	6883      	ldr	r3, [r0, #8]
 8007358:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
 800735c:	f100 0b0c 	add.w	fp, r0, #12
 8007360:	1ac9      	subs	r1, r1, r3
 8007362:	4658      	mov	r0, fp
 8007364:	f000 f914 	bl	8007590 <RFBVM_get_element_value>
 8007368:	68a3      	ldr	r3, [r4, #8]
 800736a:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 800736e:	f504 7908 	add.w	r9, r4, #544	; 0x220
 8007372:	1ac9      	subs	r1, r1, r3
 8007374:	4648      	mov	r0, r9
 8007376:	eef0 9a40 	vmov.f32	s19, s0
 800737a:	f000 f909 	bl	8007590 <RFBVM_get_element_value>
 800737e:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	f204 4a34 	addw	sl, r4, #1076	; 0x434
 8007388:	1ac9      	subs	r1, r1, r3
 800738a:	4650      	mov	r0, sl
 800738c:	eeb0 aa40 	vmov.f32	s20, s0
 8007390:	f000 f8fe 	bl	8007590 <RFBVM_get_element_value>
 8007394:	2600      	movs	r6, #0
 8007396:	eef0 aa40 	vmov.f32	s21, s0
 800739a:	f04f 0801 	mov.w	r8, #1
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	4543      	cmp	r3, r8
 80073a2:	dc08      	bgt.n	80073b6 <HT_path_interpolate+0x7a>
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	bf18      	it	ne
 80073a8:	f06f 0607 	mvnne.w	r6, #7
 80073ac:	ecbd 8b08 	vpop	{d8-d11}
 80073b0:	4630      	mov	r0, r6
 80073b2:	e8bd 8f58 	ldmia.w	sp!, {r3, r4, r6, r8, r9, sl, fp, pc}
 80073b6:	ee07 8a90 	vmov	s15, r8
 80073ba:	ee39 7ac8 	vsub.f32	s14, s19, s16
 80073be:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80073ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ce:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 80073d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80073d6:	eba1 0108 	sub.w	r1, r1, r8
 80073da:	4658      	mov	r0, fp
 80073dc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80073e0:	f000 f8e2 	bl	80075a8 <RFBVM_set_element_value>
 80073e4:	edd4 7a02 	vldr	s15, [r4, #8]
 80073e8:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 80073ec:	ee3a 7a68 	vsub.f32	s14, s20, s17
 80073f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073f4:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80073f8:	eba1 0108 	sub.w	r1, r1, r8
 80073fc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007400:	4406      	add	r6, r0
 8007402:	4648      	mov	r0, r9
 8007404:	ee30 0a28 	vadd.f32	s0, s0, s17
 8007408:	f000 f8ce 	bl	80075a8 <RFBVM_set_element_value>
 800740c:	edd4 7a02 	vldr	s15, [r4, #8]
 8007410:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 8007414:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8007418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800741c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8007420:	4406      	add	r6, r0
 8007422:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007426:	eba1 0108 	sub.w	r1, r1, r8
 800742a:	4650      	mov	r0, sl
 800742c:	f108 0801 	add.w	r8, r8, #1
 8007430:	ee30 0a09 	vadd.f32	s0, s0, s18
 8007434:	f000 f8b8 	bl	80075a8 <RFBVM_set_element_value>
 8007438:	4406      	add	r6, r0
 800743a:	e7b0      	b.n	800739e <HT_path_interpolate+0x62>
 800743c:	f06f 0601 	mvn.w	r6, #1
 8007440:	e7b4      	b.n	80073ac <HT_path_interpolate+0x70>

08007442 <HT_update_path>:
 8007442:	b510      	push	{r4, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	2800      	cmp	r0, #0
 8007448:	d03f      	beq.n	80074ca <HT_update_path+0x88>
 800744a:	f890 2168 	ldrb.w	r2, [r0, #360]	; 0x168
 800744e:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
 8007452:	b37a      	cbz	r2, 80074b4 <HT_update_path+0x72>
 8007454:	2b01      	cmp	r3, #1
 8007456:	dc18      	bgt.n	800748a <HT_update_path+0x48>
 8007458:	2301      	movs	r3, #1
 800745a:	ed94 0a07 	vldr	s0, [r4, #28]
 800745e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 8007462:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8007466:	f000 f859 	bl	800751c <RFBVM_push>
 800746a:	bb10      	cbnz	r0, 80074b2 <HT_update_path+0x70>
 800746c:	ed94 0a08 	vldr	s0, [r4, #32]
 8007470:	f504 7064 	add.w	r0, r4, #912	; 0x390
 8007474:	f000 f852 	bl	800751c <RFBVM_push>
 8007478:	b9d8      	cbnz	r0, 80074b2 <HT_update_path+0x70>
 800747a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 800747e:	f204 50a4 	addw	r0, r4, #1444	; 0x5a4
 8007482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007486:	f000 b849 	b.w	800751c <RFBVM_push>
 800748a:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
 800748e:	429a      	cmp	r2, r3
 8007490:	dbe2      	blt.n	8007458 <HT_update_path+0x16>
 8007492:	f890 3169 	ldrb.w	r3, [r0, #361]	; 0x169
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1de      	bne.n	8007458 <HT_update_path+0x16>
 800749a:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 800749e:	edd0 0a08 	vldr	s1, [r0, #32]
 80074a2:	ed90 0a07 	vldr	s0, [r0, #28]
 80074a6:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 80074aa:	f7ff ff47 	bl	800733c <HT_path_interpolate>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d0d2      	beq.n	8007458 <HT_update_path+0x16>
 80074b2:	bd10      	pop	{r4, pc}
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd06      	ble.n	80074c6 <HT_update_path+0x84>
 80074b8:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	2a00      	cmp	r2, #0
 80074c0:	dd01      	ble.n	80074c6 <HT_update_path+0x84>
 80074c2:	3301      	adds	r3, #1
 80074c4:	e7c9      	b.n	800745a <HT_update_path+0x18>
 80074c6:	2300      	movs	r3, #0
 80074c8:	e7c7      	b.n	800745a <HT_update_path+0x18>
 80074ca:	f06f 0001 	mvn.w	r0, #1
 80074ce:	e7f0      	b.n	80074b2 <HT_update_path+0x70>

080074d0 <HT_run>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	4604      	mov	r4, r0
 80074d4:	b140      	cbz	r0, 80074e8 <HT_run+0x18>
 80074d6:	b139      	cbz	r1, 80074e8 <HT_run+0x18>
 80074d8:	f7ff fbde 	bl	8006c98 <HT_find_hand>
 80074dc:	b930      	cbnz	r0, 80074ec <HT_run+0x1c>
 80074de:	4620      	mov	r0, r4
 80074e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e4:	f7ff bfad 	b.w	8007442 <HT_update_path>
 80074e8:	f06f 0001 	mvn.w	r0, #1
 80074ec:	bd10      	pop	{r4, pc}

080074ee <RFBVM_init>:
 80074ee:	2901      	cmp	r1, #1
 80074f0:	460b      	mov	r3, r1
 80074f2:	bfb8      	it	lt
 80074f4:	2301      	movlt	r3, #1
 80074f6:	2b80      	cmp	r3, #128	; 0x80
 80074f8:	bfa8      	it	ge
 80074fa:	2380      	movge	r3, #128	; 0x80
 80074fc:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8007500:	e9c0 2080 	strd	r2, r0, [r0, #512]	; 0x200
 8007504:	2200      	movs	r2, #0
 8007506:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800750a:	f8c0 0208 	str.w	r0, [r0, #520]	; 0x208
 800750e:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 8007512:	1a58      	subs	r0, r3, r1
 8007514:	bf18      	it	ne
 8007516:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800751a:	4770      	bx	lr

0800751c <RFBVM_push>:
 800751c:	b1f0      	cbz	r0, 800755c <RFBVM_push+0x40>
 800751e:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8007522:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 8007526:	eca3 0a01 	vstmia	r3!, {s0}
 800752a:	4293      	cmp	r3, r2
 800752c:	bf14      	ite	ne
 800752e:	4619      	movne	r1, r3
 8007530:	4601      	moveq	r1, r0
 8007532:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
 8007536:	e9d0 3183 	ldrd	r3, r1, [r0, #524]	; 0x20c
 800753a:	428b      	cmp	r3, r1
 800753c:	d10a      	bne.n	8007554 <RFBVM_push+0x38>
 800753e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8007542:	3304      	adds	r3, #4
 8007544:	429a      	cmp	r2, r3
 8007546:	bf0c      	ite	eq
 8007548:	f8c0 0204 	streq.w	r0, [r0, #516]	; 0x204
 800754c:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 8007550:	2000      	movs	r0, #0
 8007552:	4770      	bx	lr
 8007554:	3301      	adds	r3, #1
 8007556:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
 800755a:	e7f9      	b.n	8007550 <RFBVM_push+0x34>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007560:	4770      	bx	lr

08007562 <RFBVM_get_element_pointer>:
 8007562:	2900      	cmp	r1, #0
 8007564:	4602      	mov	r2, r0
 8007566:	db10      	blt.n	800758a <RFBVM_get_element_pointer+0x28>
 8007568:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
 800756c:	428b      	cmp	r3, r1
 800756e:	dd0c      	ble.n	800758a <RFBVM_get_element_pointer+0x28>
 8007570:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8007574:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8007578:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800757c:	4298      	cmp	r0, r3
 800757e:	d305      	bcc.n	800758c <RFBVM_get_element_pointer+0x2a>
 8007580:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8007584:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8007588:	4770      	bx	lr
 800758a:	2000      	movs	r0, #0
 800758c:	4770      	bx	lr
	...

08007590 <RFBVM_get_element_value>:
 8007590:	b508      	push	{r3, lr}
 8007592:	f7ff ffe6 	bl	8007562 <RFBVM_get_element_pointer>
 8007596:	b110      	cbz	r0, 800759e <RFBVM_get_element_value+0xe>
 8007598:	ed90 0a00 	vldr	s0, [r0]
 800759c:	bd08      	pop	{r3, pc}
 800759e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80075a4 <RFBVM_get_element_value+0x14>
 80075a2:	e7fb      	b.n	800759c <RFBVM_get_element_value+0xc>
 80075a4:	00000000 	.word	0x00000000

080075a8 <RFBVM_set_element_value>:
 80075a8:	b508      	push	{r3, lr}
 80075aa:	f7ff ffda 	bl	8007562 <RFBVM_get_element_pointer>
 80075ae:	b118      	cbz	r0, 80075b8 <RFBVM_set_element_value+0x10>
 80075b0:	ed80 0a00 	vstr	s0, [r0]
 80075b4:	2000      	movs	r0, #0
 80075b6:	bd08      	pop	{r3, pc}
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075bc:	e7fb      	b.n	80075b6 <RFBVM_set_element_value+0xe>
	...

080075c0 <SEN_init>:
 80075c0:	b160      	cbz	r0, 80075dc <SEN_init+0x1c>
 80075c2:	2200      	movs	r2, #0
 80075c4:	60c2      	str	r2, [r0, #12]
 80075c6:	4a07      	ldr	r2, [pc, #28]	; (80075e4 <SEN_init+0x24>)
 80075c8:	6102      	str	r2, [r0, #16]
 80075ca:	2300      	movs	r3, #0
 80075cc:	6142      	str	r2, [r0, #20]
 80075ce:	2201      	movs	r2, #1
 80075d0:	e9c0 3300 	strd	r3, r3, [r0]
 80075d4:	6083      	str	r3, [r0, #8]
 80075d6:	7602      	strb	r2, [r0, #24]
 80075d8:	4618      	mov	r0, r3
 80075da:	4770      	bx	lr
 80075dc:	f06f 0001 	mvn.w	r0, #1
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	3f402037 	.word	0x3f402037

080075e8 <SEN_set_frequency>:
 80075e8:	b140      	cbz	r0, 80075fc <SEN_set_frequency+0x14>
 80075ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	d906      	bls.n	8007602 <SEN_set_frequency+0x1a>
 80075f4:	ed80 0a03 	vstr	s0, [r0, #12]
 80075f8:	2000      	movs	r0, #0
 80075fa:	4770      	bx	lr
 80075fc:	f06f 0001 	mvn.w	r0, #1
 8007600:	4770      	bx	lr
 8007602:	f06f 0005 	mvn.w	r0, #5
 8007606:	4770      	bx	lr

08007608 <SEN_set_resolution>:
 8007608:	b160      	cbz	r0, 8007624 <SEN_set_resolution+0x1c>
 800760a:	2900      	cmp	r1, #0
 800760c:	dd0d      	ble.n	800762a <SEN_set_resolution+0x22>
 800760e:	2a00      	cmp	r2, #0
 8007610:	dd0b      	ble.n	800762a <SEN_set_resolution+0x22>
 8007612:	fb02 f301 	mul.w	r3, r2, r1
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	dc07      	bgt.n	800762a <SEN_set_resolution+0x22>
 800761a:	e9c0 1200 	strd	r1, r2, [r0]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	2000      	movs	r0, #0
 8007622:	4770      	bx	lr
 8007624:	f06f 0001 	mvn.w	r0, #1
 8007628:	4770      	bx	lr
 800762a:	f06f 0003 	mvn.w	r0, #3
 800762e:	4770      	bx	lr

08007630 <SEN_set_square_resolution>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	460c      	mov	r4, r1
 8007634:	4605      	mov	r5, r0
 8007636:	b1b8      	cbz	r0, 8007668 <SEN_set_square_resolution+0x38>
 8007638:	2900      	cmp	r1, #0
 800763a:	dd18      	ble.n	800766e <SEN_set_square_resolution+0x3e>
 800763c:	4608      	mov	r0, r1
 800763e:	f7f8 ff1d 	bl	800047c <__aeabi_i2d>
 8007642:	ec41 0b10 	vmov	d0, r0, r1
 8007646:	f000 fafb 	bl	8007c40 <sqrt>
 800764a:	ec51 0b10 	vmov	r0, r1, d0
 800764e:	f7f9 fa2f 	bl	8000ab0 <__aeabi_d2iz>
 8007652:	fb00 f300 	mul.w	r3, r0, r0
 8007656:	42a3      	cmp	r3, r4
 8007658:	4602      	mov	r2, r0
 800765a:	d10b      	bne.n	8007674 <SEN_set_square_resolution+0x44>
 800765c:	4601      	mov	r1, r0
 800765e:	4628      	mov	r0, r5
 8007660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007664:	f7ff bfd0 	b.w	8007608 <SEN_set_resolution>
 8007668:	f06f 0001 	mvn.w	r0, #1
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	f06f 0003 	mvn.w	r0, #3
 8007672:	e7fb      	b.n	800766c <SEN_set_square_resolution+0x3c>
 8007674:	f06f 0004 	mvn.w	r0, #4
 8007678:	e7f8      	b.n	800766c <SEN_set_square_resolution+0x3c>

0800767a <SEN_set_data>:
 800767a:	b178      	cbz	r0, 800769c <SEN_set_data+0x22>
 800767c:	2900      	cmp	r1, #0
 800767e:	db10      	blt.n	80076a2 <SEN_set_data+0x28>
 8007680:	6883      	ldr	r3, [r0, #8]
 8007682:	428b      	cmp	r3, r1
 8007684:	dd0d      	ble.n	80076a2 <SEN_set_data+0x28>
 8007686:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800768a:	4408      	add	r0, r1
 800768c:	ed83 0a08 	vstr	s0, [r3, #32]
 8007690:	edc3 0a48 	vstr	s1, [r3, #288]	; 0x120
 8007694:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
 8007698:	2000      	movs	r0, #0
 800769a:	4770      	bx	lr
 800769c:	f06f 0001 	mvn.w	r0, #1
 80076a0:	4770      	bx	lr
 80076a2:	f06f 0002 	mvn.w	r0, #2
 80076a6:	4770      	bx	lr

080076a8 <SEN_idx_to_col_row>:
 80076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076aa:	b38b      	cbz	r3, 8007710 <SEN_idx_to_col_row+0x68>
 80076ac:	2a00      	cmp	r2, #0
 80076ae:	db32      	blt.n	8007716 <SEN_idx_to_col_row+0x6e>
 80076b0:	689c      	ldr	r4, [r3, #8]
 80076b2:	4294      	cmp	r4, r2
 80076b4:	dd2f      	ble.n	8007716 <SEN_idx_to_col_row+0x6e>
 80076b6:	681d      	ldr	r5, [r3, #0]
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	dd2f      	ble.n	800771c <SEN_idx_to_col_row+0x74>
 80076bc:	fb92 f6f5 	sdiv	r6, r2, r5
 80076c0:	7e1f      	ldrb	r7, [r3, #24]
 80076c2:	fb05 2216 	mls	r2, r5, r6, r2
 80076c6:	4634      	mov	r4, r6
 80076c8:	2f07      	cmp	r7, #7
 80076ca:	d82a      	bhi.n	8007722 <SEN_idx_to_col_row+0x7a>
 80076cc:	e8df f007 	tbb	[pc, r7]
 80076d0:	090d070f 	.word	0x090d070f
 80076d4:	1b041613 	.word	0x1b041613
 80076d8:	4614      	mov	r4, r2
 80076da:	4632      	mov	r2, r6
 80076dc:	e007      	b.n	80076ee <SEN_idx_to_col_row+0x46>
 80076de:	3d01      	subs	r5, #1
 80076e0:	1aaa      	subs	r2, r5, r2
 80076e2:	685c      	ldr	r4, [r3, #4]
 80076e4:	3c01      	subs	r4, #1
 80076e6:	1ba4      	subs	r4, r4, r6
 80076e8:	e001      	b.n	80076ee <SEN_idx_to_col_row+0x46>
 80076ea:	3d01      	subs	r5, #1
 80076ec:	1aaa      	subs	r2, r5, r2
 80076ee:	6002      	str	r2, [r0, #0]
 80076f0:	600c      	str	r4, [r1, #0]
 80076f2:	2000      	movs	r0, #0
 80076f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f6:	1e6c      	subs	r4, r5, #1
 80076f8:	1aa4      	subs	r4, r4, r2
 80076fa:	e7ee      	b.n	80076da <SEN_idx_to_col_row+0x32>
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4614      	mov	r4, r2
 8007700:	3b01      	subs	r3, #1
 8007702:	1b9a      	subs	r2, r3, r6
 8007704:	e7f3      	b.n	80076ee <SEN_idx_to_col_row+0x46>
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	1e6c      	subs	r4, r5, #1
 800770a:	3b01      	subs	r3, #1
 800770c:	1aa4      	subs	r4, r4, r2
 800770e:	e7f8      	b.n	8007702 <SEN_idx_to_col_row+0x5a>
 8007710:	f06f 0001 	mvn.w	r0, #1
 8007714:	e7ee      	b.n	80076f4 <SEN_idx_to_col_row+0x4c>
 8007716:	f06f 0002 	mvn.w	r0, #2
 800771a:	e7eb      	b.n	80076f4 <SEN_idx_to_col_row+0x4c>
 800771c:	f06f 0003 	mvn.w	r0, #3
 8007720:	e7e8      	b.n	80076f4 <SEN_idx_to_col_row+0x4c>
 8007722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007726:	e7e5      	b.n	80076f4 <SEN_idx_to_col_row+0x4c>

08007728 <SEN_col_row_to_idx>:
 8007728:	b510      	push	{r4, lr}
 800772a:	2b00      	cmp	r3, #0
 800772c:	d036      	beq.n	800779c <SEN_col_row_to_idx+0x74>
 800772e:	7e1c      	ldrb	r4, [r3, #24]
 8007730:	2c07      	cmp	r4, #7
 8007732:	d836      	bhi.n	80077a2 <SEN_col_row_to_idx+0x7a>
 8007734:	e8df f004 	tbb	[pc, r4]
 8007738:	0b0f0812 	.word	0x0b0f0812
 800773c:	2b042721 	.word	0x2b042721
 8007740:	460c      	mov	r4, r1
 8007742:	4611      	mov	r1, r2
 8007744:	4622      	mov	r2, r4
 8007746:	e009      	b.n	800775c <SEN_col_row_to_idx+0x34>
 8007748:	681c      	ldr	r4, [r3, #0]
 800774a:	3c01      	subs	r4, #1
 800774c:	1a61      	subs	r1, r4, r1
 800774e:	685c      	ldr	r4, [r3, #4]
 8007750:	3c01      	subs	r4, #1
 8007752:	1aa2      	subs	r2, r4, r2
 8007754:	e002      	b.n	800775c <SEN_col_row_to_idx+0x34>
 8007756:	681c      	ldr	r4, [r3, #0]
 8007758:	3c01      	subs	r4, #1
 800775a:	1a61      	subs	r1, r4, r1
 800775c:	2900      	cmp	r1, #0
 800775e:	db23      	blt.n	80077a8 <SEN_col_row_to_idx+0x80>
 8007760:	681c      	ldr	r4, [r3, #0]
 8007762:	428c      	cmp	r4, r1
 8007764:	dd20      	ble.n	80077a8 <SEN_col_row_to_idx+0x80>
 8007766:	2a00      	cmp	r2, #0
 8007768:	db1e      	blt.n	80077a8 <SEN_col_row_to_idx+0x80>
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4293      	cmp	r3, r2
 800776e:	dd1b      	ble.n	80077a8 <SEN_col_row_to_idx+0x80>
 8007770:	fb02 1104 	mla	r1, r2, r4, r1
 8007774:	6001      	str	r1, [r0, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	bd10      	pop	{r4, pc}
 800777a:	681c      	ldr	r4, [r3, #0]
 800777c:	3c01      	subs	r4, #1
 800777e:	1aa4      	subs	r4, r4, r2
 8007780:	460a      	mov	r2, r1
 8007782:	4621      	mov	r1, r4
 8007784:	e7ea      	b.n	800775c <SEN_col_row_to_idx+0x34>
 8007786:	685c      	ldr	r4, [r3, #4]
 8007788:	3c01      	subs	r4, #1
 800778a:	1a64      	subs	r4, r4, r1
 800778c:	e7d9      	b.n	8007742 <SEN_col_row_to_idx+0x1a>
 800778e:	681c      	ldr	r4, [r3, #0]
 8007790:	3c01      	subs	r4, #1
 8007792:	1aa4      	subs	r4, r4, r2
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	3a01      	subs	r2, #1
 8007798:	1a52      	subs	r2, r2, r1
 800779a:	e7f2      	b.n	8007782 <SEN_col_row_to_idx+0x5a>
 800779c:	f06f 0001 	mvn.w	r0, #1
 80077a0:	e7ea      	b.n	8007778 <SEN_col_row_to_idx+0x50>
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a6:	e7e7      	b.n	8007778 <SEN_col_row_to_idx+0x50>
 80077a8:	f06f 0002 	mvn.w	r0, #2
 80077ac:	e7e4      	b.n	8007778 <SEN_col_row_to_idx+0x50>

080077ae <SEN_zone_size>:
 80077ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b2:	4680      	mov	r8, r0
 80077b4:	ed2d 8b04 	vpush	{d8-d9}
 80077b8:	460f      	mov	r7, r1
 80077ba:	4614      	mov	r4, r2
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d04e      	beq.n	800785e <SEN_zone_size+0xb0>
 80077c0:	6816      	ldr	r6, [r2, #0]
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	dd4e      	ble.n	8007864 <SEN_zone_size+0xb6>
 80077c6:	6855      	ldr	r5, [r2, #4]
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	dd4b      	ble.n	8007864 <SEN_zone_size+0xb6>
 80077cc:	edd2 7a04 	vldr	s15, [r2, #16]
 80077d0:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80077d4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80077d8:	ee30 8a00 	vadd.f32	s16, s0, s0
 80077dc:	ee17 0a90 	vmov	r0, s15
 80077e0:	f7f8 fe5e 	bl	80004a0 <__aeabi_f2d>
 80077e4:	ec41 0b10 	vmov	d0, r0, r1
 80077e8:	f000 fa56 	bl	8007c98 <tan>
 80077ec:	ec51 0b10 	vmov	r0, r1, d0
 80077f0:	f7f9 f986 	bl	8000b00 <__aeabi_d2f>
 80077f4:	ee07 0a90 	vmov	s15, r0
 80077f8:	ee27 7a88 	vmul.f32	s14, s15, s16
 80077fc:	ee07 6a90 	vmov	s15, r6
 8007800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007804:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8007808:	edd4 7a05 	vldr	s15, [r4, #20]
 800780c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007810:	ee17 0a90 	vmov	r0, s15
 8007814:	f7f8 fe44 	bl	80004a0 <__aeabi_f2d>
 8007818:	ec41 0b10 	vmov	d0, r0, r1
 800781c:	f000 fa3c 	bl	8007c98 <tan>
 8007820:	ec51 0b10 	vmov	r0, r1, d0
 8007824:	f7f9 f96c 	bl	8000b00 <__aeabi_d2f>
 8007828:	ee07 0a90 	vmov	s15, r0
 800782c:	ee27 8a88 	vmul.f32	s16, s15, s16
 8007830:	ee07 5a90 	vmov	s15, r5
 8007834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007838:	7e23      	ldrb	r3, [r4, #24]
 800783a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800783e:	2b03      	cmp	r3, #3
 8007840:	f04f 0000 	mov.w	r0, #0
 8007844:	bf95      	itete	ls
 8007846:	edc8 8a00 	vstrls	s17, [r8]
 800784a:	ed88 7a00 	vstrhi	s14, [r8]
 800784e:	ed87 7a00 	vstrls	s14, [r7]
 8007852:	edc7 8a00 	vstrhi	s17, [r7]
 8007856:	ecbd 8b04 	vpop	{d8-d9}
 800785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785e:	f06f 0001 	mvn.w	r0, #1
 8007862:	e7f8      	b.n	8007856 <SEN_zone_size+0xa8>
 8007864:	f06f 0003 	mvn.w	r0, #3
 8007868:	e7f5      	b.n	8007856 <SEN_zone_size+0xa8>

0800786a <SEN_actual_res>:
 800786a:	b162      	cbz	r2, 8007886 <SEN_actual_res+0x1c>
 800786c:	7e13      	ldrb	r3, [r2, #24]
 800786e:	2b03      	cmp	r3, #3
 8007870:	bf95      	itete	ls
 8007872:	6813      	ldrls	r3, [r2, #0]
 8007874:	6853      	ldrhi	r3, [r2, #4]
 8007876:	6003      	strls	r3, [r0, #0]
 8007878:	6003      	strhi	r3, [r0, #0]
 800787a:	bf94      	ite	ls
 800787c:	6853      	ldrls	r3, [r2, #4]
 800787e:	6813      	ldrhi	r3, [r2, #0]
 8007880:	600b      	str	r3, [r1, #0]
 8007882:	2000      	movs	r0, #0
 8007884:	4770      	bx	lr
 8007886:	f06f 0001 	mvn.w	r0, #1
 800788a:	4770      	bx	lr

0800788c <SEN_col_row_to_mm>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	ed2d 8b02 	vpush	{d8}
 8007892:	b084      	sub	sp, #16
 8007894:	ee08 2a90 	vmov	s17, r2
 8007898:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800789a:	ee08 3a10 	vmov	s16, r3
 800789e:	4605      	mov	r5, r0
 80078a0:	460c      	mov	r4, r1
 80078a2:	b39e      	cbz	r6, 800790c <SEN_col_row_to_mm+0x80>
 80078a4:	4632      	mov	r2, r6
 80078a6:	a901      	add	r1, sp, #4
 80078a8:	4668      	mov	r0, sp
 80078aa:	f7ff ff80 	bl	80077ae <SEN_zone_size>
 80078ae:	bb48      	cbnz	r0, 8007904 <SEN_col_row_to_mm+0x78>
 80078b0:	4632      	mov	r2, r6
 80078b2:	a903      	add	r1, sp, #12
 80078b4:	a802      	add	r0, sp, #8
 80078b6:	f7ff ffd8 	bl	800786a <SEN_actual_res>
 80078ba:	bb18      	cbnz	r0, 8007904 <SEN_col_row_to_mm+0x78>
 80078bc:	eddd 7a02 	vldr	s15, [sp, #8]
 80078c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078cc:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80078d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80078d4:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80078d8:	eddd 7a00 	vldr	s15, [sp]
 80078dc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80078e0:	eddd 7a03 	vldr	s15, [sp, #12]
 80078e4:	edc5 8a00 	vstr	s17, [r5]
 80078e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ec:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80078f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078f4:	eddd 7a01 	vldr	s15, [sp, #4]
 80078f8:	eea7 8a26 	vfma.f32	s16, s14, s13
 80078fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007900:	ed84 8a00 	vstr	s16, [r4]
 8007904:	b004      	add	sp, #16
 8007906:	ecbd 8b02 	vpop	{d8}
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	f06f 0001 	mvn.w	r0, #1
 8007910:	e7f8      	b.n	8007904 <SEN_col_row_to_mm+0x78>

08007912 <SEN_idx_to_mm>:
 8007912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007914:	4606      	mov	r6, r0
 8007916:	b085      	sub	sp, #20
 8007918:	460f      	mov	r7, r1
 800791a:	461c      	mov	r4, r3
 800791c:	b193      	cbz	r3, 8007944 <SEN_idx_to_mm+0x32>
 800791e:	2a00      	cmp	r2, #0
 8007920:	db13      	blt.n	800794a <SEN_idx_to_mm+0x38>
 8007922:	6899      	ldr	r1, [r3, #8]
 8007924:	4291      	cmp	r1, r2
 8007926:	dd10      	ble.n	800794a <SEN_idx_to_mm+0x38>
 8007928:	a903      	add	r1, sp, #12
 800792a:	a802      	add	r0, sp, #8
 800792c:	f7ff febc 	bl	80076a8 <SEN_idx_to_col_row>
 8007930:	b930      	cbnz	r0, 8007940 <SEN_idx_to_mm+0x2e>
 8007932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007936:	9400      	str	r4, [sp, #0]
 8007938:	4639      	mov	r1, r7
 800793a:	4630      	mov	r0, r6
 800793c:	f7ff ffa6 	bl	800788c <SEN_col_row_to_mm>
 8007940:	b005      	add	sp, #20
 8007942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007944:	f06f 0001 	mvn.w	r0, #1
 8007948:	e7fa      	b.n	8007940 <SEN_idx_to_mm+0x2e>
 800794a:	f06f 0002 	mvn.w	r0, #2
 800794e:	e7f7      	b.n	8007940 <SEN_idx_to_mm+0x2e>

08007950 <SEN_mm_to_col_row>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	ed2d 8b02 	vpush	{d8}
 8007956:	4606      	mov	r6, r0
 8007958:	eef0 8a40 	vmov.f32	s17, s0
 800795c:	b084      	sub	sp, #16
 800795e:	460d      	mov	r5, r1
 8007960:	eeb0 8a60 	vmov.f32	s16, s1
 8007964:	eeb0 0a41 	vmov.f32	s0, s2
 8007968:	4614      	mov	r4, r2
 800796a:	2a00      	cmp	r2, #0
 800796c:	d04e      	beq.n	8007a0c <SEN_mm_to_col_row+0xbc>
 800796e:	a901      	add	r1, sp, #4
 8007970:	4668      	mov	r0, sp
 8007972:	f7ff ff1c 	bl	80077ae <SEN_zone_size>
 8007976:	b940      	cbnz	r0, 800798a <SEN_mm_to_col_row+0x3a>
 8007978:	eddd 7a00 	vldr	s15, [sp]
 800797c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	d805      	bhi.n	8007992 <SEN_mm_to_col_row+0x42>
 8007986:	f06f 0002 	mvn.w	r0, #2
 800798a:	b004      	add	sp, #16
 800798c:	ecbd 8b02 	vpop	{d8}
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	eddd 7a01 	vldr	s15, [sp, #4]
 8007996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	d9f2      	bls.n	8007986 <SEN_mm_to_col_row+0x36>
 80079a0:	4622      	mov	r2, r4
 80079a2:	a903      	add	r1, sp, #12
 80079a4:	a802      	add	r0, sp, #8
 80079a6:	f7ff ff60 	bl	800786a <SEN_actual_res>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d1ed      	bne.n	800798a <SEN_mm_to_col_row+0x3a>
 80079ae:	eddd 7a02 	vldr	s15, [sp, #8]
 80079b2:	ed9d 5a01 	vldr	s10, [sp, #4]
 80079b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80079ba:	eddd 7a00 	vldr	s15, [sp]
 80079be:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 80079c2:	eddd 7a03 	vldr	s15, [sp, #12]
 80079c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079ca:	eec8 7a05 	vdiv.f32	s15, s16, s10
 80079ce:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80079d2:	eea6 7a25 	vfma.f32	s14, s12, s11
 80079d6:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80079da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80079de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e2:	d4d0      	bmi.n	8007986 <SEN_mm_to_col_row+0x36>
 80079e4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80079e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ec:	d9cb      	bls.n	8007986 <SEN_mm_to_col_row+0x36>
 80079ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f6:	d4c6      	bmi.n	8007986 <SEN_mm_to_col_row+0x36>
 80079f8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80079fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a00:	d9c1      	bls.n	8007986 <SEN_mm_to_col_row+0x36>
 8007a02:	ed86 7a00 	vstr	s14, [r6]
 8007a06:	edc5 7a00 	vstr	s15, [r5]
 8007a0a:	e7be      	b.n	800798a <SEN_mm_to_col_row+0x3a>
 8007a0c:	f06f 0001 	mvn.w	r0, #1
 8007a10:	e7bb      	b.n	800798a <SEN_mm_to_col_row+0x3a>

08007a12 <SEN_mm_to_idx>:
 8007a12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a14:	4604      	mov	r4, r0
 8007a16:	b1c1      	cbz	r1, 8007a4a <SEN_mm_to_idx+0x38>
 8007a18:	460a      	mov	r2, r1
 8007a1a:	9101      	str	r1, [sp, #4]
 8007a1c:	a802      	add	r0, sp, #8
 8007a1e:	a903      	add	r1, sp, #12
 8007a20:	f7ff ff96 	bl	8007950 <SEN_mm_to_col_row>
 8007a24:	b978      	cbnz	r0, 8007a46 <SEN_mm_to_idx+0x34>
 8007a26:	eddd 7a03 	vldr	s15, [sp, #12]
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a30:	4620      	mov	r0, r4
 8007a32:	ee17 2a90 	vmov	r2, s15
 8007a36:	eddd 7a02 	vldr	s15, [sp, #8]
 8007a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a3e:	ee17 1a90 	vmov	r1, s15
 8007a42:	f7ff fe71 	bl	8007728 <SEN_col_row_to_idx>
 8007a46:	b004      	add	sp, #16
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	f06f 0001 	mvn.w	r0, #1
 8007a4e:	e7fa      	b.n	8007a46 <SEN_mm_to_idx+0x34>

08007a50 <memset>:
 8007a50:	4402      	add	r2, r0
 8007a52:	4603      	mov	r3, r0
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d100      	bne.n	8007a5a <memset+0xa>
 8007a58:	4770      	bx	lr
 8007a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a5e:	e7f9      	b.n	8007a54 <memset+0x4>

08007a60 <__errno>:
 8007a60:	4b01      	ldr	r3, [pc, #4]	; (8007a68 <__errno+0x8>)
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20000068 	.word	0x20000068

08007a6c <__libc_init_array>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4d0d      	ldr	r5, [pc, #52]	; (8007aa4 <__libc_init_array+0x38>)
 8007a70:	4c0d      	ldr	r4, [pc, #52]	; (8007aa8 <__libc_init_array+0x3c>)
 8007a72:	1b64      	subs	r4, r4, r5
 8007a74:	10a4      	asrs	r4, r4, #2
 8007a76:	2600      	movs	r6, #0
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	d109      	bne.n	8007a90 <__libc_init_array+0x24>
 8007a7c:	4d0b      	ldr	r5, [pc, #44]	; (8007aac <__libc_init_array+0x40>)
 8007a7e:	4c0c      	ldr	r4, [pc, #48]	; (8007ab0 <__libc_init_array+0x44>)
 8007a80:	f002 f9f2 	bl	8009e68 <_init>
 8007a84:	1b64      	subs	r4, r4, r5
 8007a86:	10a4      	asrs	r4, r4, #2
 8007a88:	2600      	movs	r6, #0
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	d105      	bne.n	8007a9a <__libc_init_array+0x2e>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a94:	4798      	blx	r3
 8007a96:	3601      	adds	r6, #1
 8007a98:	e7ee      	b.n	8007a78 <__libc_init_array+0xc>
 8007a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9e:	4798      	blx	r3
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	e7f2      	b.n	8007a8a <__libc_init_array+0x1e>
 8007aa4:	0801fc00 	.word	0x0801fc00
 8007aa8:	0801fc00 	.word	0x0801fc00
 8007aac:	0801fc00 	.word	0x0801fc00
 8007ab0:	0801fc04 	.word	0x0801fc04

08007ab4 <memcpy>:
 8007ab4:	440a      	add	r2, r1
 8007ab6:	4291      	cmp	r1, r2
 8007ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007abc:	d100      	bne.n	8007ac0 <memcpy+0xc>
 8007abe:	4770      	bx	lr
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aca:	4291      	cmp	r1, r2
 8007acc:	d1f9      	bne.n	8007ac2 <memcpy+0xe>
 8007ace:	bd10      	pop	{r4, pc}

08007ad0 <exp>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	ed2d 8b02 	vpush	{d8}
 8007ad6:	ec55 4b10 	vmov	r4, r5, d0
 8007ada:	f000 fc85 	bl	80083e8 <__ieee754_exp>
 8007ade:	eeb0 8a40 	vmov.f32	s16, s0
 8007ae2:	eef0 8a60 	vmov.f32	s17, s1
 8007ae6:	ec45 4b10 	vmov	d0, r4, r5
 8007aea:	f000 f909 	bl	8007d00 <finite>
 8007aee:	b168      	cbz	r0, 8007b0c <exp+0x3c>
 8007af0:	a317      	add	r3, pc, #92	; (adr r3, 8007b50 <exp+0x80>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 ffb9 	bl	8000a70 <__aeabi_dcmpgt>
 8007afe:	b160      	cbz	r0, 8007b1a <exp+0x4a>
 8007b00:	f7ff ffae 	bl	8007a60 <__errno>
 8007b04:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8007b40 <exp+0x70>
 8007b08:	2322      	movs	r3, #34	; 0x22
 8007b0a:	6003      	str	r3, [r0, #0]
 8007b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b10:	eef0 0a68 	vmov.f32	s1, s17
 8007b14:	ecbd 8b02 	vpop	{d8}
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	a30f      	add	r3, pc, #60	; (adr r3, 8007b58 <exp+0x88>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 ff86 	bl	8000a34 <__aeabi_dcmplt>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d0ef      	beq.n	8007b0c <exp+0x3c>
 8007b2c:	f7ff ff98 	bl	8007a60 <__errno>
 8007b30:	2322      	movs	r3, #34	; 0x22
 8007b32:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8007b48 <exp+0x78>
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	e7e8      	b.n	8007b0c <exp+0x3c>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	00000000 	.word	0x00000000
 8007b44:	7ff00000 	.word	0x7ff00000
	...
 8007b50:	fefa39ef 	.word	0xfefa39ef
 8007b54:	40862e42 	.word	0x40862e42
 8007b58:	d52d3051 	.word	0xd52d3051
 8007b5c:	c0874910 	.word	0xc0874910

08007b60 <pow>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	ed2d 8b02 	vpush	{d8}
 8007b66:	eeb0 8a40 	vmov.f32	s16, s0
 8007b6a:	eef0 8a60 	vmov.f32	s17, s1
 8007b6e:	ec55 4b11 	vmov	r4, r5, d1
 8007b72:	f000 fdbd 	bl	80086f0 <__ieee754_pow>
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	ec57 6b10 	vmov	r6, r7, d0
 8007b82:	f7f8 ff7f 	bl	8000a84 <__aeabi_dcmpun>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d13b      	bne.n	8007c02 <pow+0xa2>
 8007b8a:	ec51 0b18 	vmov	r0, r1, d8
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2300      	movs	r3, #0
 8007b92:	f7f8 ff45 	bl	8000a20 <__aeabi_dcmpeq>
 8007b96:	b1b8      	cbz	r0, 8007bc8 <pow+0x68>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 ff3e 	bl	8000a20 <__aeabi_dcmpeq>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d146      	bne.n	8007c36 <pow+0xd6>
 8007ba8:	ec45 4b10 	vmov	d0, r4, r5
 8007bac:	f000 f8a8 	bl	8007d00 <finite>
 8007bb0:	b338      	cbz	r0, 8007c02 <pow+0xa2>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 ff3b 	bl	8000a34 <__aeabi_dcmplt>
 8007bbe:	b300      	cbz	r0, 8007c02 <pow+0xa2>
 8007bc0:	f7ff ff4e 	bl	8007a60 <__errno>
 8007bc4:	2322      	movs	r3, #34	; 0x22
 8007bc6:	e01b      	b.n	8007c00 <pow+0xa0>
 8007bc8:	ec47 6b10 	vmov	d0, r6, r7
 8007bcc:	f000 f898 	bl	8007d00 <finite>
 8007bd0:	b9e0      	cbnz	r0, 8007c0c <pow+0xac>
 8007bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8007bd6:	eef0 0a68 	vmov.f32	s1, s17
 8007bda:	f000 f891 	bl	8007d00 <finite>
 8007bde:	b1a8      	cbz	r0, 8007c0c <pow+0xac>
 8007be0:	ec45 4b10 	vmov	d0, r4, r5
 8007be4:	f000 f88c 	bl	8007d00 <finite>
 8007be8:	b180      	cbz	r0, 8007c0c <pow+0xac>
 8007bea:	4632      	mov	r2, r6
 8007bec:	463b      	mov	r3, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 ff47 	bl	8000a84 <__aeabi_dcmpun>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d0e2      	beq.n	8007bc0 <pow+0x60>
 8007bfa:	f7ff ff31 	bl	8007a60 <__errno>
 8007bfe:	2321      	movs	r3, #33	; 0x21
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	ecbd 8b02 	vpop	{d8}
 8007c06:	ec47 6b10 	vmov	d0, r6, r7
 8007c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 ff04 	bl	8000a20 <__aeabi_dcmpeq>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d0f2      	beq.n	8007c02 <pow+0xa2>
 8007c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007c20:	eef0 0a68 	vmov.f32	s1, s17
 8007c24:	f000 f86c 	bl	8007d00 <finite>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d0ea      	beq.n	8007c02 <pow+0xa2>
 8007c2c:	ec45 4b10 	vmov	d0, r4, r5
 8007c30:	f000 f866 	bl	8007d00 <finite>
 8007c34:	e7c3      	b.n	8007bbe <pow+0x5e>
 8007c36:	4f01      	ldr	r7, [pc, #4]	; (8007c3c <pow+0xdc>)
 8007c38:	2600      	movs	r6, #0
 8007c3a:	e7e2      	b.n	8007c02 <pow+0xa2>
 8007c3c:	3ff00000 	.word	0x3ff00000

08007c40 <sqrt>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	ed2d 8b02 	vpush	{d8}
 8007c46:	ec55 4b10 	vmov	r4, r5, d0
 8007c4a:	f000 f865 	bl	8007d18 <__ieee754_sqrt>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	eeb0 8a40 	vmov.f32	s16, s0
 8007c5a:	eef0 8a60 	vmov.f32	s17, s1
 8007c5e:	f7f8 ff11 	bl	8000a84 <__aeabi_dcmpun>
 8007c62:	b990      	cbnz	r0, 8007c8a <sqrt+0x4a>
 8007c64:	2200      	movs	r2, #0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f7f8 fee2 	bl	8000a34 <__aeabi_dcmplt>
 8007c70:	b158      	cbz	r0, 8007c8a <sqrt+0x4a>
 8007c72:	f7ff fef5 	bl	8007a60 <__errno>
 8007c76:	2321      	movs	r3, #33	; 0x21
 8007c78:	6003      	str	r3, [r0, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4619      	mov	r1, r3
 8007c82:	f7f8 fd8f 	bl	80007a4 <__aeabi_ddiv>
 8007c86:	ec41 0b18 	vmov	d8, r0, r1
 8007c8a:	eeb0 0a48 	vmov.f32	s0, s16
 8007c8e:	eef0 0a68 	vmov.f32	s1, s17
 8007c92:	ecbd 8b02 	vpop	{d8}
 8007c96:	bd38      	pop	{r3, r4, r5, pc}

08007c98 <tan>:
 8007c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c9a:	ec53 2b10 	vmov	r2, r3, d0
 8007c9e:	4816      	ldr	r0, [pc, #88]	; (8007cf8 <tan+0x60>)
 8007ca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ca4:	4281      	cmp	r1, r0
 8007ca6:	dc07      	bgt.n	8007cb8 <tan+0x20>
 8007ca8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007cf0 <tan+0x58>
 8007cac:	2001      	movs	r0, #1
 8007cae:	b005      	add	sp, #20
 8007cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb4:	f000 b98c 	b.w	8007fd0 <__kernel_tan>
 8007cb8:	4810      	ldr	r0, [pc, #64]	; (8007cfc <tan+0x64>)
 8007cba:	4281      	cmp	r1, r0
 8007cbc:	dd09      	ble.n	8007cd2 <tan+0x3a>
 8007cbe:	ee10 0a10 	vmov	r0, s0
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f7f8 fa8c 	bl	80001e0 <__aeabi_dsub>
 8007cc8:	ec41 0b10 	vmov	d0, r0, r1
 8007ccc:	b005      	add	sp, #20
 8007cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd2:	4668      	mov	r0, sp
 8007cd4:	f001 fa38 	bl	8009148 <__ieee754_rem_pio2>
 8007cd8:	0040      	lsls	r0, r0, #1
 8007cda:	f000 0002 	and.w	r0, r0, #2
 8007cde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ce2:	ed9d 0b00 	vldr	d0, [sp]
 8007ce6:	f1c0 0001 	rsb	r0, r0, #1
 8007cea:	f000 f971 	bl	8007fd0 <__kernel_tan>
 8007cee:	e7ed      	b.n	8007ccc <tan+0x34>
	...
 8007cf8:	3fe921fb 	.word	0x3fe921fb
 8007cfc:	7fefffff 	.word	0x7fefffff

08007d00 <finite>:
 8007d00:	b082      	sub	sp, #8
 8007d02:	ed8d 0b00 	vstr	d0, [sp]
 8007d06:	9801      	ldr	r0, [sp, #4]
 8007d08:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d0c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007d10:	0fc0      	lsrs	r0, r0, #31
 8007d12:	b002      	add	sp, #8
 8007d14:	4770      	bx	lr
	...

08007d18 <__ieee754_sqrt>:
 8007d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ec55 4b10 	vmov	r4, r5, d0
 8007d20:	4e67      	ldr	r6, [pc, #412]	; (8007ec0 <__ieee754_sqrt+0x1a8>)
 8007d22:	43ae      	bics	r6, r5
 8007d24:	ee10 0a10 	vmov	r0, s0
 8007d28:	ee10 2a10 	vmov	r2, s0
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	462b      	mov	r3, r5
 8007d30:	d10d      	bne.n	8007d4e <__ieee754_sqrt+0x36>
 8007d32:	f7f8 fc0d 	bl	8000550 <__aeabi_dmul>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fa51 	bl	80001e4 <__adddf3>
 8007d42:	4604      	mov	r4, r0
 8007d44:	460d      	mov	r5, r1
 8007d46:	ec45 4b10 	vmov	d0, r4, r5
 8007d4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	dc0b      	bgt.n	8007d6a <__ieee754_sqrt+0x52>
 8007d52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d56:	4326      	orrs	r6, r4
 8007d58:	d0f5      	beq.n	8007d46 <__ieee754_sqrt+0x2e>
 8007d5a:	b135      	cbz	r5, 8007d6a <__ieee754_sqrt+0x52>
 8007d5c:	f7f8 fa40 	bl	80001e0 <__aeabi_dsub>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	f7f8 fd1e 	bl	80007a4 <__aeabi_ddiv>
 8007d68:	e7eb      	b.n	8007d42 <__ieee754_sqrt+0x2a>
 8007d6a:	1509      	asrs	r1, r1, #20
 8007d6c:	f000 808d 	beq.w	8007e8a <__ieee754_sqrt+0x172>
 8007d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d74:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d7c:	07c9      	lsls	r1, r1, #31
 8007d7e:	bf5c      	itt	pl
 8007d80:	005b      	lslpl	r3, r3, #1
 8007d82:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007d86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d8a:	bf58      	it	pl
 8007d8c:	0052      	lslpl	r2, r2, #1
 8007d8e:	2500      	movs	r5, #0
 8007d90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007d94:	1076      	asrs	r6, r6, #1
 8007d96:	0052      	lsls	r2, r2, #1
 8007d98:	f04f 0e16 	mov.w	lr, #22
 8007d9c:	46ac      	mov	ip, r5
 8007d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007da2:	eb0c 0001 	add.w	r0, ip, r1
 8007da6:	4298      	cmp	r0, r3
 8007da8:	bfde      	ittt	le
 8007daa:	1a1b      	suble	r3, r3, r0
 8007dac:	eb00 0c01 	addle.w	ip, r0, r1
 8007db0:	186d      	addle	r5, r5, r1
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	f1be 0e01 	subs.w	lr, lr, #1
 8007db8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007dbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007dc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007dc4:	d1ed      	bne.n	8007da2 <__ieee754_sqrt+0x8a>
 8007dc6:	4674      	mov	r4, lr
 8007dc8:	2720      	movs	r7, #32
 8007dca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007dce:	4563      	cmp	r3, ip
 8007dd0:	eb01 000e 	add.w	r0, r1, lr
 8007dd4:	dc02      	bgt.n	8007ddc <__ieee754_sqrt+0xc4>
 8007dd6:	d113      	bne.n	8007e00 <__ieee754_sqrt+0xe8>
 8007dd8:	4290      	cmp	r0, r2
 8007dda:	d811      	bhi.n	8007e00 <__ieee754_sqrt+0xe8>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	eb00 0e01 	add.w	lr, r0, r1
 8007de2:	da57      	bge.n	8007e94 <__ieee754_sqrt+0x17c>
 8007de4:	f1be 0f00 	cmp.w	lr, #0
 8007de8:	db54      	blt.n	8007e94 <__ieee754_sqrt+0x17c>
 8007dea:	f10c 0801 	add.w	r8, ip, #1
 8007dee:	eba3 030c 	sub.w	r3, r3, ip
 8007df2:	4290      	cmp	r0, r2
 8007df4:	bf88      	it	hi
 8007df6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007dfa:	1a12      	subs	r2, r2, r0
 8007dfc:	440c      	add	r4, r1
 8007dfe:	46c4      	mov	ip, r8
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	3f01      	subs	r7, #1
 8007e04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007e0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e10:	d1dd      	bne.n	8007dce <__ieee754_sqrt+0xb6>
 8007e12:	4313      	orrs	r3, r2
 8007e14:	d01b      	beq.n	8007e4e <__ieee754_sqrt+0x136>
 8007e16:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007ec4 <__ieee754_sqrt+0x1ac>
 8007e1a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007ec8 <__ieee754_sqrt+0x1b0>
 8007e1e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e22:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e26:	f7f8 f9db 	bl	80001e0 <__aeabi_dsub>
 8007e2a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 fe07 	bl	8000a48 <__aeabi_dcmple>
 8007e3a:	b140      	cbz	r0, 8007e4e <__ieee754_sqrt+0x136>
 8007e3c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007e40:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e44:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e48:	d126      	bne.n	8007e98 <__ieee754_sqrt+0x180>
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	463c      	mov	r4, r7
 8007e4e:	106a      	asrs	r2, r5, #1
 8007e50:	0863      	lsrs	r3, r4, #1
 8007e52:	07e9      	lsls	r1, r5, #31
 8007e54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007e58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007e5c:	bf48      	it	mi
 8007e5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007e62:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007e66:	461c      	mov	r4, r3
 8007e68:	e76d      	b.n	8007d46 <__ieee754_sqrt+0x2e>
 8007e6a:	0ad3      	lsrs	r3, r2, #11
 8007e6c:	3815      	subs	r0, #21
 8007e6e:	0552      	lsls	r2, r2, #21
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0fa      	beq.n	8007e6a <__ieee754_sqrt+0x152>
 8007e74:	02dc      	lsls	r4, r3, #11
 8007e76:	d50a      	bpl.n	8007e8e <__ieee754_sqrt+0x176>
 8007e78:	f1c1 0420 	rsb	r4, r1, #32
 8007e7c:	fa22 f404 	lsr.w	r4, r2, r4
 8007e80:	1e4d      	subs	r5, r1, #1
 8007e82:	408a      	lsls	r2, r1
 8007e84:	4323      	orrs	r3, r4
 8007e86:	1b41      	subs	r1, r0, r5
 8007e88:	e772      	b.n	8007d70 <__ieee754_sqrt+0x58>
 8007e8a:	4608      	mov	r0, r1
 8007e8c:	e7f0      	b.n	8007e70 <__ieee754_sqrt+0x158>
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	3101      	adds	r1, #1
 8007e92:	e7ef      	b.n	8007e74 <__ieee754_sqrt+0x15c>
 8007e94:	46e0      	mov	r8, ip
 8007e96:	e7aa      	b.n	8007dee <__ieee754_sqrt+0xd6>
 8007e98:	f7f8 f9a4 	bl	80001e4 <__adddf3>
 8007e9c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	f7f8 fdc4 	bl	8000a34 <__aeabi_dcmplt>
 8007eac:	b120      	cbz	r0, 8007eb8 <__ieee754_sqrt+0x1a0>
 8007eae:	1ca0      	adds	r0, r4, #2
 8007eb0:	bf08      	it	eq
 8007eb2:	3501      	addeq	r5, #1
 8007eb4:	3402      	adds	r4, #2
 8007eb6:	e7ca      	b.n	8007e4e <__ieee754_sqrt+0x136>
 8007eb8:	3401      	adds	r4, #1
 8007eba:	f024 0401 	bic.w	r4, r4, #1
 8007ebe:	e7c6      	b.n	8007e4e <__ieee754_sqrt+0x136>
 8007ec0:	7ff00000 	.word	0x7ff00000
 8007ec4:	20000070 	.word	0x20000070
 8007ec8:	20000078 	.word	0x20000078
 8007ecc:	00000000 	.word	0x00000000

08007ed0 <ceil>:
 8007ed0:	ec51 0b10 	vmov	r0, r1, d0
 8007ed4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007ee0:	2e13      	cmp	r6, #19
 8007ee2:	ee10 5a10 	vmov	r5, s0
 8007ee6:	ee10 8a10 	vmov	r8, s0
 8007eea:	460c      	mov	r4, r1
 8007eec:	dc2f      	bgt.n	8007f4e <ceil+0x7e>
 8007eee:	2e00      	cmp	r6, #0
 8007ef0:	da12      	bge.n	8007f18 <ceil+0x48>
 8007ef2:	a333      	add	r3, pc, #204	; (adr r3, 8007fc0 <ceil+0xf0>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f974 	bl	80001e4 <__adddf3>
 8007efc:	2200      	movs	r2, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	f7f8 fdb6 	bl	8000a70 <__aeabi_dcmpgt>
 8007f04:	b128      	cbz	r0, 8007f12 <ceil+0x42>
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	db51      	blt.n	8007fae <ceil+0xde>
 8007f0a:	432c      	orrs	r4, r5
 8007f0c:	d053      	beq.n	8007fb6 <ceil+0xe6>
 8007f0e:	4c2e      	ldr	r4, [pc, #184]	; (8007fc8 <ceil+0xf8>)
 8007f10:	2500      	movs	r5, #0
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	e024      	b.n	8007f62 <ceil+0x92>
 8007f18:	4f2c      	ldr	r7, [pc, #176]	; (8007fcc <ceil+0xfc>)
 8007f1a:	4137      	asrs	r7, r6
 8007f1c:	ea01 0307 	and.w	r3, r1, r7
 8007f20:	4303      	orrs	r3, r0
 8007f22:	d01e      	beq.n	8007f62 <ceil+0x92>
 8007f24:	a326      	add	r3, pc, #152	; (adr r3, 8007fc0 <ceil+0xf0>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f7f8 f95b 	bl	80001e4 <__adddf3>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2300      	movs	r3, #0
 8007f32:	f7f8 fd9d 	bl	8000a70 <__aeabi_dcmpgt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0eb      	beq.n	8007f12 <ceil+0x42>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	bfc2      	ittt	gt
 8007f3e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8007f42:	4133      	asrgt	r3, r6
 8007f44:	18e4      	addgt	r4, r4, r3
 8007f46:	ea24 0407 	bic.w	r4, r4, r7
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	e7e1      	b.n	8007f12 <ceil+0x42>
 8007f4e:	2e33      	cmp	r6, #51	; 0x33
 8007f50:	dd0b      	ble.n	8007f6a <ceil+0x9a>
 8007f52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f56:	d104      	bne.n	8007f62 <ceil+0x92>
 8007f58:	ee10 2a10 	vmov	r2, s0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	f7f8 f941 	bl	80001e4 <__adddf3>
 8007f62:	ec41 0b10 	vmov	d0, r0, r1
 8007f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f6a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007f6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f72:	40df      	lsrs	r7, r3
 8007f74:	4238      	tst	r0, r7
 8007f76:	d0f4      	beq.n	8007f62 <ceil+0x92>
 8007f78:	a311      	add	r3, pc, #68	; (adr r3, 8007fc0 <ceil+0xf0>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f931 	bl	80001e4 <__adddf3>
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	f7f8 fd73 	bl	8000a70 <__aeabi_dcmpgt>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d0c1      	beq.n	8007f12 <ceil+0x42>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	dd0a      	ble.n	8007fa8 <ceil+0xd8>
 8007f92:	2e14      	cmp	r6, #20
 8007f94:	d101      	bne.n	8007f9a <ceil+0xca>
 8007f96:	3401      	adds	r4, #1
 8007f98:	e006      	b.n	8007fa8 <ceil+0xd8>
 8007f9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	40b3      	lsls	r3, r6
 8007fa2:	441d      	add	r5, r3
 8007fa4:	45a8      	cmp	r8, r5
 8007fa6:	d8f6      	bhi.n	8007f96 <ceil+0xc6>
 8007fa8:	ea25 0507 	bic.w	r5, r5, r7
 8007fac:	e7b1      	b.n	8007f12 <ceil+0x42>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007fb4:	e7ad      	b.n	8007f12 <ceil+0x42>
 8007fb6:	4625      	mov	r5, r4
 8007fb8:	e7ab      	b.n	8007f12 <ceil+0x42>
 8007fba:	bf00      	nop
 8007fbc:	f3af 8000 	nop.w
 8007fc0:	8800759c 	.word	0x8800759c
 8007fc4:	7e37e43c 	.word	0x7e37e43c
 8007fc8:	3ff00000 	.word	0x3ff00000
 8007fcc:	000fffff 	.word	0x000fffff

08007fd0 <__kernel_tan>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	ed2d 8b06 	vpush	{d8-d10}
 8007fd8:	ec5b ab10 	vmov	sl, fp, d0
 8007fdc:	4be0      	ldr	r3, [pc, #896]	; (8008360 <__kernel_tan+0x390>)
 8007fde:	b083      	sub	sp, #12
 8007fe0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007fe4:	429f      	cmp	r7, r3
 8007fe6:	ec59 8b11 	vmov	r8, r9, d1
 8007fea:	4606      	mov	r6, r0
 8007fec:	f8cd b000 	str.w	fp, [sp]
 8007ff0:	dc61      	bgt.n	80080b6 <__kernel_tan+0xe6>
 8007ff2:	ee10 0a10 	vmov	r0, s0
 8007ff6:	4659      	mov	r1, fp
 8007ff8:	f7f8 fd5a 	bl	8000ab0 <__aeabi_d2iz>
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f040 8083 	bne.w	800810a <__kernel_tan+0x13a>
 8008004:	1c73      	adds	r3, r6, #1
 8008006:	4652      	mov	r2, sl
 8008008:	4313      	orrs	r3, r2
 800800a:	433b      	orrs	r3, r7
 800800c:	d112      	bne.n	8008034 <__kernel_tan+0x64>
 800800e:	ec4b ab10 	vmov	d0, sl, fp
 8008012:	f001 fa9f 	bl	8009554 <fabs>
 8008016:	49d3      	ldr	r1, [pc, #844]	; (8008364 <__kernel_tan+0x394>)
 8008018:	ec53 2b10 	vmov	r2, r3, d0
 800801c:	2000      	movs	r0, #0
 800801e:	f7f8 fbc1 	bl	80007a4 <__aeabi_ddiv>
 8008022:	4682      	mov	sl, r0
 8008024:	468b      	mov	fp, r1
 8008026:	ec4b ab10 	vmov	d0, sl, fp
 800802a:	b003      	add	sp, #12
 800802c:	ecbd 8b06 	vpop	{d8-d10}
 8008030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008034:	2e01      	cmp	r6, #1
 8008036:	d0f6      	beq.n	8008026 <__kernel_tan+0x56>
 8008038:	4642      	mov	r2, r8
 800803a:	464b      	mov	r3, r9
 800803c:	4650      	mov	r0, sl
 800803e:	4659      	mov	r1, fp
 8008040:	f7f8 f8d0 	bl	80001e4 <__adddf3>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	460f      	mov	r7, r1
 800804a:	2000      	movs	r0, #0
 800804c:	49c6      	ldr	r1, [pc, #792]	; (8008368 <__kernel_tan+0x398>)
 800804e:	f7f8 fba9 	bl	80007a4 <__aeabi_ddiv>
 8008052:	e9cd 0100 	strd	r0, r1, [sp]
 8008056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805a:	462e      	mov	r6, r5
 800805c:	4652      	mov	r2, sl
 800805e:	462c      	mov	r4, r5
 8008060:	4630      	mov	r0, r6
 8008062:	461d      	mov	r5, r3
 8008064:	4639      	mov	r1, r7
 8008066:	465b      	mov	r3, fp
 8008068:	f7f8 f8ba 	bl	80001e0 <__aeabi_dsub>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	f7f8 f8b4 	bl	80001e0 <__aeabi_dsub>
 8008078:	4632      	mov	r2, r6
 800807a:	462b      	mov	r3, r5
 800807c:	f7f8 fa68 	bl	8000550 <__aeabi_dmul>
 8008080:	4632      	mov	r2, r6
 8008082:	4680      	mov	r8, r0
 8008084:	4689      	mov	r9, r1
 8008086:	462b      	mov	r3, r5
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 fa60 	bl	8000550 <__aeabi_dmul>
 8008090:	4bb4      	ldr	r3, [pc, #720]	; (8008364 <__kernel_tan+0x394>)
 8008092:	2200      	movs	r2, #0
 8008094:	f7f8 f8a6 	bl	80001e4 <__adddf3>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 f8a0 	bl	80001e4 <__adddf3>
 80080a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080a8:	f7f8 fa52 	bl	8000550 <__aeabi_dmul>
 80080ac:	4622      	mov	r2, r4
 80080ae:	462b      	mov	r3, r5
 80080b0:	f7f8 f898 	bl	80001e4 <__adddf3>
 80080b4:	e7b5      	b.n	8008022 <__kernel_tan+0x52>
 80080b6:	4bad      	ldr	r3, [pc, #692]	; (800836c <__kernel_tan+0x39c>)
 80080b8:	429f      	cmp	r7, r3
 80080ba:	dd26      	ble.n	800810a <__kernel_tan+0x13a>
 80080bc:	9b00      	ldr	r3, [sp, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da09      	bge.n	80080d6 <__kernel_tan+0x106>
 80080c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080c6:	469b      	mov	fp, r3
 80080c8:	ee10 aa10 	vmov	sl, s0
 80080cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080d0:	ee11 8a10 	vmov	r8, s2
 80080d4:	4699      	mov	r9, r3
 80080d6:	4652      	mov	r2, sl
 80080d8:	465b      	mov	r3, fp
 80080da:	a183      	add	r1, pc, #524	; (adr r1, 80082e8 <__kernel_tan+0x318>)
 80080dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e0:	f7f8 f87e 	bl	80001e0 <__aeabi_dsub>
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	a180      	add	r1, pc, #512	; (adr r1, 80082f0 <__kernel_tan+0x320>)
 80080ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f2:	f7f8 f875 	bl	80001e0 <__aeabi_dsub>
 80080f6:	4622      	mov	r2, r4
 80080f8:	462b      	mov	r3, r5
 80080fa:	f7f8 f873 	bl	80001e4 <__adddf3>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	4682      	mov	sl, r0
 8008104:	468b      	mov	fp, r1
 8008106:	f04f 0900 	mov.w	r9, #0
 800810a:	4652      	mov	r2, sl
 800810c:	465b      	mov	r3, fp
 800810e:	4650      	mov	r0, sl
 8008110:	4659      	mov	r1, fp
 8008112:	f7f8 fa1d 	bl	8000550 <__aeabi_dmul>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	ec43 2b18 	vmov	d8, r2, r3
 800811e:	f7f8 fa17 	bl	8000550 <__aeabi_dmul>
 8008122:	ec53 2b18 	vmov	r2, r3, d8
 8008126:	4604      	mov	r4, r0
 8008128:	460d      	mov	r5, r1
 800812a:	4650      	mov	r0, sl
 800812c:	4659      	mov	r1, fp
 800812e:	f7f8 fa0f 	bl	8000550 <__aeabi_dmul>
 8008132:	a371      	add	r3, pc, #452	; (adr r3, 80082f8 <__kernel_tan+0x328>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	ec41 0b19 	vmov	d9, r0, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 fa06 	bl	8000550 <__aeabi_dmul>
 8008144:	a36e      	add	r3, pc, #440	; (adr r3, 8008300 <__kernel_tan+0x330>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 f84b 	bl	80001e4 <__adddf3>
 800814e:	4622      	mov	r2, r4
 8008150:	462b      	mov	r3, r5
 8008152:	f7f8 f9fd 	bl	8000550 <__aeabi_dmul>
 8008156:	a36c      	add	r3, pc, #432	; (adr r3, 8008308 <__kernel_tan+0x338>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 f842 	bl	80001e4 <__adddf3>
 8008160:	4622      	mov	r2, r4
 8008162:	462b      	mov	r3, r5
 8008164:	f7f8 f9f4 	bl	8000550 <__aeabi_dmul>
 8008168:	a369      	add	r3, pc, #420	; (adr r3, 8008310 <__kernel_tan+0x340>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f7f8 f839 	bl	80001e4 <__adddf3>
 8008172:	4622      	mov	r2, r4
 8008174:	462b      	mov	r3, r5
 8008176:	f7f8 f9eb 	bl	8000550 <__aeabi_dmul>
 800817a:	a367      	add	r3, pc, #412	; (adr r3, 8008318 <__kernel_tan+0x348>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 f830 	bl	80001e4 <__adddf3>
 8008184:	4622      	mov	r2, r4
 8008186:	462b      	mov	r3, r5
 8008188:	f7f8 f9e2 	bl	8000550 <__aeabi_dmul>
 800818c:	a364      	add	r3, pc, #400	; (adr r3, 8008320 <__kernel_tan+0x350>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f827 	bl	80001e4 <__adddf3>
 8008196:	ec53 2b18 	vmov	r2, r3, d8
 800819a:	f7f8 f9d9 	bl	8000550 <__aeabi_dmul>
 800819e:	a362      	add	r3, pc, #392	; (adr r3, 8008328 <__kernel_tan+0x358>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	ec41 0b1a 	vmov	d10, r0, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 f9d0 	bl	8000550 <__aeabi_dmul>
 80081b0:	a35f      	add	r3, pc, #380	; (adr r3, 8008330 <__kernel_tan+0x360>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 f815 	bl	80001e4 <__adddf3>
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	f7f8 f9c7 	bl	8000550 <__aeabi_dmul>
 80081c2:	a35d      	add	r3, pc, #372	; (adr r3, 8008338 <__kernel_tan+0x368>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 f80c 	bl	80001e4 <__adddf3>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	f7f8 f9be 	bl	8000550 <__aeabi_dmul>
 80081d4:	a35a      	add	r3, pc, #360	; (adr r3, 8008340 <__kernel_tan+0x370>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f7f8 f803 	bl	80001e4 <__adddf3>
 80081de:	4622      	mov	r2, r4
 80081e0:	462b      	mov	r3, r5
 80081e2:	f7f8 f9b5 	bl	8000550 <__aeabi_dmul>
 80081e6:	a358      	add	r3, pc, #352	; (adr r3, 8008348 <__kernel_tan+0x378>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f7 fffa 	bl	80001e4 <__adddf3>
 80081f0:	4622      	mov	r2, r4
 80081f2:	462b      	mov	r3, r5
 80081f4:	f7f8 f9ac 	bl	8000550 <__aeabi_dmul>
 80081f8:	a355      	add	r3, pc, #340	; (adr r3, 8008350 <__kernel_tan+0x380>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f7 fff1 	bl	80001e4 <__adddf3>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	ec51 0b1a 	vmov	r0, r1, d10
 800820a:	f7f7 ffeb 	bl	80001e4 <__adddf3>
 800820e:	ec53 2b19 	vmov	r2, r3, d9
 8008212:	f7f8 f99d 	bl	8000550 <__aeabi_dmul>
 8008216:	4642      	mov	r2, r8
 8008218:	464b      	mov	r3, r9
 800821a:	f7f7 ffe3 	bl	80001e4 <__adddf3>
 800821e:	ec53 2b18 	vmov	r2, r3, d8
 8008222:	f7f8 f995 	bl	8000550 <__aeabi_dmul>
 8008226:	4642      	mov	r2, r8
 8008228:	464b      	mov	r3, r9
 800822a:	f7f7 ffdb 	bl	80001e4 <__adddf3>
 800822e:	a34a      	add	r3, pc, #296	; (adr r3, 8008358 <__kernel_tan+0x388>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	ec51 0b19 	vmov	r0, r1, d9
 800823c:	f7f8 f988 	bl	8000550 <__aeabi_dmul>
 8008240:	4622      	mov	r2, r4
 8008242:	462b      	mov	r3, r5
 8008244:	f7f7 ffce 	bl	80001e4 <__adddf3>
 8008248:	460b      	mov	r3, r1
 800824a:	ec41 0b18 	vmov	d8, r0, r1
 800824e:	4602      	mov	r2, r0
 8008250:	4659      	mov	r1, fp
 8008252:	4650      	mov	r0, sl
 8008254:	f7f7 ffc6 	bl	80001e4 <__adddf3>
 8008258:	4b44      	ldr	r3, [pc, #272]	; (800836c <__kernel_tan+0x39c>)
 800825a:	429f      	cmp	r7, r3
 800825c:	4604      	mov	r4, r0
 800825e:	460d      	mov	r5, r1
 8008260:	f340 8086 	ble.w	8008370 <__kernel_tan+0x3a0>
 8008264:	4630      	mov	r0, r6
 8008266:	f7f8 f909 	bl	800047c <__aeabi_i2d>
 800826a:	4622      	mov	r2, r4
 800826c:	4680      	mov	r8, r0
 800826e:	4689      	mov	r9, r1
 8008270:	462b      	mov	r3, r5
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f7f8 f96b 	bl	8000550 <__aeabi_dmul>
 800827a:	4642      	mov	r2, r8
 800827c:	4606      	mov	r6, r0
 800827e:	460f      	mov	r7, r1
 8008280:	464b      	mov	r3, r9
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f7f7 ffad 	bl	80001e4 <__adddf3>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4630      	mov	r0, r6
 8008290:	4639      	mov	r1, r7
 8008292:	f7f8 fa87 	bl	80007a4 <__aeabi_ddiv>
 8008296:	ec53 2b18 	vmov	r2, r3, d8
 800829a:	f7f7 ffa1 	bl	80001e0 <__aeabi_dsub>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4650      	mov	r0, sl
 80082a4:	4659      	mov	r1, fp
 80082a6:	f7f7 ff9b 	bl	80001e0 <__aeabi_dsub>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	f7f7 ff99 	bl	80001e4 <__adddf3>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f7 ff91 	bl	80001e0 <__aeabi_dsub>
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80082c4:	f00a 0a02 	and.w	sl, sl, #2
 80082c8:	4604      	mov	r4, r0
 80082ca:	f1ca 0001 	rsb	r0, sl, #1
 80082ce:	460d      	mov	r5, r1
 80082d0:	f7f8 f8d4 	bl	800047c <__aeabi_i2d>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	f7f8 f938 	bl	8000550 <__aeabi_dmul>
 80082e0:	e69f      	b.n	8008022 <__kernel_tan+0x52>
 80082e2:	bf00      	nop
 80082e4:	f3af 8000 	nop.w
 80082e8:	54442d18 	.word	0x54442d18
 80082ec:	3fe921fb 	.word	0x3fe921fb
 80082f0:	33145c07 	.word	0x33145c07
 80082f4:	3c81a626 	.word	0x3c81a626
 80082f8:	74bf7ad4 	.word	0x74bf7ad4
 80082fc:	3efb2a70 	.word	0x3efb2a70
 8008300:	32f0a7e9 	.word	0x32f0a7e9
 8008304:	3f12b80f 	.word	0x3f12b80f
 8008308:	1a8d1068 	.word	0x1a8d1068
 800830c:	3f3026f7 	.word	0x3f3026f7
 8008310:	fee08315 	.word	0xfee08315
 8008314:	3f57dbc8 	.word	0x3f57dbc8
 8008318:	e96e8493 	.word	0xe96e8493
 800831c:	3f8226e3 	.word	0x3f8226e3
 8008320:	1bb341fe 	.word	0x1bb341fe
 8008324:	3faba1ba 	.word	0x3faba1ba
 8008328:	db605373 	.word	0xdb605373
 800832c:	bef375cb 	.word	0xbef375cb
 8008330:	a03792a6 	.word	0xa03792a6
 8008334:	3f147e88 	.word	0x3f147e88
 8008338:	f2f26501 	.word	0xf2f26501
 800833c:	3f4344d8 	.word	0x3f4344d8
 8008340:	c9560328 	.word	0xc9560328
 8008344:	3f6d6d22 	.word	0x3f6d6d22
 8008348:	8406d637 	.word	0x8406d637
 800834c:	3f9664f4 	.word	0x3f9664f4
 8008350:	1110fe7a 	.word	0x1110fe7a
 8008354:	3fc11111 	.word	0x3fc11111
 8008358:	55555563 	.word	0x55555563
 800835c:	3fd55555 	.word	0x3fd55555
 8008360:	3e2fffff 	.word	0x3e2fffff
 8008364:	3ff00000 	.word	0x3ff00000
 8008368:	bff00000 	.word	0xbff00000
 800836c:	3fe59427 	.word	0x3fe59427
 8008370:	2e01      	cmp	r6, #1
 8008372:	d02f      	beq.n	80083d4 <__kernel_tan+0x404>
 8008374:	460f      	mov	r7, r1
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4689      	mov	r9, r1
 800837c:	2000      	movs	r0, #0
 800837e:	4917      	ldr	r1, [pc, #92]	; (80083dc <__kernel_tan+0x40c>)
 8008380:	f7f8 fa10 	bl	80007a4 <__aeabi_ddiv>
 8008384:	2600      	movs	r6, #0
 8008386:	e9cd 0100 	strd	r0, r1, [sp]
 800838a:	4652      	mov	r2, sl
 800838c:	465b      	mov	r3, fp
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f7 ff25 	bl	80001e0 <__aeabi_dsub>
 8008396:	e9dd 4500 	ldrd	r4, r5, [sp]
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	ec51 0b18 	vmov	r0, r1, d8
 80083a2:	f7f7 ff1d 	bl	80001e0 <__aeabi_dsub>
 80083a6:	4632      	mov	r2, r6
 80083a8:	462b      	mov	r3, r5
 80083aa:	f7f8 f8d1 	bl	8000550 <__aeabi_dmul>
 80083ae:	46b0      	mov	r8, r6
 80083b0:	460f      	mov	r7, r1
 80083b2:	4642      	mov	r2, r8
 80083b4:	462b      	mov	r3, r5
 80083b6:	4634      	mov	r4, r6
 80083b8:	4649      	mov	r1, r9
 80083ba:	4606      	mov	r6, r0
 80083bc:	4640      	mov	r0, r8
 80083be:	f7f8 f8c7 	bl	8000550 <__aeabi_dmul>
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <__kernel_tan+0x410>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	f7f7 ff0d 	bl	80001e4 <__adddf3>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	e665      	b.n	80080a0 <__kernel_tan+0xd0>
 80083d4:	4682      	mov	sl, r0
 80083d6:	468b      	mov	fp, r1
 80083d8:	e625      	b.n	8008026 <__kernel_tan+0x56>
 80083da:	bf00      	nop
 80083dc:	bff00000 	.word	0xbff00000
 80083e0:	3ff00000 	.word	0x3ff00000
 80083e4:	00000000 	.word	0x00000000

080083e8 <__ieee754_exp>:
 80083e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	ec55 4b10 	vmov	r4, r5, d0
 80083f0:	49b5      	ldr	r1, [pc, #724]	; (80086c8 <__ieee754_exp+0x2e0>)
 80083f2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80083f6:	428a      	cmp	r2, r1
 80083f8:	ed2d 8b04 	vpush	{d8-d9}
 80083fc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008400:	d93b      	bls.n	800847a <__ieee754_exp+0x92>
 8008402:	49b2      	ldr	r1, [pc, #712]	; (80086cc <__ieee754_exp+0x2e4>)
 8008404:	428a      	cmp	r2, r1
 8008406:	d916      	bls.n	8008436 <__ieee754_exp+0x4e>
 8008408:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800840c:	4323      	orrs	r3, r4
 800840e:	ee10 2a10 	vmov	r2, s0
 8008412:	d007      	beq.n	8008424 <__ieee754_exp+0x3c>
 8008414:	462b      	mov	r3, r5
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7f7 fee3 	bl	80001e4 <__adddf3>
 800841e:	4604      	mov	r4, r0
 8008420:	460d      	mov	r5, r1
 8008422:	e002      	b.n	800842a <__ieee754_exp+0x42>
 8008424:	b10e      	cbz	r6, 800842a <__ieee754_exp+0x42>
 8008426:	2400      	movs	r4, #0
 8008428:	2500      	movs	r5, #0
 800842a:	ecbd 8b04 	vpop	{d8-d9}
 800842e:	ec45 4b10 	vmov	d0, r4, r5
 8008432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008436:	a38e      	add	r3, pc, #568	; (adr r3, 8008670 <__ieee754_exp+0x288>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	ee10 0a10 	vmov	r0, s0
 8008440:	4629      	mov	r1, r5
 8008442:	f7f8 fb15 	bl	8000a70 <__aeabi_dcmpgt>
 8008446:	4607      	mov	r7, r0
 8008448:	b130      	cbz	r0, 8008458 <__ieee754_exp+0x70>
 800844a:	ecbd 8b04 	vpop	{d8-d9}
 800844e:	2000      	movs	r0, #0
 8008450:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	f001 b92d 	b.w	80096b2 <__math_oflow>
 8008458:	a387      	add	r3, pc, #540	; (adr r3, 8008678 <__ieee754_exp+0x290>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 fae7 	bl	8000a34 <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	f000 808b 	beq.w	8008582 <__ieee754_exp+0x19a>
 800846c:	ecbd 8b04 	vpop	{d8-d9}
 8008470:	4638      	mov	r0, r7
 8008472:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008476:	f001 b913 	b.w	80096a0 <__math_uflow>
 800847a:	4b95      	ldr	r3, [pc, #596]	; (80086d0 <__ieee754_exp+0x2e8>)
 800847c:	429a      	cmp	r2, r3
 800847e:	f240 80ac 	bls.w	80085da <__ieee754_exp+0x1f2>
 8008482:	4b94      	ldr	r3, [pc, #592]	; (80086d4 <__ieee754_exp+0x2ec>)
 8008484:	429a      	cmp	r2, r3
 8008486:	d87c      	bhi.n	8008582 <__ieee754_exp+0x19a>
 8008488:	4b93      	ldr	r3, [pc, #588]	; (80086d8 <__ieee754_exp+0x2f0>)
 800848a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	ee10 0a10 	vmov	r0, s0
 8008496:	4629      	mov	r1, r5
 8008498:	f7f7 fea2 	bl	80001e0 <__aeabi_dsub>
 800849c:	4b8f      	ldr	r3, [pc, #572]	; (80086dc <__ieee754_exp+0x2f4>)
 800849e:	00f7      	lsls	r7, r6, #3
 80084a0:	443b      	add	r3, r7
 80084a2:	ed93 7b00 	vldr	d7, [r3]
 80084a6:	f1c6 0a01 	rsb	sl, r6, #1
 80084aa:	4680      	mov	r8, r0
 80084ac:	4689      	mov	r9, r1
 80084ae:	ebaa 0a06 	sub.w	sl, sl, r6
 80084b2:	eeb0 8a47 	vmov.f32	s16, s14
 80084b6:	eef0 8a67 	vmov.f32	s17, s15
 80084ba:	ec53 2b18 	vmov	r2, r3, d8
 80084be:	4640      	mov	r0, r8
 80084c0:	4649      	mov	r1, r9
 80084c2:	f7f7 fe8d 	bl	80001e0 <__aeabi_dsub>
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 f83d 	bl	8000550 <__aeabi_dmul>
 80084d6:	a36a      	add	r3, pc, #424	; (adr r3, 8008680 <__ieee754_exp+0x298>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	4606      	mov	r6, r0
 80084de:	460f      	mov	r7, r1
 80084e0:	f7f8 f836 	bl	8000550 <__aeabi_dmul>
 80084e4:	a368      	add	r3, pc, #416	; (adr r3, 8008688 <__ieee754_exp+0x2a0>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f7 fe79 	bl	80001e0 <__aeabi_dsub>
 80084ee:	4632      	mov	r2, r6
 80084f0:	463b      	mov	r3, r7
 80084f2:	f7f8 f82d 	bl	8000550 <__aeabi_dmul>
 80084f6:	a366      	add	r3, pc, #408	; (adr r3, 8008690 <__ieee754_exp+0x2a8>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f7f7 fe72 	bl	80001e4 <__adddf3>
 8008500:	4632      	mov	r2, r6
 8008502:	463b      	mov	r3, r7
 8008504:	f7f8 f824 	bl	8000550 <__aeabi_dmul>
 8008508:	a363      	add	r3, pc, #396	; (adr r3, 8008698 <__ieee754_exp+0x2b0>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 fe67 	bl	80001e0 <__aeabi_dsub>
 8008512:	4632      	mov	r2, r6
 8008514:	463b      	mov	r3, r7
 8008516:	f7f8 f81b 	bl	8000550 <__aeabi_dmul>
 800851a:	a361      	add	r3, pc, #388	; (adr r3, 80086a0 <__ieee754_exp+0x2b8>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f7f7 fe60 	bl	80001e4 <__adddf3>
 8008524:	4632      	mov	r2, r6
 8008526:	463b      	mov	r3, r7
 8008528:	f7f8 f812 	bl	8000550 <__aeabi_dmul>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f7 fe54 	bl	80001e0 <__aeabi_dsub>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4606      	mov	r6, r0
 800853e:	460f      	mov	r7, r1
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f8 f804 	bl	8000550 <__aeabi_dmul>
 8008548:	ec41 0b19 	vmov	d9, r0, r1
 800854c:	f1ba 0f00 	cmp.w	sl, #0
 8008550:	d15d      	bne.n	800860e <__ieee754_exp+0x226>
 8008552:	2200      	movs	r2, #0
 8008554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f7 fe40 	bl	80001e0 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	ec51 0b19 	vmov	r0, r1, d9
 8008568:	f7f8 f91c 	bl	80007a4 <__aeabi_ddiv>
 800856c:	4622      	mov	r2, r4
 800856e:	462b      	mov	r3, r5
 8008570:	f7f7 fe36 	bl	80001e0 <__aeabi_dsub>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	2000      	movs	r0, #0
 800857a:	4959      	ldr	r1, [pc, #356]	; (80086e0 <__ieee754_exp+0x2f8>)
 800857c:	f7f7 fe30 	bl	80001e0 <__aeabi_dsub>
 8008580:	e74d      	b.n	800841e <__ieee754_exp+0x36>
 8008582:	4b58      	ldr	r3, [pc, #352]	; (80086e4 <__ieee754_exp+0x2fc>)
 8008584:	4620      	mov	r0, r4
 8008586:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800858a:	4629      	mov	r1, r5
 800858c:	a346      	add	r3, pc, #280	; (adr r3, 80086a8 <__ieee754_exp+0x2c0>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f7 ffdd 	bl	8000550 <__aeabi_dmul>
 8008596:	e9d6 2300 	ldrd	r2, r3, [r6]
 800859a:	f7f7 fe23 	bl	80001e4 <__adddf3>
 800859e:	f7f8 fa87 	bl	8000ab0 <__aeabi_d2iz>
 80085a2:	4682      	mov	sl, r0
 80085a4:	f7f7 ff6a 	bl	800047c <__aeabi_i2d>
 80085a8:	a341      	add	r3, pc, #260	; (adr r3, 80086b0 <__ieee754_exp+0x2c8>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	4606      	mov	r6, r0
 80085b0:	460f      	mov	r7, r1
 80085b2:	f7f7 ffcd 	bl	8000550 <__aeabi_dmul>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f7 fe0f 	bl	80001e0 <__aeabi_dsub>
 80085c2:	a33d      	add	r3, pc, #244	; (adr r3, 80086b8 <__ieee754_exp+0x2d0>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	4680      	mov	r8, r0
 80085ca:	4689      	mov	r9, r1
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f7 ffbe 	bl	8000550 <__aeabi_dmul>
 80085d4:	ec41 0b18 	vmov	d8, r0, r1
 80085d8:	e76f      	b.n	80084ba <__ieee754_exp+0xd2>
 80085da:	4b43      	ldr	r3, [pc, #268]	; (80086e8 <__ieee754_exp+0x300>)
 80085dc:	429a      	cmp	r2, r3
 80085de:	d811      	bhi.n	8008604 <__ieee754_exp+0x21c>
 80085e0:	a337      	add	r3, pc, #220	; (adr r3, 80086c0 <__ieee754_exp+0x2d8>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	ee10 0a10 	vmov	r0, s0
 80085ea:	4629      	mov	r1, r5
 80085ec:	f7f7 fdfa 	bl	80001e4 <__adddf3>
 80085f0:	4b3b      	ldr	r3, [pc, #236]	; (80086e0 <__ieee754_exp+0x2f8>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f8 fa3c 	bl	8000a70 <__aeabi_dcmpgt>
 80085f8:	b138      	cbz	r0, 800860a <__ieee754_exp+0x222>
 80085fa:	4b39      	ldr	r3, [pc, #228]	; (80086e0 <__ieee754_exp+0x2f8>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	e70a      	b.n	800841a <__ieee754_exp+0x32>
 8008604:	f04f 0a00 	mov.w	sl, #0
 8008608:	e75f      	b.n	80084ca <__ieee754_exp+0xe2>
 800860a:	4682      	mov	sl, r0
 800860c:	e75d      	b.n	80084ca <__ieee754_exp+0xe2>
 800860e:	4632      	mov	r2, r6
 8008610:	463b      	mov	r3, r7
 8008612:	2000      	movs	r0, #0
 8008614:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008618:	f7f7 fde2 	bl	80001e0 <__aeabi_dsub>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	ec51 0b19 	vmov	r0, r1, d9
 8008624:	f7f8 f8be 	bl	80007a4 <__aeabi_ddiv>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	ec51 0b18 	vmov	r0, r1, d8
 8008630:	f7f7 fdd6 	bl	80001e0 <__aeabi_dsub>
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	f7f7 fdd2 	bl	80001e0 <__aeabi_dsub>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	2000      	movs	r0, #0
 8008642:	4927      	ldr	r1, [pc, #156]	; (80086e0 <__ieee754_exp+0x2f8>)
 8008644:	f7f7 fdcc 	bl	80001e0 <__aeabi_dsub>
 8008648:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800864c:	4592      	cmp	sl, r2
 800864e:	db02      	blt.n	8008656 <__ieee754_exp+0x26e>
 8008650:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008654:	e6e3      	b.n	800841e <__ieee754_exp+0x36>
 8008656:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800865a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800865e:	2200      	movs	r2, #0
 8008660:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008664:	f7f7 ff74 	bl	8000550 <__aeabi_dmul>
 8008668:	e6d9      	b.n	800841e <__ieee754_exp+0x36>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	fefa39ef 	.word	0xfefa39ef
 8008674:	40862e42 	.word	0x40862e42
 8008678:	d52d3051 	.word	0xd52d3051
 800867c:	c0874910 	.word	0xc0874910
 8008680:	72bea4d0 	.word	0x72bea4d0
 8008684:	3e663769 	.word	0x3e663769
 8008688:	c5d26bf1 	.word	0xc5d26bf1
 800868c:	3ebbbd41 	.word	0x3ebbbd41
 8008690:	af25de2c 	.word	0xaf25de2c
 8008694:	3f11566a 	.word	0x3f11566a
 8008698:	16bebd93 	.word	0x16bebd93
 800869c:	3f66c16c 	.word	0x3f66c16c
 80086a0:	5555553e 	.word	0x5555553e
 80086a4:	3fc55555 	.word	0x3fc55555
 80086a8:	652b82fe 	.word	0x652b82fe
 80086ac:	3ff71547 	.word	0x3ff71547
 80086b0:	fee00000 	.word	0xfee00000
 80086b4:	3fe62e42 	.word	0x3fe62e42
 80086b8:	35793c76 	.word	0x35793c76
 80086bc:	3dea39ef 	.word	0x3dea39ef
 80086c0:	8800759c 	.word	0x8800759c
 80086c4:	7e37e43c 	.word	0x7e37e43c
 80086c8:	40862e41 	.word	0x40862e41
 80086cc:	7fefffff 	.word	0x7fefffff
 80086d0:	3fd62e42 	.word	0x3fd62e42
 80086d4:	3ff0a2b1 	.word	0x3ff0a2b1
 80086d8:	0801f9d0 	.word	0x0801f9d0
 80086dc:	0801f9e0 	.word	0x0801f9e0
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	0801f9c0 	.word	0x0801f9c0
 80086e8:	3defffff 	.word	0x3defffff
 80086ec:	00000000 	.word	0x00000000

080086f0 <__ieee754_pow>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	ed2d 8b06 	vpush	{d8-d10}
 80086f8:	b089      	sub	sp, #36	; 0x24
 80086fa:	ed8d 1b00 	vstr	d1, [sp]
 80086fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008702:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008706:	ea58 0102 	orrs.w	r1, r8, r2
 800870a:	ec57 6b10 	vmov	r6, r7, d0
 800870e:	d115      	bne.n	800873c <__ieee754_pow+0x4c>
 8008710:	19b3      	adds	r3, r6, r6
 8008712:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008716:	4152      	adcs	r2, r2
 8008718:	4299      	cmp	r1, r3
 800871a:	4b89      	ldr	r3, [pc, #548]	; (8008940 <__ieee754_pow+0x250>)
 800871c:	4193      	sbcs	r3, r2
 800871e:	f080 84d1 	bcs.w	80090c4 <__ieee754_pow+0x9d4>
 8008722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f7 fd5b 	bl	80001e4 <__adddf3>
 800872e:	ec41 0b10 	vmov	d0, r0, r1
 8008732:	b009      	add	sp, #36	; 0x24
 8008734:	ecbd 8b06 	vpop	{d8-d10}
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4b81      	ldr	r3, [pc, #516]	; (8008944 <__ieee754_pow+0x254>)
 800873e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008742:	429c      	cmp	r4, r3
 8008744:	ee10 aa10 	vmov	sl, s0
 8008748:	463d      	mov	r5, r7
 800874a:	dc06      	bgt.n	800875a <__ieee754_pow+0x6a>
 800874c:	d101      	bne.n	8008752 <__ieee754_pow+0x62>
 800874e:	2e00      	cmp	r6, #0
 8008750:	d1e7      	bne.n	8008722 <__ieee754_pow+0x32>
 8008752:	4598      	cmp	r8, r3
 8008754:	dc01      	bgt.n	800875a <__ieee754_pow+0x6a>
 8008756:	d10f      	bne.n	8008778 <__ieee754_pow+0x88>
 8008758:	b172      	cbz	r2, 8008778 <__ieee754_pow+0x88>
 800875a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800875e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008762:	ea55 050a 	orrs.w	r5, r5, sl
 8008766:	d1dc      	bne.n	8008722 <__ieee754_pow+0x32>
 8008768:	e9dd 3200 	ldrd	r3, r2, [sp]
 800876c:	18db      	adds	r3, r3, r3
 800876e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008772:	4152      	adcs	r2, r2
 8008774:	429d      	cmp	r5, r3
 8008776:	e7d0      	b.n	800871a <__ieee754_pow+0x2a>
 8008778:	2d00      	cmp	r5, #0
 800877a:	da3b      	bge.n	80087f4 <__ieee754_pow+0x104>
 800877c:	4b72      	ldr	r3, [pc, #456]	; (8008948 <__ieee754_pow+0x258>)
 800877e:	4598      	cmp	r8, r3
 8008780:	dc51      	bgt.n	8008826 <__ieee754_pow+0x136>
 8008782:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008786:	4598      	cmp	r8, r3
 8008788:	f340 84ab 	ble.w	80090e2 <__ieee754_pow+0x9f2>
 800878c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008794:	2b14      	cmp	r3, #20
 8008796:	dd0f      	ble.n	80087b8 <__ieee754_pow+0xc8>
 8008798:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800879c:	fa22 f103 	lsr.w	r1, r2, r3
 80087a0:	fa01 f303 	lsl.w	r3, r1, r3
 80087a4:	4293      	cmp	r3, r2
 80087a6:	f040 849c 	bne.w	80090e2 <__ieee754_pow+0x9f2>
 80087aa:	f001 0101 	and.w	r1, r1, #1
 80087ae:	f1c1 0302 	rsb	r3, r1, #2
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	b182      	cbz	r2, 80087d8 <__ieee754_pow+0xe8>
 80087b6:	e05f      	b.n	8008878 <__ieee754_pow+0x188>
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d15b      	bne.n	8008874 <__ieee754_pow+0x184>
 80087bc:	f1c3 0314 	rsb	r3, r3, #20
 80087c0:	fa48 f103 	asr.w	r1, r8, r3
 80087c4:	fa01 f303 	lsl.w	r3, r1, r3
 80087c8:	4543      	cmp	r3, r8
 80087ca:	f040 8487 	bne.w	80090dc <__ieee754_pow+0x9ec>
 80087ce:	f001 0101 	and.w	r1, r1, #1
 80087d2:	f1c1 0302 	rsb	r3, r1, #2
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	4b5c      	ldr	r3, [pc, #368]	; (800894c <__ieee754_pow+0x25c>)
 80087da:	4598      	cmp	r8, r3
 80087dc:	d132      	bne.n	8008844 <__ieee754_pow+0x154>
 80087de:	f1b9 0f00 	cmp.w	r9, #0
 80087e2:	f280 8477 	bge.w	80090d4 <__ieee754_pow+0x9e4>
 80087e6:	4959      	ldr	r1, [pc, #356]	; (800894c <__ieee754_pow+0x25c>)
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	2000      	movs	r0, #0
 80087ee:	f7f7 ffd9 	bl	80007a4 <__aeabi_ddiv>
 80087f2:	e79c      	b.n	800872e <__ieee754_pow+0x3e>
 80087f4:	2300      	movs	r3, #0
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d13d      	bne.n	8008878 <__ieee754_pow+0x188>
 80087fc:	4b51      	ldr	r3, [pc, #324]	; (8008944 <__ieee754_pow+0x254>)
 80087fe:	4598      	cmp	r8, r3
 8008800:	d1ea      	bne.n	80087d8 <__ieee754_pow+0xe8>
 8008802:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008806:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800880a:	ea53 030a 	orrs.w	r3, r3, sl
 800880e:	f000 8459 	beq.w	80090c4 <__ieee754_pow+0x9d4>
 8008812:	4b4f      	ldr	r3, [pc, #316]	; (8008950 <__ieee754_pow+0x260>)
 8008814:	429c      	cmp	r4, r3
 8008816:	dd08      	ble.n	800882a <__ieee754_pow+0x13a>
 8008818:	f1b9 0f00 	cmp.w	r9, #0
 800881c:	f2c0 8456 	blt.w	80090cc <__ieee754_pow+0x9dc>
 8008820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008824:	e783      	b.n	800872e <__ieee754_pow+0x3e>
 8008826:	2302      	movs	r3, #2
 8008828:	e7e5      	b.n	80087f6 <__ieee754_pow+0x106>
 800882a:	f1b9 0f00 	cmp.w	r9, #0
 800882e:	f04f 0000 	mov.w	r0, #0
 8008832:	f04f 0100 	mov.w	r1, #0
 8008836:	f6bf af7a 	bge.w	800872e <__ieee754_pow+0x3e>
 800883a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800883e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008842:	e774      	b.n	800872e <__ieee754_pow+0x3e>
 8008844:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008848:	d106      	bne.n	8008858 <__ieee754_pow+0x168>
 800884a:	4632      	mov	r2, r6
 800884c:	463b      	mov	r3, r7
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 fe7d 	bl	8000550 <__aeabi_dmul>
 8008856:	e76a      	b.n	800872e <__ieee754_pow+0x3e>
 8008858:	4b3e      	ldr	r3, [pc, #248]	; (8008954 <__ieee754_pow+0x264>)
 800885a:	4599      	cmp	r9, r3
 800885c:	d10c      	bne.n	8008878 <__ieee754_pow+0x188>
 800885e:	2d00      	cmp	r5, #0
 8008860:	db0a      	blt.n	8008878 <__ieee754_pow+0x188>
 8008862:	ec47 6b10 	vmov	d0, r6, r7
 8008866:	b009      	add	sp, #36	; 0x24
 8008868:	ecbd 8b06 	vpop	{d8-d10}
 800886c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	f7ff ba52 	b.w	8007d18 <__ieee754_sqrt>
 8008874:	2300      	movs	r3, #0
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	ec47 6b10 	vmov	d0, r6, r7
 800887c:	f000 fe6a 	bl	8009554 <fabs>
 8008880:	ec51 0b10 	vmov	r0, r1, d0
 8008884:	f1ba 0f00 	cmp.w	sl, #0
 8008888:	d129      	bne.n	80088de <__ieee754_pow+0x1ee>
 800888a:	b124      	cbz	r4, 8008896 <__ieee754_pow+0x1a6>
 800888c:	4b2f      	ldr	r3, [pc, #188]	; (800894c <__ieee754_pow+0x25c>)
 800888e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008892:	429a      	cmp	r2, r3
 8008894:	d123      	bne.n	80088de <__ieee754_pow+0x1ee>
 8008896:	f1b9 0f00 	cmp.w	r9, #0
 800889a:	da05      	bge.n	80088a8 <__ieee754_pow+0x1b8>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	2000      	movs	r0, #0
 80088a2:	492a      	ldr	r1, [pc, #168]	; (800894c <__ieee754_pow+0x25c>)
 80088a4:	f7f7 ff7e 	bl	80007a4 <__aeabi_ddiv>
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	f6bf af40 	bge.w	800872e <__ieee754_pow+0x3e>
 80088ae:	9b04      	ldr	r3, [sp, #16]
 80088b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80088b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088b8:	431c      	orrs	r4, r3
 80088ba:	d108      	bne.n	80088ce <__ieee754_pow+0x1de>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	f7f7 fc8c 	bl	80001e0 <__aeabi_dsub>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	e78f      	b.n	80087ee <__ieee754_pow+0xfe>
 80088ce:	9b04      	ldr	r3, [sp, #16]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	f47f af2c 	bne.w	800872e <__ieee754_pow+0x3e>
 80088d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088da:	4619      	mov	r1, r3
 80088dc:	e727      	b.n	800872e <__ieee754_pow+0x3e>
 80088de:	0feb      	lsrs	r3, r5, #31
 80088e0:	3b01      	subs	r3, #1
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	9a06      	ldr	r2, [sp, #24]
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	d102      	bne.n	80088f2 <__ieee754_pow+0x202>
 80088ec:	4632      	mov	r2, r6
 80088ee:	463b      	mov	r3, r7
 80088f0:	e7e6      	b.n	80088c0 <__ieee754_pow+0x1d0>
 80088f2:	4b19      	ldr	r3, [pc, #100]	; (8008958 <__ieee754_pow+0x268>)
 80088f4:	4598      	cmp	r8, r3
 80088f6:	f340 80fb 	ble.w	8008af0 <__ieee754_pow+0x400>
 80088fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80088fe:	4598      	cmp	r8, r3
 8008900:	4b13      	ldr	r3, [pc, #76]	; (8008950 <__ieee754_pow+0x260>)
 8008902:	dd0c      	ble.n	800891e <__ieee754_pow+0x22e>
 8008904:	429c      	cmp	r4, r3
 8008906:	dc0f      	bgt.n	8008928 <__ieee754_pow+0x238>
 8008908:	f1b9 0f00 	cmp.w	r9, #0
 800890c:	da0f      	bge.n	800892e <__ieee754_pow+0x23e>
 800890e:	2000      	movs	r0, #0
 8008910:	b009      	add	sp, #36	; 0x24
 8008912:	ecbd 8b06 	vpop	{d8-d10}
 8008916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891a:	f000 beca 	b.w	80096b2 <__math_oflow>
 800891e:	429c      	cmp	r4, r3
 8008920:	dbf2      	blt.n	8008908 <__ieee754_pow+0x218>
 8008922:	4b0a      	ldr	r3, [pc, #40]	; (800894c <__ieee754_pow+0x25c>)
 8008924:	429c      	cmp	r4, r3
 8008926:	dd19      	ble.n	800895c <__ieee754_pow+0x26c>
 8008928:	f1b9 0f00 	cmp.w	r9, #0
 800892c:	dcef      	bgt.n	800890e <__ieee754_pow+0x21e>
 800892e:	2000      	movs	r0, #0
 8008930:	b009      	add	sp, #36	; 0x24
 8008932:	ecbd 8b06 	vpop	{d8-d10}
 8008936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	f000 beb1 	b.w	80096a0 <__math_uflow>
 800893e:	bf00      	nop
 8008940:	fff00000 	.word	0xfff00000
 8008944:	7ff00000 	.word	0x7ff00000
 8008948:	433fffff 	.word	0x433fffff
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	3fefffff 	.word	0x3fefffff
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	41e00000 	.word	0x41e00000
 800895c:	4b60      	ldr	r3, [pc, #384]	; (8008ae0 <__ieee754_pow+0x3f0>)
 800895e:	2200      	movs	r2, #0
 8008960:	f7f7 fc3e 	bl	80001e0 <__aeabi_dsub>
 8008964:	a354      	add	r3, pc, #336	; (adr r3, 8008ab8 <__ieee754_pow+0x3c8>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	4604      	mov	r4, r0
 800896c:	460d      	mov	r5, r1
 800896e:	f7f7 fdef 	bl	8000550 <__aeabi_dmul>
 8008972:	a353      	add	r3, pc, #332	; (adr r3, 8008ac0 <__ieee754_pow+0x3d0>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	4606      	mov	r6, r0
 800897a:	460f      	mov	r7, r1
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	f7f7 fde6 	bl	8000550 <__aeabi_dmul>
 8008984:	4b57      	ldr	r3, [pc, #348]	; (8008ae4 <__ieee754_pow+0x3f4>)
 8008986:	4682      	mov	sl, r0
 8008988:	468b      	mov	fp, r1
 800898a:	2200      	movs	r2, #0
 800898c:	4620      	mov	r0, r4
 800898e:	4629      	mov	r1, r5
 8008990:	f7f7 fdde 	bl	8000550 <__aeabi_dmul>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	a14b      	add	r1, pc, #300	; (adr r1, 8008ac8 <__ieee754_pow+0x3d8>)
 800899a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899e:	f7f7 fc1f 	bl	80001e0 <__aeabi_dsub>
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	f7f7 fdd3 	bl	8000550 <__aeabi_dmul>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	2000      	movs	r0, #0
 80089b0:	494d      	ldr	r1, [pc, #308]	; (8008ae8 <__ieee754_pow+0x3f8>)
 80089b2:	f7f7 fc15 	bl	80001e0 <__aeabi_dsub>
 80089b6:	4622      	mov	r2, r4
 80089b8:	4680      	mov	r8, r0
 80089ba:	4689      	mov	r9, r1
 80089bc:	462b      	mov	r3, r5
 80089be:	4620      	mov	r0, r4
 80089c0:	4629      	mov	r1, r5
 80089c2:	f7f7 fdc5 	bl	8000550 <__aeabi_dmul>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fdbf 	bl	8000550 <__aeabi_dmul>
 80089d2:	a33f      	add	r3, pc, #252	; (adr r3, 8008ad0 <__ieee754_pow+0x3e0>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fdba 	bl	8000550 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4650      	mov	r0, sl
 80089e2:	4659      	mov	r1, fp
 80089e4:	f7f7 fbfc 	bl	80001e0 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f7 fbf6 	bl	80001e4 <__adddf3>
 80089f8:	2000      	movs	r0, #0
 80089fa:	4632      	mov	r2, r6
 80089fc:	463b      	mov	r3, r7
 80089fe:	4604      	mov	r4, r0
 8008a00:	460d      	mov	r5, r1
 8008a02:	f7f7 fbed 	bl	80001e0 <__aeabi_dsub>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	f7f7 fbe7 	bl	80001e0 <__aeabi_dsub>
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	9a06      	ldr	r2, [sp, #24]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	4682      	mov	sl, r0
 8008a1c:	468b      	mov	fp, r1
 8008a1e:	f040 81e7 	bne.w	8008df0 <__ieee754_pow+0x700>
 8008a22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008ad8 <__ieee754_pow+0x3e8>
 8008a26:	eeb0 8a47 	vmov.f32	s16, s14
 8008a2a:	eef0 8a67 	vmov.f32	s17, s15
 8008a2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a32:	2600      	movs	r6, #0
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a3c:	f7f7 fbd0 	bl	80001e0 <__aeabi_dsub>
 8008a40:	4622      	mov	r2, r4
 8008a42:	462b      	mov	r3, r5
 8008a44:	f7f7 fd84 	bl	8000550 <__aeabi_dmul>
 8008a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	4689      	mov	r9, r1
 8008a50:	4650      	mov	r0, sl
 8008a52:	4659      	mov	r1, fp
 8008a54:	f7f7 fd7c 	bl	8000550 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	4649      	mov	r1, r9
 8008a60:	f7f7 fbc0 	bl	80001e4 <__adddf3>
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	4680      	mov	r8, r0
 8008a6a:	4689      	mov	r9, r1
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f7 fd6e 	bl	8000550 <__aeabi_dmul>
 8008a74:	460b      	mov	r3, r1
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4640      	mov	r0, r8
 8008a80:	f7f7 fbb0 	bl	80001e4 <__adddf3>
 8008a84:	4b19      	ldr	r3, [pc, #100]	; (8008aec <__ieee754_pow+0x3fc>)
 8008a86:	4299      	cmp	r1, r3
 8008a88:	ec45 4b19 	vmov	d9, r4, r5
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460f      	mov	r7, r1
 8008a90:	468b      	mov	fp, r1
 8008a92:	f340 82f0 	ble.w	8009076 <__ieee754_pow+0x986>
 8008a96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008a9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008a9e:	4303      	orrs	r3, r0
 8008aa0:	f000 81e4 	beq.w	8008e6c <__ieee754_pow+0x77c>
 8008aa4:	ec51 0b18 	vmov	r0, r1, d8
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f7f7 ffc2 	bl	8000a34 <__aeabi_dcmplt>
 8008ab0:	3800      	subs	r0, #0
 8008ab2:	bf18      	it	ne
 8008ab4:	2001      	movne	r0, #1
 8008ab6:	e72b      	b.n	8008910 <__ieee754_pow+0x220>
 8008ab8:	60000000 	.word	0x60000000
 8008abc:	3ff71547 	.word	0x3ff71547
 8008ac0:	f85ddf44 	.word	0xf85ddf44
 8008ac4:	3e54ae0b 	.word	0x3e54ae0b
 8008ac8:	55555555 	.word	0x55555555
 8008acc:	3fd55555 	.word	0x3fd55555
 8008ad0:	652b82fe 	.word	0x652b82fe
 8008ad4:	3ff71547 	.word	0x3ff71547
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	bff00000 	.word	0xbff00000
 8008ae0:	3ff00000 	.word	0x3ff00000
 8008ae4:	3fd00000 	.word	0x3fd00000
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	408fffff 	.word	0x408fffff
 8008af0:	4bd5      	ldr	r3, [pc, #852]	; (8008e48 <__ieee754_pow+0x758>)
 8008af2:	402b      	ands	r3, r5
 8008af4:	2200      	movs	r2, #0
 8008af6:	b92b      	cbnz	r3, 8008b04 <__ieee754_pow+0x414>
 8008af8:	4bd4      	ldr	r3, [pc, #848]	; (8008e4c <__ieee754_pow+0x75c>)
 8008afa:	f7f7 fd29 	bl	8000550 <__aeabi_dmul>
 8008afe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008b02:	460c      	mov	r4, r1
 8008b04:	1523      	asrs	r3, r4, #20
 8008b06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b0a:	4413      	add	r3, r2
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	4bd0      	ldr	r3, [pc, #832]	; (8008e50 <__ieee754_pow+0x760>)
 8008b10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b1e:	dd08      	ble.n	8008b32 <__ieee754_pow+0x442>
 8008b20:	4bcc      	ldr	r3, [pc, #816]	; (8008e54 <__ieee754_pow+0x764>)
 8008b22:	429c      	cmp	r4, r3
 8008b24:	f340 8162 	ble.w	8008dec <__ieee754_pow+0x6fc>
 8008b28:	9b05      	ldr	r3, [sp, #20]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008b32:	2400      	movs	r4, #0
 8008b34:	00e3      	lsls	r3, r4, #3
 8008b36:	9307      	str	r3, [sp, #28]
 8008b38:	4bc7      	ldr	r3, [pc, #796]	; (8008e58 <__ieee754_pow+0x768>)
 8008b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b3e:	ed93 7b00 	vldr	d7, [r3]
 8008b42:	4629      	mov	r1, r5
 8008b44:	ec53 2b17 	vmov	r2, r3, d7
 8008b48:	eeb0 9a47 	vmov.f32	s18, s14
 8008b4c:	eef0 9a67 	vmov.f32	s19, s15
 8008b50:	4682      	mov	sl, r0
 8008b52:	f7f7 fb45 	bl	80001e0 <__aeabi_dsub>
 8008b56:	4652      	mov	r2, sl
 8008b58:	4606      	mov	r6, r0
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	462b      	mov	r3, r5
 8008b5e:	ec51 0b19 	vmov	r0, r1, d9
 8008b62:	f7f7 fb3f 	bl	80001e4 <__adddf3>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	49bb      	ldr	r1, [pc, #748]	; (8008e5c <__ieee754_pow+0x76c>)
 8008b6e:	f7f7 fe19 	bl	80007a4 <__aeabi_ddiv>
 8008b72:	ec41 0b1a 	vmov	d10, r0, r1
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	f7f7 fce7 	bl	8000550 <__aeabi_dmul>
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b88:	9302      	str	r3, [sp, #8]
 8008b8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b8e:	46ab      	mov	fp, r5
 8008b90:	106d      	asrs	r5, r5, #1
 8008b92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008b96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008b9a:	ec41 0b18 	vmov	d8, r0, r1
 8008b9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4614      	mov	r4, r2
 8008baa:	461d      	mov	r5, r3
 8008bac:	f7f7 fcd0 	bl	8000550 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 fb12 	bl	80001e0 <__aeabi_dsub>
 8008bbc:	ec53 2b19 	vmov	r2, r3, d9
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 fb0a 	bl	80001e0 <__aeabi_dsub>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4650      	mov	r0, sl
 8008bd2:	4659      	mov	r1, fp
 8008bd4:	f7f7 fb04 	bl	80001e0 <__aeabi_dsub>
 8008bd8:	4642      	mov	r2, r8
 8008bda:	464b      	mov	r3, r9
 8008bdc:	f7f7 fcb8 	bl	8000550 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 fafa 	bl	80001e0 <__aeabi_dsub>
 8008bec:	ec53 2b1a 	vmov	r2, r3, d10
 8008bf0:	f7f7 fcae 	bl	8000550 <__aeabi_dmul>
 8008bf4:	ec53 2b18 	vmov	r2, r3, d8
 8008bf8:	ec41 0b19 	vmov	d9, r0, r1
 8008bfc:	ec51 0b18 	vmov	r0, r1, d8
 8008c00:	f7f7 fca6 	bl	8000550 <__aeabi_dmul>
 8008c04:	a37c      	add	r3, pc, #496	; (adr r3, 8008df8 <__ieee754_pow+0x708>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	f7f7 fc9f 	bl	8000550 <__aeabi_dmul>
 8008c12:	a37b      	add	r3, pc, #492	; (adr r3, 8008e00 <__ieee754_pow+0x710>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fae4 	bl	80001e4 <__adddf3>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	462b      	mov	r3, r5
 8008c20:	f7f7 fc96 	bl	8000550 <__aeabi_dmul>
 8008c24:	a378      	add	r3, pc, #480	; (adr r3, 8008e08 <__ieee754_pow+0x718>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fadb 	bl	80001e4 <__adddf3>
 8008c2e:	4622      	mov	r2, r4
 8008c30:	462b      	mov	r3, r5
 8008c32:	f7f7 fc8d 	bl	8000550 <__aeabi_dmul>
 8008c36:	a376      	add	r3, pc, #472	; (adr r3, 8008e10 <__ieee754_pow+0x720>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fad2 	bl	80001e4 <__adddf3>
 8008c40:	4622      	mov	r2, r4
 8008c42:	462b      	mov	r3, r5
 8008c44:	f7f7 fc84 	bl	8000550 <__aeabi_dmul>
 8008c48:	a373      	add	r3, pc, #460	; (adr r3, 8008e18 <__ieee754_pow+0x728>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fac9 	bl	80001e4 <__adddf3>
 8008c52:	4622      	mov	r2, r4
 8008c54:	462b      	mov	r3, r5
 8008c56:	f7f7 fc7b 	bl	8000550 <__aeabi_dmul>
 8008c5a:	a371      	add	r3, pc, #452	; (adr r3, 8008e20 <__ieee754_pow+0x730>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fac0 	bl	80001e4 <__adddf3>
 8008c64:	4622      	mov	r2, r4
 8008c66:	4606      	mov	r6, r0
 8008c68:	460f      	mov	r7, r1
 8008c6a:	462b      	mov	r3, r5
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f7f7 fc6e 	bl	8000550 <__aeabi_dmul>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 fc68 	bl	8000550 <__aeabi_dmul>
 8008c80:	4642      	mov	r2, r8
 8008c82:	4604      	mov	r4, r0
 8008c84:	460d      	mov	r5, r1
 8008c86:	464b      	mov	r3, r9
 8008c88:	ec51 0b18 	vmov	r0, r1, d8
 8008c8c:	f7f7 faaa 	bl	80001e4 <__adddf3>
 8008c90:	ec53 2b19 	vmov	r2, r3, d9
 8008c94:	f7f7 fc5c 	bl	8000550 <__aeabi_dmul>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	f7f7 faa2 	bl	80001e4 <__adddf3>
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	4682      	mov	sl, r0
 8008ca4:	468b      	mov	fp, r1
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	4649      	mov	r1, r9
 8008cac:	f7f7 fc50 	bl	8000550 <__aeabi_dmul>
 8008cb0:	4b6b      	ldr	r3, [pc, #428]	; (8008e60 <__ieee754_pow+0x770>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	f7f7 fa94 	bl	80001e4 <__adddf3>
 8008cbc:	4652      	mov	r2, sl
 8008cbe:	465b      	mov	r3, fp
 8008cc0:	f7f7 fa90 	bl	80001e4 <__adddf3>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4640      	mov	r0, r8
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	f7f7 fc3d 	bl	8000550 <__aeabi_dmul>
 8008cd6:	4b62      	ldr	r3, [pc, #392]	; (8008e60 <__ieee754_pow+0x770>)
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4689      	mov	r9, r1
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 fa7d 	bl	80001e0 <__aeabi_dsub>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	f7f7 fa79 	bl	80001e0 <__aeabi_dsub>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	f7f7 fa73 	bl	80001e0 <__aeabi_dsub>
 8008cfa:	ec53 2b18 	vmov	r2, r3, d8
 8008cfe:	f7f7 fc27 	bl	8000550 <__aeabi_dmul>
 8008d02:	4622      	mov	r2, r4
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	462b      	mov	r3, r5
 8008d0a:	ec51 0b19 	vmov	r0, r1, d9
 8008d0e:	f7f7 fc1f 	bl	8000550 <__aeabi_dmul>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	f7f7 fa63 	bl	80001e4 <__adddf3>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4640      	mov	r0, r8
 8008d28:	4649      	mov	r1, r9
 8008d2a:	f7f7 fa5b 	bl	80001e4 <__adddf3>
 8008d2e:	a33e      	add	r3, pc, #248	; (adr r3, 8008e28 <__ieee754_pow+0x738>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	2000      	movs	r0, #0
 8008d36:	4604      	mov	r4, r0
 8008d38:	460d      	mov	r5, r1
 8008d3a:	f7f7 fc09 	bl	8000550 <__aeabi_dmul>
 8008d3e:	4642      	mov	r2, r8
 8008d40:	ec41 0b18 	vmov	d8, r0, r1
 8008d44:	464b      	mov	r3, r9
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fa49 	bl	80001e0 <__aeabi_dsub>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4630      	mov	r0, r6
 8008d54:	4639      	mov	r1, r7
 8008d56:	f7f7 fa43 	bl	80001e0 <__aeabi_dsub>
 8008d5a:	a335      	add	r3, pc, #212	; (adr r3, 8008e30 <__ieee754_pow+0x740>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fbf6 	bl	8000550 <__aeabi_dmul>
 8008d64:	a334      	add	r3, pc, #208	; (adr r3, 8008e38 <__ieee754_pow+0x748>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	460f      	mov	r7, r1
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fbed 	bl	8000550 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fa31 	bl	80001e4 <__adddf3>
 8008d82:	9a07      	ldr	r2, [sp, #28]
 8008d84:	4b37      	ldr	r3, [pc, #220]	; (8008e64 <__ieee754_pow+0x774>)
 8008d86:	4413      	add	r3, r2
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fa2a 	bl	80001e4 <__adddf3>
 8008d90:	4682      	mov	sl, r0
 8008d92:	9805      	ldr	r0, [sp, #20]
 8008d94:	468b      	mov	fp, r1
 8008d96:	f7f7 fb71 	bl	800047c <__aeabi_i2d>
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	4b32      	ldr	r3, [pc, #200]	; (8008e68 <__ieee754_pow+0x778>)
 8008d9e:	4413      	add	r3, r2
 8008da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	4652      	mov	r2, sl
 8008daa:	465b      	mov	r3, fp
 8008dac:	ec51 0b18 	vmov	r0, r1, d8
 8008db0:	f7f7 fa18 	bl	80001e4 <__adddf3>
 8008db4:	4642      	mov	r2, r8
 8008db6:	464b      	mov	r3, r9
 8008db8:	f7f7 fa14 	bl	80001e4 <__adddf3>
 8008dbc:	4632      	mov	r2, r6
 8008dbe:	463b      	mov	r3, r7
 8008dc0:	f7f7 fa10 	bl	80001e4 <__adddf3>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	4632      	mov	r2, r6
 8008dc8:	463b      	mov	r3, r7
 8008dca:	4604      	mov	r4, r0
 8008dcc:	460d      	mov	r5, r1
 8008dce:	f7f7 fa07 	bl	80001e0 <__aeabi_dsub>
 8008dd2:	4642      	mov	r2, r8
 8008dd4:	464b      	mov	r3, r9
 8008dd6:	f7f7 fa03 	bl	80001e0 <__aeabi_dsub>
 8008dda:	ec53 2b18 	vmov	r2, r3, d8
 8008dde:	f7f7 f9ff 	bl	80001e0 <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	e610      	b.n	8008a0e <__ieee754_pow+0x31e>
 8008dec:	2401      	movs	r4, #1
 8008dee:	e6a1      	b.n	8008b34 <__ieee754_pow+0x444>
 8008df0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008e40 <__ieee754_pow+0x750>
 8008df4:	e617      	b.n	8008a26 <__ieee754_pow+0x336>
 8008df6:	bf00      	nop
 8008df8:	4a454eef 	.word	0x4a454eef
 8008dfc:	3fca7e28 	.word	0x3fca7e28
 8008e00:	93c9db65 	.word	0x93c9db65
 8008e04:	3fcd864a 	.word	0x3fcd864a
 8008e08:	a91d4101 	.word	0xa91d4101
 8008e0c:	3fd17460 	.word	0x3fd17460
 8008e10:	518f264d 	.word	0x518f264d
 8008e14:	3fd55555 	.word	0x3fd55555
 8008e18:	db6fabff 	.word	0xdb6fabff
 8008e1c:	3fdb6db6 	.word	0x3fdb6db6
 8008e20:	33333303 	.word	0x33333303
 8008e24:	3fe33333 	.word	0x3fe33333
 8008e28:	e0000000 	.word	0xe0000000
 8008e2c:	3feec709 	.word	0x3feec709
 8008e30:	dc3a03fd 	.word	0xdc3a03fd
 8008e34:	3feec709 	.word	0x3feec709
 8008e38:	145b01f5 	.word	0x145b01f5
 8008e3c:	be3e2fe0 	.word	0xbe3e2fe0
 8008e40:	00000000 	.word	0x00000000
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	7ff00000 	.word	0x7ff00000
 8008e4c:	43400000 	.word	0x43400000
 8008e50:	0003988e 	.word	0x0003988e
 8008e54:	000bb679 	.word	0x000bb679
 8008e58:	0801f9f0 	.word	0x0801f9f0
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	40080000 	.word	0x40080000
 8008e64:	0801fa10 	.word	0x0801fa10
 8008e68:	0801fa00 	.word	0x0801fa00
 8008e6c:	a3b3      	add	r3, pc, #716	; (adr r3, 800913c <__ieee754_pow+0xa4c>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 f9b5 	bl	80001e4 <__adddf3>
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	ec41 0b1a 	vmov	d10, r0, r1
 8008e80:	462b      	mov	r3, r5
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 f9ab 	bl	80001e0 <__aeabi_dsub>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	ec51 0b1a 	vmov	r0, r1, d10
 8008e92:	f7f7 fded 	bl	8000a70 <__aeabi_dcmpgt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f47f ae04 	bne.w	8008aa4 <__ieee754_pow+0x3b4>
 8008e9c:	4aa2      	ldr	r2, [pc, #648]	; (8009128 <__ieee754_pow+0xa38>)
 8008e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	f340 8107 	ble.w	80090b6 <__ieee754_pow+0x9c6>
 8008ea8:	151b      	asrs	r3, r3, #20
 8008eaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008eae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008eb2:	fa4a fa03 	asr.w	sl, sl, r3
 8008eb6:	44da      	add	sl, fp
 8008eb8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008ebc:	489b      	ldr	r0, [pc, #620]	; (800912c <__ieee754_pow+0xa3c>)
 8008ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ec2:	4108      	asrs	r0, r1
 8008ec4:	ea00 030a 	and.w	r3, r0, sl
 8008ec8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008ecc:	f1c1 0114 	rsb	r1, r1, #20
 8008ed0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008ed4:	fa4a fa01 	asr.w	sl, sl, r1
 8008ed8:	f1bb 0f00 	cmp.w	fp, #0
 8008edc:	f04f 0200 	mov.w	r2, #0
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	bfb8      	it	lt
 8008ee6:	f1ca 0a00 	rsblt	sl, sl, #0
 8008eea:	f7f7 f979 	bl	80001e0 <__aeabi_dsub>
 8008eee:	ec41 0b19 	vmov	d9, r0, r1
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	ec51 0b19 	vmov	r0, r1, d9
 8008efa:	f7f7 f973 	bl	80001e4 <__adddf3>
 8008efe:	a37a      	add	r3, pc, #488	; (adr r3, 80090e8 <__ieee754_pow+0x9f8>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	2000      	movs	r0, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	f7f7 fb21 	bl	8000550 <__aeabi_dmul>
 8008f0e:	ec53 2b19 	vmov	r2, r3, d9
 8008f12:	4606      	mov	r6, r0
 8008f14:	460f      	mov	r7, r1
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 f961 	bl	80001e0 <__aeabi_dsub>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 f95b 	bl	80001e0 <__aeabi_dsub>
 8008f2a:	a371      	add	r3, pc, #452	; (adr r3, 80090f0 <__ieee754_pow+0xa00>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 fb0e 	bl	8000550 <__aeabi_dmul>
 8008f34:	a370      	add	r3, pc, #448	; (adr r3, 80090f8 <__ieee754_pow+0xa08>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	4689      	mov	r9, r1
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 fb05 	bl	8000550 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	f7f7 f949 	bl	80001e4 <__adddf3>
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	f7f7 f941 	bl	80001e4 <__adddf3>
 8008f62:	4632      	mov	r2, r6
 8008f64:	463b      	mov	r3, r7
 8008f66:	4680      	mov	r8, r0
 8008f68:	4689      	mov	r9, r1
 8008f6a:	f7f7 f939 	bl	80001e0 <__aeabi_dsub>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7f7 f933 	bl	80001e0 <__aeabi_dsub>
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	464b      	mov	r3, r9
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fae3 	bl	8000550 <__aeabi_dmul>
 8008f8a:	a35d      	add	r3, pc, #372	; (adr r3, 8009100 <__ieee754_pow+0xa10>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	f7f7 fadc 	bl	8000550 <__aeabi_dmul>
 8008f98:	a35b      	add	r3, pc, #364	; (adr r3, 8009108 <__ieee754_pow+0xa18>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f7f7 f91f 	bl	80001e0 <__aeabi_dsub>
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	f7f7 fad3 	bl	8000550 <__aeabi_dmul>
 8008faa:	a359      	add	r3, pc, #356	; (adr r3, 8009110 <__ieee754_pow+0xa20>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 f918 	bl	80001e4 <__adddf3>
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	462b      	mov	r3, r5
 8008fb8:	f7f7 faca 	bl	8000550 <__aeabi_dmul>
 8008fbc:	a356      	add	r3, pc, #344	; (adr r3, 8009118 <__ieee754_pow+0xa28>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 f90d 	bl	80001e0 <__aeabi_dsub>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	f7f7 fac1 	bl	8000550 <__aeabi_dmul>
 8008fce:	a354      	add	r3, pc, #336	; (adr r3, 8009120 <__ieee754_pow+0xa30>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f906 	bl	80001e4 <__adddf3>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	462b      	mov	r3, r5
 8008fdc:	f7f7 fab8 	bl	8000550 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 f8fa 	bl	80001e0 <__aeabi_dsub>
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	f7f7 faaa 	bl	8000550 <__aeabi_dmul>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	ec41 0b19 	vmov	d9, r0, r1
 8009002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 f8e9 	bl	80001e0 <__aeabi_dsub>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	ec51 0b19 	vmov	r0, r1, d9
 8009016:	f7f7 fbc5 	bl	80007a4 <__aeabi_ddiv>
 800901a:	4632      	mov	r2, r6
 800901c:	4604      	mov	r4, r0
 800901e:	460d      	mov	r5, r1
 8009020:	463b      	mov	r3, r7
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 fa93 	bl	8000550 <__aeabi_dmul>
 800902a:	4632      	mov	r2, r6
 800902c:	463b      	mov	r3, r7
 800902e:	f7f7 f8d9 	bl	80001e4 <__adddf3>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 f8d1 	bl	80001e0 <__aeabi_dsub>
 800903e:	4642      	mov	r2, r8
 8009040:	464b      	mov	r3, r9
 8009042:	f7f7 f8cd 	bl	80001e0 <__aeabi_dsub>
 8009046:	460b      	mov	r3, r1
 8009048:	4602      	mov	r2, r0
 800904a:	4939      	ldr	r1, [pc, #228]	; (8009130 <__ieee754_pow+0xa40>)
 800904c:	2000      	movs	r0, #0
 800904e:	f7f7 f8c7 	bl	80001e0 <__aeabi_dsub>
 8009052:	ec41 0b10 	vmov	d0, r0, r1
 8009056:	ee10 3a90 	vmov	r3, s1
 800905a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800905e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009062:	da2b      	bge.n	80090bc <__ieee754_pow+0x9cc>
 8009064:	4650      	mov	r0, sl
 8009066:	f000 fa7f 	bl	8009568 <scalbn>
 800906a:	ec51 0b10 	vmov	r0, r1, d0
 800906e:	ec53 2b18 	vmov	r2, r3, d8
 8009072:	f7ff bbee 	b.w	8008852 <__ieee754_pow+0x162>
 8009076:	4b2f      	ldr	r3, [pc, #188]	; (8009134 <__ieee754_pow+0xa44>)
 8009078:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800907c:	429e      	cmp	r6, r3
 800907e:	f77f af0d 	ble.w	8008e9c <__ieee754_pow+0x7ac>
 8009082:	4b2d      	ldr	r3, [pc, #180]	; (8009138 <__ieee754_pow+0xa48>)
 8009084:	440b      	add	r3, r1
 8009086:	4303      	orrs	r3, r0
 8009088:	d009      	beq.n	800909e <__ieee754_pow+0x9ae>
 800908a:	ec51 0b18 	vmov	r0, r1, d8
 800908e:	2200      	movs	r2, #0
 8009090:	2300      	movs	r3, #0
 8009092:	f7f7 fccf 	bl	8000a34 <__aeabi_dcmplt>
 8009096:	3800      	subs	r0, #0
 8009098:	bf18      	it	ne
 800909a:	2001      	movne	r0, #1
 800909c:	e448      	b.n	8008930 <__ieee754_pow+0x240>
 800909e:	4622      	mov	r2, r4
 80090a0:	462b      	mov	r3, r5
 80090a2:	f7f7 f89d 	bl	80001e0 <__aeabi_dsub>
 80090a6:	4642      	mov	r2, r8
 80090a8:	464b      	mov	r3, r9
 80090aa:	f7f7 fcd7 	bl	8000a5c <__aeabi_dcmpge>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f aef4 	beq.w	8008e9c <__ieee754_pow+0x7ac>
 80090b4:	e7e9      	b.n	800908a <__ieee754_pow+0x99a>
 80090b6:	f04f 0a00 	mov.w	sl, #0
 80090ba:	e71a      	b.n	8008ef2 <__ieee754_pow+0x802>
 80090bc:	ec51 0b10 	vmov	r0, r1, d0
 80090c0:	4619      	mov	r1, r3
 80090c2:	e7d4      	b.n	800906e <__ieee754_pow+0x97e>
 80090c4:	491a      	ldr	r1, [pc, #104]	; (8009130 <__ieee754_pow+0xa40>)
 80090c6:	2000      	movs	r0, #0
 80090c8:	f7ff bb31 	b.w	800872e <__ieee754_pow+0x3e>
 80090cc:	2000      	movs	r0, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	f7ff bb2d 	b.w	800872e <__ieee754_pow+0x3e>
 80090d4:	4630      	mov	r0, r6
 80090d6:	4639      	mov	r1, r7
 80090d8:	f7ff bb29 	b.w	800872e <__ieee754_pow+0x3e>
 80090dc:	9204      	str	r2, [sp, #16]
 80090de:	f7ff bb7b 	b.w	80087d8 <__ieee754_pow+0xe8>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f7ff bb65 	b.w	80087b2 <__ieee754_pow+0xc2>
 80090e8:	00000000 	.word	0x00000000
 80090ec:	3fe62e43 	.word	0x3fe62e43
 80090f0:	fefa39ef 	.word	0xfefa39ef
 80090f4:	3fe62e42 	.word	0x3fe62e42
 80090f8:	0ca86c39 	.word	0x0ca86c39
 80090fc:	be205c61 	.word	0xbe205c61
 8009100:	72bea4d0 	.word	0x72bea4d0
 8009104:	3e663769 	.word	0x3e663769
 8009108:	c5d26bf1 	.word	0xc5d26bf1
 800910c:	3ebbbd41 	.word	0x3ebbbd41
 8009110:	af25de2c 	.word	0xaf25de2c
 8009114:	3f11566a 	.word	0x3f11566a
 8009118:	16bebd93 	.word	0x16bebd93
 800911c:	3f66c16c 	.word	0x3f66c16c
 8009120:	5555553e 	.word	0x5555553e
 8009124:	3fc55555 	.word	0x3fc55555
 8009128:	3fe00000 	.word	0x3fe00000
 800912c:	fff00000 	.word	0xfff00000
 8009130:	3ff00000 	.word	0x3ff00000
 8009134:	4090cbff 	.word	0x4090cbff
 8009138:	3f6f3400 	.word	0x3f6f3400
 800913c:	652b82fe 	.word	0x652b82fe
 8009140:	3c971547 	.word	0x3c971547
 8009144:	00000000 	.word	0x00000000

08009148 <__ieee754_rem_pio2>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	ed2d 8b02 	vpush	{d8}
 8009150:	ec55 4b10 	vmov	r4, r5, d0
 8009154:	4bca      	ldr	r3, [pc, #808]	; (8009480 <__ieee754_rem_pio2+0x338>)
 8009156:	b08b      	sub	sp, #44	; 0x2c
 8009158:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800915c:	4598      	cmp	r8, r3
 800915e:	4682      	mov	sl, r0
 8009160:	9502      	str	r5, [sp, #8]
 8009162:	dc08      	bgt.n	8009176 <__ieee754_rem_pio2+0x2e>
 8009164:	2200      	movs	r2, #0
 8009166:	2300      	movs	r3, #0
 8009168:	ed80 0b00 	vstr	d0, [r0]
 800916c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009170:	f04f 0b00 	mov.w	fp, #0
 8009174:	e028      	b.n	80091c8 <__ieee754_rem_pio2+0x80>
 8009176:	4bc3      	ldr	r3, [pc, #780]	; (8009484 <__ieee754_rem_pio2+0x33c>)
 8009178:	4598      	cmp	r8, r3
 800917a:	dc78      	bgt.n	800926e <__ieee754_rem_pio2+0x126>
 800917c:	9b02      	ldr	r3, [sp, #8]
 800917e:	4ec2      	ldr	r6, [pc, #776]	; (8009488 <__ieee754_rem_pio2+0x340>)
 8009180:	2b00      	cmp	r3, #0
 8009182:	ee10 0a10 	vmov	r0, s0
 8009186:	a3b0      	add	r3, pc, #704	; (adr r3, 8009448 <__ieee754_rem_pio2+0x300>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	4629      	mov	r1, r5
 800918e:	dd39      	ble.n	8009204 <__ieee754_rem_pio2+0xbc>
 8009190:	f7f7 f826 	bl	80001e0 <__aeabi_dsub>
 8009194:	45b0      	cmp	r8, r6
 8009196:	4604      	mov	r4, r0
 8009198:	460d      	mov	r5, r1
 800919a:	d01b      	beq.n	80091d4 <__ieee754_rem_pio2+0x8c>
 800919c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009450 <__ieee754_rem_pio2+0x308>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f81d 	bl	80001e0 <__aeabi_dsub>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	e9ca 2300 	strd	r2, r3, [sl]
 80091ae:	4620      	mov	r0, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7f7 f815 	bl	80001e0 <__aeabi_dsub>
 80091b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009450 <__ieee754_rem_pio2+0x308>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f7f7 f810 	bl	80001e0 <__aeabi_dsub>
 80091c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091c4:	f04f 0b01 	mov.w	fp, #1
 80091c8:	4658      	mov	r0, fp
 80091ca:	b00b      	add	sp, #44	; 0x2c
 80091cc:	ecbd 8b02 	vpop	{d8}
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009458 <__ieee754_rem_pio2+0x310>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f801 	bl	80001e0 <__aeabi_dsub>
 80091de:	a3a0      	add	r3, pc, #640	; (adr r3, 8009460 <__ieee754_rem_pio2+0x318>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	4604      	mov	r4, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	f7f6 fffa 	bl	80001e0 <__aeabi_dsub>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	e9ca 2300 	strd	r2, r3, [sl]
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f6 fff2 	bl	80001e0 <__aeabi_dsub>
 80091fc:	a398      	add	r3, pc, #608	; (adr r3, 8009460 <__ieee754_rem_pio2+0x318>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	e7db      	b.n	80091bc <__ieee754_rem_pio2+0x74>
 8009204:	f7f6 ffee 	bl	80001e4 <__adddf3>
 8009208:	45b0      	cmp	r8, r6
 800920a:	4604      	mov	r4, r0
 800920c:	460d      	mov	r5, r1
 800920e:	d016      	beq.n	800923e <__ieee754_rem_pio2+0xf6>
 8009210:	a38f      	add	r3, pc, #572	; (adr r3, 8009450 <__ieee754_rem_pio2+0x308>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f6 ffe5 	bl	80001e4 <__adddf3>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	e9ca 2300 	strd	r2, r3, [sl]
 8009222:	4620      	mov	r0, r4
 8009224:	4629      	mov	r1, r5
 8009226:	f7f6 ffdb 	bl	80001e0 <__aeabi_dsub>
 800922a:	a389      	add	r3, pc, #548	; (adr r3, 8009450 <__ieee754_rem_pio2+0x308>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f6 ffd8 	bl	80001e4 <__adddf3>
 8009234:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009238:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800923c:	e7c4      	b.n	80091c8 <__ieee754_rem_pio2+0x80>
 800923e:	a386      	add	r3, pc, #536	; (adr r3, 8009458 <__ieee754_rem_pio2+0x310>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f6 ffce 	bl	80001e4 <__adddf3>
 8009248:	a385      	add	r3, pc, #532	; (adr r3, 8009460 <__ieee754_rem_pio2+0x318>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	4604      	mov	r4, r0
 8009250:	460d      	mov	r5, r1
 8009252:	f7f6 ffc7 	bl	80001e4 <__adddf3>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	e9ca 2300 	strd	r2, r3, [sl]
 800925e:	4620      	mov	r0, r4
 8009260:	4629      	mov	r1, r5
 8009262:	f7f6 ffbd 	bl	80001e0 <__aeabi_dsub>
 8009266:	a37e      	add	r3, pc, #504	; (adr r3, 8009460 <__ieee754_rem_pio2+0x318>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	e7e0      	b.n	8009230 <__ieee754_rem_pio2+0xe8>
 800926e:	4b87      	ldr	r3, [pc, #540]	; (800948c <__ieee754_rem_pio2+0x344>)
 8009270:	4598      	cmp	r8, r3
 8009272:	f300 80d8 	bgt.w	8009426 <__ieee754_rem_pio2+0x2de>
 8009276:	f000 f96d 	bl	8009554 <fabs>
 800927a:	ec55 4b10 	vmov	r4, r5, d0
 800927e:	ee10 0a10 	vmov	r0, s0
 8009282:	a379      	add	r3, pc, #484	; (adr r3, 8009468 <__ieee754_rem_pio2+0x320>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 f961 	bl	8000550 <__aeabi_dmul>
 800928e:	4b80      	ldr	r3, [pc, #512]	; (8009490 <__ieee754_rem_pio2+0x348>)
 8009290:	2200      	movs	r2, #0
 8009292:	f7f6 ffa7 	bl	80001e4 <__adddf3>
 8009296:	f7f7 fc0b 	bl	8000ab0 <__aeabi_d2iz>
 800929a:	4683      	mov	fp, r0
 800929c:	f7f7 f8ee 	bl	800047c <__aeabi_i2d>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	ec43 2b18 	vmov	d8, r2, r3
 80092a8:	a367      	add	r3, pc, #412	; (adr r3, 8009448 <__ieee754_rem_pio2+0x300>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f7 f94f 	bl	8000550 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4620      	mov	r0, r4
 80092b8:	4629      	mov	r1, r5
 80092ba:	f7f6 ff91 	bl	80001e0 <__aeabi_dsub>
 80092be:	a364      	add	r3, pc, #400	; (adr r3, 8009450 <__ieee754_rem_pio2+0x308>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	4606      	mov	r6, r0
 80092c6:	460f      	mov	r7, r1
 80092c8:	ec51 0b18 	vmov	r0, r1, d8
 80092cc:	f7f7 f940 	bl	8000550 <__aeabi_dmul>
 80092d0:	f1bb 0f1f 	cmp.w	fp, #31
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	dc0d      	bgt.n	80092f6 <__ieee754_rem_pio2+0x1ae>
 80092da:	4b6e      	ldr	r3, [pc, #440]	; (8009494 <__ieee754_rem_pio2+0x34c>)
 80092dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	4543      	cmp	r3, r8
 80092e6:	d006      	beq.n	80092f6 <__ieee754_rem_pio2+0x1ae>
 80092e8:	4622      	mov	r2, r4
 80092ea:	462b      	mov	r3, r5
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f6 ff76 	bl	80001e0 <__aeabi_dsub>
 80092f4:	e00e      	b.n	8009314 <__ieee754_rem_pio2+0x1cc>
 80092f6:	462b      	mov	r3, r5
 80092f8:	4622      	mov	r2, r4
 80092fa:	4630      	mov	r0, r6
 80092fc:	4639      	mov	r1, r7
 80092fe:	f7f6 ff6f 	bl	80001e0 <__aeabi_dsub>
 8009302:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009306:	9303      	str	r3, [sp, #12]
 8009308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800930c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009310:	2b10      	cmp	r3, #16
 8009312:	dc02      	bgt.n	800931a <__ieee754_rem_pio2+0x1d2>
 8009314:	e9ca 0100 	strd	r0, r1, [sl]
 8009318:	e039      	b.n	800938e <__ieee754_rem_pio2+0x246>
 800931a:	a34f      	add	r3, pc, #316	; (adr r3, 8009458 <__ieee754_rem_pio2+0x310>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	ec51 0b18 	vmov	r0, r1, d8
 8009324:	f7f7 f914 	bl	8000550 <__aeabi_dmul>
 8009328:	4604      	mov	r4, r0
 800932a:	460d      	mov	r5, r1
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f6 ff54 	bl	80001e0 <__aeabi_dsub>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f6 ff4c 	bl	80001e0 <__aeabi_dsub>
 8009348:	4622      	mov	r2, r4
 800934a:	462b      	mov	r3, r5
 800934c:	f7f6 ff48 	bl	80001e0 <__aeabi_dsub>
 8009350:	a343      	add	r3, pc, #268	; (adr r3, 8009460 <__ieee754_rem_pio2+0x318>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	4604      	mov	r4, r0
 8009358:	460d      	mov	r5, r1
 800935a:	ec51 0b18 	vmov	r0, r1, d8
 800935e:	f7f7 f8f7 	bl	8000550 <__aeabi_dmul>
 8009362:	4622      	mov	r2, r4
 8009364:	462b      	mov	r3, r5
 8009366:	f7f6 ff3b 	bl	80001e0 <__aeabi_dsub>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	4640      	mov	r0, r8
 8009374:	4649      	mov	r1, r9
 8009376:	f7f6 ff33 	bl	80001e0 <__aeabi_dsub>
 800937a:	9a03      	ldr	r2, [sp, #12]
 800937c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b31      	cmp	r3, #49	; 0x31
 8009384:	dc24      	bgt.n	80093d0 <__ieee754_rem_pio2+0x288>
 8009386:	e9ca 0100 	strd	r0, r1, [sl]
 800938a:	4646      	mov	r6, r8
 800938c:	464f      	mov	r7, r9
 800938e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009392:	4630      	mov	r0, r6
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	4639      	mov	r1, r7
 800939a:	f7f6 ff21 	bl	80001e0 <__aeabi_dsub>
 800939e:	462b      	mov	r3, r5
 80093a0:	4622      	mov	r2, r4
 80093a2:	f7f6 ff1d 	bl	80001e0 <__aeabi_dsub>
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80093ae:	f6bf af0b 	bge.w	80091c8 <__ieee754_rem_pio2+0x80>
 80093b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80093ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093be:	f8ca 8000 	str.w	r8, [sl]
 80093c2:	f8ca 0008 	str.w	r0, [sl, #8]
 80093c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80093ca:	f1cb 0b00 	rsb	fp, fp, #0
 80093ce:	e6fb      	b.n	80091c8 <__ieee754_rem_pio2+0x80>
 80093d0:	a327      	add	r3, pc, #156	; (adr r3, 8009470 <__ieee754_rem_pio2+0x328>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	ec51 0b18 	vmov	r0, r1, d8
 80093da:	f7f7 f8b9 	bl	8000550 <__aeabi_dmul>
 80093de:	4604      	mov	r4, r0
 80093e0:	460d      	mov	r5, r1
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4640      	mov	r0, r8
 80093e8:	4649      	mov	r1, r9
 80093ea:	f7f6 fef9 	bl	80001e0 <__aeabi_dsub>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	4640      	mov	r0, r8
 80093f8:	4649      	mov	r1, r9
 80093fa:	f7f6 fef1 	bl	80001e0 <__aeabi_dsub>
 80093fe:	4622      	mov	r2, r4
 8009400:	462b      	mov	r3, r5
 8009402:	f7f6 feed 	bl	80001e0 <__aeabi_dsub>
 8009406:	a31c      	add	r3, pc, #112	; (adr r3, 8009478 <__ieee754_rem_pio2+0x330>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	4604      	mov	r4, r0
 800940e:	460d      	mov	r5, r1
 8009410:	ec51 0b18 	vmov	r0, r1, d8
 8009414:	f7f7 f89c 	bl	8000550 <__aeabi_dmul>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f6 fee0 	bl	80001e0 <__aeabi_dsub>
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	e760      	b.n	80092e8 <__ieee754_rem_pio2+0x1a0>
 8009426:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <__ieee754_rem_pio2+0x350>)
 8009428:	4598      	cmp	r8, r3
 800942a:	dd37      	ble.n	800949c <__ieee754_rem_pio2+0x354>
 800942c:	ee10 2a10 	vmov	r2, s0
 8009430:	462b      	mov	r3, r5
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f6 fed3 	bl	80001e0 <__aeabi_dsub>
 800943a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800943e:	e9ca 0100 	strd	r0, r1, [sl]
 8009442:	e695      	b.n	8009170 <__ieee754_rem_pio2+0x28>
 8009444:	f3af 8000 	nop.w
 8009448:	54400000 	.word	0x54400000
 800944c:	3ff921fb 	.word	0x3ff921fb
 8009450:	1a626331 	.word	0x1a626331
 8009454:	3dd0b461 	.word	0x3dd0b461
 8009458:	1a600000 	.word	0x1a600000
 800945c:	3dd0b461 	.word	0x3dd0b461
 8009460:	2e037073 	.word	0x2e037073
 8009464:	3ba3198a 	.word	0x3ba3198a
 8009468:	6dc9c883 	.word	0x6dc9c883
 800946c:	3fe45f30 	.word	0x3fe45f30
 8009470:	2e000000 	.word	0x2e000000
 8009474:	3ba3198a 	.word	0x3ba3198a
 8009478:	252049c1 	.word	0x252049c1
 800947c:	397b839a 	.word	0x397b839a
 8009480:	3fe921fb 	.word	0x3fe921fb
 8009484:	4002d97b 	.word	0x4002d97b
 8009488:	3ff921fb 	.word	0x3ff921fb
 800948c:	413921fb 	.word	0x413921fb
 8009490:	3fe00000 	.word	0x3fe00000
 8009494:	0801fa20 	.word	0x0801fa20
 8009498:	7fefffff 	.word	0x7fefffff
 800949c:	ea4f 5628 	mov.w	r6, r8, asr #20
 80094a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80094a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80094a8:	4620      	mov	r0, r4
 80094aa:	460d      	mov	r5, r1
 80094ac:	f7f7 fb00 	bl	8000ab0 <__aeabi_d2iz>
 80094b0:	f7f6 ffe4 	bl	800047c <__aeabi_i2d>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4620      	mov	r0, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094c0:	f7f6 fe8e 	bl	80001e0 <__aeabi_dsub>
 80094c4:	4b21      	ldr	r3, [pc, #132]	; (800954c <__ieee754_rem_pio2+0x404>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	f7f7 f842 	bl	8000550 <__aeabi_dmul>
 80094cc:	460d      	mov	r5, r1
 80094ce:	4604      	mov	r4, r0
 80094d0:	f7f7 faee 	bl	8000ab0 <__aeabi_d2iz>
 80094d4:	f7f6 ffd2 	bl	800047c <__aeabi_i2d>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094e4:	f7f6 fe7c 	bl	80001e0 <__aeabi_dsub>
 80094e8:	4b18      	ldr	r3, [pc, #96]	; (800954c <__ieee754_rem_pio2+0x404>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	f7f7 f830 	bl	8000550 <__aeabi_dmul>
 80094f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80094f8:	2703      	movs	r7, #3
 80094fa:	2400      	movs	r4, #0
 80094fc:	2500      	movs	r5, #0
 80094fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009502:	4622      	mov	r2, r4
 8009504:	462b      	mov	r3, r5
 8009506:	46b9      	mov	r9, r7
 8009508:	3f01      	subs	r7, #1
 800950a:	f7f7 fa89 	bl	8000a20 <__aeabi_dcmpeq>
 800950e:	2800      	cmp	r0, #0
 8009510:	d1f5      	bne.n	80094fe <__ieee754_rem_pio2+0x3b6>
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <__ieee754_rem_pio2+0x408>)
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	2302      	movs	r3, #2
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4632      	mov	r2, r6
 800951c:	464b      	mov	r3, r9
 800951e:	4651      	mov	r1, sl
 8009520:	a804      	add	r0, sp, #16
 8009522:	f000 f8d1 	bl	80096c8 <__kernel_rem_pio2>
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	4683      	mov	fp, r0
 800952c:	f6bf ae4c 	bge.w	80091c8 <__ieee754_rem_pio2+0x80>
 8009530:	e9da 2100 	ldrd	r2, r1, [sl]
 8009534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009538:	e9ca 2300 	strd	r2, r3, [sl]
 800953c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009544:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009548:	e73f      	b.n	80093ca <__ieee754_rem_pio2+0x282>
 800954a:	bf00      	nop
 800954c:	41700000 	.word	0x41700000
 8009550:	0801faa0 	.word	0x0801faa0

08009554 <fabs>:
 8009554:	ec51 0b10 	vmov	r0, r1, d0
 8009558:	ee10 2a10 	vmov	r2, s0
 800955c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009560:	ec43 2b10 	vmov	d0, r2, r3
 8009564:	4770      	bx	lr
	...

08009568 <scalbn>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	ec55 4b10 	vmov	r4, r5, d0
 800956e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009572:	4606      	mov	r6, r0
 8009574:	462b      	mov	r3, r5
 8009576:	b999      	cbnz	r1, 80095a0 <scalbn+0x38>
 8009578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800957c:	4323      	orrs	r3, r4
 800957e:	d03f      	beq.n	8009600 <scalbn+0x98>
 8009580:	4b35      	ldr	r3, [pc, #212]	; (8009658 <scalbn+0xf0>)
 8009582:	4629      	mov	r1, r5
 8009584:	ee10 0a10 	vmov	r0, s0
 8009588:	2200      	movs	r2, #0
 800958a:	f7f6 ffe1 	bl	8000550 <__aeabi_dmul>
 800958e:	4b33      	ldr	r3, [pc, #204]	; (800965c <scalbn+0xf4>)
 8009590:	429e      	cmp	r6, r3
 8009592:	4604      	mov	r4, r0
 8009594:	460d      	mov	r5, r1
 8009596:	da10      	bge.n	80095ba <scalbn+0x52>
 8009598:	a327      	add	r3, pc, #156	; (adr r3, 8009638 <scalbn+0xd0>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	e01f      	b.n	80095e0 <scalbn+0x78>
 80095a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80095a4:	4291      	cmp	r1, r2
 80095a6:	d10c      	bne.n	80095c2 <scalbn+0x5a>
 80095a8:	ee10 2a10 	vmov	r2, s0
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f6 fe18 	bl	80001e4 <__adddf3>
 80095b4:	4604      	mov	r4, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	e022      	b.n	8009600 <scalbn+0x98>
 80095ba:	460b      	mov	r3, r1
 80095bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80095c0:	3936      	subs	r1, #54	; 0x36
 80095c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80095c6:	4296      	cmp	r6, r2
 80095c8:	dd0d      	ble.n	80095e6 <scalbn+0x7e>
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	a11c      	add	r1, pc, #112	; (adr r1, 8009640 <scalbn+0xd8>)
 80095ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d2:	da02      	bge.n	80095da <scalbn+0x72>
 80095d4:	a11c      	add	r1, pc, #112	; (adr r1, 8009648 <scalbn+0xe0>)
 80095d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095da:	a319      	add	r3, pc, #100	; (adr r3, 8009640 <scalbn+0xd8>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f6 ffb6 	bl	8000550 <__aeabi_dmul>
 80095e4:	e7e6      	b.n	80095b4 <scalbn+0x4c>
 80095e6:	1872      	adds	r2, r6, r1
 80095e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80095ec:	428a      	cmp	r2, r1
 80095ee:	dcec      	bgt.n	80095ca <scalbn+0x62>
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	dd08      	ble.n	8009606 <scalbn+0x9e>
 80095f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009600:	ec45 4b10 	vmov	d0, r4, r5
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800960a:	da08      	bge.n	800961e <scalbn+0xb6>
 800960c:	2d00      	cmp	r5, #0
 800960e:	a10a      	add	r1, pc, #40	; (adr r1, 8009638 <scalbn+0xd0>)
 8009610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009614:	dac0      	bge.n	8009598 <scalbn+0x30>
 8009616:	a10e      	add	r1, pc, #56	; (adr r1, 8009650 <scalbn+0xe8>)
 8009618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961c:	e7bc      	b.n	8009598 <scalbn+0x30>
 800961e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009622:	3236      	adds	r2, #54	; 0x36
 8009624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009628:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800962c:	4620      	mov	r0, r4
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <scalbn+0xf8>)
 8009630:	2200      	movs	r2, #0
 8009632:	e7d5      	b.n	80095e0 <scalbn+0x78>
 8009634:	f3af 8000 	nop.w
 8009638:	c2f8f359 	.word	0xc2f8f359
 800963c:	01a56e1f 	.word	0x01a56e1f
 8009640:	8800759c 	.word	0x8800759c
 8009644:	7e37e43c 	.word	0x7e37e43c
 8009648:	8800759c 	.word	0x8800759c
 800964c:	fe37e43c 	.word	0xfe37e43c
 8009650:	c2f8f359 	.word	0xc2f8f359
 8009654:	81a56e1f 	.word	0x81a56e1f
 8009658:	43500000 	.word	0x43500000
 800965c:	ffff3cb0 	.word	0xffff3cb0
 8009660:	3c900000 	.word	0x3c900000

08009664 <with_errno>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	4604      	mov	r4, r0
 8009668:	460d      	mov	r5, r1
 800966a:	4616      	mov	r6, r2
 800966c:	f7fe f9f8 	bl	8007a60 <__errno>
 8009670:	4629      	mov	r1, r5
 8009672:	6006      	str	r6, [r0, #0]
 8009674:	4620      	mov	r0, r4
 8009676:	bd70      	pop	{r4, r5, r6, pc}

08009678 <xflow>:
 8009678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967a:	4614      	mov	r4, r2
 800967c:	461d      	mov	r5, r3
 800967e:	b108      	cbz	r0, 8009684 <xflow+0xc>
 8009680:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009684:	e9cd 2300 	strd	r2, r3, [sp]
 8009688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800968c:	4620      	mov	r0, r4
 800968e:	4629      	mov	r1, r5
 8009690:	f7f6 ff5e 	bl	8000550 <__aeabi_dmul>
 8009694:	2222      	movs	r2, #34	; 0x22
 8009696:	b003      	add	sp, #12
 8009698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800969c:	f7ff bfe2 	b.w	8009664 <with_errno>

080096a0 <__math_uflow>:
 80096a0:	b508      	push	{r3, lr}
 80096a2:	2200      	movs	r2, #0
 80096a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096a8:	f7ff ffe6 	bl	8009678 <xflow>
 80096ac:	ec41 0b10 	vmov	d0, r0, r1
 80096b0:	bd08      	pop	{r3, pc}

080096b2 <__math_oflow>:
 80096b2:	b508      	push	{r3, lr}
 80096b4:	2200      	movs	r2, #0
 80096b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80096ba:	f7ff ffdd 	bl	8009678 <xflow>
 80096be:	ec41 0b10 	vmov	d0, r0, r1
 80096c2:	bd08      	pop	{r3, pc}
 80096c4:	0000      	movs	r0, r0
	...

080096c8 <__kernel_rem_pio2>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	ed2d 8b02 	vpush	{d8}
 80096d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80096d4:	f112 0f14 	cmn.w	r2, #20
 80096d8:	9306      	str	r3, [sp, #24]
 80096da:	9104      	str	r1, [sp, #16]
 80096dc:	4bc2      	ldr	r3, [pc, #776]	; (80099e8 <__kernel_rem_pio2+0x320>)
 80096de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80096e0:	9009      	str	r0, [sp, #36]	; 0x24
 80096e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	9b06      	ldr	r3, [sp, #24]
 80096ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80096ee:	bfa8      	it	ge
 80096f0:	1ed4      	subge	r4, r2, #3
 80096f2:	9305      	str	r3, [sp, #20]
 80096f4:	bfb2      	itee	lt
 80096f6:	2400      	movlt	r4, #0
 80096f8:	2318      	movge	r3, #24
 80096fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80096fe:	f06f 0317 	mvn.w	r3, #23
 8009702:	fb04 3303 	mla	r3, r4, r3, r3
 8009706:	eb03 0a02 	add.w	sl, r3, r2
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	9a05      	ldr	r2, [sp, #20]
 800970e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80099d8 <__kernel_rem_pio2+0x310>
 8009712:	eb03 0802 	add.w	r8, r3, r2
 8009716:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009718:	1aa7      	subs	r7, r4, r2
 800971a:	ae20      	add	r6, sp, #128	; 0x80
 800971c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009720:	2500      	movs	r5, #0
 8009722:	4545      	cmp	r5, r8
 8009724:	dd13      	ble.n	800974e <__kernel_rem_pio2+0x86>
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	aa20      	add	r2, sp, #128	; 0x80
 800972a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800972e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	4598      	cmp	r8, r3
 800973a:	dc31      	bgt.n	80097a0 <__kernel_rem_pio2+0xd8>
 800973c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80099d8 <__kernel_rem_pio2+0x310>
 8009740:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009744:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009748:	462f      	mov	r7, r5
 800974a:	2600      	movs	r6, #0
 800974c:	e01b      	b.n	8009786 <__kernel_rem_pio2+0xbe>
 800974e:	42ef      	cmn	r7, r5
 8009750:	d407      	bmi.n	8009762 <__kernel_rem_pio2+0x9a>
 8009752:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009756:	f7f6 fe91 	bl	800047c <__aeabi_i2d>
 800975a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800975e:	3501      	adds	r5, #1
 8009760:	e7df      	b.n	8009722 <__kernel_rem_pio2+0x5a>
 8009762:	ec51 0b18 	vmov	r0, r1, d8
 8009766:	e7f8      	b.n	800975a <__kernel_rem_pio2+0x92>
 8009768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009770:	f7f6 feee 	bl	8000550 <__aeabi_dmul>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977c:	f7f6 fd32 	bl	80001e4 <__adddf3>
 8009780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009784:	3601      	adds	r6, #1
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	429e      	cmp	r6, r3
 800978a:	f1a7 0708 	sub.w	r7, r7, #8
 800978e:	ddeb      	ble.n	8009768 <__kernel_rem_pio2+0xa0>
 8009790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009794:	f108 0801 	add.w	r8, r8, #1
 8009798:	ecab 7b02 	vstmia	fp!, {d7}
 800979c:	3508      	adds	r5, #8
 800979e:	e7ca      	b.n	8009736 <__kernel_rem_pio2+0x6e>
 80097a0:	9b00      	ldr	r3, [sp, #0]
 80097a2:	aa0c      	add	r2, sp, #48	; 0x30
 80097a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097aa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80097ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80097b0:	9c00      	ldr	r4, [sp, #0]
 80097b2:	930a      	str	r3, [sp, #40]	; 0x28
 80097b4:	00e3      	lsls	r3, r4, #3
 80097b6:	9308      	str	r3, [sp, #32]
 80097b8:	ab98      	add	r3, sp, #608	; 0x260
 80097ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80097c2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80097c6:	ab70      	add	r3, sp, #448	; 0x1c0
 80097c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80097cc:	46c3      	mov	fp, r8
 80097ce:	46a1      	mov	r9, r4
 80097d0:	f1b9 0f00 	cmp.w	r9, #0
 80097d4:	f1a5 0508 	sub.w	r5, r5, #8
 80097d8:	dc77      	bgt.n	80098ca <__kernel_rem_pio2+0x202>
 80097da:	ec47 6b10 	vmov	d0, r6, r7
 80097de:	4650      	mov	r0, sl
 80097e0:	f7ff fec2 	bl	8009568 <scalbn>
 80097e4:	ec57 6b10 	vmov	r6, r7, d0
 80097e8:	2200      	movs	r2, #0
 80097ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80097ee:	ee10 0a10 	vmov	r0, s0
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7f6 feac 	bl	8000550 <__aeabi_dmul>
 80097f8:	ec41 0b10 	vmov	d0, r0, r1
 80097fc:	f000 fab4 	bl	8009d68 <floor>
 8009800:	4b7a      	ldr	r3, [pc, #488]	; (80099ec <__kernel_rem_pio2+0x324>)
 8009802:	ec51 0b10 	vmov	r0, r1, d0
 8009806:	2200      	movs	r2, #0
 8009808:	f7f6 fea2 	bl	8000550 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 fce4 	bl	80001e0 <__aeabi_dsub>
 8009818:	460f      	mov	r7, r1
 800981a:	4606      	mov	r6, r0
 800981c:	f7f7 f948 	bl	8000ab0 <__aeabi_d2iz>
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	f7f6 fe2b 	bl	800047c <__aeabi_i2d>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4630      	mov	r0, r6
 800982c:	4639      	mov	r1, r7
 800982e:	f7f6 fcd7 	bl	80001e0 <__aeabi_dsub>
 8009832:	f1ba 0f00 	cmp.w	sl, #0
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	dd6d      	ble.n	8009918 <__kernel_rem_pio2+0x250>
 800983c:	1e61      	subs	r1, r4, #1
 800983e:	ab0c      	add	r3, sp, #48	; 0x30
 8009840:	9d02      	ldr	r5, [sp, #8]
 8009842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009846:	f1ca 0018 	rsb	r0, sl, #24
 800984a:	fa43 f200 	asr.w	r2, r3, r0
 800984e:	4415      	add	r5, r2
 8009850:	4082      	lsls	r2, r0
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	aa0c      	add	r2, sp, #48	; 0x30
 8009856:	9502      	str	r5, [sp, #8]
 8009858:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800985c:	f1ca 0217 	rsb	r2, sl, #23
 8009860:	fa43 fb02 	asr.w	fp, r3, r2
 8009864:	f1bb 0f00 	cmp.w	fp, #0
 8009868:	dd65      	ble.n	8009936 <__kernel_rem_pio2+0x26e>
 800986a:	9b02      	ldr	r3, [sp, #8]
 800986c:	2200      	movs	r2, #0
 800986e:	3301      	adds	r3, #1
 8009870:	9302      	str	r3, [sp, #8]
 8009872:	4615      	mov	r5, r2
 8009874:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009878:	4294      	cmp	r4, r2
 800987a:	f300 809f 	bgt.w	80099bc <__kernel_rem_pio2+0x2f4>
 800987e:	f1ba 0f00 	cmp.w	sl, #0
 8009882:	dd07      	ble.n	8009894 <__kernel_rem_pio2+0x1cc>
 8009884:	f1ba 0f01 	cmp.w	sl, #1
 8009888:	f000 80c1 	beq.w	8009a0e <__kernel_rem_pio2+0x346>
 800988c:	f1ba 0f02 	cmp.w	sl, #2
 8009890:	f000 80c7 	beq.w	8009a22 <__kernel_rem_pio2+0x35a>
 8009894:	f1bb 0f02 	cmp.w	fp, #2
 8009898:	d14d      	bne.n	8009936 <__kernel_rem_pio2+0x26e>
 800989a:	4632      	mov	r2, r6
 800989c:	463b      	mov	r3, r7
 800989e:	4954      	ldr	r1, [pc, #336]	; (80099f0 <__kernel_rem_pio2+0x328>)
 80098a0:	2000      	movs	r0, #0
 80098a2:	f7f6 fc9d 	bl	80001e0 <__aeabi_dsub>
 80098a6:	4606      	mov	r6, r0
 80098a8:	460f      	mov	r7, r1
 80098aa:	2d00      	cmp	r5, #0
 80098ac:	d043      	beq.n	8009936 <__kernel_rem_pio2+0x26e>
 80098ae:	4650      	mov	r0, sl
 80098b0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80099e0 <__kernel_rem_pio2+0x318>
 80098b4:	f7ff fe58 	bl	8009568 <scalbn>
 80098b8:	4630      	mov	r0, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	ec53 2b10 	vmov	r2, r3, d0
 80098c0:	f7f6 fc8e 	bl	80001e0 <__aeabi_dsub>
 80098c4:	4606      	mov	r6, r0
 80098c6:	460f      	mov	r7, r1
 80098c8:	e035      	b.n	8009936 <__kernel_rem_pio2+0x26e>
 80098ca:	4b4a      	ldr	r3, [pc, #296]	; (80099f4 <__kernel_rem_pio2+0x32c>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	4630      	mov	r0, r6
 80098d0:	4639      	mov	r1, r7
 80098d2:	f7f6 fe3d 	bl	8000550 <__aeabi_dmul>
 80098d6:	f7f7 f8eb 	bl	8000ab0 <__aeabi_d2iz>
 80098da:	f7f6 fdcf 	bl	800047c <__aeabi_i2d>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	ec43 2b18 	vmov	d8, r2, r3
 80098e6:	4b44      	ldr	r3, [pc, #272]	; (80099f8 <__kernel_rem_pio2+0x330>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	f7f6 fe31 	bl	8000550 <__aeabi_dmul>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4630      	mov	r0, r6
 80098f4:	4639      	mov	r1, r7
 80098f6:	f7f6 fc73 	bl	80001e0 <__aeabi_dsub>
 80098fa:	f7f7 f8d9 	bl	8000ab0 <__aeabi_d2iz>
 80098fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009902:	f84b 0b04 	str.w	r0, [fp], #4
 8009906:	ec51 0b18 	vmov	r0, r1, d8
 800990a:	f7f6 fc6b 	bl	80001e4 <__adddf3>
 800990e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009912:	4606      	mov	r6, r0
 8009914:	460f      	mov	r7, r1
 8009916:	e75b      	b.n	80097d0 <__kernel_rem_pio2+0x108>
 8009918:	d106      	bne.n	8009928 <__kernel_rem_pio2+0x260>
 800991a:	1e63      	subs	r3, r4, #1
 800991c:	aa0c      	add	r2, sp, #48	; 0x30
 800991e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009922:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009926:	e79d      	b.n	8009864 <__kernel_rem_pio2+0x19c>
 8009928:	4b34      	ldr	r3, [pc, #208]	; (80099fc <__kernel_rem_pio2+0x334>)
 800992a:	2200      	movs	r2, #0
 800992c:	f7f7 f896 	bl	8000a5c <__aeabi_dcmpge>
 8009930:	2800      	cmp	r0, #0
 8009932:	d140      	bne.n	80099b6 <__kernel_rem_pio2+0x2ee>
 8009934:	4683      	mov	fp, r0
 8009936:	2200      	movs	r2, #0
 8009938:	2300      	movs	r3, #0
 800993a:	4630      	mov	r0, r6
 800993c:	4639      	mov	r1, r7
 800993e:	f7f7 f86f 	bl	8000a20 <__aeabi_dcmpeq>
 8009942:	2800      	cmp	r0, #0
 8009944:	f000 80c1 	beq.w	8009aca <__kernel_rem_pio2+0x402>
 8009948:	1e65      	subs	r5, r4, #1
 800994a:	462b      	mov	r3, r5
 800994c:	2200      	movs	r2, #0
 800994e:	9900      	ldr	r1, [sp, #0]
 8009950:	428b      	cmp	r3, r1
 8009952:	da6d      	bge.n	8009a30 <__kernel_rem_pio2+0x368>
 8009954:	2a00      	cmp	r2, #0
 8009956:	f000 808a 	beq.w	8009a6e <__kernel_rem_pio2+0x3a6>
 800995a:	ab0c      	add	r3, sp, #48	; 0x30
 800995c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009960:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 80ae 	beq.w	8009ac6 <__kernel_rem_pio2+0x3fe>
 800996a:	4650      	mov	r0, sl
 800996c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80099e0 <__kernel_rem_pio2+0x318>
 8009970:	f7ff fdfa 	bl	8009568 <scalbn>
 8009974:	1c6b      	adds	r3, r5, #1
 8009976:	00da      	lsls	r2, r3, #3
 8009978:	9205      	str	r2, [sp, #20]
 800997a:	ec57 6b10 	vmov	r6, r7, d0
 800997e:	aa70      	add	r2, sp, #448	; 0x1c0
 8009980:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80099f4 <__kernel_rem_pio2+0x32c>
 8009984:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009988:	462c      	mov	r4, r5
 800998a:	f04f 0800 	mov.w	r8, #0
 800998e:	2c00      	cmp	r4, #0
 8009990:	f280 80d4 	bge.w	8009b3c <__kernel_rem_pio2+0x474>
 8009994:	462c      	mov	r4, r5
 8009996:	2c00      	cmp	r4, #0
 8009998:	f2c0 8102 	blt.w	8009ba0 <__kernel_rem_pio2+0x4d8>
 800999c:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <__kernel_rem_pio2+0x338>)
 800999e:	461e      	mov	r6, r3
 80099a0:	ab70      	add	r3, sp, #448	; 0x1c0
 80099a2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80099a6:	1b2b      	subs	r3, r5, r4
 80099a8:	f04f 0900 	mov.w	r9, #0
 80099ac:	f04f 0a00 	mov.w	sl, #0
 80099b0:	2700      	movs	r7, #0
 80099b2:	9306      	str	r3, [sp, #24]
 80099b4:	e0e6      	b.n	8009b84 <__kernel_rem_pio2+0x4bc>
 80099b6:	f04f 0b02 	mov.w	fp, #2
 80099ba:	e756      	b.n	800986a <__kernel_rem_pio2+0x1a2>
 80099bc:	f8d8 3000 	ldr.w	r3, [r8]
 80099c0:	bb05      	cbnz	r5, 8009a04 <__kernel_rem_pio2+0x33c>
 80099c2:	b123      	cbz	r3, 80099ce <__kernel_rem_pio2+0x306>
 80099c4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80099c8:	f8c8 3000 	str.w	r3, [r8]
 80099cc:	2301      	movs	r3, #1
 80099ce:	3201      	adds	r2, #1
 80099d0:	f108 0804 	add.w	r8, r8, #4
 80099d4:	461d      	mov	r5, r3
 80099d6:	e74f      	b.n	8009878 <__kernel_rem_pio2+0x1b0>
	...
 80099e4:	3ff00000 	.word	0x3ff00000
 80099e8:	0801fbe8 	.word	0x0801fbe8
 80099ec:	40200000 	.word	0x40200000
 80099f0:	3ff00000 	.word	0x3ff00000
 80099f4:	3e700000 	.word	0x3e700000
 80099f8:	41700000 	.word	0x41700000
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	0801fba8 	.word	0x0801fba8
 8009a04:	1acb      	subs	r3, r1, r3
 8009a06:	f8c8 3000 	str.w	r3, [r8]
 8009a0a:	462b      	mov	r3, r5
 8009a0c:	e7df      	b.n	80099ce <__kernel_rem_pio2+0x306>
 8009a0e:	1e62      	subs	r2, r4, #1
 8009a10:	ab0c      	add	r3, sp, #48	; 0x30
 8009a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a1a:	a90c      	add	r1, sp, #48	; 0x30
 8009a1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a20:	e738      	b.n	8009894 <__kernel_rem_pio2+0x1cc>
 8009a22:	1e62      	subs	r2, r4, #1
 8009a24:	ab0c      	add	r3, sp, #48	; 0x30
 8009a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a2e:	e7f4      	b.n	8009a1a <__kernel_rem_pio2+0x352>
 8009a30:	a90c      	add	r1, sp, #48	; 0x30
 8009a32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	e788      	b.n	800994e <__kernel_rem_pio2+0x286>
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009a42:	2900      	cmp	r1, #0
 8009a44:	d0fa      	beq.n	8009a3c <__kernel_rem_pio2+0x374>
 8009a46:	9a08      	ldr	r2, [sp, #32]
 8009a48:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8009a4c:	446a      	add	r2, sp
 8009a4e:	3a98      	subs	r2, #152	; 0x98
 8009a50:	9208      	str	r2, [sp, #32]
 8009a52:	9a06      	ldr	r2, [sp, #24]
 8009a54:	a920      	add	r1, sp, #128	; 0x80
 8009a56:	18a2      	adds	r2, r4, r2
 8009a58:	18e3      	adds	r3, r4, r3
 8009a5a:	f104 0801 	add.w	r8, r4, #1
 8009a5e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	9b02      	ldr	r3, [sp, #8]
 8009a66:	4543      	cmp	r3, r8
 8009a68:	da04      	bge.n	8009a74 <__kernel_rem_pio2+0x3ac>
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	e6a2      	b.n	80097b4 <__kernel_rem_pio2+0xec>
 8009a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7e4      	b.n	8009a3e <__kernel_rem_pio2+0x376>
 8009a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a76:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a7a:	f7f6 fcff 	bl	800047c <__aeabi_i2d>
 8009a7e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a84:	46ab      	mov	fp, r5
 8009a86:	461c      	mov	r4, r3
 8009a88:	f04f 0900 	mov.w	r9, #0
 8009a8c:	2600      	movs	r6, #0
 8009a8e:	2700      	movs	r7, #0
 8009a90:	9b05      	ldr	r3, [sp, #20]
 8009a92:	4599      	cmp	r9, r3
 8009a94:	dd06      	ble.n	8009aa4 <__kernel_rem_pio2+0x3dc>
 8009a96:	9b08      	ldr	r3, [sp, #32]
 8009a98:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009a9c:	f108 0801 	add.w	r8, r8, #1
 8009aa0:	9308      	str	r3, [sp, #32]
 8009aa2:	e7df      	b.n	8009a64 <__kernel_rem_pio2+0x39c>
 8009aa4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009aa8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009aac:	f7f6 fd50 	bl	8000550 <__aeabi_dmul>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	f7f6 fb94 	bl	80001e4 <__adddf3>
 8009abc:	f109 0901 	add.w	r9, r9, #1
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	e7e4      	b.n	8009a90 <__kernel_rem_pio2+0x3c8>
 8009ac6:	3d01      	subs	r5, #1
 8009ac8:	e747      	b.n	800995a <__kernel_rem_pio2+0x292>
 8009aca:	ec47 6b10 	vmov	d0, r6, r7
 8009ace:	f1ca 0000 	rsb	r0, sl, #0
 8009ad2:	f7ff fd49 	bl	8009568 <scalbn>
 8009ad6:	ec57 6b10 	vmov	r6, r7, d0
 8009ada:	4ba0      	ldr	r3, [pc, #640]	; (8009d5c <__kernel_rem_pio2+0x694>)
 8009adc:	ee10 0a10 	vmov	r0, s0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f7f6 ffba 	bl	8000a5c <__aeabi_dcmpge>
 8009ae8:	b1f8      	cbz	r0, 8009b2a <__kernel_rem_pio2+0x462>
 8009aea:	4b9d      	ldr	r3, [pc, #628]	; (8009d60 <__kernel_rem_pio2+0x698>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f6 fd2d 	bl	8000550 <__aeabi_dmul>
 8009af6:	f7f6 ffdb 	bl	8000ab0 <__aeabi_d2iz>
 8009afa:	4680      	mov	r8, r0
 8009afc:	f7f6 fcbe 	bl	800047c <__aeabi_i2d>
 8009b00:	4b96      	ldr	r3, [pc, #600]	; (8009d5c <__kernel_rem_pio2+0x694>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fd24 	bl	8000550 <__aeabi_dmul>
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7f6 fb66 	bl	80001e0 <__aeabi_dsub>
 8009b14:	f7f6 ffcc 	bl	8000ab0 <__aeabi_d2iz>
 8009b18:	1c65      	adds	r5, r4, #1
 8009b1a:	ab0c      	add	r3, sp, #48	; 0x30
 8009b1c:	f10a 0a18 	add.w	sl, sl, #24
 8009b20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b24:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009b28:	e71f      	b.n	800996a <__kernel_rem_pio2+0x2a2>
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 ffbf 	bl	8000ab0 <__aeabi_d2iz>
 8009b32:	ab0c      	add	r3, sp, #48	; 0x30
 8009b34:	4625      	mov	r5, r4
 8009b36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b3a:	e716      	b.n	800996a <__kernel_rem_pio2+0x2a2>
 8009b3c:	ab0c      	add	r3, sp, #48	; 0x30
 8009b3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009b42:	f7f6 fc9b 	bl	800047c <__aeabi_i2d>
 8009b46:	4632      	mov	r2, r6
 8009b48:	463b      	mov	r3, r7
 8009b4a:	f7f6 fd01 	bl	8000550 <__aeabi_dmul>
 8009b4e:	4642      	mov	r2, r8
 8009b50:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009b54:	464b      	mov	r3, r9
 8009b56:	4630      	mov	r0, r6
 8009b58:	4639      	mov	r1, r7
 8009b5a:	f7f6 fcf9 	bl	8000550 <__aeabi_dmul>
 8009b5e:	3c01      	subs	r4, #1
 8009b60:	4606      	mov	r6, r0
 8009b62:	460f      	mov	r7, r1
 8009b64:	e713      	b.n	800998e <__kernel_rem_pio2+0x2c6>
 8009b66:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009b6a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009b6e:	f7f6 fcef 	bl	8000550 <__aeabi_dmul>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4648      	mov	r0, r9
 8009b78:	4651      	mov	r1, sl
 8009b7a:	f7f6 fb33 	bl	80001e4 <__adddf3>
 8009b7e:	3701      	adds	r7, #1
 8009b80:	4681      	mov	r9, r0
 8009b82:	468a      	mov	sl, r1
 8009b84:	9b00      	ldr	r3, [sp, #0]
 8009b86:	429f      	cmp	r7, r3
 8009b88:	dc02      	bgt.n	8009b90 <__kernel_rem_pio2+0x4c8>
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	429f      	cmp	r7, r3
 8009b8e:	ddea      	ble.n	8009b66 <__kernel_rem_pio2+0x49e>
 8009b90:	9a06      	ldr	r2, [sp, #24]
 8009b92:	ab48      	add	r3, sp, #288	; 0x120
 8009b94:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009b98:	e9c6 9a00 	strd	r9, sl, [r6]
 8009b9c:	3c01      	subs	r4, #1
 8009b9e:	e6fa      	b.n	8009996 <__kernel_rem_pio2+0x2ce>
 8009ba0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	dc0b      	bgt.n	8009bbe <__kernel_rem_pio2+0x4f6>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	dc39      	bgt.n	8009c1e <__kernel_rem_pio2+0x556>
 8009baa:	d05d      	beq.n	8009c68 <__kernel_rem_pio2+0x5a0>
 8009bac:	9b02      	ldr	r3, [sp, #8]
 8009bae:	f003 0007 	and.w	r0, r3, #7
 8009bb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009bb6:	ecbd 8b02 	vpop	{d8}
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d1f3      	bne.n	8009bac <__kernel_rem_pio2+0x4e4>
 8009bc4:	9b05      	ldr	r3, [sp, #20]
 8009bc6:	9500      	str	r5, [sp, #0]
 8009bc8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009bcc:	eb0d 0403 	add.w	r4, sp, r3
 8009bd0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009bd4:	46a2      	mov	sl, r4
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f1aa 0a08 	sub.w	sl, sl, #8
 8009bde:	dc69      	bgt.n	8009cb4 <__kernel_rem_pio2+0x5ec>
 8009be0:	46aa      	mov	sl, r5
 8009be2:	f1ba 0f01 	cmp.w	sl, #1
 8009be6:	f1a4 0408 	sub.w	r4, r4, #8
 8009bea:	f300 8083 	bgt.w	8009cf4 <__kernel_rem_pio2+0x62c>
 8009bee:	9c05      	ldr	r4, [sp, #20]
 8009bf0:	ab48      	add	r3, sp, #288	; 0x120
 8009bf2:	441c      	add	r4, r3
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	2d01      	cmp	r5, #1
 8009bfa:	f300 809a 	bgt.w	8009d32 <__kernel_rem_pio2+0x66a>
 8009bfe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009c02:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009c06:	f1bb 0f00 	cmp.w	fp, #0
 8009c0a:	f040 8098 	bne.w	8009d3e <__kernel_rem_pio2+0x676>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	e9c3 7800 	strd	r7, r8, [r3]
 8009c14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009c18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c1c:	e7c6      	b.n	8009bac <__kernel_rem_pio2+0x4e4>
 8009c1e:	9e05      	ldr	r6, [sp, #20]
 8009c20:	ab48      	add	r3, sp, #288	; 0x120
 8009c22:	441e      	add	r6, r3
 8009c24:	462c      	mov	r4, r5
 8009c26:	2000      	movs	r0, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	2c00      	cmp	r4, #0
 8009c2c:	da33      	bge.n	8009c96 <__kernel_rem_pio2+0x5ce>
 8009c2e:	f1bb 0f00 	cmp.w	fp, #0
 8009c32:	d036      	beq.n	8009ca2 <__kernel_rem_pio2+0x5da>
 8009c34:	4602      	mov	r2, r0
 8009c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c3a:	9c04      	ldr	r4, [sp, #16]
 8009c3c:	e9c4 2300 	strd	r2, r3, [r4]
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009c48:	f7f6 faca 	bl	80001e0 <__aeabi_dsub>
 8009c4c:	ae4a      	add	r6, sp, #296	; 0x128
 8009c4e:	2401      	movs	r4, #1
 8009c50:	42a5      	cmp	r5, r4
 8009c52:	da29      	bge.n	8009ca8 <__kernel_rem_pio2+0x5e0>
 8009c54:	f1bb 0f00 	cmp.w	fp, #0
 8009c58:	d002      	beq.n	8009c60 <__kernel_rem_pio2+0x598>
 8009c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c5e:	4619      	mov	r1, r3
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009c66:	e7a1      	b.n	8009bac <__kernel_rem_pio2+0x4e4>
 8009c68:	9c05      	ldr	r4, [sp, #20]
 8009c6a:	ab48      	add	r3, sp, #288	; 0x120
 8009c6c:	441c      	add	r4, r3
 8009c6e:	2000      	movs	r0, #0
 8009c70:	2100      	movs	r1, #0
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	da09      	bge.n	8009c8a <__kernel_rem_pio2+0x5c2>
 8009c76:	f1bb 0f00 	cmp.w	fp, #0
 8009c7a:	d002      	beq.n	8009c82 <__kernel_rem_pio2+0x5ba>
 8009c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c80:	4619      	mov	r1, r3
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	e9c3 0100 	strd	r0, r1, [r3]
 8009c88:	e790      	b.n	8009bac <__kernel_rem_pio2+0x4e4>
 8009c8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c8e:	f7f6 faa9 	bl	80001e4 <__adddf3>
 8009c92:	3d01      	subs	r5, #1
 8009c94:	e7ed      	b.n	8009c72 <__kernel_rem_pio2+0x5aa>
 8009c96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009c9a:	f7f6 faa3 	bl	80001e4 <__adddf3>
 8009c9e:	3c01      	subs	r4, #1
 8009ca0:	e7c3      	b.n	8009c2a <__kernel_rem_pio2+0x562>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	e7c8      	b.n	8009c3a <__kernel_rem_pio2+0x572>
 8009ca8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009cac:	f7f6 fa9a 	bl	80001e4 <__adddf3>
 8009cb0:	3401      	adds	r4, #1
 8009cb2:	e7cd      	b.n	8009c50 <__kernel_rem_pio2+0x588>
 8009cb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8009cb8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	4649      	mov	r1, r9
 8009cca:	f7f6 fa8b 	bl	80001e4 <__adddf3>
 8009cce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fa81 	bl	80001e0 <__aeabi_dsub>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fa7f 	bl	80001e4 <__adddf3>
 8009ce6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009cea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009cee:	ed8a 7b00 	vstr	d7, [sl]
 8009cf2:	e770      	b.n	8009bd6 <__kernel_rem_pio2+0x50e>
 8009cf4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009cf8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4632      	mov	r2, r6
 8009d00:	463b      	mov	r3, r7
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 fa6e 	bl	80001e4 <__adddf3>
 8009d08:	e9cd 0100 	strd	r0, r1, [sp]
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4640      	mov	r0, r8
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 fa64 	bl	80001e0 <__aeabi_dsub>
 8009d18:	4632      	mov	r2, r6
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	f7f6 fa62 	bl	80001e4 <__adddf3>
 8009d20:	ed9d 7b00 	vldr	d7, [sp]
 8009d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d28:	ed84 7b00 	vstr	d7, [r4]
 8009d2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d30:	e757      	b.n	8009be2 <__kernel_rem_pio2+0x51a>
 8009d32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d36:	f7f6 fa55 	bl	80001e4 <__adddf3>
 8009d3a:	3d01      	subs	r5, #1
 8009d3c:	e75c      	b.n	8009bf8 <__kernel_rem_pio2+0x530>
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	9a04      	ldr	r2, [sp, #16]
 8009d42:	601f      	str	r7, [r3, #0]
 8009d44:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009d48:	605c      	str	r4, [r3, #4]
 8009d4a:	609d      	str	r5, [r3, #8]
 8009d4c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d50:	60d3      	str	r3, [r2, #12]
 8009d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d56:	6110      	str	r0, [r2, #16]
 8009d58:	6153      	str	r3, [r2, #20]
 8009d5a:	e727      	b.n	8009bac <__kernel_rem_pio2+0x4e4>
 8009d5c:	41700000 	.word	0x41700000
 8009d60:	3e700000 	.word	0x3e700000
 8009d64:	00000000 	.word	0x00000000

08009d68 <floor>:
 8009d68:	ec51 0b10 	vmov	r0, r1, d0
 8009d6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009d78:	2e13      	cmp	r6, #19
 8009d7a:	ee10 5a10 	vmov	r5, s0
 8009d7e:	ee10 8a10 	vmov	r8, s0
 8009d82:	460c      	mov	r4, r1
 8009d84:	dc31      	bgt.n	8009dea <floor+0x82>
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	da14      	bge.n	8009db4 <floor+0x4c>
 8009d8a:	a333      	add	r3, pc, #204	; (adr r3, 8009e58 <floor+0xf0>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f7f6 fa28 	bl	80001e4 <__adddf3>
 8009d94:	2200      	movs	r2, #0
 8009d96:	2300      	movs	r3, #0
 8009d98:	f7f6 fe6a 	bl	8000a70 <__aeabi_dcmpgt>
 8009d9c:	b138      	cbz	r0, 8009dae <floor+0x46>
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	da53      	bge.n	8009e4a <floor+0xe2>
 8009da2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009da6:	4325      	orrs	r5, r4
 8009da8:	d052      	beq.n	8009e50 <floor+0xe8>
 8009daa:	4c2d      	ldr	r4, [pc, #180]	; (8009e60 <floor+0xf8>)
 8009dac:	2500      	movs	r5, #0
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	e024      	b.n	8009dfe <floor+0x96>
 8009db4:	4f2b      	ldr	r7, [pc, #172]	; (8009e64 <floor+0xfc>)
 8009db6:	4137      	asrs	r7, r6
 8009db8:	ea01 0307 	and.w	r3, r1, r7
 8009dbc:	4303      	orrs	r3, r0
 8009dbe:	d01e      	beq.n	8009dfe <floor+0x96>
 8009dc0:	a325      	add	r3, pc, #148	; (adr r3, 8009e58 <floor+0xf0>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fa0d 	bl	80001e4 <__adddf3>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f7f6 fe4f 	bl	8000a70 <__aeabi_dcmpgt>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d0eb      	beq.n	8009dae <floor+0x46>
 8009dd6:	2c00      	cmp	r4, #0
 8009dd8:	bfbe      	ittt	lt
 8009dda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009dde:	4133      	asrlt	r3, r6
 8009de0:	18e4      	addlt	r4, r4, r3
 8009de2:	ea24 0407 	bic.w	r4, r4, r7
 8009de6:	2500      	movs	r5, #0
 8009de8:	e7e1      	b.n	8009dae <floor+0x46>
 8009dea:	2e33      	cmp	r6, #51	; 0x33
 8009dec:	dd0b      	ble.n	8009e06 <floor+0x9e>
 8009dee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009df2:	d104      	bne.n	8009dfe <floor+0x96>
 8009df4:	ee10 2a10 	vmov	r2, s0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	f7f6 f9f3 	bl	80001e4 <__adddf3>
 8009dfe:	ec41 0b10 	vmov	d0, r0, r1
 8009e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e06:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009e0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e0e:	40df      	lsrs	r7, r3
 8009e10:	4238      	tst	r0, r7
 8009e12:	d0f4      	beq.n	8009dfe <floor+0x96>
 8009e14:	a310      	add	r3, pc, #64	; (adr r3, 8009e58 <floor+0xf0>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f7f6 f9e3 	bl	80001e4 <__adddf3>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2300      	movs	r3, #0
 8009e22:	f7f6 fe25 	bl	8000a70 <__aeabi_dcmpgt>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0c1      	beq.n	8009dae <floor+0x46>
 8009e2a:	2c00      	cmp	r4, #0
 8009e2c:	da0a      	bge.n	8009e44 <floor+0xdc>
 8009e2e:	2e14      	cmp	r6, #20
 8009e30:	d101      	bne.n	8009e36 <floor+0xce>
 8009e32:	3401      	adds	r4, #1
 8009e34:	e006      	b.n	8009e44 <floor+0xdc>
 8009e36:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	40b3      	lsls	r3, r6
 8009e3e:	441d      	add	r5, r3
 8009e40:	45a8      	cmp	r8, r5
 8009e42:	d8f6      	bhi.n	8009e32 <floor+0xca>
 8009e44:	ea25 0507 	bic.w	r5, r5, r7
 8009e48:	e7b1      	b.n	8009dae <floor+0x46>
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	462c      	mov	r4, r5
 8009e4e:	e7ae      	b.n	8009dae <floor+0x46>
 8009e50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e54:	e7ab      	b.n	8009dae <floor+0x46>
 8009e56:	bf00      	nop
 8009e58:	8800759c 	.word	0x8800759c
 8009e5c:	7e37e43c 	.word	0x7e37e43c
 8009e60:	bff00000 	.word	0xbff00000
 8009e64:	000fffff 	.word	0x000fffff

08009e68 <_init>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	bf00      	nop
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr

08009e74 <_fini>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	bf00      	nop
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr
