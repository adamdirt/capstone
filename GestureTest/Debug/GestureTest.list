
GestureTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea8  08002ea8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002eb0  08002eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ec4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da1c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed8  00000000  00000000  0002da93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ac  00000000  00000000  00030488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180b9  00000000  00000000  00030d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f21b  00000000  00000000  00048ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099385  00000000  00000000  00058008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002780  00000000  00000000  000f1390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f3b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002e08 	.word	0x08002e08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002e08 	.word	0x08002e08

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fade 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f810 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8e4 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f894 	bl	8000758 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000630:	f000 f852 	bl	80006d8 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA,LED_GREEN_Pin);
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2120      	movs	r1, #32
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fdaf 	bl	800119e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f000 fb53 	bl	8000cec <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,LED_GREEN_Pin);
 8000646:	e7f5      	b.n	8000634 <main+0x18>

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b093      	sub	sp, #76	; 0x4c
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	2410      	movs	r4, #16
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2338      	movs	r3, #56	; 0x38
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f002 fba9 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	003b      	movs	r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	2310      	movs	r3, #16
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f002 fba2 	bl	8002db0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fedd 	bl	8001430 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2240      	movs	r2, #64	; 0x40
 800068e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	193b      	adds	r3, r7, r4
 8000698:	0018      	movs	r0, r3
 800069a:	f000 ff15 	bl	80014c8 <HAL_RCC_OscConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a2:	f000 f96b 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	003b      	movs	r3, r7
 80006a8:	2207      	movs	r2, #7
 80006aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006be:	003b      	movs	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fa1a 	bl	8001afc <HAL_RCC_ClockConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006cc:	f000 f956 	bl	800097c <Error_Handler>
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b013      	add	sp, #76	; 0x4c
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x74>)
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fd5d 	bl	80011d4 <HAL_I2C_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 f92d 	bl	800097c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x74>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fdea 	bl	8001300 <HAL_I2CEx_ConfigAnalogFilter>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 f924 	bl	800097c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_I2C1_Init+0x74>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fe2d 	bl	8001398 <HAL_I2CEx_ConfigDigitalFilter>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f91b 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	40005400 	.word	0x40005400
 8000754:	0010061a 	.word	0x0010061a

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <MX_USART2_UART_Init+0x98>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000764:	22e1      	movs	r2, #225	; 0xe1
 8000766:	0252      	lsls	r2, r2, #9
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USART2_UART_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fd0c 	bl	80021c0 <HAL_UART_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f8e6 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 fa1b 	bl	8002bf0 <HAL_UARTEx_SetTxFifoThreshold>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007be:	f000 f8dd 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fa52 	bl	8002c70 <HAL_UARTEx_SetRxFifoThreshold>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f8d4 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x94>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 f9d0 	bl	8002b7c <HAL_UARTEx_DisableFifoMode>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f8cc 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	2000007c 	.word	0x2000007c
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	2414      	movs	r4, #20
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	0018      	movs	r0, r3
 8000800:	2314      	movs	r3, #20
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f002 fad3 	bl	8002db0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b53      	ldr	r3, [pc, #332]	; (8000958 <MX_GPIO_Init+0x164>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b52      	ldr	r3, [pc, #328]	; (8000958 <MX_GPIO_Init+0x164>)
 8000810:	2104      	movs	r1, #4
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b50      	ldr	r3, [pc, #320]	; (8000958 <MX_GPIO_Init+0x164>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2204      	movs	r2, #4
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b4d      	ldr	r3, [pc, #308]	; (8000958 <MX_GPIO_Init+0x164>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <MX_GPIO_Init+0x164>)
 8000828:	2120      	movs	r1, #32
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4b4a      	ldr	r3, [pc, #296]	; (8000958 <MX_GPIO_Init+0x164>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2220      	movs	r2, #32
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b47      	ldr	r3, [pc, #284]	; (8000958 <MX_GPIO_Init+0x164>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083e:	4b46      	ldr	r3, [pc, #280]	; (8000958 <MX_GPIO_Init+0x164>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <MX_GPIO_Init+0x164>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <MX_GPIO_Init+0x164>)
 8000854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000856:	4b40      	ldr	r3, [pc, #256]	; (8000958 <MX_GPIO_Init+0x164>)
 8000858:	2102      	movs	r1, #2
 800085a:	430a      	orrs	r2, r1
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <MX_GPIO_Init+0x164>)
 8000860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000862:	2202      	movs	r2, #2
 8000864:	4013      	ands	r3, r2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <MX_GPIO_Init+0x164>)
 800086c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086e:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <MX_GPIO_Init+0x164>)
 8000870:	2108      	movs	r1, #8
 8000872:	430a      	orrs	r2, r1
 8000874:	635a      	str	r2, [r3, #52]	; 0x34
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <MX_GPIO_Init+0x164>)
 8000878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087a:	2208      	movs	r2, #8
 800087c:	4013      	ands	r3, r2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fc6a 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1
 8000890:	193b      	adds	r3, r7, r4
 8000892:	4a32      	ldr	r2, [pc, #200]	; (800095c <MX_GPIO_Init+0x168>)
 8000894:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2203      	movs	r2, #3
 800089a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	4a2e      	ldr	r2, [pc, #184]	; (8000960 <MX_GPIO_Init+0x16c>)
 80008a6:	0019      	movs	r1, r3
 80008a8:	0010      	movs	r0, r2
 80008aa:	f000 faf7 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2206      	movs	r2, #6
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2203      	movs	r2, #3
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	4a28      	ldr	r2, [pc, #160]	; (8000964 <MX_GPIO_Init+0x170>)
 80008c4:	0019      	movs	r1, r3
 80008c6:	0010      	movs	r0, r2
 80008c8:	f000 fae8 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	4a26      	ldr	r2, [pc, #152]	; (8000968 <MX_GPIO_Init+0x174>)
 80008d0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2203      	movs	r2, #3
 80008d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	193a      	adds	r2, r7, r4
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fad8 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2220      	movs	r2, #32
 80008f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2201      	movs	r2, #1
 80008f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2202      	movs	r2, #2
 8000902:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000904:	193a      	adds	r2, r7, r4
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fac5 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000912:	193b      	adds	r3, r7, r4
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_GPIO_Init+0x178>)
 8000916:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2203      	movs	r2, #3
 800091c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	193b      	adds	r3, r7, r4
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_GPIO_Init+0x17c>)
 8000928:	0019      	movs	r1, r3
 800092a:	0010      	movs	r0, r2
 800092c:	f000 fab6 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 8000930:	0021      	movs	r1, r4
 8000932:	187b      	adds	r3, r7, r1
 8000934:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <MX_GPIO_Init+0x180>)
 8000936:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2203      	movs	r2, #3
 800093c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	187b      	adds	r3, r7, r1
 8000946:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <MX_GPIO_Init+0x184>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f000 faa6 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b00b      	add	sp, #44	; 0x2c
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	00001fff 	.word	0x00001fff
 8000960:	50000800 	.word	0x50000800
 8000964:	50001400 	.word	0x50001400
 8000968:	00009fd3 	.word	0x00009fd3
 800096c:	0000fcff 	.word	0x0000fcff
 8000970:	50000400 	.word	0x50000400
 8000974:	0000037f 	.word	0x0000037f
 8000978:	50000c00 	.word	0x50000c00

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0549      	lsls	r1, r1, #21
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_MspInit+0x44>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	055b      	lsls	r3, r3, #21
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b097      	sub	sp, #92	; 0x5c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2344      	movs	r3, #68	; 0x44
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f002 f9e4 	bl	8002db0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	2410      	movs	r4, #16
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2334      	movs	r3, #52	; 0x34
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f002 f9dc 	bl	8002db0 <memset>
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <HAL_I2C_MspInit+0xb8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d13e      	bne.n	8000a80 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2220      	movs	r2, #32
 8000a06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fa1d 	bl	8001e50 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a1a:	f7ff ffaf 	bl	800097c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_I2C_MspInit+0xbc>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_I2C_MspInit+0xbc>)
 8000a24:	2102      	movs	r1, #2
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_I2C_MspInit+0xbc>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a36:	2144      	movs	r1, #68	; 0x44
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	22c0      	movs	r2, #192	; 0xc0
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2212      	movs	r2, #18
 8000a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2206      	movs	r2, #6
 8000a56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_I2C_MspInit+0xc0>)
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0010      	movs	r0, r2
 8000a60:	f000 fa1c 	bl	8000e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_I2C_MspInit+0xbc>)
 8000a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_I2C_MspInit+0xbc>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0389      	lsls	r1, r1, #14
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_I2C_MspInit+0xbc>)
 8000a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	039b      	lsls	r3, r3, #14
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b017      	add	sp, #92	; 0x5c
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	50000400 	.word	0x50000400

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b097      	sub	sp, #92	; 0x5c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	2344      	movs	r3, #68	; 0x44
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	2314      	movs	r3, #20
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f002 f982 	bl	8002db0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	2410      	movs	r4, #16
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2334      	movs	r3, #52	; 0x34
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f002 f97a 	bl	8002db0 <memset>
  if(huart->Instance==USART2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d13e      	bne.n	8000b44 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2202      	movs	r2, #2
 8000aca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 f9bb 	bl	8001e50 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ff4d 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	0289      	lsls	r1, r1, #10
 8000aec:	430a      	orrs	r2, r1
 8000aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	029b      	lsls	r3, r3, #10
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b16:	2144      	movs	r1, #68	; 0x44
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2201      	movs	r2, #1
 8000b28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	187a      	adds	r2, r7, r1
 8000b38:	23a0      	movs	r3, #160	; 0xa0
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 f9ac 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b017      	add	sp, #92	; 0x5c
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f89c 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f7ff fff7 	bl	8000b82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bba:	f002 f901 	bl	8002dc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bbe:	f7ff fd2d 	bl	800061c <main>

08000bc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	20000114 	.word	0x20000114

08000bdc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_COMP_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x3c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Init+0x3c>)
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	0049      	lsls	r1, r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f810 	bl	8000c20 <HAL_InitTick>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e001      	b.n	8000c10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff febc 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_InitTick+0x88>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d02b      	beq.n	8000c90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_InitTick+0x8c>)
 8000c3a:	681c      	ldr	r4, [r3, #0]
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_InitTick+0x88>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	0019      	movs	r1, r3
 8000c42:	23fa      	movs	r3, #250	; 0xfa
 8000c44:	0098      	lsls	r0, r3, #2
 8000c46:	f7ff fa5d 	bl	8000104 <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0020      	movs	r0, r4
 8000c50:	f7ff fa58 	bl	8000104 <__udivsi3>
 8000c54:	0003      	movs	r3, r0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f913 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d112      	bne.n	8000c86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d80a      	bhi.n	8000c7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f8f2 	bl	8000e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_InitTick+0x90>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e00d      	b.n	8000c98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e008      	b.n	8000c98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c86:	230f      	movs	r3, #15
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e003      	b.n	8000c98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b005      	add	sp, #20
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	18d2      	adds	r2, r2, r3
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000110 	.word	0x20000110

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <HAL_GetTick+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000110 	.word	0x20000110

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff fff0 	bl	8000cd8 <HAL_GetTick>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	189b      	adds	r3, r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	f7ff ffe0 	bl	8000cd8 <HAL_GetTick>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	20000008 	.word	0x20000008

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b7f      	cmp	r3, #127	; 0x7f
 8000d48:	d828      	bhi.n	8000d9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	33c0      	adds	r3, #192	; 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	589b      	ldr	r3, [r3, r2]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	481f      	ldr	r0, [pc, #124]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	33c0      	adds	r3, #192	; 0xc0
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9a:	e031      	b.n	8000e00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0019      	movs	r1, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	400b      	ands	r3, r1
 8000da8:	3b08      	subs	r3, #8
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3306      	adds	r3, #6
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	18d3      	adds	r3, r2, r3
 8000db2:	3304      	adds	r3, #4
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	0011      	movs	r1, r2
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	401a      	ands	r2, r3
 8000dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2303      	movs	r3, #3
 8000dde:	4003      	ands	r3, r0
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	001c      	movs	r4, r3
 8000dec:	230f      	movs	r3, #15
 8000dee:	4023      	ands	r3, r4
 8000df0:	3b08      	subs	r3, #8
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	430a      	orrs	r2, r1
 8000df6:	3306      	adds	r3, #6
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	18c3      	adds	r3, r0, r3
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	045b      	lsls	r3, r3, #17
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d301      	bcc.n	8000e28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e24:	2301      	movs	r3, #1
 8000e26:	e010      	b.n	8000e4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <SysTick_Config+0x44>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	3a01      	subs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e30:	2301      	movs	r3, #1
 8000e32:	425b      	negs	r3, r3
 8000e34:	2103      	movs	r1, #3
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff7c 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x44>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x44>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	210f      	movs	r1, #15
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffbf 	bl	8000e10 <SysTick_Config>
 8000e92:	0003      	movs	r3, r0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e147      	b.n	800113c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x28>
 8000ec2:	e138      	b.n	8001136 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	2201      	movs	r2, #1
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2207      	movs	r2, #7
 8000f98:	4013      	ands	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	6939      	ldr	r1, [r7, #16]
 8000fcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	401a      	ands	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	029b      	lsls	r3, r3, #10
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_GPIO_Init+0x174>
 800100e:	e092      	b.n	8001136 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3318      	adds	r3, #24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	589b      	ldr	r3, [r3, r2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	220f      	movs	r2, #15
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	23a0      	movs	r3, #160	; 0xa0
 8001038:	05db      	lsls	r3, r3, #23
 800103a:	429a      	cmp	r2, r3
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1ca>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a45      	ldr	r2, [pc, #276]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1c6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a44      	ldr	r2, [pc, #272]	; (800115c <HAL_GPIO_Init+0x2c0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1c2>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a43      	ldr	r2, [pc, #268]	; (8001160 <HAL_GPIO_Init+0x2c4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1be>
 8001056:	2303      	movs	r3, #3
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 800105a:	2305      	movs	r3, #5
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x1cc>
 8001066:	2300      	movs	r3, #0
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	2103      	movs	r1, #3
 800106c:	400a      	ands	r2, r1
 800106e:	00d2      	lsls	r2, r2, #3
 8001070:	4093      	lsls	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001078:	4936      	ldr	r1, [pc, #216]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3318      	adds	r3, #24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	035b      	lsls	r3, r3, #13
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	4013      	ands	r3, r2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 80010dc:	2384      	movs	r3, #132	; 0x84
 80010de:	58d3      	ldr	r3, [r2, r3]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001100:	4914      	ldr	r1, [pc, #80]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001102:	2284      	movs	r2, #132	; 0x84
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	58d3      	ldr	r3, [r2, r3]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	4013      	ands	r3, r2
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112e:	4909      	ldr	r1, [pc, #36]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	1e13      	subs	r3, r2, #0
 8001146:	d000      	beq.n	800114a <HAL_GPIO_Init+0x2ae>
 8001148:	e6b0      	b.n	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b006      	add	sp, #24
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021800 	.word	0x40021800
 8001158:	50000400 	.word	0x50000400
 800115c:	50000800 	.word	0x50000800
 8001160:	50000c00 	.word	0x50000c00

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	0008      	movs	r0, r1
 800116e:	0011      	movs	r1, r2
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	1c02      	adds	r2, r0, #0
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	1c7b      	adds	r3, r7, #1
 8001178:	1c0a      	adds	r2, r1, #0
 800117a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117c:	1c7b      	adds	r3, r7, #1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	1cbb      	adds	r3, r7, #2
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	000a      	movs	r2, r1
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	041a      	lsls	r2, r3, #16
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	1cb9      	adds	r1, r7, #2
 80011c2:	8809      	ldrh	r1, [r1, #0]
 80011c4:	400b      	ands	r3, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e082      	b.n	80012ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2241      	movs	r2, #65	; 0x41
 80011ea:	5c9b      	ldrb	r3, [r3, r2]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2240      	movs	r2, #64	; 0x40
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff fbe7 	bl	80009d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2241      	movs	r2, #65	; 0x41
 8001206:	2124      	movs	r1, #36	; 0x24
 8001208:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	438a      	bics	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <HAL_I2C_Init+0x120>)
 8001224:	400a      	ands	r2, r1
 8001226:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4931      	ldr	r1, [pc, #196]	; (80012f8 <HAL_I2C_Init+0x124>)
 8001234:	400a      	ands	r2, r1
 8001236:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0209      	lsls	r1, r1, #8
 800124c:	430a      	orrs	r2, r1
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	e007      	b.n	8001262 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2184      	movs	r1, #132	; 0x84
 800125c:	0209      	lsls	r1, r1, #8
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d104      	bne.n	8001274 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	491f      	ldr	r1, [pc, #124]	; (80012fc <HAL_I2C_Init+0x128>)
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	491a      	ldr	r1, [pc, #104]	; (80012f8 <HAL_I2C_Init+0x124>)
 8001290:	400a      	ands	r2, r1
 8001292:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	431a      	orrs	r2, r3
 800129e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69d9      	ldr	r1, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2241      	movs	r2, #65	; 0x41
 80012d8:	2120      	movs	r1, #32
 80012da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2242      	movs	r2, #66	; 0x42
 80012e6:	2100      	movs	r1, #0
 80012e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	f0ffffff 	.word	0xf0ffffff
 80012f8:	ffff7fff 	.word	0xffff7fff
 80012fc:	02008000 	.word	0x02008000

08001300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2241      	movs	r2, #65	; 0x41
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b20      	cmp	r3, #32
 8001314:	d138      	bne.n	8001388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001320:	2302      	movs	r3, #2
 8001322:	e032      	b.n	800138a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	2101      	movs	r1, #1
 800132a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2241      	movs	r2, #65	; 0x41
 8001330:	2124      	movs	r1, #36	; 0x24
 8001332:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4911      	ldr	r1, [pc, #68]	; (8001394 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2241      	movs	r2, #65	; 0x41
 8001378:	2120      	movs	r1, #32
 800137a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001388:	2302      	movs	r3, #2
  }
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	ffffefff 	.word	0xffffefff

08001398 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d139      	bne.n	8001422 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	5c9b      	ldrb	r3, [r3, r2]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e033      	b.n	8001424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	2101      	movs	r1, #1
 80013c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2241      	movs	r2, #65	; 0x41
 80013c8:	2124      	movs	r1, #36	; 0x24
 80013ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2101      	movs	r1, #1
 80013d8:	438a      	bics	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2241      	movs	r2, #65	; 0x41
 8001412:	2120      	movs	r1, #32
 8001414:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2240      	movs	r2, #64	; 0x40
 800141a:	2100      	movs	r1, #0
 800141c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001422:	2302      	movs	r3, #2
  }
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}
 800142c:	fffff0ff 	.word	0xfffff0ff

08001430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d11f      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	0013      	movs	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	189b      	adds	r3, r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4912      	ldr	r1, [pc, #72]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001462:	0018      	movs	r0, r3
 8001464:	f7fe fe4e 	bl	8000104 <__udivsi3>
 8001468:	0003      	movs	r3, r0
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146e:	e008      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3b01      	subs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e001      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e009      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	401a      	ands	r2, r3
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	429a      	cmp	r2, r3
 8001492:	d0ed      	beq.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40007000 	.word	0x40007000
 80014a4:	fffff9ff 	.word	0xfffff9ff
 80014a8:	20000000 	.word	0x20000000
 80014ac:	000f4240 	.word	0x000f4240

080014b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	23e0      	movs	r3, #224	; 0xe0
 80014ba:	01db      	lsls	r3, r3, #7
 80014bc:	4013      	ands	r3, r2
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e2fe      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1e>
 80014e4:	e07c      	b.n	80015e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4bc3      	ldr	r3, [pc, #780]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2238      	movs	r2, #56	; 0x38
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f0:	4bc0      	ldr	r3, [pc, #768]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x3e>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d002      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4bb9      	ldr	r3, [pc, #740]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d062      	beq.n	80015de <HAL_RCC_OscConfig+0x116>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d15e      	bne.n	80015de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2d9      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	025b      	lsls	r3, r3, #9
 800152c:	429a      	cmp	r2, r3
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x78>
 8001530:	4bb0      	ldr	r3, [pc, #704]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4baf      	ldr	r3, [pc, #700]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0249      	lsls	r1, r1, #9
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e020      	b.n	8001582 <HAL_RCC_OscConfig+0xba>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	23a0      	movs	r3, #160	; 0xa0
 8001546:	02db      	lsls	r3, r3, #11
 8001548:	429a      	cmp	r2, r3
 800154a:	d10e      	bne.n	800156a <HAL_RCC_OscConfig+0xa2>
 800154c:	4ba9      	ldr	r3, [pc, #676]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4ba8      	ldr	r3, [pc, #672]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	02c9      	lsls	r1, r1, #11
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4ba5      	ldr	r3, [pc, #660]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0249      	lsls	r1, r1, #9
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0xba>
 800156a:	4ba2      	ldr	r3, [pc, #648]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4ba1      	ldr	r3, [pc, #644]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001570:	49a1      	ldr	r1, [pc, #644]	; (80017f8 <HAL_RCC_OscConfig+0x330>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	4b9f      	ldr	r3, [pc, #636]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b9e      	ldr	r3, [pc, #632]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800157c:	499f      	ldr	r1, [pc, #636]	; (80017fc <HAL_RCC_OscConfig+0x334>)
 800157e:	400a      	ands	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d014      	beq.n	80015b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fba5 	bl	8000cd8 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fba0 	bl	8000cd8 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e298      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4b93      	ldr	r3, [pc, #588]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	029b      	lsls	r3, r3, #10
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xcc>
 80015b2:	e015      	b.n	80015e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb90 	bl	8000cd8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015be:	f7ff fb8b 	bl	8000cd8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e283      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	4013      	ands	r3, r2
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0xf6>
 80015dc:	e000      	b.n	80015e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x124>
 80015ea:	e099      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2238      	movs	r2, #56	; 0x38
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f6:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2203      	movs	r2, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d102      	bne.n	800160c <HAL_RCC_OscConfig+0x144>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d002      	beq.n	8001612 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d135      	bne.n	800167e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4013      	ands	r3, r2
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x162>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e256      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a74      	ldr	r2, [pc, #464]	; (8001800 <HAL_RCC_OscConfig+0x338>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	4b6e      	ldr	r3, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d112      	bne.n	800166c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001646:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x33c>)
 800164c:	4013      	ands	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800165a:	4b66      	ldr	r3, [pc, #408]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0adb      	lsrs	r3, r3, #11
 8001660:	2207      	movs	r2, #7
 8001662:	4013      	ands	r3, r2
 8001664:	4a68      	ldr	r2, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x340>)
 8001666:	40da      	lsrs	r2, r3
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x344>)
 800166a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x348>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fad5 	bl	8000c20 <HAL_InitTick>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d051      	beq.n	800171e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e22c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d030      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001686:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x33c>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800169a:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0049      	lsls	r1, r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb16 	bl	8000cd8 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fb11 	bl	8000cd8 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e209      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4013      	ands	r3, r2
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <HAL_RCC_OscConfig+0x338>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	021a      	lsls	r2, r3, #8
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	e01b      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	4949      	ldr	r1, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x34c>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff faf0 	bl	8000cd8 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff faeb 	bl	8000cd8 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1e3      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4013      	ands	r3, r2
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x236>
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2208      	movs	r2, #8
 8001726:	4013      	ands	r3, r2
 8001728:	d047      	beq.n	80017ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2238      	movs	r2, #56	; 0x38
 8001730:	4013      	ands	r3, r2
 8001732:	2b18      	cmp	r3, #24
 8001734:	d10a      	bne.n	800174c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d03c      	beq.n	80017ba <HAL_RCC_OscConfig+0x2f2>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d138      	bne.n	80017ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e1c5      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d019      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800175a:	2101      	movs	r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff faba 	bl	8000cd8 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fab5 	bl	8000cd8 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1ad      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d0f1      	beq.n	800176a <HAL_RCC_OscConfig+0x2a2>
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800178a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff faa0 	bl	8000cd8 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fa9b 	bl	8000cd8 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e193      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d100      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2fe>
 80017c4:	e0c6      	b.n	8001954 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	231f      	movs	r3, #31
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2238      	movs	r2, #56	; 0x38
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d11e      	bne.n	8001818 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x31e>
 80017e4:	e0b6      	b.n	8001954 <HAL_RCC_OscConfig+0x48c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d000      	beq.n	80017f0 <HAL_RCC_OscConfig+0x328>
 80017ee:	e0b1      	b.n	8001954 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e171      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
 80017f4:	40021000 	.word	0x40021000
 80017f8:	fffeffff 	.word	0xfffeffff
 80017fc:	fffbffff 	.word	0xfffbffff
 8001800:	ffff80ff 	.word	0xffff80ff
 8001804:	ffffc7ff 	.word	0xffffc7ff
 8001808:	00f42400 	.word	0x00f42400
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004
 8001814:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001818:	4bb1      	ldr	r3, [pc, #708]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800181a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	055b      	lsls	r3, r3, #21
 8001820:	4013      	ands	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x360>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x362>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d011      	beq.n	8001852 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4bac      	ldr	r3, [pc, #688]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001832:	4bab      	ldr	r3, [pc, #684]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0549      	lsls	r1, r1, #21
 8001838:	430a      	orrs	r2, r1
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
 800183c:	4ba8      	ldr	r3, [pc, #672]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800183e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	055b      	lsls	r3, r3, #21
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800184a:	231f      	movs	r3, #31
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4ba4      	ldr	r3, [pc, #656]	; (8001ae4 <HAL_RCC_OscConfig+0x61c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4013      	ands	r3, r2
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185e:	4ba1      	ldr	r3, [pc, #644]	; (8001ae4 <HAL_RCC_OscConfig+0x61c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4ba0      	ldr	r3, [pc, #640]	; (8001ae4 <HAL_RCC_OscConfig+0x61c>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0049      	lsls	r1, r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800186c:	f7ff fa34 	bl	8000cd8 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fa2f 	bl	8000cd8 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e127      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001888:	4b96      	ldr	r3, [pc, #600]	; (8001ae4 <HAL_RCC_OscConfig+0x61c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4013      	ands	r3, r2
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x3e2>
 800189c:	4b90      	ldr	r3, [pc, #576]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800189e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a0:	4b8f      	ldr	r3, [pc, #572]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x404>
 80018b2:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018b6:	4b8a      	ldr	r3, [pc, #552]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018b8:	2104      	movs	r1, #4
 80018ba:	430a      	orrs	r2, r1
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c2:	4b87      	ldr	r3, [pc, #540]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
 80018cc:	4b84      	ldr	r3, [pc, #528]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018d0:	4b83      	ldr	r3, [pc, #524]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80018d8:	4b81      	ldr	r3, [pc, #516]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80018de:	2104      	movs	r1, #4
 80018e0:	438a      	bics	r2, r1
 80018e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d014      	beq.n	8001916 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9f4 	bl	8000cd8 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f4:	e009      	b.n	800190a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff f9ef 	bl	8000cd8 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_RCC_OscConfig+0x620>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0e6      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b75      	ldr	r3, [pc, #468]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x42e>
 8001914:	e013      	b.n	800193e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff f9df 	bl	8000cd8 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191e:	e009      	b.n	8001934 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff f9da 	bl	8000cd8 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a6f      	ldr	r2, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x620>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0d1      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800193e:	231f      	movs	r3, #31
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800194a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194c:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800194e:	4967      	ldr	r1, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001950:	400a      	ands	r2, r1
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x496>
 800195c:	e0bb      	b.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195e:	4b60      	ldr	r3, [pc, #384]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2238      	movs	r2, #56	; 0x38
 8001964:	4013      	ands	r3, r2
 8001966:	2b10      	cmp	r3, #16
 8001968:	d100      	bne.n	800196c <HAL_RCC_OscConfig+0x4a4>
 800196a:	e07b      	b.n	8001a64 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d156      	bne.n	8001a22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800197a:	495d      	ldr	r1, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x628>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f9aa 	bl	8000cd8 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff f9a5 	bl	8000cd8 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e09d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	049b      	lsls	r3, r3, #18
 80019a4:	4013      	ands	r3, r2
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <HAL_RCC_OscConfig+0x62c>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	431a      	orrs	r2, r3
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	0449      	lsls	r1, r1, #17
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0549      	lsls	r1, r1, #21
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f96e 	bl	8000cd8 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f969 	bl	8000cd8 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e061      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	049b      	lsls	r3, r3, #18
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x53a>
 8001a20:	e059      	b.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a28:	4931      	ldr	r1, [pc, #196]	; (8001af0 <HAL_RCC_OscConfig+0x628>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f953 	bl	8000cd8 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f94e 	bl	8000cd8 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e046      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	049b      	lsls	r3, r3, #18
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a5c:	4926      	ldr	r1, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x630>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	e038      	b.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e033      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d126      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2270      	movs	r2, #112	; 0x70
 8001a88:	401a      	ands	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11f      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	23fe      	movs	r3, #254	; 0xfe
 8001a96:	01db      	lsls	r3, r3, #7
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d116      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	23f8      	movs	r3, #248	; 0xf8
 8001aa8:	039b      	lsls	r3, r3, #14
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	23e0      	movs	r3, #224	; 0xe0
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	0f5b      	lsrs	r3, r3, #29
 8001ac8:	075a      	lsls	r2, r3, #29
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b008      	add	sp, #32
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	efffffff 	.word	0xefffffff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	11c1808c 	.word	0x11c1808c
 8001af8:	eefefffc 	.word	0xeefefffc

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0e9      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2207      	movs	r2, #7
 8001b16:	4013      	ands	r3, r2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d91e      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4393      	bics	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f8d2 	bl	8000cd8 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7ff f8cd 	bl	8000cd8 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0ca      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d006      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b70:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b76:	21e0      	movs	r1, #224	; 0xe0
 8001b78:	01c9      	lsls	r1, r1, #7
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_RCC_ClockConfig+0x1fc>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d057      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	4013      	ands	r3, r2
 8001bae:	d12b      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e097      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	049b      	lsls	r3, r3, #18
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d11f      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e08b      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d113      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e07f      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e074      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e06d      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4393      	bics	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c1c:	f7ff f85c 	bl	8000cd8 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c24:	e009      	b.n	8001c3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c26:	f7ff f857 	bl	8000cd8 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	4a2f      	ldr	r2, [pc, #188]	; (8001cf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e054      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2238      	movs	r2, #56	; 0x38
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1ec      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2207      	movs	r2, #7
 8001c52:	4013      	ands	r3, r2
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d21e      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f834 	bl	8000cd8 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f7ff f82f 	bl	8000cd8 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e02c      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2207      	movs	r2, #7
 8001c90:	4013      	ands	r3, r2
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <HAL_RCC_ClockConfig+0x200>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cb6:	f000 f829 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cba:	0001      	movs	r1, r0
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x204>)
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	58d3      	ldr	r3, [r2, r3]
 8001ccc:	221f      	movs	r2, #31
 8001cce:	4013      	ands	r3, r2
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	40da      	lsrs	r2, r3
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x208>)
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_ClockConfig+0x20c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe ff9f 	bl	8000c20 <HAL_InitTick>
 8001ce2:	0003      	movs	r3, r0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	fffff0ff 	.word	0xfffff0ff
 8001cfc:	ffff8fff 	.word	0xffff8fff
 8001d00:	08002e20 	.word	0x08002e20
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2238      	movs	r2, #56	; 0x38
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d10f      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0adb      	lsrs	r3, r3, #11
 8001d22:	2207      	movs	r2, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	0013      	movs	r3, r2
 8001d2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	4835      	ldr	r0, [pc, #212]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d32:	f7fe f9e7 	bl	8000104 <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e05d      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2238      	movs	r2, #56	; 0x38
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e054      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2238      	movs	r2, #56	; 0x38
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d138      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	4824      	ldr	r0, [pc, #144]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d7c:	f7fe f9c2 	bl	8000104 <__udivsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	0019      	movs	r1, r3
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	227f      	movs	r2, #127	; 0x7f
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	434b      	muls	r3, r1
 8001d90:	617b      	str	r3, [r7, #20]
        break;
 8001d92:	e00d      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	481c      	ldr	r0, [pc, #112]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d98:	f7fe f9b4 	bl	8000104 <__udivsi3>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	0019      	movs	r1, r3
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	227f      	movs	r2, #127	; 0x7f
 8001da8:	4013      	ands	r3, r2
 8001daa:	434b      	muls	r3, r1
 8001dac:	617b      	str	r3, [r7, #20]
        break;
 8001dae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0f5b      	lsrs	r3, r3, #29
 8001db6:	2207      	movs	r2, #7
 8001db8:	4013      	ands	r3, r2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7fe f99f 	bl	8000104 <__udivsi3>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e015      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2238      	movs	r2, #56	; 0x38
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d103      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2238      	movs	r2, #56	; 0x38
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b18      	cmp	r3, #24
 8001dea:	d103      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001dec:	23fa      	movs	r3, #250	; 0xfa
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e001      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	20000000 	.word	0x20000000

08001e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e24:	b5b0      	push	{r4, r5, r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e28:	f7ff fff2 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	f7ff fb3f 	bl	80014b0 <LL_RCC_GetAPB1Prescaler>
 8001e32:	0003      	movs	r3, r0
 8001e34:	0b1a      	lsrs	r2, r3, #12
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	58d3      	ldr	r3, [r2, r3]
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	4013      	ands	r3, r2
 8001e40:	40dc      	lsrs	r4, r3
 8001e42:	0023      	movs	r3, r4
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	08002e60 	.word	0x08002e60

08001e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e58:	2313      	movs	r3, #19
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e60:	2312      	movs	r3, #18
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e74:	e0a3      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2011      	movs	r0, #17
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4bc3      	ldr	r3, [pc, #780]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	055b      	lsls	r3, r3, #21
 8001e86:	4013      	ands	r3, r2
 8001e88:	d110      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4bc0      	ldr	r3, [pc, #768]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e8e:	4bbf      	ldr	r3, [pc, #764]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0549      	lsls	r1, r1, #21
 8001e94:	430a      	orrs	r2, r1
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e98:	4bbc      	ldr	r3, [pc, #752]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	055b      	lsls	r3, r3, #21
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	183b      	adds	r3, r7, r0
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4bb8      	ldr	r3, [pc, #736]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4bb7      	ldr	r3, [pc, #732]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	0049      	lsls	r1, r1, #1
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eba:	f7fe ff0d 	bl	8000cd8 <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec2:	e00b      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe ff08 	bl	8000cd8 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d904      	bls.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ed2:	2313      	movs	r3, #19
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	701a      	strb	r2, [r3, #0]
        break;
 8001eda:	e005      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001edc:	4bac      	ldr	r3, [pc, #688]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d0ed      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ee8:	2313      	movs	r3, #19
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d154      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ef2:	4ba6      	ldr	r3, [pc, #664]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d019      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d014      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f0e:	4b9f      	ldr	r3, [pc, #636]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	4aa0      	ldr	r2, [pc, #640]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f18:	4b9c      	ldr	r3, [pc, #624]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f1c:	4b9b      	ldr	r3, [pc, #620]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0249      	lsls	r1, r1, #9
 8001f22:	430a      	orrs	r2, r1
 8001f24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f26:	4b99      	ldr	r3, [pc, #612]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f2a:	4b98      	ldr	r3, [pc, #608]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2c:	499a      	ldr	r1, [pc, #616]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f32:	4b96      	ldr	r3, [pc, #600]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d016      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe feca 	bl	8000cd8 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	e00c      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fec5 	bl	8000cd8 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a91      	ldr	r2, [pc, #580]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d904      	bls.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f5a:	2313      	movs	r3, #19
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2203      	movs	r2, #3
 8001f60:	701a      	strb	r2, [r3, #0]
            break;
 8001f62:	e004      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f64:	4b89      	ldr	r3, [pc, #548]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d0ed      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f6e:	2313      	movs	r3, #19
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f78:	4b84      	ldr	r3, [pc, #528]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	4a85      	ldr	r2, [pc, #532]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	4b81      	ldr	r3, [pc, #516]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f8c:	e00c      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8e:	2312      	movs	r3, #18
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2213      	movs	r2, #19
 8001f94:	18ba      	adds	r2, r7, r2
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2213      	movs	r2, #19
 8001fa2:	18ba      	adds	r2, r7, r2
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fa8:	2311      	movs	r3, #17
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fb6:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb8:	4979      	ldr	r1, [pc, #484]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc8:	4b70      	ldr	r3, [pc, #448]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4393      	bics	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe6:	4b69      	ldr	r3, [pc, #420]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	220c      	movs	r2, #12
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2210      	movs	r2, #16
 8002000:	4013      	ands	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002004:	4b61      	ldr	r3, [pc, #388]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	4b5e      	ldr	r3, [pc, #376]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002014:	430a      	orrs	r2, r1
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d009      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	4a5f      	ldr	r2, [pc, #380]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	4b56      	ldr	r3, [pc, #344]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002034:	430a      	orrs	r2, r1
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4013      	ands	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002044:	4b51      	ldr	r3, [pc, #324]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800204a:	4013      	ands	r3, r2
 800204c:	0019      	movs	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002054:	430a      	orrs	r2, r1
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2220      	movs	r2, #32
 800205e:	4013      	ands	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002062:	4b4a      	ldr	r3, [pc, #296]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002068:	4013      	ands	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002072:	430a      	orrs	r2, r1
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	01db      	lsls	r3, r3, #7
 800207e:	4013      	ands	r3, r2
 8002080:	d015      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002082:	4b42      	ldr	r3, [pc, #264]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	0899      	lsrs	r1, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002090:	430a      	orrs	r2, r1
 8002092:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	05db      	lsls	r3, r3, #23
 800209c:	429a      	cmp	r2, r3
 800209e:	d106      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020a0:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	0249      	lsls	r1, r1, #9
 80020aa:	430a      	orrs	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	031b      	lsls	r3, r3, #12
 80020b6:	4013      	ands	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	039b      	lsls	r3, r3, #14
 80020d6:	4013      	ands	r3, r2
 80020d8:	d016      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	03db      	lsls	r3, r3, #15
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d106      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	0449      	lsls	r1, r1, #17
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	03db      	lsls	r3, r3, #15
 8002110:	4013      	ands	r3, r2
 8002112:	d016      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002124:	430a      	orrs	r2, r1
 8002126:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	045b      	lsls	r3, r3, #17
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	0449      	lsls	r1, r1, #17
 800213e:	430a      	orrs	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4013      	ands	r3, r2
 800214c:	d016      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800215e:	430a      	orrs	r2, r1
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	01db      	lsls	r3, r3, #7
 800216a:	429a      	cmp	r2, r3
 800216c:	d106      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0249      	lsls	r1, r1, #9
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800217c:	2312      	movs	r3, #18
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	781b      	ldrb	r3, [r3, #0]
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b006      	add	sp, #24
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	fffffcff 	.word	0xfffffcff
 8002198:	fffeffff 	.word	0xfffeffff
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff
 80021a4:	fffff3ff 	.word	0xfffff3ff
 80021a8:	fff3ffff 	.word	0xfff3ffff
 80021ac:	ffcfffff 	.word	0xffcfffff
 80021b0:	ffffcfff 	.word	0xffffcfff
 80021b4:	ffbfffff 	.word	0xffbfffff
 80021b8:	feffffff 	.word	0xfeffffff
 80021bc:	ffff3fff 	.word	0xffff3fff

080021c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e046      	b.n	8002260 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2288      	movs	r2, #136	; 0x88
 80021d6:	589b      	ldr	r3, [r3, r2]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2284      	movs	r2, #132	; 0x84
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe fc54 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2288      	movs	r2, #136	; 0x88
 80021f0:	2124      	movs	r1, #36	; 0x24
 80021f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2101      	movs	r1, #1
 8002200:	438a      	bics	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f830 	bl	800226c <UART_SetConfig>
 800220c:	0003      	movs	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e024      	b.n	8002260 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fae1 	bl	80027e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	490d      	ldr	r1, [pc, #52]	; (8002268 <HAL_UART_Init+0xa8>)
 8002232:	400a      	ands	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	212a      	movs	r1, #42	; 0x2a
 8002242:	438a      	bics	r2, r1
 8002244:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 fb79 	bl	8002950 <UART_CheckIdleState>
 800225e:	0003      	movs	r3, r0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}
 8002268:	ffffb7ff 	.word	0xffffb7ff

0800226c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
 8002272:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002274:	231a      	movs	r3, #26
 8002276:	2220      	movs	r2, #32
 8002278:	189b      	adds	r3, r3, r2
 800227a:	19db      	adds	r3, r3, r7
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	431a      	orrs	r2, r3
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	431a      	orrs	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4313      	orrs	r3, r2
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4aaf      	ldr	r2, [pc, #700]	; (800255c <UART_SetConfig+0x2f0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	430b      	orrs	r3, r1
 80022ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4aaa      	ldr	r2, [pc, #680]	; (8002560 <UART_SetConfig+0x2f4>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0018      	movs	r0, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	68d9      	ldr	r1, [r3, #12]
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	0003      	movs	r3, r0
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4aa4      	ldr	r2, [pc, #656]	; (8002564 <UART_SetConfig+0x2f8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022de:	4313      	orrs	r3, r2
 80022e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a9f      	ldr	r2, [pc, #636]	; (8002568 <UART_SetConfig+0x2fc>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	220f      	movs	r2, #15
 8002300:	4393      	bics	r3, r2
 8002302:	0018      	movs	r0, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	0003      	movs	r3, r0
 800230e:	430b      	orrs	r3, r1
 8002310:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a95      	ldr	r2, [pc, #596]	; (800256c <UART_SetConfig+0x300>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d131      	bne.n	8002380 <UART_SetConfig+0x114>
 800231c:	4b94      	ldr	r3, [pc, #592]	; (8002570 <UART_SetConfig+0x304>)
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	2203      	movs	r2, #3
 8002322:	4013      	ands	r3, r2
 8002324:	2b03      	cmp	r3, #3
 8002326:	d01d      	beq.n	8002364 <UART_SetConfig+0xf8>
 8002328:	d823      	bhi.n	8002372 <UART_SetConfig+0x106>
 800232a:	2b02      	cmp	r3, #2
 800232c:	d00c      	beq.n	8002348 <UART_SetConfig+0xdc>
 800232e:	d820      	bhi.n	8002372 <UART_SetConfig+0x106>
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <UART_SetConfig+0xce>
 8002334:	2b01      	cmp	r3, #1
 8002336:	d00e      	beq.n	8002356 <UART_SetConfig+0xea>
 8002338:	e01b      	b.n	8002372 <UART_SetConfig+0x106>
 800233a:	231b      	movs	r3, #27
 800233c:	2220      	movs	r2, #32
 800233e:	189b      	adds	r3, r3, r2
 8002340:	19db      	adds	r3, r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e0b4      	b.n	80024b2 <UART_SetConfig+0x246>
 8002348:	231b      	movs	r3, #27
 800234a:	2220      	movs	r2, #32
 800234c:	189b      	adds	r3, r3, r2
 800234e:	19db      	adds	r3, r3, r7
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e0ad      	b.n	80024b2 <UART_SetConfig+0x246>
 8002356:	231b      	movs	r3, #27
 8002358:	2220      	movs	r2, #32
 800235a:	189b      	adds	r3, r3, r2
 800235c:	19db      	adds	r3, r3, r7
 800235e:	2204      	movs	r2, #4
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e0a6      	b.n	80024b2 <UART_SetConfig+0x246>
 8002364:	231b      	movs	r3, #27
 8002366:	2220      	movs	r2, #32
 8002368:	189b      	adds	r3, r3, r2
 800236a:	19db      	adds	r3, r3, r7
 800236c:	2208      	movs	r2, #8
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e09f      	b.n	80024b2 <UART_SetConfig+0x246>
 8002372:	231b      	movs	r3, #27
 8002374:	2220      	movs	r2, #32
 8002376:	189b      	adds	r3, r3, r2
 8002378:	19db      	adds	r3, r3, r7
 800237a:	2210      	movs	r2, #16
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e098      	b.n	80024b2 <UART_SetConfig+0x246>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a7b      	ldr	r2, [pc, #492]	; (8002574 <UART_SetConfig+0x308>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d131      	bne.n	80023ee <UART_SetConfig+0x182>
 800238a:	4b79      	ldr	r3, [pc, #484]	; (8002570 <UART_SetConfig+0x304>)
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	220c      	movs	r2, #12
 8002390:	4013      	ands	r3, r2
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d01d      	beq.n	80023d2 <UART_SetConfig+0x166>
 8002396:	d823      	bhi.n	80023e0 <UART_SetConfig+0x174>
 8002398:	2b08      	cmp	r3, #8
 800239a:	d00c      	beq.n	80023b6 <UART_SetConfig+0x14a>
 800239c:	d820      	bhi.n	80023e0 <UART_SetConfig+0x174>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <UART_SetConfig+0x13c>
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d00e      	beq.n	80023c4 <UART_SetConfig+0x158>
 80023a6:	e01b      	b.n	80023e0 <UART_SetConfig+0x174>
 80023a8:	231b      	movs	r3, #27
 80023aa:	2220      	movs	r2, #32
 80023ac:	189b      	adds	r3, r3, r2
 80023ae:	19db      	adds	r3, r3, r7
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e07d      	b.n	80024b2 <UART_SetConfig+0x246>
 80023b6:	231b      	movs	r3, #27
 80023b8:	2220      	movs	r2, #32
 80023ba:	189b      	adds	r3, r3, r2
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e076      	b.n	80024b2 <UART_SetConfig+0x246>
 80023c4:	231b      	movs	r3, #27
 80023c6:	2220      	movs	r2, #32
 80023c8:	189b      	adds	r3, r3, r2
 80023ca:	19db      	adds	r3, r3, r7
 80023cc:	2204      	movs	r2, #4
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e06f      	b.n	80024b2 <UART_SetConfig+0x246>
 80023d2:	231b      	movs	r3, #27
 80023d4:	2220      	movs	r2, #32
 80023d6:	189b      	adds	r3, r3, r2
 80023d8:	19db      	adds	r3, r3, r7
 80023da:	2208      	movs	r2, #8
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e068      	b.n	80024b2 <UART_SetConfig+0x246>
 80023e0:	231b      	movs	r3, #27
 80023e2:	2220      	movs	r2, #32
 80023e4:	189b      	adds	r3, r3, r2
 80023e6:	19db      	adds	r3, r3, r7
 80023e8:	2210      	movs	r2, #16
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e061      	b.n	80024b2 <UART_SetConfig+0x246>
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a61      	ldr	r2, [pc, #388]	; (8002578 <UART_SetConfig+0x30c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d106      	bne.n	8002406 <UART_SetConfig+0x19a>
 80023f8:	231b      	movs	r3, #27
 80023fa:	2220      	movs	r2, #32
 80023fc:	189b      	adds	r3, r3, r2
 80023fe:	19db      	adds	r3, r3, r7
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e055      	b.n	80024b2 <UART_SetConfig+0x246>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5c      	ldr	r2, [pc, #368]	; (800257c <UART_SetConfig+0x310>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d106      	bne.n	800241e <UART_SetConfig+0x1b2>
 8002410:	231b      	movs	r3, #27
 8002412:	2220      	movs	r2, #32
 8002414:	189b      	adds	r3, r3, r2
 8002416:	19db      	adds	r3, r3, r7
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e049      	b.n	80024b2 <UART_SetConfig+0x246>
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a50      	ldr	r2, [pc, #320]	; (8002564 <UART_SetConfig+0x2f8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d13e      	bne.n	80024a6 <UART_SetConfig+0x23a>
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <UART_SetConfig+0x304>)
 800242a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242c:	23c0      	movs	r3, #192	; 0xc0
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4013      	ands	r3, r2
 8002432:	22c0      	movs	r2, #192	; 0xc0
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	4293      	cmp	r3, r2
 8002438:	d027      	beq.n	800248a <UART_SetConfig+0x21e>
 800243a:	22c0      	movs	r2, #192	; 0xc0
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	4293      	cmp	r3, r2
 8002440:	d82a      	bhi.n	8002498 <UART_SetConfig+0x22c>
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	4293      	cmp	r3, r2
 8002448:	d011      	beq.n	800246e <UART_SetConfig+0x202>
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	4293      	cmp	r3, r2
 8002450:	d822      	bhi.n	8002498 <UART_SetConfig+0x22c>
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <UART_SetConfig+0x1f4>
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <UART_SetConfig+0x210>
 800245e:	e01b      	b.n	8002498 <UART_SetConfig+0x22c>
 8002460:	231b      	movs	r3, #27
 8002462:	2220      	movs	r2, #32
 8002464:	189b      	adds	r3, r3, r2
 8002466:	19db      	adds	r3, r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e021      	b.n	80024b2 <UART_SetConfig+0x246>
 800246e:	231b      	movs	r3, #27
 8002470:	2220      	movs	r2, #32
 8002472:	189b      	adds	r3, r3, r2
 8002474:	19db      	adds	r3, r3, r7
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e01a      	b.n	80024b2 <UART_SetConfig+0x246>
 800247c:	231b      	movs	r3, #27
 800247e:	2220      	movs	r2, #32
 8002480:	189b      	adds	r3, r3, r2
 8002482:	19db      	adds	r3, r3, r7
 8002484:	2204      	movs	r2, #4
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e013      	b.n	80024b2 <UART_SetConfig+0x246>
 800248a:	231b      	movs	r3, #27
 800248c:	2220      	movs	r2, #32
 800248e:	189b      	adds	r3, r3, r2
 8002490:	19db      	adds	r3, r3, r7
 8002492:	2208      	movs	r2, #8
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e00c      	b.n	80024b2 <UART_SetConfig+0x246>
 8002498:	231b      	movs	r3, #27
 800249a:	2220      	movs	r2, #32
 800249c:	189b      	adds	r3, r3, r2
 800249e:	19db      	adds	r3, r3, r7
 80024a0:	2210      	movs	r2, #16
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e005      	b.n	80024b2 <UART_SetConfig+0x246>
 80024a6:	231b      	movs	r3, #27
 80024a8:	2220      	movs	r2, #32
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	19db      	adds	r3, r3, r7
 80024ae:	2210      	movs	r2, #16
 80024b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <UART_SetConfig+0x2f8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d000      	beq.n	80024be <UART_SetConfig+0x252>
 80024bc:	e0a9      	b.n	8002612 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024be:	231b      	movs	r3, #27
 80024c0:	2220      	movs	r2, #32
 80024c2:	189b      	adds	r3, r3, r2
 80024c4:	19db      	adds	r3, r3, r7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d015      	beq.n	80024f8 <UART_SetConfig+0x28c>
 80024cc:	dc18      	bgt.n	8002500 <UART_SetConfig+0x294>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00d      	beq.n	80024ee <UART_SetConfig+0x282>
 80024d2:	dc15      	bgt.n	8002500 <UART_SetConfig+0x294>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <UART_SetConfig+0x272>
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d005      	beq.n	80024e8 <UART_SetConfig+0x27c>
 80024dc:	e010      	b.n	8002500 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024de:	f7ff fca1 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 80024e2:	0003      	movs	r3, r0
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024e6:	e014      	b.n	8002512 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <UART_SetConfig+0x314>)
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024ec:	e011      	b.n	8002512 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ee:	f7ff fc0d 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 80024f2:	0003      	movs	r3, r0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024f6:	e00c      	b.n	8002512 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024fe:	e008      	b.n	8002512 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002504:	231a      	movs	r3, #26
 8002506:	2220      	movs	r2, #32
 8002508:	189b      	adds	r3, r3, r2
 800250a:	19db      	adds	r3, r3, r7
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
        break;
 8002510:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <UART_SetConfig+0x2ae>
 8002518:	e14b      	b.n	80027b2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <UART_SetConfig+0x318>)
 8002520:	0052      	lsls	r2, r2, #1
 8002522:	5ad3      	ldrh	r3, [r2, r3]
 8002524:	0019      	movs	r1, r3
 8002526:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002528:	f7fd fdec 	bl	8000104 <__udivsi3>
 800252c:	0003      	movs	r3, r0
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	0013      	movs	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	189b      	adds	r3, r3, r2
 800253a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253c:	429a      	cmp	r2, r3
 800253e:	d305      	bcc.n	800254c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002548:	429a      	cmp	r2, r3
 800254a:	d91d      	bls.n	8002588 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800254c:	231a      	movs	r3, #26
 800254e:	2220      	movs	r2, #32
 8002550:	189b      	adds	r3, r3, r2
 8002552:	19db      	adds	r3, r3, r7
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e12b      	b.n	80027b2 <UART_SetConfig+0x546>
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	cfff69f3 	.word	0xcfff69f3
 8002560:	ffffcfff 	.word	0xffffcfff
 8002564:	40008000 	.word	0x40008000
 8002568:	11fff4ff 	.word	0x11fff4ff
 800256c:	40013800 	.word	0x40013800
 8002570:	40021000 	.word	0x40021000
 8002574:	40004400 	.word	0x40004400
 8002578:	40004800 	.word	0x40004800
 800257c:	40004c00 	.word	0x40004c00
 8002580:	00f42400 	.word	0x00f42400
 8002584:	08002e80 	.word	0x08002e80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <UART_SetConfig+0x574>)
 8002596:	0052      	lsls	r2, r2, #1
 8002598:	5ad3      	ldrh	r3, [r2, r3]
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	69b8      	ldr	r0, [r7, #24]
 80025a6:	69f9      	ldr	r1, [r7, #28]
 80025a8:	f7fd ff22 	bl	80003f0 <__aeabi_uldivmod>
 80025ac:	0002      	movs	r2, r0
 80025ae:	000b      	movs	r3, r1
 80025b0:	0e11      	lsrs	r1, r2, #24
 80025b2:	021d      	lsls	r5, r3, #8
 80025b4:	430d      	orrs	r5, r1
 80025b6:	0214      	lsls	r4, r2, #8
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68b8      	ldr	r0, [r7, #8]
 80025c6:	68f9      	ldr	r1, [r7, #12]
 80025c8:	1900      	adds	r0, r0, r4
 80025ca:	4169      	adcs	r1, r5
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f7fd ff09 	bl	80003f0 <__aeabi_uldivmod>
 80025de:	0002      	movs	r2, r0
 80025e0:	000b      	movs	r3, r1
 80025e2:	0013      	movs	r3, r2
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e8:	23c0      	movs	r3, #192	; 0xc0
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d309      	bcc.n	8002604 <UART_SetConfig+0x398>
 80025f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	035b      	lsls	r3, r3, #13
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d204      	bcs.n	8002604 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e0d6      	b.n	80027b2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002604:	231a      	movs	r3, #26
 8002606:	2220      	movs	r2, #32
 8002608:	189b      	adds	r3, r3, r2
 800260a:	19db      	adds	r3, r3, r7
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e0cf      	b.n	80027b2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	429a      	cmp	r2, r3
 800261c:	d000      	beq.n	8002620 <UART_SetConfig+0x3b4>
 800261e:	e070      	b.n	8002702 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002620:	231b      	movs	r3, #27
 8002622:	2220      	movs	r2, #32
 8002624:	189b      	adds	r3, r3, r2
 8002626:	19db      	adds	r3, r3, r7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d015      	beq.n	800265a <UART_SetConfig+0x3ee>
 800262e:	dc18      	bgt.n	8002662 <UART_SetConfig+0x3f6>
 8002630:	2b04      	cmp	r3, #4
 8002632:	d00d      	beq.n	8002650 <UART_SetConfig+0x3e4>
 8002634:	dc15      	bgt.n	8002662 <UART_SetConfig+0x3f6>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <UART_SetConfig+0x3d4>
 800263a:	2b02      	cmp	r3, #2
 800263c:	d005      	beq.n	800264a <UART_SetConfig+0x3de>
 800263e:	e010      	b.n	8002662 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002640:	f7ff fbf0 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8002644:	0003      	movs	r3, r0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002648:	e014      	b.n	8002674 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800264a:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <UART_SetConfig+0x578>)
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800264e:	e011      	b.n	8002674 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002650:	f7ff fb5c 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002654:	0003      	movs	r3, r0
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002658:	e00c      	b.n	8002674 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002660:	e008      	b.n	8002674 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002666:	231a      	movs	r3, #26
 8002668:	2220      	movs	r2, #32
 800266a:	189b      	adds	r3, r3, r2
 800266c:	19db      	adds	r3, r3, r7
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
        break;
 8002672:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	2b00      	cmp	r3, #0
 8002678:	d100      	bne.n	800267c <UART_SetConfig+0x410>
 800267a:	e09a      	b.n	80027b2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <UART_SetConfig+0x574>)
 8002682:	0052      	lsls	r2, r2, #1
 8002684:	5ad3      	ldrh	r3, [r2, r3]
 8002686:	0019      	movs	r1, r3
 8002688:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800268a:	f7fd fd3b 	bl	8000104 <__udivsi3>
 800268e:	0003      	movs	r3, r0
 8002690:	005a      	lsls	r2, r3, #1
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	18d2      	adds	r2, r2, r3
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0019      	movs	r1, r3
 80026a0:	0010      	movs	r0, r2
 80026a2:	f7fd fd2f 	bl	8000104 <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d921      	bls.n	80026f4 <UART_SetConfig+0x488>
 80026b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	025b      	lsls	r3, r3, #9
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d21c      	bcs.n	80026f4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	b29a      	uxth	r2, r3
 80026be:	200e      	movs	r0, #14
 80026c0:	2420      	movs	r4, #32
 80026c2:	1903      	adds	r3, r0, r4
 80026c4:	19db      	adds	r3, r3, r7
 80026c6:	210f      	movs	r1, #15
 80026c8:	438a      	bics	r2, r1
 80026ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2207      	movs	r2, #7
 80026d4:	4013      	ands	r3, r2
 80026d6:	b299      	uxth	r1, r3
 80026d8:	1903      	adds	r3, r0, r4
 80026da:	19db      	adds	r3, r3, r7
 80026dc:	1902      	adds	r2, r0, r4
 80026de:	19d2      	adds	r2, r2, r7
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1902      	adds	r2, r0, r4
 80026ec:	19d2      	adds	r2, r2, r7
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	e05e      	b.n	80027b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80026f4:	231a      	movs	r3, #26
 80026f6:	2220      	movs	r2, #32
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	19db      	adds	r3, r3, r7
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e057      	b.n	80027b2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002702:	231b      	movs	r3, #27
 8002704:	2220      	movs	r2, #32
 8002706:	189b      	adds	r3, r3, r2
 8002708:	19db      	adds	r3, r3, r7
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d015      	beq.n	800273c <UART_SetConfig+0x4d0>
 8002710:	dc18      	bgt.n	8002744 <UART_SetConfig+0x4d8>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d00d      	beq.n	8002732 <UART_SetConfig+0x4c6>
 8002716:	dc15      	bgt.n	8002744 <UART_SetConfig+0x4d8>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <UART_SetConfig+0x4b6>
 800271c:	2b02      	cmp	r3, #2
 800271e:	d005      	beq.n	800272c <UART_SetConfig+0x4c0>
 8002720:	e010      	b.n	8002744 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002722:	f7ff fb7f 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8002726:	0003      	movs	r3, r0
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800272a:	e014      	b.n	8002756 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800272c:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <UART_SetConfig+0x578>)
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002730:	e011      	b.n	8002756 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002732:	f7ff faeb 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002736:	0003      	movs	r3, r0
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800273a:	e00c      	b.n	8002756 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002742:	e008      	b.n	8002756 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002748:	231a      	movs	r3, #26
 800274a:	2220      	movs	r2, #32
 800274c:	189b      	adds	r3, r3, r2
 800274e:	19db      	adds	r3, r3, r7
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
        break;
 8002754:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02a      	beq.n	80027b2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <UART_SetConfig+0x574>)
 8002762:	0052      	lsls	r2, r2, #1
 8002764:	5ad3      	ldrh	r3, [r2, r3]
 8002766:	0019      	movs	r1, r3
 8002768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800276a:	f7fd fccb 	bl	8000104 <__udivsi3>
 800276e:	0003      	movs	r3, r0
 8002770:	001a      	movs	r2, r3
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f7fd fcbf 	bl	8000104 <__udivsi3>
 8002786:	0003      	movs	r3, r0
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d90a      	bls.n	80027a6 <UART_SetConfig+0x53a>
 8002790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	429a      	cmp	r2, r3
 8002798:	d205      	bcs.n	80027a6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	b29a      	uxth	r2, r3
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	e005      	b.n	80027b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80027a6:	231a      	movs	r3, #26
 80027a8:	2220      	movs	r2, #32
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	19db      	adds	r3, r3, r7
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	226a      	movs	r2, #106	; 0x6a
 80027b6:	2101      	movs	r1, #1
 80027b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2268      	movs	r2, #104	; 0x68
 80027be:	2101      	movs	r1, #1
 80027c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	2200      	movs	r2, #0
 80027c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	2200      	movs	r2, #0
 80027cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80027ce:	231a      	movs	r3, #26
 80027d0:	2220      	movs	r2, #32
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	781b      	ldrb	r3, [r3, #0]
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b010      	add	sp, #64	; 0x40
 80027de:	bdb0      	pop	{r4, r5, r7, pc}
 80027e0:	08002e80 	.word	0x08002e80
 80027e4:	00f42400 	.word	0x00f42400

080027e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00b      	beq.n	8002812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a4a      	ldr	r2, [pc, #296]	; (800292c <UART_AdvFeatureConfig+0x144>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d00b      	beq.n	8002834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <UART_AdvFeatureConfig+0x148>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	2204      	movs	r2, #4
 800283a:	4013      	ands	r3, r2
 800283c:	d00b      	beq.n	8002856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <UART_AdvFeatureConfig+0x14c>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2208      	movs	r2, #8
 800285c:	4013      	ands	r3, r2
 800285e:	d00b      	beq.n	8002878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <UART_AdvFeatureConfig+0x150>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2210      	movs	r2, #16
 800287e:	4013      	ands	r3, r2
 8002880:	d00b      	beq.n	800289a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a2c      	ldr	r2, [pc, #176]	; (800293c <UART_AdvFeatureConfig+0x154>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	2220      	movs	r2, #32
 80028a0:	4013      	ands	r3, r2
 80028a2:	d00b      	beq.n	80028bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <UART_AdvFeatureConfig+0x158>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	4013      	ands	r3, r2
 80028c4:	d01d      	beq.n	8002902 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <UART_AdvFeatureConfig+0x15c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	035b      	lsls	r3, r3, #13
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10b      	bne.n	8002902 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <UART_AdvFeatureConfig+0x160>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	4013      	ands	r3, r2
 800290a:	d00b      	beq.n	8002924 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <UART_AdvFeatureConfig+0x164>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  }
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}
 800292c:	fffdffff 	.word	0xfffdffff
 8002930:	fffeffff 	.word	0xfffeffff
 8002934:	fffbffff 	.word	0xfffbffff
 8002938:	ffff7fff 	.word	0xffff7fff
 800293c:	ffffefff 	.word	0xffffefff
 8002940:	ffffdfff 	.word	0xffffdfff
 8002944:	ffefffff 	.word	0xffefffff
 8002948:	ff9fffff 	.word	0xff9fffff
 800294c:	fff7ffff 	.word	0xfff7ffff

08002950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2290      	movs	r2, #144	; 0x90
 800295c:	2100      	movs	r1, #0
 800295e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002960:	f7fe f9ba 	bl	8000cd8 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2208      	movs	r2, #8
 8002970:	4013      	ands	r3, r2
 8002972:	2b08      	cmp	r3, #8
 8002974:	d10c      	bne.n	8002990 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0391      	lsls	r1, r2, #14
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <UART_CheckIdleState+0x98>)
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	2200      	movs	r2, #0
 8002984:	f000 f832 	bl	80029ec <UART_WaitOnFlagUntilTimeout>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e026      	b.n	80029de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	2b04      	cmp	r3, #4
 800299c:	d10c      	bne.n	80029b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	03d1      	lsls	r1, r2, #15
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <UART_CheckIdleState+0x98>)
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f000 f81e 	bl	80029ec <UART_WaitOnFlagUntilTimeout>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d001      	beq.n	80029b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e012      	b.n	80029de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2288      	movs	r2, #136	; 0x88
 80029bc:	2120      	movs	r1, #32
 80029be:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	228c      	movs	r2, #140	; 0x8c
 80029c4:	2120      	movs	r1, #32
 80029c6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2284      	movs	r2, #132	; 0x84
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	01ffffff 	.word	0x01ffffff

080029ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b094      	sub	sp, #80	; 0x50
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fc:	e0a7      	b.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a00:	3301      	adds	r3, #1
 8002a02:	d100      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a04:	e0a3      	b.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a06:	f7fe f967 	bl	8000cd8 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d302      	bcc.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d13f      	bne.n	8002a9c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
 8002a26:	2301      	movs	r3, #1
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	494e      	ldr	r1, [pc, #312]	; (8002b78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a3e:	400a      	ands	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a56:	643b      	str	r3, [r7, #64]	; 0x40
 8002a58:	2301      	movs	r3, #1
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	f383 8810 	msr	PRIMASK, r3
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2101      	movs	r1, #1
 8002a70:	438a      	bics	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2288      	movs	r2, #136	; 0x88
 8002a84:	2120      	movs	r1, #32
 8002a86:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	228c      	movs	r2, #140	; 0x8c
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2284      	movs	r2, #132	; 0x84
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e069      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d052      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d148      	bne.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aca:	613b      	str	r3, [r7, #16]
  return(result);
 8002acc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f383 8810 	msr	PRIMASK, r3
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4924      	ldr	r1, [pc, #144]	; (8002b78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002afe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b02:	2301      	movs	r3, #1
 8002b04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	f383 8810 	msr	PRIMASK, r3
}
 8002b28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2288      	movs	r2, #136	; 0x88
 8002b2e:	2120      	movs	r1, #32
 8002b30:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	228c      	movs	r2, #140	; 0x8c
 8002b36:	2120      	movs	r1, #32
 8002b38:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2290      	movs	r2, #144	; 0x90
 8002b3e:	2120      	movs	r1, #32
 8002b40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2284      	movs	r2, #132	; 0x84
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e010      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	425a      	negs	r2, r3
 8002b5e:	4153      	adcs	r3, r2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	001a      	movs	r2, r3
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d100      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x182>
 8002b6c:	e747      	b.n	80029fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b014      	add	sp, #80	; 0x50
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	fffffe5f 	.word	0xfffffe5f

08002b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2284      	movs	r2, #132	; 0x84
 8002b88:	5c9b      	ldrb	r3, [r3, r2]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e027      	b.n	8002be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2284      	movs	r2, #132	; 0x84
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2288      	movs	r2, #136	; 0x88
 8002b9e:	2124      	movs	r1, #36	; 0x24
 8002ba0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_UARTEx_DisableFifoMode+0x70>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2288      	movs	r2, #136	; 0x88
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2284      	movs	r2, #132	; 0x84
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	dfffffff 	.word	0xdfffffff

08002bf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2284      	movs	r2, #132	; 0x84
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e02e      	b.n	8002c66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2284      	movs	r2, #132	; 0x84
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2288      	movs	r2, #136	; 0x88
 8002c14:	2124      	movs	r1, #36	; 0x24
 8002c16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	08d9      	lsrs	r1, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f854 	bl	8002cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2288      	movs	r2, #136	; 0x88
 8002c58:	2120      	movs	r1, #32
 8002c5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2284      	movs	r2, #132	; 0x84
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2284      	movs	r2, #132	; 0x84
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e02f      	b.n	8002ce8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2284      	movs	r2, #132	; 0x84
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2288      	movs	r2, #136	; 0x88
 8002c94:	2124      	movs	r1, #36	; 0x24
 8002c96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f813 	bl	8002cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2288      	movs	r2, #136	; 0x88
 8002cda:	2120      	movs	r1, #32
 8002cdc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2284      	movs	r2, #132	; 0x84
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	f1ffffff 	.word	0xf1ffffff

08002cf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d108      	bne.n	8002d16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	226a      	movs	r2, #106	; 0x6a
 8002d08:	2101      	movs	r1, #1
 8002d0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2268      	movs	r2, #104	; 0x68
 8002d10:	2101      	movs	r1, #1
 8002d12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d14:	e043      	b.n	8002d9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d16:	260f      	movs	r6, #15
 8002d18:	19bb      	adds	r3, r7, r6
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d1e:	200e      	movs	r0, #14
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	2208      	movs	r2, #8
 8002d24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	0e5b      	lsrs	r3, r3, #25
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	240d      	movs	r4, #13
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	2107      	movs	r1, #7
 8002d36:	400a      	ands	r2, r1
 8002d38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	0f5b      	lsrs	r3, r3, #29
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	250c      	movs	r5, #12
 8002d46:	197b      	adds	r3, r7, r5
 8002d48:	2107      	movs	r1, #7
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	197a      	adds	r2, r7, r5
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	4914      	ldr	r1, [pc, #80]	; (8002da8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d58:	5c8a      	ldrb	r2, [r1, r2]
 8002d5a:	435a      	muls	r2, r3
 8002d5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d5e:	197b      	adds	r3, r7, r5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <UARTEx_SetNbDataToProcess+0xb8>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d66:	0019      	movs	r1, r3
 8002d68:	f7fd fa56 	bl	8000218 <__divsi3>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	b299      	uxth	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	226a      	movs	r2, #106	; 0x6a
 8002d74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d76:	19bb      	adds	r3, r7, r6
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	193a      	adds	r2, r7, r4
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d80:	5c8a      	ldrb	r2, [r1, r2]
 8002d82:	435a      	muls	r2, r3
 8002d84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <UARTEx_SetNbDataToProcess+0xb8>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d8e:	0019      	movs	r1, r3
 8002d90:	f7fd fa42 	bl	8000218 <__divsi3>
 8002d94:	0003      	movs	r3, r0
 8002d96:	b299      	uxth	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2268      	movs	r2, #104	; 0x68
 8002d9c:	5299      	strh	r1, [r3, r2]
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b005      	add	sp, #20
 8002da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	08002e98 	.word	0x08002e98
 8002dac:	08002ea0 	.word	0x08002ea0

08002db0 <memset>:
 8002db0:	0003      	movs	r3, r0
 8002db2:	1882      	adds	r2, r0, r2
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	7019      	strb	r1, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	; (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	f000 f819 	bl	8002e08 <_init>
 8002dd6:	4c0a      	ldr	r4, [pc, #40]	; (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4d0a      	ldr	r5, [pc, #40]	; (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	00b3      	lsls	r3, r6, #2
 8002de6:	58eb      	ldr	r3, [r5, r3]
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	00b3      	lsls	r3, r6, #2
 8002df0:	58eb      	ldr	r3, [r5, r3]
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08002eb0 	.word	0x08002eb0
 8002dfc:	08002eb0 	.word	0x08002eb0
 8002e00:	08002eb4 	.word	0x08002eb4
 8002e04:	08002eb0 	.word	0x08002eb0

08002e08 <_init>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr

08002e14 <_fini>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1a:	bc08      	pop	{r3}
 8002e1c:	469e      	mov	lr, r3
 8002e1e:	4770      	bx	lr
