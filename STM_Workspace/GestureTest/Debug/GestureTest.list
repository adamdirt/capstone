
GestureTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000623c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000157f0  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bae8  0801bae8  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bae8  0801bae8  0002bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801baf0  0801baf0  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801baf0  0801baf0  0002baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801baf4  0801baf4  0002baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801baf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  2000000c  0801bb04  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  0801bb04  00031118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001025c  00000000  00000000  00030077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000259f  00000000  00000000  000402d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00042878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00043528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019635  00000000  00000000  00043f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011589  00000000  00000000  0005d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb46  00000000  00000000  0006eace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d6c  00000000  00000000  0010a614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0010d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080062e0 	.word	0x080062e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080062e0 	.word	0x080062e0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8d8 	bl	8000604 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8d3 	bl	8000604 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzsi2>:
 80005c8:	211c      	movs	r1, #28
 80005ca:	2301      	movs	r3, #1
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	4298      	cmp	r0, r3
 80005d0:	d301      	bcc.n	80005d6 <__clzsi2+0xe>
 80005d2:	0c00      	lsrs	r0, r0, #16
 80005d4:	3910      	subs	r1, #16
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	4298      	cmp	r0, r3
 80005da:	d301      	bcc.n	80005e0 <__clzsi2+0x18>
 80005dc:	0a00      	lsrs	r0, r0, #8
 80005de:	3908      	subs	r1, #8
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0x22>
 80005e6:	0900      	lsrs	r0, r0, #4
 80005e8:	3904      	subs	r1, #4
 80005ea:	a202      	add	r2, pc, #8	; (adr r2, 80005f4 <__clzsi2+0x2c>)
 80005ec:	5c10      	ldrb	r0, [r2, r0]
 80005ee:	1840      	adds	r0, r0, r1
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	02020304 	.word	0x02020304
 80005f8:	01010101 	.word	0x01010101
	...

08000604 <__clzdi2>:
 8000604:	b510      	push	{r4, lr}
 8000606:	2900      	cmp	r1, #0
 8000608:	d103      	bne.n	8000612 <__clzdi2+0xe>
 800060a:	f7ff ffdd 	bl	80005c8 <__clzsi2>
 800060e:	3020      	adds	r0, #32
 8000610:	e002      	b.n	8000618 <__clzdi2+0x14>
 8000612:	0008      	movs	r0, r1
 8000614:	f7ff ffd8 	bl	80005c8 <__clzsi2>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	is_alive = 0;
 8000622:	4b48      	ldr	r3, [pc, #288]	; (8000744 <main+0x128>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	is_ready = 0;
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <main+0x12c>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	Sensor1Cfg.platform.address = 0x52;
 800062e:	4b47      	ldr	r3, [pc, #284]	; (800074c <main+0x130>)
 8000630:	2252      	movs	r2, #82	; 0x52
 8000632:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fc2e 	bl	8000e94 <HAL_Init>

  /* USER CODE BEGIN Init */
//  HAL_GPIO_WritePin(AVDD_GPIO_Port, AVDD_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(IOVDD_GPIO_Port, IOVDD_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LPn_GPIO_Port, LPn_Pin, GPIO_PIN_SET);
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2201      	movs	r2, #1
 800063e:	2102      	movs	r1, #2
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fee9 	bl	8001418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C_RST_GPIO_Port, I2C_RST_Pin, GPIO_PIN_RESET);
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	2101      	movs	r1, #1
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fee2 	bl	8001418 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f87e 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f952 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f902 	bl	8000864 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000660:	f000 f8c0 	bl	80007e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t init_status = init_tof(&Sensor1Cfg);
 8000664:	1dfc      	adds	r4, r7, #7
 8000666:	4b39      	ldr	r3, [pc, #228]	; (800074c <main+0x130>)
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fb7f 	bl	8000d6c <init_tof>
 800066e:	0003      	movs	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t samples = 0;
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  init_status |= vl53l5cx_start_ranging(&Sensor1Cfg);
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <main+0x130>)
 800067a:	0018      	movs	r0, r3
 800067c:	f004 fd5c 	bl	8005138 <vl53l5cx_start_ranging>
 8000680:	0003      	movs	r3, r0
 8000682:	0019      	movs	r1, r3
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	1dfa      	adds	r2, r7, #7
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	430a      	orrs	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
	  }

#endif

#ifdef DO_DISTANCE_TEST
	  samples++;
 800068e:	1dbb      	adds	r3, r7, #6
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	3201      	adds	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]

	  init_status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <main+0x134>)
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <main+0x130>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fb9f 	bl	8000de2 <sample_once>
 80006a4:	0003      	movs	r3, r0
 80006a6:	0019      	movs	r1, r3
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	1dfa      	adds	r2, r7, #7
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
	  uint8_t i;
	  uint16_t lowest = 0xFFFFU;
 80006b2:	1cbb      	adds	r3, r7, #2
 80006b4:	2201      	movs	r2, #1
 80006b6:	4252      	negs	r2, r2
 80006b8:	801a      	strh	r2, [r3, #0]
	  for (i = 0; i < 16; i++){
 80006ba:	1d7b      	adds	r3, r7, #5
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e01a      	b.n	80006f8 <main+0xdc>
		  uint16_t cur_read = Sensor1Results.distance_mm[i];
 80006c2:	1d7b      	adds	r3, r7, #5
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4a22      	ldr	r2, [pc, #136]	; (8000750 <main+0x134>)
 80006c8:	33e1      	adds	r3, #225	; 0xe1
 80006ca:	33ff      	adds	r3, #255	; 0xff
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	18d3      	adds	r3, r2, r3
 80006d0:	3304      	adds	r3, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	5e9a      	ldrsh	r2, [r3, r2]
 80006d6:	003b      	movs	r3, r7
 80006d8:	801a      	strh	r2, [r3, #0]
		  if (cur_read < lowest){
 80006da:	003a      	movs	r2, r7
 80006dc:	1cbb      	adds	r3, r7, #2
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d203      	bcs.n	80006ee <main+0xd2>
			  lowest = cur_read;
 80006e6:	1cbb      	adds	r3, r7, #2
 80006e8:	003a      	movs	r2, r7
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	801a      	strh	r2, [r3, #0]
	  for (i = 0; i < 16; i++){
 80006ee:	1d7b      	adds	r3, r7, #5
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	1d7b      	adds	r3, r7, #5
 80006f4:	3201      	adds	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	1d7b      	adds	r3, r7, #5
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d9e0      	bls.n	80006c2 <main+0xa6>
		  }
	  }

	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2120      	movs	r1, #32
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fea3 	bl	8001452 <HAL_GPIO_TogglePin>
	  HAL_Delay(lowest);
 800070c:	1cbb      	adds	r3, r7, #2
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fc45 	bl	8000fa0 <HAL_Delay>

	  if (samples >= 100){
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b63      	cmp	r3, #99	; 0x63
 800071c:	d9b7      	bls.n	800068e <main+0x72>
	  		  init_status |= vl53l5cx_stop_ranging(&Sensor1Cfg);
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <main+0x130>)
 8000720:	0018      	movs	r0, r3
 8000722:	f004 febb 	bl	800549c <vl53l5cx_stop_ranging>
 8000726:	0003      	movs	r3, r0
 8000728:	0019      	movs	r1, r3
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	1dfa      	adds	r2, r7, #7
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	430a      	orrs	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
	  		  while (1){
	  			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2201      	movs	r2, #1
 800073a:	2120      	movs	r1, #32
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fe6b 	bl	8001418 <HAL_GPIO_WritePin>
 8000742:	e7f7      	b.n	8000734 <main+0x118>
 8000744:	20001110 	.word	0x20001110
 8000748:	20001111 	.word	0x20001111
 800074c:	20000110 	.word	0x20000110
 8000750:	20000bc0 	.word	0x20000bc0

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b093      	sub	sp, #76	; 0x4c
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	2410      	movs	r4, #16
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	2338      	movs	r3, #56	; 0x38
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f005 fd85 	bl	8006274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076a:	003b      	movs	r3, r7
 800076c:	0018      	movs	r0, r3
 800076e:	2310      	movs	r3, #16
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f005 fd7e 	bl	8006274 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fde3 	bl	8002348 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2240      	movs	r2, #64	; 0x40
 800079a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fe1b 	bl	80023e0 <HAL_RCC_OscConfig>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007ae:	f000 f9d5 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	003b      	movs	r3, r7
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	003b      	movs	r3, r7
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 f920 	bl	8002a14 <HAL_RCC_ClockConfig>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007d8:	f000 f9c0 	bl	8000b5c <Error_Handler>
  }
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b013      	add	sp, #76	; 0x4c
 80007e2:	bd90      	pop	{r4, r7, pc}

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C1_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C1_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2C1_Init+0x74>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fe31 	bl	8001488 <HAL_I2C_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 f997 	bl	8000b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_I2C1_Init+0x74>)
 8000830:	2100      	movs	r1, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fcf0 	bl	8002218 <HAL_I2CEx_ConfigAnalogFilter>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 f98e 	bl	8000b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MX_I2C1_Init+0x74>)
 8000842:	2100      	movs	r1, #0
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fd33 	bl	80022b0 <HAL_I2CEx_ConfigDigitalFilter>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f985 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000028 	.word	0x20000028
 800085c:	40005400 	.word	0x40005400
 8000860:	0010061a 	.word	0x0010061a

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_USART2_UART_Init+0x98>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 fc12 	bl	80030d8 <HAL_UART_Init>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f950 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f003 f921 	bl	8003b08 <HAL_UARTEx_SetTxFifoThreshold>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 f947 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f003 f958 	bl	8003b88 <HAL_UARTEx_SetRxFifoThreshold>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f93e 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f003 f8d6 	bl	8003a94 <HAL_UARTEx_DisableFifoMode>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f936 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	2000007c 	.word	0x2000007c
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	2414      	movs	r4, #20
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f005 fcaf 	bl	8006274 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b89      	ldr	r3, [pc, #548]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b88      	ldr	r3, [pc, #544]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800091c:	2104      	movs	r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b86      	ldr	r3, [pc, #536]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2204      	movs	r2, #4
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092e:	4b83      	ldr	r3, [pc, #524]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b82      	ldr	r3, [pc, #520]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000934:	2120      	movs	r1, #32
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b80      	ldr	r3, [pc, #512]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2220      	movs	r2, #32
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b7d      	ldr	r3, [pc, #500]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b7c      	ldr	r3, [pc, #496]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b7a      	ldr	r3, [pc, #488]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b77      	ldr	r3, [pc, #476]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000964:	2102      	movs	r1, #2
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b74      	ldr	r3, [pc, #464]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2202      	movs	r2, #2
 8000970:	4013      	ands	r3, r2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b71      	ldr	r3, [pc, #452]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b70      	ldr	r3, [pc, #448]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800097c:	2108      	movs	r1, #8
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b6e      	ldr	r3, [pc, #440]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2208      	movs	r2, #8
 8000988:	4013      	ands	r3, r2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LPn1_Pin|LPn2_Pin|LPn3_Pin|LPn4_Pin, GPIO_PIN_RESET);
 800098e:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <MX_GPIO_Init+0x240>)
 8000990:	2200      	movs	r2, #0
 8000992:	210f      	movs	r1, #15
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fd3f 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_RST_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2200      	movs	r2, #0
 80009a0:	2121      	movs	r1, #33	; 0x21
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fd38 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LPn_Pin|PWR_EN_Pin, GPIO_PIN_SET);
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2201      	movs	r2, #1
 80009ae:	2142      	movs	r1, #66	; 0x42
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fd31 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	4a62      	ldr	r2, [pc, #392]	; (8000b44 <MX_GPIO_Init+0x244>)
 80009ba:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2203      	movs	r2, #3
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	4a5d      	ldr	r2, [pc, #372]	; (8000b40 <MX_GPIO_Init+0x240>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f000 fbbe 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2206      	movs	r2, #6
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2203      	movs	r2, #3
 80009de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	4a57      	ldr	r2, [pc, #348]	; (8000b48 <MX_GPIO_Init+0x248>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f000 fbaf 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn3_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn3_Pin|LPn4_Pin;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	220f      	movs	r2, #15
 80009f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2201      	movs	r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <MX_GPIO_Init+0x240>)
 8000a0e:	0019      	movs	r1, r3
 8000a10:	0010      	movs	r0, r2
 8000a12:	f000 fb9d 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_Pin */
  GPIO_InitStruct.Pin = I2C_RST_Pin;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2201      	movs	r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2202      	movs	r2, #2
 8000a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_RST_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	193a      	adds	r2, r7, r4
 8000a30:	23a0      	movs	r3, #160	; 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fb8a 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = LPn_Pin|PWR_EN_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2242      	movs	r2, #66	; 0x42
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb77 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	4a39      	ldr	r2, [pc, #228]	; (8000b4c <MX_GPIO_Init+0x24c>)
 8000a66:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	193a      	adds	r2, r7, r4
 8000a76:	23a0      	movs	r3, #160	; 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fb67 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2220      	movs	r2, #32
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	193a      	adds	r2, r7, r4
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fb54 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <MX_GPIO_Init+0x250>)
 8000aac:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <MX_GPIO_Init+0x254>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f000 fb45 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0152      	lsls	r2, r2, #5
 8000ace:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2288      	movs	r2, #136	; 0x88
 8000ad4:	0352      	lsls	r2, r2, #13
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000ade:	000c      	movs	r4, r1
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_GPIO_Init+0x254>)
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	f000 fb32 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 8000aec:	0021      	movs	r1, r4
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	22dc      	movs	r2, #220	; 0xdc
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	000c      	movs	r4, r1
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2203      	movs	r2, #3
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f000 fb20 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_INT1_Pin PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = ToF_INT1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	220f      	movs	r2, #15
 8000b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2288      	movs	r2, #136	; 0x88
 8000b1c:	0352      	lsls	r2, r2, #13
 8000b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fb0f 	bl	8001150 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b00b      	add	sp, #44	; 0x2c
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	50000800 	.word	0x50000800
 8000b44:	00001ff0 	.word	0x00001ff0
 8000b48:	50001400 	.word	0x50001400
 8000b4c:	00009f90 	.word	0x00009f90
 8000b50:	0000ecff 	.word	0x0000ecff
 8000b54:	50000400 	.word	0x50000400
 8000b58:	50000c00 	.word	0x50000c00

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0549      	lsls	r1, r1, #21
 8000b90:	430a      	orrs	r2, r1
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_MspInit+0x44>)
 8000b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	055b      	lsls	r3, r3, #21
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b097      	sub	sp, #92	; 0x5c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2344      	movs	r3, #68	; 0x44
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f005 fb56 	bl	8006274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	2410      	movs	r4, #16
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2334      	movs	r3, #52	; 0x34
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f005 fb4e 	bl	8006274 <memset>
  if(hi2c->Instance==I2C1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_I2C_MspInit+0xb8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13e      	bne.n	8000c60 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2220      	movs	r2, #32
 8000be6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 f8b9 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff ffaf 	bl	8000b5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c04:	2102      	movs	r1, #2
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	2144      	movs	r1, #68	; 0x44
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	22c0      	movs	r2, #192	; 0xc0
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2212      	movs	r2, #18
 8000c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2201      	movs	r2, #1
 8000c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2206      	movs	r2, #6
 8000c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_I2C_MspInit+0xc0>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 fa86 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	0389      	lsls	r1, r1, #14
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	039b      	lsls	r3, r3, #14
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b017      	add	sp, #92	; 0x5c
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	50000400 	.word	0x50000400

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b097      	sub	sp, #92	; 0x5c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	2344      	movs	r3, #68	; 0x44
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	2314      	movs	r3, #20
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f005 faf4 	bl	8006274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	2410      	movs	r4, #16
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2334      	movs	r3, #52	; 0x34
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f005 faec 	bl	8006274 <memset>
  if(huart->Instance==USART2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d13e      	bne.n	8000d24 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2202      	movs	r2, #2
 8000caa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 f857 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff ff4d 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0289      	lsls	r1, r1, #10
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cf6:	2144      	movs	r1, #68	; 0x44
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fa16 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b017      	add	sp, #92	; 0x5c
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f906 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <init_tof>:
extern GW_proc_t gest_predictor;
extern HT_proc_t hand_tracker;
extern SEN_data_t sensor_data;
#endif

uint8_t init_tof(VL53L5CX_Configuration	*config){
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L5CX_STATUS_OK;
 8000d74:	240f      	movs	r4, #15
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_init(config);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f003 fcbe 	bl	8004700 <vl53l5cx_init>
 8000d84:	0003      	movs	r3, r0
 8000d86:	0019      	movs	r1, r3
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	193a      	adds	r2, r7, r4
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8000d92:	23fa      	movs	r3, #250	; 0xfa
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f902 	bl	8000fa0 <HAL_Delay>
	//@todo more initialization
	status |= vl53l5cx_set_resolution(config, VL53L5CX_RESOLUTION_8X8);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	0018      	movs	r0, r3
 8000da2:	f004 ff81 	bl	8005ca8 <vl53l5cx_set_resolution>
 8000da6:	0003      	movs	r3, r0
 8000da8:	0019      	movs	r1, r3
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	193a      	adds	r2, r7, r4
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_set_ranging_frequency_hz(config, 10);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	210a      	movs	r1, #10
 8000db8:	0018      	movs	r0, r3
 8000dba:	f005 f86f 	bl	8005e9c <vl53l5cx_set_ranging_frequency_hz>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	193a      	adds	r2, r7, r4
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000dcc:	23fa      	movs	r3, #250	; 0xfa
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 f8e5 	bl	8000fa0 <HAL_Delay>
	status |= GW_init(&gest_predictor, &hand_tracker, &sensor_data);
	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53L5CX_RESOLUTION_8X8);
	status |= GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0/50);
#endif

	return status;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	781b      	ldrb	r3, [r3, #0]
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b005      	add	sp, #20
 8000de0:	bd90      	pop	{r4, r7, pc}

08000de2 <sample_once>:


uint8_t sample_once(VL53L5CX_Configuration* config, VL53L5CX_ResultsData* results){
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
	uint8_t is_ready = 0;
 8000df4:	230e      	movs	r3, #14
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]

	while(is_ready == 0){ // poll ;)
 8000dfc:	e00e      	b.n	8000e1c <sample_once+0x3a>
		status |= vl53l5cx_check_data_ready(config, &is_ready);
 8000dfe:	230e      	movs	r3, #14
 8000e00:	18fa      	adds	r2, r7, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0011      	movs	r1, r2
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 fc50 	bl	80056ac <vl53l5cx_check_data_ready>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	0019      	movs	r1, r3
 8000e10:	220f      	movs	r2, #15
 8000e12:	18bb      	adds	r3, r7, r2
 8000e14:	18ba      	adds	r2, r7, r2
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
	while(is_ready == 0){ // poll ;)
 8000e1c:	230e      	movs	r3, #14
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0eb      	beq.n	8000dfe <sample_once+0x1c>
	}
	vl53l5cx_get_ranging_data(config, results);
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f004 fca1 	bl	8005774 <vl53l5cx_get_ranging_data>

	return status;
 8000e32:	230f      	movs	r3, #15
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	781b      	ldrb	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b004      	add	sp, #16
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e44:	f7ff ff8d 	bl	8000d62 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e6e:	f005 fa09 	bl	8006284 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e72:	f7ff fbd3 	bl	800061c <main>

08000e76 <LoopForever>:

LoopForever:
  b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   r0, =_estack
 8000e78:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	0801baf8 	.word	0x0801baf8
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	20001118 	.word	0x20001118

08000e90 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_COMP_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x3c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Init+0x3c>)
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	0049      	lsls	r1, r1, #1
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f810 	bl	8000ed4 <HAL_InitTick>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e001      	b.n	8000ec4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe52 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_InitTick+0x88>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d02b      	beq.n	8000f44 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_InitTick+0x8c>)
 8000eee:	681c      	ldr	r4, [r3, #0]
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_InitTick+0x88>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	23fa      	movs	r3, #250	; 0xfa
 8000ef8:	0098      	lsls	r0, r3, #2
 8000efa:	f7ff f903 	bl	8000104 <__udivsi3>
 8000efe:	0003      	movs	r3, r0
 8000f00:	0019      	movs	r1, r3
 8000f02:	0020      	movs	r0, r4
 8000f04:	f7ff f8fe 	bl	8000104 <__udivsi3>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 f913 	bl	8001136 <HAL_SYSTICK_Config>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d112      	bne.n	8000f3a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d80a      	bhi.n	8000f30 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	425b      	negs	r3, r3
 8000f20:	2200      	movs	r2, #0
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f8f2 	bl	800110c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_InitTick+0x90>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e00d      	b.n	8000f4c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e008      	b.n	8000f4c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e003      	b.n	8000f4c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	781b      	ldrb	r3, [r3, #0]
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b005      	add	sp, #20
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	18d2      	adds	r2, r2, r3
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20001114 	.word	0x20001114

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	20001114 	.word	0x20001114

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff0 	bl	8000f8c <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	f7ff ffe0 	bl	8000f8c <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffc:	d828      	bhi.n	8001050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <__NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	33c0      	adds	r3, #192	; 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	589b      	ldr	r3, [r3, r2]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	481f      	ldr	r0, [pc, #124]	; (80010bc <__NVIC_SetPriority+0xd4>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	33c0      	adds	r3, #192	; 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104e:	e031      	b.n	80010b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0019      	movs	r1, r3
 8001058:	230f      	movs	r3, #15
 800105a:	400b      	ands	r3, r1
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3306      	adds	r3, #6
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	; 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	; 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001c      	movs	r4, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18c3      	adds	r3, r0, r3
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d301      	bcc.n	80010dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d8:	2301      	movs	r3, #1
 80010da:	e010      	b.n	80010fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <SysTick_Config+0x44>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff7c 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x44>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ffbf 	bl	80010c4 <SysTick_Config>
 8001146:	0003      	movs	r3, r0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e147      	b.n	80013f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x28>
 8001176:	e138      	b.n	80013ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	4013      	ands	r3, r2
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	409a      	lsls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	2201      	movs	r2, #1
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2203      	movs	r2, #3
 8001234:	4013      	ands	r3, r2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2207      	movs	r2, #7
 800124c:	4013      	ands	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2107      	movs	r1, #7
 8001266:	400b      	ands	r3, r1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	401a      	ands	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4013      	ands	r3, r2
 80012c0:	d100      	bne.n	80012c4 <HAL_GPIO_Init+0x174>
 80012c2:	e092      	b.n	80013ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012c4:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3318      	adds	r3, #24
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	589b      	ldr	r3, [r3, r2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4013      	ands	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	220f      	movs	r2, #15
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	23a0      	movs	r3, #160	; 0xa0
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x1ca>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a45      	ldr	r2, [pc, #276]	; (800140c <HAL_GPIO_Init+0x2bc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x1c6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a44      	ldr	r2, [pc, #272]	; (8001410 <HAL_GPIO_Init+0x2c0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x1c2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a43      	ldr	r2, [pc, #268]	; (8001414 <HAL_GPIO_Init+0x2c4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x1be>
 800130a:	2303      	movs	r3, #3
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 800130e:	2305      	movs	r3, #5
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 800131a:	2300      	movs	r3, #0
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	2103      	movs	r1, #3
 8001320:	400a      	ands	r2, r1
 8001322:	00d2      	lsls	r2, r2, #3
 8001324:	4093      	lsls	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800132c:	4936      	ldr	r1, [pc, #216]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3318      	adds	r3, #24
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	035b      	lsls	r3, r3, #13
 8001352:	4013      	ands	r3, r2
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43da      	mvns	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	039b      	lsls	r3, r3, #14
 800137c:	4013      	ands	r3, r2
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 8001390:	2384      	movs	r3, #132	; 0x84
 8001392:	58d3      	ldr	r3, [r2, r3]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43da      	mvns	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	4013      	ands	r3, r2
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b4:	4914      	ldr	r1, [pc, #80]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80013b6:	2284      	movs	r2, #132	; 0x84
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	58d3      	ldr	r3, [r2, r3]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	4013      	ands	r3, r2
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e2:	4909      	ldr	r1, [pc, #36]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	40da      	lsrs	r2, r3
 80013f8:	1e13      	subs	r3, r2, #0
 80013fa:	d000      	beq.n	80013fe <HAL_GPIO_Init+0x2ae>
 80013fc:	e6b0      	b.n	8001160 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b006      	add	sp, #24
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021800 	.word	0x40021800
 800140c:	50000400 	.word	0x50000400
 8001410:	50000800 	.word	0x50000800
 8001414:	50000c00 	.word	0x50000c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	0008      	movs	r0, r1
 8001422:	0011      	movs	r1, r2
 8001424:	1cbb      	adds	r3, r7, #2
 8001426:	1c02      	adds	r2, r0, #0
 8001428:	801a      	strh	r2, [r3, #0]
 800142a:	1c7b      	adds	r3, r7, #1
 800142c:	1c0a      	adds	r2, r1, #0
 800142e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001430:	1c7b      	adds	r3, r7, #1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001438:	1cbb      	adds	r3, r7, #2
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e003      	b.n	800144a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	1cbb      	adds	r3, r7, #2
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	000a      	movs	r2, r1
 800145c:	1cbb      	adds	r3, r7, #2
 800145e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001466:	1cbb      	adds	r3, r7, #2
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	1cb9      	adds	r1, r7, #2
 8001476:	8809      	ldrh	r1, [r1, #0]
 8001478:	400b      	ands	r3, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e082      	b.n	80015a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2241      	movs	r2, #65	; 0x41
 800149e:	5c9b      	ldrb	r3, [r3, r2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fb7d 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2241      	movs	r2, #65	; 0x41
 80014ba:	2124      	movs	r1, #36	; 0x24
 80014bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	438a      	bics	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4934      	ldr	r1, [pc, #208]	; (80015a8 <HAL_I2C_Init+0x120>)
 80014d8:	400a      	ands	r2, r1
 80014da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4931      	ldr	r1, [pc, #196]	; (80015ac <HAL_I2C_Init+0x124>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0209      	lsls	r1, r1, #8
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e007      	b.n	8001516 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2184      	movs	r1, #132	; 0x84
 8001510:	0209      	lsls	r1, r1, #8
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d104      	bne.n	8001528 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	491f      	ldr	r1, [pc, #124]	; (80015b0 <HAL_I2C_Init+0x128>)
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	491a      	ldr	r1, [pc, #104]	; (80015ac <HAL_I2C_Init+0x124>)
 8001544:	400a      	ands	r2, r1
 8001546:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	431a      	orrs	r2, r3
 8001552:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69d9      	ldr	r1, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2241      	movs	r2, #65	; 0x41
 800158c:	2120      	movs	r1, #32
 800158e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2242      	movs	r2, #66	; 0x42
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	f0ffffff 	.word	0xf0ffffff
 80015ac:	ffff7fff 	.word	0xffff7fff
 80015b0:	02008000 	.word	0x02008000

080015b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	0008      	movs	r0, r1
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	0019      	movs	r1, r3
 80015c2:	230a      	movs	r3, #10
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	1c02      	adds	r2, r0, #0
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	2308      	movs	r3, #8
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	1c0a      	adds	r2, r1, #0
 80015d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2241      	movs	r2, #65	; 0x41
 80015d6:	5c9b      	ldrb	r3, [r3, r2]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d000      	beq.n	80015e0 <HAL_I2C_Master_Transmit+0x2c>
 80015de:	e0e7      	b.n	80017b0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2240      	movs	r2, #64	; 0x40
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_I2C_Master_Transmit+0x3a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e0e1      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1fe>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015f6:	f7ff fcc9 	bl	8000f8c <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	0219      	lsls	r1, r3, #8
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2319      	movs	r3, #25
 800160a:	2201      	movs	r2, #1
 800160c:	f000 fb96 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2241      	movs	r2, #65	; 0x41
 800161c:	2121      	movs	r1, #33	; 0x21
 800161e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2242      	movs	r2, #66	; 0x42
 8001624:	2110      	movs	r1, #16
 8001626:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2208      	movs	r2, #8
 8001638:	18ba      	adds	r2, r7, r2
 800163a:	8812      	ldrh	r2, [r2, #0]
 800163c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d911      	bls.n	8001672 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	22ff      	movs	r2, #255	; 0xff
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	b2da      	uxtb	r2, r3
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	045c      	lsls	r4, r3, #17
 800165e:	230a      	movs	r3, #10
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	8819      	ldrh	r1, [r3, #0]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_I2C_Master_Transmit+0x208>)
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	0023      	movs	r3, r4
 800166c:	f000 fd9a 	bl	80021a4 <I2C_TransferConfig>
 8001670:	e075      	b.n	800175e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	b2da      	uxtb	r2, r3
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	049c      	lsls	r4, r3, #18
 8001686:	230a      	movs	r3, #10
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	8819      	ldrh	r1, [r3, #0]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_I2C_Master_Transmit+0x208>)
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	0023      	movs	r3, r4
 8001694:	f000 fd86 	bl	80021a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001698:	e061      	b.n	800175e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 fb8a 	bl	8001dba <I2C_WaitOnTXISFlagUntilTimeout>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e081      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03a      	beq.n	800175e <HAL_I2C_Master_Transmit+0x1aa>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d136      	bne.n	800175e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	0013      	movs	r3, r2
 80016fa:	2200      	movs	r2, #0
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	f000 fb1d 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e053      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170e:	b29b      	uxth	r3, r3
 8001710:	2bff      	cmp	r3, #255	; 0xff
 8001712:	d911      	bls.n	8001738 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	b2da      	uxtb	r2, r3
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	045c      	lsls	r4, r3, #17
 8001724:	230a      	movs	r3, #10
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	8819      	ldrh	r1, [r3, #0]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	2300      	movs	r3, #0
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	0023      	movs	r3, r4
 8001732:	f000 fd37 	bl	80021a4 <I2C_TransferConfig>
 8001736:	e012      	b.n	800175e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	b2da      	uxtb	r2, r3
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	049c      	lsls	r4, r3, #18
 800174c:	230a      	movs	r3, #10
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	8819      	ldrh	r1, [r3, #0]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	0023      	movs	r3, r4
 800175a:	f000 fd23 	bl	80021a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d198      	bne.n	800169a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fb62 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e01a      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2220      	movs	r2, #32
 8001782:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	490c      	ldr	r1, [pc, #48]	; (80017c0 <HAL_I2C_Master_Transmit+0x20c>)
 8001790:	400a      	ands	r2, r1
 8001792:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2241      	movs	r2, #65	; 0x41
 8001798:	2120      	movs	r1, #32
 800179a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2242      	movs	r2, #66	; 0x42
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
  }
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b007      	add	sp, #28
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	80002000 	.word	0x80002000
 80017c0:	fe00e800 	.word	0xfe00e800

080017c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	0008      	movs	r0, r1
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	0019      	movs	r1, r3
 80017d2:	230a      	movs	r3, #10
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	1c02      	adds	r2, r0, #0
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	2308      	movs	r3, #8
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	1c0a      	adds	r2, r1, #0
 80017e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2241      	movs	r2, #65	; 0x41
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d000      	beq.n	80017f0 <HAL_I2C_Master_Receive+0x2c>
 80017ee:	e0e8      	b.n	80019c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Master_Receive+0x3a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e0e2      	b.n	80019c4 <HAL_I2C_Master_Receive+0x200>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	2101      	movs	r1, #1
 8001804:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001806:	f7ff fbc1 	bl	8000f8c <HAL_GetTick>
 800180a:	0003      	movs	r3, r0
 800180c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	0219      	lsls	r1, r3, #8
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2319      	movs	r3, #25
 800181a:	2201      	movs	r2, #1
 800181c:	f000 fa8e 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0cd      	b.n	80019c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2241      	movs	r2, #65	; 0x41
 800182c:	2122      	movs	r1, #34	; 0x22
 800182e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2242      	movs	r2, #66	; 0x42
 8001834:	2110      	movs	r1, #16
 8001836:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2208      	movs	r2, #8
 8001848:	18ba      	adds	r2, r7, r2
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d911      	bls.n	8001882 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	22ff      	movs	r2, #255	; 0xff
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	045c      	lsls	r4, r3, #17
 800186e:	230a      	movs	r3, #10
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	8819      	ldrh	r1, [r3, #0]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	4b55      	ldr	r3, [pc, #340]	; (80019cc <HAL_I2C_Master_Receive+0x208>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	0023      	movs	r3, r4
 800187c:	f000 fc92 	bl	80021a4 <I2C_TransferConfig>
 8001880:	e076      	b.n	8001970 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	b2da      	uxtb	r2, r3
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	049c      	lsls	r4, r3, #18
 8001896:	230a      	movs	r3, #10
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	8819      	ldrh	r1, [r3, #0]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_I2C_Master_Receive+0x208>)
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	0023      	movs	r3, r4
 80018a4:	f000 fc7e 	bl	80021a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018a8:	e062      	b.n	8001970 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fafd 	bl	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e082      	b.n	80019c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_I2C_Master_Receive+0x1ac>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d136      	bne.n	8001970 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	0013      	movs	r3, r2
 800190c:	2200      	movs	r2, #0
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	f000 fa14 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e053      	b.n	80019c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d911      	bls.n	800194a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	b2da      	uxtb	r2, r3
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	045c      	lsls	r4, r3, #17
 8001936:	230a      	movs	r3, #10
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	8819      	ldrh	r1, [r3, #0]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	0023      	movs	r3, r4
 8001944:	f000 fc2e 	bl	80021a4 <I2C_TransferConfig>
 8001948:	e012      	b.n	8001970 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	b2da      	uxtb	r2, r3
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	049c      	lsls	r4, r3, #18
 800195e:	230a      	movs	r3, #10
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	8819      	ldrh	r1, [r3, #0]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	0023      	movs	r3, r4
 800196c:	f000 fc1a 	bl	80021a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d197      	bne.n	80018aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	0018      	movs	r0, r3
 8001982:	f000 fa59 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e01a      	b.n	80019c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2220      	movs	r2, #32
 8001994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	490b      	ldr	r1, [pc, #44]	; (80019d0 <HAL_I2C_Master_Receive+0x20c>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2241      	movs	r2, #65	; 0x41
 80019aa:	2120      	movs	r1, #32
 80019ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2242      	movs	r2, #66	; 0x42
 80019b2:	2100      	movs	r1, #0
 80019b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
  }
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b007      	add	sp, #28
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	80002400 	.word	0x80002400
 80019d0:	fe00e800 	.word	0xfe00e800

080019d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	000c      	movs	r4, r1
 80019de:	0010      	movs	r0, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	230a      	movs	r3, #10
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	1c22      	adds	r2, r4, #0
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	2308      	movs	r3, #8
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	1c02      	adds	r2, r0, #0
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	1dbb      	adds	r3, r7, #6
 80019f4:	1c0a      	adds	r2, r1, #0
 80019f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d000      	beq.n	8001a06 <HAL_I2C_Mem_Write+0x32>
 8001a04:	e10c      	b.n	8001c20 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_I2C_Mem_Write+0x42>
 8001a0c:	232c      	movs	r3, #44	; 0x2c
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0ff      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2240      	movs	r2, #64	; 0x40
 8001a26:	5c9b      	ldrb	r3, [r3, r2]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_I2C_Mem_Write+0x5c>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e0f8      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	2101      	movs	r1, #1
 8001a36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a38:	f7ff faa8 	bl	8000f8c <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	0219      	lsls	r1, r3, #8
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2319      	movs	r3, #25
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f000 f975 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0e3      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2241      	movs	r2, #65	; 0x41
 8001a5e:	2121      	movs	r1, #33	; 0x21
 8001a60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2242      	movs	r2, #66	; 0x42
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	222c      	movs	r2, #44	; 0x2c
 8001a7a:	18ba      	adds	r2, r7, r2
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a86:	1dbb      	adds	r3, r7, #6
 8001a88:	881c      	ldrh	r4, [r3, #0]
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	230a      	movs	r3, #10
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	0023      	movs	r3, r4
 8001aa2:	f000 f8c5 	bl	8001c30 <I2C_RequestMemoryWrite>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0b5      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2bff      	cmp	r3, #255	; 0xff
 8001abe:	d911      	bls.n	8001ae4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	22ff      	movs	r2, #255	; 0xff
 8001ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	045c      	lsls	r4, r3, #17
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	8819      	ldrh	r1, [r3, #0]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	0023      	movs	r3, r4
 8001ade:	f000 fb61 	bl	80021a4 <I2C_TransferConfig>
 8001ae2:	e012      	b.n	8001b0a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	049c      	lsls	r4, r3, #18
 8001af8:	230a      	movs	r3, #10
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	8819      	ldrh	r1, [r3, #0]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	0023      	movs	r3, r4
 8001b06:	f000 fb4d 	bl	80021a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 f952 	bl	8001dba <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e081      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03a      	beq.n	8001bce <HAL_I2C_Mem_Write+0x1fa>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d136      	bne.n	8001bce <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	0013      	movs	r3, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	f000 f8e5 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e053      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d911      	bls.n	8001ba8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	045c      	lsls	r4, r3, #17
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 faff 	bl	80021a4 <I2C_TransferConfig>
 8001ba6:	e012      	b.n	8001bce <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049c      	lsls	r4, r3, #18
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f000 faeb 	bl	80021a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d198      	bne.n	8001b0a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f92a 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e01a      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	490b      	ldr	r1, [pc, #44]	; (8001c2c <HAL_I2C_Mem_Write+0x258>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2241      	movs	r2, #65	; 0x41
 8001c08:	2120      	movs	r1, #32
 8001c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2242      	movs	r2, #66	; 0x42
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b007      	add	sp, #28
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	fe00e800 	.word	0xfe00e800

08001c30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	000c      	movs	r4, r1
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	250a      	movs	r5, #10
 8001c40:	197b      	adds	r3, r7, r5
 8001c42:	1c22      	adds	r2, r4, #0
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	2308      	movs	r3, #8
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	1c02      	adds	r2, r0, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	1dbb      	adds	r3, r7, #6
 8001c50:	1c0a      	adds	r2, r1, #0
 8001c52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c54:	1dbb      	adds	r3, r7, #6
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	045c      	lsls	r4, r3, #17
 8001c5e:	197b      	adds	r3, r7, r5
 8001c60:	8819      	ldrh	r1, [r3, #0]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <I2C_RequestMemoryWrite+0xc4>)
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	0023      	movs	r3, r4
 8001c6a:	f000 fa9b 	bl	80021a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	6a39      	ldr	r1, [r7, #32]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f8a0 	bl	8001dba <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e033      	b.n	8001cea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	1dbb      	adds	r3, r7, #6
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
 8001c98:	e019      	b.n	8001cce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cae:	6a39      	ldr	r1, [r7, #32]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 f881 	bl	8001dba <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e014      	b.n	8001cea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cce:	6a3a      	ldr	r2, [r7, #32]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	f000 f82e 	bl	8001d3c <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d001      	beq.n	8001ce8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	80002000 	.word	0x80002000

08001cf8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d103      	bne.n	8001d16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d007      	beq.n	8001d34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	619a      	str	r2, [r3, #24]
  }
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d4c:	e021      	b.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	d01e      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d54:	f7ff f91a 	bl	8000f8c <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d302      	bcc.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d113      	bne.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	2220      	movs	r2, #32
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2241      	movs	r2, #65	; 0x41
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2242      	movs	r2, #66	; 0x42
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2240      	movs	r2, #64	; 0x40
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	425a      	negs	r2, r3
 8001da2:	4153      	adcs	r3, r2
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	001a      	movs	r2, r3
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d0ce      	beq.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b004      	add	sp, #16
 8001db8:	bd80      	pop	{r7, pc}

08001dba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc6:	e02b      	b.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f8e8 	bl	8001fa4 <I2C_IsErrorOccurred>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d001      	beq.n	8001ddc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e029      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3301      	adds	r3, #1
 8001de0:	d01e      	beq.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de2:	f7ff f8d3 	bl	8000f8c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d302      	bcc.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d113      	bne.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2241      	movs	r2, #65	; 0x41
 8001e08:	2120      	movs	r1, #32
 8001e0a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2242      	movs	r2, #66	; 0x42
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d1cc      	bne.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b004      	add	sp, #16
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e44:	e028      	b.n	8001e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 f8a9 	bl	8001fa4 <I2C_IsErrorOccurred>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e026      	b.n	8001ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7ff f897 	bl	8000f8c <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	2220      	movs	r2, #32
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2241      	movs	r2, #65	; 0x41
 8001e80:	2120      	movs	r1, #32
 8001e82:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2242      	movs	r2, #66	; 0x42
 8001e88:	2100      	movs	r1, #0
 8001e8a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e007      	b.n	8001ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d1cf      	bne.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ebc:	e064      	b.n	8001f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 f86d 	bl	8001fa4 <I2C_IsErrorOccurred>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e062      	b.n	8001f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d138      	bne.n	8001f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d105      	bne.n	8001efa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e04e      	b.n	8001f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2210      	movs	r2, #16
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d107      	bne.n	8001f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2204      	movs	r2, #4
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
 8001f16:	e002      	b.n	8001f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2220      	movs	r2, #32
 8001f24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	491b      	ldr	r1, [pc, #108]	; (8001fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2241      	movs	r2, #65	; 0x41
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2242      	movs	r2, #66	; 0x42
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e022      	b.n	8001f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f81b 	bl	8000f8c <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10f      	bne.n	8001f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2241      	movs	r2, #65	; 0x41
 8001f78:	2120      	movs	r1, #32
 8001f7a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e007      	b.n	8001f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d193      	bne.n	8001ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	fe00e800 	.word	0xfe00e800

08001fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b08b      	sub	sp, #44	; 0x2c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb0:	2327      	movs	r3, #39	; 0x27
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2210      	movs	r2, #16
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <I2C_IsErrorOccurred+0x2e>
 8001fd0:	e082      	b.n	80020d8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fda:	e060      	b.n	800209e <I2C_IsErrorOccurred+0xfa>
 8001fdc:	2427      	movs	r4, #39	; 0x27
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	193a      	adds	r2, r7, r4
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	d058      	beq.n	800209e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fec:	f7fe ffce 	bl	8000f8c <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d306      	bcc.n	800200a <I2C_IsErrorOccurred+0x66>
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	193a      	adds	r2, r7, r4
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d149      	bne.n	800209e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	01db      	lsls	r3, r3, #7
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002018:	2013      	movs	r0, #19
 800201a:	183b      	adds	r3, r7, r0
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	2142      	movs	r1, #66	; 0x42
 8002020:	5c52      	ldrb	r2, [r2, r1]
 8002022:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	401a      	ands	r2, r3
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	429a      	cmp	r2, r3
 8002036:	d126      	bne.n	8002086 <I2C_IsErrorOccurred+0xe2>
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	01db      	lsls	r3, r3, #7
 800203e:	429a      	cmp	r2, r3
 8002040:	d021      	beq.n	8002086 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002042:	183b      	adds	r3, r7, r0
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b20      	cmp	r3, #32
 8002048:	d01d      	beq.n	8002086 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	01c9      	lsls	r1, r1, #7
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800205c:	f7fe ff96 	bl	8000f8c <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002064:	e00f      	b.n	8002086 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002066:	f7fe ff91 	bl	8000f8c <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b19      	cmp	r3, #25
 8002072:	d908      	bls.n	8002086 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	2220      	movs	r2, #32
 8002078:	4313      	orrs	r3, r2
 800207a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800207c:	2327      	movs	r3, #39	; 0x27
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]

              break;
 8002084:	e00b      	b.n	800209e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2220      	movs	r2, #32
 800208e:	4013      	ands	r3, r2
 8002090:	2127      	movs	r1, #39	; 0x27
 8002092:	187a      	adds	r2, r7, r1
 8002094:	1879      	adds	r1, r7, r1
 8002096:	7809      	ldrb	r1, [r1, #0]
 8002098:	7011      	strb	r1, [r2, #0]
 800209a:	2b20      	cmp	r3, #32
 800209c:	d1e3      	bne.n	8002066 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2220      	movs	r2, #32
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d004      	beq.n	80020b6 <I2C_IsErrorOccurred+0x112>
 80020ac:	2327      	movs	r3, #39	; 0x27
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d092      	beq.n	8001fdc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020b6:	2327      	movs	r3, #39	; 0x27
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2220      	movs	r2, #32
 80020c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2204      	movs	r2, #4
 80020cc:	4313      	orrs	r3, r2
 80020ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020d0:	2327      	movs	r3, #39	; 0x27
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	d00c      	beq.n	8002104 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4313      	orrs	r3, r2
 80020f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	0052      	lsls	r2, r2, #1
 80020fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020fc:	2327      	movs	r3, #39	; 0x27
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4013      	ands	r3, r2
 800210c:	d00c      	beq.n	8002128 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	2208      	movs	r2, #8
 8002112:	4313      	orrs	r3, r2
 8002114:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	00d2      	lsls	r2, r2, #3
 800211e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002120:	2327      	movs	r3, #39	; 0x27
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d00c      	beq.n	800214c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2202      	movs	r2, #2
 8002136:	4313      	orrs	r3, r2
 8002138:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002144:	2327      	movs	r3, #39	; 0x27
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800214c:	2327      	movs	r3, #39	; 0x27
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01d      	beq.n	8002192 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff fdcd 	bl	8001cf8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	490d      	ldr	r1, [pc, #52]	; (80021a0 <I2C_IsErrorOccurred+0x1fc>)
 800216a:	400a      	ands	r2, r1
 800216c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2241      	movs	r2, #65	; 0x41
 800217e:	2120      	movs	r1, #32
 8002180:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2242      	movs	r2, #66	; 0x42
 8002186:	2100      	movs	r1, #0
 8002188:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002192:	2327      	movs	r3, #39	; 0x27
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	781b      	ldrb	r3, [r3, #0]
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b00b      	add	sp, #44	; 0x2c
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	fe00e800 	.word	0xfe00e800

080021a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	0008      	movs	r0, r1
 80021ae:	0011      	movs	r1, r2
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	240a      	movs	r4, #10
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	1c02      	adds	r2, r0, #0
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	2009      	movs	r0, #9
 80021bc:	183b      	adds	r3, r7, r0
 80021be:	1c0a      	adds	r2, r1, #0
 80021c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	059b      	lsls	r3, r3, #22
 80021c8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	0419      	lsls	r1, r3, #16
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021d6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	4313      	orrs	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ee:	0d51      	lsrs	r1, r2, #21
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	400a      	ands	r2, r1
 80021f6:	4907      	ldr	r1, [pc, #28]	; (8002214 <I2C_TransferConfig+0x70>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	43d2      	mvns	r2, r2
 80021fc:	401a      	ands	r2, r3
 80021fe:	0011      	movs	r1, r2
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b007      	add	sp, #28
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	03ff63ff 	.word	0x03ff63ff

08002218 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2241      	movs	r2, #65	; 0x41
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d138      	bne.n	80022a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002238:	2302      	movs	r3, #2
 800223a:	e032      	b.n	80022a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2241      	movs	r2, #65	; 0x41
 8002248:	2124      	movs	r1, #36	; 0x24
 800224a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4911      	ldr	r1, [pc, #68]	; (80022ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002268:	400a      	ands	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2241      	movs	r2, #65	; 0x41
 8002290:	2120      	movs	r1, #32
 8002292:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
  }
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	ffffefff 	.word	0xffffefff

080022b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2241      	movs	r2, #65	; 0x41
 80022be:	5c9b      	ldrb	r3, [r3, r2]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d139      	bne.n	800233a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e033      	b.n	800233c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2241      	movs	r2, #65	; 0x41
 80022e0:	2124      	movs	r1, #36	; 0x24
 80022e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2101      	movs	r1, #1
 80022f0:	438a      	bics	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2241      	movs	r2, #65	; 0x41
 800232a:	2120      	movs	r1, #32
 800232c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2240      	movs	r2, #64	; 0x40
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bd80      	pop	{r7, pc}
 8002344:	fffff0ff 	.word	0xfffff0ff

08002348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002356:	4013      	ands	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d11f      	bne.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	0013      	movs	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	189b      	adds	r3, r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4912      	ldr	r1, [pc, #72]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800237a:	0018      	movs	r0, r3
 800237c:	f7fd fec2 	bl	8000104 <__udivsi3>
 8002380:	0003      	movs	r3, r0
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002386:	e008      	b.n	800239a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b01      	subs	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e001      	b.n	800239a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e009      	b.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	401a      	ands	r2, r3
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d0ed      	beq.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	40007000 	.word	0x40007000
 80023bc:	fffff9ff 	.word	0xfffff9ff
 80023c0:	20000000 	.word	0x20000000
 80023c4:	000f4240 	.word	0x000f4240

080023c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	23e0      	movs	r3, #224	; 0xe0
 80023d2:	01db      	lsls	r3, r3, #7
 80023d4:	4013      	ands	r3, r2
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e2fe      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_OscConfig+0x1e>
 80023fc:	e07c      	b.n	80024f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fe:	4bc3      	ldr	r3, [pc, #780]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2238      	movs	r2, #56	; 0x38
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002408:	4bc0      	ldr	r3, [pc, #768]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2203      	movs	r2, #3
 800240e:	4013      	ands	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b10      	cmp	r3, #16
 8002416:	d102      	bne.n	800241e <HAL_RCC_OscConfig+0x3e>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d002      	beq.n	8002424 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4bb9      	ldr	r3, [pc, #740]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	029b      	lsls	r3, r3, #10
 800242c:	4013      	ands	r3, r2
 800242e:	d062      	beq.n	80024f6 <HAL_RCC_OscConfig+0x116>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d15e      	bne.n	80024f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e2d9      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	025b      	lsls	r3, r3, #9
 8002444:	429a      	cmp	r2, r3
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x78>
 8002448:	4bb0      	ldr	r3, [pc, #704]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4baf      	ldr	r3, [pc, #700]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0249      	lsls	r1, r1, #9
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e020      	b.n	800249a <HAL_RCC_OscConfig+0xba>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	23a0      	movs	r3, #160	; 0xa0
 800245e:	02db      	lsls	r3, r3, #11
 8002460:	429a      	cmp	r2, r3
 8002462:	d10e      	bne.n	8002482 <HAL_RCC_OscConfig+0xa2>
 8002464:	4ba9      	ldr	r3, [pc, #676]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4ba8      	ldr	r3, [pc, #672]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	02c9      	lsls	r1, r1, #11
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	4ba6      	ldr	r3, [pc, #664]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4ba5      	ldr	r3, [pc, #660]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	0249      	lsls	r1, r1, #9
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0xba>
 8002482:	4ba2      	ldr	r3, [pc, #648]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4ba1      	ldr	r3, [pc, #644]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002488:	49a1      	ldr	r1, [pc, #644]	; (8002710 <HAL_RCC_OscConfig+0x330>)
 800248a:	400a      	ands	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	4b9f      	ldr	r3, [pc, #636]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b9e      	ldr	r3, [pc, #632]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002494:	499f      	ldr	r1, [pc, #636]	; (8002714 <HAL_RCC_OscConfig+0x334>)
 8002496:	400a      	ands	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d014      	beq.n	80024cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fd73 	bl	8000f8c <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fd6e 	bl	8000f8c <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e298      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	4b93      	ldr	r3, [pc, #588]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	029b      	lsls	r3, r3, #10
 80024c6:	4013      	ands	r3, r2
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xcc>
 80024ca:	e015      	b.n	80024f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fd5e 	bl	8000f8c <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d6:	f7fe fd59 	bl	8000f8c <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e283      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e8:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4013      	ands	r3, r2
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0xf6>
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2202      	movs	r2, #2
 80024fe:	4013      	ands	r3, r2
 8002500:	d100      	bne.n	8002504 <HAL_RCC_OscConfig+0x124>
 8002502:	e099      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002504:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2238      	movs	r2, #56	; 0x38
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250e:	4b7f      	ldr	r3, [pc, #508]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2203      	movs	r2, #3
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x144>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d002      	beq.n	800252a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d135      	bne.n	8002596 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252a:	4b78      	ldr	r3, [pc, #480]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4013      	ands	r3, r2
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x162>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e256      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b72      	ldr	r3, [pc, #456]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a74      	ldr	r2, [pc, #464]	; (8002718 <HAL_RCC_OscConfig+0x338>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	021a      	lsls	r2, r3, #8
 8002552:	4b6e      	ldr	r3, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d112      	bne.n	8002584 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800255e:	4b6b      	ldr	r3, [pc, #428]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6e      	ldr	r2, [pc, #440]	; (800271c <HAL_RCC_OscConfig+0x33c>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002572:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0adb      	lsrs	r3, r3, #11
 8002578:	2207      	movs	r2, #7
 800257a:	4013      	ands	r3, r2
 800257c:	4a68      	ldr	r2, [pc, #416]	; (8002720 <HAL_RCC_OscConfig+0x340>)
 800257e:	40da      	lsrs	r2, r3
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x344>)
 8002582:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_OscConfig+0x348>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0018      	movs	r0, r3
 800258a:	f7fe fca3 	bl	8000ed4 <HAL_InitTick>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d051      	beq.n	8002636 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e22c      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d030      	beq.n	8002600 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5e      	ldr	r2, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x33c>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0049      	lsls	r1, r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fce4 	bl	8000f8c <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ca:	f7fe fcdf 	bl	8000f8c <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e209      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4013      	ands	r3, r2
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b48      	ldr	r3, [pc, #288]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x338>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	4b44      	ldr	r3, [pc, #272]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	e01b      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002600:	4b42      	ldr	r3, [pc, #264]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002606:	4949      	ldr	r1, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x34c>)
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fcbe 	bl	8000f8c <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fcb9 	bl	8000f8c <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1e3      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002628:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4013      	ands	r3, r2
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x236>
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2208      	movs	r2, #8
 800263e:	4013      	ands	r3, r2
 8002640:	d047      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	; 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	2b18      	cmp	r3, #24
 800264c:	d10a      	bne.n	8002664 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d03c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d138      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e1c5      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d019      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 800266e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002672:	2101      	movs	r1, #1
 8002674:	430a      	orrs	r2, r1
 8002676:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fc88 	bl	8000f8c <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe fc83 	bl	8000f8c <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1ad      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 8002696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002698:	2202      	movs	r2, #2
 800269a:	4013      	ands	r3, r2
 800269c:	d0f1      	beq.n	8002682 <HAL_RCC_OscConfig+0x2a2>
 800269e:	e018      	b.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80026a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	438a      	bics	r2, r1
 80026aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fc6e 	bl	8000f8c <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe fc69 	bl	8000f8c <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e193      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	2202      	movs	r2, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	d1f1      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2204      	movs	r2, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d100      	bne.n	80026de <HAL_RCC_OscConfig+0x2fe>
 80026dc:	e0c6      	b.n	800286c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	231f      	movs	r3, #31
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2238      	movs	r2, #56	; 0x38
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d11e      	bne.n	8002730 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x32c>)
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2202      	movs	r2, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	d100      	bne.n	80026fe <HAL_RCC_OscConfig+0x31e>
 80026fc:	e0b6      	b.n	800286c <HAL_RCC_OscConfig+0x48c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d000      	beq.n	8002708 <HAL_RCC_OscConfig+0x328>
 8002706:	e0b1      	b.n	800286c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e171      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
 800270c:	40021000 	.word	0x40021000
 8002710:	fffeffff 	.word	0xfffeffff
 8002714:	fffbffff 	.word	0xfffbffff
 8002718:	ffff80ff 	.word	0xffff80ff
 800271c:	ffffc7ff 	.word	0xffffc7ff
 8002720:	00f42400 	.word	0x00f42400
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004
 800272c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002730:	4bb1      	ldr	r3, [pc, #708]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	055b      	lsls	r3, r3, #21
 8002738:	4013      	ands	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x360>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x362>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d011      	beq.n	800276a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4bac      	ldr	r3, [pc, #688]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800274a:	4bab      	ldr	r3, [pc, #684]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	0549      	lsls	r1, r1, #21
 8002750:	430a      	orrs	r2, r1
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
 8002754:	4ba8      	ldr	r3, [pc, #672]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	055b      	lsls	r3, r3, #21
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002762:	231f      	movs	r3, #31
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	4ba4      	ldr	r3, [pc, #656]	; (80029fc <HAL_RCC_OscConfig+0x61c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d11a      	bne.n	80027ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002776:	4ba1      	ldr	r3, [pc, #644]	; (80029fc <HAL_RCC_OscConfig+0x61c>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4ba0      	ldr	r3, [pc, #640]	; (80029fc <HAL_RCC_OscConfig+0x61c>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0049      	lsls	r1, r1, #1
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002784:	f7fe fc02 	bl	8000f8c <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe fbfd 	bl	8000f8c <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e127      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a0:	4b96      	ldr	r3, [pc, #600]	; (80029fc <HAL_RCC_OscConfig+0x61c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3e2>
 80027b4:	4b90      	ldr	r3, [pc, #576]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027b8:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	430a      	orrs	r2, r1
 80027be:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x41c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x404>
 80027ca:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ce:	4b8a      	ldr	r3, [pc, #552]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027d0:	2104      	movs	r1, #4
 80027d2:	430a      	orrs	r2, r1
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027da:	4b87      	ldr	r3, [pc, #540]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027dc:	2101      	movs	r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x41c>
 80027e4:	4b84      	ldr	r3, [pc, #528]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e8:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	438a      	bics	r2, r1
 80027ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027f4:	4b80      	ldr	r3, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80027f6:	2104      	movs	r1, #4
 80027f8:	438a      	bics	r2, r1
 80027fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d014      	beq.n	800282e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fbc2 	bl	8000f8c <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280c:	e009      	b.n	8002822 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fbbd 	bl	8000f8c <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	4a79      	ldr	r2, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x620>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0e6      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002822:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x42e>
 800282c:	e013      	b.n	8002856 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fbad 	bl	8000f8c <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002836:	e009      	b.n	800284c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fba8 	bl	8000f8c <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x620>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0d1      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002856:	231f      	movs	r3, #31
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002866:	4967      	ldr	r1, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x624>)
 8002868:	400a      	ands	r2, r1
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d100      	bne.n	8002876 <HAL_RCC_OscConfig+0x496>
 8002874:	e0bb      	b.n	80029ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002876:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2238      	movs	r2, #56	; 0x38
 800287c:	4013      	ands	r3, r2
 800287e:	2b10      	cmp	r3, #16
 8002880:	d100      	bne.n	8002884 <HAL_RCC_OscConfig+0x4a4>
 8002882:	e07b      	b.n	800297c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d156      	bne.n	800293a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002892:	495d      	ldr	r1, [pc, #372]	; (8002a08 <HAL_RCC_OscConfig+0x628>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fb78 	bl	8000f8c <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fb73 	bl	8000f8c <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e09d      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	049b      	lsls	r3, r3, #18
 80028bc:	4013      	ands	r3, r2
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a51      	ldr	r2, [pc, #324]	; (8002a0c <HAL_RCC_OscConfig+0x62c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	431a      	orrs	r2, r3
 80028ee:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	0449      	lsls	r1, r1, #17
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	0549      	lsls	r1, r1, #21
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fb3c 	bl	8000f8c <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fb37 	bl	8000f8c <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e061      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	049b      	lsls	r3, r3, #18
 8002934:	4013      	ands	r3, r2
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x53a>
 8002938:	e059      	b.n	80029ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002940:	4931      	ldr	r1, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x628>)
 8002942:	400a      	ands	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fb21 	bl	8000f8c <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fb1c 	bl	8000f8c <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e046      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	049b      	lsls	r3, r3, #18
 800296a:	4013      	ands	r3, r2
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 8002974:	4926      	ldr	r1, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x630>)
 8002976:	400a      	ands	r2, r1
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	e038      	b.n	80029ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e033      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x618>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2203      	movs	r2, #3
 8002992:	401a      	ands	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	429a      	cmp	r2, r3
 800299a:	d126      	bne.n	80029ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2270      	movs	r2, #112	; 0x70
 80029a0:	401a      	ands	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11f      	bne.n	80029ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	23fe      	movs	r3, #254	; 0xfe
 80029ae:	01db      	lsls	r3, r3, #7
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d116      	bne.n	80029ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	23f8      	movs	r3, #248	; 0xf8
 80029c0:	039b      	lsls	r3, r3, #14
 80029c2:	401a      	ands	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d10e      	bne.n	80029ea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	23e0      	movs	r3, #224	; 0xe0
 80029d0:	051b      	lsls	r3, r3, #20
 80029d2:	401a      	ands	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	0f5b      	lsrs	r3, r3, #29
 80029e0:	075a      	lsls	r2, r3, #29
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b008      	add	sp, #32
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	00001388 	.word	0x00001388
 8002a04:	efffffff 	.word	0xefffffff
 8002a08:	feffffff 	.word	0xfeffffff
 8002a0c:	11c1808c 	.word	0x11c1808c
 8002a10:	eefefffc 	.word	0xeefefffc

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0e9      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4013      	ands	r3, r2
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d91e      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a48:	f7fe faa0 	bl	8000f8c <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7fe fa9b 	bl	8000f8c <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a6a      	ldr	r2, [pc, #424]	; (8002c08 <HAL_RCC_ClockConfig+0x1f4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0ca      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1ee      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2204      	movs	r2, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	d006      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a88:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002a8e:	21e0      	movs	r1, #224	; 0xe0
 8002a90:	01c9      	lsls	r1, r1, #7
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4a5d      	ldr	r2, [pc, #372]	; (8002c10 <HAL_RCC_ClockConfig+0x1fc>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d057      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d12b      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e097      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	049b      	lsls	r3, r3, #18
 8002adc:	4013      	ands	r3, r2
 8002ade:	d11f      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e08b      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	d113      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e07f      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e074      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e06d      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b20:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2207      	movs	r2, #7
 8002b26:	4393      	bics	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fe fa2a 	bl	8000f8c <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3e:	f7fe fa25 	bl	8000f8c <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <HAL_RCC_ClockConfig+0x1f4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e054      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2238      	movs	r2, #56	; 0x38
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1ec      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2207      	movs	r2, #7
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d21e      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2207      	movs	r2, #7
 8002b78:	4393      	bics	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fa02 	bl	8000f8c <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fe f9fd 	bl	8000f8c <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_RCC_ClockConfig+0x1f4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e02c      	b.n	8002bfc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	4013      	ands	r3, r2
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1ee      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <HAL_RCC_ClockConfig+0x200>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bce:	f000 f829 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002bd2:	0001      	movs	r1, r0
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCC_ClockConfig+0x1f8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	220f      	movs	r2, #15
 8002bdc:	401a      	ands	r2, r3
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x204>)
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	58d3      	ldr	r3, [r2, r3]
 8002be4:	221f      	movs	r2, #31
 8002be6:	4013      	ands	r3, r2
 8002be8:	000a      	movs	r2, r1
 8002bea:	40da      	lsrs	r2, r3
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x208>)
 8002bee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x20c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7fe f96d 	bl	8000ed4 <HAL_InitTick>
 8002bfa:	0003      	movs	r3, r0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40022000 	.word	0x40022000
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	fffff0ff 	.word	0xfffff0ff
 8002c14:	ffff8fff 	.word	0xffff8fff
 8002c18:	08006364 	.word	0x08006364
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2238      	movs	r2, #56	; 0x38
 8002c30:	4013      	ands	r3, r2
 8002c32:	d10f      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0adb      	lsrs	r3, r3, #11
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	4835      	ldr	r0, [pc, #212]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c4a:	f7fd fa5b 	bl	8000104 <__udivsi3>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e05d      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2238      	movs	r2, #56	; 0x38
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e054      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2238      	movs	r2, #56	; 0x38
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d138      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2203      	movs	r2, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4824      	ldr	r0, [pc, #144]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c94:	f7fd fa36 	bl	8000104 <__udivsi3>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	227f      	movs	r2, #127	; 0x7f
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	434b      	muls	r3, r1
 8002ca8:	617b      	str	r3, [r7, #20]
        break;
 8002caa:	e00d      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	481c      	ldr	r0, [pc, #112]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cb0:	f7fd fa28 	bl	8000104 <__udivsi3>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	227f      	movs	r2, #127	; 0x7f
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	434b      	muls	r3, r1
 8002cc4:	617b      	str	r3, [r7, #20]
        break;
 8002cc6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0f5b      	lsrs	r3, r3, #29
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f7fd fa13 	bl	8000104 <__udivsi3>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e015      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2238      	movs	r2, #56	; 0x38
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d103      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2238      	movs	r2, #56	; 0x38
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b18      	cmp	r3, #24
 8002d02:	d103      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d04:	23fa      	movs	r3, #250	; 0xfa
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e001      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d10:	693b      	ldr	r3, [r7, #16]
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b006      	add	sp, #24
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d40:	f7ff fff2 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d44:	0004      	movs	r4, r0
 8002d46:	f7ff fb3f 	bl	80023c8 <LL_RCC_GetAPB1Prescaler>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	0b1a      	lsrs	r2, r3, #12
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	58d3      	ldr	r3, [r2, r3]
 8002d54:	221f      	movs	r2, #31
 8002d56:	4013      	ands	r3, r2
 8002d58:	40dc      	lsrs	r4, r3
 8002d5a:	0023      	movs	r3, r4
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bdb0      	pop	{r4, r5, r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	080063a4 	.word	0x080063a4

08002d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d70:	2313      	movs	r3, #19
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d78:	2312      	movs	r3, #18
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d8c:	e0a3      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2011      	movs	r0, #17
 8002d90:	183b      	adds	r3, r7, r0
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4bc3      	ldr	r3, [pc, #780]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	055b      	lsls	r3, r3, #21
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d110      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4bc0      	ldr	r3, [pc, #768]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da6:	4bbf      	ldr	r3, [pc, #764]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0549      	lsls	r1, r1, #21
 8002dac:	430a      	orrs	r2, r1
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
 8002db0:	4bbc      	ldr	r3, [pc, #752]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	055b      	lsls	r3, r3, #21
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	183b      	adds	r3, r7, r0
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc4:	4bb8      	ldr	r3, [pc, #736]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4bb7      	ldr	r3, [pc, #732]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	0049      	lsls	r1, r1, #1
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe f8db 	bl	8000f8c <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dda:	e00b      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe f8d6 	bl	8000f8c <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d904      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002dea:	2313      	movs	r3, #19
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2203      	movs	r2, #3
 8002df0:	701a      	strb	r2, [r3, #0]
        break;
 8002df2:	e005      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df4:	4bac      	ldr	r3, [pc, #688]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d0ed      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e00:	2313      	movs	r3, #19
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d154      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e0a:	4ba6      	ldr	r3, [pc, #664]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d019      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d014      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e26:	4b9f      	ldr	r3, [pc, #636]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	4aa0      	ldr	r2, [pc, #640]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e30:	4b9c      	ldr	r3, [pc, #624]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e34:	4b9b      	ldr	r3, [pc, #620]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	0249      	lsls	r1, r1, #9
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3e:	4b99      	ldr	r3, [pc, #612]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e42:	4b98      	ldr	r3, [pc, #608]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e44:	499a      	ldr	r1, [pc, #616]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e4a:	4b96      	ldr	r3, [pc, #600]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d016      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f898 	bl	8000f8c <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e60:	e00c      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe f893 	bl	8000f8c <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	4a91      	ldr	r2, [pc, #580]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d904      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e72:	2313      	movs	r3, #19
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2203      	movs	r2, #3
 8002e78:	701a      	strb	r2, [r3, #0]
            break;
 8002e7a:	e004      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	4b89      	ldr	r3, [pc, #548]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	2202      	movs	r2, #2
 8002e82:	4013      	ands	r3, r2
 8002e84:	d0ed      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e86:	2313      	movs	r3, #19
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e90:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	4a85      	ldr	r2, [pc, #532]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9e:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea4:	e00c      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea6:	2312      	movs	r3, #18
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2213      	movs	r2, #19
 8002eac:	18ba      	adds	r2, r7, r2
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	2312      	movs	r3, #18
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2213      	movs	r2, #19
 8002eba:	18ba      	adds	r2, r7, r2
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ec0:	2311      	movs	r3, #17
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ece:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed0:	4979      	ldr	r1, [pc, #484]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	4013      	ands	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee0:	4b70      	ldr	r3, [pc, #448]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	220c      	movs	r2, #12
 8002f04:	4393      	bics	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b65      	ldr	r3, [pc, #404]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2210      	movs	r2, #16
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d009      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	4a66      	ldr	r2, [pc, #408]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	4a5f      	ldr	r2, [pc, #380]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	4b56      	ldr	r3, [pc, #344]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f5c:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2220      	movs	r2, #32
 8002f76:	4013      	ands	r3, r2
 8002f78:	d009      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	4013      	ands	r3, r2
 8002f98:	d015      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f9a:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	0899      	lsrs	r1, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1a      	ldr	r2, [r3, #32]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	0249      	lsls	r1, r1, #9
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	4393      	bics	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	039b      	lsls	r3, r3, #14
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d016      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	4a35      	ldr	r2, [pc, #212]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003002:	430a      	orrs	r2, r1
 8003004:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	03db      	lsls	r3, r3, #15
 800300e:	429a      	cmp	r2, r3
 8003010:	d106      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0449      	lsls	r1, r1, #17
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	03db      	lsls	r3, r3, #15
 8003028:	4013      	ands	r3, r2
 800302a:	d016      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800303c:	430a      	orrs	r2, r1
 800303e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	045b      	lsls	r3, r3, #17
 8003048:	429a      	cmp	r2, r3
 800304a:	d106      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	0449      	lsls	r1, r1, #17
 8003056:	430a      	orrs	r2, r1
 8003058:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4013      	ands	r3, r2
 8003064:	d016      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	430a      	orrs	r2, r1
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	01db      	lsls	r3, r3, #7
 8003082:	429a      	cmp	r2, r3
 8003084:	d106      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	0249      	lsls	r1, r1, #9
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003094:	2312      	movs	r3, #18
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	781b      	ldrb	r3, [r3, #0]
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b006      	add	sp, #24
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40007000 	.word	0x40007000
 80030ac:	fffffcff 	.word	0xfffffcff
 80030b0:	fffeffff 	.word	0xfffeffff
 80030b4:	00001388 	.word	0x00001388
 80030b8:	efffffff 	.word	0xefffffff
 80030bc:	fffff3ff 	.word	0xfffff3ff
 80030c0:	fff3ffff 	.word	0xfff3ffff
 80030c4:	ffcfffff 	.word	0xffcfffff
 80030c8:	ffffcfff 	.word	0xffffcfff
 80030cc:	ffbfffff 	.word	0xffbfffff
 80030d0:	feffffff 	.word	0xfeffffff
 80030d4:	ffff3fff 	.word	0xffff3fff

080030d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e046      	b.n	8003178 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2288      	movs	r2, #136	; 0x88
 80030ee:	589b      	ldr	r3, [r3, r2]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2284      	movs	r2, #132	; 0x84
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f7fd fdb8 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2288      	movs	r2, #136	; 0x88
 8003108:	2124      	movs	r1, #36	; 0x24
 800310a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	438a      	bics	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f830 	bl	8003184 <UART_SetConfig>
 8003124:	0003      	movs	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e024      	b.n	8003178 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 fae1 	bl	8003700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	490d      	ldr	r1, [pc, #52]	; (8003180 <HAL_UART_Init+0xa8>)
 800314a:	400a      	ands	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	212a      	movs	r1, #42	; 0x2a
 800315a:	438a      	bics	r2, r1
 800315c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fb79 	bl	8003868 <UART_CheckIdleState>
 8003176:	0003      	movs	r3, r0
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b002      	add	sp, #8
 800317e:	bd80      	pop	{r7, pc}
 8003180:	ffffb7ff 	.word	0xffffb7ff

08003184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	b5b0      	push	{r4, r5, r7, lr}
 8003186:	b090      	sub	sp, #64	; 0x40
 8003188:	af00      	add	r7, sp, #0
 800318a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800318c:	231a      	movs	r3, #26
 800318e:	2220      	movs	r2, #32
 8003190:	189b      	adds	r3, r3, r2
 8003192:	19db      	adds	r3, r3, r7
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4aaf      	ldr	r2, [pc, #700]	; (8003474 <UART_SetConfig+0x2f0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c2:	430b      	orrs	r3, r1
 80031c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4aaa      	ldr	r2, [pc, #680]	; (8003478 <UART_SetConfig+0x2f4>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	68d9      	ldr	r1, [r3, #12]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	0003      	movs	r3, r0
 80031dc:	430b      	orrs	r3, r1
 80031de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4aa4      	ldr	r2, [pc, #656]	; (800347c <UART_SetConfig+0x2f8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f6:	4313      	orrs	r3, r2
 80031f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a9f      	ldr	r2, [pc, #636]	; (8003480 <UART_SetConfig+0x2fc>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320c:	430b      	orrs	r3, r1
 800320e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	220f      	movs	r2, #15
 8003218:	4393      	bics	r3, r2
 800321a:	0018      	movs	r0, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	0003      	movs	r3, r0
 8003226:	430b      	orrs	r3, r1
 8003228:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a95      	ldr	r2, [pc, #596]	; (8003484 <UART_SetConfig+0x300>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d131      	bne.n	8003298 <UART_SetConfig+0x114>
 8003234:	4b94      	ldr	r3, [pc, #592]	; (8003488 <UART_SetConfig+0x304>)
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	2203      	movs	r2, #3
 800323a:	4013      	ands	r3, r2
 800323c:	2b03      	cmp	r3, #3
 800323e:	d01d      	beq.n	800327c <UART_SetConfig+0xf8>
 8003240:	d823      	bhi.n	800328a <UART_SetConfig+0x106>
 8003242:	2b02      	cmp	r3, #2
 8003244:	d00c      	beq.n	8003260 <UART_SetConfig+0xdc>
 8003246:	d820      	bhi.n	800328a <UART_SetConfig+0x106>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <UART_SetConfig+0xce>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d00e      	beq.n	800326e <UART_SetConfig+0xea>
 8003250:	e01b      	b.n	800328a <UART_SetConfig+0x106>
 8003252:	231b      	movs	r3, #27
 8003254:	2220      	movs	r2, #32
 8003256:	189b      	adds	r3, r3, r2
 8003258:	19db      	adds	r3, r3, r7
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e0b4      	b.n	80033ca <UART_SetConfig+0x246>
 8003260:	231b      	movs	r3, #27
 8003262:	2220      	movs	r2, #32
 8003264:	189b      	adds	r3, r3, r2
 8003266:	19db      	adds	r3, r3, r7
 8003268:	2202      	movs	r2, #2
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e0ad      	b.n	80033ca <UART_SetConfig+0x246>
 800326e:	231b      	movs	r3, #27
 8003270:	2220      	movs	r2, #32
 8003272:	189b      	adds	r3, r3, r2
 8003274:	19db      	adds	r3, r3, r7
 8003276:	2204      	movs	r2, #4
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e0a6      	b.n	80033ca <UART_SetConfig+0x246>
 800327c:	231b      	movs	r3, #27
 800327e:	2220      	movs	r2, #32
 8003280:	189b      	adds	r3, r3, r2
 8003282:	19db      	adds	r3, r3, r7
 8003284:	2208      	movs	r2, #8
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e09f      	b.n	80033ca <UART_SetConfig+0x246>
 800328a:	231b      	movs	r3, #27
 800328c:	2220      	movs	r2, #32
 800328e:	189b      	adds	r3, r3, r2
 8003290:	19db      	adds	r3, r3, r7
 8003292:	2210      	movs	r2, #16
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e098      	b.n	80033ca <UART_SetConfig+0x246>
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7b      	ldr	r2, [pc, #492]	; (800348c <UART_SetConfig+0x308>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d131      	bne.n	8003306 <UART_SetConfig+0x182>
 80032a2:	4b79      	ldr	r3, [pc, #484]	; (8003488 <UART_SetConfig+0x304>)
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	220c      	movs	r2, #12
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d01d      	beq.n	80032ea <UART_SetConfig+0x166>
 80032ae:	d823      	bhi.n	80032f8 <UART_SetConfig+0x174>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d00c      	beq.n	80032ce <UART_SetConfig+0x14a>
 80032b4:	d820      	bhi.n	80032f8 <UART_SetConfig+0x174>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <UART_SetConfig+0x13c>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d00e      	beq.n	80032dc <UART_SetConfig+0x158>
 80032be:	e01b      	b.n	80032f8 <UART_SetConfig+0x174>
 80032c0:	231b      	movs	r3, #27
 80032c2:	2220      	movs	r2, #32
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e07d      	b.n	80033ca <UART_SetConfig+0x246>
 80032ce:	231b      	movs	r3, #27
 80032d0:	2220      	movs	r2, #32
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	19db      	adds	r3, r3, r7
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e076      	b.n	80033ca <UART_SetConfig+0x246>
 80032dc:	231b      	movs	r3, #27
 80032de:	2220      	movs	r2, #32
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	19db      	adds	r3, r3, r7
 80032e4:	2204      	movs	r2, #4
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e06f      	b.n	80033ca <UART_SetConfig+0x246>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2220      	movs	r2, #32
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	2208      	movs	r2, #8
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e068      	b.n	80033ca <UART_SetConfig+0x246>
 80032f8:	231b      	movs	r3, #27
 80032fa:	2220      	movs	r2, #32
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2210      	movs	r2, #16
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e061      	b.n	80033ca <UART_SetConfig+0x246>
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a61      	ldr	r2, [pc, #388]	; (8003490 <UART_SetConfig+0x30c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d106      	bne.n	800331e <UART_SetConfig+0x19a>
 8003310:	231b      	movs	r3, #27
 8003312:	2220      	movs	r2, #32
 8003314:	189b      	adds	r3, r3, r2
 8003316:	19db      	adds	r3, r3, r7
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e055      	b.n	80033ca <UART_SetConfig+0x246>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <UART_SetConfig+0x310>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d106      	bne.n	8003336 <UART_SetConfig+0x1b2>
 8003328:	231b      	movs	r3, #27
 800332a:	2220      	movs	r2, #32
 800332c:	189b      	adds	r3, r3, r2
 800332e:	19db      	adds	r3, r3, r7
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e049      	b.n	80033ca <UART_SetConfig+0x246>
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a50      	ldr	r2, [pc, #320]	; (800347c <UART_SetConfig+0x2f8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d13e      	bne.n	80033be <UART_SetConfig+0x23a>
 8003340:	4b51      	ldr	r3, [pc, #324]	; (8003488 <UART_SetConfig+0x304>)
 8003342:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003344:	23c0      	movs	r3, #192	; 0xc0
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	4013      	ands	r3, r2
 800334a:	22c0      	movs	r2, #192	; 0xc0
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	4293      	cmp	r3, r2
 8003350:	d027      	beq.n	80033a2 <UART_SetConfig+0x21e>
 8003352:	22c0      	movs	r2, #192	; 0xc0
 8003354:	0112      	lsls	r2, r2, #4
 8003356:	4293      	cmp	r3, r2
 8003358:	d82a      	bhi.n	80033b0 <UART_SetConfig+0x22c>
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	4293      	cmp	r3, r2
 8003360:	d011      	beq.n	8003386 <UART_SetConfig+0x202>
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	4293      	cmp	r3, r2
 8003368:	d822      	bhi.n	80033b0 <UART_SetConfig+0x22c>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <UART_SetConfig+0x1f4>
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	00d2      	lsls	r2, r2, #3
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <UART_SetConfig+0x210>
 8003376:	e01b      	b.n	80033b0 <UART_SetConfig+0x22c>
 8003378:	231b      	movs	r3, #27
 800337a:	2220      	movs	r2, #32
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e021      	b.n	80033ca <UART_SetConfig+0x246>
 8003386:	231b      	movs	r3, #27
 8003388:	2220      	movs	r2, #32
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e01a      	b.n	80033ca <UART_SetConfig+0x246>
 8003394:	231b      	movs	r3, #27
 8003396:	2220      	movs	r2, #32
 8003398:	189b      	adds	r3, r3, r2
 800339a:	19db      	adds	r3, r3, r7
 800339c:	2204      	movs	r2, #4
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e013      	b.n	80033ca <UART_SetConfig+0x246>
 80033a2:	231b      	movs	r3, #27
 80033a4:	2220      	movs	r2, #32
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2208      	movs	r2, #8
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e00c      	b.n	80033ca <UART_SetConfig+0x246>
 80033b0:	231b      	movs	r3, #27
 80033b2:	2220      	movs	r2, #32
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2210      	movs	r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e005      	b.n	80033ca <UART_SetConfig+0x246>
 80033be:	231b      	movs	r3, #27
 80033c0:	2220      	movs	r2, #32
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	19db      	adds	r3, r3, r7
 80033c6:	2210      	movs	r2, #16
 80033c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <UART_SetConfig+0x2f8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d000      	beq.n	80033d6 <UART_SetConfig+0x252>
 80033d4:	e0a9      	b.n	800352a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033d6:	231b      	movs	r3, #27
 80033d8:	2220      	movs	r2, #32
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	19db      	adds	r3, r3, r7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d015      	beq.n	8003410 <UART_SetConfig+0x28c>
 80033e4:	dc18      	bgt.n	8003418 <UART_SetConfig+0x294>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d00d      	beq.n	8003406 <UART_SetConfig+0x282>
 80033ea:	dc15      	bgt.n	8003418 <UART_SetConfig+0x294>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <UART_SetConfig+0x272>
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d005      	beq.n	8003400 <UART_SetConfig+0x27c>
 80033f4:	e010      	b.n	8003418 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f6:	f7ff fca1 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80033fa:	0003      	movs	r3, r0
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033fe:	e014      	b.n	800342a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <UART_SetConfig+0x314>)
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003404:	e011      	b.n	800342a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003406:	f7ff fc0d 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 800340a:	0003      	movs	r3, r0
 800340c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800340e:	e00c      	b.n	800342a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003416:	e008      	b.n	800342a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800341c:	231a      	movs	r3, #26
 800341e:	2220      	movs	r2, #32
 8003420:	189b      	adds	r3, r3, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
        break;
 8003428:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d100      	bne.n	8003432 <UART_SetConfig+0x2ae>
 8003430:	e14b      	b.n	80036ca <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <UART_SetConfig+0x318>)
 8003438:	0052      	lsls	r2, r2, #1
 800343a:	5ad3      	ldrh	r3, [r2, r3]
 800343c:	0019      	movs	r1, r3
 800343e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003440:	f7fc fe60 	bl	8000104 <__udivsi3>
 8003444:	0003      	movs	r3, r0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	0013      	movs	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	189b      	adds	r3, r3, r2
 8003452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003454:	429a      	cmp	r2, r3
 8003456:	d305      	bcc.n	8003464 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800345e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003460:	429a      	cmp	r2, r3
 8003462:	d91d      	bls.n	80034a0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003464:	231a      	movs	r3, #26
 8003466:	2220      	movs	r2, #32
 8003468:	189b      	adds	r3, r3, r2
 800346a:	19db      	adds	r3, r3, r7
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e12b      	b.n	80036ca <UART_SetConfig+0x546>
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	cfff69f3 	.word	0xcfff69f3
 8003478:	ffffcfff 	.word	0xffffcfff
 800347c:	40008000 	.word	0x40008000
 8003480:	11fff4ff 	.word	0x11fff4ff
 8003484:	40013800 	.word	0x40013800
 8003488:	40021000 	.word	0x40021000
 800348c:	40004400 	.word	0x40004400
 8003490:	40004800 	.word	0x40004800
 8003494:	40004c00 	.word	0x40004c00
 8003498:	00f42400 	.word	0x00f42400
 800349c:	080063c4 	.word	0x080063c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <UART_SetConfig+0x574>)
 80034ae:	0052      	lsls	r2, r2, #1
 80034b0:	5ad3      	ldrh	r3, [r2, r3]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	69b8      	ldr	r0, [r7, #24]
 80034be:	69f9      	ldr	r1, [r7, #28]
 80034c0:	f7fc ff96 	bl	80003f0 <__aeabi_uldivmod>
 80034c4:	0002      	movs	r2, r0
 80034c6:	000b      	movs	r3, r1
 80034c8:	0e11      	lsrs	r1, r2, #24
 80034ca:	021d      	lsls	r5, r3, #8
 80034cc:	430d      	orrs	r5, r1
 80034ce:	0214      	lsls	r4, r2, #8
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68b8      	ldr	r0, [r7, #8]
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	1900      	adds	r0, r0, r4
 80034e2:	4169      	adcs	r1, r5
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f7fc ff7d 	bl	80003f0 <__aeabi_uldivmod>
 80034f6:	0002      	movs	r2, r0
 80034f8:	000b      	movs	r3, r1
 80034fa:	0013      	movs	r3, r2
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003500:	23c0      	movs	r3, #192	; 0xc0
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d309      	bcc.n	800351c <UART_SetConfig+0x398>
 8003508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	035b      	lsls	r3, r3, #13
 800350e:	429a      	cmp	r2, r3
 8003510:	d204      	bcs.n	800351c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	e0d6      	b.n	80036ca <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800351c:	231a      	movs	r3, #26
 800351e:	2220      	movs	r2, #32
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e0cf      	b.n	80036ca <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	429a      	cmp	r2, r3
 8003534:	d000      	beq.n	8003538 <UART_SetConfig+0x3b4>
 8003536:	e070      	b.n	800361a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003538:	231b      	movs	r3, #27
 800353a:	2220      	movs	r2, #32
 800353c:	189b      	adds	r3, r3, r2
 800353e:	19db      	adds	r3, r3, r7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d015      	beq.n	8003572 <UART_SetConfig+0x3ee>
 8003546:	dc18      	bgt.n	800357a <UART_SetConfig+0x3f6>
 8003548:	2b04      	cmp	r3, #4
 800354a:	d00d      	beq.n	8003568 <UART_SetConfig+0x3e4>
 800354c:	dc15      	bgt.n	800357a <UART_SetConfig+0x3f6>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <UART_SetConfig+0x3d4>
 8003552:	2b02      	cmp	r3, #2
 8003554:	d005      	beq.n	8003562 <UART_SetConfig+0x3de>
 8003556:	e010      	b.n	800357a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7ff fbf0 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 800355c:	0003      	movs	r3, r0
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003560:	e014      	b.n	800358c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003562:	4b66      	ldr	r3, [pc, #408]	; (80036fc <UART_SetConfig+0x578>)
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003566:	e011      	b.n	800358c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003568:	f7ff fb5c 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 800356c:	0003      	movs	r3, r0
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003570:	e00c      	b.n	800358c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003578:	e008      	b.n	800358c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800357e:	231a      	movs	r3, #26
 8003580:	2220      	movs	r2, #32
 8003582:	189b      	adds	r3, r3, r2
 8003584:	19db      	adds	r3, r3, r7
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
        break;
 800358a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d100      	bne.n	8003594 <UART_SetConfig+0x410>
 8003592:	e09a      	b.n	80036ca <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003598:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <UART_SetConfig+0x574>)
 800359a:	0052      	lsls	r2, r2, #1
 800359c:	5ad3      	ldrh	r3, [r2, r3]
 800359e:	0019      	movs	r1, r3
 80035a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035a2:	f7fc fdaf 	bl	8000104 <__udivsi3>
 80035a6:	0003      	movs	r3, r0
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	18d2      	adds	r2, r2, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0019      	movs	r1, r3
 80035b8:	0010      	movs	r0, r2
 80035ba:	f7fc fda3 	bl	8000104 <__udivsi3>
 80035be:	0003      	movs	r3, r0
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d921      	bls.n	800360c <UART_SetConfig+0x488>
 80035c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	025b      	lsls	r3, r3, #9
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d21c      	bcs.n	800360c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	200e      	movs	r0, #14
 80035d8:	2420      	movs	r4, #32
 80035da:	1903      	adds	r3, r0, r4
 80035dc:	19db      	adds	r3, r3, r7
 80035de:	210f      	movs	r1, #15
 80035e0:	438a      	bics	r2, r1
 80035e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2207      	movs	r2, #7
 80035ec:	4013      	ands	r3, r2
 80035ee:	b299      	uxth	r1, r3
 80035f0:	1903      	adds	r3, r0, r4
 80035f2:	19db      	adds	r3, r3, r7
 80035f4:	1902      	adds	r2, r0, r4
 80035f6:	19d2      	adds	r2, r2, r7
 80035f8:	8812      	ldrh	r2, [r2, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1902      	adds	r2, r0, r4
 8003604:	19d2      	adds	r2, r2, r7
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e05e      	b.n	80036ca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800360c:	231a      	movs	r3, #26
 800360e:	2220      	movs	r2, #32
 8003610:	189b      	adds	r3, r3, r2
 8003612:	19db      	adds	r3, r3, r7
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e057      	b.n	80036ca <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800361a:	231b      	movs	r3, #27
 800361c:	2220      	movs	r2, #32
 800361e:	189b      	adds	r3, r3, r2
 8003620:	19db      	adds	r3, r3, r7
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d015      	beq.n	8003654 <UART_SetConfig+0x4d0>
 8003628:	dc18      	bgt.n	800365c <UART_SetConfig+0x4d8>
 800362a:	2b04      	cmp	r3, #4
 800362c:	d00d      	beq.n	800364a <UART_SetConfig+0x4c6>
 800362e:	dc15      	bgt.n	800365c <UART_SetConfig+0x4d8>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <UART_SetConfig+0x4b6>
 8003634:	2b02      	cmp	r3, #2
 8003636:	d005      	beq.n	8003644 <UART_SetConfig+0x4c0>
 8003638:	e010      	b.n	800365c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363a:	f7ff fb7f 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 800363e:	0003      	movs	r3, r0
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003642:	e014      	b.n	800366e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <UART_SetConfig+0x578>)
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003648:	e011      	b.n	800366e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7ff faeb 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 800364e:	0003      	movs	r3, r0
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003652:	e00c      	b.n	800366e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800365a:	e008      	b.n	800366e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003660:	231a      	movs	r3, #26
 8003662:	2220      	movs	r2, #32
 8003664:	189b      	adds	r3, r3, r2
 8003666:	19db      	adds	r3, r3, r7
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
        break;
 800366c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02a      	beq.n	80036ca <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <UART_SetConfig+0x574>)
 800367a:	0052      	lsls	r2, r2, #1
 800367c:	5ad3      	ldrh	r3, [r2, r3]
 800367e:	0019      	movs	r1, r3
 8003680:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003682:	f7fc fd3f 	bl	8000104 <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	001a      	movs	r2, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	18d2      	adds	r2, r2, r3
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f7fc fd33 	bl	8000104 <__udivsi3>
 800369e:	0003      	movs	r3, r0
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d90a      	bls.n	80036be <UART_SetConfig+0x53a>
 80036a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d205      	bcs.n	80036be <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	e005      	b.n	80036ca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80036be:	231a      	movs	r3, #26
 80036c0:	2220      	movs	r2, #32
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	226a      	movs	r2, #106	; 0x6a
 80036ce:	2101      	movs	r1, #1
 80036d0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2268      	movs	r2, #104	; 0x68
 80036d6:	2101      	movs	r1, #1
 80036d8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	2200      	movs	r2, #0
 80036de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	2200      	movs	r2, #0
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80036e6:	231a      	movs	r3, #26
 80036e8:	2220      	movs	r2, #32
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	781b      	ldrb	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b010      	add	sp, #64	; 0x40
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}
 80036f8:	080063c4 	.word	0x080063c4
 80036fc:	00f42400 	.word	0x00f42400

08003700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	d00b      	beq.n	800372a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <UART_AdvFeatureConfig+0x144>)
 800371a:	4013      	ands	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	2202      	movs	r2, #2
 8003730:	4013      	ands	r3, r2
 8003732:	d00b      	beq.n	800374c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a43      	ldr	r2, [pc, #268]	; (8003848 <UART_AdvFeatureConfig+0x148>)
 800373c:	4013      	ands	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	2204      	movs	r2, #4
 8003752:	4013      	ands	r3, r2
 8003754:	d00b      	beq.n	800376e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a3b      	ldr	r2, [pc, #236]	; (800384c <UART_AdvFeatureConfig+0x14c>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	2208      	movs	r2, #8
 8003774:	4013      	ands	r3, r2
 8003776:	d00b      	beq.n	8003790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a34      	ldr	r2, [pc, #208]	; (8003850 <UART_AdvFeatureConfig+0x150>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	2210      	movs	r2, #16
 8003796:	4013      	ands	r3, r2
 8003798:	d00b      	beq.n	80037b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a2c      	ldr	r2, [pc, #176]	; (8003854 <UART_AdvFeatureConfig+0x154>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	2220      	movs	r2, #32
 80037b8:	4013      	ands	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4a25      	ldr	r2, [pc, #148]	; (8003858 <UART_AdvFeatureConfig+0x158>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	2240      	movs	r2, #64	; 0x40
 80037da:	4013      	ands	r3, r2
 80037dc:	d01d      	beq.n	800381a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <UART_AdvFeatureConfig+0x15c>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	0019      	movs	r1, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	035b      	lsls	r3, r3, #13
 80037fe:	429a      	cmp	r2, r3
 8003800:	d10b      	bne.n	800381a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <UART_AdvFeatureConfig+0x160>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	4013      	ands	r3, r2
 8003822:	d00b      	beq.n	800383c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <UART_AdvFeatureConfig+0x164>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}
 8003844:	fffdffff 	.word	0xfffdffff
 8003848:	fffeffff 	.word	0xfffeffff
 800384c:	fffbffff 	.word	0xfffbffff
 8003850:	ffff7fff 	.word	0xffff7fff
 8003854:	ffffefff 	.word	0xffffefff
 8003858:	ffffdfff 	.word	0xffffdfff
 800385c:	ffefffff 	.word	0xffefffff
 8003860:	ff9fffff 	.word	0xff9fffff
 8003864:	fff7ffff 	.word	0xfff7ffff

08003868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2290      	movs	r2, #144	; 0x90
 8003874:	2100      	movs	r1, #0
 8003876:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003878:	f7fd fb88 	bl	8000f8c <HAL_GetTick>
 800387c:	0003      	movs	r3, r0
 800387e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2208      	movs	r2, #8
 8003888:	4013      	ands	r3, r2
 800388a:	2b08      	cmp	r3, #8
 800388c:	d10c      	bne.n	80038a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	0391      	lsls	r1, r2, #14
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <UART_CheckIdleState+0x98>)
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	f000 f832 	bl	8003904 <UART_WaitOnFlagUntilTimeout>
 80038a0:	1e03      	subs	r3, r0, #0
 80038a2:	d001      	beq.n	80038a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e026      	b.n	80038f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2204      	movs	r2, #4
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d10c      	bne.n	80038d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	03d1      	lsls	r1, r2, #15
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <UART_CheckIdleState+0x98>)
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f000 f81e 	bl	8003904 <UART_WaitOnFlagUntilTimeout>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d001      	beq.n	80038d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e012      	b.n	80038f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2288      	movs	r2, #136	; 0x88
 80038d4:	2120      	movs	r1, #32
 80038d6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	228c      	movs	r2, #140	; 0x8c
 80038dc:	2120      	movs	r1, #32
 80038de:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2284      	movs	r2, #132	; 0x84
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	01ffffff 	.word	0x01ffffff

08003904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b094      	sub	sp, #80	; 0x50
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003914:	e0a7      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003918:	3301      	adds	r3, #1
 800391a:	d100      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x1a>
 800391c:	e0a3      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fd fb35 	bl	8000f8c <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <UART_WaitOnFlagUntilTimeout+0x30>
 800392e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13f      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003934:	f3ef 8310 	mrs	r3, PRIMASK
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800393c:	647b      	str	r3, [r7, #68]	; 0x44
 800393e:	2301      	movs	r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	494e      	ldr	r1, [pc, #312]	; (8003a90 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003956:	400a      	ands	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	643b      	str	r3, [r7, #64]	; 0x40
 8003970:	2301      	movs	r3, #1
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2101      	movs	r1, #1
 8003988:	438a      	bics	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2288      	movs	r2, #136	; 0x88
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	228c      	movs	r2, #140	; 0x8c
 80039a4:	2120      	movs	r1, #32
 80039a6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2284      	movs	r2, #132	; 0x84
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e069      	b.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2204      	movs	r2, #4
 80039bc:	4013      	ands	r3, r2
 80039be:	d052      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	401a      	ands	r2, r3
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d148      	bne.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039de:	f3ef 8310 	mrs	r3, PRIMASK
 80039e2:	613b      	str	r3, [r7, #16]
  return(result);
 80039e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e8:	2301      	movs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4924      	ldr	r1, [pc, #144]	; (8003a90 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a10:	f3ef 8310 	mrs	r3, PRIMASK
 8003a14:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a16:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	438a      	bics	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2288      	movs	r2, #136	; 0x88
 8003a46:	2120      	movs	r1, #32
 8003a48:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	228c      	movs	r2, #140	; 0x8c
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2290      	movs	r2, #144	; 0x90
 8003a56:	2120      	movs	r1, #32
 8003a58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2284      	movs	r2, #132	; 0x84
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e010      	b.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	425a      	negs	r2, r3
 8003a76:	4153      	adcs	r3, r2
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d100      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x182>
 8003a84:	e747      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b014      	add	sp, #80	; 0x50
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	fffffe5f 	.word	0xfffffe5f

08003a94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2284      	movs	r2, #132	; 0x84
 8003aa0:	5c9b      	ldrb	r3, [r3, r2]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UARTEx_DisableFifoMode+0x16>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e027      	b.n	8003afa <HAL_UARTEx_DisableFifoMode+0x66>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2284      	movs	r2, #132	; 0x84
 8003aae:	2101      	movs	r1, #1
 8003ab0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2288      	movs	r2, #136	; 0x88
 8003ab6:	2124      	movs	r1, #36	; 0x24
 8003ab8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	438a      	bics	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2288      	movs	r2, #136	; 0x88
 8003aec:	2120      	movs	r1, #32
 8003aee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2284      	movs	r2, #132	; 0x84
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	dfffffff 	.word	0xdfffffff

08003b08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2284      	movs	r2, #132	; 0x84
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e02e      	b.n	8003b7e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2284      	movs	r2, #132	; 0x84
 8003b24:	2101      	movs	r1, #1
 8003b26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2288      	movs	r2, #136	; 0x88
 8003b2c:	2124      	movs	r1, #36	; 0x24
 8003b2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	438a      	bics	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	08d9      	lsrs	r1, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 f854 	bl	8003c0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2288      	movs	r2, #136	; 0x88
 8003b70:	2120      	movs	r1, #32
 8003b72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2284      	movs	r2, #132	; 0x84
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2284      	movs	r2, #132	; 0x84
 8003b96:	5c9b      	ldrb	r3, [r3, r2]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e02f      	b.n	8003c00 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2284      	movs	r2, #132	; 0x84
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2288      	movs	r2, #136	; 0x88
 8003bac:	2124      	movs	r1, #36	; 0x24
 8003bae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 f813 	bl	8003c0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2288      	movs	r2, #136	; 0x88
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2284      	movs	r2, #132	; 0x84
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b004      	add	sp, #16
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	f1ffffff 	.word	0xf1ffffff

08003c0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	226a      	movs	r2, #106	; 0x6a
 8003c20:	2101      	movs	r1, #1
 8003c22:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2268      	movs	r2, #104	; 0x68
 8003c28:	2101      	movs	r1, #1
 8003c2a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c2c:	e043      	b.n	8003cb6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c2e:	260f      	movs	r6, #15
 8003c30:	19bb      	adds	r3, r7, r6
 8003c32:	2208      	movs	r2, #8
 8003c34:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c36:	200e      	movs	r0, #14
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	0e5b      	lsrs	r3, r3, #25
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	240d      	movs	r4, #13
 8003c4a:	193b      	adds	r3, r7, r4
 8003c4c:	2107      	movs	r1, #7
 8003c4e:	400a      	ands	r2, r1
 8003c50:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	0f5b      	lsrs	r3, r3, #29
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	250c      	movs	r5, #12
 8003c5e:	197b      	adds	r3, r7, r5
 8003c60:	2107      	movs	r1, #7
 8003c62:	400a      	ands	r2, r1
 8003c64:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c66:	183b      	adds	r3, r7, r0
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	197a      	adds	r2, r7, r5
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	4914      	ldr	r1, [pc, #80]	; (8003cc0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c70:	5c8a      	ldrb	r2, [r1, r2]
 8003c72:	435a      	muls	r2, r3
 8003c74:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c76:	197b      	adds	r3, r7, r5
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c7e:	0019      	movs	r1, r3
 8003c80:	f7fc faca 	bl	8000218 <__divsi3>
 8003c84:	0003      	movs	r3, r0
 8003c86:	b299      	uxth	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	226a      	movs	r2, #106	; 0x6a
 8003c8c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c8e:	19bb      	adds	r3, r7, r6
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	193a      	adds	r2, r7, r4
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c98:	5c8a      	ldrb	r2, [r1, r2]
 8003c9a:	435a      	muls	r2, r3
 8003c9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ca4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	f7fc fab6 	bl	8000218 <__divsi3>
 8003cac:	0003      	movs	r3, r0
 8003cae:	b299      	uxth	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2268      	movs	r2, #104	; 0x68
 8003cb4:	5299      	strh	r1, [r3, r2]
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b005      	add	sp, #20
 8003cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	080063dc 	.word	0x080063dc
 8003cc4:	080063e4 	.word	0x080063e4

08003cc8 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	240a      	movs	r4, #10
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	1c0a      	adds	r2, r1, #0
 8003cd8:	801a      	strh	r2, [r3, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	uint8_t status = 0;
 8003cda:	2017      	movs	r0, #23
 8003cdc:	183b      	adds	r3, r7, r0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003ce2:	0021      	movs	r1, r4
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	2414      	movs	r4, #20
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	0026      	movs	r6, r4
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	705a      	strb	r2, [r3, #1]
	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 2, 100);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8819      	ldrh	r1, [r3, #0]
 8003d04:	0005      	movs	r5, r0
 8003d06:	197c      	adds	r4, r7, r5
 8003d08:	19ba      	adds	r2, r7, r6
 8003d0a:	480f      	ldr	r0, [pc, #60]	; (8003d48 <RdByte+0x80>)
 8003d0c:	2364      	movs	r3, #100	; 0x64
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2302      	movs	r3, #2
 8003d12:	f7fd fc4f 	bl	80015b4 <HAL_I2C_Master_Transmit>
 8003d16:	0003      	movs	r3, r0
 8003d18:	7023      	strb	r3, [r4, #0]
	status = HAL_I2C_Master_Receive(&hi2c1, (p_platform->address), data_read, 1, 100);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8819      	ldrh	r1, [r3, #0]
 8003d1e:	197c      	adds	r4, r7, r5
 8003d20:	2610      	movs	r6, #16
 8003d22:	19ba      	adds	r2, r7, r6
 8003d24:	4808      	ldr	r0, [pc, #32]	; (8003d48 <RdByte+0x80>)
 8003d26:	2364      	movs	r3, #100	; 0x64
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f7fd fd4a 	bl	80017c4 <HAL_I2C_Master_Receive>
 8003d30:	0003      	movs	r3, r0
 8003d32:	7023      	strb	r3, [r4, #0]
	*p_value = data_read[0];
 8003d34:	19bb      	adds	r3, r7, r6
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");

	return status;
 8003d3c:	197b      	adds	r3, r7, r5
 8003d3e:	781b      	ldrb	r3, [r3, #0]
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b007      	add	sp, #28
 8003d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d48:	20000028 	.word	0x20000028

08003d4c <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	0008      	movs	r0, r1
 8003d56:	0011      	movs	r1, r2
 8003d58:	1cbb      	adds	r3, r7, #2
 8003d5a:	1c02      	adds	r2, r0, #0
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	1c7b      	adds	r3, r7, #1
 8003d60:	1c0a      	adds	r2, r1, #0
 8003d62:	701a      	strb	r2, [r3, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	uint8_t data_write[3];
	uint8_t status = 0;
 8003d64:	240f      	movs	r4, #15
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003d6c:	1cbb      	adds	r3, r7, #2
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	200c      	movs	r0, #12
 8003d78:	183b      	adds	r3, r7, r0
 8003d7a:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8003d7c:	1cbb      	adds	r3, r7, #2
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	705a      	strb	r2, [r3, #1]
	data_write[2] = value & 0xFF;
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	1c7a      	adds	r2, r7, #1
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	709a      	strb	r2, [r3, #2]
//	status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress, I2C_MEMADD_SIZE_16BIT, &value);
	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 3, 100);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8819      	ldrh	r1, [r3, #0]
 8003d92:	0025      	movs	r5, r4
 8003d94:	193c      	adds	r4, r7, r4
 8003d96:	183a      	adds	r2, r7, r0
 8003d98:	4806      	ldr	r0, [pc, #24]	; (8003db4 <WrByte+0x68>)
 8003d9a:	2364      	movs	r3, #100	; 0x64
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2303      	movs	r3, #3
 8003da0:	f7fd fc08 	bl	80015b4 <HAL_I2C_Master_Transmit>
 8003da4:	0003      	movs	r3, r0
 8003da6:	7023      	strb	r3, [r4, #0]
	//uart_printf("write 1 byte\n");
	return status;
 8003da8:	197b      	adds	r3, r7, r5
 8003daa:	781b      	ldrb	r3, [r3, #0]
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bdb0      	pop	{r4, r5, r7, pc}
 8003db4:	20000028 	.word	0x20000028

08003db8 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b08b      	sub	sp, #44	; 0x2c
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	200a      	movs	r0, #10
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	1c0a      	adds	r2, r1, #0
 8003dca:	801a      	strh	r2, [r3, #0]
//	uint8_t status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address)), data_write

	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, (p_platform->address), RegisterAdress,
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8819      	ldrh	r1, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2617      	movs	r6, #23
 8003dd6:	19bc      	adds	r4, r7, r6
 8003dd8:	183a      	adds	r2, r7, r0
 8003dda:	8812      	ldrh	r2, [r2, #0]
 8003ddc:	4808      	ldr	r0, [pc, #32]	; (8003e00 <WrMulti+0x48>)
 8003dde:	4d09      	ldr	r5, [pc, #36]	; (8003e04 <WrMulti+0x4c>)
 8003de0:	9502      	str	r5, [sp, #8]
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2302      	movs	r3, #2
 8003dea:	f7fd fdf3 	bl	80019d4 <HAL_I2C_Mem_Write>
 8003dee:	0003      	movs	r3, r0
 8003df0:	7023      	strb	r3, [r4, #0]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8003df2:	19bb      	adds	r3, r7, r6
 8003df4:	781b      	ldrb	r3, [r3, #0]
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b007      	add	sp, #28
 8003dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	20000028 	.word	0x20000028
 8003e04:	0000ffff 	.word	0x0000ffff

08003e08 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	200a      	movs	r0, #10
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	1c0a      	adds	r2, r1, #0
 8003e1a:	801a      	strh	r2, [r3, #0]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8003e1c:	0001      	movs	r1, r0
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	2014      	movs	r0, #20
 8003e2a:	183b      	adds	r3, r7, r0
 8003e2c:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	183b      	adds	r3, r7, r0
 8003e36:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 2, 10);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8819      	ldrh	r1, [r3, #0]
 8003e3c:	2517      	movs	r5, #23
 8003e3e:	197c      	adds	r4, r7, r5
 8003e40:	183a      	adds	r2, r7, r0
 8003e42:	4810      	ldr	r0, [pc, #64]	; (8003e84 <RdMulti+0x7c>)
 8003e44:	230a      	movs	r3, #10
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f7fd fbb3 	bl	80015b4 <HAL_I2C_Master_Transmit>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	7023      	strb	r3, [r4, #0]
	status += HAL_I2C_Master_Receive(&hi2c1, (p_platform->address), p_values, size, 400);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8819      	ldrh	r1, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b29c      	uxth	r4, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4809      	ldr	r0, [pc, #36]	; (8003e84 <RdMulti+0x7c>)
 8003e5e:	23c8      	movs	r3, #200	; 0xc8
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	0023      	movs	r3, r4
 8003e66:	f7fd fcad 	bl	80017c4 <HAL_I2C_Master_Receive>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	197b      	adds	r3, r7, r5
 8003e70:	197a      	adds	r2, r7, r5
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	188a      	adds	r2, r1, r2
 8003e76:	701a      	strb	r2, [r3, #0]
    //uart_printf("read %d bytes\n",size);

	return status;
 8003e78:	197b      	adds	r3, r7, r5
 8003e7a:	781b      	ldrb	r3, [r3, #0]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b006      	add	sp, #24
 8003e82:	bdb0      	pop	{r4, r5, r7, pc}
 8003e84:	20000028 	.word	0x20000028

08003e88 <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	000a      	movs	r2, r1
 8003e92:	1cbb      	adds	r3, r7, #2
 8003e94:	801a      	strh	r2, [r3, #0]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e025      	b.n	8003ee8 <SwapBuffer+0x60>
	{
		tmp = (
		  buffer[i]<<24)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	18cb      	adds	r3, r1, r3
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	18cb      	adds	r3, r1, r3
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	3203      	adds	r2, #3
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	188a      	adds	r2, r1, r2
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	4313      	orrs	r3, r2
		tmp = (
 8003ece:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	18b9      	adds	r1, r7, r2
 8003eda:	2204      	movs	r2, #4
 8003edc:	0018      	movs	r0, r3
 8003ede:	f002 f9f5 	bl	80062cc <memcpy>
	for(i = 0; i < size; i = i + 4) 
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	1cbb      	adds	r3, r7, #2
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d3d4      	bcc.n	8003e9c <SwapBuffer+0x14>
	}
}	
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}

08003efc <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	HAL_Delay(TimeMs);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7fd f849 	bl	8000fa0 <HAL_Delay>
	return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	000c      	movs	r4, r1
 8003f22:	0010      	movs	r0, r2
 8003f24:	0019      	movs	r1, r3
 8003f26:	1cfb      	adds	r3, r7, #3
 8003f28:	1c22      	adds	r2, r4, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	1cbb      	adds	r3, r7, #2
 8003f2e:	1c02      	adds	r2, r0, #0
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	003b      	movs	r3, r7
 8003f34:	1c0a      	adds	r2, r1, #0
 8003f36:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003f38:	230f      	movs	r3, #15
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
	uint8_t timeout = 0;
 8003f40:	230e      	movs	r3, #14
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8003f48:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	22a0      	movs	r2, #160	; 0xa0
 8003f4e:	00d2      	lsls	r2, r2, #3
 8003f50:	189a      	adds	r2, r3, r2
		status |= RdMulti(&(p_dev->platform), address,
 8003f52:	1cfb      	adds	r3, r7, #3
 8003f54:	781c      	ldrb	r4, [r3, #0]
 8003f56:	003b      	movs	r3, r7
 8003f58:	8819      	ldrh	r1, [r3, #0]
 8003f5a:	0023      	movs	r3, r4
 8003f5c:	f7ff ff54 	bl	8003e08 <RdMulti>
 8003f60:	0003      	movs	r3, r0
 8003f62:	0019      	movs	r1, r3
 8003f64:	240f      	movs	r4, #15
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	193a      	adds	r2, r7, r4
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	701a      	strb	r2, [r3, #0]
		status |= WaitMs(&(p_dev->platform), 10);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	210a      	movs	r1, #10
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff ffc1 	bl	8003efc <WaitMs>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	0020      	movs	r0, r4
 8003f80:	183b      	adds	r3, r7, r0
 8003f82:	183a      	adds	r2, r7, r0
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	701a      	strb	r2, [r3, #0]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8003f8a:	230e      	movs	r3, #14
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2bc7      	cmp	r3, #199	; 0xc7
 8003f92:	d906      	bls.n	8003fa2 <_vl53l5cx_poll_for_answer+0x8a>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8003f94:	183b      	adds	r3, r7, r0
 8003f96:	183a      	adds	r2, r7, r0
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	701a      	strb	r2, [r3, #0]
			break;
 8003fa0:	e028      	b.n	8003ff4 <_vl53l5cx_poll_for_answer+0xdc>
		}else if((size >= (uint8_t)4) 
 8003fa2:	1cfb      	adds	r3, r7, #3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d90c      	bls.n	8003fc4 <_vl53l5cx_poll_for_answer+0xac>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <_vl53l5cx_poll_for_answer+0xec>)
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	2b7e      	cmp	r3, #126	; 0x7e
 8003fb2:	d907      	bls.n	8003fc4 <_vl53l5cx_poll_for_answer+0xac>
		{
			status |= VL53L5CX_MCU_ERROR;
 8003fb4:	220f      	movs	r2, #15
 8003fb6:	18bb      	adds	r3, r7, r2
 8003fb8:	18ba      	adds	r2, r7, r2
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	2142      	movs	r1, #66	; 0x42
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	701a      	strb	r2, [r3, #0]
			break;
 8003fc2:	e017      	b.n	8003ff4 <_vl53l5cx_poll_for_answer+0xdc>
		}
		else
		{
			timeout++;
 8003fc4:	210e      	movs	r1, #14
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	3201      	adds	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8003fd0:	1cbb      	adds	r3, r7, #2
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	23a0      	movs	r3, #160	; 0xa0
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	188a      	adds	r2, r1, r2
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	18ba      	adds	r2, r7, r2
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1a9      	bne.n	8003f48 <_vl53l5cx_poll_for_answer+0x30>

	return status;
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	781b      	ldrb	r3, [r3, #0]
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b005      	add	sp, #20
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	00000502 	.word	0x00000502

08004008 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8004010:	230f      	movs	r3, #15
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
   uint16_t timeout = 0;
 8004018:	230c      	movs	r3, #12
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2200      	movs	r2, #0
 800401e:	801a      	strh	r2, [r3, #0]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	250b      	movs	r5, #11
 8004024:	197a      	adds	r2, r7, r5
 8004026:	2106      	movs	r1, #6
 8004028:	0018      	movs	r0, r3
 800402a:	f7ff fe4d 	bl	8003cc8 <RdByte>
 800402e:	0003      	movs	r3, r0
 8004030:	0019      	movs	r1, r3
 8004032:	240f      	movs	r4, #15
 8004034:	193b      	adds	r3, r7, r4
 8004036:	193a      	adds	r2, r7, r4
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	701a      	strb	r2, [r3, #0]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800403e:	197b      	adds	r3, r7, r5
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b25b      	sxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	da15      	bge.n	8004074 <_vl53l5cx_poll_for_mcu_boot+0x6c>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	250a      	movs	r5, #10
 800404c:	197a      	adds	r2, r7, r5
 800404e:	2107      	movs	r1, #7
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff fe39 	bl	8003cc8 <RdByte>
 8004056:	0003      	movs	r3, r0
 8004058:	0019      	movs	r1, r3
 800405a:	193b      	adds	r3, r7, r4
 800405c:	193a      	adds	r2, r7, r4
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	701a      	strb	r2, [r3, #0]
			status |= go2_status1;
 8004064:	197b      	adds	r3, r7, r5
 8004066:	7819      	ldrb	r1, [r3, #0]
 8004068:	193b      	adds	r3, r7, r4
 800406a:	193a      	adds	r2, r7, r4
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	701a      	strb	r2, [r3, #0]
			break;
 8004072:	e019      	b.n	80040a8 <_vl53l5cx_poll_for_mcu_boot+0xa0>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2101      	movs	r1, #1
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff ff3f 	bl	8003efc <WaitMs>
		timeout++;
 800407e:	210c      	movs	r1, #12
 8004080:	187b      	adds	r3, r7, r1
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	187b      	adds	r3, r7, r1
 8004086:	3201      	adds	r2, #1
 8004088:	801a      	strh	r2, [r3, #0]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800408a:	230b      	movs	r3, #11
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	001a      	movs	r2, r3
 8004092:	2301      	movs	r3, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d106      	bne.n	80040a6 <_vl53l5cx_poll_for_mcu_boot+0x9e>
			break;
		}

	}while (timeout < (uint16_t)500);
 8004098:	187b      	adds	r3, r7, r1
 800409a:	881a      	ldrh	r2, [r3, #0]
 800409c:	23fa      	movs	r3, #250	; 0xfa
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3bd      	bcc.n	8004020 <_vl53l5cx_poll_for_mcu_boot+0x18>
 80040a4:	e000      	b.n	80040a8 <_vl53l5cx_poll_for_mcu_boot+0xa0>
			break;
 80040a6:	46c0      	nop			; (mov r8, r8)

   return status;
 80040a8:	230f      	movs	r3, #15
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040b8 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b0ea      	sub	sp, #424	; 0x1a8
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	000a      	movs	r2, r1
 80040c2:	4be0      	ldr	r3, [pc, #896]	; (8004444 <_vl53l5cx_send_offset_data+0x38c>)
 80040c4:	24d0      	movs	r4, #208	; 0xd0
 80040c6:	0064      	lsls	r4, r4, #1
 80040c8:	191b      	adds	r3, r3, r4
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80040ce:	239c      	movs	r3, #156	; 0x9c
 80040d0:	33ff      	adds	r3, #255	; 0xff
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80040d8:	4bdb      	ldr	r3, [pc, #876]	; (8004448 <_vl53l5cx_send_offset_data+0x390>)
 80040da:	191b      	adds	r3, r3, r4
 80040dc:	19db      	adds	r3, r3, r7
 80040de:	4adb      	ldr	r2, [pc, #876]	; (800444c <_vl53l5cx_send_offset_data+0x394>)
 80040e0:	ca03      	ldmia	r2!, {r0, r1}
 80040e2:	c303      	stmia	r3!, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80040e4:	4bda      	ldr	r3, [pc, #872]	; (8004450 <_vl53l5cx_send_offset_data+0x398>)
 80040e6:	191b      	adds	r3, r3, r4
 80040e8:	19db      	adds	r3, r3, r7
 80040ea:	4ada      	ldr	r2, [pc, #872]	; (8004454 <_vl53l5cx_send_offset_data+0x39c>)
 80040ec:	ca03      	ldmia	r2!, {r0, r1}
 80040ee:	c303      	stmia	r3!, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	22a0      	movs	r2, #160	; 0xa0
 80040f4:	00d2      	lsls	r2, r2, #3
 80040f6:	1898      	adds	r0, r3, r2
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 80040fc:	22f4      	movs	r2, #244	; 0xf4
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	0019      	movs	r1, r3
 8004102:	f002 f8e3 	bl	80062cc <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8004106:	4bcf      	ldr	r3, [pc, #828]	; (8004444 <_vl53l5cx_send_offset_data+0x38c>)
 8004108:	191b      	adds	r3, r3, r4
 800410a:	19db      	adds	r3, r3, r7
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b10      	cmp	r3, #16
 8004110:	d000      	beq.n	8004114 <_vl53l5cx_send_offset_data+0x5c>
 8004112:	e134      	b.n	800437e <_vl53l5cx_send_offset_data+0x2c6>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	22a2      	movs	r2, #162	; 0xa2
 8004118:	00d2      	lsls	r2, r2, #3
 800411a:	189a      	adds	r2, r3, r2
 800411c:	4bca      	ldr	r3, [pc, #808]	; (8004448 <_vl53l5cx_send_offset_data+0x390>)
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	0010      	movs	r0, r2
 8004124:	0019      	movs	r1, r3
 8004126:	2308      	movs	r3, #8
 8004128:	001a      	movs	r2, r3
 800412a:	f002 f8cf 	bl	80062cc <memcpy>
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	22a0      	movs	r2, #160	; 0xa0
 8004132:	00d2      	lsls	r2, r2, #3
 8004134:	4694      	mov	ip, r2
 8004136:	4463      	add	r3, ip
 8004138:	22f4      	movs	r2, #244	; 0xf4
 800413a:	0052      	lsls	r2, r2, #1
 800413c:	0011      	movs	r1, r2
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff fea2 	bl	8003e88 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4ac4      	ldr	r2, [pc, #784]	; (8004458 <_vl53l5cx_send_offset_data+0x3a0>)
 8004148:	1899      	adds	r1, r3, r2
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	005a      	lsls	r2, r3, #1
 800414e:	2398      	movs	r3, #152	; 0x98
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	0018      	movs	r0, r3
 8004154:	f002 f8ba 	bl	80062cc <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	22c8      	movs	r2, #200	; 0xc8
 800415c:	00d2      	lsls	r2, r2, #3
 800415e:	1899      	adds	r1, r3, r2
 8004160:	2318      	movs	r3, #24
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	0018      	movs	r0, r3
 8004168:	f002 f8b0 	bl	80062cc <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800416c:	23cf      	movs	r3, #207	; 0xcf
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e0cb      	b.n	8004310 <_vl53l5cx_send_offset_data+0x258>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004178:	23a0      	movs	r3, #160	; 0xa0
 800417a:	33ff      	adds	r3, #255	; 0xff
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e0b3      	b.n	80042ec <_vl53l5cx_send_offset_data+0x234>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8004184:	20a0      	movs	r0, #160	; 0xa0
 8004186:	30ff      	adds	r0, #255	; 0xff
 8004188:	183b      	adds	r3, r7, r0
 800418a:	2200      	movs	r2, #0
 800418c:	569a      	ldrsb	r2, [r3, r2]
 800418e:	24cf      	movs	r4, #207	; 0xcf
 8004190:	0064      	lsls	r4, r4, #1
 8004192:	193b      	adds	r3, r7, r4
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b25b      	sxtb	r3, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	005a      	lsls	r2, r3, #1
 800419e:	4baf      	ldr	r3, [pc, #700]	; (800445c <_vl53l5cx_send_offset_data+0x3a4>)
 80041a0:	25d0      	movs	r5, #208	; 0xd0
 80041a2:	006d      	lsls	r5, r5, #1
 80041a4:	195b      	adds	r3, r3, r5
 80041a6:	19db      	adds	r3, r3, r7
 80041a8:	0092      	lsls	r2, r2, #2
 80041aa:	58d2      	ldr	r2, [r2, r3]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	2100      	movs	r1, #0
 80041b0:	5659      	ldrsb	r1, [r3, r1]
 80041b2:	193b      	adds	r3, r7, r4
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b25b      	sxtb	r3, r3
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	18cb      	adds	r3, r1, r3
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	1c59      	adds	r1, r3, #1
 80041c0:	4ba6      	ldr	r3, [pc, #664]	; (800445c <_vl53l5cx_send_offset_data+0x3a4>)
 80041c2:	195b      	adds	r3, r3, r5
 80041c4:	19db      	adds	r3, r3, r7
 80041c6:	0089      	lsls	r1, r1, #2
 80041c8:	58cb      	ldr	r3, [r1, r3]
 80041ca:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80041cc:	183b      	adds	r3, r7, r0
 80041ce:	2100      	movs	r1, #0
 80041d0:	5659      	ldrsb	r1, [r3, r1]
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	18cb      	adds	r3, r1, r3
 80041dc:	3304      	adds	r3, #4
 80041de:	0059      	lsls	r1, r3, #1
 80041e0:	4b9e      	ldr	r3, [pc, #632]	; (800445c <_vl53l5cx_send_offset_data+0x3a4>)
 80041e2:	195b      	adds	r3, r3, r5
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	0089      	lsls	r1, r1, #2
 80041e8:	58cb      	ldr	r3, [r1, r3]
 80041ea:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80041ec:	183b      	adds	r3, r7, r0
 80041ee:	2100      	movs	r1, #0
 80041f0:	5659      	ldrsb	r1, [r3, r1]
 80041f2:	193b      	adds	r3, r7, r4
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	18cb      	adds	r3, r1, r3
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	3309      	adds	r3, #9
 8004200:	0019      	movs	r1, r3
 8004202:	4b96      	ldr	r3, [pc, #600]	; (800445c <_vl53l5cx_send_offset_data+0x3a4>)
 8004204:	195b      	adds	r3, r3, r5
 8004206:	19db      	adds	r3, r3, r7
 8004208:	0089      	lsls	r1, r1, #2
 800420a:	58cb      	ldr	r3, [r1, r3]
 800420c:	18d3      	adds	r3, r2, r3
				signal_grid[i+(4*j)] =
 800420e:	183a      	adds	r2, r7, r0
 8004210:	2100      	movs	r1, #0
 8004212:	5651      	ldrsb	r1, [r2, r1]
 8004214:	193a      	adds	r2, r7, r4
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	b252      	sxtb	r2, r2
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	188a      	adds	r2, r1, r2
                                  /(uint32_t)4;
 800421e:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8004220:	4b8e      	ldr	r3, [pc, #568]	; (800445c <_vl53l5cx_send_offset_data+0x3a4>)
 8004222:	195b      	adds	r3, r3, r5
 8004224:	19db      	adds	r3, r3, r7
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	50d1      	str	r1, [r2, r3]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 800422a:	183b      	adds	r3, r7, r0
 800422c:	2200      	movs	r2, #0
 800422e:	569a      	ldrsb	r2, [r3, r2]
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b25b      	sxtb	r3, r3
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	18d3      	adds	r3, r2, r3
 800423a:	005a      	lsls	r2, r3, #1
 800423c:	4b88      	ldr	r3, [pc, #544]	; (8004460 <_vl53l5cx_send_offset_data+0x3a8>)
 800423e:	195b      	adds	r3, r3, r5
 8004240:	19db      	adds	r3, r3, r7
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	5ed3      	ldrsh	r3, [r2, r3]
 8004246:	0019      	movs	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8004248:	183b      	adds	r3, r7, r0
 800424a:	2200      	movs	r2, #0
 800424c:	569a      	ldrsb	r2, [r3, r2]
 800424e:	193b      	adds	r3, r7, r4
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b25b      	sxtb	r3, r3
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	4b80      	ldr	r3, [pc, #512]	; (8004460 <_vl53l5cx_send_offset_data+0x3a8>)
 800425e:	195b      	adds	r3, r3, r5
 8004260:	19db      	adds	r3, r3, r7
 8004262:	0052      	lsls	r2, r2, #1
 8004264:	5ed3      	ldrsh	r3, [r2, r3]
 8004266:	18cb      	adds	r3, r1, r3
				+ range_grid[(2*i)+(16*j)+8]
 8004268:	183a      	adds	r2, r7, r0
 800426a:	2100      	movs	r1, #0
 800426c:	5651      	ldrsb	r1, [r2, r1]
 800426e:	193a      	adds	r2, r7, r4
 8004270:	7812      	ldrb	r2, [r2, #0]
 8004272:	b252      	sxtb	r2, r2
 8004274:	00d2      	lsls	r2, r2, #3
 8004276:	188a      	adds	r2, r1, r2
 8004278:	3204      	adds	r2, #4
 800427a:	0051      	lsls	r1, r2, #1
 800427c:	4a78      	ldr	r2, [pc, #480]	; (8004460 <_vl53l5cx_send_offset_data+0x3a8>)
 800427e:	1952      	adds	r2, r2, r5
 8004280:	19d2      	adds	r2, r2, r7
 8004282:	0049      	lsls	r1, r1, #1
 8004284:	5e8a      	ldrsh	r2, [r1, r2]
 8004286:	189b      	adds	r3, r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8004288:	183a      	adds	r2, r7, r0
 800428a:	2100      	movs	r1, #0
 800428c:	5651      	ldrsb	r1, [r2, r1]
 800428e:	193a      	adds	r2, r7, r4
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	b252      	sxtb	r2, r2
 8004294:	00d2      	lsls	r2, r2, #3
 8004296:	188a      	adds	r2, r1, r2
 8004298:	0052      	lsls	r2, r2, #1
 800429a:	3209      	adds	r2, #9
 800429c:	0011      	movs	r1, r2
 800429e:	4a70      	ldr	r2, [pc, #448]	; (8004460 <_vl53l5cx_send_offset_data+0x3a8>)
 80042a0:	1952      	adds	r2, r2, r5
 80042a2:	19d2      	adds	r2, r2, r7
 80042a4:	0049      	lsls	r1, r1, #1
 80042a6:	5e8a      	ldrsh	r2, [r1, r2]
 80042a8:	189b      	adds	r3, r3, r2
                                  /(int16_t)4;
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da00      	bge.n	80042b0 <_vl53l5cx_send_offset_data+0x1f8>
 80042ae:	3303      	adds	r3, #3
 80042b0:	109b      	asrs	r3, r3, #2
 80042b2:	0019      	movs	r1, r3
				range_grid[i+(4*j)] =
 80042b4:	20a0      	movs	r0, #160	; 0xa0
 80042b6:	30ff      	adds	r0, #255	; 0xff
 80042b8:	183b      	adds	r3, r7, r0
 80042ba:	2200      	movs	r2, #0
 80042bc:	569a      	ldrsb	r2, [r3, r2]
 80042be:	23cf      	movs	r3, #207	; 0xcf
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	18d2      	adds	r2, r2, r3
 80042cc:	b209      	sxth	r1, r1
 80042ce:	4b64      	ldr	r3, [pc, #400]	; (8004460 <_vl53l5cx_send_offset_data+0x3a8>)
 80042d0:	24d0      	movs	r4, #208	; 0xd0
 80042d2:	0064      	lsls	r4, r4, #1
 80042d4:	191b      	adds	r3, r3, r4
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	0052      	lsls	r2, r2, #1
 80042da:	52d1      	strh	r1, [r2, r3]
			for (i = 0; i < (int8_t)4 ; i++)
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	183b      	adds	r3, r7, r0
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	23a0      	movs	r3, #160	; 0xa0
 80042ee:	33ff      	adds	r3, #255	; 0xff
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	dc00      	bgt.n	80042fc <_vl53l5cx_send_offset_data+0x244>
 80042fa:	e743      	b.n	8004184 <_vl53l5cx_send_offset_data+0xcc>
		for (j = 0; j < (int8_t)4; j++)
 80042fc:	21cf      	movs	r1, #207	; 0xcf
 80042fe:	0049      	lsls	r1, r1, #1
 8004300:	187b      	adds	r3, r7, r1
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b25b      	sxtb	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	187b      	adds	r3, r7, r1
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	23cf      	movs	r3, #207	; 0xcf
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b25b      	sxtb	r3, r3
 800431a:	2b03      	cmp	r3, #3
 800431c:	dc00      	bgt.n	8004320 <_vl53l5cx_send_offset_data+0x268>
 800431e:	e72b      	b.n	8004178 <_vl53l5cx_send_offset_data+0xc0>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8004320:	2418      	movs	r4, #24
 8004322:	193b      	adds	r3, r7, r4
 8004324:	3320      	adds	r3, #32
 8004326:	2260      	movs	r2, #96	; 0x60
 8004328:	2100      	movs	r1, #0
 800432a:	0018      	movs	r0, r3
 800432c:	f001 ffa2 	bl	8006274 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8004330:	2598      	movs	r5, #152	; 0x98
 8004332:	197b      	adds	r3, r7, r5
 8004334:	3340      	adds	r3, #64	; 0x40
 8004336:	22c0      	movs	r2, #192	; 0xc0
 8004338:	2100      	movs	r1, #0
 800433a:	0018      	movs	r0, r3
 800433c:	f001 ff9a 	bl	8006274 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a45      	ldr	r2, [pc, #276]	; (8004458 <_vl53l5cx_send_offset_data+0x3a0>)
 8004344:	4694      	mov	ip, r2
 8004346:	4463      	add	r3, ip
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	0052      	lsls	r2, r2, #1
 800434c:	1979      	adds	r1, r7, r5
 800434e:	0018      	movs	r0, r3
 8004350:	f001 ffbc 	bl	80062cc <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	22c8      	movs	r2, #200	; 0xc8
 8004358:	00d2      	lsls	r2, r2, #3
 800435a:	4694      	mov	ip, r2
 800435c:	4463      	add	r3, ip
 800435e:	1939      	adds	r1, r7, r4
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	0018      	movs	r0, r3
 8004364:	f001 ffb2 	bl	80062cc <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	22a0      	movs	r2, #160	; 0xa0
 800436c:	00d2      	lsls	r2, r2, #3
 800436e:	4694      	mov	ip, r2
 8004370:	4463      	add	r3, ip
 8004372:	22f4      	movs	r2, #244	; 0xf4
 8004374:	0052      	lsls	r2, r2, #1
 8004376:	0011      	movs	r1, r2
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff fd85 	bl	8003e88 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800437e:	23ce      	movs	r3, #206	; 0xce
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2200      	movs	r2, #0
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e019      	b.n	80043be <_vl53l5cx_send_offset_data+0x306>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800438a:	24ce      	movs	r4, #206	; 0xce
 800438c:	0064      	lsls	r4, r4, #1
 800438e:	193b      	adds	r3, r7, r4
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	3308      	adds	r3, #8
 8004394:	0019      	movs	r1, r3
 8004396:	193b      	adds	r3, r7, r4
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	23a0      	movs	r3, #160	; 0xa0
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	1841      	adds	r1, r0, r1
 80043a2:	18cb      	adds	r3, r1, r3
 80043a4:	7818      	ldrb	r0, [r3, #0]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	23a0      	movs	r3, #160	; 0xa0
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	188a      	adds	r2, r1, r2
 80043ae:	18d3      	adds	r3, r2, r3
 80043b0:	1c02      	adds	r2, r0, #0
 80043b2:	701a      	strb	r2, [r3, #0]
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	881a      	ldrh	r2, [r3, #0]
 80043b8:	193b      	adds	r3, r7, r4
 80043ba:	3201      	adds	r2, #1
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	23ce      	movs	r3, #206	; 0xce
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	23f2      	movs	r3, #242	; 0xf2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d3dd      	bcc.n	800438a <_vl53l5cx_send_offset_data+0x2d2>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	22dc      	movs	r2, #220	; 0xdc
 80043d2:	00d2      	lsls	r2, r2, #3
 80043d4:	189a      	adds	r2, r3, r2
 80043d6:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <_vl53l5cx_send_offset_data+0x398>)
 80043d8:	21d0      	movs	r1, #208	; 0xd0
 80043da:	0049      	lsls	r1, r1, #1
 80043dc:	185b      	adds	r3, r3, r1
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	0010      	movs	r0, r2
 80043e2:	0019      	movs	r1, r3
 80043e4:	2308      	movs	r3, #8
 80043e6:	001a      	movs	r2, r3
 80043e8:	f001 ff70 	bl	80062cc <memcpy>
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	22a0      	movs	r2, #160	; 0xa0
 80043f2:	00d2      	lsls	r2, r2, #3
 80043f4:	189a      	adds	r2, r3, r2
 80043f6:	23f4      	movs	r3, #244	; 0xf4
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	491a      	ldr	r1, [pc, #104]	; (8004464 <_vl53l5cx_send_offset_data+0x3ac>)
 80043fc:	f7ff fcdc 	bl	8003db8 <WrMulti>
 8004400:	0003      	movs	r3, r0
 8004402:	0019      	movs	r1, r3
 8004404:	249c      	movs	r4, #156	; 0x9c
 8004406:	34ff      	adds	r4, #255	; 0xff
 8004408:	193b      	adds	r3, r7, r4
 800440a:	193a      	adds	r2, r7, r4
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	701a      	strb	r2, [r3, #0]
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004412:	23b0      	movs	r3, #176	; 0xb0
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	2203      	movs	r2, #3
 800441a:	9201      	str	r2, [sp, #4]
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	9200      	str	r2, [sp, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	2104      	movs	r1, #4
 8004424:	f7ff fd78 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 8004428:	0003      	movs	r3, r0
 800442a:	0019      	movs	r1, r3
 800442c:	193b      	adds	r3, r7, r4
 800442e:	193a      	adds	r2, r7, r4
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8004436:	193b      	adds	r3, r7, r4
 8004438:	781b      	ldrb	r3, [r3, #0]
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b068      	add	sp, #416	; 0x1a0
 8004440:	bdb0      	pop	{r4, r5, r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	fffffe63 	.word	0xfffffe63
 8004448:	fffffe70 	.word	0xfffffe70
 800444c:	080062f8 	.word	0x080062f8
 8004450:	fffffe68 	.word	0xfffffe68
 8004454:	08006300 	.word	0x08006300
 8004458:	0000053c 	.word	0x0000053c
 800445c:	fffffef8 	.word	0xfffffef8
 8004460:	fffffe78 	.word	0xfffffe78
 8004464:	00002e18 	.word	0x00002e18

08004468 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	b0cb      	sub	sp, #300	; 0x12c
 800446c:	af02      	add	r7, sp, #8
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	000a      	movs	r2, r1
 8004472:	4b9b      	ldr	r3, [pc, #620]	; (80046e0 <_vl53l5cx_send_xtalk_data+0x278>)
 8004474:	2490      	movs	r4, #144	; 0x90
 8004476:	0064      	lsls	r4, r4, #1
 8004478:	191b      	adds	r3, r3, r4
 800447a:	19db      	adds	r3, r3, r7
 800447c:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800447e:	231e      	movs	r3, #30
 8004480:	33ff      	adds	r3, #255	; 0xff
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8004488:	258a      	movs	r5, #138	; 0x8a
 800448a:	006d      	lsls	r5, r5, #1
 800448c:	197b      	adds	r3, r7, r5
 800448e:	4a95      	ldr	r2, [pc, #596]	; (80046e4 <_vl53l5cx_send_xtalk_data+0x27c>)
 8004490:	ca03      	ldmia	r2!, {r0, r1}
 8004492:	c303      	stmia	r3!, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8004494:	2686      	movs	r6, #134	; 0x86
 8004496:	0076      	lsls	r6, r6, #1
 8004498:	19bb      	adds	r3, r7, r6
 800449a:	4a93      	ldr	r2, [pc, #588]	; (80046e8 <_vl53l5cx_send_xtalk_data+0x280>)
 800449c:	ca03      	ldmia	r2!, {r0, r1}
 800449e:	c303      	stmia	r3!, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80044a0:	2384      	movs	r3, #132	; 0x84
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	4a91      	ldr	r2, [pc, #580]	; (80046ec <_vl53l5cx_send_xtalk_data+0x284>)
 80044a8:	601a      	str	r2, [r3, #0]
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	22a0      	movs	r2, #160	; 0xa0
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	1898      	adds	r0, r3, r2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	33f9      	adds	r3, #249	; 0xf9
 80044b6:	33ff      	adds	r3, #255	; 0xff
 80044b8:	22c2      	movs	r2, #194	; 0xc2
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	0019      	movs	r1, r3
 80044be:	f001 ff05 	bl	80062cc <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 80044c2:	4b87      	ldr	r3, [pc, #540]	; (80046e0 <_vl53l5cx_send_xtalk_data+0x278>)
 80044c4:	191b      	adds	r3, r3, r4
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d000      	beq.n	80044d0 <_vl53l5cx_send_xtalk_data+0x68>
 80044ce:	e0dc      	b.n	800468a <_vl53l5cx_send_xtalk_data+0x222>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	22a1      	movs	r2, #161	; 0xa1
 80044d4:	00d2      	lsls	r2, r2, #3
 80044d6:	189a      	adds	r2, r3, r2
 80044d8:	197b      	adds	r3, r7, r5
 80044da:	0010      	movs	r0, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	2308      	movs	r3, #8
 80044e0:	001a      	movs	r2, r3
 80044e2:	f001 fef3 	bl	80062cc <memcpy>
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	22a4      	movs	r2, #164	; 0xa4
 80044ea:	00d2      	lsls	r2, r2, #3
 80044ec:	189a      	adds	r2, r3, r2
 80044ee:	19bb      	adds	r3, r7, r6
 80044f0:	0010      	movs	r0, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	2308      	movs	r3, #8
 80044f6:	001a      	movs	r2, r3
 80044f8:	f001 fee8 	bl	80062cc <memcpy>
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	22a0      	movs	r2, #160	; 0xa0
 8004500:	00d2      	lsls	r2, r2, #3
 8004502:	4694      	mov	ip, r2
 8004504:	4463      	add	r3, ip
 8004506:	22c2      	movs	r2, #194	; 0xc2
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	0011      	movs	r1, r2
 800450c:	0018      	movs	r0, r3
 800450e:	f7ff fcbb 	bl	8003e88 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a76      	ldr	r2, [pc, #472]	; (80046f0 <_vl53l5cx_send_xtalk_data+0x288>)
 8004516:	1899      	adds	r1, r3, r2
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	005a      	lsls	r2, r3, #1
 800451c:	2308      	movs	r3, #8
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	0018      	movs	r0, r3
 8004522:	f001 fed3 	bl	80062cc <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8004526:	238f      	movs	r3, #143	; 0x8f
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e071      	b.n	8004616 <_vl53l5cx_send_xtalk_data+0x1ae>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004532:	2320      	movs	r3, #32
 8004534:	33ff      	adds	r3, #255	; 0xff
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	e05a      	b.n	80045f4 <_vl53l5cx_send_xtalk_data+0x18c>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800453e:	2020      	movs	r0, #32
 8004540:	30ff      	adds	r0, #255	; 0xff
 8004542:	183b      	adds	r3, r7, r0
 8004544:	2200      	movs	r2, #0
 8004546:	569a      	ldrsb	r2, [r3, r2]
 8004548:	248f      	movs	r4, #143	; 0x8f
 800454a:	0064      	lsls	r4, r4, #1
 800454c:	193b      	adds	r3, r7, r4
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b25b      	sxtb	r3, r3
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	005a      	lsls	r2, r3, #1
 8004558:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <_vl53l5cx_send_xtalk_data+0x28c>)
 800455a:	2590      	movs	r5, #144	; 0x90
 800455c:	006d      	lsls	r5, r5, #1
 800455e:	195b      	adds	r3, r3, r5
 8004560:	19db      	adds	r3, r3, r7
 8004562:	0092      	lsls	r2, r2, #2
 8004564:	58d2      	ldr	r2, [r2, r3]
				+ signal_grid[(2*i)+(16*j)+1]
 8004566:	183b      	adds	r3, r7, r0
 8004568:	2100      	movs	r1, #0
 800456a:	5659      	ldrsb	r1, [r3, r1]
 800456c:	193b      	adds	r3, r7, r4
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b25b      	sxtb	r3, r3
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	18cb      	adds	r3, r1, r3
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	1c59      	adds	r1, r3, #1
 800457a:	4b5e      	ldr	r3, [pc, #376]	; (80046f4 <_vl53l5cx_send_xtalk_data+0x28c>)
 800457c:	195b      	adds	r3, r3, r5
 800457e:	19db      	adds	r3, r3, r7
 8004580:	0089      	lsls	r1, r1, #2
 8004582:	58cb      	ldr	r3, [r1, r3]
 8004584:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8004586:	183b      	adds	r3, r7, r0
 8004588:	2100      	movs	r1, #0
 800458a:	5659      	ldrsb	r1, [r3, r1]
 800458c:	193b      	adds	r3, r7, r4
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b25b      	sxtb	r3, r3
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	18cb      	adds	r3, r1, r3
 8004596:	3304      	adds	r3, #4
 8004598:	0059      	lsls	r1, r3, #1
 800459a:	4b56      	ldr	r3, [pc, #344]	; (80046f4 <_vl53l5cx_send_xtalk_data+0x28c>)
 800459c:	195b      	adds	r3, r3, r5
 800459e:	19db      	adds	r3, r3, r7
 80045a0:	0089      	lsls	r1, r1, #2
 80045a2:	58cb      	ldr	r3, [r1, r3]
 80045a4:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80045a6:	183b      	adds	r3, r7, r0
 80045a8:	2100      	movs	r1, #0
 80045aa:	5659      	ldrsb	r1, [r3, r1]
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b25b      	sxtb	r3, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	18cb      	adds	r3, r1, r3
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	3309      	adds	r3, #9
 80045ba:	0019      	movs	r1, r3
 80045bc:	4b4d      	ldr	r3, [pc, #308]	; (80046f4 <_vl53l5cx_send_xtalk_data+0x28c>)
 80045be:	195b      	adds	r3, r3, r5
 80045c0:	19db      	adds	r3, r3, r7
 80045c2:	0089      	lsls	r1, r1, #2
 80045c4:	58cb      	ldr	r3, [r1, r3]
 80045c6:	18d3      	adds	r3, r2, r3
				signal_grid[i+(4*j)] =
 80045c8:	183a      	adds	r2, r7, r0
 80045ca:	2100      	movs	r1, #0
 80045cc:	5651      	ldrsb	r1, [r2, r1]
 80045ce:	193a      	adds	r2, r7, r4
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	b252      	sxtb	r2, r2
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	188a      	adds	r2, r1, r2
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80045d8:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80045da:	4b46      	ldr	r3, [pc, #280]	; (80046f4 <_vl53l5cx_send_xtalk_data+0x28c>)
 80045dc:	195b      	adds	r3, r3, r5
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	0092      	lsls	r2, r2, #2
 80045e2:	50d1      	str	r1, [r2, r3]
			for (i = 0; i < (int8_t)4 ; i++)
 80045e4:	183b      	adds	r3, r7, r0
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	2320      	movs	r3, #32
 80045f6:	33ff      	adds	r3, #255	; 0xff
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	2b03      	cmp	r3, #3
 8004600:	dd9d      	ble.n	800453e <_vl53l5cx_send_xtalk_data+0xd6>
		for (j = 0; j < (int8_t)4; j++)
 8004602:	218f      	movs	r1, #143	; 0x8f
 8004604:	0049      	lsls	r1, r1, #1
 8004606:	187b      	adds	r3, r7, r1
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b25b      	sxtb	r3, r3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	3301      	adds	r3, #1
 8004610:	b2da      	uxtb	r2, r3
 8004612:	187b      	adds	r3, r7, r1
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	238f      	movs	r3, #143	; 0x8f
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b25b      	sxtb	r3, r3
 8004620:	2b03      	cmp	r3, #3
 8004622:	dd86      	ble.n	8004532 <_vl53l5cx_send_xtalk_data+0xca>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8004624:	2408      	movs	r4, #8
 8004626:	193b      	adds	r3, r7, r4
 8004628:	3340      	adds	r3, #64	; 0x40
 800462a:	22c0      	movs	r2, #192	; 0xc0
 800462c:	2100      	movs	r1, #0
 800462e:	0018      	movs	r0, r3
 8004630:	f001 fe20 	bl	8006274 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2e      	ldr	r2, [pc, #184]	; (80046f0 <_vl53l5cx_send_xtalk_data+0x288>)
 8004638:	4694      	mov	ip, r2
 800463a:	4463      	add	r3, ip
 800463c:	2280      	movs	r2, #128	; 0x80
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	1939      	adds	r1, r7, r4
 8004642:	0018      	movs	r0, r3
 8004644:	f001 fe42 	bl	80062cc <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	22a0      	movs	r2, #160	; 0xa0
 800464c:	00d2      	lsls	r2, r2, #3
 800464e:	4694      	mov	ip, r2
 8004650:	4463      	add	r3, ip
 8004652:	22c2      	movs	r2, #194	; 0xc2
 8004654:	0092      	lsls	r2, r2, #2
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f7ff fc15 	bl	8003e88 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <_vl53l5cx_send_xtalk_data+0x290>)
 8004662:	189a      	adds	r2, r3, r2
 8004664:	2384      	movs	r3, #132	; 0x84
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	0010      	movs	r0, r2
 800466c:	0019      	movs	r1, r3
 800466e:	2304      	movs	r3, #4
 8004670:	001a      	movs	r2, r3
 8004672:	f001 fe2b 	bl	80062cc <memcpy>
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	22af      	movs	r2, #175	; 0xaf
 800467a:	00d2      	lsls	r2, r2, #3
 800467c:	4694      	mov	ip, r2
 800467e:	4463      	add	r3, ip
 8004680:	2204      	movs	r2, #4
 8004682:	2100      	movs	r1, #0
 8004684:	0018      	movs	r0, r3
 8004686:	f001 fdf5 	bl	8006274 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800468a:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	22a0      	movs	r2, #160	; 0xa0
 8004690:	00d2      	lsls	r2, r2, #3
 8004692:	189a      	adds	r2, r3, r2
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8004694:	23c2      	movs	r3, #194	; 0xc2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4918      	ldr	r1, [pc, #96]	; (80046fc <_vl53l5cx_send_xtalk_data+0x294>)
 800469a:	f7ff fb8d 	bl	8003db8 <WrMulti>
 800469e:	0003      	movs	r3, r0
 80046a0:	0019      	movs	r1, r3
 80046a2:	241e      	movs	r4, #30
 80046a4:	34ff      	adds	r4, #255	; 0xff
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	193a      	adds	r2, r7, r4
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	701a      	strb	r2, [r3, #0]
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80046b0:	23b0      	movs	r3, #176	; 0xb0
 80046b2:	019b      	lsls	r3, r3, #6
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	2203      	movs	r2, #3
 80046b8:	9201      	str	r2, [sp, #4]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	9200      	str	r2, [sp, #0]
 80046be:	2201      	movs	r2, #1
 80046c0:	2104      	movs	r1, #4
 80046c2:	f7ff fc29 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 80046c6:	0003      	movs	r3, r0
 80046c8:	0019      	movs	r1, r3
 80046ca:	193b      	adds	r3, r7, r4
 80046cc:	193a      	adds	r2, r7, r4
 80046ce:	7812      	ldrb	r2, [r2, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80046d4:	193b      	adds	r3, r7, r4
 80046d6:	781b      	ldrb	r3, [r3, #0]
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b049      	add	sp, #292	; 0x124
 80046de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e0:	fffffee3 	.word	0xfffffee3
 80046e4:	08006308 	.word	0x08006308
 80046e8:	08006310 	.word	0x08006310
 80046ec:	0001fca0 	.word	0x0001fca0
 80046f0:	00000534 	.word	0x00000534
 80046f4:	fffffee8 	.word	0xfffffee8
 80046f8:	00000634 	.word	0x00000634
 80046fc:	00002cf8 	.word	0x00002cf8

08004700 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8004700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004702:	b08b      	sub	sp, #44	; 0x2c
 8004704:	af04      	add	r7, sp, #16
 8004706:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8004708:	2417      	movs	r4, #23
 800470a:	193b      	adds	r3, r7, r4
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8004710:	2310      	movs	r3, #16
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	4afd      	ldr	r2, [pc, #1012]	; (8004b0c <vl53l5cx_init+0x40c>)
 8004716:	601a      	str	r2, [r3, #0]
	uint32_t single_range = 0x01;
 8004718:	2301      	movs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4afc      	ldr	r2, [pc, #1008]	; (8004b10 <vl53l5cx_init+0x410>)
 8004720:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4afb      	ldr	r2, [pc, #1004]	; (8004b14 <vl53l5cx_init+0x414>)
 8004726:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4afb      	ldr	r2, [pc, #1004]	; (8004b18 <vl53l5cx_init+0x418>)
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	49fa      	ldr	r1, [pc, #1000]	; (8004b1c <vl53l5cx_init+0x41c>)
 8004734:	2200      	movs	r2, #0
 8004736:	0018      	movs	r0, r3
 8004738:	f7ff fb08 	bl	8003d4c <WrByte>
 800473c:	0003      	movs	r3, r0
 800473e:	0019      	movs	r1, r3
 8004740:	193b      	adds	r3, r7, r4
 8004742:	193a      	adds	r2, r7, r4
 8004744:	7812      	ldrb	r2, [r2, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2204      	movs	r2, #4
 800474e:	2109      	movs	r1, #9
 8004750:	0018      	movs	r0, r3
 8004752:	f7ff fafb 	bl	8003d4c <WrByte>
 8004756:	0003      	movs	r3, r0
 8004758:	0019      	movs	r1, r3
 800475a:	193b      	adds	r3, r7, r4
 800475c:	193a      	adds	r2, r7, r4
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	210f      	movs	r1, #15
 800476a:	0018      	movs	r0, r3
 800476c:	f7ff faee 	bl	8003d4c <WrByte>
 8004770:	0003      	movs	r3, r0
 8004772:	0019      	movs	r1, r3
 8004774:	193b      	adds	r3, r7, r4
 8004776:	193a      	adds	r2, r7, r4
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2203      	movs	r2, #3
 8004782:	210a      	movs	r1, #10
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff fae1 	bl	8003d4c <WrByte>
 800478a:	0003      	movs	r3, r0
 800478c:	0019      	movs	r1, r3
 800478e:	193b      	adds	r3, r7, r4
 8004790:	193a      	adds	r2, r7, r4
 8004792:	7812      	ldrb	r2, [r2, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2516      	movs	r5, #22
 800479c:	197a      	adds	r2, r7, r5
 800479e:	49df      	ldr	r1, [pc, #892]	; (8004b1c <vl53l5cx_init+0x41c>)
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff fa91 	bl	8003cc8 <RdByte>
 80047a6:	0003      	movs	r3, r0
 80047a8:	0019      	movs	r1, r3
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	193a      	adds	r2, r7, r4
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	210c      	movs	r1, #12
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff fac6 	bl	8003d4c <WrByte>
 80047c0:	0003      	movs	r3, r0
 80047c2:	0019      	movs	r1, r3
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	193a      	adds	r2, r7, r4
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	701a      	strb	r2, [r3, #0]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	32ff      	adds	r2, #255	; 0xff
 80047d4:	0011      	movs	r1, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff fab7 	bl	8003d4c <WrByte>
 80047de:	0003      	movs	r3, r0
 80047e0:	0019      	movs	r1, r3
 80047e2:	193b      	adds	r3, r7, r4
 80047e4:	193a      	adds	r2, r7, r4
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2281      	movs	r2, #129	; 0x81
 80047f0:	0051      	lsls	r1, r2, #1
 80047f2:	2200      	movs	r2, #0
 80047f4:	0018      	movs	r0, r3
 80047f6:	f7ff faa9 	bl	8003d4c <WrByte>
 80047fa:	0003      	movs	r3, r0
 80047fc:	0019      	movs	r1, r3
 80047fe:	193b      	adds	r3, r7, r4
 8004800:	193a      	adds	r2, r7, r4
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2285      	movs	r2, #133	; 0x85
 800480c:	0051      	lsls	r1, r2, #1
 800480e:	2201      	movs	r2, #1
 8004810:	0018      	movs	r0, r3
 8004812:	f7ff fa9b 	bl	8003d4c <WrByte>
 8004816:	0003      	movs	r3, r0
 8004818:	0019      	movs	r1, r3
 800481a:	193b      	adds	r3, r7, r4
 800481c:	193a      	adds	r2, r7, r4
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	49be      	ldr	r1, [pc, #760]	; (8004b20 <vl53l5cx_init+0x420>)
 8004828:	2201      	movs	r2, #1
 800482a:	0018      	movs	r0, r3
 800482c:	f7ff fa8e 	bl	8003d4c <WrByte>
 8004830:	0003      	movs	r3, r0
 8004832:	0019      	movs	r1, r3
 8004834:	193b      	adds	r3, r7, r4
 8004836:	193a      	adds	r2, r7, r4
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	49b7      	ldr	r1, [pc, #732]	; (8004b20 <vl53l5cx_init+0x420>)
 8004842:	2200      	movs	r2, #0
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff fa81 	bl	8003d4c <WrByte>
 800484a:	0003      	movs	r3, r0
 800484c:	0019      	movs	r1, r3
 800484e:	193b      	adds	r3, r7, r4
 8004850:	193a      	adds	r2, r7, r4
 8004852:	7812      	ldrb	r2, [r2, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2285      	movs	r2, #133	; 0x85
 800485c:	0051      	lsls	r1, r2, #1
 800485e:	2203      	movs	r2, #3
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff fa73 	bl	8003d4c <WrByte>
 8004866:	0003      	movs	r3, r0
 8004868:	0019      	movs	r1, r3
 800486a:	193b      	adds	r3, r7, r4
 800486c:	193a      	adds	r2, r7, r4
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2204      	movs	r2, #4
 8004878:	32ff      	adds	r2, #255	; 0xff
 800487a:	0011      	movs	r1, r2
 800487c:	2201      	movs	r2, #1
 800487e:	0018      	movs	r0, r3
 8004880:	f7ff fa64 	bl	8003d4c <WrByte>
 8004884:	0003      	movs	r3, r0
 8004886:	0019      	movs	r1, r3
 8004888:	193b      	adds	r3, r7, r4
 800488a:	193a      	adds	r2, r7, r4
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	210c      	movs	r1, #12
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff fa57 	bl	8003d4c <WrByte>
 800489e:	0003      	movs	r3, r0
 80048a0:	0019      	movs	r1, r3
 80048a2:	193b      	adds	r3, r7, r4
 80048a4:	193a      	adds	r2, r7, r4
 80048a6:	7812      	ldrb	r2, [r2, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2243      	movs	r2, #67	; 0x43
 80048b0:	210f      	movs	r1, #15
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff fa4a 	bl	8003d4c <WrByte>
 80048b8:	0003      	movs	r3, r0
 80048ba:	0019      	movs	r1, r3
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	193a      	adds	r2, r7, r4
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	701a      	strb	r2, [r3, #0]
	status |= WaitMs(&(p_dev->platform), 1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2101      	movs	r1, #1
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff fb16 	bl	8003efc <WaitMs>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0019      	movs	r1, r3
 80048d4:	193b      	adds	r3, r7, r4
 80048d6:	193a      	adds	r2, r7, r4
 80048d8:	7812      	ldrb	r2, [r2, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	701a      	strb	r2, [r3, #0]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	210f      	movs	r1, #15
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff fa31 	bl	8003d4c <WrByte>
 80048ea:	0003      	movs	r3, r0
 80048ec:	0019      	movs	r1, r3
 80048ee:	193b      	adds	r3, r7, r4
 80048f0:	193a      	adds	r2, r7, r4
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	210a      	movs	r1, #10
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff fa24 	bl	8003d4c <WrByte>
 8004904:	0003      	movs	r3, r0
 8004906:	0019      	movs	r1, r3
 8004908:	193b      	adds	r3, r7, r4
 800490a:	193a      	adds	r2, r7, r4
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	701a      	strb	r2, [r3, #0]
	status |= WaitMs(&(p_dev->platform), 100);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2164      	movs	r1, #100	; 0x64
 8004916:	0018      	movs	r0, r3
 8004918:	f7ff faf0 	bl	8003efc <WaitMs>
 800491c:	0003      	movs	r3, r0
 800491e:	0019      	movs	r1, r3
 8004920:	193b      	adds	r3, r7, r4
 8004922:	193a      	adds	r2, r7, r4
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	701a      	strb	r2, [r3, #0]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	497b      	ldr	r1, [pc, #492]	; (8004b1c <vl53l5cx_init+0x41c>)
 800492e:	2200      	movs	r2, #0
 8004930:	0018      	movs	r0, r3
 8004932:	f7ff fa0b 	bl	8003d4c <WrByte>
 8004936:	0003      	movs	r3, r0
 8004938:	0019      	movs	r1, r3
 800493a:	193b      	adds	r3, r7, r4
 800493c:	193a      	adds	r2, r7, r4
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	2301      	movs	r3, #1
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	23ff      	movs	r3, #255	; 0xff
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2306      	movs	r3, #6
 8004950:	2200      	movs	r2, #0
 8004952:	2101      	movs	r1, #1
 8004954:	f7ff fae0 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 8004958:	0003      	movs	r3, r0
 800495a:	0019      	movs	r1, r3
 800495c:	193b      	adds	r3, r7, r4
 800495e:	193a      	adds	r2, r7, r4
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 8004966:	193b      	adds	r3, r7, r4
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d000      	beq.n	8004970 <vl53l5cx_init+0x270>
 800496e:	e3c6      	b.n	80050fe <vl53l5cx_init+0x9fe>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	210e      	movs	r1, #14
 8004976:	0018      	movs	r0, r3
 8004978:	f7ff f9e8 	bl	8003d4c <WrByte>
 800497c:	0003      	movs	r3, r0
 800497e:	0019      	movs	r1, r3
 8004980:	193b      	adds	r3, r7, r4
 8004982:	193a      	adds	r2, r7, r4
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4963      	ldr	r1, [pc, #396]	; (8004b1c <vl53l5cx_init+0x41c>)
 800498e:	2202      	movs	r2, #2
 8004990:	0018      	movs	r0, r3
 8004992:	f7ff f9db 	bl	8003d4c <WrByte>
 8004996:	0003      	movs	r3, r0
 8004998:	0019      	movs	r1, r3
 800499a:	193b      	adds	r3, r7, r4
 800499c:	193a      	adds	r2, r7, r4
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	701a      	strb	r2, [r3, #0]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	220d      	movs	r2, #13
 80049a8:	2103      	movs	r1, #3
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff f9ce 	bl	8003d4c <WrByte>
 80049b0:	0003      	movs	r3, r0
 80049b2:	0019      	movs	r1, r3
 80049b4:	193b      	adds	r3, r7, r4
 80049b6:	193a      	adds	r2, r7, r4
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4956      	ldr	r1, [pc, #344]	; (8004b1c <vl53l5cx_init+0x41c>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff f9c1 	bl	8003d4c <WrByte>
 80049ca:	0003      	movs	r3, r0
 80049cc:	0019      	movs	r1, r3
 80049ce:	193b      	adds	r3, r7, r4
 80049d0:	193a      	adds	r2, r7, r4
 80049d2:	7812      	ldrb	r2, [r2, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	2310      	movs	r3, #16
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	2310      	movs	r3, #16
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2321      	movs	r3, #33	; 0x21
 80049e4:	2200      	movs	r2, #0
 80049e6:	2101      	movs	r1, #1
 80049e8:	f7ff fa96 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 80049ec:	0003      	movs	r3, r0
 80049ee:	0019      	movs	r1, r3
 80049f0:	193b      	adds	r3, r7, r4
 80049f2:	193a      	adds	r2, r7, r4
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4947      	ldr	r1, [pc, #284]	; (8004b1c <vl53l5cx_init+0x41c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff f9a3 	bl	8003d4c <WrByte>
 8004a06:	0003      	movs	r3, r0
 8004a08:	0019      	movs	r1, r3
 8004a0a:	193b      	adds	r3, r7, r4
 8004a0c:	193a      	adds	r2, r7, r4
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	701a      	strb	r2, [r3, #0]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	197a      	adds	r2, r7, r5
 8004a18:	4940      	ldr	r1, [pc, #256]	; (8004b1c <vl53l5cx_init+0x41c>)
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff f954 	bl	8003cc8 <RdByte>
 8004a20:	0003      	movs	r3, r0
 8004a22:	0019      	movs	r1, r3
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	193a      	adds	r2, r7, r4
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	210c      	movs	r1, #12
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7ff f989 	bl	8003d4c <WrByte>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	193a      	adds	r2, r7, r4
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	701a      	strb	r2, [r3, #0]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4934      	ldr	r1, [pc, #208]	; (8004b1c <vl53l5cx_init+0x41c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7ff f97c 	bl	8003d4c <WrByte>
 8004a54:	0003      	movs	r3, r0
 8004a56:	0019      	movs	r1, r3
 8004a58:	193b      	adds	r3, r7, r4
 8004a5a:	193a      	adds	r2, r7, r4
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	32ff      	adds	r2, #255	; 0xff
 8004a68:	0011      	movs	r1, r2
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff f96d 	bl	8003d4c <WrByte>
 8004a72:	0003      	movs	r3, r0
 8004a74:	0019      	movs	r1, r3
 8004a76:	193b      	adds	r3, r7, r4
 8004a78:	193a      	adds	r2, r7, r4
 8004a7a:	7812      	ldrb	r2, [r2, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2281      	movs	r2, #129	; 0x81
 8004a84:	0051      	lsls	r1, r2, #1
 8004a86:	2200      	movs	r2, #0
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7ff f95f 	bl	8003d4c <WrByte>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	0019      	movs	r1, r3
 8004a92:	193b      	adds	r3, r7, r4
 8004a94:	193a      	adds	r2, r7, r4
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2285      	movs	r2, #133	; 0x85
 8004aa0:	0051      	lsls	r1, r2, #1
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff f951 	bl	8003d4c <WrByte>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	0019      	movs	r1, r3
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	193a      	adds	r2, r7, r4
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4919      	ldr	r1, [pc, #100]	; (8004b20 <vl53l5cx_init+0x420>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff f944 	bl	8003d4c <WrByte>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	193b      	adds	r3, r7, r4
 8004aca:	193a      	adds	r2, r7, r4
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4912      	ldr	r1, [pc, #72]	; (8004b20 <vl53l5cx_init+0x420>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff f937 	bl	8003d4c <WrByte>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	193b      	adds	r3, r7, r4
 8004ae4:	193a      	adds	r2, r7, r4
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2285      	movs	r2, #133	; 0x85
 8004af0:	0051      	lsls	r1, r2, #1
 8004af2:	2203      	movs	r2, #3
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7ff f929 	bl	8003d4c <WrByte>
 8004afa:	0003      	movs	r3, r0
 8004afc:	0019      	movs	r1, r3
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	193a      	adds	r2, r7, r4
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	e00b      	b.n	8004b24 <vl53l5cx_init+0x424>
 8004b0c:	00010001 	.word	0x00010001
 8004b10:	0801b7b8 	.word	0x0801b7b8
 8004b14:	0801b3ec 	.word	0x0801b3ec
 8004b18:	00000aac 	.word	0x00000aac
 8004b1c:	00007fff 	.word	0x00007fff
 8004b20:	00004002 	.word	0x00004002
 8004b24:	2204      	movs	r2, #4
 8004b26:	32ff      	adds	r2, #255	; 0xff
 8004b28:	0011      	movs	r1, r2
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff f90d 	bl	8003d4c <WrByte>
 8004b32:	0003      	movs	r3, r0
 8004b34:	0019      	movs	r1, r3
 8004b36:	193b      	adds	r3, r7, r4
 8004b38:	193a      	adds	r2, r7, r4
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	49fd      	ldr	r1, [pc, #1012]	; (8004f38 <vl53l5cx_init+0x838>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	0018      	movs	r0, r3
 8004b48:	f7ff f900 	bl	8003d4c <WrByte>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	0019      	movs	r1, r3
 8004b50:	193b      	adds	r3, r7, r4
 8004b52:	193a      	adds	r2, r7, r4
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	49f7      	ldr	r1, [pc, #988]	; (8004f3c <vl53l5cx_init+0x83c>)
 8004b5e:	2243      	movs	r2, #67	; 0x43
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7ff f8f3 	bl	8003d4c <WrByte>
 8004b66:	0003      	movs	r3, r0
 8004b68:	0019      	movs	r1, r3
 8004b6a:	193b      	adds	r3, r7, r4
 8004b6c:	193a      	adds	r2, r7, r4
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	49f1      	ldr	r1, [pc, #964]	; (8004f3c <vl53l5cx_init+0x83c>)
 8004b78:	2203      	movs	r2, #3
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7ff f8e6 	bl	8003d4c <WrByte>
 8004b80:	0003      	movs	r3, r0
 8004b82:	0019      	movs	r1, r3
 8004b84:	193b      	adds	r3, r7, r4
 8004b86:	193a      	adds	r2, r7, r4
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	49ea      	ldr	r1, [pc, #936]	; (8004f3c <vl53l5cx_init+0x83c>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7ff f8d9 	bl	8003d4c <WrByte>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	193a      	adds	r2, r7, r4
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	49e4      	ldr	r1, [pc, #912]	; (8004f3c <vl53l5cx_init+0x83c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7ff f8cc 	bl	8003d4c <WrByte>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	193b      	adds	r3, r7, r4
 8004bba:	193a      	adds	r2, r7, r4
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	49de      	ldr	r1, [pc, #888]	; (8004f40 <vl53l5cx_init+0x840>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff f8bf 	bl	8003d4c <WrByte>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	193a      	adds	r2, r7, r4
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	49d9      	ldr	r1, [pc, #868]	; (8004f44 <vl53l5cx_init+0x844>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7ff f8b2 	bl	8003d4c <WrByte>
 8004be8:	0003      	movs	r3, r0
 8004bea:	0019      	movs	r1, r3
 8004bec:	193b      	adds	r3, r7, r4
 8004bee:	193a      	adds	r2, r7, r4
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	701a      	strb	r2, [r3, #0]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	49d3      	ldr	r1, [pc, #844]	; (8004f48 <vl53l5cx_init+0x848>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7ff f8a5 	bl	8003d4c <WrByte>
 8004c02:	0003      	movs	r3, r0
 8004c04:	0019      	movs	r1, r3
 8004c06:	193b      	adds	r3, r7, r4
 8004c08:	193a      	adds	r2, r7, r4
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	197a      	adds	r2, r7, r5
 8004c14:	49cc      	ldr	r1, [pc, #816]	; (8004f48 <vl53l5cx_init+0x848>)
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff f856 	bl	8003cc8 <RdByte>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	0019      	movs	r1, r3
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	193a      	adds	r2, r7, r4
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	210c      	movs	r1, #12
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7ff f88b 	bl	8003d4c <WrByte>
 8004c36:	0003      	movs	r3, r0
 8004c38:	0019      	movs	r1, r3
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	193a      	adds	r2, r7, r4
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	49c0      	ldr	r1, [pc, #768]	; (8004f48 <vl53l5cx_init+0x848>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7ff f87e 	bl	8003d4c <WrByte>
 8004c50:	0003      	movs	r3, r0
 8004c52:	0019      	movs	r1, r3
 8004c54:	193b      	adds	r3, r7, r4
 8004c56:	193a      	adds	r2, r7, r4
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2207      	movs	r2, #7
 8004c62:	2120      	movs	r1, #32
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff f871 	bl	8003d4c <WrByte>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	193b      	adds	r3, r7, r4
 8004c70:	193a      	adds	r2, r7, r4
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2206      	movs	r2, #6
 8004c7c:	2120      	movs	r1, #32
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7ff f864 	bl	8003d4c <WrByte>
 8004c84:	0003      	movs	r3, r0
 8004c86:	0019      	movs	r1, r3
 8004c88:	193b      	adds	r3, r7, r4
 8004c8a:	193a      	adds	r2, r7, r4
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	49ac      	ldr	r1, [pc, #688]	; (8004f48 <vl53l5cx_init+0x848>)
 8004c96:	2209      	movs	r2, #9
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff f857 	bl	8003d4c <WrByte>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	193b      	adds	r3, r7, r4
 8004ca4:	193a      	adds	r2, r7, r4
 8004ca6:	7812      	ldrb	r2, [r2, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	4aa6      	ldr	r2, [pc, #664]	; (8004f4c <vl53l5cx_init+0x84c>)
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f7ff f87f 	bl	8003db8 <WrMulti>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	193a      	adds	r2, r7, r4
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	499f      	ldr	r1, [pc, #636]	; (8004f48 <vl53l5cx_init+0x848>)
 8004ccc:	220a      	movs	r2, #10
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7ff f83c 	bl	8003d4c <WrByte>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	193a      	adds	r2, r7, r4
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	4a99      	ldr	r2, [pc, #612]	; (8004f50 <vl53l5cx_init+0x850>)
 8004cea:	2100      	movs	r1, #0
 8004cec:	f7ff f864 	bl	8003db8 <WrMulti>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	193b      	adds	r3, r7, r4
 8004cf6:	193a      	adds	r2, r7, r4
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4991      	ldr	r1, [pc, #580]	; (8004f48 <vl53l5cx_init+0x848>)
 8004d02:	220b      	movs	r2, #11
 8004d04:	0018      	movs	r0, r3
 8004d06:	f7ff f821 	bl	8003d4c <WrByte>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	193a      	adds	r2, r7, r4
 8004d12:	7812      	ldrb	r2, [r2, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	23a0      	movs	r3, #160	; 0xa0
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	4a8d      	ldr	r2, [pc, #564]	; (8004f54 <vl53l5cx_init+0x854>)
 8004d20:	2100      	movs	r1, #0
 8004d22:	f7ff f849 	bl	8003db8 <WrMulti>
 8004d26:	0003      	movs	r3, r0
 8004d28:	0019      	movs	r1, r3
 8004d2a:	193b      	adds	r3, r7, r4
 8004d2c:	193a      	adds	r2, r7, r4
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4984      	ldr	r1, [pc, #528]	; (8004f48 <vl53l5cx_init+0x848>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7ff f806 	bl	8003d4c <WrByte>
 8004d40:	0003      	movs	r3, r0
 8004d42:	0019      	movs	r1, r3
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	193a      	adds	r2, r7, r4
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	497d      	ldr	r1, [pc, #500]	; (8004f48 <vl53l5cx_init+0x848>)
 8004d52:	2202      	movs	r2, #2
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe fff9 	bl	8003d4c <WrByte>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	193b      	adds	r3, r7, r4
 8004d60:	193a      	adds	r2, r7, r4
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	220d      	movs	r2, #13
 8004d6c:	2103      	movs	r1, #3
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f7fe ffec 	bl	8003d4c <WrByte>
 8004d74:	0003      	movs	r3, r0
 8004d76:	0019      	movs	r1, r3
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	193a      	adds	r2, r7, r4
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4970      	ldr	r1, [pc, #448]	; (8004f48 <vl53l5cx_init+0x848>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7fe ffdf 	bl	8003d4c <WrByte>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	0019      	movs	r1, r3
 8004d92:	193b      	adds	r3, r7, r4
 8004d94:	193a      	adds	r2, r7, r4
 8004d96:	7812      	ldrb	r2, [r2, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	2310      	movs	r3, #16
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	2310      	movs	r3, #16
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2321      	movs	r3, #33	; 0x21
 8004da8:	2200      	movs	r2, #0
 8004daa:	2101      	movs	r1, #1
 8004dac:	f7ff f8b4 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 8004db0:	0003      	movs	r3, r0
 8004db2:	0019      	movs	r1, r3
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	193a      	adds	r2, r7, r4
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d000      	beq.n	8004dc8 <vl53l5cx_init+0x6c8>
 8004dc6:	e19c      	b.n	8005102 <vl53l5cx_init+0xa02>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	495f      	ldr	r1, [pc, #380]	; (8004f48 <vl53l5cx_init+0x848>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7fe ffbc 	bl	8003d4c <WrByte>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	193b      	adds	r3, r7, r4
 8004dda:	193a      	adds	r2, r7, r4
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	197a      	adds	r2, r7, r5
 8004de6:	4958      	ldr	r1, [pc, #352]	; (8004f48 <vl53l5cx_init+0x848>)
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fe ff6d 	bl	8003cc8 <RdByte>
 8004dee:	0003      	movs	r3, r0
 8004df0:	0019      	movs	r1, r3
 8004df2:	193b      	adds	r3, r7, r4
 8004df4:	193a      	adds	r2, r7, r4
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	210c      	movs	r1, #12
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fe ffa2 	bl	8003d4c <WrByte>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	193a      	adds	r2, r7, r4
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	494b      	ldr	r1, [pc, #300]	; (8004f48 <vl53l5cx_init+0x848>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7fe ff95 	bl	8003d4c <WrByte>
 8004e22:	0003      	movs	r3, r0
 8004e24:	0019      	movs	r1, r3
 8004e26:	193b      	adds	r3, r7, r4
 8004e28:	193a      	adds	r2, r7, r4
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	228a      	movs	r2, #138	; 0x8a
 8004e34:	0051      	lsls	r1, r2, #1
 8004e36:	2200      	movs	r2, #0
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7fe ff87 	bl	8003d4c <WrByte>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	0019      	movs	r1, r3
 8004e42:	193b      	adds	r3, r7, r4
 8004e44:	193a      	adds	r2, r7, r4
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2216      	movs	r2, #22
 8004e50:	32ff      	adds	r2, #255	; 0xff
 8004e52:	0011      	movs	r1, r2
 8004e54:	2200      	movs	r2, #0
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fe ff78 	bl	8003d4c <WrByte>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	0019      	movs	r1, r3
 8004e60:	193b      	adds	r3, r7, r4
 8004e62:	193a      	adds	r2, r7, r4
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	228b      	movs	r2, #139	; 0x8b
 8004e6e:	0051      	lsls	r1, r2, #1
 8004e70:	2242      	movs	r2, #66	; 0x42
 8004e72:	0018      	movs	r0, r3
 8004e74:	f7fe ff6a 	bl	8003d4c <WrByte>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	193a      	adds	r2, r7, r4
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2218      	movs	r2, #24
 8004e8a:	32ff      	adds	r2, #255	; 0xff
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fe ff5b 	bl	8003d4c <WrByte>
 8004e96:	0003      	movs	r3, r0
 8004e98:	0019      	movs	r1, r3
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	193a      	adds	r2, r7, r4
 8004e9e:	7812      	ldrb	r2, [r2, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	210b      	movs	r1, #11
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7fe ff4e 	bl	8003d4c <WrByte>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	193b      	adds	r3, r7, r4
 8004eb6:	193a      	adds	r2, r7, r4
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	197a      	adds	r2, r7, r5
 8004ec2:	4921      	ldr	r1, [pc, #132]	; (8004f48 <vl53l5cx_init+0x848>)
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7fe feff 	bl	8003cc8 <RdByte>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	0019      	movs	r1, r3
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	193a      	adds	r2, r7, r4
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	210c      	movs	r1, #12
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7fe ff34 	bl	8003d4c <WrByte>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	193b      	adds	r3, r7, r4
 8004eea:	193a      	adds	r2, r7, r4
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	210b      	movs	r1, #11
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7fe ff27 	bl	8003d4c <WrByte>
 8004efe:	0003      	movs	r3, r0
 8004f00:	0019      	movs	r1, r3
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	193a      	adds	r2, r7, r4
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f7ff f87a 	bl	8004008 <_vl53l5cx_poll_for_mcu_boot>
 8004f14:	0003      	movs	r3, r0
 8004f16:	0019      	movs	r1, r3
 8004f18:	193b      	adds	r3, r7, r4
 8004f1a:	193a      	adds	r2, r7, r4
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d000      	beq.n	8004f2c <vl53l5cx_init+0x82c>
 8004f2a:	e0ec      	b.n	8005106 <vl53l5cx_init+0xa06>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4906      	ldr	r1, [pc, #24]	; (8004f48 <vl53l5cx_init+0x848>)
 8004f30:	2202      	movs	r2, #2
 8004f32:	0018      	movs	r0, r3
 8004f34:	e010      	b.n	8004f58 <vl53l5cx_init+0x858>
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	0000400f 	.word	0x0000400f
 8004f3c:	0000021a 	.word	0x0000021a
 8004f40:	00000219 	.word	0x00000219
 8004f44:	0000021b 	.word	0x0000021b
 8004f48:	00007fff 	.word	0x00007fff
 8004f4c:	080063ec 	.word	0x080063ec
 8004f50:	0800e3ec 	.word	0x0800e3ec
 8004f54:	080163ec 	.word	0x080163ec
 8004f58:	f7fe fef8 	bl	8003d4c <WrByte>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	0019      	movs	r1, r3
 8004f60:	193b      	adds	r3, r7, r4
 8004f62:	193a      	adds	r2, r7, r4
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	701a      	strb	r2, [r3, #0]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4a6a      	ldr	r2, [pc, #424]	; (8005118 <vl53l5cx_init+0xa18>)
 8004f6e:	496b      	ldr	r1, [pc, #428]	; (800511c <vl53l5cx_init+0xa1c>)
 8004f70:	2328      	movs	r3, #40	; 0x28
 8004f72:	f7fe ff21 	bl	8003db8 <WrMulti>
 8004f76:	0003      	movs	r3, r0
 8004f78:	0019      	movs	r1, r3
 8004f7a:	193b      	adds	r3, r7, r4
 8004f7c:	193a      	adds	r2, r7, r4
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	701a      	strb	r2, [r3, #0]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8004f84:	23b0      	movs	r3, #176	; 0xb0
 8004f86:	019b      	lsls	r3, r3, #6
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	9201      	str	r2, [sp, #4]
 8004f8e:	22ff      	movs	r2, #255	; 0xff
 8004f90:	9200      	str	r2, [sp, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	2104      	movs	r1, #4
 8004f96:	f7fe ffbf 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	193a      	adds	r2, r7, r4
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004fa8:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	26a0      	movs	r6, #160	; 0xa0
 8004fae:	00f6      	lsls	r6, r6, #3
 8004fb0:	199a      	adds	r2, r3, r6
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004fb2:	23f6      	movs	r3, #246	; 0xf6
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	495a      	ldr	r1, [pc, #360]	; (8005120 <vl53l5cx_init+0xa20>)
 8004fb8:	f7fe ff26 	bl	8003e08 <RdMulti>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	193b      	adds	r3, r7, r4
 8004fc2:	193a      	adds	r2, r7, r4
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	701a      	strb	r2, [r3, #0]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	3010      	adds	r0, #16
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	22a0      	movs	r2, #160	; 0xa0
 8004fd4:	00d2      	lsls	r2, r2, #3
 8004fd6:	4694      	mov	ip, r2
 8004fd8:	4463      	add	r3, ip
 8004fda:	22f4      	movs	r2, #244	; 0xf4
 8004fdc:	0052      	lsls	r2, r2, #1
 8004fde:	0019      	movs	r1, r3
 8004fe0:	f001 f974 	bl	80062cc <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7ff f865 	bl	80040b8 <_vl53l5cx_send_offset_data>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	193b      	adds	r3, r7, r4
 8004ff4:	193a      	adds	r2, r7, r4
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	701a      	strb	r2, [r3, #0]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	001a      	movs	r2, r3
 8005000:	32f9      	adds	r2, #249	; 0xf9
 8005002:	32ff      	adds	r2, #255	; 0xff
 8005004:	4b47      	ldr	r3, [pc, #284]	; (8005124 <vl53l5cx_init+0xa24>)
 8005006:	0010      	movs	r0, r2
 8005008:	0019      	movs	r1, r3
 800500a:	23c2      	movs	r3, #194	; 0xc2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	001a      	movs	r2, r3
 8005010:	f001 f95c 	bl	80062cc <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2110      	movs	r1, #16
 8005018:	0018      	movs	r0, r3
 800501a:	f7ff fa25 	bl	8004468 <_vl53l5cx_send_xtalk_data>
 800501e:	0003      	movs	r3, r0
 8005020:	0019      	movs	r1, r3
 8005022:	193b      	adds	r3, r7, r4
 8005024:	193a      	adds	r2, r7, r4
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	701a      	strb	r2, [r3, #0]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	23f3      	movs	r3, #243	; 0xf3
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	493c      	ldr	r1, [pc, #240]	; (8005128 <vl53l5cx_init+0xa28>)
 8005038:	f7fe febe 	bl	8003db8 <WrMulti>
 800503c:	0003      	movs	r3, r0
 800503e:	0019      	movs	r1, r3
 8005040:	193b      	adds	r3, r7, r4
 8005042:	193a      	adds	r2, r7, r4
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800504a:	23b0      	movs	r3, #176	; 0xb0
 800504c:	019b      	lsls	r3, r3, #6
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	2203      	movs	r2, #3
 8005052:	9201      	str	r2, [sp, #4]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	2201      	movs	r2, #1
 800505a:	2104      	movs	r1, #4
 800505c:	f7fe ff5c 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 8005060:	0003      	movs	r3, r0
 8005062:	0019      	movs	r1, r3
 8005064:	193b      	adds	r3, r7, r4
 8005066:	193a      	adds	r2, r7, r4
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <vl53l5cx_init+0xa2c>)
 8005070:	2310      	movs	r3, #16
 8005072:	18f9      	adds	r1, r7, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	2304      	movs	r3, #4
 8005078:	f000 ffe0 	bl	800603c <vl53l5cx_dci_write_data>
 800507c:	0003      	movs	r3, r0
 800507e:	0019      	movs	r1, r3
 8005080:	193b      	adds	r3, r7, r4
 8005082:	193a      	adds	r2, r7, r4
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800508a:	4a29      	ldr	r2, [pc, #164]	; (8005130 <vl53l5cx_init+0xa30>)
 800508c:	230c      	movs	r3, #12
 800508e:	18f9      	adds	r1, r7, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	2304      	movs	r3, #4
 8005094:	f000 ffd2 	bl	800603c <vl53l5cx_dci_write_data>
 8005098:	0003      	movs	r3, r0
 800509a:	0019      	movs	r1, r3
 800509c:	193b      	adds	r3, r7, r4
 800509e:	193a      	adds	r2, r7, r4
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	701a      	strb	r2, [r3, #0]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 80050a6:	197b      	adds	r3, r7, r5
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1999      	adds	r1, r3, r6
 80050b0:	4a20      	ldr	r2, [pc, #128]	; (8005134 <vl53l5cx_init+0xa34>)
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	2326      	movs	r3, #38	; 0x26
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	2301      	movs	r3, #1
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	197b      	adds	r3, r7, r5
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	2328      	movs	r3, #40	; 0x28
 80050c2:	f001 f899 	bl	80061f8 <vl53l5cx_dci_replace_data>
 80050c6:	0003      	movs	r3, r0
 80050c8:	0019      	movs	r1, r3
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	193a      	adds	r2, r7, r4
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	701a      	strb	r2, [r3, #0]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	1999      	adds	r1, r3, r6
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <vl53l5cx_init+0xa34>)
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	2325      	movs	r3, #37	; 0x25
 80050de:	9302      	str	r3, [sp, #8]
 80050e0:	2301      	movs	r3, #1
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	197b      	adds	r3, r7, r5
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2328      	movs	r3, #40	; 0x28
 80050ea:	f001 f885 	bl	80061f8 <vl53l5cx_dci_replace_data>
 80050ee:	0003      	movs	r3, r0
 80050f0:	0019      	movs	r1, r3
 80050f2:	193b      	adds	r3, r7, r4
 80050f4:	193a      	adds	r2, r7, r4
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e004      	b.n	8005108 <vl53l5cx_init+0xa08>
		goto exit;
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	e002      	b.n	8005108 <vl53l5cx_init+0xa08>
		goto exit;
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	e000      	b.n	8005108 <vl53l5cx_init+0xa08>
		goto exit;
 8005106:	46c0      	nop			; (mov r8, r8)
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8005108:	2317      	movs	r3, #23
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	781b      	ldrb	r3, [r3, #0]
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b007      	add	sp, #28
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	0801bac0 	.word	0x0801bac0
 800511c:	00002fd8 	.word	0x00002fd8
 8005120:	00002c04 	.word	0x00002c04
 8005124:	0801b7b8 	.word	0x0801b7b8
 8005128:	00002c34 	.word	0x00002c34
 800512c:	0000db80 	.word	0x0000db80
 8005130:	0000d964 	.word	0x0000d964
 8005134:	0000e108 	.word	0x0000e108

08005138 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8005138:	b5b0      	push	{r4, r5, r7, lr}
 800513a:	b09c      	sub	sp, #112	; 0x70
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8005140:	2467      	movs	r4, #103	; 0x67
 8005142:	193b      	adds	r3, r7, r4
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8005148:	2150      	movs	r1, #80	; 0x50
 800514a:	187b      	adds	r3, r7, r1
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	187b      	adds	r3, r7, r1
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8005156:	234c      	movs	r3, #76	; 0x4c
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	22c0      	movs	r2, #192	; 0xc0
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	601a      	str	r2, [r3, #0]

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8005160:	235b      	movs	r3, #91	; 0x5b
 8005162:	18fa      	adds	r2, r7, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0011      	movs	r1, r2
 8005168:	0018      	movs	r0, r3
 800516a:	f000 fd6d 	bl	8005c48 <vl53l5cx_get_resolution>
 800516e:	0003      	movs	r3, r0
 8005170:	0019      	movs	r1, r3
 8005172:	193b      	adds	r3, r7, r4
 8005174:	193a      	adds	r2, r7, r4
 8005176:	7812      	ldrb	r2, [r2, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	701a      	strb	r2, [r3, #0]
	p_dev->data_read_size = 0;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8005188:	253c      	movs	r5, #60	; 0x3c
 800518a:	197b      	adds	r3, r7, r5
 800518c:	4ab9      	ldr	r2, [pc, #740]	; (8005474 <vl53l5cx_start_ranging+0x33c>)
 800518e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005190:	c313      	stmia	r3!, {r0, r1, r4}
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	601a      	str	r2, [r3, #0]
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8005196:	230c      	movs	r3, #12
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	4ab7      	ldr	r2, [pc, #732]	; (8005478 <vl53l5cx_start_ranging+0x340>)
 800519c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800519e:	c313      	stmia	r3!, {r0, r1, r4}
 80051a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051a2:	c313      	stmia	r3!, {r0, r1, r4}
 80051a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051a6:	c313      	stmia	r3!, {r0, r1, r4}
 80051a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051aa:	c313      	stmia	r3!, {r0, r1, r4}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80051ac:	197b      	adds	r3, r7, r5
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	001a      	movs	r2, r3
 80051b4:	197b      	adds	r3, r7, r5
 80051b6:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 80051b8:	0029      	movs	r1, r5
 80051ba:	197b      	adds	r3, r7, r5
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3310      	adds	r3, #16
 80051c0:	001a      	movs	r2, r3
 80051c2:	187b      	adds	r3, r7, r1
 80051c4:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3320      	adds	r3, #32
 80051cc:	001a      	movs	r2, r3
 80051ce:	187b      	adds	r3, r7, r1
 80051d0:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3340      	adds	r3, #64	; 0x40
 80051d8:	001a      	movs	r2, r3
 80051da:	187b      	adds	r3, r7, r1
 80051dc:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3380      	adds	r3, #128	; 0x80
 80051e4:	001a      	movs	r2, r3
 80051e6:	187b      	adds	r3, r7, r1
 80051e8:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	32ff      	adds	r2, #255	; 0xff
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80051f6:	187b      	adds	r3, r7, r1
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2280      	movs	r2, #128	; 0x80
 80051fc:	0092      	lsls	r2, r2, #2
 80051fe:	189a      	adds	r2, r3, r2
 8005200:	187b      	adds	r3, r7, r1
 8005202:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8005204:	187b      	adds	r3, r7, r1
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	00d2      	lsls	r2, r2, #3
 800520c:	189a      	adds	r2, r3, r2
 800520e:	187b      	adds	r3, r7, r1
 8005210:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8005212:	187b      	adds	r3, r7, r1
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	189a      	adds	r2, r3, r2
 800521c:	187b      	adds	r3, r7, r1
 800521e:	601a      	str	r2, [r3, #0]
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8005220:	2300      	movs	r3, #0
 8005222:	663b      	str	r3, [r7, #96]	; 0x60
 8005224:	e076      	b.n	8005314 <vl53l5cx_start_ranging+0x1dc>
	{
		if ((output[i] == (uint8_t)0) 
 8005226:	200c      	movs	r0, #12
 8005228:	183b      	adds	r3, r7, r0
 800522a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	58d3      	ldr	r3, [r2, r3]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d06b      	beq.n	800530c <vl53l5cx_start_ranging+0x1d4>
                    || ((output_bh_enable[i/(uint32_t)32]
 8005234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005236:	095a      	lsrs	r2, r3, #5
 8005238:	233c      	movs	r3, #60	; 0x3c
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	0092      	lsls	r2, r2, #2
 800523e:	58d2      	ldr	r2, [r2, r3]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8005240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005242:	211f      	movs	r1, #31
 8005244:	400b      	ands	r3, r1
 8005246:	40da      	lsrs	r2, r3
 8005248:	0013      	movs	r3, r2
 800524a:	2201      	movs	r2, #1
 800524c:	4013      	ands	r3, r2
                    || ((output_bh_enable[i/(uint32_t)32]
 800524e:	d05d      	beq.n	800530c <vl53l5cx_start_ranging+0x1d4>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8005250:	183a      	adds	r2, r7, r0
 8005252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	18d3      	adds	r3, r2, r3
 8005258:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 800525a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	220f      	movs	r2, #15
 8005260:	4013      	ands	r3, r2
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d041      	beq.n	80052ec <vl53l5cx_start_ranging+0x1b4>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8005268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	0f1b      	lsrs	r3, r3, #28
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b0c      	cmp	r3, #12
 8005274:	d83a      	bhi.n	80052ec <vl53l5cx_start_ranging+0x1b4>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8005276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005278:	885b      	ldrh	r3, [r3, #2]
 800527a:	4a80      	ldr	r2, [pc, #512]	; (800547c <vl53l5cx_start_ranging+0x344>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d914      	bls.n	80052aa <vl53l5cx_start_ranging+0x172>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8005280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005282:	885b      	ldrh	r3, [r3, #2]
 8005284:	4a7e      	ldr	r2, [pc, #504]	; (8005480 <vl53l5cx_start_ranging+0x348>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d80f      	bhi.n	80052aa <vl53l5cx_start_ranging+0x172>
			{
				bh_ptr->size = resolution;
 800528a:	235b      	movs	r3, #91	; 0x5b
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	051b      	lsls	r3, r3, #20
 8005292:	0d1b      	lsrs	r3, r3, #20
 8005294:	b29a      	uxth	r2, r3
 8005296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005298:	0110      	lsls	r0, r2, #4
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	210f      	movs	r1, #15
 800529e:	400a      	ands	r2, r1
 80052a0:	1c11      	adds	r1, r2, #0
 80052a2:	1c02      	adds	r2, r0, #0
 80052a4:	430a      	orrs	r2, r1
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e00e      	b.n	80052c8 <vl53l5cx_start_ranging+0x190>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80052aa:	235b      	movs	r3, #91	; 0x5b
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	051b      	lsls	r3, r3, #20
 80052b2:	0d1b      	lsrs	r3, r3, #20
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	0110      	lsls	r0, r2, #4
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	210f      	movs	r1, #15
 80052be:	400a      	ands	r2, r1
 80052c0:	1c11      	adds	r1, r2, #0
 80052c2:	1c02      	adds	r2, r0, #0
 80052c4:	430a      	orrs	r2, r1
 80052c6:	801a      	strh	r2, [r3, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	0712      	lsls	r2, r2, #28
 80052d2:	0f12      	lsrs	r2, r2, #28
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	0011      	movs	r1, r2
 80052d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	0412      	lsls	r2, r2, #16
 80052de:	0d12      	lsrs	r2, r2, #20
 80052e0:	b292      	uxth	r2, r2
 80052e2:	434a      	muls	r2, r1
 80052e4:	189a      	adds	r2, r3, r2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	e009      	b.n	8005300 <vl53l5cx_start_ranging+0x1c8>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f2:	8812      	ldrh	r2, [r2, #0]
 80052f4:	0412      	lsls	r2, r2, #16
 80052f6:	0d12      	lsrs	r2, r2, #20
 80052f8:	b292      	uxth	r2, r2
 80052fa:	189a      	adds	r2, r3, r2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	e000      	b.n	800530e <vl53l5cx_start_ranging+0x1d6>
			continue;
 800530c:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800530e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005310:	3301      	adds	r3, #1
 8005312:	663b      	str	r3, [r7, #96]	; 0x60
 8005314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005316:	2b0b      	cmp	r3, #11
 8005318:	d800      	bhi.n	800531c <vl53l5cx_start_ranging+0x1e4>
 800531a:	e784      	b.n	8005226 <vl53l5cx_start_ranging+0xee>
	}
	p_dev->data_read_size += (uint32_t)24;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	3318      	adds	r3, #24
 8005322:	001a      	movs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8005328:	4a56      	ldr	r2, [pc, #344]	; (8005484 <vl53l5cx_start_ranging+0x34c>)
 800532a:	230c      	movs	r3, #12
 800532c:	18f9      	adds	r1, r7, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	2330      	movs	r3, #48	; 0x30
 8005332:	f000 fe83 	bl	800603c <vl53l5cx_dci_write_data>
 8005336:	0003      	movs	r3, r0
 8005338:	0019      	movs	r1, r3
 800533a:	2467      	movs	r4, #103	; 0x67
 800533c:	193b      	adds	r3, r7, r4
 800533e:	193a      	adds	r2, r7, r4
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	2150      	movs	r1, #80	; 0x50
 800534c:	187b      	adds	r3, r7, r1
 800534e:	601a      	str	r2, [r3, #0]
	header_config[1] = i + (uint32_t)1;
 8005350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	187b      	adds	r3, r7, r1
 8005356:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8005358:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <vl53l5cx_start_ranging+0x350>)
 800535a:	1879      	adds	r1, r7, r1
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	2308      	movs	r3, #8
 8005360:	f000 fe6c 	bl	800603c <vl53l5cx_dci_write_data>
 8005364:	0003      	movs	r3, r0
 8005366:	0019      	movs	r1, r3
 8005368:	193b      	adds	r3, r7, r4
 800536a:	193a      	adds	r2, r7, r4
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8005372:	4a46      	ldr	r2, [pc, #280]	; (800548c <vl53l5cx_start_ranging+0x354>)
 8005374:	233c      	movs	r3, #60	; 0x3c
 8005376:	18f9      	adds	r1, r7, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	2310      	movs	r3, #16
 800537c:	f000 fe5e 	bl	800603c <vl53l5cx_dci_write_data>
 8005380:	0003      	movs	r3, r0
 8005382:	0019      	movs	r1, r3
 8005384:	193b      	adds	r3, r7, r4
 8005386:	193a      	adds	r2, r7, r4
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	493f      	ldr	r1, [pc, #252]	; (8005490 <vl53l5cx_start_ranging+0x358>)
 8005392:	2200      	movs	r2, #0
 8005394:	0018      	movs	r0, r3
 8005396:	f7fe fcd9 	bl	8003d4c <WrByte>
 800539a:	0003      	movs	r3, r0
 800539c:	0019      	movs	r1, r3
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	193a      	adds	r2, r7, r4
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2205      	movs	r2, #5
 80053ac:	2109      	movs	r1, #9
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7fe fccc 	bl	8003d4c <WrByte>
 80053b4:	0003      	movs	r3, r0
 80053b6:	0019      	movs	r1, r3
 80053b8:	193b      	adds	r3, r7, r4
 80053ba:	193a      	adds	r2, r7, r4
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4932      	ldr	r1, [pc, #200]	; (8005490 <vl53l5cx_start_ranging+0x358>)
 80053c6:	2202      	movs	r2, #2
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7fe fcbf 	bl	8003d4c <WrByte>
 80053ce:	0003      	movs	r3, r0
 80053d0:	0019      	movs	r1, r3
 80053d2:	193b      	adds	r3, r7, r4
 80053d4:	193a      	adds	r2, r7, r4
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	701a      	strb	r2, [r3, #0]

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	234c      	movs	r3, #76	; 0x4c
 80053e0:	18fa      	adds	r2, r7, r3
 80053e2:	492c      	ldr	r1, [pc, #176]	; (8005494 <vl53l5cx_start_ranging+0x35c>)
 80053e4:	2304      	movs	r3, #4
 80053e6:	f7fe fce7 	bl	8003db8 <WrMulti>
 80053ea:	0003      	movs	r3, r0
 80053ec:	0019      	movs	r1, r3
 80053ee:	193b      	adds	r3, r7, r4
 80053f0:	193a      	adds	r2, r7, r4
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	701a      	strb	r2, [r3, #0]
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80053f8:	23b0      	movs	r3, #176	; 0xb0
 80053fa:	019b      	lsls	r3, r3, #6
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	2203      	movs	r2, #3
 8005400:	9201      	str	r2, [sp, #4]
 8005402:	22ff      	movs	r2, #255	; 0xff
 8005404:	9200      	str	r2, [sp, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	2104      	movs	r1, #4
 800540a:	f7fe fd85 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 800540e:	0003      	movs	r3, r0
 8005410:	0019      	movs	r1, r3
 8005412:	193b      	adds	r3, r7, r4
 8005414:	193a      	adds	r2, r7, r4
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	22a0      	movs	r2, #160	; 0xa0
 8005420:	00d2      	lsls	r2, r2, #3
 8005422:	1899      	adds	r1, r3, r2
	status |= vl53l5cx_dci_read_data(p_dev,
 8005424:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <vl53l5cx_start_ranging+0x360>)
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	230c      	movs	r3, #12
 800542a:	f000 fd61 	bl	8005ef0 <vl53l5cx_dci_read_data>
 800542e:	0003      	movs	r3, r0
 8005430:	0019      	movs	r1, r3
 8005432:	193b      	adds	r3, r7, r4
 8005434:	193a      	adds	r2, r7, r4
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	701a      	strb	r2, [r3, #0]
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	22a1      	movs	r2, #161	; 0xa1
 8005440:	00d2      	lsls	r2, r2, #3
 8005442:	1899      	adds	r1, r3, r2
 8005444:	2558      	movs	r5, #88	; 0x58
 8005446:	197b      	adds	r3, r7, r5
 8005448:	2202      	movs	r2, #2
 800544a:	0018      	movs	r0, r3
 800544c:	f000 ff3e 	bl	80062cc <memcpy>
	if(tmp != p_dev->data_read_size)
 8005450:	197b      	adds	r3, r7, r5
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	001a      	movs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d002      	beq.n	8005464 <vl53l5cx_start_ranging+0x32c>
	{
		status |= VL53L5CX_STATUS_ERROR;
 800545e:	193b      	adds	r3, r7, r4
 8005460:	22ff      	movs	r2, #255	; 0xff
 8005462:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8005464:	2367      	movs	r3, #103	; 0x67
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b01a      	add	sp, #104	; 0x68
 8005470:	bdb0      	pop	{r4, r5, r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	08006318 	.word	0x08006318
 8005478:	08006328 	.word	0x08006328
 800547c:	000054cf 	.word	0x000054cf
 8005480:	0000588f 	.word	0x0000588f
 8005484:	0000d980 	.word	0x0000d980
 8005488:	0000d968 	.word	0x0000d968
 800548c:	0000d970 	.word	0x0000d970
 8005490:	00007fff 	.word	0x00007fff
 8005494:	00002ffc 	.word	0x00002ffc
 8005498:	00005440 	.word	0x00005440

0800549c <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 80054a4:	2313      	movs	r3, #19
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	2417      	movs	r4, #23
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
	uint16_t timeout = 0;
 80054b4:	2314      	movs	r3, #20
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]
	uint32_t auto_stop_flag = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	230c      	movs	r3, #12
 80054c4:	18fa      	adds	r2, r7, r3
 80054c6:	4975      	ldr	r1, [pc, #468]	; (800569c <vl53l5cx_stop_ranging+0x200>)
 80054c8:	2304      	movs	r3, #4
 80054ca:	f7fe fc9d 	bl	8003e08 <RdMulti>
 80054ce:	0003      	movs	r3, r0
 80054d0:	0019      	movs	r1, r3
 80054d2:	193b      	adds	r3, r7, r4
 80054d4:	193a      	adds	r2, r7, r4
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	701a      	strb	r2, [r3, #0]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a70      	ldr	r2, [pc, #448]	; (80056a0 <vl53l5cx_stop_ranging+0x204>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d062      	beq.n	80055aa <vl53l5cx_stop_ranging+0x10e>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a6f      	ldr	r2, [pc, #444]	; (80056a4 <vl53l5cx_stop_ranging+0x208>)
 80054e8:	5c9b      	ldrb	r3, [r3, r2]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d15d      	bne.n	80055aa <vl53l5cx_stop_ranging+0x10e>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	496d      	ldr	r1, [pc, #436]	; (80056a8 <vl53l5cx_stop_ranging+0x20c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7fe fc29 	bl	8003d4c <WrByte>
 80054fa:	0003      	movs	r3, r0
 80054fc:	0019      	movs	r1, r3
 80054fe:	193b      	adds	r3, r7, r4
 8005500:	193a      	adds	r2, r7, r4
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	701a      	strb	r2, [r3, #0]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2216      	movs	r2, #22
 800550c:	2115      	movs	r1, #21
 800550e:	0018      	movs	r0, r3
 8005510:	f7fe fc1c 	bl	8003d4c <WrByte>
 8005514:	0003      	movs	r3, r0
 8005516:	0019      	movs	r1, r3
 8005518:	193b      	adds	r3, r7, r4
 800551a:	193a      	adds	r2, r7, r4
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	701a      	strb	r2, [r3, #0]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	2114      	movs	r1, #20
 8005528:	0018      	movs	r0, r3
 800552a:	f7fe fc0f 	bl	8003d4c <WrByte>
 800552e:	0003      	movs	r3, r0
 8005530:	0019      	movs	r1, r3
 8005532:	193b      	adds	r3, r7, r4
 8005534:	193a      	adds	r2, r7, r4
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	701a      	strb	r2, [r3, #0]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800553c:	e02f      	b.n	800559e <vl53l5cx_stop_ranging+0x102>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2513      	movs	r5, #19
 8005542:	197a      	adds	r2, r7, r5
 8005544:	2106      	movs	r1, #6
 8005546:	0018      	movs	r0, r3
 8005548:	f7fe fbbe 	bl	8003cc8 <RdByte>
 800554c:	0003      	movs	r3, r0
 800554e:	0019      	movs	r1, r3
 8005550:	2417      	movs	r4, #23
 8005552:	193b      	adds	r3, r7, r4
 8005554:	193a      	adds	r2, r7, r4
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	701a      	strb	r2, [r3, #0]
			status |= WaitMs(&(p_dev->platform), 10);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	210a      	movs	r1, #10
 8005560:	0018      	movs	r0, r3
 8005562:	f7fe fccb 	bl	8003efc <WaitMs>
 8005566:	0003      	movs	r3, r0
 8005568:	0019      	movs	r1, r3
 800556a:	0020      	movs	r0, r4
 800556c:	183b      	adds	r3, r7, r0
 800556e:	183a      	adds	r2, r7, r0
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	701a      	strb	r2, [r3, #0]
			timeout++;	/* Timeout reached after 5 seconds */
 8005576:	2114      	movs	r1, #20
 8005578:	187b      	adds	r3, r7, r1
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	187b      	adds	r3, r7, r1
 800557e:	3201      	adds	r2, #1
 8005580:	801a      	strh	r2, [r3, #0]

			if(timeout > (uint16_t)500)
 8005582:	187b      	adds	r3, r7, r1
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	23fa      	movs	r3, #250	; 0xfa
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	429a      	cmp	r2, r3
 800558c:	d907      	bls.n	800559e <vl53l5cx_stop_ranging+0x102>
			{
				status |= tmp;
 800558e:	197b      	adds	r3, r7, r5
 8005590:	7819      	ldrb	r1, [r3, #0]
 8005592:	183b      	adds	r3, r7, r0
 8005594:	183a      	adds	r2, r7, r0
 8005596:	7812      	ldrb	r2, [r2, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	701a      	strb	r2, [r3, #0]
				break;
 800559c:	e005      	b.n	80055aa <vl53l5cx_stop_ranging+0x10e>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800559e:	2313      	movs	r3, #19
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dac9      	bge.n	800553e <vl53l5cx_stop_ranging+0xa2>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2413      	movs	r4, #19
 80055ae:	193a      	adds	r2, r7, r4
 80055b0:	2106      	movs	r1, #6
 80055b2:	0018      	movs	r0, r3
 80055b4:	f7fe fb88 	bl	8003cc8 <RdByte>
 80055b8:	0003      	movs	r3, r0
 80055ba:	0019      	movs	r1, r3
 80055bc:	2517      	movs	r5, #23
 80055be:	197b      	adds	r3, r7, r5
 80055c0:	197a      	adds	r2, r7, r5
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	701a      	strb	r2, [r3, #0]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80055c8:	193b      	adds	r3, r7, r4
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da1b      	bge.n	800560a <vl53l5cx_stop_ranging+0x16e>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	193a      	adds	r2, r7, r4
 80055d6:	2107      	movs	r1, #7
 80055d8:	0018      	movs	r0, r3
 80055da:	f7fe fb75 	bl	8003cc8 <RdByte>
 80055de:	0003      	movs	r3, r0
 80055e0:	0019      	movs	r1, r3
 80055e2:	197b      	adds	r3, r7, r5
 80055e4:	197a      	adds	r2, r7, r5
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	701a      	strb	r2, [r3, #0]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 80055ec:	193b      	adds	r3, r7, r4
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b84      	cmp	r3, #132	; 0x84
 80055f2:	d00a      	beq.n	800560a <vl53l5cx_stop_ranging+0x16e>
 80055f4:	193b      	adds	r3, r7, r4
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b85      	cmp	r3, #133	; 0x85
 80055fa:	d006      	beq.n	800560a <vl53l5cx_stop_ranging+0x16e>
		   status |= tmp;
 80055fc:	193b      	adds	r3, r7, r4
 80055fe:	7819      	ldrb	r1, [r3, #0]
 8005600:	197b      	adds	r3, r7, r5
 8005602:	197a      	adds	r2, r7, r5
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4926      	ldr	r1, [pc, #152]	; (80056a8 <vl53l5cx_stop_ranging+0x20c>)
 800560e:	2200      	movs	r2, #0
 8005610:	0018      	movs	r0, r3
 8005612:	f7fe fb9b 	bl	8003d4c <WrByte>
 8005616:	0003      	movs	r3, r0
 8005618:	0019      	movs	r1, r3
 800561a:	2417      	movs	r4, #23
 800561c:	193b      	adds	r3, r7, r4
 800561e:	193a      	adds	r2, r7, r4
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	2114      	movs	r1, #20
 800562c:	0018      	movs	r0, r3
 800562e:	f7fe fb8d 	bl	8003d4c <WrByte>
 8005632:	0003      	movs	r3, r0
 8005634:	0019      	movs	r1, r3
 8005636:	193b      	adds	r3, r7, r4
 8005638:	193a      	adds	r2, r7, r4
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	2115      	movs	r1, #21
 8005646:	0018      	movs	r0, r3
 8005648:	f7fe fb80 	bl	8003d4c <WrByte>
 800564c:	0003      	movs	r3, r0
 800564e:	0019      	movs	r1, r3
 8005650:	193b      	adds	r3, r7, r4
 8005652:	193a      	adds	r2, r7, r4
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	701a      	strb	r2, [r3, #0]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	2109      	movs	r1, #9
 8005660:	0018      	movs	r0, r3
 8005662:	f7fe fb73 	bl	8003d4c <WrByte>
 8005666:	0003      	movs	r3, r0
 8005668:	0019      	movs	r1, r3
 800566a:	193b      	adds	r3, r7, r4
 800566c:	193a      	adds	r2, r7, r4
 800566e:	7812      	ldrb	r2, [r2, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	490c      	ldr	r1, [pc, #48]	; (80056a8 <vl53l5cx_stop_ranging+0x20c>)
 8005678:	2202      	movs	r2, #2
 800567a:	0018      	movs	r0, r3
 800567c:	f7fe fb66 	bl	8003d4c <WrByte>
 8005680:	0003      	movs	r3, r0
 8005682:	0019      	movs	r1, r3
 8005684:	193b      	adds	r3, r7, r4
 8005686:	193a      	adds	r2, r7, r4
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	701a      	strb	r2, [r3, #0]

	return status;
 800568e:	193b      	adds	r3, r7, r4
 8005690:	781b      	ldrb	r3, [r3, #0]
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b006      	add	sp, #24
 8005698:	bdb0      	pop	{r4, r5, r7, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	00002ffc 	.word	0x00002ffc
 80056a0:	000004ff 	.word	0x000004ff
 80056a4:	00000aac 	.word	0x00000aac
 80056a8:	00007fff 	.word	0x00007fff

080056ac <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80056b6:	240f      	movs	r4, #15
 80056b8:	193b      	adds	r3, r7, r4
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	22a0      	movs	r2, #160	; 0xa0
 80056c4:	00d2      	lsls	r2, r2, #3
 80056c6:	189a      	adds	r2, r3, r2
 80056c8:	2304      	movs	r3, #4
 80056ca:	2100      	movs	r1, #0
 80056cc:	f7fe fb9c 	bl	8003e08 <RdMulti>
 80056d0:	0003      	movs	r3, r0
 80056d2:	0019      	movs	r1, r3
 80056d4:	193b      	adds	r3, r7, r4
 80056d6:	193a      	adds	r2, r7, r4
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	701a      	strb	r2, [r3, #0]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	23a0      	movs	r3, #160	; 0xa0
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	5cd2      	ldrb	r2, [r2, r3]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	789b      	ldrb	r3, [r3, #2]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d023      	beq.n	8005736 <vl53l5cx_check_data_ready+0x8a>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	23a0      	movs	r3, #160	; 0xa0
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	5cd3      	ldrb	r3, [r2, r3]
 80056f6:	2bff      	cmp	r3, #255	; 0xff
 80056f8:	d01d      	beq.n	8005736 <vl53l5cx_check_data_ready+0x8a>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <vl53l5cx_check_data_ready+0xbc>)
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	2b05      	cmp	r3, #5
 8005702:	d118      	bne.n	8005736 <vl53l5cx_check_data_ready+0x8a>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a19      	ldr	r2, [pc, #100]	; (800576c <vl53l5cx_check_data_ready+0xc0>)
 8005708:	5c9b      	ldrb	r3, [r3, r2]
 800570a:	001a      	movs	r2, r3
 800570c:	2305      	movs	r3, #5
 800570e:	4013      	ands	r3, r2
 8005710:	2b05      	cmp	r3, #5
 8005712:	d110      	bne.n	8005736 <vl53l5cx_check_data_ready+0x8a>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a16      	ldr	r2, [pc, #88]	; (8005770 <vl53l5cx_check_data_ready+0xc4>)
 8005718:	5c9b      	ldrb	r3, [r3, r2]
 800571a:	001a      	movs	r2, r3
 800571c:	2310      	movs	r3, #16
 800571e:	4013      	ands	r3, r2
 8005720:	d009      	beq.n	8005736 <vl53l5cx_check_data_ready+0x8a>
			)
	{
		*p_isReady = (uint8_t)1;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	23a0      	movs	r3, #160	; 0xa0
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	5cd2      	ldrb	r2, [r2, r3]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	709a      	strb	r2, [r3, #2]
 8005734:	e011      	b.n	800575a <vl53l5cx_check_data_ready+0xae>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <vl53l5cx_check_data_ready+0xc4>)
 800573a:	5c9b      	ldrb	r3, [r3, r2]
 800573c:	b25b      	sxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	da08      	bge.n	8005754 <vl53l5cx_check_data_ready+0xa8>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a09      	ldr	r2, [pc, #36]	; (800576c <vl53l5cx_check_data_ready+0xc0>)
 8005746:	5c99      	ldrb	r1, [r3, r2]
 8005748:	220f      	movs	r2, #15
 800574a:	18bb      	adds	r3, r7, r2
 800574c:	18ba      	adds	r2, r7, r2
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	701a      	strb	r2, [r3, #0]
        }

		*p_isReady = 0;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800575a:	230f      	movs	r3, #15
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	781b      	ldrb	r3, [r3, #0]
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b005      	add	sp, #20
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	00000501 	.word	0x00000501
 800576c:	00000502 	.word	0x00000502
 8005770:	00000503 	.word	0x00000503

08005774 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8005774:	b5b0      	push	{r4, r5, r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800577e:	241f      	movs	r4, #31
 8005780:	193b      	adds	r3, r7, r4
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 8005786:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	25a0      	movs	r5, #160	; 0xa0
 800578c:	00ed      	lsls	r5, r5, #3
 800578e:	195a      	adds	r2, r3, r5
	status |= RdMulti(&(p_dev->platform), 0x0,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2100      	movs	r1, #0
 8005796:	f7fe fb37 	bl	8003e08 <RdMulti>
 800579a:	0003      	movs	r3, r0
 800579c:	0019      	movs	r1, r3
 800579e:	193b      	adds	r3, r7, r4
 80057a0:	193a      	adds	r2, r7, r4
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	701a      	strb	r2, [r3, #0]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	23a0      	movs	r3, #160	; 0xa0
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	5cd2      	ldrb	r2, [r2, r3]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	195a      	adds	r2, r3, r5
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	0019      	movs	r1, r3
 80057c0:	0010      	movs	r0, r2
 80057c2:	f7fe fb61 	bl	8003e88 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80057c6:	2310      	movs	r3, #16
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e117      	b.n	80059fc <vl53l5cx_get_ranging_data+0x288>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	22a0      	movs	r2, #160	; 0xa0
 80057d0:	00d2      	lsls	r2, r2, #3
 80057d2:	4694      	mov	ip, r2
 80057d4:	4463      	add	r3, ip
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	18d3      	adds	r3, r2, r3
 80057da:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	071b      	lsls	r3, r3, #28
 80057e2:	0f1b      	lsrs	r3, r3, #28
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d914      	bls.n	8005814 <vl53l5cx_get_ranging_data+0xa0>
                    && (bh_ptr->type < (uint32_t)0xd))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	071b      	lsls	r3, r3, #28
 80057f0:	0f1b      	lsrs	r3, r3, #28
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d80d      	bhi.n	8005814 <vl53l5cx_get_ranging_data+0xa0>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	071b      	lsls	r3, r3, #28
 80057fe:	0f1b      	lsrs	r3, r3, #28
 8005800:	b2db      	uxtb	r3, r3
 8005802:	001a      	movs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	0d1b      	lsrs	r3, r3, #20
 800580c:	b29b      	uxth	r3, r3
 800580e:	4353      	muls	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	e005      	b.n	8005820 <vl53l5cx_get_ranging_data+0xac>
		}
		else
		{
			msize = bh_ptr->size;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	0d1b      	lsrs	r3, r3, #20
 800581c:	b29b      	uxth	r3, r3
 800581e:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	885b      	ldrh	r3, [r3, #2]
 8005824:	4ac9      	ldr	r2, [pc, #804]	; (8005b4c <vl53l5cx_get_ranging_data+0x3d8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d100      	bne.n	800582c <vl53l5cx_get_ranging_data+0xb8>
 800582a:	e0bf      	b.n	80059ac <vl53l5cx_get_ranging_data+0x238>
 800582c:	4ac7      	ldr	r2, [pc, #796]	; (8005b4c <vl53l5cx_get_ranging_data+0x3d8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	dd00      	ble.n	8005834 <vl53l5cx_get_ranging_data+0xc0>
 8005832:	e0db      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005834:	4ac6      	ldr	r2, [pc, #792]	; (8005b50 <vl53l5cx_get_ranging_data+0x3dc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d100      	bne.n	800583c <vl53l5cx_get_ranging_data+0xc8>
 800583a:	e0a7      	b.n	800598c <vl53l5cx_get_ranging_data+0x218>
 800583c:	4ac4      	ldr	r2, [pc, #784]	; (8005b50 <vl53l5cx_get_ranging_data+0x3dc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	dd00      	ble.n	8005844 <vl53l5cx_get_ranging_data+0xd0>
 8005842:	e0d3      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005844:	4ac3      	ldr	r2, [pc, #780]	; (8005b54 <vl53l5cx_get_ranging_data+0x3e0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d100      	bne.n	800584c <vl53l5cx_get_ranging_data+0xd8>
 800584a:	e08e      	b.n	800596a <vl53l5cx_get_ranging_data+0x1f6>
 800584c:	4ac1      	ldr	r2, [pc, #772]	; (8005b54 <vl53l5cx_get_ranging_data+0x3e0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	dd00      	ble.n	8005854 <vl53l5cx_get_ranging_data+0xe0>
 8005852:	e0cb      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005854:	4ac0      	ldr	r2, [pc, #768]	; (8005b58 <vl53l5cx_get_ranging_data+0x3e4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d100      	bne.n	800585c <vl53l5cx_get_ranging_data+0xe8>
 800585a:	e075      	b.n	8005948 <vl53l5cx_get_ranging_data+0x1d4>
 800585c:	4abe      	ldr	r2, [pc, #760]	; (8005b58 <vl53l5cx_get_ranging_data+0x3e4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	dd00      	ble.n	8005864 <vl53l5cx_get_ranging_data+0xf0>
 8005862:	e0c3      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005864:	4abd      	ldr	r2, [pc, #756]	; (8005b5c <vl53l5cx_get_ranging_data+0x3e8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d05d      	beq.n	8005926 <vl53l5cx_get_ranging_data+0x1b2>
 800586a:	4abc      	ldr	r2, [pc, #752]	; (8005b5c <vl53l5cx_get_ranging_data+0x3e8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	dd00      	ble.n	8005872 <vl53l5cx_get_ranging_data+0xfe>
 8005870:	e0bc      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005872:	4abb      	ldr	r2, [pc, #748]	; (8005b60 <vl53l5cx_get_ranging_data+0x3ec>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d046      	beq.n	8005906 <vl53l5cx_get_ranging_data+0x192>
 8005878:	4ab9      	ldr	r2, [pc, #740]	; (8005b60 <vl53l5cx_get_ranging_data+0x3ec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	dd00      	ble.n	8005880 <vl53l5cx_get_ranging_data+0x10c>
 800587e:	e0b5      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005880:	4ab8      	ldr	r2, [pc, #736]	; (8005b64 <vl53l5cx_get_ranging_data+0x3f0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d100      	bne.n	8005888 <vl53l5cx_get_ranging_data+0x114>
 8005886:	e0a1      	b.n	80059cc <vl53l5cx_get_ranging_data+0x258>
 8005888:	4ab6      	ldr	r2, [pc, #728]	; (8005b64 <vl53l5cx_get_ranging_data+0x3f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	dd00      	ble.n	8005890 <vl53l5cx_get_ranging_data+0x11c>
 800588e:	e0ad      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 8005890:	4ab5      	ldr	r2, [pc, #724]	; (8005b68 <vl53l5cx_get_ranging_data+0x3f4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d026      	beq.n	80058e4 <vl53l5cx_get_ranging_data+0x170>
 8005896:	4ab4      	ldr	r2, [pc, #720]	; (8005b68 <vl53l5cx_get_ranging_data+0x3f4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	dd00      	ble.n	800589e <vl53l5cx_get_ranging_data+0x12a>
 800589c:	e0a6      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
 800589e:	4ab3      	ldr	r2, [pc, #716]	; (8005b6c <vl53l5cx_get_ranging_data+0x3f8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <vl53l5cx_get_ranging_data+0x138>
 80058a4:	4ab2      	ldr	r2, [pc, #712]	; (8005b70 <vl53l5cx_get_ranging_data+0x3fc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00d      	beq.n	80058c6 <vl53l5cx_get_ranging_data+0x152>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80058aa:	e09f      	b.n	80059ec <vl53l5cx_get_ranging_data+0x278>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	330c      	adds	r3, #12
 80058b0:	001a      	movs	r2, r3
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	23a0      	movs	r3, #160	; 0xa0
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	188a      	adds	r2, r1, r2
 80058ba:	18d3      	adds	r3, r2, r3
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	701a      	strb	r2, [r3, #0]
				break;
 80058c4:	e093      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->ambient_per_spad,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3304      	adds	r3, #4
 80058ce:	22a0      	movs	r2, #160	; 0xa0
 80058d0:	00d2      	lsls	r2, r2, #3
 80058d2:	4694      	mov	ip, r2
 80058d4:	4463      	add	r3, ip
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->ambient_per_spad,
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	0019      	movs	r1, r3
 80058de:	f000 fcf5 	bl	80062cc <memcpy>
				break;
 80058e2:	e084      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->nb_spads_enabled,
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	3345      	adds	r3, #69	; 0x45
 80058e8:	33ff      	adds	r3, #255	; 0xff
 80058ea:	0018      	movs	r0, r3
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	3304      	adds	r3, #4
 80058f0:	22a0      	movs	r2, #160	; 0xa0
 80058f2:	00d2      	lsls	r2, r2, #3
 80058f4:	4694      	mov	ip, r2
 80058f6:	4463      	add	r3, ip
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->nb_spads_enabled,
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	0019      	movs	r1, r3
 8005900:	f000 fce4 	bl	80062cc <memcpy>
				break;
 8005904:	e073      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->nb_target_detected,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	1d58      	adds	r0, r3, #5
 800590a:	30ff      	adds	r0, #255	; 0xff
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	3304      	adds	r3, #4
 8005910:	22a0      	movs	r2, #160	; 0xa0
 8005912:	00d2      	lsls	r2, r2, #3
 8005914:	4694      	mov	ip, r2
 8005916:	4463      	add	r3, ip
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->nb_target_detected,
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	0019      	movs	r1, r3
 8005920:	f000 fcd4 	bl	80062cc <memcpy>
				break;
 8005924:	e063      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->signal_per_spad,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2291      	movs	r2, #145	; 0x91
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	3304      	adds	r3, #4
 8005932:	22a0      	movs	r2, #160	; 0xa0
 8005934:	00d2      	lsls	r2, r2, #3
 8005936:	4694      	mov	ip, r2
 8005938:	4463      	add	r3, ip
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->signal_per_spad,
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	0019      	movs	r1, r3
 8005942:	f000 fcc3 	bl	80062cc <memcpy>
				break;
 8005946:	e052      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->range_sigma_mm,
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	22d1      	movs	r2, #209	; 0xd1
 800594c:	0092      	lsls	r2, r2, #2
 800594e:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	3304      	adds	r3, #4
 8005954:	22a0      	movs	r2, #160	; 0xa0
 8005956:	00d2      	lsls	r2, r2, #3
 8005958:	4694      	mov	ip, r2
 800595a:	4463      	add	r3, ip
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->range_sigma_mm,
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0019      	movs	r1, r3
 8005964:	f000 fcb2 	bl	80062cc <memcpy>
				break;
 8005968:	e041      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->distance_mm,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	22f1      	movs	r2, #241	; 0xf1
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	3304      	adds	r3, #4
 8005976:	22a0      	movs	r2, #160	; 0xa0
 8005978:	00d2      	lsls	r2, r2, #3
 800597a:	4694      	mov	ip, r2
 800597c:	4463      	add	r3, ip
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->distance_mm,
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	0019      	movs	r1, r3
 8005986:	f000 fca1 	bl	80062cc <memcpy>
				break;
 800598a:	e030      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->reflectance,
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4a79      	ldr	r2, [pc, #484]	; (8005b74 <vl53l5cx_get_ranging_data+0x400>)
 8005990:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3304      	adds	r3, #4
 8005996:	22a0      	movs	r2, #160	; 0xa0
 8005998:	00d2      	lsls	r2, r2, #3
 800599a:	4694      	mov	ip, r2
 800599c:	4463      	add	r3, ip
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->reflectance,
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	0019      	movs	r1, r3
 80059a6:	f000 fc91 	bl	80062cc <memcpy>
				break;
 80059aa:	e020      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->target_status,
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4a72      	ldr	r2, [pc, #456]	; (8005b78 <vl53l5cx_get_ranging_data+0x404>)
 80059b0:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3304      	adds	r3, #4
 80059b6:	22a0      	movs	r2, #160	; 0xa0
 80059b8:	00d2      	lsls	r2, r2, #3
 80059ba:	4694      	mov	ip, r2
 80059bc:	4463      	add	r3, ip
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->target_status,
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	0019      	movs	r1, r3
 80059c6:	f000 fc81 	bl	80062cc <memcpy>
				break;
 80059ca:	e010      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(&p_results->motion_indicator,
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4a6b      	ldr	r2, [pc, #428]	; (8005b7c <vl53l5cx_get_ranging_data+0x408>)
 80059d0:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	3304      	adds	r3, #4
 80059d6:	22a0      	movs	r2, #160	; 0xa0
 80059d8:	00d2      	lsls	r2, r2, #3
 80059da:	4694      	mov	ip, r2
 80059dc:	4463      	add	r3, ip
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	18d3      	adds	r3, r2, r3
				(void)memcpy(&p_results->motion_indicator,
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	0019      	movs	r1, r3
 80059e6:	f000 fc71 	bl	80062cc <memcpy>
				break;
 80059ea:	e000      	b.n	80059ee <vl53l5cx_get_ranging_data+0x27a>
				break;
 80059ec:	46c0      	nop			; (mov r8, r8)
		}
		i += msize;
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	18d3      	adds	r3, r2, r3
 80059f4:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	3304      	adds	r3, #4
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d200      	bcs.n	8005a08 <vl53l5cx_get_ranging_data+0x294>
 8005a06:	e6e1      	b.n	80057cc <vl53l5cx_get_ranging_data+0x58>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e00f      	b.n	8005a2e <vl53l5cx_get_ranging_data+0x2ba>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	18d3      	adds	r3, r2, r3
 8005a16:	3304      	adds	r3, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	0ada      	lsrs	r2, r3, #11
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	18cb      	adds	r3, r1, r3
 8005a24:	3304      	adds	r3, #4
 8005a26:	601a      	str	r2, [r3, #0]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b3f      	cmp	r3, #63	; 0x3f
 8005a32:	d9ec      	bls.n	8005a0e <vl53l5cx_get_ranging_data+0x29a>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	e05e      	b.n	8005af8 <vl53l5cx_get_ranging_data+0x384>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	33e1      	adds	r3, #225	; 0xe1
 8005a40:	33ff      	adds	r3, #255	; 0xff
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	18d3      	adds	r3, r2, r3
 8005a46:	3304      	adds	r3, #4
 8005a48:	2200      	movs	r2, #0
 8005a4a:	5e9b      	ldrsh	r3, [r3, r2]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da00      	bge.n	8005a52 <vl53l5cx_get_ranging_data+0x2de>
 8005a50:	3303      	adds	r3, #3
 8005a52:	109b      	asrs	r3, r3, #2
 8005a54:	b219      	sxth	r1, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	33e1      	adds	r3, #225	; 0xe1
 8005a5c:	33ff      	adds	r3, #255	; 0xff
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	18d3      	adds	r3, r2, r3
 8005a62:	3304      	adds	r3, #4
 8005a64:	1c0a      	adds	r2, r1, #0
 8005a66:	801a      	strh	r2, [r3, #0]
		if(p_results->distance_mm[i] < 0)
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	33e1      	adds	r3, #225	; 0xe1
 8005a6e:	33ff      	adds	r3, #255	; 0xff
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	18d3      	adds	r3, r2, r3
 8005a74:	3304      	adds	r3, #4
 8005a76:	2200      	movs	r2, #0
 8005a78:	5e9b      	ldrsh	r3, [r3, r2]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da08      	bge.n	8005a90 <vl53l5cx_get_ranging_data+0x31c>
		{
			p_results->distance_mm[i] = 0;
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	33e1      	adds	r3, #225	; 0xe1
 8005a84:	33ff      	adds	r3, #255	; 0xff
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	18d3      	adds	r3, r2, r3
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	801a      	strh	r2, [r3, #0]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	4938      	ldr	r1, [pc, #224]	; (8005b74 <vl53l5cx_get_ranging_data+0x400>)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	18d3      	adds	r3, r2, r3
 8005a98:	185b      	adds	r3, r3, r1
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	b2d8      	uxtb	r0, r3
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	4934      	ldr	r1, [pc, #208]	; (8005b74 <vl53l5cx_get_ranging_data+0x400>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	18d3      	adds	r3, r2, r3
 8005aa8:	185b      	adds	r3, r3, r1
 8005aaa:	1c02      	adds	r2, r0, #0
 8005aac:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	33a1      	adds	r3, #161	; 0xa1
 8005ab4:	33ff      	adds	r3, #255	; 0xff
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	3304      	adds	r3, #4
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	b299      	uxth	r1, r3
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	33a1      	adds	r3, #161	; 0xa1
 8005ac8:	33ff      	adds	r3, #255	; 0xff
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	18d3      	adds	r3, r2, r3
 8005ace:	3304      	adds	r3, #4
 8005ad0:	1c0a      	adds	r2, r1, #0
 8005ad2:	801a      	strh	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	3390      	adds	r3, #144	; 0x90
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	3304      	adds	r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0ada      	lsrs	r2, r3, #11
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3390      	adds	r3, #144	; 0x90
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	18cb      	adds	r3, r1, r3
 8005aee:	3304      	adds	r3, #4
 8005af0:	601a      	str	r2, [r3, #0]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b3f      	cmp	r3, #63	; 0x3f
 8005afc:	d99d      	bls.n	8005a3a <vl53l5cx_get_ranging_data+0x2c6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	e01d      	b.n	8005b40 <vl53l5cx_get_ranging_data+0x3cc>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	2382      	movs	r3, #130	; 0x82
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	188a      	adds	r2, r1, r2
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d111      	bne.n	8005b3a <vl53l5cx_get_ranging_data+0x3c6>
			for(j = 0; j < (uint32_t)
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	e00b      	b.n	8005b34 <vl53l5cx_get_ranging_data+0x3c0>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4914      	ldr	r1, [pc, #80]	; (8005b78 <vl53l5cx_get_ranging_data+0x404>)
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	185b      	adds	r3, r3, r1
 8005b2a:	22ff      	movs	r2, #255	; 0xff
 8005b2c:	701a      	strb	r2, [r3, #0]
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	3301      	adds	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <vl53l5cx_get_ranging_data+0x3a8>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b3f      	cmp	r3, #63	; 0x3f
 8005b44:	d9de      	bls.n	8005b04 <vl53l5cx_get_ranging_data+0x390>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e032      	b.n	8005bb2 <vl53l5cx_get_ranging_data+0x43e>
 8005b4c:	0000e084 	.word	0x0000e084
 8005b50:	0000e044 	.word	0x0000e044
 8005b54:	0000df44 	.word	0x0000df44
 8005b58:	0000dec4 	.word	0x0000dec4
 8005b5c:	0000dbc4 	.word	0x0000dbc4
 8005b60:	0000db84 	.word	0x0000db84
 8005b64:	0000d858 	.word	0x0000d858
 8005b68:	000055d0 	.word	0x000055d0
 8005b6c:	000054b4 	.word	0x000054b4
 8005b70:	000054d0 	.word	0x000054d0
 8005b74:	00000444 	.word	0x00000444
 8005b78:	00000484 	.word	0x00000484
 8005b7c:	000004c4 	.word	0x000004c4
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	3333      	adds	r3, #51	; 0x33
 8005b86:	33ff      	adds	r3, #255	; 0xff
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	18d3      	adds	r3, r2, r3
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	492b      	ldr	r1, [pc, #172]	; (8005c40 <vl53l5cx_get_ranging_data+0x4cc>)
 8005b92:	0018      	movs	r0, r3
 8005b94:	f7fa fab6 	bl	8000104 <__udivsi3>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	3333      	adds	r3, #51	; 0x33
 8005ba2:	33ff      	adds	r3, #255	; 0xff
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	3308      	adds	r3, #8
 8005baa:	6019      	str	r1, [r3, #0]
	for(i = 0; i < (uint32_t)32; i++)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b1f      	cmp	r3, #31
 8005bb6:	d9e3      	bls.n	8005b80 <vl53l5cx_get_ranging_data+0x40c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	23a1      	movs	r3, #161	; 0xa1
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	200e      	movs	r0, #14
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	0212      	lsls	r2, r2, #8
 8005bc8:	801a      	strh	r2, [r3, #0]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <vl53l5cx_get_ranging_data+0x4d0>)
 8005bce:	5c9b      	ldrb	r3, [r3, r2]
 8005bd0:	b299      	uxth	r1, r3
 8005bd2:	183b      	adds	r3, r7, r0
 8005bd4:	183a      	adds	r2, r7, r0
 8005bd6:	8812      	ldrh	r2, [r2, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	801a      	strh	r2, [r3, #0]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8005be0:	1f1a      	subs	r2, r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	23a0      	movs	r3, #160	; 0xa0
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	188a      	adds	r2, r1, r2
 8005bea:	18d3      	adds	r3, r2, r3
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	240c      	movs	r4, #12
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	0212      	lsls	r2, r2, #8
 8005bf6:	801a      	strh	r2, [r3, #0]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 8005bfc:	1eda      	subs	r2, r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	23a0      	movs	r3, #160	; 0xa0
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	188a      	adds	r2, r1, r2
 8005c06:	18d3      	adds	r3, r2, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	193b      	adds	r3, r7, r4
 8005c0e:	193a      	adds	r2, r7, r4
 8005c10:	8812      	ldrh	r2, [r2, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	801a      	strh	r2, [r3, #0]

	if(header_id != footer_id)
 8005c16:	183a      	adds	r2, r7, r0
 8005c18:	193b      	adds	r3, r7, r4
 8005c1a:	8812      	ldrh	r2, [r2, #0]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d006      	beq.n	8005c30 <vl53l5cx_get_ranging_data+0x4bc>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8005c22:	221f      	movs	r2, #31
 8005c24:	18bb      	adds	r3, r7, r2
 8005c26:	18ba      	adds	r2, r7, r2
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8005c30:	231f      	movs	r3, #31
 8005c32:	18fb      	adds	r3, r7, r3
 8005c34:	781b      	ldrb	r3, [r3, #0]
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b008      	add	sp, #32
 8005c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	0000ffff 	.word	0x0000ffff
 8005c44:	00000509 	.word	0x00000509

08005c48 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005c52:	240f      	movs	r4, #15
 8005c54:	193b      	adds	r3, r7, r4
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	22a0      	movs	r2, #160	; 0xa0
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	1899      	adds	r1, r3, r2
 8005c62:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <vl53l5cx_get_resolution+0x58>)
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	2308      	movs	r3, #8
 8005c68:	f000 f942 	bl	8005ef0 <vl53l5cx_dci_read_data>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	0019      	movs	r1, r3
 8005c70:	0020      	movs	r0, r4
 8005c72:	183b      	adds	r3, r7, r0
 8005c74:	183a      	adds	r2, r7, r0
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	701a      	strb	r2, [r3, #0]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	23a0      	movs	r3, #160	; 0xa0
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	5cd3      	ldrb	r3, [r2, r3]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4907      	ldr	r1, [pc, #28]	; (8005ca4 <vl53l5cx_get_resolution+0x5c>)
 8005c88:	5c52      	ldrb	r2, [r2, r1]
 8005c8a:	4353      	muls	r3, r2
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	701a      	strb	r2, [r3, #0]

	return status;
 8005c92:	183b      	adds	r3, r7, r0
 8005c94:	781b      	ldrb	r3, [r3, #0]
}
 8005c96:	0018      	movs	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b005      	add	sp, #20
 8005c9c:	bd90      	pop	{r4, r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	00005450 	.word	0x00005450
 8005ca4:	00000501 	.word	0x00000501

08005ca8 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8005ca8:	b5b0      	push	{r4, r5, r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	000a      	movs	r2, r1
 8005cb2:	1cfb      	adds	r3, r7, #3
 8005cb4:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005cb6:	230f      	movs	r3, #15
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]

	switch(resolution){
 8005cbe:	1cfb      	adds	r3, r7, #3
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d002      	beq.n	8005ccc <vl53l5cx_set_resolution+0x24>
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d059      	beq.n	8005d7e <vl53l5cx_set_resolution+0xd6>
 8005cca:	e0b1      	b.n	8005e30 <vl53l5cx_set_resolution+0x188>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	25a0      	movs	r5, #160	; 0xa0
 8005cd0:	00ed      	lsls	r5, r5, #3
 8005cd2:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8005cd4:	4a6a      	ldr	r2, [pc, #424]	; (8005e80 <vl53l5cx_set_resolution+0x1d8>)
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f000 f909 	bl	8005ef0 <vl53l5cx_dci_read_data>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	240f      	movs	r4, #15
 8005ce4:	193b      	adds	r3, r7, r4
 8005ce6:	193a      	adds	r2, r7, r4
 8005ce8:	7812      	ldrb	r2, [r2, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a64      	ldr	r2, [pc, #400]	; (8005e84 <vl53l5cx_set_resolution+0x1dc>)
 8005cf2:	2140      	movs	r1, #64	; 0x40
 8005cf4:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x06] = 64;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a63      	ldr	r2, [pc, #396]	; (8005e88 <vl53l5cx_set_resolution+0x1e0>)
 8005cfa:	2140      	movs	r1, #64	; 0x40
 8005cfc:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x09] = 4;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a62      	ldr	r2, [pc, #392]	; (8005e8c <vl53l5cx_set_resolution+0x1e4>)
 8005d02:	2104      	movs	r1, #4
 8005d04:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8005d0a:	4a5d      	ldr	r2, [pc, #372]	; (8005e80 <vl53l5cx_set_resolution+0x1d8>)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	2310      	movs	r3, #16
 8005d10:	f000 f994 	bl	800603c <vl53l5cx_dci_write_data>
 8005d14:	0003      	movs	r3, r0
 8005d16:	0019      	movs	r1, r3
 8005d18:	193b      	adds	r3, r7, r4
 8005d1a:	193a      	adds	r2, r7, r4
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8005d26:	4a5a      	ldr	r2, [pc, #360]	; (8005e90 <vl53l5cx_set_resolution+0x1e8>)
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	f000 f8e0 	bl	8005ef0 <vl53l5cx_dci_read_data>
 8005d30:	0003      	movs	r3, r0
 8005d32:	0019      	movs	r1, r3
 8005d34:	193b      	adds	r3, r7, r4
 8005d36:	193a      	adds	r2, r7, r4
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	23a0      	movs	r3, #160	; 0xa0
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	2104      	movs	r1, #4
 8005d46:	54d1      	strb	r1, [r2, r3]
			p_dev->temp_buffer[0x01] = 4;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a52      	ldr	r2, [pc, #328]	; (8005e94 <vl53l5cx_set_resolution+0x1ec>)
 8005d4c:	2104      	movs	r1, #4
 8005d4e:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x04] = 8;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a4c      	ldr	r2, [pc, #304]	; (8005e84 <vl53l5cx_set_resolution+0x1dc>)
 8005d54:	2108      	movs	r1, #8
 8005d56:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x05] = 8;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a4f      	ldr	r2, [pc, #316]	; (8005e98 <vl53l5cx_set_resolution+0x1f0>)
 8005d5c:	2108      	movs	r1, #8
 8005d5e:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8005d64:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <vl53l5cx_set_resolution+0x1e8>)
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f000 f967 	bl	800603c <vl53l5cx_dci_write_data>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	0019      	movs	r1, r3
 8005d72:	193b      	adds	r3, r7, r4
 8005d74:	193a      	adds	r2, r7, r4
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8005d7c:	e05d      	b.n	8005e3a <vl53l5cx_set_resolution+0x192>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	25a0      	movs	r5, #160	; 0xa0
 8005d82:	00ed      	lsls	r5, r5, #3
 8005d84:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <vl53l5cx_set_resolution+0x1d8>)
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	f000 f8b0 	bl	8005ef0 <vl53l5cx_dci_read_data>
 8005d90:	0003      	movs	r3, r0
 8005d92:	0019      	movs	r1, r3
 8005d94:	240f      	movs	r4, #15
 8005d96:	193b      	adds	r3, r7, r4
 8005d98:	193a      	adds	r2, r7, r4
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a38      	ldr	r2, [pc, #224]	; (8005e84 <vl53l5cx_set_resolution+0x1dc>)
 8005da4:	2110      	movs	r1, #16
 8005da6:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x06] = 16;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a37      	ldr	r2, [pc, #220]	; (8005e88 <vl53l5cx_set_resolution+0x1e0>)
 8005dac:	2110      	movs	r1, #16
 8005dae:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x09] = 1;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a36      	ldr	r2, [pc, #216]	; (8005e8c <vl53l5cx_set_resolution+0x1e4>)
 8005db4:	2101      	movs	r1, #1
 8005db6:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8005dbc:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <vl53l5cx_set_resolution+0x1d8>)
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f000 f93b 	bl	800603c <vl53l5cx_dci_write_data>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	0019      	movs	r1, r3
 8005dca:	193b      	adds	r3, r7, r4
 8005dcc:	193a      	adds	r2, r7, r4
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_read_data(p_dev,
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	; (8005e90 <vl53l5cx_set_resolution+0x1e8>)
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f000 f887 	bl	8005ef0 <vl53l5cx_dci_read_data>
 8005de2:	0003      	movs	r3, r0
 8005de4:	0019      	movs	r1, r3
 8005de6:	193b      	adds	r3, r7, r4
 8005de8:	193a      	adds	r2, r7, r4
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	23a0      	movs	r3, #160	; 0xa0
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	2108      	movs	r1, #8
 8005df8:	54d1      	strb	r1, [r2, r3]
			p_dev->temp_buffer[0x01] = 8;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <vl53l5cx_set_resolution+0x1ec>)
 8005dfe:	2108      	movs	r1, #8
 8005e00:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x04] = 4;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <vl53l5cx_set_resolution+0x1dc>)
 8005e06:	2104      	movs	r1, #4
 8005e08:	5499      	strb	r1, [r3, r2]
			p_dev->temp_buffer[0x05] = 4;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <vl53l5cx_set_resolution+0x1f0>)
 8005e0e:	2104      	movs	r1, #4
 8005e10:	5499      	strb	r1, [r3, r2]
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	1959      	adds	r1, r3, r5
			status |= vl53l5cx_dci_write_data(p_dev,
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <vl53l5cx_set_resolution+0x1e8>)
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	f000 f90e 	bl	800603c <vl53l5cx_dci_write_data>
 8005e20:	0003      	movs	r3, r0
 8005e22:	0019      	movs	r1, r3
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	193a      	adds	r2, r7, r4
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8005e2e:	e004      	b.n	8005e3a <vl53l5cx_set_resolution+0x192>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8005e30:	230f      	movs	r3, #15
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	227f      	movs	r2, #127	; 0x7f
 8005e36:	701a      	strb	r2, [r3, #0]
			break;
 8005e38:	46c0      	nop			; (mov r8, r8)
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8005e3a:	1cfb      	adds	r3, r7, #3
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0011      	movs	r1, r2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7fe f938 	bl	80040b8 <_vl53l5cx_send_offset_data>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	0019      	movs	r1, r3
 8005e4c:	240f      	movs	r4, #15
 8005e4e:	193b      	adds	r3, r7, r4
 8005e50:	193a      	adds	r2, r7, r4
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8005e58:	1cfb      	adds	r3, r7, #3
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	0011      	movs	r1, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fe fb01 	bl	8004468 <_vl53l5cx_send_xtalk_data>
 8005e66:	0003      	movs	r3, r0
 8005e68:	0019      	movs	r1, r3
 8005e6a:	193b      	adds	r3, r7, r4
 8005e6c:	193a      	adds	r2, r7, r4
 8005e6e:	7812      	ldrb	r2, [r2, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	701a      	strb	r2, [r3, #0]

	return status;
 8005e74:	193b      	adds	r3, r7, r4
 8005e76:	781b      	ldrb	r3, [r3, #0]
}
 8005e78:	0018      	movs	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b004      	add	sp, #16
 8005e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e80:	0000ad38 	.word	0x0000ad38
 8005e84:	00000504 	.word	0x00000504
 8005e88:	00000506 	.word	0x00000506
 8005e8c:	00000509 	.word	0x00000509
 8005e90:	00005450 	.word	0x00005450
 8005e94:	00000501 	.word	0x00000501
 8005e98:	00000505 	.word	0x00000505

08005e9c <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b089      	sub	sp, #36	; 0x24
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	000a      	movs	r2, r1
 8005ea6:	1cfb      	adds	r3, r7, #3
 8005ea8:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005eaa:	240f      	movs	r4, #15
 8005eac:	193b      	adds	r3, r7, r4
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	22a0      	movs	r2, #160	; 0xa0
 8005eb6:	00d2      	lsls	r2, r2, #3
 8005eb8:	1899      	adds	r1, r3, r2
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <vl53l5cx_set_ranging_frequency_hz+0x50>)
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	1cfb      	adds	r3, r7, #3
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2304      	movs	r3, #4
 8005ecc:	f000 f994 	bl	80061f8 <vl53l5cx_dci_replace_data>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	193b      	adds	r3, r7, r4
 8005ed6:	193a      	adds	r2, r7, r4
 8005ed8:	7812      	ldrb	r2, [r2, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8005ede:	193b      	adds	r3, r7, r4
 8005ee0:	781b      	ldrb	r3, [r3, #0]
}
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b005      	add	sp, #20
 8005ee8:	bd90      	pop	{r4, r7, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	00005458 	.word	0x00005458

08005ef0 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	b08c      	sub	sp, #48	; 0x30
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	001a      	movs	r2, r3
 8005efe:	1cbb      	adds	r3, r7, #2
 8005f00:	801a      	strh	r2, [r3, #0]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8005f02:	2525      	movs	r5, #37	; 0x25
 8005f04:	197b      	adds	r3, r7, r5
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8005f0a:	1cbb      	adds	r3, r7, #2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8005f12:	2314      	movs	r3, #20
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	4a46      	ldr	r2, [pc, #280]	; (8006030 <vl53l5cx_dci_read_data+0x140>)
 8005f18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005f1a:	c313      	stmia	r3!, {r0, r1, r4}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8005f1c:	1cbb      	adds	r3, r7, #2
 8005f1e:	881a      	ldrh	r2, [r3, #0]
 8005f20:	23b4      	movs	r3, #180	; 0xb4
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d903      	bls.n	8005f30 <vl53l5cx_dci_read_data+0x40>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8005f28:	197b      	adds	r3, r7, r5
 8005f2a:	22ff      	movs	r2, #255	; 0xff
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e077      	b.n	8006020 <vl53l5cx_dci_read_data+0x130>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	2114      	movs	r1, #20
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	701a      	strb	r2, [r3, #0]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	705a      	strb	r2, [r3, #1]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8005f44:	1cbb      	adds	r3, r7, #2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	111b      	asrs	r3, r3, #4
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	709a      	strb	r2, [r3, #2]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005f50:	1cbb      	adds	r3, r7, #2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	187b      	adds	r3, r7, r1
 8005f5c:	70da      	strb	r2, [r3, #3]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	187a      	adds	r2, r7, r1
 8005f62:	4934      	ldr	r1, [pc, #208]	; (8006034 <vl53l5cx_dci_read_data+0x144>)
 8005f64:	230c      	movs	r3, #12
 8005f66:	f7fd ff27 	bl	8003db8 <WrMulti>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	2425      	movs	r4, #37	; 0x25
 8005f70:	193b      	adds	r3, r7, r4
 8005f72:	193a      	adds	r2, r7, r4
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	701a      	strb	r2, [r3, #0]
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005f7a:	23b0      	movs	r3, #176	; 0xb0
 8005f7c:	019b      	lsls	r3, r3, #6
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	2203      	movs	r2, #3
 8005f82:	9201      	str	r2, [sp, #4]
 8005f84:	22ff      	movs	r2, #255	; 0xff
 8005f86:	9200      	str	r2, [sp, #0]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	f7fd ffc4 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 8005f90:	0003      	movs	r3, r0
 8005f92:	0019      	movs	r1, r3
 8005f94:	193b      	adds	r3, r7, r4
 8005f96:	193a      	adds	r2, r7, r4
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005f9e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	25a0      	movs	r5, #160	; 0xa0
 8005fa4:	00ed      	lsls	r5, r5, #3
 8005fa6:	195a      	adds	r2, r3, r5
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4923      	ldr	r1, [pc, #140]	; (8006038 <vl53l5cx_dci_read_data+0x148>)
 8005fac:	f7fd ff2c 	bl	8003e08 <RdMulti>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	0019      	movs	r1, r3
 8005fb4:	193b      	adds	r3, r7, r4
 8005fb6:	193a      	adds	r2, r7, r4
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	701a      	strb	r2, [r3, #0]
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	195a      	adds	r2, r3, r5
 8005fc2:	1cbb      	adds	r3, r7, #2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	0019      	movs	r1, r3
 8005fcc:	0010      	movs	r0, r2
 8005fce:	f7fd ff5b 	bl	8003e88 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8005fd2:	2326      	movs	r3, #38	; 0x26
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e018      	b.n	800600e <vl53l5cx_dci_read_data+0x11e>
			data[i] = p_dev->temp_buffer[i + 4];
 8005fdc:	2426      	movs	r4, #38	; 0x26
 8005fde:	193b      	adds	r3, r7, r4
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8005fe4:	1d19      	adds	r1, r3, #4
 8005fe6:	193b      	adds	r3, r7, r4
 8005fe8:	2200      	movs	r2, #0
 8005fea:	5e9b      	ldrsh	r3, [r3, r2]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	18d3      	adds	r3, r2, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	22a0      	movs	r2, #160	; 0xa0
 8005ff4:	00d2      	lsls	r2, r2, #3
 8005ff6:	1841      	adds	r1, r0, r1
 8005ff8:	188a      	adds	r2, r1, r2
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8005ffe:	193b      	adds	r3, r7, r4
 8006000:	2200      	movs	r2, #0
 8006002:	5e9b      	ldrsh	r3, [r3, r2]
 8006004:	b29b      	uxth	r3, r3
 8006006:	3301      	adds	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	193b      	adds	r3, r7, r4
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	1cbb      	adds	r3, r7, #2
 8006010:	2200      	movs	r2, #0
 8006012:	5e9b      	ldrsh	r3, [r3, r2]
 8006014:	2226      	movs	r2, #38	; 0x26
 8006016:	18ba      	adds	r2, r7, r2
 8006018:	2100      	movs	r1, #0
 800601a:	5e52      	ldrsh	r2, [r2, r1]
 800601c:	429a      	cmp	r2, r3
 800601e:	dbdd      	blt.n	8005fdc <vl53l5cx_dci_read_data+0xec>
		}
	}

	return status;
 8006020:	2325      	movs	r3, #37	; 0x25
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	781b      	ldrb	r3, [r3, #0]
}
 8006026:	0018      	movs	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	b00a      	add	sp, #40	; 0x28
 800602c:	bdb0      	pop	{r4, r5, r7, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	08006358 	.word	0x08006358
 8006034:	00002ff4 	.word	0x00002ff4
 8006038:	00002c04 	.word	0x00002c04

0800603c <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b08d      	sub	sp, #52	; 0x34
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	001a      	movs	r2, r3
 800604a:	1cbb      	adds	r3, r7, #2
 800604c:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800604e:	2027      	movs	r0, #39	; 0x27
 8006050:	183b      	adds	r3, r7, r0
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8006056:	231c      	movs	r3, #28
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800605e:	2114      	movs	r1, #20
 8006060:	187b      	adds	r3, r7, r1
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	187b      	adds	r3, r7, r1
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
 800606c:	187b      	adds	r3, r7, r1
 800606e:	2200      	movs	r2, #0
 8006070:	709a      	strb	r2, [r3, #2]
 8006072:	187b      	adds	r3, r7, r1
 8006074:	220f      	movs	r2, #15
 8006076:	70da      	strb	r2, [r3, #3]
 8006078:	187b      	adds	r3, r7, r1
 800607a:	2205      	movs	r2, #5
 800607c:	711a      	strb	r2, [r3, #4]
 800607e:	187b      	adds	r3, r7, r1
 8006080:	2201      	movs	r2, #1
 8006082:	715a      	strb	r2, [r3, #5]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8006084:	1cbb      	adds	r3, r7, #2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	121b      	asrs	r3, r3, #8
 800608c:	b2da      	uxtb	r2, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800608e:	187b      	adds	r3, r7, r1
 8006090:	719a      	strb	r2, [r3, #6]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8006092:	1cbb      	adds	r3, r7, #2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	3308      	adds	r3, #8
 800609a:	b2da      	uxtb	r2, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800609c:	187b      	adds	r3, r7, r1
 800609e:	71da      	strb	r2, [r3, #7]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 80060a0:	2322      	movs	r3, #34	; 0x22
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	1cba      	adds	r2, r7, #2
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	4952      	ldr	r1, [pc, #328]	; (80061f4 <vl53l5cx_dci_write_data+0x1b8>)
 80060aa:	1a8a      	subs	r2, r1, r2
 80060ac:	801a      	strh	r2, [r3, #0]
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80060ae:	1cbb      	adds	r3, r7, #2
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	23b4      	movs	r3, #180	; 0xb4
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d903      	bls.n	80060c2 <vl53l5cx_dci_write_data+0x86>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 80060ba:	183b      	adds	r3, r7, r0
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e090      	b.n	80061e4 <vl53l5cx_dci_write_data+0x1a8>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	211c      	movs	r1, #28
 80060ca:	187b      	adds	r3, r7, r1
 80060cc:	701a      	strb	r2, [r3, #0]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	705a      	strb	r2, [r3, #1]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 80060d6:	1cbb      	adds	r3, r7, #2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	111b      	asrs	r3, r3, #4
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	187b      	adds	r3, r7, r1
 80060e0:	709a      	strb	r2, [r3, #2]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80060e2:	1cbb      	adds	r3, r7, #2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	70da      	strb	r2, [r3, #3]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 80060f0:	1cbb      	adds	r3, r7, #2
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7fd fec5 	bl	8003e88 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80060fe:	1cbb      	adds	r3, r7, #2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	2324      	movs	r3, #36	; 0x24
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e019      	b.n	8006142 <vl53l5cx_dci_write_data+0x106>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800610e:	2424      	movs	r4, #36	; 0x24
 8006110:	193b      	adds	r3, r7, r4
 8006112:	2200      	movs	r2, #0
 8006114:	5e9b      	ldrsh	r3, [r3, r2]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	18d3      	adds	r3, r2, r3
 800611a:	193a      	adds	r2, r7, r4
 800611c:	2100      	movs	r1, #0
 800611e:	5e52      	ldrsh	r2, [r2, r1]
 8006120:	3204      	adds	r2, #4
 8006122:	7818      	ldrb	r0, [r3, #0]
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	23a0      	movs	r3, #160	; 0xa0
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	188a      	adds	r2, r1, r2
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	1c02      	adds	r2, r0, #0
 8006130:	701a      	strb	r2, [r3, #0]
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006132:	193b      	adds	r3, r7, r4
 8006134:	2200      	movs	r2, #0
 8006136:	5e9b      	ldrsh	r3, [r3, r2]
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	193b      	adds	r3, r7, r4
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	2324      	movs	r3, #36	; 0x24
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	2200      	movs	r2, #0
 8006148:	5e9b      	ldrsh	r3, [r3, r2]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dadf      	bge.n	800610e <vl53l5cx_dci_write_data+0xd2>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	24a0      	movs	r4, #160	; 0xa0
 8006152:	00e4      	lsls	r4, r4, #3
 8006154:	191a      	adds	r2, r3, r4
 8006156:	231c      	movs	r3, #28
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	0010      	movs	r0, r2
 800615c:	0019      	movs	r1, r3
 800615e:	2304      	movs	r3, #4
 8006160:	001a      	movs	r2, r3
 8006162:	f000 f8b3 	bl	80062cc <memcpy>
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8006166:	1cbb      	adds	r3, r7, #2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	3304      	adds	r3, #4
 800616c:	22a0      	movs	r2, #160	; 0xa0
 800616e:	00d2      	lsls	r2, r2, #3
 8006170:	4694      	mov	ip, r2
 8006172:	4463      	add	r3, ip
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	18d2      	adds	r2, r2, r3
 8006178:	2314      	movs	r3, #20
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	0010      	movs	r0, r2
 800617e:	0019      	movs	r1, r3
 8006180:	2308      	movs	r3, #8
 8006182:	001a      	movs	r2, r3
 8006184:	f000 f8a2 	bl	80062cc <memcpy>
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8006188:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	191a      	adds	r2, r3, r4
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800618e:	1cbb      	adds	r3, r7, #2
 8006190:	881b      	ldrh	r3, [r3, #0]
		status |= WrMulti(&(p_dev->platform),address,
 8006192:	330c      	adds	r3, #12
 8006194:	001c      	movs	r4, r3
 8006196:	2322      	movs	r3, #34	; 0x22
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	8819      	ldrh	r1, [r3, #0]
 800619c:	0023      	movs	r3, r4
 800619e:	f7fd fe0b 	bl	8003db8 <WrMulti>
 80061a2:	0003      	movs	r3, r0
 80061a4:	0019      	movs	r1, r3
 80061a6:	2427      	movs	r4, #39	; 0x27
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	193a      	adds	r2, r7, r4
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	701a      	strb	r2, [r3, #0]
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80061b2:	23b0      	movs	r3, #176	; 0xb0
 80061b4:	019b      	lsls	r3, r3, #6
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	2203      	movs	r2, #3
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	22ff      	movs	r2, #255	; 0xff
 80061be:	9200      	str	r2, [sp, #0]
 80061c0:	2201      	movs	r2, #1
 80061c2:	2104      	movs	r1, #4
 80061c4:	f7fd fea8 	bl	8003f18 <_vl53l5cx_poll_for_answer>
 80061c8:	0003      	movs	r3, r0
 80061ca:	0019      	movs	r1, r3
 80061cc:	193b      	adds	r3, r7, r4
 80061ce:	193a      	adds	r2, r7, r4
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80061d6:	1cbb      	adds	r3, r7, #2
 80061d8:	881a      	ldrh	r2, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	0011      	movs	r1, r2
 80061de:	0018      	movs	r0, r3
 80061e0:	f7fd fe52 	bl	8003e88 <SwapBuffer>
	}

	return status;
 80061e4:	2327      	movs	r3, #39	; 0x27
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b00b      	add	sp, #44	; 0x2c
 80061f0:	bd90      	pop	{r4, r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	00002ff4 	.word	0x00002ff4

080061f8 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	001a      	movs	r2, r3
 8006206:	1cbb      	adds	r3, r7, #2
 8006208:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800620a:	2417      	movs	r4, #23
 800620c:	193b      	adds	r3, r7, r4
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8006212:	1cbb      	adds	r3, r7, #2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff fe68 	bl	8005ef0 <vl53l5cx_dci_read_data>
 8006220:	0003      	movs	r3, r0
 8006222:	0019      	movs	r1, r3
 8006224:	193b      	adds	r3, r7, r4
 8006226:	193a      	adds	r2, r7, r4
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	701a      	strb	r2, [r3, #0]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 800622e:	2328      	movs	r3, #40	; 0x28
 8006230:	2108      	movs	r1, #8
 8006232:	185b      	adds	r3, r3, r1
 8006234:	19db      	adds	r3, r3, r7
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	18d0      	adds	r0, r2, r3
 800623c:	2324      	movs	r3, #36	; 0x24
 800623e:	185b      	adds	r3, r3, r1
 8006240:	19db      	adds	r3, r3, r7
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	0019      	movs	r1, r3
 8006248:	f000 f840 	bl	80062cc <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 800624c:	1cbb      	adds	r3, r7, #2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fef1 	bl	800603c <vl53l5cx_dci_write_data>
 800625a:	0003      	movs	r3, r0
 800625c:	0019      	movs	r1, r3
 800625e:	193b      	adds	r3, r7, r4
 8006260:	193a      	adds	r2, r7, r4
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	701a      	strb	r2, [r3, #0]

	return status;
 8006268:	193b      	adds	r3, r7, r4
 800626a:	781b      	ldrb	r3, [r3, #0]
}
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b007      	add	sp, #28
 8006272:	bd90      	pop	{r4, r7, pc}

08006274 <memset>:
 8006274:	0003      	movs	r3, r0
 8006276:	1882      	adds	r2, r0, r2
 8006278:	4293      	cmp	r3, r2
 800627a:	d100      	bne.n	800627e <memset+0xa>
 800627c:	4770      	bx	lr
 800627e:	7019      	strb	r1, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	e7f9      	b.n	8006278 <memset+0x4>

08006284 <__libc_init_array>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	2600      	movs	r6, #0
 8006288:	4c0c      	ldr	r4, [pc, #48]	; (80062bc <__libc_init_array+0x38>)
 800628a:	4d0d      	ldr	r5, [pc, #52]	; (80062c0 <__libc_init_array+0x3c>)
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	42a6      	cmp	r6, r4
 8006292:	d109      	bne.n	80062a8 <__libc_init_array+0x24>
 8006294:	2600      	movs	r6, #0
 8006296:	f000 f823 	bl	80062e0 <_init>
 800629a:	4c0a      	ldr	r4, [pc, #40]	; (80062c4 <__libc_init_array+0x40>)
 800629c:	4d0a      	ldr	r5, [pc, #40]	; (80062c8 <__libc_init_array+0x44>)
 800629e:	1b64      	subs	r4, r4, r5
 80062a0:	10a4      	asrs	r4, r4, #2
 80062a2:	42a6      	cmp	r6, r4
 80062a4:	d105      	bne.n	80062b2 <__libc_init_array+0x2e>
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	00b3      	lsls	r3, r6, #2
 80062aa:	58eb      	ldr	r3, [r5, r3]
 80062ac:	4798      	blx	r3
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7ee      	b.n	8006290 <__libc_init_array+0xc>
 80062b2:	00b3      	lsls	r3, r6, #2
 80062b4:	58eb      	ldr	r3, [r5, r3]
 80062b6:	4798      	blx	r3
 80062b8:	3601      	adds	r6, #1
 80062ba:	e7f2      	b.n	80062a2 <__libc_init_array+0x1e>
 80062bc:	0801baf0 	.word	0x0801baf0
 80062c0:	0801baf0 	.word	0x0801baf0
 80062c4:	0801baf4 	.word	0x0801baf4
 80062c8:	0801baf0 	.word	0x0801baf0

080062cc <memcpy>:
 80062cc:	2300      	movs	r3, #0
 80062ce:	b510      	push	{r4, lr}
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d100      	bne.n	80062d6 <memcpy+0xa>
 80062d4:	bd10      	pop	{r4, pc}
 80062d6:	5ccc      	ldrb	r4, [r1, r3]
 80062d8:	54c4      	strb	r4, [r0, r3]
 80062da:	3301      	adds	r3, #1
 80062dc:	e7f8      	b.n	80062d0 <memcpy+0x4>
	...

080062e0 <_init>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

080062ec <_fini>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr
