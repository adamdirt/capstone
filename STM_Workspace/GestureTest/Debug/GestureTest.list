
GestureTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006030  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000157f0  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8dc  0801b8dc  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8dc  0801b8dc  0002b8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8e4  0801b8e4  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8e4  0801b8e4  0002b8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8e8  0801b8e8  0002b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801b8ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  2000000c  0801b8f8  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  0801b8f8  00031118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010245  00000000  00000000  00030077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b4  00000000  00000000  000402bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00042870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00043520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019635  00000000  00000000  00043f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011583  00000000  00000000  0005d53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb46  00000000  00000000  0006eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d6c  00000000  00000000  0010a608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0010d374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060d4 	.word	0x080060d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080060d4 	.word	0x080060d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8d8 	bl	8000604 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8d3 	bl	8000604 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzsi2>:
 80005c8:	211c      	movs	r1, #28
 80005ca:	2301      	movs	r3, #1
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	4298      	cmp	r0, r3
 80005d0:	d301      	bcc.n	80005d6 <__clzsi2+0xe>
 80005d2:	0c00      	lsrs	r0, r0, #16
 80005d4:	3910      	subs	r1, #16
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	4298      	cmp	r0, r3
 80005da:	d301      	bcc.n	80005e0 <__clzsi2+0x18>
 80005dc:	0a00      	lsrs	r0, r0, #8
 80005de:	3908      	subs	r1, #8
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0x22>
 80005e6:	0900      	lsrs	r0, r0, #4
 80005e8:	3904      	subs	r1, #4
 80005ea:	a202      	add	r2, pc, #8	; (adr r2, 80005f4 <__clzsi2+0x2c>)
 80005ec:	5c10      	ldrb	r0, [r2, r0]
 80005ee:	1840      	adds	r0, r0, r1
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	02020304 	.word	0x02020304
 80005f8:	01010101 	.word	0x01010101
	...

08000604 <__clzdi2>:
 8000604:	b510      	push	{r4, lr}
 8000606:	2900      	cmp	r1, #0
 8000608:	d103      	bne.n	8000612 <__clzdi2+0xe>
 800060a:	f7ff ffdd 	bl	80005c8 <__clzsi2>
 800060e:	3020      	adds	r0, #32
 8000610:	e002      	b.n	8000618 <__clzdi2+0x14>
 8000612:	0008      	movs	r0, r1
 8000614:	f7ff ffd8 	bl	80005c8 <__clzsi2>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	is_alive = 0;
 8000622:	4b48      	ldr	r3, [pc, #288]	; (8000744 <main+0x128>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	is_ready = 0;
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <main+0x12c>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	Sensor1Cfg.platform.address = 0x52;
 800062e:	4b47      	ldr	r3, [pc, #284]	; (800074c <main+0x130>)
 8000630:	2252      	movs	r2, #82	; 0x52
 8000632:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fc22 	bl	8000e7c <HAL_Init>

  /* USER CODE BEGIN Init */
//  HAL_GPIO_WritePin(AVDD_GPIO_Port, AVDD_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(IOVDD_GPIO_Port, IOVDD_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LPn_GPIO_Port, LPn_Pin, GPIO_PIN_SET);
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2201      	movs	r2, #1
 800063e:	2102      	movs	r1, #2
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fedd 	bl	8001400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C_RST_GPIO_Port, I2C_RST_Pin, GPIO_PIN_RESET);
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	2101      	movs	r1, #1
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fed6 	bl	8001400 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f87e 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f952 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f902 	bl	8000864 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000660:	f000 f8c0 	bl	80007e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t init_status = init_tof(&Sensor1Cfg);
 8000664:	1dfc      	adds	r4, r7, #7
 8000666:	4b39      	ldr	r3, [pc, #228]	; (800074c <main+0x130>)
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fb7f 	bl	8000d6c <init_tof>
 800066e:	0003      	movs	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t samples = 0;
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  init_status |= vl53l5cx_start_ranging(&Sensor1Cfg);
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <main+0x130>)
 800067a:	0018      	movs	r0, r3
 800067c:	f004 fd50 	bl	8005120 <vl53l5cx_start_ranging>
 8000680:	0003      	movs	r3, r0
 8000682:	0019      	movs	r1, r3
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	1dfa      	adds	r2, r7, #7
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	430a      	orrs	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
	  }

#endif

#ifdef DO_DISTANCE_TEST
	  samples++;
 800068e:	1dbb      	adds	r3, r7, #6
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	3201      	adds	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]

	  init_status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <main+0x134>)
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <main+0x130>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fb93 	bl	8000dca <sample_once>
 80006a4:	0003      	movs	r3, r0
 80006a6:	0019      	movs	r1, r3
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	1dfa      	adds	r2, r7, #7
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
	  uint8_t i;
	  uint16_t lowest = 0xFFFFU;
 80006b2:	1cbb      	adds	r3, r7, #2
 80006b4:	2201      	movs	r2, #1
 80006b6:	4252      	negs	r2, r2
 80006b8:	801a      	strh	r2, [r3, #0]
	  for (i = 0; i < 16; i++){
 80006ba:	1d7b      	adds	r3, r7, #5
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e01a      	b.n	80006f8 <main+0xdc>
		  uint16_t cur_read = Sensor1Results.distance_mm[i];
 80006c2:	1d7b      	adds	r3, r7, #5
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4a22      	ldr	r2, [pc, #136]	; (8000750 <main+0x134>)
 80006c8:	33e1      	adds	r3, #225	; 0xe1
 80006ca:	33ff      	adds	r3, #255	; 0xff
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	18d3      	adds	r3, r2, r3
 80006d0:	3304      	adds	r3, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	5e9a      	ldrsh	r2, [r3, r2]
 80006d6:	003b      	movs	r3, r7
 80006d8:	801a      	strh	r2, [r3, #0]
		  if (cur_read < lowest){
 80006da:	003a      	movs	r2, r7
 80006dc:	1cbb      	adds	r3, r7, #2
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d203      	bcs.n	80006ee <main+0xd2>
			  lowest = cur_read;
 80006e6:	1cbb      	adds	r3, r7, #2
 80006e8:	003a      	movs	r2, r7
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	801a      	strh	r2, [r3, #0]
	  for (i = 0; i < 16; i++){
 80006ee:	1d7b      	adds	r3, r7, #5
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	1d7b      	adds	r3, r7, #5
 80006f4:	3201      	adds	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	1d7b      	adds	r3, r7, #5
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d9e0      	bls.n	80006c2 <main+0xa6>
		  }
	  }

	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2120      	movs	r1, #32
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fe97 	bl	800143a <HAL_GPIO_TogglePin>
	  HAL_Delay(lowest);
 800070c:	1cbb      	adds	r3, r7, #2
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fc39 	bl	8000f88 <HAL_Delay>

	  if (samples >= 100){
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b63      	cmp	r3, #99	; 0x63
 800071c:	d9b7      	bls.n	800068e <main+0x72>
	  		  init_status |= vl53l5cx_stop_ranging(&Sensor1Cfg);
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <main+0x130>)
 8000720:	0018      	movs	r0, r3
 8000722:	f004 feaf 	bl	8005484 <vl53l5cx_stop_ranging>
 8000726:	0003      	movs	r3, r0
 8000728:	0019      	movs	r1, r3
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	1dfa      	adds	r2, r7, #7
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	430a      	orrs	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
	  		  while (1){
	  			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2201      	movs	r2, #1
 800073a:	2120      	movs	r1, #32
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fe5f 	bl	8001400 <HAL_GPIO_WritePin>
 8000742:	e7f7      	b.n	8000734 <main+0x118>
 8000744:	20001110 	.word	0x20001110
 8000748:	20001111 	.word	0x20001111
 800074c:	20000110 	.word	0x20000110
 8000750:	20000bc0 	.word	0x20000bc0

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b093      	sub	sp, #76	; 0x4c
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	2410      	movs	r4, #16
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	2338      	movs	r3, #56	; 0x38
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f005 fc7f 	bl	8006068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076a:	003b      	movs	r3, r7
 800076c:	0018      	movs	r0, r3
 800076e:	2310      	movs	r3, #16
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f005 fc78 	bl	8006068 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fdd7 	bl	8002330 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2240      	movs	r2, #64	; 0x40
 800079a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fe0f 	bl	80023c8 <HAL_RCC_OscConfig>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007ae:	f000 f9d5 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	003b      	movs	r3, r7
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	003b      	movs	r3, r7
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 f914 	bl	80029fc <HAL_RCC_ClockConfig>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007d8:	f000 f9c0 	bl	8000b5c <Error_Handler>
  }
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b013      	add	sp, #76	; 0x4c
 80007e2:	bd90      	pop	{r4, r7, pc}

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C1_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C1_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2C1_Init+0x74>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fe25 	bl	8001470 <HAL_I2C_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 f997 	bl	8000b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_I2C1_Init+0x74>)
 8000830:	2100      	movs	r1, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fce4 	bl	8002200 <HAL_I2CEx_ConfigAnalogFilter>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 f98e 	bl	8000b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MX_I2C1_Init+0x74>)
 8000842:	2100      	movs	r1, #0
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fd27 	bl	8002298 <HAL_I2CEx_ConfigDigitalFilter>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f985 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000028 	.word	0x20000028
 800085c:	40005400 	.word	0x40005400
 8000860:	0010061a 	.word	0x0010061a

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_USART2_UART_Init+0x98>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 fc06 	bl	80030c0 <HAL_UART_Init>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f950 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f003 f915 	bl	8003af0 <HAL_UARTEx_SetTxFifoThreshold>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 f947 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f003 f94c 	bl	8003b70 <HAL_UARTEx_SetRxFifoThreshold>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f93e 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f003 f8ca 	bl	8003a7c <HAL_UARTEx_DisableFifoMode>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f936 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	2000007c 	.word	0x2000007c
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	2414      	movs	r4, #20
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f005 fba9 	bl	8006068 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b89      	ldr	r3, [pc, #548]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b88      	ldr	r3, [pc, #544]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800091c:	2104      	movs	r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b86      	ldr	r3, [pc, #536]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2204      	movs	r2, #4
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092e:	4b83      	ldr	r3, [pc, #524]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b82      	ldr	r3, [pc, #520]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000934:	2120      	movs	r1, #32
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b80      	ldr	r3, [pc, #512]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2220      	movs	r2, #32
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b7d      	ldr	r3, [pc, #500]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b7c      	ldr	r3, [pc, #496]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b7a      	ldr	r3, [pc, #488]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b77      	ldr	r3, [pc, #476]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000964:	2102      	movs	r1, #2
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b74      	ldr	r3, [pc, #464]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2202      	movs	r2, #2
 8000970:	4013      	ands	r3, r2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b71      	ldr	r3, [pc, #452]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b70      	ldr	r3, [pc, #448]	; (8000b3c <MX_GPIO_Init+0x23c>)
 800097c:	2108      	movs	r1, #8
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b6e      	ldr	r3, [pc, #440]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2208      	movs	r2, #8
 8000988:	4013      	ands	r3, r2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LPn1_Pin|LPn2_Pin|LPn3_Pin|LPn4_Pin, GPIO_PIN_RESET);
 800098e:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <MX_GPIO_Init+0x240>)
 8000990:	2200      	movs	r2, #0
 8000992:	210f      	movs	r1, #15
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fd33 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_RST_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2200      	movs	r2, #0
 80009a0:	2121      	movs	r1, #33	; 0x21
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fd2c 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LPn_Pin|PWR_EN_Pin, GPIO_PIN_SET);
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2201      	movs	r2, #1
 80009ae:	2142      	movs	r1, #66	; 0x42
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fd25 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	4a62      	ldr	r2, [pc, #392]	; (8000b44 <MX_GPIO_Init+0x244>)
 80009ba:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2203      	movs	r2, #3
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	4a5d      	ldr	r2, [pc, #372]	; (8000b40 <MX_GPIO_Init+0x240>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f000 fbb2 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2206      	movs	r2, #6
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2203      	movs	r2, #3
 80009de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	4a57      	ldr	r2, [pc, #348]	; (8000b48 <MX_GPIO_Init+0x248>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f000 fba3 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn3_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn3_Pin|LPn4_Pin;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	220f      	movs	r2, #15
 80009f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2201      	movs	r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <MX_GPIO_Init+0x240>)
 8000a0e:	0019      	movs	r1, r3
 8000a10:	0010      	movs	r0, r2
 8000a12:	f000 fb91 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_Pin */
  GPIO_InitStruct.Pin = I2C_RST_Pin;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2201      	movs	r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2202      	movs	r2, #2
 8000a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_RST_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	193a      	adds	r2, r7, r4
 8000a30:	23a0      	movs	r3, #160	; 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fb7e 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = LPn_Pin|PWR_EN_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2242      	movs	r2, #66	; 0x42
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb6b 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	4a39      	ldr	r2, [pc, #228]	; (8000b4c <MX_GPIO_Init+0x24c>)
 8000a66:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	193a      	adds	r2, r7, r4
 8000a76:	23a0      	movs	r3, #160	; 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fb5b 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2220      	movs	r2, #32
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	193a      	adds	r2, r7, r4
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fb48 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <MX_GPIO_Init+0x250>)
 8000aac:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <MX_GPIO_Init+0x254>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f000 fb39 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0152      	lsls	r2, r2, #5
 8000ace:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2288      	movs	r2, #136	; 0x88
 8000ad4:	0352      	lsls	r2, r2, #13
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000ade:	000c      	movs	r4, r1
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_GPIO_Init+0x254>)
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	f000 fb26 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 8000aec:	0021      	movs	r1, r4
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	22dc      	movs	r2, #220	; 0xdc
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	000c      	movs	r4, r1
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2203      	movs	r2, #3
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f000 fb14 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_INT1_Pin PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = ToF_INT1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	220f      	movs	r2, #15
 8000b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2288      	movs	r2, #136	; 0x88
 8000b1c:	0352      	lsls	r2, r2, #13
 8000b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fb03 	bl	8001138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b00b      	add	sp, #44	; 0x2c
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	50000800 	.word	0x50000800
 8000b44:	00001ff0 	.word	0x00001ff0
 8000b48:	50001400 	.word	0x50001400
 8000b4c:	00009f90 	.word	0x00009f90
 8000b50:	0000ecff 	.word	0x0000ecff
 8000b54:	50000400 	.word	0x50000400
 8000b58:	50000c00 	.word	0x50000c00

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0549      	lsls	r1, r1, #21
 8000b90:	430a      	orrs	r2, r1
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_MspInit+0x44>)
 8000b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	055b      	lsls	r3, r3, #21
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b097      	sub	sp, #92	; 0x5c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2344      	movs	r3, #68	; 0x44
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f005 fa50 	bl	8006068 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	2410      	movs	r4, #16
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2334      	movs	r3, #52	; 0x34
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f005 fa48 	bl	8006068 <memset>
  if(hi2c->Instance==I2C1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_I2C_MspInit+0xb8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13e      	bne.n	8000c60 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2220      	movs	r2, #32
 8000be6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 f8ad 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff ffaf 	bl	8000b5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c04:	2102      	movs	r1, #2
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	2144      	movs	r1, #68	; 0x44
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	22c0      	movs	r2, #192	; 0xc0
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2212      	movs	r2, #18
 8000c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2201      	movs	r2, #1
 8000c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2206      	movs	r2, #6
 8000c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_I2C_MspInit+0xc0>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 fa7a 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	0389      	lsls	r1, r1, #14
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_I2C_MspInit+0xbc>)
 8000c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	039b      	lsls	r3, r3, #14
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b017      	add	sp, #92	; 0x5c
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	50000400 	.word	0x50000400

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b097      	sub	sp, #92	; 0x5c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	2344      	movs	r3, #68	; 0x44
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	2314      	movs	r3, #20
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f005 f9ee 	bl	8006068 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	2410      	movs	r4, #16
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2334      	movs	r3, #52	; 0x34
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f005 f9e6 	bl	8006068 <memset>
  if(huart->Instance==USART2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <HAL_UART_MspInit+0xb8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d13e      	bne.n	8000d24 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2202      	movs	r2, #2
 8000caa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 f84b 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff ff4d 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0289      	lsls	r1, r1, #10
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0xbc>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cf6:	2144      	movs	r1, #68	; 0x44
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fa0a 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b017      	add	sp, #92	; 0x5c
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8fa 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <init_tof>:
extern GW_proc_t gest_predictor;
extern HT_proc_t hand_tracker;
extern SEN_data_t sensor_data;
#endif

uint8_t init_tof(VL53L5CX_Configuration	*config){
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L5CX_STATUS_OK;
 8000d74:	240f      	movs	r4, #15
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_init(config);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f003 fcb2 	bl	80046e8 <vl53l5cx_init>
 8000d84:	0003      	movs	r3, r0
 8000d86:	0019      	movs	r1, r3
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	193a      	adds	r2, r7, r4
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8000d92:	23fa      	movs	r3, #250	; 0xfa
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f8f6 	bl	8000f88 <HAL_Delay>
	//@todo more initialization
	status |= vl53l5cx_set_ranging_frequency_hz(config, 10);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	210a      	movs	r1, #10
 8000da0:	0018      	movs	r0, r3
 8000da2:	f004 ff75 	bl	8005c90 <vl53l5cx_set_ranging_frequency_hz>
 8000da6:	0003      	movs	r3, r0
 8000da8:	0019      	movs	r1, r3
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	193a      	adds	r2, r7, r4
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000db4:	23fa      	movs	r3, #250	; 0xfa
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 f8e5 	bl	8000f88 <HAL_Delay>
	status |= GW_init(&gest_predictor, &hand_tracker, &sensor_data);
	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53L5CX_RESOLUTION_8X8);
	status |= GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0/50);
#endif

	return status;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	781b      	ldrb	r3, [r3, #0]
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b005      	add	sp, #20
 8000dc8:	bd90      	pop	{r4, r7, pc}

08000dca <sample_once>:


uint8_t sample_once(VL53L5CX_Configuration* config, VL53L5CX_ResultsData* results){
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	uint8_t is_ready = 0;
 8000ddc:	230e      	movs	r3, #14
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]

	while(is_ready == 0){ // poll ;)
 8000de4:	e00e      	b.n	8000e04 <sample_once+0x3a>
		status |= vl53l5cx_check_data_ready(config, &is_ready);
 8000de6:	230e      	movs	r3, #14
 8000de8:	18fa      	adds	r2, r7, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f004 fc50 	bl	8005694 <vl53l5cx_check_data_ready>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0019      	movs	r1, r3
 8000df8:	220f      	movs	r2, #15
 8000dfa:	18bb      	adds	r3, r7, r2
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]
	while(is_ready == 0){ // poll ;)
 8000e04:	230e      	movs	r3, #14
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0eb      	beq.n	8000de6 <sample_once+0x1c>
	}
	vl53l5cx_get_ranging_data(config, results);
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f004 fca1 	bl	800575c <vl53l5cx_get_ranging_data>

	return status;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff ff99 	bl	8000d62 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f005 f90f 	bl	8006078 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e5a:	f7ff fbdf 	bl	800061c <main>

08000e5e <LoopForever>:

LoopForever:
  b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e6c:	0801b8ec 	.word	0x0801b8ec
  ldr r2, =_sbss
 8000e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e74:	20001118 	.word	0x20001118

08000e78 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_COMP_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	0049      	lsls	r1, r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f810 	bl	8000ebc <HAL_InitTick>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe5e 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_InitTick+0x88>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d02b      	beq.n	8000f2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_InitTick+0x8c>)
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_InitTick+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	0019      	movs	r1, r3
 8000ede:	23fa      	movs	r3, #250	; 0xfa
 8000ee0:	0098      	lsls	r0, r3, #2
 8000ee2:	f7ff f90f 	bl	8000104 <__udivsi3>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	0020      	movs	r0, r4
 8000eec:	f7ff f90a 	bl	8000104 <__udivsi3>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f913 	bl	800111e <HAL_SYSTICK_Config>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d112      	bne.n	8000f22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d80a      	bhi.n	8000f18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2301      	movs	r3, #1
 8000f06:	425b      	negs	r3, r3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 f8f2 	bl	80010f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_InitTick+0x90>)
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00d      	b.n	8000f34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e008      	b.n	8000f34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f22:	230f      	movs	r3, #15
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e003      	b.n	8000f34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b005      	add	sp, #20
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	18d2      	adds	r2, r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_IncTick+0x20>)
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20001114 	.word	0x20001114

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <HAL_GetTick+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20001114 	.word	0x20001114

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fff0 	bl	8000f74 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	f7ff ffe0 	bl	8000f74 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe4:	d828      	bhi.n	8001038 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <__NVIC_SetPriority+0xd4>)
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	33c0      	adds	r3, #192	; 0xc0
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	589b      	ldr	r3, [r3, r2]
 8000ff6:	1dfa      	adds	r2, r7, #7
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	400a      	ands	r2, r1
 8001000:	00d2      	lsls	r2, r2, #3
 8001002:	21ff      	movs	r1, #255	; 0xff
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	43d2      	mvns	r2, r2
 800100a:	401a      	ands	r2, r3
 800100c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	22ff      	movs	r2, #255	; 0xff
 8001014:	401a      	ands	r2, r3
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	2303      	movs	r3, #3
 800101e:	4003      	ands	r3, r0
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001024:	481f      	ldr	r0, [pc, #124]	; (80010a4 <__NVIC_SetPriority+0xd4>)
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b25b      	sxtb	r3, r3
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	430a      	orrs	r2, r1
 8001030:	33c0      	adds	r3, #192	; 0xc0
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001036:	e031      	b.n	800109c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <__NVIC_SetPriority+0xd8>)
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0019      	movs	r1, r3
 8001040:	230f      	movs	r3, #15
 8001042:	400b      	ands	r3, r1
 8001044:	3b08      	subs	r3, #8
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3306      	adds	r3, #6
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	18d3      	adds	r3, r2, r3
 800104e:	3304      	adds	r3, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1dfa      	adds	r2, r7, #7
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	0011      	movs	r1, r2
 8001058:	2203      	movs	r2, #3
 800105a:	400a      	ands	r2, r1
 800105c:	00d2      	lsls	r2, r2, #3
 800105e:	21ff      	movs	r1, #255	; 0xff
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	43d2      	mvns	r2, r2
 8001066:	401a      	ands	r2, r3
 8001068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	401a      	ands	r2, r3
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	0018      	movs	r0, r3
 8001078:	2303      	movs	r3, #3
 800107a:	4003      	ands	r3, r0
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <__NVIC_SetPriority+0xd8>)
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001c      	movs	r4, r3
 8001088:	230f      	movs	r3, #15
 800108a:	4023      	ands	r3, r4
 800108c:	3b08      	subs	r3, #8
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	430a      	orrs	r2, r1
 8001092:	3306      	adds	r3, #6
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	18c3      	adds	r3, r0, r3
 8001098:	3304      	adds	r3, #4
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b003      	add	sp, #12
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	045b      	lsls	r3, r3, #17
 80010bc:	429a      	cmp	r2, r3
 80010be:	d301      	bcc.n	80010c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c0:	2301      	movs	r3, #1
 80010c2:	e010      	b.n	80010e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <SysTick_Config+0x44>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	3a01      	subs	r2, #1
 80010ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010cc:	2301      	movs	r3, #1
 80010ce:	425b      	negs	r3, r3
 80010d0:	2103      	movs	r1, #3
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff ff7c 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x44>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x44>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	210f      	movs	r1, #15
 8001100:	187b      	adds	r3, r7, r1
 8001102:	1c02      	adds	r2, r0, #0
 8001104:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	187b      	adds	r3, r7, r1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ffbf 	bl	80010ac <SysTick_Config>
 800112e:	0003      	movs	r3, r0
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e147      	b.n	80013d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <HAL_GPIO_Init+0x28>
 800115e:	e138      	b.n	80013d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4013      	ands	r3, r2
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_GPIO_Init+0x40>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	2b02      	cmp	r3, #2
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	2201      	movs	r2, #1
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d017      	beq.n	8001216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	4013      	ands	r3, r2
 800121e:	2b02      	cmp	r3, #2
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	58d3      	ldr	r3, [r2, r3]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2207      	movs	r2, #7
 8001234:	4013      	ands	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2107      	movs	r1, #7
 800124e:	400b      	ands	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	6939      	ldr	r1, [r7, #16]
 8001268:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	401a      	ands	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	23c0      	movs	r3, #192	; 0xc0
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	4013      	ands	r3, r2
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x174>
 80012aa:	e092      	b.n	80013d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012ac:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3318      	adds	r3, #24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	589b      	ldr	r3, [r3, r2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	220f      	movs	r2, #15
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23a0      	movs	r3, #160	; 0xa0
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1ca>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <HAL_GPIO_Init+0x2bc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1c6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <HAL_GPIO_Init+0x2c0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1c2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a43      	ldr	r2, [pc, #268]	; (80013fc <HAL_GPIO_Init+0x2c4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1be>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 8001302:	2300      	movs	r3, #0
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	2103      	movs	r1, #3
 8001308:	400a      	ands	r2, r1
 800130a:	00d2      	lsls	r2, r2, #3
 800130c:	4093      	lsls	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001314:	4936      	ldr	r1, [pc, #216]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3318      	adds	r3, #24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	035b      	lsls	r3, r3, #13
 800133a:	4013      	ands	r3, r2
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	039b      	lsls	r3, r3, #14
 8001364:	4013      	ands	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001378:	2384      	movs	r3, #132	; 0x84
 800137a:	58d3      	ldr	r3, [r2, r3]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	029b      	lsls	r3, r3, #10
 8001390:	4013      	ands	r3, r2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139c:	4914      	ldr	r1, [pc, #80]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 800139e:	2284      	movs	r2, #132	; 0x84
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	58d3      	ldr	r3, [r2, r3]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	4013      	ands	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1e13      	subs	r3, r2, #0
 80013e2:	d000      	beq.n	80013e6 <HAL_GPIO_Init+0x2ae>
 80013e4:	e6b0      	b.n	8001148 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b006      	add	sp, #24
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021800 	.word	0x40021800
 80013f4:	50000400 	.word	0x50000400
 80013f8:	50000800 	.word	0x50000800
 80013fc:	50000c00 	.word	0x50000c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	0008      	movs	r0, r1
 800140a:	0011      	movs	r1, r2
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	1c7b      	adds	r3, r7, #1
 8001414:	1c0a      	adds	r2, r1, #0
 8001416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	1c7b      	adds	r3, r7, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	000a      	movs	r2, r1
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800144e:	1cbb      	adds	r3, r7, #2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	041a      	lsls	r2, r3, #16
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	1cb9      	adds	r1, r7, #2
 800145e:	8809      	ldrh	r1, [r1, #0]
 8001460:	400b      	ands	r3, r1
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e082      	b.n	8001588 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2241      	movs	r2, #65	; 0x41
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	2100      	movs	r1, #0
 8001494:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fb89 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2241      	movs	r2, #65	; 0x41
 80014a2:	2124      	movs	r1, #36	; 0x24
 80014a4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	438a      	bics	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_I2C_Init+0x120>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4931      	ldr	r1, [pc, #196]	; (8001594 <HAL_I2C_Init+0x124>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0209      	lsls	r1, r1, #8
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e007      	b.n	80014fe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2184      	movs	r1, #132	; 0x84
 80014f8:	0209      	lsls	r1, r1, #8
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d104      	bne.n	8001510 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	491f      	ldr	r1, [pc, #124]	; (8001598 <HAL_I2C_Init+0x128>)
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	491a      	ldr	r1, [pc, #104]	; (8001594 <HAL_I2C_Init+0x124>)
 800152c:	400a      	ands	r2, r1
 800152e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	431a      	orrs	r2, r3
 800153a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69d9      	ldr	r1, [r3, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1a      	ldr	r2, [r3, #32]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2241      	movs	r2, #65	; 0x41
 8001574:	2120      	movs	r1, #32
 8001576:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2242      	movs	r2, #66	; 0x42
 8001582:	2100      	movs	r1, #0
 8001584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	f0ffffff 	.word	0xf0ffffff
 8001594:	ffff7fff 	.word	0xffff7fff
 8001598:	02008000 	.word	0x02008000

0800159c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	0008      	movs	r0, r1
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	0019      	movs	r1, r3
 80015aa:	230a      	movs	r3, #10
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	801a      	strh	r2, [r3, #0]
 80015b2:	2308      	movs	r3, #8
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	1c0a      	adds	r2, r1, #0
 80015b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2241      	movs	r2, #65	; 0x41
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d000      	beq.n	80015c8 <HAL_I2C_Master_Transmit+0x2c>
 80015c6:	e0e7      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	5c9b      	ldrb	r3, [r3, r2]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Master_Transmit+0x3a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e0e1      	b.n	800179a <HAL_I2C_Master_Transmit+0x1fe>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015de:	f7ff fcc9 	bl	8000f74 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	0219      	lsls	r1, r3, #8
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2319      	movs	r3, #25
 80015f2:	2201      	movs	r2, #1
 80015f4:	f000 fb96 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2241      	movs	r2, #65	; 0x41
 8001604:	2121      	movs	r1, #33	; 0x21
 8001606:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2242      	movs	r2, #66	; 0x42
 800160c:	2110      	movs	r1, #16
 800160e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2208      	movs	r2, #8
 8001620:	18ba      	adds	r2, r7, r2
 8001622:	8812      	ldrh	r2, [r2, #0]
 8001624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d911      	bls.n	800165a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	22ff      	movs	r2, #255	; 0xff
 800163a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001640:	b2da      	uxtb	r2, r3
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	045c      	lsls	r4, r3, #17
 8001646:	230a      	movs	r3, #10
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	8819      	ldrh	r1, [r3, #0]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_I2C_Master_Transmit+0x208>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	0023      	movs	r3, r4
 8001654:	f000 fd9a 	bl	800218c <I2C_TransferConfig>
 8001658:	e075      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	b2da      	uxtb	r2, r3
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	049c      	lsls	r4, r3, #18
 800166e:	230a      	movs	r3, #10
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	8819      	ldrh	r1, [r3, #0]
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_I2C_Master_Transmit+0x208>)
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	0023      	movs	r3, r4
 800167c:	f000 fd86 	bl	800218c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001680:	e061      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	0018      	movs	r0, r3
 800168a:	f000 fb8a 	bl	8001da2 <I2C_WaitOnTXISFlagUntilTimeout>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e081      	b.n	800179a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d03a      	beq.n	8001746 <HAL_I2C_Master_Transmit+0x1aa>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d136      	bne.n	8001746 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	0013      	movs	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	f000 fb1d 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e053      	b.n	800179a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2bff      	cmp	r3, #255	; 0xff
 80016fa:	d911      	bls.n	8001720 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001706:	b2da      	uxtb	r2, r3
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	045c      	lsls	r4, r3, #17
 800170c:	230a      	movs	r3, #10
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	8819      	ldrh	r1, [r3, #0]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	0023      	movs	r3, r4
 800171a:	f000 fd37 	bl	800218c <I2C_TransferConfig>
 800171e:	e012      	b.n	8001746 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	b2da      	uxtb	r2, r3
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	049c      	lsls	r4, r3, #18
 8001734:	230a      	movs	r3, #10
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	8819      	ldrh	r1, [r3, #0]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	0023      	movs	r3, r4
 8001742:	f000 fd23 	bl	800218c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d198      	bne.n	8001682 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	0018      	movs	r0, r3
 8001758:	f000 fb62 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e01a      	b.n	800179a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2220      	movs	r2, #32
 800176a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	490c      	ldr	r1, [pc, #48]	; (80017a8 <HAL_I2C_Master_Transmit+0x20c>)
 8001778:	400a      	ands	r2, r1
 800177a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2241      	movs	r2, #65	; 0x41
 8001780:	2120      	movs	r1, #32
 8001782:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2242      	movs	r2, #66	; 0x42
 8001788:	2100      	movs	r1, #0
 800178a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001798:	2302      	movs	r3, #2
  }
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b007      	add	sp, #28
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	80002000 	.word	0x80002000
 80017a8:	fe00e800 	.word	0xfe00e800

080017ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	0008      	movs	r0, r1
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	0019      	movs	r1, r3
 80017ba:	230a      	movs	r3, #10
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	1c02      	adds	r2, r0, #0
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	2308      	movs	r3, #8
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	1c0a      	adds	r2, r1, #0
 80017c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2241      	movs	r2, #65	; 0x41
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d000      	beq.n	80017d8 <HAL_I2C_Master_Receive+0x2c>
 80017d6:	e0e8      	b.n	80019aa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	5c9b      	ldrb	r3, [r3, r2]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_I2C_Master_Receive+0x3a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e0e2      	b.n	80019ac <HAL_I2C_Master_Receive+0x200>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	2101      	movs	r1, #1
 80017ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017ee:	f7ff fbc1 	bl	8000f74 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	0219      	lsls	r1, r3, #8
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2319      	movs	r3, #25
 8001802:	2201      	movs	r2, #1
 8001804:	f000 fa8e 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0cd      	b.n	80019ac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2241      	movs	r2, #65	; 0x41
 8001814:	2122      	movs	r1, #34	; 0x22
 8001816:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2242      	movs	r2, #66	; 0x42
 800181c:	2110      	movs	r1, #16
 800181e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2208      	movs	r2, #8
 8001830:	18ba      	adds	r2, r7, r2
 8001832:	8812      	ldrh	r2, [r2, #0]
 8001834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d911      	bls.n	800186a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	b2da      	uxtb	r2, r3
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	045c      	lsls	r4, r3, #17
 8001856:	230a      	movs	r3, #10
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	8819      	ldrh	r1, [r3, #0]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	4b55      	ldr	r3, [pc, #340]	; (80019b4 <HAL_I2C_Master_Receive+0x208>)
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	0023      	movs	r3, r4
 8001864:	f000 fc92 	bl	800218c <I2C_TransferConfig>
 8001868:	e076      	b.n	8001958 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	b2da      	uxtb	r2, r3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049c      	lsls	r4, r3, #18
 800187e:	230a      	movs	r3, #10
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	8819      	ldrh	r1, [r3, #0]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_I2C_Master_Receive+0x208>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	0023      	movs	r3, r4
 800188c:	f000 fc7e 	bl	800218c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001890:	e062      	b.n	8001958 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fafd 	bl	8001e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e082      	b.n	80019ac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d03a      	beq.n	8001958 <HAL_I2C_Master_Receive+0x1ac>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d136      	bne.n	8001958 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	0013      	movs	r3, r2
 80018f4:	2200      	movs	r2, #0
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	f000 fa14 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e053      	b.n	80019ac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d911      	bls.n	8001932 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	b2da      	uxtb	r2, r3
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	045c      	lsls	r4, r3, #17
 800191e:	230a      	movs	r3, #10
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	8819      	ldrh	r1, [r3, #0]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	0023      	movs	r3, r4
 800192c:	f000 fc2e 	bl	800218c <I2C_TransferConfig>
 8001930:	e012      	b.n	8001958 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	b2da      	uxtb	r2, r3
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	049c      	lsls	r4, r3, #18
 8001946:	230a      	movs	r3, #10
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	8819      	ldrh	r1, [r3, #0]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	0023      	movs	r3, r4
 8001954:	f000 fc1a 	bl	800218c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d197      	bne.n	8001892 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	0018      	movs	r0, r3
 800196a:	f000 fa59 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e01a      	b.n	80019ac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2220      	movs	r2, #32
 800197c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	490b      	ldr	r1, [pc, #44]	; (80019b8 <HAL_I2C_Master_Receive+0x20c>)
 800198a:	400a      	ands	r2, r1
 800198c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2241      	movs	r2, #65	; 0x41
 8001992:	2120      	movs	r1, #32
 8001994:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2242      	movs	r2, #66	; 0x42
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
  }
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b007      	add	sp, #28
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	80002400 	.word	0x80002400
 80019b8:	fe00e800 	.word	0xfe00e800

080019bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	000c      	movs	r4, r1
 80019c6:	0010      	movs	r0, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	230a      	movs	r3, #10
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	1c22      	adds	r2, r4, #0
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	2308      	movs	r3, #8
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	1c02      	adds	r2, r0, #0
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	1c0a      	adds	r2, r1, #0
 80019de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2241      	movs	r2, #65	; 0x41
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d000      	beq.n	80019ee <HAL_I2C_Mem_Write+0x32>
 80019ec:	e10c      	b.n	8001c08 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_I2C_Mem_Write+0x42>
 80019f4:	232c      	movs	r3, #44	; 0x2c
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0ff      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_I2C_Mem_Write+0x5c>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e0f8      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff faa8 	bl	8000f74 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	0219      	lsls	r1, r3, #8
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2319      	movs	r3, #25
 8001a34:	2201      	movs	r2, #1
 8001a36:	f000 f975 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0e3      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2241      	movs	r2, #65	; 0x41
 8001a46:	2121      	movs	r1, #33	; 0x21
 8001a48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2242      	movs	r2, #66	; 0x42
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	222c      	movs	r2, #44	; 0x2c
 8001a62:	18ba      	adds	r2, r7, r2
 8001a64:	8812      	ldrh	r2, [r2, #0]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	881c      	ldrh	r4, [r3, #0]
 8001a72:	2308      	movs	r3, #8
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	230a      	movs	r3, #10
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	8819      	ldrh	r1, [r3, #0]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	0023      	movs	r3, r4
 8001a8a:	f000 f8c5 	bl	8001c18 <I2C_RequestMemoryWrite>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0b5      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2bff      	cmp	r3, #255	; 0xff
 8001aa6:	d911      	bls.n	8001acc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	045c      	lsls	r4, r3, #17
 8001ab8:	230a      	movs	r3, #10
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	8819      	ldrh	r1, [r3, #0]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	0023      	movs	r3, r4
 8001ac6:	f000 fb61 	bl	800218c <I2C_TransferConfig>
 8001aca:	e012      	b.n	8001af2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	049c      	lsls	r4, r3, #18
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	8819      	ldrh	r1, [r3, #0]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	0023      	movs	r3, r4
 8001aee:	f000 fb4d 	bl	800218c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 f952 	bl	8001da2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e081      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d03a      	beq.n	8001bb6 <HAL_I2C_Mem_Write+0x1fa>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d136      	bne.n	8001bb6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	0013      	movs	r3, r2
 8001b52:	2200      	movs	r2, #0
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	f000 f8e5 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e053      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2bff      	cmp	r3, #255	; 0xff
 8001b6a:	d911      	bls.n	8001b90 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	22ff      	movs	r2, #255	; 0xff
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	045c      	lsls	r4, r3, #17
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	2300      	movs	r3, #0
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	0023      	movs	r3, r4
 8001b8a:	f000 faff 	bl	800218c <I2C_TransferConfig>
 8001b8e:	e012      	b.n	8001bb6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	049c      	lsls	r4, r3, #18
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	8819      	ldrh	r1, [r3, #0]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	0023      	movs	r3, r4
 8001bb2:	f000 faeb 	bl	800218c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d198      	bne.n	8001af2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 f92a 	bl	8001e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e01a      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	490b      	ldr	r1, [pc, #44]	; (8001c14 <HAL_I2C_Mem_Write+0x258>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2241      	movs	r2, #65	; 0x41
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2242      	movs	r2, #66	; 0x42
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b007      	add	sp, #28
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	fe00e800 	.word	0xfe00e800

08001c18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	000c      	movs	r4, r1
 8001c22:	0010      	movs	r0, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	250a      	movs	r5, #10
 8001c28:	197b      	adds	r3, r7, r5
 8001c2a:	1c22      	adds	r2, r4, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	2308      	movs	r3, #8
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1c02      	adds	r2, r0, #0
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	1dbb      	adds	r3, r7, #6
 8001c38:	1c0a      	adds	r2, r1, #0
 8001c3a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c3c:	1dbb      	adds	r3, r7, #6
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	045c      	lsls	r4, r3, #17
 8001c46:	197b      	adds	r3, r7, r5
 8001c48:	8819      	ldrh	r1, [r3, #0]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <I2C_RequestMemoryWrite+0xc4>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	0023      	movs	r3, r4
 8001c52:	f000 fa9b 	bl	800218c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 f8a0 	bl	8001da2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e033      	b.n	8001cd2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c6a:	1dbb      	adds	r3, r7, #6
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c72:	2308      	movs	r3, #8
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c80:	e019      	b.n	8001cb6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c82:	2308      	movs	r3, #8
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	6a39      	ldr	r1, [r7, #32]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 f881 	bl	8001da2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d001      	beq.n	8001ca8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e014      	b.n	8001cd2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca8:	2308      	movs	r3, #8
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb6:	6a3a      	ldr	r2, [r7, #32]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	f000 f82e 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001cc8:	1e03      	subs	r3, r0, #0
 8001cca:	d001      	beq.n	8001cd0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	80002000 	.word	0x80002000

08001ce0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d103      	bne.n	8001cfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d007      	beq.n	8001d1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2101      	movs	r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	619a      	str	r2, [r3, #24]
  }
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d34:	e021      	b.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	d01e      	beq.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3c:	f7ff f91a 	bl	8000f74 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d302      	bcc.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d113      	bne.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	2220      	movs	r2, #32
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2241      	movs	r2, #65	; 0x41
 8001d62:	2120      	movs	r1, #32
 8001d64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2242      	movs	r2, #66	; 0x42
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2240      	movs	r2, #64	; 0x40
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	425a      	negs	r2, r3
 8001d8a:	4153      	adcs	r3, r2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	001a      	movs	r2, r3
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d0ce      	beq.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dae:	e02b      	b.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f8e8 	bl	8001f8c <I2C_IsErrorOccurred>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e029      	b.n	8001e18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	d01e      	beq.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dca:	f7ff f8d3 	bl	8000f74 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d113      	bne.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	2220      	movs	r2, #32
 8001de6:	431a      	orrs	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2241      	movs	r2, #65	; 0x41
 8001df0:	2120      	movs	r1, #32
 8001df2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2242      	movs	r2, #66	; 0x42
 8001df8:	2100      	movs	r1, #0
 8001dfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	2100      	movs	r1, #0
 8001e02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e007      	b.n	8001e18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d1cc      	bne.n	8001db0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e2c:	e028      	b.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 f8a9 	bl	8001f8c <I2C_IsErrorOccurred>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e026      	b.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e42:	f7ff f897 	bl	8000f74 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d302      	bcc.n	8001e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d113      	bne.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2241      	movs	r2, #65	; 0x41
 8001e68:	2120      	movs	r1, #32
 8001e6a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2242      	movs	r2, #66	; 0x42
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e007      	b.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2220      	movs	r2, #32
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d1cf      	bne.n	8001e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b004      	add	sp, #16
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ea4:	e064      	b.n	8001f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 f86d 	bl	8001f8c <I2C_IsErrorOccurred>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d001      	beq.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e062      	b.n	8001f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d138      	bne.n	8001f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d105      	bne.n	8001ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e04e      	b.n	8001f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d107      	bne.n	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2204      	movs	r2, #4
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
 8001efe:	e002      	b.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	491b      	ldr	r1, [pc, #108]	; (8001f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2241      	movs	r2, #65	; 0x41
 8001f22:	2120      	movs	r1, #32
 8001f24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2242      	movs	r2, #66	; 0x42
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	2100      	movs	r1, #0
 8001f34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e022      	b.n	8001f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f81b 	bl	8000f74 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10f      	bne.n	8001f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	2220      	movs	r2, #32
 8001f56:	431a      	orrs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2241      	movs	r2, #65	; 0x41
 8001f60:	2120      	movs	r1, #32
 8001f62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	2100      	movs	r1, #0
 8001f6a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e007      	b.n	8001f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d193      	bne.n	8001ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	fe00e800 	.word	0xfe00e800

08001f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2327      	movs	r3, #39	; 0x27
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <I2C_IsErrorOccurred+0x2e>
 8001fb8:	e082      	b.n	80020c0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fc2:	e060      	b.n	8002086 <I2C_IsErrorOccurred+0xfa>
 8001fc4:	2427      	movs	r4, #39	; 0x27
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	193a      	adds	r2, r7, r4
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	d058      	beq.n	8002086 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fd4:	f7fe ffce 	bl	8000f74 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d306      	bcc.n	8001ff2 <I2C_IsErrorOccurred+0x66>
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	193a      	adds	r2, r7, r4
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d149      	bne.n	8002086 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	01db      	lsls	r3, r3, #7
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002000:	2013      	movs	r0, #19
 8002002:	183b      	adds	r3, r7, r0
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	2142      	movs	r1, #66	; 0x42
 8002008:	5c52      	ldrb	r2, [r2, r1]
 800200a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	401a      	ands	r2, r3
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	429a      	cmp	r2, r3
 800201e:	d126      	bne.n	800206e <I2C_IsErrorOccurred+0xe2>
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	01db      	lsls	r3, r3, #7
 8002026:	429a      	cmp	r2, r3
 8002028:	d021      	beq.n	800206e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800202a:	183b      	adds	r3, r7, r0
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b20      	cmp	r3, #32
 8002030:	d01d      	beq.n	800206e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002044:	f7fe ff96 	bl	8000f74 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800204c:	e00f      	b.n	800206e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800204e:	f7fe ff91 	bl	8000f74 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b19      	cmp	r3, #25
 800205a:	d908      	bls.n	800206e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	2220      	movs	r2, #32
 8002060:	4313      	orrs	r3, r2
 8002062:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002064:	2327      	movs	r3, #39	; 0x27
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]

              break;
 800206c:	e00b      	b.n	8002086 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2220      	movs	r2, #32
 8002076:	4013      	ands	r3, r2
 8002078:	2127      	movs	r1, #39	; 0x27
 800207a:	187a      	adds	r2, r7, r1
 800207c:	1879      	adds	r1, r7, r1
 800207e:	7809      	ldrb	r1, [r1, #0]
 8002080:	7011      	strb	r1, [r2, #0]
 8002082:	2b20      	cmp	r3, #32
 8002084:	d1e3      	bne.n	800204e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2220      	movs	r2, #32
 800208e:	4013      	ands	r3, r2
 8002090:	2b20      	cmp	r3, #32
 8002092:	d004      	beq.n	800209e <I2C_IsErrorOccurred+0x112>
 8002094:	2327      	movs	r3, #39	; 0x27
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d092      	beq.n	8001fc4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800209e:	2327      	movs	r3, #39	; 0x27
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2220      	movs	r2, #32
 80020ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2204      	movs	r2, #4
 80020b4:	4313      	orrs	r3, r2
 80020b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020b8:	2327      	movs	r3, #39	; 0x27
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d00c      	beq.n	80020ec <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4313      	orrs	r3, r2
 80020d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	0052      	lsls	r2, r2, #1
 80020e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020e4:	2327      	movs	r3, #39	; 0x27
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4013      	ands	r3, r2
 80020f4:	d00c      	beq.n	8002110 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4313      	orrs	r3, r2
 80020fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	00d2      	lsls	r2, r2, #3
 8002106:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002108:	2327      	movs	r3, #39	; 0x27
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d00c      	beq.n	8002134 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	2202      	movs	r2, #2
 800211e:	4313      	orrs	r3, r2
 8002120:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800212c:	2327      	movs	r3, #39	; 0x27
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002134:	2327      	movs	r3, #39	; 0x27
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01d      	beq.n	800217a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fdcd 	bl	8001ce0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	490d      	ldr	r1, [pc, #52]	; (8002188 <I2C_IsErrorOccurred+0x1fc>)
 8002152:	400a      	ands	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	431a      	orrs	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2241      	movs	r2, #65	; 0x41
 8002166:	2120      	movs	r1, #32
 8002168:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2242      	movs	r2, #66	; 0x42
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2240      	movs	r2, #64	; 0x40
 8002176:	2100      	movs	r1, #0
 8002178:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800217a:	2327      	movs	r3, #39	; 0x27
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b00b      	add	sp, #44	; 0x2c
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	fe00e800 	.word	0xfe00e800

0800218c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	0008      	movs	r0, r1
 8002196:	0011      	movs	r1, r2
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	240a      	movs	r4, #10
 800219c:	193b      	adds	r3, r7, r4
 800219e:	1c02      	adds	r2, r0, #0
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	2009      	movs	r0, #9
 80021a4:	183b      	adds	r3, r7, r0
 80021a6:	1c0a      	adds	r2, r1, #0
 80021a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	059b      	lsls	r3, r3, #22
 80021b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021b2:	183b      	adds	r3, r7, r0
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	0419      	lsls	r1, r3, #16
 80021b8:	23ff      	movs	r3, #255	; 0xff
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	4313      	orrs	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d6:	0d51      	lsrs	r1, r2, #21
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	00d2      	lsls	r2, r2, #3
 80021dc:	400a      	ands	r2, r1
 80021de:	4907      	ldr	r1, [pc, #28]	; (80021fc <I2C_TransferConfig+0x70>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	43d2      	mvns	r2, r2
 80021e4:	401a      	ands	r2, r3
 80021e6:	0011      	movs	r1, r2
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b007      	add	sp, #28
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	03ff63ff 	.word	0x03ff63ff

08002200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2241      	movs	r2, #65	; 0x41
 800220e:	5c9b      	ldrb	r3, [r3, r2]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	d138      	bne.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002220:	2302      	movs	r3, #2
 8002222:	e032      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2241      	movs	r2, #65	; 0x41
 8002230:	2124      	movs	r1, #36	; 0x24
 8002232:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	438a      	bics	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4911      	ldr	r1, [pc, #68]	; (8002294 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2120      	movs	r1, #32
 800227a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	ffffefff 	.word	0xffffefff

08002298 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d139      	bne.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e033      	b.n	8002324 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2241      	movs	r2, #65	; 0x41
 80022c8:	2124      	movs	r1, #36	; 0x24
 80022ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	438a      	bics	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	2120      	movs	r1, #32
 8002314:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}
 800232c:	fffff0ff 	.word	0xfffff0ff

08002330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d11f      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	0013      	movs	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	189b      	adds	r3, r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4912      	ldr	r1, [pc, #72]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002362:	0018      	movs	r0, r3
 8002364:	f7fd fece 	bl	8000104 <__udivsi3>
 8002368:	0003      	movs	r3, r0
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800236e:	e008      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b01      	subs	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e001      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e009      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	401a      	ands	r2, r3
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	429a      	cmp	r2, r3
 8002392:	d0ed      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40007000 	.word	0x40007000
 80023a4:	fffff9ff 	.word	0xfffff9ff
 80023a8:	20000000 	.word	0x20000000
 80023ac:	000f4240 	.word	0x000f4240

080023b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	23e0      	movs	r3, #224	; 0xe0
 80023ba:	01db      	lsls	r3, r3, #7
 80023bc:	4013      	ands	r3, r2
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e2fe      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d100      	bne.n	80023e6 <HAL_RCC_OscConfig+0x1e>
 80023e4:	e07c      	b.n	80024e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	4bc3      	ldr	r3, [pc, #780]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2238      	movs	r2, #56	; 0x38
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f0:	4bc0      	ldr	r3, [pc, #768]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4013      	ands	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_OscConfig+0x3e>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d002      	beq.n	800240c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d10b      	bne.n	8002424 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	4bb9      	ldr	r3, [pc, #740]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	4013      	ands	r3, r2
 8002416:	d062      	beq.n	80024de <HAL_RCC_OscConfig+0x116>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d15e      	bne.n	80024de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e2d9      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	025b      	lsls	r3, r3, #9
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x78>
 8002430:	4bb0      	ldr	r3, [pc, #704]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4baf      	ldr	r3, [pc, #700]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0249      	lsls	r1, r1, #9
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e020      	b.n	8002482 <HAL_RCC_OscConfig+0xba>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	23a0      	movs	r3, #160	; 0xa0
 8002446:	02db      	lsls	r3, r3, #11
 8002448:	429a      	cmp	r2, r3
 800244a:	d10e      	bne.n	800246a <HAL_RCC_OscConfig+0xa2>
 800244c:	4ba9      	ldr	r3, [pc, #676]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4ba8      	ldr	r3, [pc, #672]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	02c9      	lsls	r1, r1, #11
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	4ba6      	ldr	r3, [pc, #664]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4ba5      	ldr	r3, [pc, #660]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0249      	lsls	r1, r1, #9
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0xba>
 800246a:	4ba2      	ldr	r3, [pc, #648]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4ba1      	ldr	r3, [pc, #644]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002470:	49a1      	ldr	r1, [pc, #644]	; (80026f8 <HAL_RCC_OscConfig+0x330>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b9f      	ldr	r3, [pc, #636]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800247c:	499f      	ldr	r1, [pc, #636]	; (80026fc <HAL_RCC_OscConfig+0x334>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d014      	beq.n	80024b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fd73 	bl	8000f74 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fd6e 	bl	8000f74 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e298      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	4b93      	ldr	r3, [pc, #588]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	4013      	ands	r3, r2
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xcc>
 80024b2:	e015      	b.n	80024e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fd5e 	bl	8000f74 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024be:	f7fe fd59 	bl	8000f74 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e283      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d0:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	4013      	ands	r3, r2
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0xf6>
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_RCC_OscConfig+0x124>
 80024ea:	e099      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ec:	4b81      	ldr	r3, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x144>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d002      	beq.n	8002512 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d135      	bne.n	800257e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002512:	4b78      	ldr	r3, [pc, #480]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4013      	ands	r3, r2
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x162>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e256      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a74      	ldr	r2, [pc, #464]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	021a      	lsls	r2, r3, #8
 800253a:	4b6e      	ldr	r3, [pc, #440]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d112      	bne.n	800256c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x33c>)
 800254c:	4013      	ands	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	2207      	movs	r2, #7
 8002562:	4013      	ands	r3, r2
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x340>)
 8002566:	40da      	lsrs	r2, r3
 8002568:	4b68      	ldr	r3, [pc, #416]	; (800270c <HAL_RCC_OscConfig+0x344>)
 800256a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800256c:	4b68      	ldr	r3, [pc, #416]	; (8002710 <HAL_RCC_OscConfig+0x348>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0018      	movs	r0, r3
 8002572:	f7fe fca3 	bl	8000ebc <HAL_InitTick>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d051      	beq.n	800261e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e22c      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d030      	beq.n	80025e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5e      	ldr	r2, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x33c>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b55      	ldr	r3, [pc, #340]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	0049      	lsls	r1, r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fce4 	bl	8000f74 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fcdf 	bl	8000f74 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e209      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	; (8002700 <HAL_RCC_OscConfig+0x338>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	4949      	ldr	r1, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x34c>)
 80025f0:	400a      	ands	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fcbe 	bl	8000f74 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fcb9 	bl	8000f74 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1e3      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002610:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4013      	ands	r3, r2
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x236>
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2208      	movs	r2, #8
 8002626:	4013      	ands	r3, r2
 8002628:	d047      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2238      	movs	r2, #56	; 0x38
 8002630:	4013      	ands	r3, r2
 8002632:	2b18      	cmp	r3, #24
 8002634:	d10a      	bne.n	800264c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d138      	bne.n	80026ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e1c5      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d019      	beq.n	8002688 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002656:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fc88 	bl	8000f74 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe fc83 	bl	8000f74 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1ad      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800267e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d0f1      	beq.n	800266a <HAL_RCC_OscConfig+0x2a2>
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800268a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fc6e 	bl	8000f74 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fc69 	bl	8000f74 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e193      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d1f1      	bne.n	800269e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d100      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2fe>
 80026c4:	e0c6      	b.n	8002854 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	231f      	movs	r3, #31
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d11e      	bne.n	8002718 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x31e>
 80026e4:	e0b6      	b.n	8002854 <HAL_RCC_OscConfig+0x48c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d000      	beq.n	80026f0 <HAL_RCC_OscConfig+0x328>
 80026ee:	e0b1      	b.n	8002854 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e171      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	fffeffff 	.word	0xfffeffff
 80026fc:	fffbffff 	.word	0xfffbffff
 8002700:	ffff80ff 	.word	0xffff80ff
 8002704:	ffffc7ff 	.word	0xffffc7ff
 8002708:	00f42400 	.word	0x00f42400
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004
 8002714:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002718:	4bb1      	ldr	r3, [pc, #708]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800271a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	055b      	lsls	r3, r3, #21
 8002720:	4013      	ands	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x360>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x362>
 8002728:	2300      	movs	r3, #0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4bac      	ldr	r3, [pc, #688]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002732:	4bab      	ldr	r3, [pc, #684]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	0549      	lsls	r1, r1, #21
 8002738:	430a      	orrs	r2, r1
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c
 800273c:	4ba8      	ldr	r3, [pc, #672]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800273e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	055b      	lsls	r3, r3, #21
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800274a:	231f      	movs	r3, #31
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002752:	4ba4      	ldr	r3, [pc, #656]	; (80029e4 <HAL_RCC_OscConfig+0x61c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275e:	4ba1      	ldr	r3, [pc, #644]	; (80029e4 <HAL_RCC_OscConfig+0x61c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4ba0      	ldr	r3, [pc, #640]	; (80029e4 <HAL_RCC_OscConfig+0x61c>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0049      	lsls	r1, r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800276c:	f7fe fc02 	bl	8000f74 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe fbfd 	bl	8000f74 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e127      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	4b96      	ldr	r3, [pc, #600]	; (80029e4 <HAL_RCC_OscConfig+0x61c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x3e2>
 800279c:	4b90      	ldr	r3, [pc, #576]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800279e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027a0:	4b8f      	ldr	r3, [pc, #572]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x404>
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027b6:	4b8a      	ldr	r3, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027b8:	2104      	movs	r1, #4
 80027ba:	430a      	orrs	r2, r1
 80027bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027c2:	4b87      	ldr	r3, [pc, #540]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
 80027cc:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027d0:	4b83      	ldr	r3, [pc, #524]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027d8:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027dc:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027de:	2104      	movs	r1, #4
 80027e0:	438a      	bics	r2, r1
 80027e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d014      	beq.n	8002816 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fbc2 	bl	8000f74 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f4:	e009      	b.n	800280a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fbbd 	bl	8000f74 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	4a79      	ldr	r2, [pc, #484]	; (80029e8 <HAL_RCC_OscConfig+0x620>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0e6      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280a:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2202      	movs	r2, #2
 8002810:	4013      	ands	r3, r2
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x42e>
 8002814:	e013      	b.n	800283e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fbad 	bl	8000f74 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281e:	e009      	b.n	8002834 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fba8 	bl	8000f74 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a6f      	ldr	r2, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x620>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0d1      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800283e:	231f      	movs	r3, #31
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800284a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800284c:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800284e:	4967      	ldr	r1, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x624>)
 8002850:	400a      	ands	r2, r1
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x496>
 800285c:	e0bb      	b.n	80029d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285e:	4b60      	ldr	r3, [pc, #384]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2238      	movs	r2, #56	; 0x38
 8002864:	4013      	ands	r3, r2
 8002866:	2b10      	cmp	r3, #16
 8002868:	d100      	bne.n	800286c <HAL_RCC_OscConfig+0x4a4>
 800286a:	e07b      	b.n	8002964 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d156      	bne.n	8002922 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800287a:	495d      	ldr	r1, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x628>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fb78 	bl	8000f74 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fb73 	bl	8000f74 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e09d      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	049b      	lsls	r3, r3, #18
 80028a4:	4013      	ands	r3, r2
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_RCC_OscConfig+0x62c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	431a      	orrs	r2, r3
 80028d6:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0449      	lsls	r1, r1, #17
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0549      	lsls	r1, r1, #21
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fb3c 	bl	8000f74 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fb37 	bl	8000f74 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e061      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	049b      	lsls	r3, r3, #18
 800291c:	4013      	ands	r3, r2
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x53a>
 8002920:	e059      	b.n	80029d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002928:	4931      	ldr	r1, [pc, #196]	; (80029f0 <HAL_RCC_OscConfig+0x628>)
 800292a:	400a      	ands	r2, r1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fb21 	bl	8000f74 <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fb1c 	bl	8000f74 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e046      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	049b      	lsls	r3, r3, #18
 8002952:	4013      	ands	r3, r2
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 800295c:	4926      	ldr	r1, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x630>)
 800295e:	400a      	ands	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e038      	b.n	80029d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e033      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2203      	movs	r2, #3
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	429a      	cmp	r2, r3
 8002982:	d126      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2270      	movs	r2, #112	; 0x70
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d11f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	23fe      	movs	r3, #254	; 0xfe
 8002996:	01db      	lsls	r3, r3, #7
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d116      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	23f8      	movs	r3, #248	; 0xf8
 80029a8:	039b      	lsls	r3, r3, #14
 80029aa:	401a      	ands	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d10e      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	23e0      	movs	r3, #224	; 0xe0
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	401a      	ands	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	0f5b      	lsrs	r3, r3, #29
 80029c8:	075a      	lsls	r2, r3, #29
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b008      	add	sp, #32
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	00001388 	.word	0x00001388
 80029ec:	efffffff 	.word	0xefffffff
 80029f0:	feffffff 	.word	0xfeffffff
 80029f4:	11c1808c 	.word	0x11c1808c
 80029f8:	eefefffc 	.word	0xeefefffc

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0e9      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2207      	movs	r2, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d91e      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2207      	movs	r2, #7
 8002a24:	4393      	bics	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	4b70      	ldr	r3, [pc, #448]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a30:	f7fe faa0 	bl	8000f74 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3a:	f7fe fa9b 	bl	8000f74 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0ca      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2207      	movs	r2, #7
 8002a54:	4013      	ands	r3, r2
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d015      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d006      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a70:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a76:	21e0      	movs	r1, #224	; 0xe0
 8002a78:	01c9      	lsls	r1, r1, #7
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d057      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	4013      	ands	r3, r2
 8002aae:	d12b      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e097      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abc:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	049b      	lsls	r3, r3, #18
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d11f      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e08b      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4013      	ands	r3, r2
 8002ade:	d113      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e07f      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	2202      	movs	r2, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	d108      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e074      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e06d      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	4393      	bics	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fa2a 	bl	8000f74 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b26:	f7fe fa25 	bl	8000f74 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e054      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2238      	movs	r2, #56	; 0x38
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1ec      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2207      	movs	r2, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d21e      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2207      	movs	r2, #7
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fa02 	bl	8000f74 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b74:	e009      	b.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b76:	f7fe f9fd 	bl	8000f74 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e02c      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2207      	movs	r2, #7
 8002b90:	4013      	ands	r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1ee      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_RCC_ClockConfig+0x200>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bb6:	f000 f829 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bba:	0001      	movs	r1, r0
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x204>)
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	58d3      	ldr	r3, [r2, r3]
 8002bcc:	221f      	movs	r2, #31
 8002bce:	4013      	ands	r3, r2
 8002bd0:	000a      	movs	r2, r1
 8002bd2:	40da      	lsrs	r2, r3
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x208>)
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_ClockConfig+0x20c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fe f96d 	bl	8000ebc <HAL_InitTick>
 8002be2:	0003      	movs	r3, r0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	00001388 	.word	0x00001388
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	fffff0ff 	.word	0xfffff0ff
 8002bfc:	ffff8fff 	.word	0xffff8fff
 8002c00:	08006158 	.word	0x08006158
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c12:	4b3c      	ldr	r3, [pc, #240]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2238      	movs	r2, #56	; 0x38
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d10f      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0adb      	lsrs	r3, r3, #11
 8002c22:	2207      	movs	r2, #7
 8002c24:	4013      	ands	r3, r2
 8002c26:	2201      	movs	r2, #1
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	0013      	movs	r3, r2
 8002c2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	4835      	ldr	r0, [pc, #212]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c32:	f7fd fa67 	bl	8000104 <__udivsi3>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e05d      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2238      	movs	r2, #56	; 0x38
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e054      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2238      	movs	r2, #56	; 0x38
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d138      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4824      	ldr	r0, [pc, #144]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8002c7c:	f7fd fa42 	bl	8000104 <__udivsi3>
 8002c80:	0003      	movs	r3, r0
 8002c82:	0019      	movs	r1, r3
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	227f      	movs	r2, #127	; 0x7f
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	434b      	muls	r3, r1
 8002c90:	617b      	str	r3, [r7, #20]
        break;
 8002c92:	e00d      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	481c      	ldr	r0, [pc, #112]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c98:	f7fd fa34 	bl	8000104 <__udivsi3>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	227f      	movs	r2, #127	; 0x7f
 8002ca8:	4013      	ands	r3, r2
 8002caa:	434b      	muls	r3, r1
 8002cac:	617b      	str	r3, [r7, #20]
        break;
 8002cae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0f5b      	lsrs	r3, r3, #29
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	4013      	ands	r3, r2
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f7fd fa1f 	bl	8000104 <__udivsi3>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2238      	movs	r2, #56	; 0x38
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d103      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2238      	movs	r2, #56	; 0x38
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b18      	cmp	r3, #24
 8002cea:	d103      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002cec:	23fa      	movs	r3, #250	; 0xfa
 8002cee:	01db      	lsls	r3, r3, #7
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cf8:	693b      	ldr	r3, [r7, #16]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b006      	add	sp, #24
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	40021000 	.word	0x40021000
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b02      	ldr	r3, [pc, #8]	; (8002d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d28:	f7ff fff2 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d2c:	0004      	movs	r4, r0
 8002d2e:	f7ff fb3f 	bl	80023b0 <LL_RCC_GetAPB1Prescaler>
 8002d32:	0003      	movs	r3, r0
 8002d34:	0b1a      	lsrs	r2, r3, #12
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	58d3      	ldr	r3, [r2, r3]
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	4013      	ands	r3, r2
 8002d40:	40dc      	lsrs	r4, r3
 8002d42:	0023      	movs	r3, r4
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	08006198 	.word	0x08006198

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d58:	2313      	movs	r3, #19
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d60:	2312      	movs	r3, #18
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	d100      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d74:	e0a3      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2011      	movs	r0, #17
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4bc3      	ldr	r3, [pc, #780]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	055b      	lsls	r3, r3, #21
 8002d86:	4013      	ands	r3, r2
 8002d88:	d110      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4bc0      	ldr	r3, [pc, #768]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d8e:	4bbf      	ldr	r3, [pc, #764]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0549      	lsls	r1, r1, #21
 8002d94:	430a      	orrs	r2, r1
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d98:	4bbc      	ldr	r3, [pc, #752]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	055b      	lsls	r3, r3, #21
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4bb8      	ldr	r3, [pc, #736]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4bb7      	ldr	r3, [pc, #732]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dba:	f7fe f8db 	bl	8000f74 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe f8d6 	bl	8000f74 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d904      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002dd2:	2313      	movs	r3, #19
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	701a      	strb	r2, [r3, #0]
        break;
 8002dda:	e005      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ddc:	4bac      	ldr	r3, [pc, #688]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d0ed      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002de8:	2313      	movs	r3, #19
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d154      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df2:	4ba6      	ldr	r3, [pc, #664]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df6:	23c0      	movs	r3, #192	; 0xc0
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d014      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0e:	4b9f      	ldr	r3, [pc, #636]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	4aa0      	ldr	r2, [pc, #640]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e18:	4b9c      	ldr	r3, [pc, #624]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e1c:	4b9b      	ldr	r3, [pc, #620]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0249      	lsls	r1, r1, #9
 8002e22:	430a      	orrs	r2, r1
 8002e24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	4b99      	ldr	r3, [pc, #612]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2a:	4b98      	ldr	r3, [pc, #608]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2c:	499a      	ldr	r1, [pc, #616]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002e2e:	400a      	ands	r2, r1
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e32:	4b96      	ldr	r3, [pc, #600]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f898 	bl	8000f74 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	e00c      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe f893 	bl	8000f74 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a91      	ldr	r2, [pc, #580]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d904      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e5a:	2313      	movs	r3, #19
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2203      	movs	r2, #3
 8002e60:	701a      	strb	r2, [r3, #0]
            break;
 8002e62:	e004      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	4b89      	ldr	r3, [pc, #548]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d0ed      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e6e:	2313      	movs	r3, #19
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e78:	4b84      	ldr	r3, [pc, #528]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	4a85      	ldr	r2, [pc, #532]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e86:	4b81      	ldr	r3, [pc, #516]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e8e:	2312      	movs	r3, #18
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2213      	movs	r2, #19
 8002e94:	18ba      	adds	r2, r7, r2
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	2312      	movs	r3, #18
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2213      	movs	r2, #19
 8002ea2:	18ba      	adds	r2, r7, r2
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ea8:	2311      	movs	r3, #17
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eb6:	4b75      	ldr	r3, [pc, #468]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	4979      	ldr	r1, [pc, #484]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec8:	4b70      	ldr	r3, [pc, #448]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	2203      	movs	r2, #3
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee6:	4b69      	ldr	r3, [pc, #420]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	220c      	movs	r2, #12
 8002eec:	4393      	bics	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b65      	ldr	r3, [pc, #404]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2210      	movs	r2, #16
 8002f00:	4013      	ands	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f04:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	4a66      	ldr	r2, [pc, #408]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	4b5e      	ldr	r3, [pc, #376]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	4a5f      	ldr	r2, [pc, #380]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	4b56      	ldr	r3, [pc, #344]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f44:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	4b4e      	ldr	r3, [pc, #312]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	01db      	lsls	r3, r3, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d015      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f82:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	0899      	lsrs	r1, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	05db      	lsls	r3, r3, #23
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d106      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	0249      	lsls	r1, r1, #9
 8002faa:	430a      	orrs	r2, r1
 8002fac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	039b      	lsls	r3, r3, #14
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d016      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	03db      	lsls	r3, r3, #15
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d106      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	0449      	lsls	r1, r1, #17
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	03db      	lsls	r3, r3, #15
 8003010:	4013      	ands	r3, r2
 8003012:	d016      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003024:	430a      	orrs	r2, r1
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	045b      	lsls	r3, r3, #17
 8003030:	429a      	cmp	r2, r3
 8003032:	d106      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	0449      	lsls	r1, r1, #17
 800303e:	430a      	orrs	r2, r1
 8003040:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4013      	ands	r3, r2
 800304c:	d016      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003054:	4013      	ands	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800305e:	430a      	orrs	r2, r1
 8003060:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	01db      	lsls	r3, r3, #7
 800306a:	429a      	cmp	r2, r3
 800306c:	d106      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	0249      	lsls	r1, r1, #9
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800307c:	2312      	movs	r3, #18
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	781b      	ldrb	r3, [r3, #0]
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b006      	add	sp, #24
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	fffffcff 	.word	0xfffffcff
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	00001388 	.word	0x00001388
 80030a0:	efffffff 	.word	0xefffffff
 80030a4:	fffff3ff 	.word	0xfffff3ff
 80030a8:	fff3ffff 	.word	0xfff3ffff
 80030ac:	ffcfffff 	.word	0xffcfffff
 80030b0:	ffffcfff 	.word	0xffffcfff
 80030b4:	ffbfffff 	.word	0xffbfffff
 80030b8:	feffffff 	.word	0xfeffffff
 80030bc:	ffff3fff 	.word	0xffff3fff

080030c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e046      	b.n	8003160 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2288      	movs	r2, #136	; 0x88
 80030d6:	589b      	ldr	r3, [r3, r2]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2284      	movs	r2, #132	; 0x84
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd fdc4 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2288      	movs	r2, #136	; 0x88
 80030f0:	2124      	movs	r1, #36	; 0x24
 80030f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	438a      	bics	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f830 	bl	800316c <UART_SetConfig>
 800310c:	0003      	movs	r3, r0
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e024      	b.n	8003160 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fae1 	bl	80036e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	490d      	ldr	r1, [pc, #52]	; (8003168 <HAL_UART_Init+0xa8>)
 8003132:	400a      	ands	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	212a      	movs	r1, #42	; 0x2a
 8003142:	438a      	bics	r2, r1
 8003144:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fb79 	bl	8003850 <UART_CheckIdleState>
 800315e:	0003      	movs	r3, r0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}
 8003168:	ffffb7ff 	.word	0xffffb7ff

0800316c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	b5b0      	push	{r4, r5, r7, lr}
 800316e:	b090      	sub	sp, #64	; 0x40
 8003170:	af00      	add	r7, sp, #0
 8003172:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003174:	231a      	movs	r3, #26
 8003176:	2220      	movs	r2, #32
 8003178:	189b      	adds	r3, r3, r2
 800317a:	19db      	adds	r3, r3, r7
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	431a      	orrs	r2, r3
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	431a      	orrs	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4313      	orrs	r3, r2
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4aaf      	ldr	r2, [pc, #700]	; (800345c <UART_SetConfig+0x2f0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	430b      	orrs	r3, r1
 80031ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4aaa      	ldr	r2, [pc, #680]	; (8003460 <UART_SetConfig+0x2f4>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0018      	movs	r0, r3
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	68d9      	ldr	r1, [r3, #12]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	0003      	movs	r3, r0
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4aa4      	ldr	r2, [pc, #656]	; (8003464 <UART_SetConfig+0x2f8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031de:	4313      	orrs	r3, r2
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a9f      	ldr	r2, [pc, #636]	; (8003468 <UART_SetConfig+0x2fc>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	220f      	movs	r2, #15
 8003200:	4393      	bics	r3, r2
 8003202:	0018      	movs	r0, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	0003      	movs	r3, r0
 800320e:	430b      	orrs	r3, r1
 8003210:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a95      	ldr	r2, [pc, #596]	; (800346c <UART_SetConfig+0x300>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d131      	bne.n	8003280 <UART_SetConfig+0x114>
 800321c:	4b94      	ldr	r3, [pc, #592]	; (8003470 <UART_SetConfig+0x304>)
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2203      	movs	r2, #3
 8003222:	4013      	ands	r3, r2
 8003224:	2b03      	cmp	r3, #3
 8003226:	d01d      	beq.n	8003264 <UART_SetConfig+0xf8>
 8003228:	d823      	bhi.n	8003272 <UART_SetConfig+0x106>
 800322a:	2b02      	cmp	r3, #2
 800322c:	d00c      	beq.n	8003248 <UART_SetConfig+0xdc>
 800322e:	d820      	bhi.n	8003272 <UART_SetConfig+0x106>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <UART_SetConfig+0xce>
 8003234:	2b01      	cmp	r3, #1
 8003236:	d00e      	beq.n	8003256 <UART_SetConfig+0xea>
 8003238:	e01b      	b.n	8003272 <UART_SetConfig+0x106>
 800323a:	231b      	movs	r3, #27
 800323c:	2220      	movs	r2, #32
 800323e:	189b      	adds	r3, r3, r2
 8003240:	19db      	adds	r3, r3, r7
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e0b4      	b.n	80033b2 <UART_SetConfig+0x246>
 8003248:	231b      	movs	r3, #27
 800324a:	2220      	movs	r2, #32
 800324c:	189b      	adds	r3, r3, r2
 800324e:	19db      	adds	r3, r3, r7
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e0ad      	b.n	80033b2 <UART_SetConfig+0x246>
 8003256:	231b      	movs	r3, #27
 8003258:	2220      	movs	r2, #32
 800325a:	189b      	adds	r3, r3, r2
 800325c:	19db      	adds	r3, r3, r7
 800325e:	2204      	movs	r2, #4
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e0a6      	b.n	80033b2 <UART_SetConfig+0x246>
 8003264:	231b      	movs	r3, #27
 8003266:	2220      	movs	r2, #32
 8003268:	189b      	adds	r3, r3, r2
 800326a:	19db      	adds	r3, r3, r7
 800326c:	2208      	movs	r2, #8
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e09f      	b.n	80033b2 <UART_SetConfig+0x246>
 8003272:	231b      	movs	r3, #27
 8003274:	2220      	movs	r2, #32
 8003276:	189b      	adds	r3, r3, r2
 8003278:	19db      	adds	r3, r3, r7
 800327a:	2210      	movs	r2, #16
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e098      	b.n	80033b2 <UART_SetConfig+0x246>
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a7b      	ldr	r2, [pc, #492]	; (8003474 <UART_SetConfig+0x308>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d131      	bne.n	80032ee <UART_SetConfig+0x182>
 800328a:	4b79      	ldr	r3, [pc, #484]	; (8003470 <UART_SetConfig+0x304>)
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	220c      	movs	r2, #12
 8003290:	4013      	ands	r3, r2
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d01d      	beq.n	80032d2 <UART_SetConfig+0x166>
 8003296:	d823      	bhi.n	80032e0 <UART_SetConfig+0x174>
 8003298:	2b08      	cmp	r3, #8
 800329a:	d00c      	beq.n	80032b6 <UART_SetConfig+0x14a>
 800329c:	d820      	bhi.n	80032e0 <UART_SetConfig+0x174>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <UART_SetConfig+0x13c>
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d00e      	beq.n	80032c4 <UART_SetConfig+0x158>
 80032a6:	e01b      	b.n	80032e0 <UART_SetConfig+0x174>
 80032a8:	231b      	movs	r3, #27
 80032aa:	2220      	movs	r2, #32
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	19db      	adds	r3, r3, r7
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e07d      	b.n	80033b2 <UART_SetConfig+0x246>
 80032b6:	231b      	movs	r3, #27
 80032b8:	2220      	movs	r2, #32
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	19db      	adds	r3, r3, r7
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e076      	b.n	80033b2 <UART_SetConfig+0x246>
 80032c4:	231b      	movs	r3, #27
 80032c6:	2220      	movs	r2, #32
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	19db      	adds	r3, r3, r7
 80032cc:	2204      	movs	r2, #4
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e06f      	b.n	80033b2 <UART_SetConfig+0x246>
 80032d2:	231b      	movs	r3, #27
 80032d4:	2220      	movs	r2, #32
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	19db      	adds	r3, r3, r7
 80032da:	2208      	movs	r2, #8
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e068      	b.n	80033b2 <UART_SetConfig+0x246>
 80032e0:	231b      	movs	r3, #27
 80032e2:	2220      	movs	r2, #32
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	2210      	movs	r2, #16
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e061      	b.n	80033b2 <UART_SetConfig+0x246>
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a61      	ldr	r2, [pc, #388]	; (8003478 <UART_SetConfig+0x30c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d106      	bne.n	8003306 <UART_SetConfig+0x19a>
 80032f8:	231b      	movs	r3, #27
 80032fa:	2220      	movs	r2, #32
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e055      	b.n	80033b2 <UART_SetConfig+0x246>
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5c      	ldr	r2, [pc, #368]	; (800347c <UART_SetConfig+0x310>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d106      	bne.n	800331e <UART_SetConfig+0x1b2>
 8003310:	231b      	movs	r3, #27
 8003312:	2220      	movs	r2, #32
 8003314:	189b      	adds	r3, r3, r2
 8003316:	19db      	adds	r3, r3, r7
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e049      	b.n	80033b2 <UART_SetConfig+0x246>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a50      	ldr	r2, [pc, #320]	; (8003464 <UART_SetConfig+0x2f8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d13e      	bne.n	80033a6 <UART_SetConfig+0x23a>
 8003328:	4b51      	ldr	r3, [pc, #324]	; (8003470 <UART_SetConfig+0x304>)
 800332a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	4013      	ands	r3, r2
 8003332:	22c0      	movs	r2, #192	; 0xc0
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	4293      	cmp	r3, r2
 8003338:	d027      	beq.n	800338a <UART_SetConfig+0x21e>
 800333a:	22c0      	movs	r2, #192	; 0xc0
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	4293      	cmp	r3, r2
 8003340:	d82a      	bhi.n	8003398 <UART_SetConfig+0x22c>
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	4293      	cmp	r3, r2
 8003348:	d011      	beq.n	800336e <UART_SetConfig+0x202>
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	4293      	cmp	r3, r2
 8003350:	d822      	bhi.n	8003398 <UART_SetConfig+0x22c>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <UART_SetConfig+0x1f4>
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	00d2      	lsls	r2, r2, #3
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <UART_SetConfig+0x210>
 800335e:	e01b      	b.n	8003398 <UART_SetConfig+0x22c>
 8003360:	231b      	movs	r3, #27
 8003362:	2220      	movs	r2, #32
 8003364:	189b      	adds	r3, r3, r2
 8003366:	19db      	adds	r3, r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e021      	b.n	80033b2 <UART_SetConfig+0x246>
 800336e:	231b      	movs	r3, #27
 8003370:	2220      	movs	r2, #32
 8003372:	189b      	adds	r3, r3, r2
 8003374:	19db      	adds	r3, r3, r7
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e01a      	b.n	80033b2 <UART_SetConfig+0x246>
 800337c:	231b      	movs	r3, #27
 800337e:	2220      	movs	r2, #32
 8003380:	189b      	adds	r3, r3, r2
 8003382:	19db      	adds	r3, r3, r7
 8003384:	2204      	movs	r2, #4
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e013      	b.n	80033b2 <UART_SetConfig+0x246>
 800338a:	231b      	movs	r3, #27
 800338c:	2220      	movs	r2, #32
 800338e:	189b      	adds	r3, r3, r2
 8003390:	19db      	adds	r3, r3, r7
 8003392:	2208      	movs	r2, #8
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e00c      	b.n	80033b2 <UART_SetConfig+0x246>
 8003398:	231b      	movs	r3, #27
 800339a:	2220      	movs	r2, #32
 800339c:	189b      	adds	r3, r3, r2
 800339e:	19db      	adds	r3, r3, r7
 80033a0:	2210      	movs	r2, #16
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e005      	b.n	80033b2 <UART_SetConfig+0x246>
 80033a6:	231b      	movs	r3, #27
 80033a8:	2220      	movs	r2, #32
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	2210      	movs	r2, #16
 80033b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <UART_SetConfig+0x2f8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d000      	beq.n	80033be <UART_SetConfig+0x252>
 80033bc:	e0a9      	b.n	8003512 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033be:	231b      	movs	r3, #27
 80033c0:	2220      	movs	r2, #32
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	19db      	adds	r3, r3, r7
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d015      	beq.n	80033f8 <UART_SetConfig+0x28c>
 80033cc:	dc18      	bgt.n	8003400 <UART_SetConfig+0x294>
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00d      	beq.n	80033ee <UART_SetConfig+0x282>
 80033d2:	dc15      	bgt.n	8003400 <UART_SetConfig+0x294>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <UART_SetConfig+0x272>
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d005      	beq.n	80033e8 <UART_SetConfig+0x27c>
 80033dc:	e010      	b.n	8003400 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033de:	f7ff fca1 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 80033e2:	0003      	movs	r3, r0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e6:	e014      	b.n	8003412 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <UART_SetConfig+0x314>)
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ec:	e011      	b.n	8003412 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ee:	f7ff fc0d 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 80033f2:	0003      	movs	r3, r0
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033f6:	e00c      	b.n	8003412 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033fe:	e008      	b.n	8003412 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003404:	231a      	movs	r3, #26
 8003406:	2220      	movs	r2, #32
 8003408:	189b      	adds	r3, r3, r2
 800340a:	19db      	adds	r3, r3, r7
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
        break;
 8003410:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d100      	bne.n	800341a <UART_SetConfig+0x2ae>
 8003418:	e14b      	b.n	80036b2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <UART_SetConfig+0x318>)
 8003420:	0052      	lsls	r2, r2, #1
 8003422:	5ad3      	ldrh	r3, [r2, r3]
 8003424:	0019      	movs	r1, r3
 8003426:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003428:	f7fc fe6c 	bl	8000104 <__udivsi3>
 800342c:	0003      	movs	r3, r0
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	0013      	movs	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	189b      	adds	r3, r3, r2
 800343a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343c:	429a      	cmp	r2, r3
 800343e:	d305      	bcc.n	800344c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003448:	429a      	cmp	r2, r3
 800344a:	d91d      	bls.n	8003488 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800344c:	231a      	movs	r3, #26
 800344e:	2220      	movs	r2, #32
 8003450:	189b      	adds	r3, r3, r2
 8003452:	19db      	adds	r3, r3, r7
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e12b      	b.n	80036b2 <UART_SetConfig+0x546>
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	cfff69f3 	.word	0xcfff69f3
 8003460:	ffffcfff 	.word	0xffffcfff
 8003464:	40008000 	.word	0x40008000
 8003468:	11fff4ff 	.word	0x11fff4ff
 800346c:	40013800 	.word	0x40013800
 8003470:	40021000 	.word	0x40021000
 8003474:	40004400 	.word	0x40004400
 8003478:	40004800 	.word	0x40004800
 800347c:	40004c00 	.word	0x40004c00
 8003480:	00f42400 	.word	0x00f42400
 8003484:	080061b8 	.word	0x080061b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003494:	4b92      	ldr	r3, [pc, #584]	; (80036e0 <UART_SetConfig+0x574>)
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	5ad3      	ldrh	r3, [r2, r3]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	69b8      	ldr	r0, [r7, #24]
 80034a6:	69f9      	ldr	r1, [r7, #28]
 80034a8:	f7fc ffa2 	bl	80003f0 <__aeabi_uldivmod>
 80034ac:	0002      	movs	r2, r0
 80034ae:	000b      	movs	r3, r1
 80034b0:	0e11      	lsrs	r1, r2, #24
 80034b2:	021d      	lsls	r5, r3, #8
 80034b4:	430d      	orrs	r5, r1
 80034b6:	0214      	lsls	r4, r2, #8
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	1900      	adds	r0, r0, r4
 80034ca:	4169      	adcs	r1, r5
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f7fc ff89 	bl	80003f0 <__aeabi_uldivmod>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	0013      	movs	r3, r2
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e8:	23c0      	movs	r3, #192	; 0xc0
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d309      	bcc.n	8003504 <UART_SetConfig+0x398>
 80034f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	035b      	lsls	r3, r3, #13
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d204      	bcs.n	8003504 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	e0d6      	b.n	80036b2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003504:	231a      	movs	r3, #26
 8003506:	2220      	movs	r2, #32
 8003508:	189b      	adds	r3, r3, r2
 800350a:	19db      	adds	r3, r3, r7
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e0cf      	b.n	80036b2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	429a      	cmp	r2, r3
 800351c:	d000      	beq.n	8003520 <UART_SetConfig+0x3b4>
 800351e:	e070      	b.n	8003602 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003520:	231b      	movs	r3, #27
 8003522:	2220      	movs	r2, #32
 8003524:	189b      	adds	r3, r3, r2
 8003526:	19db      	adds	r3, r3, r7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d015      	beq.n	800355a <UART_SetConfig+0x3ee>
 800352e:	dc18      	bgt.n	8003562 <UART_SetConfig+0x3f6>
 8003530:	2b04      	cmp	r3, #4
 8003532:	d00d      	beq.n	8003550 <UART_SetConfig+0x3e4>
 8003534:	dc15      	bgt.n	8003562 <UART_SetConfig+0x3f6>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <UART_SetConfig+0x3d4>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d005      	beq.n	800354a <UART_SetConfig+0x3de>
 800353e:	e010      	b.n	8003562 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7ff fbf0 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8003544:	0003      	movs	r3, r0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003548:	e014      	b.n	8003574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800354a:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <UART_SetConfig+0x578>)
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800354e:	e011      	b.n	8003574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003550:	f7ff fb5c 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8003554:	0003      	movs	r3, r0
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003558:	e00c      	b.n	8003574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003560:	e008      	b.n	8003574 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003566:	231a      	movs	r3, #26
 8003568:	2220      	movs	r2, #32
 800356a:	189b      	adds	r3, r3, r2
 800356c:	19db      	adds	r3, r3, r7
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
        break;
 8003572:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	d100      	bne.n	800357c <UART_SetConfig+0x410>
 800357a:	e09a      	b.n	80036b2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003580:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <UART_SetConfig+0x574>)
 8003582:	0052      	lsls	r2, r2, #1
 8003584:	5ad3      	ldrh	r3, [r2, r3]
 8003586:	0019      	movs	r1, r3
 8003588:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800358a:	f7fc fdbb 	bl	8000104 <__udivsi3>
 800358e:	0003      	movs	r3, r0
 8003590:	005a      	lsls	r2, r3, #1
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	18d2      	adds	r2, r2, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0019      	movs	r1, r3
 80035a0:	0010      	movs	r0, r2
 80035a2:	f7fc fdaf 	bl	8000104 <__udivsi3>
 80035a6:	0003      	movs	r3, r0
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2b0f      	cmp	r3, #15
 80035ae:	d921      	bls.n	80035f4 <UART_SetConfig+0x488>
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	025b      	lsls	r3, r3, #9
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d21c      	bcs.n	80035f4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	b29a      	uxth	r2, r3
 80035be:	200e      	movs	r0, #14
 80035c0:	2420      	movs	r4, #32
 80035c2:	1903      	adds	r3, r0, r4
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	210f      	movs	r1, #15
 80035c8:	438a      	bics	r2, r1
 80035ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2207      	movs	r2, #7
 80035d4:	4013      	ands	r3, r2
 80035d6:	b299      	uxth	r1, r3
 80035d8:	1903      	adds	r3, r0, r4
 80035da:	19db      	adds	r3, r3, r7
 80035dc:	1902      	adds	r2, r0, r4
 80035de:	19d2      	adds	r2, r2, r7
 80035e0:	8812      	ldrh	r2, [r2, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1902      	adds	r2, r0, r4
 80035ec:	19d2      	adds	r2, r2, r7
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e05e      	b.n	80036b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80035f4:	231a      	movs	r3, #26
 80035f6:	2220      	movs	r2, #32
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e057      	b.n	80036b2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003602:	231b      	movs	r3, #27
 8003604:	2220      	movs	r2, #32
 8003606:	189b      	adds	r3, r3, r2
 8003608:	19db      	adds	r3, r3, r7
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d015      	beq.n	800363c <UART_SetConfig+0x4d0>
 8003610:	dc18      	bgt.n	8003644 <UART_SetConfig+0x4d8>
 8003612:	2b04      	cmp	r3, #4
 8003614:	d00d      	beq.n	8003632 <UART_SetConfig+0x4c6>
 8003616:	dc15      	bgt.n	8003644 <UART_SetConfig+0x4d8>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <UART_SetConfig+0x4b6>
 800361c:	2b02      	cmp	r3, #2
 800361e:	d005      	beq.n	800362c <UART_SetConfig+0x4c0>
 8003620:	e010      	b.n	8003644 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003622:	f7ff fb7f 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8003626:	0003      	movs	r3, r0
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800362a:	e014      	b.n	8003656 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <UART_SetConfig+0x578>)
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003630:	e011      	b.n	8003656 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003632:	f7ff faeb 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8003636:	0003      	movs	r3, r0
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800363a:	e00c      	b.n	8003656 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003642:	e008      	b.n	8003656 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003648:	231a      	movs	r3, #26
 800364a:	2220      	movs	r2, #32
 800364c:	189b      	adds	r3, r3, r2
 800364e:	19db      	adds	r3, r3, r7
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
        break;
 8003654:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	2b00      	cmp	r3, #0
 800365a:	d02a      	beq.n	80036b2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <UART_SetConfig+0x574>)
 8003662:	0052      	lsls	r2, r2, #1
 8003664:	5ad3      	ldrh	r3, [r2, r3]
 8003666:	0019      	movs	r1, r3
 8003668:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800366a:	f7fc fd4b 	bl	8000104 <__udivsi3>
 800366e:	0003      	movs	r3, r0
 8003670:	001a      	movs	r2, r3
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	18d2      	adds	r2, r2, r3
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	0019      	movs	r1, r3
 8003680:	0010      	movs	r0, r2
 8003682:	f7fc fd3f 	bl	8000104 <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d90a      	bls.n	80036a6 <UART_SetConfig+0x53a>
 8003690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	025b      	lsls	r3, r3, #9
 8003696:	429a      	cmp	r2, r3
 8003698:	d205      	bcs.n	80036a6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	b29a      	uxth	r2, r3
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e005      	b.n	80036b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80036a6:	231a      	movs	r3, #26
 80036a8:	2220      	movs	r2, #32
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	226a      	movs	r2, #106	; 0x6a
 80036b6:	2101      	movs	r1, #1
 80036b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	2268      	movs	r2, #104	; 0x68
 80036be:	2101      	movs	r1, #1
 80036c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	2200      	movs	r2, #0
 80036c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	2200      	movs	r2, #0
 80036cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80036ce:	231a      	movs	r3, #26
 80036d0:	2220      	movs	r2, #32
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	19db      	adds	r3, r3, r7
 80036d6:	781b      	ldrb	r3, [r3, #0]
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b010      	add	sp, #64	; 0x40
 80036de:	bdb0      	pop	{r4, r5, r7, pc}
 80036e0:	080061b8 	.word	0x080061b8
 80036e4:	00f42400 	.word	0x00f42400

080036e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	2201      	movs	r2, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	d00b      	beq.n	8003712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <UART_AdvFeatureConfig+0x144>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	d00b      	beq.n	8003734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a43      	ldr	r2, [pc, #268]	; (8003830 <UART_AdvFeatureConfig+0x148>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	2204      	movs	r2, #4
 800373a:	4013      	ands	r3, r2
 800373c:	d00b      	beq.n	8003756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <UART_AdvFeatureConfig+0x14c>)
 8003746:	4013      	ands	r3, r2
 8003748:	0019      	movs	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	2208      	movs	r2, #8
 800375c:	4013      	ands	r3, r2
 800375e:	d00b      	beq.n	8003778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a34      	ldr	r2, [pc, #208]	; (8003838 <UART_AdvFeatureConfig+0x150>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	2210      	movs	r2, #16
 800377e:	4013      	ands	r3, r2
 8003780:	d00b      	beq.n	800379a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <UART_AdvFeatureConfig+0x154>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	2220      	movs	r2, #32
 80037a0:	4013      	ands	r3, r2
 80037a2:	d00b      	beq.n	80037bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4a25      	ldr	r2, [pc, #148]	; (8003840 <UART_AdvFeatureConfig+0x158>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	4013      	ands	r3, r2
 80037c4:	d01d      	beq.n	8003802 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <UART_AdvFeatureConfig+0x15c>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	035b      	lsls	r3, r3, #13
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d10b      	bne.n	8003802 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <UART_AdvFeatureConfig+0x160>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	4013      	ands	r3, r2
 800380a:	d00b      	beq.n	8003824 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4a0e      	ldr	r2, [pc, #56]	; (800384c <UART_AdvFeatureConfig+0x164>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}
 800382c:	fffdffff 	.word	0xfffdffff
 8003830:	fffeffff 	.word	0xfffeffff
 8003834:	fffbffff 	.word	0xfffbffff
 8003838:	ffff7fff 	.word	0xffff7fff
 800383c:	ffffefff 	.word	0xffffefff
 8003840:	ffffdfff 	.word	0xffffdfff
 8003844:	ffefffff 	.word	0xffefffff
 8003848:	ff9fffff 	.word	0xff9fffff
 800384c:	fff7ffff 	.word	0xfff7ffff

08003850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af02      	add	r7, sp, #8
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2290      	movs	r2, #144	; 0x90
 800385c:	2100      	movs	r1, #0
 800385e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003860:	f7fd fb88 	bl	8000f74 <HAL_GetTick>
 8003864:	0003      	movs	r3, r0
 8003866:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2208      	movs	r2, #8
 8003870:	4013      	ands	r3, r2
 8003872:	2b08      	cmp	r3, #8
 8003874:	d10c      	bne.n	8003890 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	0391      	lsls	r1, r2, #14
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <UART_CheckIdleState+0x98>)
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	f000 f832 	bl	80038ec <UART_WaitOnFlagUntilTimeout>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d001      	beq.n	8003890 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e026      	b.n	80038de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2204      	movs	r2, #4
 8003898:	4013      	ands	r3, r2
 800389a:	2b04      	cmp	r3, #4
 800389c:	d10c      	bne.n	80038b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	03d1      	lsls	r1, r2, #15
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <UART_CheckIdleState+0x98>)
 80038a8:	9200      	str	r2, [sp, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f000 f81e 	bl	80038ec <UART_WaitOnFlagUntilTimeout>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d001      	beq.n	80038b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e012      	b.n	80038de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2288      	movs	r2, #136	; 0x88
 80038bc:	2120      	movs	r1, #32
 80038be:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	228c      	movs	r2, #140	; 0x8c
 80038c4:	2120      	movs	r1, #32
 80038c6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2284      	movs	r2, #132	; 0x84
 80038d8:	2100      	movs	r1, #0
 80038da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	01ffffff 	.word	0x01ffffff

080038ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b094      	sub	sp, #80	; 0x50
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fc:	e0a7      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003900:	3301      	adds	r3, #1
 8003902:	d100      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003904:	e0a3      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fd fb35 	bl	8000f74 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <UART_WaitOnFlagUntilTimeout+0x30>
 8003916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13f      	bne.n	800399c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391c:	f3ef 8310 	mrs	r3, PRIMASK
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
 8003926:	2301      	movs	r3, #1
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	494e      	ldr	r1, [pc, #312]	; (8003a78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800393e:	400a      	ands	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394e:	f3ef 8310 	mrs	r3, PRIMASK
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	643b      	str	r3, [r7, #64]	; 0x40
 8003958:	2301      	movs	r3, #1
 800395a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2101      	movs	r1, #1
 8003970:	438a      	bics	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2288      	movs	r2, #136	; 0x88
 8003984:	2120      	movs	r1, #32
 8003986:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	228c      	movs	r2, #140	; 0x8c
 800398c:	2120      	movs	r1, #32
 800398e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2284      	movs	r2, #132	; 0x84
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e069      	b.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2204      	movs	r2, #4
 80039a4:	4013      	ands	r3, r2
 80039a6:	d052      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	401a      	ands	r2, r3
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d148      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ca:	613b      	str	r3, [r7, #16]
  return(result);
 80039cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	2301      	movs	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4924      	ldr	r1, [pc, #144]	; (8003a78 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f8:	f3ef 8310 	mrs	r3, PRIMASK
 80039fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80039fe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a02:	2301      	movs	r3, #1
 8003a04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f383 8810 	msr	PRIMASK, r3
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2101      	movs	r1, #1
 8003a1a:	438a      	bics	r2, r1
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	f383 8810 	msr	PRIMASK, r3
}
 8003a28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2288      	movs	r2, #136	; 0x88
 8003a2e:	2120      	movs	r1, #32
 8003a30:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	228c      	movs	r2, #140	; 0x8c
 8003a36:	2120      	movs	r1, #32
 8003a38:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2290      	movs	r2, #144	; 0x90
 8003a3e:	2120      	movs	r1, #32
 8003a40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2284      	movs	r2, #132	; 0x84
 8003a46:	2100      	movs	r1, #0
 8003a48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e010      	b.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	4013      	ands	r3, r2
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	425a      	negs	r2, r3
 8003a5e:	4153      	adcs	r3, r2
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	001a      	movs	r2, r3
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d100      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x182>
 8003a6c:	e747      	b.n	80038fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b014      	add	sp, #80	; 0x50
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fffffe5f 	.word	0xfffffe5f

08003a7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2284      	movs	r2, #132	; 0x84
 8003a88:	5c9b      	ldrb	r3, [r3, r2]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e027      	b.n	8003ae2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2284      	movs	r2, #132	; 0x84
 8003a96:	2101      	movs	r1, #1
 8003a98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2288      	movs	r2, #136	; 0x88
 8003a9e:	2124      	movs	r1, #36	; 0x24
 8003aa0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <HAL_UARTEx_DisableFifoMode+0x70>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2288      	movs	r2, #136	; 0x88
 8003ad4:	2120      	movs	r1, #32
 8003ad6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2284      	movs	r2, #132	; 0x84
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b004      	add	sp, #16
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	dfffffff 	.word	0xdfffffff

08003af0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2284      	movs	r2, #132	; 0x84
 8003afe:	5c9b      	ldrb	r3, [r3, r2]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e02e      	b.n	8003b66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2284      	movs	r2, #132	; 0x84
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2288      	movs	r2, #136	; 0x88
 8003b14:	2124      	movs	r1, #36	; 0x24
 8003b16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	08d9      	lsrs	r1, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 f854 	bl	8003bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2288      	movs	r2, #136	; 0x88
 8003b58:	2120      	movs	r1, #32
 8003b5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2284      	movs	r2, #132	; 0x84
 8003b60:	2100      	movs	r1, #0
 8003b62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b004      	add	sp, #16
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2284      	movs	r2, #132	; 0x84
 8003b7e:	5c9b      	ldrb	r3, [r3, r2]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e02f      	b.n	8003be8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2284      	movs	r2, #132	; 0x84
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2288      	movs	r2, #136	; 0x88
 8003b94:	2124      	movs	r1, #36	; 0x24
 8003b96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2101      	movs	r1, #1
 8003bac:	438a      	bics	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f813 	bl	8003bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2288      	movs	r2, #136	; 0x88
 8003bda:	2120      	movs	r1, #32
 8003bdc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2284      	movs	r2, #132	; 0x84
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	f1ffffff 	.word	0xf1ffffff

08003bf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	226a      	movs	r2, #106	; 0x6a
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2268      	movs	r2, #104	; 0x68
 8003c10:	2101      	movs	r1, #1
 8003c12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c14:	e043      	b.n	8003c9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c16:	260f      	movs	r6, #15
 8003c18:	19bb      	adds	r3, r7, r6
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c1e:	200e      	movs	r0, #14
 8003c20:	183b      	adds	r3, r7, r0
 8003c22:	2208      	movs	r2, #8
 8003c24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	0e5b      	lsrs	r3, r3, #25
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	240d      	movs	r4, #13
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	2107      	movs	r1, #7
 8003c36:	400a      	ands	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	0f5b      	lsrs	r3, r3, #29
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	250c      	movs	r5, #12
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	2107      	movs	r1, #7
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	197a      	adds	r2, r7, r5
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	4914      	ldr	r1, [pc, #80]	; (8003ca8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c58:	5c8a      	ldrb	r2, [r1, r2]
 8003c5a:	435a      	muls	r2, r3
 8003c5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c5e:	197b      	adds	r3, r7, r5
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <UARTEx_SetNbDataToProcess+0xb8>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c66:	0019      	movs	r1, r3
 8003c68:	f7fc fad6 	bl	8000218 <__divsi3>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	b299      	uxth	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	226a      	movs	r2, #106	; 0x6a
 8003c74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c76:	19bb      	adds	r3, r7, r6
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	193a      	adds	r2, r7, r4
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c80:	5c8a      	ldrb	r2, [r1, r2]
 8003c82:	435a      	muls	r2, r3
 8003c84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <UARTEx_SetNbDataToProcess+0xb8>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c8e:	0019      	movs	r1, r3
 8003c90:	f7fc fac2 	bl	8000218 <__divsi3>
 8003c94:	0003      	movs	r3, r0
 8003c96:	b299      	uxth	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2268      	movs	r2, #104	; 0x68
 8003c9c:	5299      	strh	r1, [r3, r2]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b005      	add	sp, #20
 8003ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	080061d0 	.word	0x080061d0
 8003cac:	080061d8 	.word	0x080061d8

08003cb0 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	240a      	movs	r4, #10
 8003cbc:	193b      	adds	r3, r7, r4
 8003cbe:	1c0a      	adds	r2, r1, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	uint8_t status = 0;
 8003cc2:	2017      	movs	r0, #23
 8003cc4:	183b      	adds	r3, r7, r0
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003cca:	0021      	movs	r1, r4
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	2414      	movs	r4, #20
 8003cd8:	193b      	adds	r3, r7, r4
 8003cda:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	0026      	movs	r6, r4
 8003ce4:	193b      	adds	r3, r7, r4
 8003ce6:	705a      	strb	r2, [r3, #1]
	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 2, 100);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8819      	ldrh	r1, [r3, #0]
 8003cec:	0005      	movs	r5, r0
 8003cee:	197c      	adds	r4, r7, r5
 8003cf0:	19ba      	adds	r2, r7, r6
 8003cf2:	480f      	ldr	r0, [pc, #60]	; (8003d30 <RdByte+0x80>)
 8003cf4:	2364      	movs	r3, #100	; 0x64
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f7fd fc4f 	bl	800159c <HAL_I2C_Master_Transmit>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	7023      	strb	r3, [r4, #0]
	status = HAL_I2C_Master_Receive(&hi2c1, (p_platform->address), data_read, 1, 100);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8819      	ldrh	r1, [r3, #0]
 8003d06:	197c      	adds	r4, r7, r5
 8003d08:	2610      	movs	r6, #16
 8003d0a:	19ba      	adds	r2, r7, r6
 8003d0c:	4808      	ldr	r0, [pc, #32]	; (8003d30 <RdByte+0x80>)
 8003d0e:	2364      	movs	r3, #100	; 0x64
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2301      	movs	r3, #1
 8003d14:	f7fd fd4a 	bl	80017ac <HAL_I2C_Master_Receive>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	7023      	strb	r3, [r4, #0]
	*p_value = data_read[0];
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	781a      	ldrb	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");

	return status;
 8003d24:	197b      	adds	r3, r7, r5
 8003d26:	781b      	ldrb	r3, [r3, #0]
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b007      	add	sp, #28
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d30:	20000028 	.word	0x20000028

08003d34 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8003d34:	b5b0      	push	{r4, r5, r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	0008      	movs	r0, r1
 8003d3e:	0011      	movs	r1, r2
 8003d40:	1cbb      	adds	r3, r7, #2
 8003d42:	1c02      	adds	r2, r0, #0
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	1c7b      	adds	r3, r7, #1
 8003d48:	1c0a      	adds	r2, r1, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	uint8_t data_write[3];
	uint8_t status = 0;
 8003d4c:	240f      	movs	r4, #15
 8003d4e:	193b      	adds	r3, r7, r4
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8003d54:	1cbb      	adds	r3, r7, #2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	200c      	movs	r0, #12
 8003d60:	183b      	adds	r3, r7, r0
 8003d62:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8003d64:	1cbb      	adds	r3, r7, #2
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	705a      	strb	r2, [r3, #1]
	data_write[2] = value & 0xFF;
 8003d6e:	183b      	adds	r3, r7, r0
 8003d70:	1c7a      	adds	r2, r7, #1
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	709a      	strb	r2, [r3, #2]
//	status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress, I2C_MEMADD_SIZE_16BIT, &value);
	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 3, 100);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8819      	ldrh	r1, [r3, #0]
 8003d7a:	0025      	movs	r5, r4
 8003d7c:	193c      	adds	r4, r7, r4
 8003d7e:	183a      	adds	r2, r7, r0
 8003d80:	4806      	ldr	r0, [pc, #24]	; (8003d9c <WrByte+0x68>)
 8003d82:	2364      	movs	r3, #100	; 0x64
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2303      	movs	r3, #3
 8003d88:	f7fd fc08 	bl	800159c <HAL_I2C_Master_Transmit>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	7023      	strb	r3, [r4, #0]
	//uart_printf("write 1 byte\n");
	return status;
 8003d90:	197b      	adds	r3, r7, r5
 8003d92:	781b      	ldrb	r3, [r3, #0]
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b004      	add	sp, #16
 8003d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9c:	20000028 	.word	0x20000028

08003da0 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b08b      	sub	sp, #44	; 0x2c
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	200a      	movs	r0, #10
 8003dae:	183b      	adds	r3, r7, r0
 8003db0:	1c0a      	adds	r2, r1, #0
 8003db2:	801a      	strh	r2, [r3, #0]
//	uint8_t status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address)), data_write

	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, (p_platform->address), RegisterAdress,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8819      	ldrh	r1, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2617      	movs	r6, #23
 8003dbe:	19bc      	adds	r4, r7, r6
 8003dc0:	183a      	adds	r2, r7, r0
 8003dc2:	8812      	ldrh	r2, [r2, #0]
 8003dc4:	4808      	ldr	r0, [pc, #32]	; (8003de8 <WrMulti+0x48>)
 8003dc6:	4d09      	ldr	r5, [pc, #36]	; (8003dec <WrMulti+0x4c>)
 8003dc8:	9502      	str	r5, [sp, #8]
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f7fd fdf3 	bl	80019bc <HAL_I2C_Mem_Write>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	7023      	strb	r3, [r4, #0]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8003dda:	19bb      	adds	r3, r7, r6
 8003ddc:	781b      	ldrb	r3, [r3, #0]
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b007      	add	sp, #28
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000028 	.word	0x20000028
 8003dec:	0000ffff 	.word	0x0000ffff

08003df0 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	200a      	movs	r0, #10
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	1c0a      	adds	r2, r1, #0
 8003e02:	801a      	strh	r2, [r3, #0]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8003e04:	0001      	movs	r1, r0
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	2014      	movs	r0, #20
 8003e12:	183b      	adds	r3, r7, r0
 8003e14:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	183b      	adds	r3, r7, r0
 8003e1e:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Master_Transmit(&hi2c1, (p_platform->address), data_write, 2, 10);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8819      	ldrh	r1, [r3, #0]
 8003e24:	2517      	movs	r5, #23
 8003e26:	197c      	adds	r4, r7, r5
 8003e28:	183a      	adds	r2, r7, r0
 8003e2a:	4810      	ldr	r0, [pc, #64]	; (8003e6c <RdMulti+0x7c>)
 8003e2c:	230a      	movs	r3, #10
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2302      	movs	r3, #2
 8003e32:	f7fd fbb3 	bl	800159c <HAL_I2C_Master_Transmit>
 8003e36:	0003      	movs	r3, r0
 8003e38:	7023      	strb	r3, [r4, #0]
	status += HAL_I2C_Master_Receive(&hi2c1, (p_platform->address), p_values, size, 400);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8819      	ldrh	r1, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	b29c      	uxth	r4, r3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4809      	ldr	r0, [pc, #36]	; (8003e6c <RdMulti+0x7c>)
 8003e46:	23c8      	movs	r3, #200	; 0xc8
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	f7fd fcad 	bl	80017ac <HAL_I2C_Master_Receive>
 8003e52:	0003      	movs	r3, r0
 8003e54:	0019      	movs	r1, r3
 8003e56:	197b      	adds	r3, r7, r5
 8003e58:	197a      	adds	r2, r7, r5
 8003e5a:	7812      	ldrb	r2, [r2, #0]
 8003e5c:	188a      	adds	r2, r1, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
    //uart_printf("read %d bytes\n",size);

	return status;
 8003e60:	197b      	adds	r3, r7, r5
 8003e62:	781b      	ldrb	r3, [r3, #0]
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6c:	20000028 	.word	0x20000028

08003e70 <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	000a      	movs	r2, r1
 8003e7a:	1cbb      	adds	r3, r7, #2
 8003e7c:	801a      	strh	r2, [r3, #0]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e025      	b.n	8003ed0 <SwapBuffer+0x60>
	{
		tmp = (
		  buffer[i]<<24)
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	18d3      	adds	r3, r2, r3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	18cb      	adds	r3, r1, r3
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	18cb      	adds	r3, r1, r3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	3203      	adds	r2, #3
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	188a      	adds	r2, r1, r2
 8003eb2:	7812      	ldrb	r2, [r2, #0]
 8003eb4:	4313      	orrs	r3, r2
		tmp = (
 8003eb6:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	18b9      	adds	r1, r7, r2
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f002 f8fb 	bl	80060c0 <memcpy>
	for(i = 0; i < size; i = i + 4) 
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	1cbb      	adds	r3, r7, #2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d3d4      	bcc.n	8003e84 <SwapBuffer+0x14>
	}
}	
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b004      	add	sp, #16
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	/* Need to be implemented by customer. This function returns 0 if OK */
	HAL_Delay(TimeMs);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fd f849 	bl	8000f88 <HAL_Delay>
	return 0;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b002      	add	sp, #8
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	000c      	movs	r4, r1
 8003f0a:	0010      	movs	r0, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	1cfb      	adds	r3, r7, #3
 8003f10:	1c22      	adds	r2, r4, #0
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	1cbb      	adds	r3, r7, #2
 8003f16:	1c02      	adds	r2, r0, #0
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	003b      	movs	r3, r7
 8003f1c:	1c0a      	adds	r2, r1, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003f20:	230f      	movs	r3, #15
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
	uint8_t timeout = 0;
 8003f28:	230e      	movs	r3, #14
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8003f30:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22a0      	movs	r2, #160	; 0xa0
 8003f36:	00d2      	lsls	r2, r2, #3
 8003f38:	189a      	adds	r2, r3, r2
		status |= RdMulti(&(p_dev->platform), address,
 8003f3a:	1cfb      	adds	r3, r7, #3
 8003f3c:	781c      	ldrb	r4, [r3, #0]
 8003f3e:	003b      	movs	r3, r7
 8003f40:	8819      	ldrh	r1, [r3, #0]
 8003f42:	0023      	movs	r3, r4
 8003f44:	f7ff ff54 	bl	8003df0 <RdMulti>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	240f      	movs	r4, #15
 8003f4e:	193b      	adds	r3, r7, r4
 8003f50:	193a      	adds	r2, r7, r4
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	701a      	strb	r2, [r3, #0]
		status |= WaitMs(&(p_dev->platform), 10);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	210a      	movs	r1, #10
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff ffc1 	bl	8003ee4 <WaitMs>
 8003f62:	0003      	movs	r3, r0
 8003f64:	0019      	movs	r1, r3
 8003f66:	0020      	movs	r0, r4
 8003f68:	183b      	adds	r3, r7, r0
 8003f6a:	183a      	adds	r2, r7, r0
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	701a      	strb	r2, [r3, #0]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8003f72:	230e      	movs	r3, #14
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2bc7      	cmp	r3, #199	; 0xc7
 8003f7a:	d906      	bls.n	8003f8a <_vl53l5cx_poll_for_answer+0x8a>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	183a      	adds	r2, r7, r0
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	430a      	orrs	r2, r1
 8003f86:	701a      	strb	r2, [r3, #0]
			break;
 8003f88:	e028      	b.n	8003fdc <_vl53l5cx_poll_for_answer+0xdc>
		}else if((size >= (uint8_t)4) 
 8003f8a:	1cfb      	adds	r3, r7, #3
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d90c      	bls.n	8003fac <_vl53l5cx_poll_for_answer+0xac>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <_vl53l5cx_poll_for_answer+0xec>)
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	2b7e      	cmp	r3, #126	; 0x7e
 8003f9a:	d907      	bls.n	8003fac <_vl53l5cx_poll_for_answer+0xac>
		{
			status |= VL53L5CX_MCU_ERROR;
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	18bb      	adds	r3, r7, r2
 8003fa0:	18ba      	adds	r2, r7, r2
 8003fa2:	7812      	ldrb	r2, [r2, #0]
 8003fa4:	2142      	movs	r1, #66	; 0x42
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	701a      	strb	r2, [r3, #0]
			break;
 8003faa:	e017      	b.n	8003fdc <_vl53l5cx_poll_for_answer+0xdc>
		}
		else
		{
			timeout++;
 8003fac:	210e      	movs	r1, #14
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	3201      	adds	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	23a0      	movs	r3, #160	; 0xa0
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	188a      	adds	r2, r1, r2
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	2320      	movs	r3, #32
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	18ba      	adds	r2, r7, r2
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1a9      	bne.n	8003f30 <_vl53l5cx_poll_for_answer+0x30>

	return status;
 8003fdc:	230f      	movs	r3, #15
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b005      	add	sp, #20
 8003fe8:	bd90      	pop	{r4, r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	00000502 	.word	0x00000502

08003ff0 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8003ff8:	230f      	movs	r3, #15
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
   uint16_t timeout = 0;
 8004000:	230c      	movs	r3, #12
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2200      	movs	r2, #0
 8004006:	801a      	strh	r2, [r3, #0]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	250b      	movs	r5, #11
 800400c:	197a      	adds	r2, r7, r5
 800400e:	2106      	movs	r1, #6
 8004010:	0018      	movs	r0, r3
 8004012:	f7ff fe4d 	bl	8003cb0 <RdByte>
 8004016:	0003      	movs	r3, r0
 8004018:	0019      	movs	r1, r3
 800401a:	240f      	movs	r4, #15
 800401c:	193b      	adds	r3, r7, r4
 800401e:	193a      	adds	r2, r7, r4
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	701a      	strb	r2, [r3, #0]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8004026:	197b      	adds	r3, r7, r5
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	b25b      	sxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	da15      	bge.n	800405c <_vl53l5cx_poll_for_mcu_boot+0x6c>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	250a      	movs	r5, #10
 8004034:	197a      	adds	r2, r7, r5
 8004036:	2107      	movs	r1, #7
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff fe39 	bl	8003cb0 <RdByte>
 800403e:	0003      	movs	r3, r0
 8004040:	0019      	movs	r1, r3
 8004042:	193b      	adds	r3, r7, r4
 8004044:	193a      	adds	r2, r7, r4
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	701a      	strb	r2, [r3, #0]
			status |= go2_status1;
 800404c:	197b      	adds	r3, r7, r5
 800404e:	7819      	ldrb	r1, [r3, #0]
 8004050:	193b      	adds	r3, r7, r4
 8004052:	193a      	adds	r2, r7, r4
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	701a      	strb	r2, [r3, #0]
			break;
 800405a:	e019      	b.n	8004090 <_vl53l5cx_poll_for_mcu_boot+0xa0>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2101      	movs	r1, #1
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff ff3f 	bl	8003ee4 <WaitMs>
		timeout++;
 8004066:	210c      	movs	r1, #12
 8004068:	187b      	adds	r3, r7, r1
 800406a:	881a      	ldrh	r2, [r3, #0]
 800406c:	187b      	adds	r3, r7, r1
 800406e:	3201      	adds	r2, #1
 8004070:	801a      	strh	r2, [r3, #0]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8004072:	230b      	movs	r3, #11
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	001a      	movs	r2, r3
 800407a:	2301      	movs	r3, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d106      	bne.n	800408e <_vl53l5cx_poll_for_mcu_boot+0x9e>
			break;
		}

	}while (timeout < (uint16_t)500);
 8004080:	187b      	adds	r3, r7, r1
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	23fa      	movs	r3, #250	; 0xfa
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	429a      	cmp	r2, r3
 800408a:	d3bd      	bcc.n	8004008 <_vl53l5cx_poll_for_mcu_boot+0x18>
 800408c:	e000      	b.n	8004090 <_vl53l5cx_poll_for_mcu_boot+0xa0>
			break;
 800408e:	46c0      	nop			; (mov r8, r8)

   return status;
 8004090:	230f      	movs	r3, #15
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040a0 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b0ea      	sub	sp, #424	; 0x1a8
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	000a      	movs	r2, r1
 80040aa:	4be0      	ldr	r3, [pc, #896]	; (800442c <_vl53l5cx_send_offset_data+0x38c>)
 80040ac:	24d0      	movs	r4, #208	; 0xd0
 80040ae:	0064      	lsls	r4, r4, #1
 80040b0:	191b      	adds	r3, r3, r4
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80040b6:	239c      	movs	r3, #156	; 0x9c
 80040b8:	33ff      	adds	r3, #255	; 0xff
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80040c0:	4bdb      	ldr	r3, [pc, #876]	; (8004430 <_vl53l5cx_send_offset_data+0x390>)
 80040c2:	191b      	adds	r3, r3, r4
 80040c4:	19db      	adds	r3, r3, r7
 80040c6:	4adb      	ldr	r2, [pc, #876]	; (8004434 <_vl53l5cx_send_offset_data+0x394>)
 80040c8:	ca03      	ldmia	r2!, {r0, r1}
 80040ca:	c303      	stmia	r3!, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80040cc:	4bda      	ldr	r3, [pc, #872]	; (8004438 <_vl53l5cx_send_offset_data+0x398>)
 80040ce:	191b      	adds	r3, r3, r4
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	4ada      	ldr	r2, [pc, #872]	; (800443c <_vl53l5cx_send_offset_data+0x39c>)
 80040d4:	ca03      	ldmia	r2!, {r0, r1}
 80040d6:	c303      	stmia	r3!, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	22a0      	movs	r2, #160	; 0xa0
 80040dc:	00d2      	lsls	r2, r2, #3
 80040de:	1898      	adds	r0, r3, r2
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 80040e4:	22f4      	movs	r2, #244	; 0xf4
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	0019      	movs	r1, r3
 80040ea:	f001 ffe9 	bl	80060c0 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80040ee:	4bcf      	ldr	r3, [pc, #828]	; (800442c <_vl53l5cx_send_offset_data+0x38c>)
 80040f0:	191b      	adds	r3, r3, r4
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d000      	beq.n	80040fc <_vl53l5cx_send_offset_data+0x5c>
 80040fa:	e134      	b.n	8004366 <_vl53l5cx_send_offset_data+0x2c6>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	22a2      	movs	r2, #162	; 0xa2
 8004100:	00d2      	lsls	r2, r2, #3
 8004102:	189a      	adds	r2, r3, r2
 8004104:	4bca      	ldr	r3, [pc, #808]	; (8004430 <_vl53l5cx_send_offset_data+0x390>)
 8004106:	191b      	adds	r3, r3, r4
 8004108:	19db      	adds	r3, r3, r7
 800410a:	0010      	movs	r0, r2
 800410c:	0019      	movs	r1, r3
 800410e:	2308      	movs	r3, #8
 8004110:	001a      	movs	r2, r3
 8004112:	f001 ffd5 	bl	80060c0 <memcpy>
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	22a0      	movs	r2, #160	; 0xa0
 800411a:	00d2      	lsls	r2, r2, #3
 800411c:	4694      	mov	ip, r2
 800411e:	4463      	add	r3, ip
 8004120:	22f4      	movs	r2, #244	; 0xf4
 8004122:	0052      	lsls	r2, r2, #1
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff fea2 	bl	8003e70 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4ac4      	ldr	r2, [pc, #784]	; (8004440 <_vl53l5cx_send_offset_data+0x3a0>)
 8004130:	1899      	adds	r1, r3, r2
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	005a      	lsls	r2, r3, #1
 8004136:	2398      	movs	r3, #152	; 0x98
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	0018      	movs	r0, r3
 800413c:	f001 ffc0 	bl	80060c0 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	22c8      	movs	r2, #200	; 0xc8
 8004144:	00d2      	lsls	r2, r2, #3
 8004146:	1899      	adds	r1, r3, r2
 8004148:	2318      	movs	r3, #24
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	0018      	movs	r0, r3
 8004150:	f001 ffb6 	bl	80060c0 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8004154:	23cf      	movs	r3, #207	; 0xcf
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e0cb      	b.n	80042f8 <_vl53l5cx_send_offset_data+0x258>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004160:	23a0      	movs	r3, #160	; 0xa0
 8004162:	33ff      	adds	r3, #255	; 0xff
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e0b3      	b.n	80042d4 <_vl53l5cx_send_offset_data+0x234>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800416c:	20a0      	movs	r0, #160	; 0xa0
 800416e:	30ff      	adds	r0, #255	; 0xff
 8004170:	183b      	adds	r3, r7, r0
 8004172:	2200      	movs	r2, #0
 8004174:	569a      	ldrsb	r2, [r3, r2]
 8004176:	24cf      	movs	r4, #207	; 0xcf
 8004178:	0064      	lsls	r4, r4, #1
 800417a:	193b      	adds	r3, r7, r4
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b25b      	sxtb	r3, r3
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	005a      	lsls	r2, r3, #1
 8004186:	4baf      	ldr	r3, [pc, #700]	; (8004444 <_vl53l5cx_send_offset_data+0x3a4>)
 8004188:	25d0      	movs	r5, #208	; 0xd0
 800418a:	006d      	lsls	r5, r5, #1
 800418c:	195b      	adds	r3, r3, r5
 800418e:	19db      	adds	r3, r3, r7
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	58d2      	ldr	r2, [r2, r3]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8004194:	183b      	adds	r3, r7, r0
 8004196:	2100      	movs	r1, #0
 8004198:	5659      	ldrsb	r1, [r3, r1]
 800419a:	193b      	adds	r3, r7, r4
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b25b      	sxtb	r3, r3
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	18cb      	adds	r3, r1, r3
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	4ba6      	ldr	r3, [pc, #664]	; (8004444 <_vl53l5cx_send_offset_data+0x3a4>)
 80041aa:	195b      	adds	r3, r3, r5
 80041ac:	19db      	adds	r3, r3, r7
 80041ae:	0089      	lsls	r1, r1, #2
 80041b0:	58cb      	ldr	r3, [r1, r3]
 80041b2:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	2100      	movs	r1, #0
 80041b8:	5659      	ldrsb	r1, [r3, r1]
 80041ba:	193b      	adds	r3, r7, r4
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b25b      	sxtb	r3, r3
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	18cb      	adds	r3, r1, r3
 80041c4:	3304      	adds	r3, #4
 80041c6:	0059      	lsls	r1, r3, #1
 80041c8:	4b9e      	ldr	r3, [pc, #632]	; (8004444 <_vl53l5cx_send_offset_data+0x3a4>)
 80041ca:	195b      	adds	r3, r3, r5
 80041cc:	19db      	adds	r3, r3, r7
 80041ce:	0089      	lsls	r1, r1, #2
 80041d0:	58cb      	ldr	r3, [r1, r3]
 80041d2:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80041d4:	183b      	adds	r3, r7, r0
 80041d6:	2100      	movs	r1, #0
 80041d8:	5659      	ldrsb	r1, [r3, r1]
 80041da:	193b      	adds	r3, r7, r4
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	18cb      	adds	r3, r1, r3
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	3309      	adds	r3, #9
 80041e8:	0019      	movs	r1, r3
 80041ea:	4b96      	ldr	r3, [pc, #600]	; (8004444 <_vl53l5cx_send_offset_data+0x3a4>)
 80041ec:	195b      	adds	r3, r3, r5
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	0089      	lsls	r1, r1, #2
 80041f2:	58cb      	ldr	r3, [r1, r3]
 80041f4:	18d3      	adds	r3, r2, r3
				signal_grid[i+(4*j)] =
 80041f6:	183a      	adds	r2, r7, r0
 80041f8:	2100      	movs	r1, #0
 80041fa:	5651      	ldrsb	r1, [r2, r1]
 80041fc:	193a      	adds	r2, r7, r4
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	b252      	sxtb	r2, r2
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	188a      	adds	r2, r1, r2
                                  /(uint32_t)4;
 8004206:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8004208:	4b8e      	ldr	r3, [pc, #568]	; (8004444 <_vl53l5cx_send_offset_data+0x3a4>)
 800420a:	195b      	adds	r3, r3, r5
 800420c:	19db      	adds	r3, r3, r7
 800420e:	0092      	lsls	r2, r2, #2
 8004210:	50d1      	str	r1, [r2, r3]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8004212:	183b      	adds	r3, r7, r0
 8004214:	2200      	movs	r2, #0
 8004216:	569a      	ldrsb	r2, [r3, r2]
 8004218:	193b      	adds	r3, r7, r4
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b25b      	sxtb	r3, r3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	18d3      	adds	r3, r2, r3
 8004222:	005a      	lsls	r2, r3, #1
 8004224:	4b88      	ldr	r3, [pc, #544]	; (8004448 <_vl53l5cx_send_offset_data+0x3a8>)
 8004226:	195b      	adds	r3, r3, r5
 8004228:	19db      	adds	r3, r3, r7
 800422a:	0052      	lsls	r2, r2, #1
 800422c:	5ed3      	ldrsh	r3, [r2, r3]
 800422e:	0019      	movs	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8004230:	183b      	adds	r3, r7, r0
 8004232:	2200      	movs	r2, #0
 8004234:	569a      	ldrsb	r2, [r3, r2]
 8004236:	193b      	adds	r3, r7, r4
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	4b80      	ldr	r3, [pc, #512]	; (8004448 <_vl53l5cx_send_offset_data+0x3a8>)
 8004246:	195b      	adds	r3, r3, r5
 8004248:	19db      	adds	r3, r3, r7
 800424a:	0052      	lsls	r2, r2, #1
 800424c:	5ed3      	ldrsh	r3, [r2, r3]
 800424e:	18cb      	adds	r3, r1, r3
				+ range_grid[(2*i)+(16*j)+8]
 8004250:	183a      	adds	r2, r7, r0
 8004252:	2100      	movs	r1, #0
 8004254:	5651      	ldrsb	r1, [r2, r1]
 8004256:	193a      	adds	r2, r7, r4
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	b252      	sxtb	r2, r2
 800425c:	00d2      	lsls	r2, r2, #3
 800425e:	188a      	adds	r2, r1, r2
 8004260:	3204      	adds	r2, #4
 8004262:	0051      	lsls	r1, r2, #1
 8004264:	4a78      	ldr	r2, [pc, #480]	; (8004448 <_vl53l5cx_send_offset_data+0x3a8>)
 8004266:	1952      	adds	r2, r2, r5
 8004268:	19d2      	adds	r2, r2, r7
 800426a:	0049      	lsls	r1, r1, #1
 800426c:	5e8a      	ldrsh	r2, [r1, r2]
 800426e:	189b      	adds	r3, r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8004270:	183a      	adds	r2, r7, r0
 8004272:	2100      	movs	r1, #0
 8004274:	5651      	ldrsb	r1, [r2, r1]
 8004276:	193a      	adds	r2, r7, r4
 8004278:	7812      	ldrb	r2, [r2, #0]
 800427a:	b252      	sxtb	r2, r2
 800427c:	00d2      	lsls	r2, r2, #3
 800427e:	188a      	adds	r2, r1, r2
 8004280:	0052      	lsls	r2, r2, #1
 8004282:	3209      	adds	r2, #9
 8004284:	0011      	movs	r1, r2
 8004286:	4a70      	ldr	r2, [pc, #448]	; (8004448 <_vl53l5cx_send_offset_data+0x3a8>)
 8004288:	1952      	adds	r2, r2, r5
 800428a:	19d2      	adds	r2, r2, r7
 800428c:	0049      	lsls	r1, r1, #1
 800428e:	5e8a      	ldrsh	r2, [r1, r2]
 8004290:	189b      	adds	r3, r3, r2
                                  /(int16_t)4;
 8004292:	2b00      	cmp	r3, #0
 8004294:	da00      	bge.n	8004298 <_vl53l5cx_send_offset_data+0x1f8>
 8004296:	3303      	adds	r3, #3
 8004298:	109b      	asrs	r3, r3, #2
 800429a:	0019      	movs	r1, r3
				range_grid[i+(4*j)] =
 800429c:	20a0      	movs	r0, #160	; 0xa0
 800429e:	30ff      	adds	r0, #255	; 0xff
 80042a0:	183b      	adds	r3, r7, r0
 80042a2:	2200      	movs	r2, #0
 80042a4:	569a      	ldrsb	r2, [r3, r2]
 80042a6:	23cf      	movs	r3, #207	; 0xcf
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	18d2      	adds	r2, r2, r3
 80042b4:	b209      	sxth	r1, r1
 80042b6:	4b64      	ldr	r3, [pc, #400]	; (8004448 <_vl53l5cx_send_offset_data+0x3a8>)
 80042b8:	24d0      	movs	r4, #208	; 0xd0
 80042ba:	0064      	lsls	r4, r4, #1
 80042bc:	191b      	adds	r3, r3, r4
 80042be:	19db      	adds	r3, r3, r7
 80042c0:	0052      	lsls	r2, r2, #1
 80042c2:	52d1      	strh	r1, [r2, r3]
			for (i = 0; i < (int8_t)4 ; i++)
 80042c4:	183b      	adds	r3, r7, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	23a0      	movs	r3, #160	; 0xa0
 80042d6:	33ff      	adds	r3, #255	; 0xff
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b25b      	sxtb	r3, r3
 80042de:	2b03      	cmp	r3, #3
 80042e0:	dc00      	bgt.n	80042e4 <_vl53l5cx_send_offset_data+0x244>
 80042e2:	e743      	b.n	800416c <_vl53l5cx_send_offset_data+0xcc>
		for (j = 0; j < (int8_t)4; j++)
 80042e4:	21cf      	movs	r1, #207	; 0xcf
 80042e6:	0049      	lsls	r1, r1, #1
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	23cf      	movs	r3, #207	; 0xcf
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b25b      	sxtb	r3, r3
 8004302:	2b03      	cmp	r3, #3
 8004304:	dc00      	bgt.n	8004308 <_vl53l5cx_send_offset_data+0x268>
 8004306:	e72b      	b.n	8004160 <_vl53l5cx_send_offset_data+0xc0>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8004308:	2418      	movs	r4, #24
 800430a:	193b      	adds	r3, r7, r4
 800430c:	3320      	adds	r3, #32
 800430e:	2260      	movs	r2, #96	; 0x60
 8004310:	2100      	movs	r1, #0
 8004312:	0018      	movs	r0, r3
 8004314:	f001 fea8 	bl	8006068 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8004318:	2598      	movs	r5, #152	; 0x98
 800431a:	197b      	adds	r3, r7, r5
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	22c0      	movs	r2, #192	; 0xc0
 8004320:	2100      	movs	r1, #0
 8004322:	0018      	movs	r0, r3
 8004324:	f001 fea0 	bl	8006068 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a45      	ldr	r2, [pc, #276]	; (8004440 <_vl53l5cx_send_offset_data+0x3a0>)
 800432c:	4694      	mov	ip, r2
 800432e:	4463      	add	r3, ip
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	1979      	adds	r1, r7, r5
 8004336:	0018      	movs	r0, r3
 8004338:	f001 fec2 	bl	80060c0 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	22c8      	movs	r2, #200	; 0xc8
 8004340:	00d2      	lsls	r2, r2, #3
 8004342:	4694      	mov	ip, r2
 8004344:	4463      	add	r3, ip
 8004346:	1939      	adds	r1, r7, r4
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	0018      	movs	r0, r3
 800434c:	f001 feb8 	bl	80060c0 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	22a0      	movs	r2, #160	; 0xa0
 8004354:	00d2      	lsls	r2, r2, #3
 8004356:	4694      	mov	ip, r2
 8004358:	4463      	add	r3, ip
 800435a:	22f4      	movs	r2, #244	; 0xf4
 800435c:	0052      	lsls	r2, r2, #1
 800435e:	0011      	movs	r1, r2
 8004360:	0018      	movs	r0, r3
 8004362:	f7ff fd85 	bl	8003e70 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8004366:	23ce      	movs	r3, #206	; 0xce
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2200      	movs	r2, #0
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	e019      	b.n	80043a6 <_vl53l5cx_send_offset_data+0x306>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8004372:	24ce      	movs	r4, #206	; 0xce
 8004374:	0064      	lsls	r4, r4, #1
 8004376:	193b      	adds	r3, r7, r4
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	0019      	movs	r1, r3
 800437e:	193b      	adds	r3, r7, r4
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	23a0      	movs	r3, #160	; 0xa0
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1841      	adds	r1, r0, r1
 800438a:	18cb      	adds	r3, r1, r3
 800438c:	7818      	ldrb	r0, [r3, #0]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	23a0      	movs	r3, #160	; 0xa0
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	188a      	adds	r2, r1, r2
 8004396:	18d3      	adds	r3, r2, r3
 8004398:	1c02      	adds	r2, r0, #0
 800439a:	701a      	strb	r2, [r3, #0]
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800439c:	193b      	adds	r3, r7, r4
 800439e:	881a      	ldrh	r2, [r3, #0]
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	3201      	adds	r2, #1
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	23ce      	movs	r3, #206	; 0xce
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	23f2      	movs	r3, #242	; 0xf2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3dd      	bcc.n	8004372 <_vl53l5cx_send_offset_data+0x2d2>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	22dc      	movs	r2, #220	; 0xdc
 80043ba:	00d2      	lsls	r2, r2, #3
 80043bc:	189a      	adds	r2, r3, r2
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <_vl53l5cx_send_offset_data+0x398>)
 80043c0:	21d0      	movs	r1, #208	; 0xd0
 80043c2:	0049      	lsls	r1, r1, #1
 80043c4:	185b      	adds	r3, r3, r1
 80043c6:	19db      	adds	r3, r3, r7
 80043c8:	0010      	movs	r0, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	2308      	movs	r3, #8
 80043ce:	001a      	movs	r2, r3
 80043d0:	f001 fe76 	bl	80060c0 <memcpy>
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	22a0      	movs	r2, #160	; 0xa0
 80043da:	00d2      	lsls	r2, r2, #3
 80043dc:	189a      	adds	r2, r3, r2
 80043de:	23f4      	movs	r3, #244	; 0xf4
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	491a      	ldr	r1, [pc, #104]	; (800444c <_vl53l5cx_send_offset_data+0x3ac>)
 80043e4:	f7ff fcdc 	bl	8003da0 <WrMulti>
 80043e8:	0003      	movs	r3, r0
 80043ea:	0019      	movs	r1, r3
 80043ec:	249c      	movs	r4, #156	; 0x9c
 80043ee:	34ff      	adds	r4, #255	; 0xff
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	193a      	adds	r2, r7, r4
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	701a      	strb	r2, [r3, #0]
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80043fa:	23b0      	movs	r3, #176	; 0xb0
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	2203      	movs	r2, #3
 8004402:	9201      	str	r2, [sp, #4]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	9200      	str	r2, [sp, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	2104      	movs	r1, #4
 800440c:	f7ff fd78 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8004410:	0003      	movs	r3, r0
 8004412:	0019      	movs	r1, r3
 8004414:	193b      	adds	r3, r7, r4
 8004416:	193a      	adds	r2, r7, r4
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800441e:	193b      	adds	r3, r7, r4
 8004420:	781b      	ldrb	r3, [r3, #0]
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b068      	add	sp, #416	; 0x1a0
 8004428:	bdb0      	pop	{r4, r5, r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	fffffe63 	.word	0xfffffe63
 8004430:	fffffe70 	.word	0xfffffe70
 8004434:	080060ec 	.word	0x080060ec
 8004438:	fffffe68 	.word	0xfffffe68
 800443c:	080060f4 	.word	0x080060f4
 8004440:	0000053c 	.word	0x0000053c
 8004444:	fffffef8 	.word	0xfffffef8
 8004448:	fffffe78 	.word	0xfffffe78
 800444c:	00002e18 	.word	0x00002e18

08004450 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b0cb      	sub	sp, #300	; 0x12c
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	000a      	movs	r2, r1
 800445a:	4b9b      	ldr	r3, [pc, #620]	; (80046c8 <_vl53l5cx_send_xtalk_data+0x278>)
 800445c:	2490      	movs	r4, #144	; 0x90
 800445e:	0064      	lsls	r4, r4, #1
 8004460:	191b      	adds	r3, r3, r4
 8004462:	19db      	adds	r3, r3, r7
 8004464:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004466:	231e      	movs	r3, #30
 8004468:	33ff      	adds	r3, #255	; 0xff
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8004470:	258a      	movs	r5, #138	; 0x8a
 8004472:	006d      	lsls	r5, r5, #1
 8004474:	197b      	adds	r3, r7, r5
 8004476:	4a95      	ldr	r2, [pc, #596]	; (80046cc <_vl53l5cx_send_xtalk_data+0x27c>)
 8004478:	ca03      	ldmia	r2!, {r0, r1}
 800447a:	c303      	stmia	r3!, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800447c:	2686      	movs	r6, #134	; 0x86
 800447e:	0076      	lsls	r6, r6, #1
 8004480:	19bb      	adds	r3, r7, r6
 8004482:	4a93      	ldr	r2, [pc, #588]	; (80046d0 <_vl53l5cx_send_xtalk_data+0x280>)
 8004484:	ca03      	ldmia	r2!, {r0, r1}
 8004486:	c303      	stmia	r3!, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8004488:	2384      	movs	r3, #132	; 0x84
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	4a91      	ldr	r2, [pc, #580]	; (80046d4 <_vl53l5cx_send_xtalk_data+0x284>)
 8004490:	601a      	str	r2, [r3, #0]
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	22a0      	movs	r2, #160	; 0xa0
 8004496:	00d2      	lsls	r2, r2, #3
 8004498:	1898      	adds	r0, r3, r2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	33f9      	adds	r3, #249	; 0xf9
 800449e:	33ff      	adds	r3, #255	; 0xff
 80044a0:	22c2      	movs	r2, #194	; 0xc2
 80044a2:	0092      	lsls	r2, r2, #2
 80044a4:	0019      	movs	r1, r3
 80044a6:	f001 fe0b 	bl	80060c0 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 80044aa:	4b87      	ldr	r3, [pc, #540]	; (80046c8 <_vl53l5cx_send_xtalk_data+0x278>)
 80044ac:	191b      	adds	r3, r3, r4
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d000      	beq.n	80044b8 <_vl53l5cx_send_xtalk_data+0x68>
 80044b6:	e0dc      	b.n	8004672 <_vl53l5cx_send_xtalk_data+0x222>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	22a1      	movs	r2, #161	; 0xa1
 80044bc:	00d2      	lsls	r2, r2, #3
 80044be:	189a      	adds	r2, r3, r2
 80044c0:	197b      	adds	r3, r7, r5
 80044c2:	0010      	movs	r0, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	2308      	movs	r3, #8
 80044c8:	001a      	movs	r2, r3
 80044ca:	f001 fdf9 	bl	80060c0 <memcpy>
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	22a4      	movs	r2, #164	; 0xa4
 80044d2:	00d2      	lsls	r2, r2, #3
 80044d4:	189a      	adds	r2, r3, r2
 80044d6:	19bb      	adds	r3, r7, r6
 80044d8:	0010      	movs	r0, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	2308      	movs	r3, #8
 80044de:	001a      	movs	r2, r3
 80044e0:	f001 fdee 	bl	80060c0 <memcpy>
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	22a0      	movs	r2, #160	; 0xa0
 80044e8:	00d2      	lsls	r2, r2, #3
 80044ea:	4694      	mov	ip, r2
 80044ec:	4463      	add	r3, ip
 80044ee:	22c2      	movs	r2, #194	; 0xc2
 80044f0:	0092      	lsls	r2, r2, #2
 80044f2:	0011      	movs	r1, r2
 80044f4:	0018      	movs	r0, r3
 80044f6:	f7ff fcbb 	bl	8003e70 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a76      	ldr	r2, [pc, #472]	; (80046d8 <_vl53l5cx_send_xtalk_data+0x288>)
 80044fe:	1899      	adds	r1, r3, r2
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	005a      	lsls	r2, r3, #1
 8004504:	2308      	movs	r3, #8
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	0018      	movs	r0, r3
 800450a:	f001 fdd9 	bl	80060c0 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800450e:	238f      	movs	r3, #143	; 0x8f
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e071      	b.n	80045fe <_vl53l5cx_send_xtalk_data+0x1ae>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800451a:	2320      	movs	r3, #32
 800451c:	33ff      	adds	r3, #255	; 0xff
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	e05a      	b.n	80045dc <_vl53l5cx_send_xtalk_data+0x18c>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8004526:	2020      	movs	r0, #32
 8004528:	30ff      	adds	r0, #255	; 0xff
 800452a:	183b      	adds	r3, r7, r0
 800452c:	2200      	movs	r2, #0
 800452e:	569a      	ldrsb	r2, [r3, r2]
 8004530:	248f      	movs	r4, #143	; 0x8f
 8004532:	0064      	lsls	r4, r4, #1
 8004534:	193b      	adds	r3, r7, r4
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	b25b      	sxtb	r3, r3
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	005a      	lsls	r2, r3, #1
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <_vl53l5cx_send_xtalk_data+0x28c>)
 8004542:	2590      	movs	r5, #144	; 0x90
 8004544:	006d      	lsls	r5, r5, #1
 8004546:	195b      	adds	r3, r3, r5
 8004548:	19db      	adds	r3, r3, r7
 800454a:	0092      	lsls	r2, r2, #2
 800454c:	58d2      	ldr	r2, [r2, r3]
				+ signal_grid[(2*i)+(16*j)+1]
 800454e:	183b      	adds	r3, r7, r0
 8004550:	2100      	movs	r1, #0
 8004552:	5659      	ldrsb	r1, [r3, r1]
 8004554:	193b      	adds	r3, r7, r4
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	b25b      	sxtb	r3, r3
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	18cb      	adds	r3, r1, r3
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	1c59      	adds	r1, r3, #1
 8004562:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <_vl53l5cx_send_xtalk_data+0x28c>)
 8004564:	195b      	adds	r3, r3, r5
 8004566:	19db      	adds	r3, r3, r7
 8004568:	0089      	lsls	r1, r1, #2
 800456a:	58cb      	ldr	r3, [r1, r3]
 800456c:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800456e:	183b      	adds	r3, r7, r0
 8004570:	2100      	movs	r1, #0
 8004572:	5659      	ldrsb	r1, [r3, r1]
 8004574:	193b      	adds	r3, r7, r4
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b25b      	sxtb	r3, r3
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	18cb      	adds	r3, r1, r3
 800457e:	3304      	adds	r3, #4
 8004580:	0059      	lsls	r1, r3, #1
 8004582:	4b56      	ldr	r3, [pc, #344]	; (80046dc <_vl53l5cx_send_xtalk_data+0x28c>)
 8004584:	195b      	adds	r3, r3, r5
 8004586:	19db      	adds	r3, r3, r7
 8004588:	0089      	lsls	r1, r1, #2
 800458a:	58cb      	ldr	r3, [r1, r3]
 800458c:	18d2      	adds	r2, r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800458e:	183b      	adds	r3, r7, r0
 8004590:	2100      	movs	r1, #0
 8004592:	5659      	ldrsb	r1, [r3, r1]
 8004594:	193b      	adds	r3, r7, r4
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b25b      	sxtb	r3, r3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	18cb      	adds	r3, r1, r3
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	3309      	adds	r3, #9
 80045a2:	0019      	movs	r1, r3
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <_vl53l5cx_send_xtalk_data+0x28c>)
 80045a6:	195b      	adds	r3, r3, r5
 80045a8:	19db      	adds	r3, r3, r7
 80045aa:	0089      	lsls	r1, r1, #2
 80045ac:	58cb      	ldr	r3, [r1, r3]
 80045ae:	18d3      	adds	r3, r2, r3
				signal_grid[i+(4*j)] =
 80045b0:	183a      	adds	r2, r7, r0
 80045b2:	2100      	movs	r1, #0
 80045b4:	5651      	ldrsb	r1, [r2, r1]
 80045b6:	193a      	adds	r2, r7, r4
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	b252      	sxtb	r2, r2
 80045bc:	0092      	lsls	r2, r2, #2
 80045be:	188a      	adds	r2, r1, r2
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80045c0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80045c2:	4b46      	ldr	r3, [pc, #280]	; (80046dc <_vl53l5cx_send_xtalk_data+0x28c>)
 80045c4:	195b      	adds	r3, r3, r5
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	50d1      	str	r1, [r2, r3]
			for (i = 0; i < (int8_t)4 ; i++)
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	183b      	adds	r3, r7, r0
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	2320      	movs	r3, #32
 80045de:	33ff      	adds	r3, #255	; 0xff
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b25b      	sxtb	r3, r3
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	dd9d      	ble.n	8004526 <_vl53l5cx_send_xtalk_data+0xd6>
		for (j = 0; j < (int8_t)4; j++)
 80045ea:	218f      	movs	r1, #143	; 0x8f
 80045ec:	0049      	lsls	r1, r1, #1
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	238f      	movs	r3, #143	; 0x8f
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	b25b      	sxtb	r3, r3
 8004608:	2b03      	cmp	r3, #3
 800460a:	dd86      	ble.n	800451a <_vl53l5cx_send_xtalk_data+0xca>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800460c:	2408      	movs	r4, #8
 800460e:	193b      	adds	r3, r7, r4
 8004610:	3340      	adds	r3, #64	; 0x40
 8004612:	22c0      	movs	r2, #192	; 0xc0
 8004614:	2100      	movs	r1, #0
 8004616:	0018      	movs	r0, r3
 8004618:	f001 fd26 	bl	8006068 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a2e      	ldr	r2, [pc, #184]	; (80046d8 <_vl53l5cx_send_xtalk_data+0x288>)
 8004620:	4694      	mov	ip, r2
 8004622:	4463      	add	r3, ip
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	0052      	lsls	r2, r2, #1
 8004628:	1939      	adds	r1, r7, r4
 800462a:	0018      	movs	r0, r3
 800462c:	f001 fd48 	bl	80060c0 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	22a0      	movs	r2, #160	; 0xa0
 8004634:	00d2      	lsls	r2, r2, #3
 8004636:	4694      	mov	ip, r2
 8004638:	4463      	add	r3, ip
 800463a:	22c2      	movs	r2, #194	; 0xc2
 800463c:	0092      	lsls	r2, r2, #2
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f7ff fc15 	bl	8003e70 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <_vl53l5cx_send_xtalk_data+0x290>)
 800464a:	189a      	adds	r2, r3, r2
 800464c:	2384      	movs	r3, #132	; 0x84
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	0010      	movs	r0, r2
 8004654:	0019      	movs	r1, r3
 8004656:	2304      	movs	r3, #4
 8004658:	001a      	movs	r2, r3
 800465a:	f001 fd31 	bl	80060c0 <memcpy>
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	22af      	movs	r2, #175	; 0xaf
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	4694      	mov	ip, r2
 8004666:	4463      	add	r3, ip
 8004668:	2204      	movs	r2, #4
 800466a:	2100      	movs	r1, #0
 800466c:	0018      	movs	r0, r3
 800466e:	f001 fcfb 	bl	8006068 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8004672:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	22a0      	movs	r2, #160	; 0xa0
 8004678:	00d2      	lsls	r2, r2, #3
 800467a:	189a      	adds	r2, r3, r2
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800467c:	23c2      	movs	r3, #194	; 0xc2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4918      	ldr	r1, [pc, #96]	; (80046e4 <_vl53l5cx_send_xtalk_data+0x294>)
 8004682:	f7ff fb8d 	bl	8003da0 <WrMulti>
 8004686:	0003      	movs	r3, r0
 8004688:	0019      	movs	r1, r3
 800468a:	241e      	movs	r4, #30
 800468c:	34ff      	adds	r4, #255	; 0xff
 800468e:	193b      	adds	r3, r7, r4
 8004690:	193a      	adds	r2, r7, r4
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	701a      	strb	r2, [r3, #0]
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004698:	23b0      	movs	r3, #176	; 0xb0
 800469a:	019b      	lsls	r3, r3, #6
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	2203      	movs	r2, #3
 80046a0:	9201      	str	r2, [sp, #4]
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	9200      	str	r2, [sp, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	2104      	movs	r1, #4
 80046aa:	f7ff fc29 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 80046ae:	0003      	movs	r3, r0
 80046b0:	0019      	movs	r1, r3
 80046b2:	193b      	adds	r3, r7, r4
 80046b4:	193a      	adds	r2, r7, r4
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80046bc:	193b      	adds	r3, r7, r4
 80046be:	781b      	ldrb	r3, [r3, #0]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b049      	add	sp, #292	; 0x124
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c8:	fffffee3 	.word	0xfffffee3
 80046cc:	080060fc 	.word	0x080060fc
 80046d0:	08006104 	.word	0x08006104
 80046d4:	0001fca0 	.word	0x0001fca0
 80046d8:	00000534 	.word	0x00000534
 80046dc:	fffffee8 	.word	0xfffffee8
 80046e0:	00000634 	.word	0x00000634
 80046e4:	00002cf8 	.word	0x00002cf8

080046e8 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80046f0:	2417      	movs	r4, #23
 80046f2:	193b      	adds	r3, r7, r4
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80046f8:	2310      	movs	r3, #16
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	4afd      	ldr	r2, [pc, #1012]	; (8004af4 <vl53l5cx_init+0x40c>)
 80046fe:	601a      	str	r2, [r3, #0]
	uint32_t single_range = 0x01;
 8004700:	2301      	movs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4afc      	ldr	r2, [pc, #1008]	; (8004af8 <vl53l5cx_init+0x410>)
 8004708:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4afb      	ldr	r2, [pc, #1004]	; (8004afc <vl53l5cx_init+0x414>)
 800470e:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4afb      	ldr	r2, [pc, #1004]	; (8004b00 <vl53l5cx_init+0x418>)
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	49fa      	ldr	r1, [pc, #1000]	; (8004b04 <vl53l5cx_init+0x41c>)
 800471c:	2200      	movs	r2, #0
 800471e:	0018      	movs	r0, r3
 8004720:	f7ff fb08 	bl	8003d34 <WrByte>
 8004724:	0003      	movs	r3, r0
 8004726:	0019      	movs	r1, r3
 8004728:	193b      	adds	r3, r7, r4
 800472a:	193a      	adds	r2, r7, r4
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2204      	movs	r2, #4
 8004736:	2109      	movs	r1, #9
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff fafb 	bl	8003d34 <WrByte>
 800473e:	0003      	movs	r3, r0
 8004740:	0019      	movs	r1, r3
 8004742:	193b      	adds	r3, r7, r4
 8004744:	193a      	adds	r2, r7, r4
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	210f      	movs	r1, #15
 8004752:	0018      	movs	r0, r3
 8004754:	f7ff faee 	bl	8003d34 <WrByte>
 8004758:	0003      	movs	r3, r0
 800475a:	0019      	movs	r1, r3
 800475c:	193b      	adds	r3, r7, r4
 800475e:	193a      	adds	r2, r7, r4
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	210a      	movs	r1, #10
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff fae1 	bl	8003d34 <WrByte>
 8004772:	0003      	movs	r3, r0
 8004774:	0019      	movs	r1, r3
 8004776:	193b      	adds	r3, r7, r4
 8004778:	193a      	adds	r2, r7, r4
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2516      	movs	r5, #22
 8004784:	197a      	adds	r2, r7, r5
 8004786:	49df      	ldr	r1, [pc, #892]	; (8004b04 <vl53l5cx_init+0x41c>)
 8004788:	0018      	movs	r0, r3
 800478a:	f7ff fa91 	bl	8003cb0 <RdByte>
 800478e:	0003      	movs	r3, r0
 8004790:	0019      	movs	r1, r3
 8004792:	193b      	adds	r3, r7, r4
 8004794:	193a      	adds	r2, r7, r4
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	210c      	movs	r1, #12
 80047a2:	0018      	movs	r0, r3
 80047a4:	f7ff fac6 	bl	8003d34 <WrByte>
 80047a8:	0003      	movs	r3, r0
 80047aa:	0019      	movs	r1, r3
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	193a      	adds	r2, r7, r4
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	701a      	strb	r2, [r3, #0]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	32ff      	adds	r2, #255	; 0xff
 80047bc:	0011      	movs	r1, r2
 80047be:	2200      	movs	r2, #0
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff fab7 	bl	8003d34 <WrByte>
 80047c6:	0003      	movs	r3, r0
 80047c8:	0019      	movs	r1, r3
 80047ca:	193b      	adds	r3, r7, r4
 80047cc:	193a      	adds	r2, r7, r4
 80047ce:	7812      	ldrb	r2, [r2, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2281      	movs	r2, #129	; 0x81
 80047d8:	0051      	lsls	r1, r2, #1
 80047da:	2200      	movs	r2, #0
 80047dc:	0018      	movs	r0, r3
 80047de:	f7ff faa9 	bl	8003d34 <WrByte>
 80047e2:	0003      	movs	r3, r0
 80047e4:	0019      	movs	r1, r3
 80047e6:	193b      	adds	r3, r7, r4
 80047e8:	193a      	adds	r2, r7, r4
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2285      	movs	r2, #133	; 0x85
 80047f4:	0051      	lsls	r1, r2, #1
 80047f6:	2201      	movs	r2, #1
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff fa9b 	bl	8003d34 <WrByte>
 80047fe:	0003      	movs	r3, r0
 8004800:	0019      	movs	r1, r3
 8004802:	193b      	adds	r3, r7, r4
 8004804:	193a      	adds	r2, r7, r4
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	49be      	ldr	r1, [pc, #760]	; (8004b08 <vl53l5cx_init+0x420>)
 8004810:	2201      	movs	r2, #1
 8004812:	0018      	movs	r0, r3
 8004814:	f7ff fa8e 	bl	8003d34 <WrByte>
 8004818:	0003      	movs	r3, r0
 800481a:	0019      	movs	r1, r3
 800481c:	193b      	adds	r3, r7, r4
 800481e:	193a      	adds	r2, r7, r4
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	49b7      	ldr	r1, [pc, #732]	; (8004b08 <vl53l5cx_init+0x420>)
 800482a:	2200      	movs	r2, #0
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff fa81 	bl	8003d34 <WrByte>
 8004832:	0003      	movs	r3, r0
 8004834:	0019      	movs	r1, r3
 8004836:	193b      	adds	r3, r7, r4
 8004838:	193a      	adds	r2, r7, r4
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2285      	movs	r2, #133	; 0x85
 8004844:	0051      	lsls	r1, r2, #1
 8004846:	2203      	movs	r2, #3
 8004848:	0018      	movs	r0, r3
 800484a:	f7ff fa73 	bl	8003d34 <WrByte>
 800484e:	0003      	movs	r3, r0
 8004850:	0019      	movs	r1, r3
 8004852:	193b      	adds	r3, r7, r4
 8004854:	193a      	adds	r2, r7, r4
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2204      	movs	r2, #4
 8004860:	32ff      	adds	r2, #255	; 0xff
 8004862:	0011      	movs	r1, r2
 8004864:	2201      	movs	r2, #1
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff fa64 	bl	8003d34 <WrByte>
 800486c:	0003      	movs	r3, r0
 800486e:	0019      	movs	r1, r3
 8004870:	193b      	adds	r3, r7, r4
 8004872:	193a      	adds	r2, r7, r4
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	210c      	movs	r1, #12
 8004880:	0018      	movs	r0, r3
 8004882:	f7ff fa57 	bl	8003d34 <WrByte>
 8004886:	0003      	movs	r3, r0
 8004888:	0019      	movs	r1, r3
 800488a:	193b      	adds	r3, r7, r4
 800488c:	193a      	adds	r2, r7, r4
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2243      	movs	r2, #67	; 0x43
 8004898:	210f      	movs	r1, #15
 800489a:	0018      	movs	r0, r3
 800489c:	f7ff fa4a 	bl	8003d34 <WrByte>
 80048a0:	0003      	movs	r3, r0
 80048a2:	0019      	movs	r1, r3
 80048a4:	193b      	adds	r3, r7, r4
 80048a6:	193a      	adds	r2, r7, r4
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	701a      	strb	r2, [r3, #0]
	status |= WaitMs(&(p_dev->platform), 1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2101      	movs	r1, #1
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff fb16 	bl	8003ee4 <WaitMs>
 80048b8:	0003      	movs	r3, r0
 80048ba:	0019      	movs	r1, r3
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	193a      	adds	r2, r7, r4
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	701a      	strb	r2, [r3, #0]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2240      	movs	r2, #64	; 0x40
 80048ca:	210f      	movs	r1, #15
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7ff fa31 	bl	8003d34 <WrByte>
 80048d2:	0003      	movs	r3, r0
 80048d4:	0019      	movs	r1, r3
 80048d6:	193b      	adds	r3, r7, r4
 80048d8:	193a      	adds	r2, r7, r4
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	210a      	movs	r1, #10
 80048e6:	0018      	movs	r0, r3
 80048e8:	f7ff fa24 	bl	8003d34 <WrByte>
 80048ec:	0003      	movs	r3, r0
 80048ee:	0019      	movs	r1, r3
 80048f0:	193b      	adds	r3, r7, r4
 80048f2:	193a      	adds	r2, r7, r4
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	701a      	strb	r2, [r3, #0]
	status |= WaitMs(&(p_dev->platform), 100);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2164      	movs	r1, #100	; 0x64
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff faf0 	bl	8003ee4 <WaitMs>
 8004904:	0003      	movs	r3, r0
 8004906:	0019      	movs	r1, r3
 8004908:	193b      	adds	r3, r7, r4
 800490a:	193a      	adds	r2, r7, r4
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	701a      	strb	r2, [r3, #0]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	497b      	ldr	r1, [pc, #492]	; (8004b04 <vl53l5cx_init+0x41c>)
 8004916:	2200      	movs	r2, #0
 8004918:	0018      	movs	r0, r3
 800491a:	f7ff fa0b 	bl	8003d34 <WrByte>
 800491e:	0003      	movs	r3, r0
 8004920:	0019      	movs	r1, r3
 8004922:	193b      	adds	r3, r7, r4
 8004924:	193a      	adds	r2, r7, r4
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	2301      	movs	r3, #1
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	23ff      	movs	r3, #255	; 0xff
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2306      	movs	r3, #6
 8004938:	2200      	movs	r2, #0
 800493a:	2101      	movs	r1, #1
 800493c:	f7ff fae0 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8004940:	0003      	movs	r3, r0
 8004942:	0019      	movs	r1, r3
 8004944:	193b      	adds	r3, r7, r4
 8004946:	193a      	adds	r2, r7, r4
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 800494e:	193b      	adds	r3, r7, r4
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d000      	beq.n	8004958 <vl53l5cx_init+0x270>
 8004956:	e3c6      	b.n	80050e6 <vl53l5cx_init+0x9fe>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	210e      	movs	r1, #14
 800495e:	0018      	movs	r0, r3
 8004960:	f7ff f9e8 	bl	8003d34 <WrByte>
 8004964:	0003      	movs	r3, r0
 8004966:	0019      	movs	r1, r3
 8004968:	193b      	adds	r3, r7, r4
 800496a:	193a      	adds	r2, r7, r4
 800496c:	7812      	ldrb	r2, [r2, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4963      	ldr	r1, [pc, #396]	; (8004b04 <vl53l5cx_init+0x41c>)
 8004976:	2202      	movs	r2, #2
 8004978:	0018      	movs	r0, r3
 800497a:	f7ff f9db 	bl	8003d34 <WrByte>
 800497e:	0003      	movs	r3, r0
 8004980:	0019      	movs	r1, r3
 8004982:	193b      	adds	r3, r7, r4
 8004984:	193a      	adds	r2, r7, r4
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	701a      	strb	r2, [r3, #0]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	220d      	movs	r2, #13
 8004990:	2103      	movs	r1, #3
 8004992:	0018      	movs	r0, r3
 8004994:	f7ff f9ce 	bl	8003d34 <WrByte>
 8004998:	0003      	movs	r3, r0
 800499a:	0019      	movs	r1, r3
 800499c:	193b      	adds	r3, r7, r4
 800499e:	193a      	adds	r2, r7, r4
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4956      	ldr	r1, [pc, #344]	; (8004b04 <vl53l5cx_init+0x41c>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7ff f9c1 	bl	8003d34 <WrByte>
 80049b2:	0003      	movs	r3, r0
 80049b4:	0019      	movs	r1, r3
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	193a      	adds	r2, r7, r4
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	2310      	movs	r3, #16
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	2310      	movs	r3, #16
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	2321      	movs	r3, #33	; 0x21
 80049cc:	2200      	movs	r2, #0
 80049ce:	2101      	movs	r1, #1
 80049d0:	f7ff fa96 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 80049d4:	0003      	movs	r3, r0
 80049d6:	0019      	movs	r1, r3
 80049d8:	193b      	adds	r3, r7, r4
 80049da:	193a      	adds	r2, r7, r4
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4947      	ldr	r1, [pc, #284]	; (8004b04 <vl53l5cx_init+0x41c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7ff f9a3 	bl	8003d34 <WrByte>
 80049ee:	0003      	movs	r3, r0
 80049f0:	0019      	movs	r1, r3
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	193a      	adds	r2, r7, r4
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	701a      	strb	r2, [r3, #0]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	197a      	adds	r2, r7, r5
 8004a00:	4940      	ldr	r1, [pc, #256]	; (8004b04 <vl53l5cx_init+0x41c>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7ff f954 	bl	8003cb0 <RdByte>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	193a      	adds	r2, r7, r4
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	210c      	movs	r1, #12
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7ff f989 	bl	8003d34 <WrByte>
 8004a22:	0003      	movs	r3, r0
 8004a24:	0019      	movs	r1, r3
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	193a      	adds	r2, r7, r4
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4934      	ldr	r1, [pc, #208]	; (8004b04 <vl53l5cx_init+0x41c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7ff f97c 	bl	8003d34 <WrByte>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	0019      	movs	r1, r3
 8004a40:	193b      	adds	r3, r7, r4
 8004a42:	193a      	adds	r2, r7, r4
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	32ff      	adds	r2, #255	; 0xff
 8004a50:	0011      	movs	r1, r2
 8004a52:	2200      	movs	r2, #0
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7ff f96d 	bl	8003d34 <WrByte>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	193b      	adds	r3, r7, r4
 8004a60:	193a      	adds	r2, r7, r4
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2281      	movs	r2, #129	; 0x81
 8004a6c:	0051      	lsls	r1, r2, #1
 8004a6e:	2200      	movs	r2, #0
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff f95f 	bl	8003d34 <WrByte>
 8004a76:	0003      	movs	r3, r0
 8004a78:	0019      	movs	r1, r3
 8004a7a:	193b      	adds	r3, r7, r4
 8004a7c:	193a      	adds	r2, r7, r4
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2285      	movs	r2, #133	; 0x85
 8004a88:	0051      	lsls	r1, r2, #1
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7ff f951 	bl	8003d34 <WrByte>
 8004a92:	0003      	movs	r3, r0
 8004a94:	0019      	movs	r1, r3
 8004a96:	193b      	adds	r3, r7, r4
 8004a98:	193a      	adds	r2, r7, r4
 8004a9a:	7812      	ldrb	r2, [r2, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4919      	ldr	r1, [pc, #100]	; (8004b08 <vl53l5cx_init+0x420>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7ff f944 	bl	8003d34 <WrByte>
 8004aac:	0003      	movs	r3, r0
 8004aae:	0019      	movs	r1, r3
 8004ab0:	193b      	adds	r3, r7, r4
 8004ab2:	193a      	adds	r2, r7, r4
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4912      	ldr	r1, [pc, #72]	; (8004b08 <vl53l5cx_init+0x420>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff f937 	bl	8003d34 <WrByte>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	0019      	movs	r1, r3
 8004aca:	193b      	adds	r3, r7, r4
 8004acc:	193a      	adds	r2, r7, r4
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2285      	movs	r2, #133	; 0x85
 8004ad8:	0051      	lsls	r1, r2, #1
 8004ada:	2203      	movs	r2, #3
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7ff f929 	bl	8003d34 <WrByte>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	193a      	adds	r2, r7, r4
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	e00b      	b.n	8004b0c <vl53l5cx_init+0x424>
 8004af4:	00010001 	.word	0x00010001
 8004af8:	0801b5ac 	.word	0x0801b5ac
 8004afc:	0801b1e0 	.word	0x0801b1e0
 8004b00:	00000aac 	.word	0x00000aac
 8004b04:	00007fff 	.word	0x00007fff
 8004b08:	00004002 	.word	0x00004002
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	32ff      	adds	r2, #255	; 0xff
 8004b10:	0011      	movs	r1, r2
 8004b12:	2201      	movs	r2, #1
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7ff f90d 	bl	8003d34 <WrByte>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	193b      	adds	r3, r7, r4
 8004b20:	193a      	adds	r2, r7, r4
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	49fd      	ldr	r1, [pc, #1012]	; (8004f20 <vl53l5cx_init+0x838>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7ff f900 	bl	8003d34 <WrByte>
 8004b34:	0003      	movs	r3, r0
 8004b36:	0019      	movs	r1, r3
 8004b38:	193b      	adds	r3, r7, r4
 8004b3a:	193a      	adds	r2, r7, r4
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	49f7      	ldr	r1, [pc, #988]	; (8004f24 <vl53l5cx_init+0x83c>)
 8004b46:	2243      	movs	r2, #67	; 0x43
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff f8f3 	bl	8003d34 <WrByte>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	0019      	movs	r1, r3
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	193a      	adds	r2, r7, r4
 8004b56:	7812      	ldrb	r2, [r2, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	49f1      	ldr	r1, [pc, #964]	; (8004f24 <vl53l5cx_init+0x83c>)
 8004b60:	2203      	movs	r2, #3
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7ff f8e6 	bl	8003d34 <WrByte>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	193b      	adds	r3, r7, r4
 8004b6e:	193a      	adds	r2, r7, r4
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	49ea      	ldr	r1, [pc, #936]	; (8004f24 <vl53l5cx_init+0x83c>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7ff f8d9 	bl	8003d34 <WrByte>
 8004b82:	0003      	movs	r3, r0
 8004b84:	0019      	movs	r1, r3
 8004b86:	193b      	adds	r3, r7, r4
 8004b88:	193a      	adds	r2, r7, r4
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	49e4      	ldr	r1, [pc, #912]	; (8004f24 <vl53l5cx_init+0x83c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7ff f8cc 	bl	8003d34 <WrByte>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	193a      	adds	r2, r7, r4
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	49de      	ldr	r1, [pc, #888]	; (8004f28 <vl53l5cx_init+0x840>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7ff f8bf 	bl	8003d34 <WrByte>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	0019      	movs	r1, r3
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	193a      	adds	r2, r7, r4
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	49d9      	ldr	r1, [pc, #868]	; (8004f2c <vl53l5cx_init+0x844>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7ff f8b2 	bl	8003d34 <WrByte>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	193b      	adds	r3, r7, r4
 8004bd6:	193a      	adds	r2, r7, r4
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	701a      	strb	r2, [r3, #0]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	49d3      	ldr	r1, [pc, #844]	; (8004f30 <vl53l5cx_init+0x848>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff f8a5 	bl	8003d34 <WrByte>
 8004bea:	0003      	movs	r3, r0
 8004bec:	0019      	movs	r1, r3
 8004bee:	193b      	adds	r3, r7, r4
 8004bf0:	193a      	adds	r2, r7, r4
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	197a      	adds	r2, r7, r5
 8004bfc:	49cc      	ldr	r1, [pc, #816]	; (8004f30 <vl53l5cx_init+0x848>)
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7ff f856 	bl	8003cb0 <RdByte>
 8004c04:	0003      	movs	r3, r0
 8004c06:	0019      	movs	r1, r3
 8004c08:	193b      	adds	r3, r7, r4
 8004c0a:	193a      	adds	r2, r7, r4
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	210c      	movs	r1, #12
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7ff f88b 	bl	8003d34 <WrByte>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	0019      	movs	r1, r3
 8004c22:	193b      	adds	r3, r7, r4
 8004c24:	193a      	adds	r2, r7, r4
 8004c26:	7812      	ldrb	r2, [r2, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	49c0      	ldr	r1, [pc, #768]	; (8004f30 <vl53l5cx_init+0x848>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7ff f87e 	bl	8003d34 <WrByte>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	193a      	adds	r2, r7, r4
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2207      	movs	r2, #7
 8004c4a:	2120      	movs	r1, #32
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff f871 	bl	8003d34 <WrByte>
 8004c52:	0003      	movs	r3, r0
 8004c54:	0019      	movs	r1, r3
 8004c56:	193b      	adds	r3, r7, r4
 8004c58:	193a      	adds	r2, r7, r4
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2206      	movs	r2, #6
 8004c64:	2120      	movs	r1, #32
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7ff f864 	bl	8003d34 <WrByte>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	0019      	movs	r1, r3
 8004c70:	193b      	adds	r3, r7, r4
 8004c72:	193a      	adds	r2, r7, r4
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	701a      	strb	r2, [r3, #0]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	49ac      	ldr	r1, [pc, #688]	; (8004f30 <vl53l5cx_init+0x848>)
 8004c7e:	2209      	movs	r2, #9
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff f857 	bl	8003d34 <WrByte>
 8004c86:	0003      	movs	r3, r0
 8004c88:	0019      	movs	r1, r3
 8004c8a:	193b      	adds	r3, r7, r4
 8004c8c:	193a      	adds	r2, r7, r4
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	4aa6      	ldr	r2, [pc, #664]	; (8004f34 <vl53l5cx_init+0x84c>)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f7ff f87f 	bl	8003da0 <WrMulti>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	193a      	adds	r2, r7, r4
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	499f      	ldr	r1, [pc, #636]	; (8004f30 <vl53l5cx_init+0x848>)
 8004cb4:	220a      	movs	r2, #10
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff f83c 	bl	8003d34 <WrByte>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	193b      	adds	r3, r7, r4
 8004cc2:	193a      	adds	r2, r7, r4
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	2380      	movs	r3, #128	; 0x80
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	4a99      	ldr	r2, [pc, #612]	; (8004f38 <vl53l5cx_init+0x850>)
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f7ff f864 	bl	8003da0 <WrMulti>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	0019      	movs	r1, r3
 8004cdc:	193b      	adds	r3, r7, r4
 8004cde:	193a      	adds	r2, r7, r4
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4991      	ldr	r1, [pc, #580]	; (8004f30 <vl53l5cx_init+0x848>)
 8004cea:	220b      	movs	r2, #11
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7ff f821 	bl	8003d34 <WrByte>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	193a      	adds	r2, r7, r4
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	701a      	strb	r2, [r3, #0]
	status |= WrMulti(&(p_dev->platform),0,
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	23a0      	movs	r3, #160	; 0xa0
 8004d04:	01db      	lsls	r3, r3, #7
 8004d06:	4a8d      	ldr	r2, [pc, #564]	; (8004f3c <vl53l5cx_init+0x854>)
 8004d08:	2100      	movs	r1, #0
 8004d0a:	f7ff f849 	bl	8003da0 <WrMulti>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	0019      	movs	r1, r3
 8004d12:	193b      	adds	r3, r7, r4
 8004d14:	193a      	adds	r2, r7, r4
 8004d16:	7812      	ldrb	r2, [r2, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	701a      	strb	r2, [r3, #0]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4984      	ldr	r1, [pc, #528]	; (8004f30 <vl53l5cx_init+0x848>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff f806 	bl	8003d34 <WrByte>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	193b      	adds	r3, r7, r4
 8004d2e:	193a      	adds	r2, r7, r4
 8004d30:	7812      	ldrb	r2, [r2, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	701a      	strb	r2, [r3, #0]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	497d      	ldr	r1, [pc, #500]	; (8004f30 <vl53l5cx_init+0x848>)
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fe fff9 	bl	8003d34 <WrByte>
 8004d42:	0003      	movs	r3, r0
 8004d44:	0019      	movs	r1, r3
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	193a      	adds	r2, r7, r4
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	220d      	movs	r2, #13
 8004d54:	2103      	movs	r1, #3
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fe ffec 	bl	8003d34 <WrByte>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	0019      	movs	r1, r3
 8004d60:	193b      	adds	r3, r7, r4
 8004d62:	193a      	adds	r2, r7, r4
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4970      	ldr	r1, [pc, #448]	; (8004f30 <vl53l5cx_init+0x848>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fe ffdf 	bl	8003d34 <WrByte>
 8004d76:	0003      	movs	r3, r0
 8004d78:	0019      	movs	r1, r3
 8004d7a:	193b      	adds	r3, r7, r4
 8004d7c:	193a      	adds	r2, r7, r4
 8004d7e:	7812      	ldrb	r2, [r2, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	2310      	movs	r3, #16
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2321      	movs	r3, #33	; 0x21
 8004d90:	2200      	movs	r2, #0
 8004d92:	2101      	movs	r1, #1
 8004d94:	f7ff f8b4 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	193a      	adds	r2, r7, r4
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 8004da6:	193b      	adds	r3, r7, r4
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d000      	beq.n	8004db0 <vl53l5cx_init+0x6c8>
 8004dae:	e19c      	b.n	80050ea <vl53l5cx_init+0xa02>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	495f      	ldr	r1, [pc, #380]	; (8004f30 <vl53l5cx_init+0x848>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7fe ffbc 	bl	8003d34 <WrByte>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	193b      	adds	r3, r7, r4
 8004dc2:	193a      	adds	r2, r7, r4
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	197a      	adds	r2, r7, r5
 8004dce:	4958      	ldr	r1, [pc, #352]	; (8004f30 <vl53l5cx_init+0x848>)
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7fe ff6d 	bl	8003cb0 <RdByte>
 8004dd6:	0003      	movs	r3, r0
 8004dd8:	0019      	movs	r1, r3
 8004dda:	193b      	adds	r3, r7, r4
 8004ddc:	193a      	adds	r2, r7, r4
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	210c      	movs	r1, #12
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fe ffa2 	bl	8003d34 <WrByte>
 8004df0:	0003      	movs	r3, r0
 8004df2:	0019      	movs	r1, r3
 8004df4:	193b      	adds	r3, r7, r4
 8004df6:	193a      	adds	r2, r7, r4
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	701a      	strb	r2, [r3, #0]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	494b      	ldr	r1, [pc, #300]	; (8004f30 <vl53l5cx_init+0x848>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7fe ff95 	bl	8003d34 <WrByte>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	193a      	adds	r2, r7, r4
 8004e12:	7812      	ldrb	r2, [r2, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	228a      	movs	r2, #138	; 0x8a
 8004e1c:	0051      	lsls	r1, r2, #1
 8004e1e:	2200      	movs	r2, #0
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7fe ff87 	bl	8003d34 <WrByte>
 8004e26:	0003      	movs	r3, r0
 8004e28:	0019      	movs	r1, r3
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	193a      	adds	r2, r7, r4
 8004e2e:	7812      	ldrb	r2, [r2, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2216      	movs	r2, #22
 8004e38:	32ff      	adds	r2, #255	; 0xff
 8004e3a:	0011      	movs	r1, r2
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7fe ff78 	bl	8003d34 <WrByte>
 8004e44:	0003      	movs	r3, r0
 8004e46:	0019      	movs	r1, r3
 8004e48:	193b      	adds	r3, r7, r4
 8004e4a:	193a      	adds	r2, r7, r4
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	228b      	movs	r2, #139	; 0x8b
 8004e56:	0051      	lsls	r1, r2, #1
 8004e58:	2242      	movs	r2, #66	; 0x42
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f7fe ff6a 	bl	8003d34 <WrByte>
 8004e60:	0003      	movs	r3, r0
 8004e62:	0019      	movs	r1, r3
 8004e64:	193b      	adds	r3, r7, r4
 8004e66:	193a      	adds	r2, r7, r4
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2218      	movs	r2, #24
 8004e72:	32ff      	adds	r2, #255	; 0xff
 8004e74:	0011      	movs	r1, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7fe ff5b 	bl	8003d34 <WrByte>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	0019      	movs	r1, r3
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	193a      	adds	r2, r7, r4
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	210b      	movs	r1, #11
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7fe ff4e 	bl	8003d34 <WrByte>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	193b      	adds	r3, r7, r4
 8004e9e:	193a      	adds	r2, r7, r4
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	197a      	adds	r2, r7, r5
 8004eaa:	4921      	ldr	r1, [pc, #132]	; (8004f30 <vl53l5cx_init+0x848>)
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7fe feff 	bl	8003cb0 <RdByte>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	193b      	adds	r3, r7, r4
 8004eb8:	193a      	adds	r2, r7, r4
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	210c      	movs	r1, #12
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7fe ff34 	bl	8003d34 <WrByte>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	0019      	movs	r1, r3
 8004ed0:	193b      	adds	r3, r7, r4
 8004ed2:	193a      	adds	r2, r7, r4
 8004ed4:	7812      	ldrb	r2, [r2, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	210b      	movs	r1, #11
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fe ff27 	bl	8003d34 <WrByte>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	0019      	movs	r1, r3
 8004eea:	193b      	adds	r3, r7, r4
 8004eec:	193a      	adds	r2, r7, r4
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	701a      	strb	r2, [r3, #0]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff f87a 	bl	8003ff0 <_vl53l5cx_poll_for_mcu_boot>
 8004efc:	0003      	movs	r3, r0
 8004efe:	0019      	movs	r1, r3
 8004f00:	193b      	adds	r3, r7, r4
 8004f02:	193a      	adds	r2, r7, r4
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	701a      	strb	r2, [r3, #0]
	if(status != (uint8_t)0){
 8004f0a:	193b      	adds	r3, r7, r4
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d000      	beq.n	8004f14 <vl53l5cx_init+0x82c>
 8004f12:	e0ec      	b.n	80050ee <vl53l5cx_init+0xa06>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4906      	ldr	r1, [pc, #24]	; (8004f30 <vl53l5cx_init+0x848>)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	e010      	b.n	8004f40 <vl53l5cx_init+0x858>
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	0000400f 	.word	0x0000400f
 8004f24:	0000021a 	.word	0x0000021a
 8004f28:	00000219 	.word	0x00000219
 8004f2c:	0000021b 	.word	0x0000021b
 8004f30:	00007fff 	.word	0x00007fff
 8004f34:	080061e0 	.word	0x080061e0
 8004f38:	0800e1e0 	.word	0x0800e1e0
 8004f3c:	080161e0 	.word	0x080161e0
 8004f40:	f7fe fef8 	bl	8003d34 <WrByte>
 8004f44:	0003      	movs	r3, r0
 8004f46:	0019      	movs	r1, r3
 8004f48:	193b      	adds	r3, r7, r4
 8004f4a:	193a      	adds	r2, r7, r4
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	701a      	strb	r2, [r3, #0]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4a6a      	ldr	r2, [pc, #424]	; (8005100 <vl53l5cx_init+0xa18>)
 8004f56:	496b      	ldr	r1, [pc, #428]	; (8005104 <vl53l5cx_init+0xa1c>)
 8004f58:	2328      	movs	r3, #40	; 0x28
 8004f5a:	f7fe ff21 	bl	8003da0 <WrMulti>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	0019      	movs	r1, r3
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	193a      	adds	r2, r7, r4
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	701a      	strb	r2, [r3, #0]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8004f6c:	23b0      	movs	r3, #176	; 0xb0
 8004f6e:	019b      	lsls	r3, r3, #6
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	9201      	str	r2, [sp, #4]
 8004f76:	22ff      	movs	r2, #255	; 0xff
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	f7fe ffbf 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8004f82:	0003      	movs	r3, r0
 8004f84:	0019      	movs	r1, r3
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	193a      	adds	r2, r7, r4
 8004f8a:	7812      	ldrb	r2, [r2, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004f90:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	26a0      	movs	r6, #160	; 0xa0
 8004f96:	00f6      	lsls	r6, r6, #3
 8004f98:	199a      	adds	r2, r3, r6
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004f9a:	23f6      	movs	r3, #246	; 0xf6
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	495a      	ldr	r1, [pc, #360]	; (8005108 <vl53l5cx_init+0xa20>)
 8004fa0:	f7fe ff26 	bl	8003df0 <RdMulti>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	193b      	adds	r3, r7, r4
 8004faa:	193a      	adds	r2, r7, r4
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	701a      	strb	r2, [r3, #0]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	3010      	adds	r0, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	22a0      	movs	r2, #160	; 0xa0
 8004fbc:	00d2      	lsls	r2, r2, #3
 8004fbe:	4694      	mov	ip, r2
 8004fc0:	4463      	add	r3, ip
 8004fc2:	22f4      	movs	r2, #244	; 0xf4
 8004fc4:	0052      	lsls	r2, r2, #1
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	f001 f87a 	bl	80060c0 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2110      	movs	r1, #16
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7ff f865 	bl	80040a0 <_vl53l5cx_send_offset_data>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	0019      	movs	r1, r3
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	193a      	adds	r2, r7, r4
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	701a      	strb	r2, [r3, #0]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	32f9      	adds	r2, #249	; 0xf9
 8004fea:	32ff      	adds	r2, #255	; 0xff
 8004fec:	4b47      	ldr	r3, [pc, #284]	; (800510c <vl53l5cx_init+0xa24>)
 8004fee:	0010      	movs	r0, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	23c2      	movs	r3, #194	; 0xc2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	f001 f862 	bl	80060c0 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2110      	movs	r1, #16
 8005000:	0018      	movs	r0, r3
 8005002:	f7ff fa25 	bl	8004450 <_vl53l5cx_send_xtalk_data>
 8005006:	0003      	movs	r3, r0
 8005008:	0019      	movs	r1, r3
 800500a:	193b      	adds	r3, r7, r4
 800500c:	193a      	adds	r2, r7, r4
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	701a      	strb	r2, [r3, #0]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	23f3      	movs	r3, #243	; 0xf3
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	493c      	ldr	r1, [pc, #240]	; (8005110 <vl53l5cx_init+0xa28>)
 8005020:	f7fe febe 	bl	8003da0 <WrMulti>
 8005024:	0003      	movs	r3, r0
 8005026:	0019      	movs	r1, r3
 8005028:	193b      	adds	r3, r7, r4
 800502a:	193a      	adds	r2, r7, r4
 800502c:	7812      	ldrb	r2, [r2, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	701a      	strb	r2, [r3, #0]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005032:	23b0      	movs	r3, #176	; 0xb0
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	2203      	movs	r2, #3
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	22ff      	movs	r2, #255	; 0xff
 800503e:	9200      	str	r2, [sp, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	2104      	movs	r1, #4
 8005044:	f7fe ff5c 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8005048:	0003      	movs	r3, r0
 800504a:	0019      	movs	r1, r3
 800504c:	193b      	adds	r3, r7, r4
 800504e:	193a      	adds	r2, r7, r4
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	701a      	strb	r2, [r3, #0]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8005056:	4a2f      	ldr	r2, [pc, #188]	; (8005114 <vl53l5cx_init+0xa2c>)
 8005058:	2310      	movs	r3, #16
 800505a:	18f9      	adds	r1, r7, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	2304      	movs	r3, #4
 8005060:	f000 fee6 	bl	8005e30 <vl53l5cx_dci_write_data>
 8005064:	0003      	movs	r3, r0
 8005066:	0019      	movs	r1, r3
 8005068:	193b      	adds	r3, r7, r4
 800506a:	193a      	adds	r2, r7, r4
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8005072:	4a29      	ldr	r2, [pc, #164]	; (8005118 <vl53l5cx_init+0xa30>)
 8005074:	230c      	movs	r3, #12
 8005076:	18f9      	adds	r1, r7, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	2304      	movs	r3, #4
 800507c:	f000 fed8 	bl	8005e30 <vl53l5cx_dci_write_data>
 8005080:	0003      	movs	r3, r0
 8005082:	0019      	movs	r1, r3
 8005084:	193b      	adds	r3, r7, r4
 8005086:	193a      	adds	r2, r7, r4
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	701a      	strb	r2, [r3, #0]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 800508e:	197b      	adds	r3, r7, r5
 8005090:	2201      	movs	r2, #1
 8005092:	701a      	strb	r2, [r3, #0]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1999      	adds	r1, r3, r6
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <vl53l5cx_init+0xa34>)
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	2326      	movs	r3, #38	; 0x26
 800509e:	9302      	str	r3, [sp, #8]
 80050a0:	2301      	movs	r3, #1
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	197b      	adds	r3, r7, r5
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2328      	movs	r3, #40	; 0x28
 80050aa:	f000 ff9f 	bl	8005fec <vl53l5cx_dci_replace_data>
 80050ae:	0003      	movs	r3, r0
 80050b0:	0019      	movs	r1, r3
 80050b2:	193b      	adds	r3, r7, r4
 80050b4:	193a      	adds	r2, r7, r4
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	701a      	strb	r2, [r3, #0]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1999      	adds	r1, r3, r6
 80050c0:	4a16      	ldr	r2, [pc, #88]	; (800511c <vl53l5cx_init+0xa34>)
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	2325      	movs	r3, #37	; 0x25
 80050c6:	9302      	str	r3, [sp, #8]
 80050c8:	2301      	movs	r3, #1
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	197b      	adds	r3, r7, r5
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2328      	movs	r3, #40	; 0x28
 80050d2:	f000 ff8b 	bl	8005fec <vl53l5cx_dci_replace_data>
 80050d6:	0003      	movs	r3, r0
 80050d8:	0019      	movs	r1, r3
 80050da:	193b      	adds	r3, r7, r4
 80050dc:	193a      	adds	r2, r7, r4
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e004      	b.n	80050f0 <vl53l5cx_init+0xa08>
		goto exit;
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	e002      	b.n	80050f0 <vl53l5cx_init+0xa08>
		goto exit;
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	e000      	b.n	80050f0 <vl53l5cx_init+0xa08>
		goto exit;
 80050ee:	46c0      	nop			; (mov r8, r8)
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 80050f0:	2317      	movs	r3, #23
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	781b      	ldrb	r3, [r3, #0]
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b007      	add	sp, #28
 80050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	0801b8b4 	.word	0x0801b8b4
 8005104:	00002fd8 	.word	0x00002fd8
 8005108:	00002c04 	.word	0x00002c04
 800510c:	0801b5ac 	.word	0x0801b5ac
 8005110:	00002c34 	.word	0x00002c34
 8005114:	0000db80 	.word	0x0000db80
 8005118:	0000d964 	.word	0x0000d964
 800511c:	0000e108 	.word	0x0000e108

08005120 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b09c      	sub	sp, #112	; 0x70
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8005128:	2467      	movs	r4, #103	; 0x67
 800512a:	193b      	adds	r3, r7, r4
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8005130:	2150      	movs	r1, #80	; 0x50
 8005132:	187b      	adds	r3, r7, r1
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	187b      	adds	r3, r7, r1
 800513a:	2200      	movs	r2, #0
 800513c:	605a      	str	r2, [r3, #4]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800513e:	234c      	movs	r3, #76	; 0x4c
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	22c0      	movs	r2, #192	; 0xc0
 8005144:	0092      	lsls	r2, r2, #2
 8005146:	601a      	str	r2, [r3, #0]

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8005148:	235b      	movs	r3, #91	; 0x5b
 800514a:	18fa      	adds	r2, r7, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	0011      	movs	r1, r2
 8005150:	0018      	movs	r0, r3
 8005152:	f000 fd6d 	bl	8005c30 <vl53l5cx_get_resolution>
 8005156:	0003      	movs	r3, r0
 8005158:	0019      	movs	r1, r3
 800515a:	193b      	adds	r3, r7, r4
 800515c:	193a      	adds	r2, r7, r4
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	701a      	strb	r2, [r3, #0]
	p_dev->data_read_size = 0;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8005170:	253c      	movs	r5, #60	; 0x3c
 8005172:	197b      	adds	r3, r7, r5
 8005174:	4ab9      	ldr	r2, [pc, #740]	; (800545c <vl53l5cx_start_ranging+0x33c>)
 8005176:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005178:	c313      	stmia	r3!, {r0, r1, r4}
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	601a      	str	r2, [r3, #0]
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 800517e:	230c      	movs	r3, #12
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	4ab7      	ldr	r2, [pc, #732]	; (8005460 <vl53l5cx_start_ranging+0x340>)
 8005184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005186:	c313      	stmia	r3!, {r0, r1, r4}
 8005188:	ca13      	ldmia	r2!, {r0, r1, r4}
 800518a:	c313      	stmia	r3!, {r0, r1, r4}
 800518c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800518e:	c313      	stmia	r3!, {r0, r1, r4}
 8005190:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005192:	c313      	stmia	r3!, {r0, r1, r4}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8005194:	197b      	adds	r3, r7, r5
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	001a      	movs	r2, r3
 800519c:	197b      	adds	r3, r7, r5
 800519e:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 80051a0:	0029      	movs	r1, r5
 80051a2:	197b      	adds	r3, r7, r5
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3310      	adds	r3, #16
 80051a8:	001a      	movs	r2, r3
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3320      	adds	r3, #32
 80051b4:	001a      	movs	r2, r3
 80051b6:	187b      	adds	r3, r7, r1
 80051b8:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3340      	adds	r3, #64	; 0x40
 80051c0:	001a      	movs	r2, r3
 80051c2:	187b      	adds	r3, r7, r1
 80051c4:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3380      	adds	r3, #128	; 0x80
 80051cc:	001a      	movs	r2, r3
 80051ce:	187b      	adds	r3, r7, r1
 80051d0:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	32ff      	adds	r2, #255	; 0xff
 80051da:	187b      	adds	r3, r7, r1
 80051dc:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	189a      	adds	r2, r3, r2
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2280      	movs	r2, #128	; 0x80
 80051f2:	00d2      	lsls	r2, r2, #3
 80051f4:	189a      	adds	r2, r3, r2
 80051f6:	187b      	adds	r3, r7, r1
 80051f8:	601a      	str	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	0112      	lsls	r2, r2, #4
 8005202:	189a      	adds	r2, r3, r2
 8005204:	187b      	adds	r3, r7, r1
 8005206:	601a      	str	r2, [r3, #0]
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8005208:	2300      	movs	r3, #0
 800520a:	663b      	str	r3, [r7, #96]	; 0x60
 800520c:	e076      	b.n	80052fc <vl53l5cx_start_ranging+0x1dc>
	{
		if ((output[i] == (uint8_t)0) 
 800520e:	200c      	movs	r0, #12
 8005210:	183b      	adds	r3, r7, r0
 8005212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005214:	0092      	lsls	r2, r2, #2
 8005216:	58d3      	ldr	r3, [r2, r3]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d06b      	beq.n	80052f4 <vl53l5cx_start_ranging+0x1d4>
                    || ((output_bh_enable[i/(uint32_t)32]
 800521c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800521e:	095a      	lsrs	r2, r3, #5
 8005220:	233c      	movs	r3, #60	; 0x3c
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	58d2      	ldr	r2, [r2, r3]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8005228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800522a:	211f      	movs	r1, #31
 800522c:	400b      	ands	r3, r1
 800522e:	40da      	lsrs	r2, r3
 8005230:	0013      	movs	r3, r2
 8005232:	2201      	movs	r2, #1
 8005234:	4013      	ands	r3, r2
                    || ((output_bh_enable[i/(uint32_t)32]
 8005236:	d05d      	beq.n	80052f4 <vl53l5cx_start_ranging+0x1d4>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8005238:	183a      	adds	r2, r7, r0
 800523a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	18d3      	adds	r3, r2, r3
 8005240:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8005242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	220f      	movs	r2, #15
 8005248:	4013      	ands	r3, r2
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d041      	beq.n	80052d4 <vl53l5cx_start_ranging+0x1b4>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8005250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	0f1b      	lsrs	r3, r3, #28
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d83a      	bhi.n	80052d4 <vl53l5cx_start_ranging+0x1b4>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800525e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005260:	885b      	ldrh	r3, [r3, #2]
 8005262:	4a80      	ldr	r2, [pc, #512]	; (8005464 <vl53l5cx_start_ranging+0x344>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d914      	bls.n	8005292 <vl53l5cx_start_ranging+0x172>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8005268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800526a:	885b      	ldrh	r3, [r3, #2]
 800526c:	4a7e      	ldr	r2, [pc, #504]	; (8005468 <vl53l5cx_start_ranging+0x348>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d80f      	bhi.n	8005292 <vl53l5cx_start_ranging+0x172>
			{
				bh_ptr->size = resolution;
 8005272:	235b      	movs	r3, #91	; 0x5b
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	051b      	lsls	r3, r3, #20
 800527a:	0d1b      	lsrs	r3, r3, #20
 800527c:	b29a      	uxth	r2, r3
 800527e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005280:	0110      	lsls	r0, r2, #4
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	210f      	movs	r1, #15
 8005286:	400a      	ands	r2, r1
 8005288:	1c11      	adds	r1, r2, #0
 800528a:	1c02      	adds	r2, r0, #0
 800528c:	430a      	orrs	r2, r1
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e00e      	b.n	80052b0 <vl53l5cx_start_ranging+0x190>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8005292:	235b      	movs	r3, #91	; 0x5b
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	051b      	lsls	r3, r3, #20
 800529a:	0d1b      	lsrs	r3, r3, #20
 800529c:	b29a      	uxth	r2, r3
 800529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a0:	0110      	lsls	r0, r2, #4
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	210f      	movs	r1, #15
 80052a6:	400a      	ands	r2, r1
 80052a8:	1c11      	adds	r1, r2, #0
 80052aa:	1c02      	adds	r2, r0, #0
 80052ac:	430a      	orrs	r2, r1
 80052ae:	801a      	strh	r2, [r3, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	0712      	lsls	r2, r2, #28
 80052ba:	0f12      	lsrs	r2, r2, #28
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	0011      	movs	r1, r2
 80052c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052c2:	8812      	ldrh	r2, [r2, #0]
 80052c4:	0412      	lsls	r2, r2, #16
 80052c6:	0d12      	lsrs	r2, r2, #20
 80052c8:	b292      	uxth	r2, r2
 80052ca:	434a      	muls	r2, r1
 80052cc:	189a      	adds	r2, r3, r2
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	e009      	b.n	80052e8 <vl53l5cx_start_ranging+0x1c8>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	0412      	lsls	r2, r2, #16
 80052de:	0d12      	lsrs	r2, r2, #20
 80052e0:	b292      	uxth	r2, r2
 80052e2:	189a      	adds	r2, r3, r2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	e000      	b.n	80052f6 <vl53l5cx_start_ranging+0x1d6>
			continue;
 80052f4:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80052f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052f8:	3301      	adds	r3, #1
 80052fa:	663b      	str	r3, [r7, #96]	; 0x60
 80052fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052fe:	2b0b      	cmp	r3, #11
 8005300:	d800      	bhi.n	8005304 <vl53l5cx_start_ranging+0x1e4>
 8005302:	e784      	b.n	800520e <vl53l5cx_start_ranging+0xee>
	}
	p_dev->data_read_size += (uint32_t)24;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	3318      	adds	r3, #24
 800530a:	001a      	movs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8005310:	4a56      	ldr	r2, [pc, #344]	; (800546c <vl53l5cx_start_ranging+0x34c>)
 8005312:	230c      	movs	r3, #12
 8005314:	18f9      	adds	r1, r7, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	2330      	movs	r3, #48	; 0x30
 800531a:	f000 fd89 	bl	8005e30 <vl53l5cx_dci_write_data>
 800531e:	0003      	movs	r3, r0
 8005320:	0019      	movs	r1, r3
 8005322:	2467      	movs	r4, #103	; 0x67
 8005324:	193b      	adds	r3, r7, r4
 8005326:	193a      	adds	r2, r7, r4
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	2150      	movs	r1, #80	; 0x50
 8005334:	187b      	adds	r3, r7, r1
 8005336:	601a      	str	r2, [r3, #0]
	header_config[1] = i + (uint32_t)1;
 8005338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	187b      	adds	r3, r7, r1
 800533e:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8005340:	4a4b      	ldr	r2, [pc, #300]	; (8005470 <vl53l5cx_start_ranging+0x350>)
 8005342:	1879      	adds	r1, r7, r1
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	2308      	movs	r3, #8
 8005348:	f000 fd72 	bl	8005e30 <vl53l5cx_dci_write_data>
 800534c:	0003      	movs	r3, r0
 800534e:	0019      	movs	r1, r3
 8005350:	193b      	adds	r3, r7, r4
 8005352:	193a      	adds	r2, r7, r4
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 800535a:	4a46      	ldr	r2, [pc, #280]	; (8005474 <vl53l5cx_start_ranging+0x354>)
 800535c:	233c      	movs	r3, #60	; 0x3c
 800535e:	18f9      	adds	r1, r7, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	2310      	movs	r3, #16
 8005364:	f000 fd64 	bl	8005e30 <vl53l5cx_dci_write_data>
 8005368:	0003      	movs	r3, r0
 800536a:	0019      	movs	r1, r3
 800536c:	193b      	adds	r3, r7, r4
 800536e:	193a      	adds	r2, r7, r4
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	701a      	strb	r2, [r3, #0]
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	493f      	ldr	r1, [pc, #252]	; (8005478 <vl53l5cx_start_ranging+0x358>)
 800537a:	2200      	movs	r2, #0
 800537c:	0018      	movs	r0, r3
 800537e:	f7fe fcd9 	bl	8003d34 <WrByte>
 8005382:	0003      	movs	r3, r0
 8005384:	0019      	movs	r1, r3
 8005386:	193b      	adds	r3, r7, r4
 8005388:	193a      	adds	r2, r7, r4
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2205      	movs	r2, #5
 8005394:	2109      	movs	r1, #9
 8005396:	0018      	movs	r0, r3
 8005398:	f7fe fccc 	bl	8003d34 <WrByte>
 800539c:	0003      	movs	r3, r0
 800539e:	0019      	movs	r1, r3
 80053a0:	193b      	adds	r3, r7, r4
 80053a2:	193a      	adds	r2, r7, r4
 80053a4:	7812      	ldrb	r2, [r2, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4932      	ldr	r1, [pc, #200]	; (8005478 <vl53l5cx_start_ranging+0x358>)
 80053ae:	2202      	movs	r2, #2
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7fe fcbf 	bl	8003d34 <WrByte>
 80053b6:	0003      	movs	r3, r0
 80053b8:	0019      	movs	r1, r3
 80053ba:	193b      	adds	r3, r7, r4
 80053bc:	193a      	adds	r2, r7, r4
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	701a      	strb	r2, [r3, #0]

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	234c      	movs	r3, #76	; 0x4c
 80053c8:	18fa      	adds	r2, r7, r3
 80053ca:	492c      	ldr	r1, [pc, #176]	; (800547c <vl53l5cx_start_ranging+0x35c>)
 80053cc:	2304      	movs	r3, #4
 80053ce:	f7fe fce7 	bl	8003da0 <WrMulti>
 80053d2:	0003      	movs	r3, r0
 80053d4:	0019      	movs	r1, r3
 80053d6:	193b      	adds	r3, r7, r4
 80053d8:	193a      	adds	r2, r7, r4
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80053e0:	23b0      	movs	r3, #176	; 0xb0
 80053e2:	019b      	lsls	r3, r3, #6
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	2203      	movs	r2, #3
 80053e8:	9201      	str	r2, [sp, #4]
 80053ea:	22ff      	movs	r2, #255	; 0xff
 80053ec:	9200      	str	r2, [sp, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	2104      	movs	r1, #4
 80053f2:	f7fe fd85 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 80053f6:	0003      	movs	r3, r0
 80053f8:	0019      	movs	r1, r3
 80053fa:	193b      	adds	r3, r7, r4
 80053fc:	193a      	adds	r2, r7, r4
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	22a0      	movs	r2, #160	; 0xa0
 8005408:	00d2      	lsls	r2, r2, #3
 800540a:	1899      	adds	r1, r3, r2
	status |= vl53l5cx_dci_read_data(p_dev,
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <vl53l5cx_start_ranging+0x360>)
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	230c      	movs	r3, #12
 8005412:	f000 fc67 	bl	8005ce4 <vl53l5cx_dci_read_data>
 8005416:	0003      	movs	r3, r0
 8005418:	0019      	movs	r1, r3
 800541a:	193b      	adds	r3, r7, r4
 800541c:	193a      	adds	r2, r7, r4
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	701a      	strb	r2, [r3, #0]
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	22a1      	movs	r2, #161	; 0xa1
 8005428:	00d2      	lsls	r2, r2, #3
 800542a:	1899      	adds	r1, r3, r2
 800542c:	2558      	movs	r5, #88	; 0x58
 800542e:	197b      	adds	r3, r7, r5
 8005430:	2202      	movs	r2, #2
 8005432:	0018      	movs	r0, r3
 8005434:	f000 fe44 	bl	80060c0 <memcpy>
	if(tmp != p_dev->data_read_size)
 8005438:	197b      	adds	r3, r7, r5
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	001a      	movs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d002      	beq.n	800544c <vl53l5cx_start_ranging+0x32c>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8005446:	193b      	adds	r3, r7, r4
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800544c:	2367      	movs	r3, #103	; 0x67
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	781b      	ldrb	r3, [r3, #0]
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b01a      	add	sp, #104	; 0x68
 8005458:	bdb0      	pop	{r4, r5, r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	0800610c 	.word	0x0800610c
 8005460:	0800611c 	.word	0x0800611c
 8005464:	000054cf 	.word	0x000054cf
 8005468:	0000588f 	.word	0x0000588f
 800546c:	0000d980 	.word	0x0000d980
 8005470:	0000d968 	.word	0x0000d968
 8005474:	0000d970 	.word	0x0000d970
 8005478:	00007fff 	.word	0x00007fff
 800547c:	00002ffc 	.word	0x00002ffc
 8005480:	00005440 	.word	0x00005440

08005484 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 800548c:	2313      	movs	r3, #19
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	2417      	movs	r4, #23
 8005496:	193b      	adds	r3, r7, r4
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
	uint16_t timeout = 0;
 800549c:	2314      	movs	r3, #20
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2200      	movs	r2, #0
 80054a2:	801a      	strh	r2, [r3, #0]
	uint32_t auto_stop_flag = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	230c      	movs	r3, #12
 80054ac:	18fa      	adds	r2, r7, r3
 80054ae:	4975      	ldr	r1, [pc, #468]	; (8005684 <vl53l5cx_stop_ranging+0x200>)
 80054b0:	2304      	movs	r3, #4
 80054b2:	f7fe fc9d 	bl	8003df0 <RdMulti>
 80054b6:	0003      	movs	r3, r0
 80054b8:	0019      	movs	r1, r3
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	193a      	adds	r2, r7, r4
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	701a      	strb	r2, [r3, #0]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a70      	ldr	r2, [pc, #448]	; (8005688 <vl53l5cx_stop_ranging+0x204>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d062      	beq.n	8005592 <vl53l5cx_stop_ranging+0x10e>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a6f      	ldr	r2, [pc, #444]	; (800568c <vl53l5cx_stop_ranging+0x208>)
 80054d0:	5c9b      	ldrb	r3, [r3, r2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d15d      	bne.n	8005592 <vl53l5cx_stop_ranging+0x10e>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	496d      	ldr	r1, [pc, #436]	; (8005690 <vl53l5cx_stop_ranging+0x20c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fe fc29 	bl	8003d34 <WrByte>
 80054e2:	0003      	movs	r3, r0
 80054e4:	0019      	movs	r1, r3
 80054e6:	193b      	adds	r3, r7, r4
 80054e8:	193a      	adds	r2, r7, r4
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	701a      	strb	r2, [r3, #0]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2216      	movs	r2, #22
 80054f4:	2115      	movs	r1, #21
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fe fc1c 	bl	8003d34 <WrByte>
 80054fc:	0003      	movs	r3, r0
 80054fe:	0019      	movs	r1, r3
 8005500:	193b      	adds	r3, r7, r4
 8005502:	193a      	adds	r2, r7, r4
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	701a      	strb	r2, [r3, #0]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	2114      	movs	r1, #20
 8005510:	0018      	movs	r0, r3
 8005512:	f7fe fc0f 	bl	8003d34 <WrByte>
 8005516:	0003      	movs	r3, r0
 8005518:	0019      	movs	r1, r3
 800551a:	193b      	adds	r3, r7, r4
 800551c:	193a      	adds	r2, r7, r4
 800551e:	7812      	ldrb	r2, [r2, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	701a      	strb	r2, [r3, #0]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8005524:	e02f      	b.n	8005586 <vl53l5cx_stop_ranging+0x102>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2513      	movs	r5, #19
 800552a:	197a      	adds	r2, r7, r5
 800552c:	2106      	movs	r1, #6
 800552e:	0018      	movs	r0, r3
 8005530:	f7fe fbbe 	bl	8003cb0 <RdByte>
 8005534:	0003      	movs	r3, r0
 8005536:	0019      	movs	r1, r3
 8005538:	2417      	movs	r4, #23
 800553a:	193b      	adds	r3, r7, r4
 800553c:	193a      	adds	r2, r7, r4
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	701a      	strb	r2, [r3, #0]
			status |= WaitMs(&(p_dev->platform), 10);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	210a      	movs	r1, #10
 8005548:	0018      	movs	r0, r3
 800554a:	f7fe fccb 	bl	8003ee4 <WaitMs>
 800554e:	0003      	movs	r3, r0
 8005550:	0019      	movs	r1, r3
 8005552:	0020      	movs	r0, r4
 8005554:	183b      	adds	r3, r7, r0
 8005556:	183a      	adds	r2, r7, r0
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	701a      	strb	r2, [r3, #0]
			timeout++;	/* Timeout reached after 5 seconds */
 800555e:	2114      	movs	r1, #20
 8005560:	187b      	adds	r3, r7, r1
 8005562:	881a      	ldrh	r2, [r3, #0]
 8005564:	187b      	adds	r3, r7, r1
 8005566:	3201      	adds	r2, #1
 8005568:	801a      	strh	r2, [r3, #0]

			if(timeout > (uint16_t)500)
 800556a:	187b      	adds	r3, r7, r1
 800556c:	881a      	ldrh	r2, [r3, #0]
 800556e:	23fa      	movs	r3, #250	; 0xfa
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	429a      	cmp	r2, r3
 8005574:	d907      	bls.n	8005586 <vl53l5cx_stop_ranging+0x102>
			{
				status |= tmp;
 8005576:	197b      	adds	r3, r7, r5
 8005578:	7819      	ldrb	r1, [r3, #0]
 800557a:	183b      	adds	r3, r7, r0
 800557c:	183a      	adds	r2, r7, r0
 800557e:	7812      	ldrb	r2, [r2, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	701a      	strb	r2, [r3, #0]
				break;
 8005584:	e005      	b.n	8005592 <vl53l5cx_stop_ranging+0x10e>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8005586:	2313      	movs	r3, #19
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	b25b      	sxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	dac9      	bge.n	8005526 <vl53l5cx_stop_ranging+0xa2>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2413      	movs	r4, #19
 8005596:	193a      	adds	r2, r7, r4
 8005598:	2106      	movs	r1, #6
 800559a:	0018      	movs	r0, r3
 800559c:	f7fe fb88 	bl	8003cb0 <RdByte>
 80055a0:	0003      	movs	r3, r0
 80055a2:	0019      	movs	r1, r3
 80055a4:	2517      	movs	r5, #23
 80055a6:	197b      	adds	r3, r7, r5
 80055a8:	197a      	adds	r2, r7, r5
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	701a      	strb	r2, [r3, #0]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80055b0:	193b      	adds	r3, r7, r4
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da1b      	bge.n	80055f2 <vl53l5cx_stop_ranging+0x16e>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	193a      	adds	r2, r7, r4
 80055be:	2107      	movs	r1, #7
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7fe fb75 	bl	8003cb0 <RdByte>
 80055c6:	0003      	movs	r3, r0
 80055c8:	0019      	movs	r1, r3
 80055ca:	197b      	adds	r3, r7, r5
 80055cc:	197a      	adds	r2, r7, r5
 80055ce:	7812      	ldrb	r2, [r2, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	701a      	strb	r2, [r3, #0]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 80055d4:	193b      	adds	r3, r7, r4
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b84      	cmp	r3, #132	; 0x84
 80055da:	d00a      	beq.n	80055f2 <vl53l5cx_stop_ranging+0x16e>
 80055dc:	193b      	adds	r3, r7, r4
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b85      	cmp	r3, #133	; 0x85
 80055e2:	d006      	beq.n	80055f2 <vl53l5cx_stop_ranging+0x16e>
		   status |= tmp;
 80055e4:	193b      	adds	r3, r7, r4
 80055e6:	7819      	ldrb	r1, [r3, #0]
 80055e8:	197b      	adds	r3, r7, r5
 80055ea:	197a      	adds	r2, r7, r5
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4926      	ldr	r1, [pc, #152]	; (8005690 <vl53l5cx_stop_ranging+0x20c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7fe fb9b 	bl	8003d34 <WrByte>
 80055fe:	0003      	movs	r3, r0
 8005600:	0019      	movs	r1, r3
 8005602:	2417      	movs	r4, #23
 8005604:	193b      	adds	r3, r7, r4
 8005606:	193a      	adds	r2, r7, r4
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	2114      	movs	r1, #20
 8005614:	0018      	movs	r0, r3
 8005616:	f7fe fb8d 	bl	8003d34 <WrByte>
 800561a:	0003      	movs	r3, r0
 800561c:	0019      	movs	r1, r3
 800561e:	193b      	adds	r3, r7, r4
 8005620:	193a      	adds	r2, r7, r4
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	2115      	movs	r1, #21
 800562e:	0018      	movs	r0, r3
 8005630:	f7fe fb80 	bl	8003d34 <WrByte>
 8005634:	0003      	movs	r3, r0
 8005636:	0019      	movs	r1, r3
 8005638:	193b      	adds	r3, r7, r4
 800563a:	193a      	adds	r2, r7, r4
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	701a      	strb	r2, [r3, #0]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	2109      	movs	r1, #9
 8005648:	0018      	movs	r0, r3
 800564a:	f7fe fb73 	bl	8003d34 <WrByte>
 800564e:	0003      	movs	r3, r0
 8005650:	0019      	movs	r1, r3
 8005652:	193b      	adds	r3, r7, r4
 8005654:	193a      	adds	r2, r7, r4
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	701a      	strb	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	490c      	ldr	r1, [pc, #48]	; (8005690 <vl53l5cx_stop_ranging+0x20c>)
 8005660:	2202      	movs	r2, #2
 8005662:	0018      	movs	r0, r3
 8005664:	f7fe fb66 	bl	8003d34 <WrByte>
 8005668:	0003      	movs	r3, r0
 800566a:	0019      	movs	r1, r3
 800566c:	193b      	adds	r3, r7, r4
 800566e:	193a      	adds	r2, r7, r4
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	701a      	strb	r2, [r3, #0]

	return status;
 8005676:	193b      	adds	r3, r7, r4
 8005678:	781b      	ldrb	r3, [r3, #0]
}
 800567a:	0018      	movs	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	b006      	add	sp, #24
 8005680:	bdb0      	pop	{r4, r5, r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	00002ffc 	.word	0x00002ffc
 8005688:	000004ff 	.word	0x000004ff
 800568c:	00000aac 	.word	0x00000aac
 8005690:	00007fff 	.word	0x00007fff

08005694 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800569e:	240f      	movs	r4, #15
 80056a0:	193b      	adds	r3, r7, r4
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	22a0      	movs	r2, #160	; 0xa0
 80056ac:	00d2      	lsls	r2, r2, #3
 80056ae:	189a      	adds	r2, r3, r2
 80056b0:	2304      	movs	r3, #4
 80056b2:	2100      	movs	r1, #0
 80056b4:	f7fe fb9c 	bl	8003df0 <RdMulti>
 80056b8:	0003      	movs	r3, r0
 80056ba:	0019      	movs	r1, r3
 80056bc:	193b      	adds	r3, r7, r4
 80056be:	193a      	adds	r2, r7, r4
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	701a      	strb	r2, [r3, #0]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	23a0      	movs	r3, #160	; 0xa0
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	5cd2      	ldrb	r2, [r2, r3]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	789b      	ldrb	r3, [r3, #2]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d023      	beq.n	800571e <vl53l5cx_check_data_ready+0x8a>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	23a0      	movs	r3, #160	; 0xa0
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	2bff      	cmp	r3, #255	; 0xff
 80056e0:	d01d      	beq.n	800571e <vl53l5cx_check_data_ready+0x8a>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <vl53l5cx_check_data_ready+0xbc>)
 80056e6:	5c9b      	ldrb	r3, [r3, r2]
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d118      	bne.n	800571e <vl53l5cx_check_data_ready+0x8a>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a19      	ldr	r2, [pc, #100]	; (8005754 <vl53l5cx_check_data_ready+0xc0>)
 80056f0:	5c9b      	ldrb	r3, [r3, r2]
 80056f2:	001a      	movs	r2, r3
 80056f4:	2305      	movs	r3, #5
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b05      	cmp	r3, #5
 80056fa:	d110      	bne.n	800571e <vl53l5cx_check_data_ready+0x8a>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a16      	ldr	r2, [pc, #88]	; (8005758 <vl53l5cx_check_data_ready+0xc4>)
 8005700:	5c9b      	ldrb	r3, [r3, r2]
 8005702:	001a      	movs	r2, r3
 8005704:	2310      	movs	r3, #16
 8005706:	4013      	ands	r3, r2
 8005708:	d009      	beq.n	800571e <vl53l5cx_check_data_ready+0x8a>
			)
	{
		*p_isReady = (uint8_t)1;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	23a0      	movs	r3, #160	; 0xa0
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	5cd2      	ldrb	r2, [r2, r3]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	709a      	strb	r2, [r3, #2]
 800571c:	e011      	b.n	8005742 <vl53l5cx_check_data_ready+0xae>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a0d      	ldr	r2, [pc, #52]	; (8005758 <vl53l5cx_check_data_ready+0xc4>)
 8005722:	5c9b      	ldrb	r3, [r3, r2]
 8005724:	b25b      	sxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	da08      	bge.n	800573c <vl53l5cx_check_data_ready+0xa8>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a09      	ldr	r2, [pc, #36]	; (8005754 <vl53l5cx_check_data_ready+0xc0>)
 800572e:	5c99      	ldrb	r1, [r3, r2]
 8005730:	220f      	movs	r2, #15
 8005732:	18bb      	adds	r3, r7, r2
 8005734:	18ba      	adds	r2, r7, r2
 8005736:	7812      	ldrb	r2, [r2, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	701a      	strb	r2, [r3, #0]
        }

		*p_isReady = 0;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8005742:	230f      	movs	r3, #15
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	781b      	ldrb	r3, [r3, #0]
}
 8005748:	0018      	movs	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	b005      	add	sp, #20
 800574e:	bd90      	pop	{r4, r7, pc}
 8005750:	00000501 	.word	0x00000501
 8005754:	00000502 	.word	0x00000502
 8005758:	00000503 	.word	0x00000503

0800575c <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 800575c:	b5b0      	push	{r4, r5, r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005766:	241f      	movs	r4, #31
 8005768:	193b      	adds	r3, r7, r4
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 800576e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	25a0      	movs	r5, #160	; 0xa0
 8005774:	00ed      	lsls	r5, r5, #3
 8005776:	195a      	adds	r2, r3, r5
	status |= RdMulti(&(p_dev->platform), 0x0,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2100      	movs	r1, #0
 800577e:	f7fe fb37 	bl	8003df0 <RdMulti>
 8005782:	0003      	movs	r3, r0
 8005784:	0019      	movs	r1, r3
 8005786:	193b      	adds	r3, r7, r4
 8005788:	193a      	adds	r2, r7, r4
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	701a      	strb	r2, [r3, #0]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	23a0      	movs	r3, #160	; 0xa0
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	5cd2      	ldrb	r2, [r2, r3]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	195a      	adds	r2, r3, r5
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	0019      	movs	r1, r3
 80057a8:	0010      	movs	r0, r2
 80057aa:	f7fe fb61 	bl	8003e70 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80057ae:	2310      	movs	r3, #16
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	e117      	b.n	80059e4 <vl53l5cx_get_ranging_data+0x288>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	22a0      	movs	r2, #160	; 0xa0
 80057b8:	00d2      	lsls	r2, r2, #3
 80057ba:	4694      	mov	ip, r2
 80057bc:	4463      	add	r3, ip
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	18d3      	adds	r3, r2, r3
 80057c2:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	071b      	lsls	r3, r3, #28
 80057ca:	0f1b      	lsrs	r3, r3, #28
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d914      	bls.n	80057fc <vl53l5cx_get_ranging_data+0xa0>
                    && (bh_ptr->type < (uint32_t)0xd))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	071b      	lsls	r3, r3, #28
 80057d8:	0f1b      	lsrs	r3, r3, #28
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d80d      	bhi.n	80057fc <vl53l5cx_get_ranging_data+0xa0>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	071b      	lsls	r3, r3, #28
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	001a      	movs	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	041b      	lsls	r3, r3, #16
 80057f2:	0d1b      	lsrs	r3, r3, #20
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4353      	muls	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	e005      	b.n	8005808 <vl53l5cx_get_ranging_data+0xac>
		}
		else
		{
			msize = bh_ptr->size;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	0d1b      	lsrs	r3, r3, #20
 8005804:	b29b      	uxth	r3, r3
 8005806:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	885b      	ldrh	r3, [r3, #2]
 800580c:	4ac9      	ldr	r2, [pc, #804]	; (8005b34 <vl53l5cx_get_ranging_data+0x3d8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d100      	bne.n	8005814 <vl53l5cx_get_ranging_data+0xb8>
 8005812:	e0bf      	b.n	8005994 <vl53l5cx_get_ranging_data+0x238>
 8005814:	4ac7      	ldr	r2, [pc, #796]	; (8005b34 <vl53l5cx_get_ranging_data+0x3d8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	dd00      	ble.n	800581c <vl53l5cx_get_ranging_data+0xc0>
 800581a:	e0db      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 800581c:	4ac6      	ldr	r2, [pc, #792]	; (8005b38 <vl53l5cx_get_ranging_data+0x3dc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d100      	bne.n	8005824 <vl53l5cx_get_ranging_data+0xc8>
 8005822:	e0a7      	b.n	8005974 <vl53l5cx_get_ranging_data+0x218>
 8005824:	4ac4      	ldr	r2, [pc, #784]	; (8005b38 <vl53l5cx_get_ranging_data+0x3dc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	dd00      	ble.n	800582c <vl53l5cx_get_ranging_data+0xd0>
 800582a:	e0d3      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 800582c:	4ac3      	ldr	r2, [pc, #780]	; (8005b3c <vl53l5cx_get_ranging_data+0x3e0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d100      	bne.n	8005834 <vl53l5cx_get_ranging_data+0xd8>
 8005832:	e08e      	b.n	8005952 <vl53l5cx_get_ranging_data+0x1f6>
 8005834:	4ac1      	ldr	r2, [pc, #772]	; (8005b3c <vl53l5cx_get_ranging_data+0x3e0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	dd00      	ble.n	800583c <vl53l5cx_get_ranging_data+0xe0>
 800583a:	e0cb      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 800583c:	4ac0      	ldr	r2, [pc, #768]	; (8005b40 <vl53l5cx_get_ranging_data+0x3e4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d100      	bne.n	8005844 <vl53l5cx_get_ranging_data+0xe8>
 8005842:	e075      	b.n	8005930 <vl53l5cx_get_ranging_data+0x1d4>
 8005844:	4abe      	ldr	r2, [pc, #760]	; (8005b40 <vl53l5cx_get_ranging_data+0x3e4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	dd00      	ble.n	800584c <vl53l5cx_get_ranging_data+0xf0>
 800584a:	e0c3      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 800584c:	4abd      	ldr	r2, [pc, #756]	; (8005b44 <vl53l5cx_get_ranging_data+0x3e8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d05d      	beq.n	800590e <vl53l5cx_get_ranging_data+0x1b2>
 8005852:	4abc      	ldr	r2, [pc, #752]	; (8005b44 <vl53l5cx_get_ranging_data+0x3e8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	dd00      	ble.n	800585a <vl53l5cx_get_ranging_data+0xfe>
 8005858:	e0bc      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 800585a:	4abb      	ldr	r2, [pc, #748]	; (8005b48 <vl53l5cx_get_ranging_data+0x3ec>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d046      	beq.n	80058ee <vl53l5cx_get_ranging_data+0x192>
 8005860:	4ab9      	ldr	r2, [pc, #740]	; (8005b48 <vl53l5cx_get_ranging_data+0x3ec>)
 8005862:	4293      	cmp	r3, r2
 8005864:	dd00      	ble.n	8005868 <vl53l5cx_get_ranging_data+0x10c>
 8005866:	e0b5      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 8005868:	4ab8      	ldr	r2, [pc, #736]	; (8005b4c <vl53l5cx_get_ranging_data+0x3f0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d100      	bne.n	8005870 <vl53l5cx_get_ranging_data+0x114>
 800586e:	e0a1      	b.n	80059b4 <vl53l5cx_get_ranging_data+0x258>
 8005870:	4ab6      	ldr	r2, [pc, #728]	; (8005b4c <vl53l5cx_get_ranging_data+0x3f0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	dd00      	ble.n	8005878 <vl53l5cx_get_ranging_data+0x11c>
 8005876:	e0ad      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 8005878:	4ab5      	ldr	r2, [pc, #724]	; (8005b50 <vl53l5cx_get_ranging_data+0x3f4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d026      	beq.n	80058cc <vl53l5cx_get_ranging_data+0x170>
 800587e:	4ab4      	ldr	r2, [pc, #720]	; (8005b50 <vl53l5cx_get_ranging_data+0x3f4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	dd00      	ble.n	8005886 <vl53l5cx_get_ranging_data+0x12a>
 8005884:	e0a6      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
 8005886:	4ab3      	ldr	r2, [pc, #716]	; (8005b54 <vl53l5cx_get_ranging_data+0x3f8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <vl53l5cx_get_ranging_data+0x138>
 800588c:	4ab2      	ldr	r2, [pc, #712]	; (8005b58 <vl53l5cx_get_ranging_data+0x3fc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00d      	beq.n	80058ae <vl53l5cx_get_ranging_data+0x152>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8005892:	e09f      	b.n	80059d4 <vl53l5cx_get_ranging_data+0x278>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	330c      	adds	r3, #12
 8005898:	001a      	movs	r2, r3
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	23a0      	movs	r3, #160	; 0xa0
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	188a      	adds	r2, r1, r2
 80058a2:	18d3      	adds	r3, r2, r3
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	701a      	strb	r2, [r3, #0]
				break;
 80058ac:	e093      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->ambient_per_spad,
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	3304      	adds	r3, #4
 80058b6:	22a0      	movs	r2, #160	; 0xa0
 80058b8:	00d2      	lsls	r2, r2, #3
 80058ba:	4694      	mov	ip, r2
 80058bc:	4463      	add	r3, ip
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->ambient_per_spad,
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	0019      	movs	r1, r3
 80058c6:	f000 fbfb 	bl	80060c0 <memcpy>
				break;
 80058ca:	e084      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->nb_spads_enabled,
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	3345      	adds	r3, #69	; 0x45
 80058d0:	33ff      	adds	r3, #255	; 0xff
 80058d2:	0018      	movs	r0, r3
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	3304      	adds	r3, #4
 80058d8:	22a0      	movs	r2, #160	; 0xa0
 80058da:	00d2      	lsls	r2, r2, #3
 80058dc:	4694      	mov	ip, r2
 80058de:	4463      	add	r3, ip
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->nb_spads_enabled,
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	0019      	movs	r1, r3
 80058e8:	f000 fbea 	bl	80060c0 <memcpy>
				break;
 80058ec:	e073      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->nb_target_detected,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	1d58      	adds	r0, r3, #5
 80058f2:	30ff      	adds	r0, #255	; 0xff
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	3304      	adds	r3, #4
 80058f8:	22a0      	movs	r2, #160	; 0xa0
 80058fa:	00d2      	lsls	r2, r2, #3
 80058fc:	4694      	mov	ip, r2
 80058fe:	4463      	add	r3, ip
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->nb_target_detected,
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	0019      	movs	r1, r3
 8005908:	f000 fbda 	bl	80060c0 <memcpy>
				break;
 800590c:	e063      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->signal_per_spad,
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2291      	movs	r2, #145	; 0x91
 8005912:	0092      	lsls	r2, r2, #2
 8005914:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3304      	adds	r3, #4
 800591a:	22a0      	movs	r2, #160	; 0xa0
 800591c:	00d2      	lsls	r2, r2, #3
 800591e:	4694      	mov	ip, r2
 8005920:	4463      	add	r3, ip
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->signal_per_spad,
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	0019      	movs	r1, r3
 800592a:	f000 fbc9 	bl	80060c0 <memcpy>
				break;
 800592e:	e052      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->range_sigma_mm,
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	22d1      	movs	r2, #209	; 0xd1
 8005934:	0092      	lsls	r2, r2, #2
 8005936:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	3304      	adds	r3, #4
 800593c:	22a0      	movs	r2, #160	; 0xa0
 800593e:	00d2      	lsls	r2, r2, #3
 8005940:	4694      	mov	ip, r2
 8005942:	4463      	add	r3, ip
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->range_sigma_mm,
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	0019      	movs	r1, r3
 800594c:	f000 fbb8 	bl	80060c0 <memcpy>
				break;
 8005950:	e041      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->distance_mm,
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	22f1      	movs	r2, #241	; 0xf1
 8005956:	0092      	lsls	r2, r2, #2
 8005958:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	3304      	adds	r3, #4
 800595e:	22a0      	movs	r2, #160	; 0xa0
 8005960:	00d2      	lsls	r2, r2, #3
 8005962:	4694      	mov	ip, r2
 8005964:	4463      	add	r3, ip
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->distance_mm,
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	0019      	movs	r1, r3
 800596e:	f000 fba7 	bl	80060c0 <memcpy>
				break;
 8005972:	e030      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->reflectance,
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	4a79      	ldr	r2, [pc, #484]	; (8005b5c <vl53l5cx_get_ranging_data+0x400>)
 8005978:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	3304      	adds	r3, #4
 800597e:	22a0      	movs	r2, #160	; 0xa0
 8005980:	00d2      	lsls	r2, r2, #3
 8005982:	4694      	mov	ip, r2
 8005984:	4463      	add	r3, ip
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->reflectance,
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	0019      	movs	r1, r3
 800598e:	f000 fb97 	bl	80060c0 <memcpy>
				break;
 8005992:	e020      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(p_results->target_status,
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4a72      	ldr	r2, [pc, #456]	; (8005b60 <vl53l5cx_get_ranging_data+0x404>)
 8005998:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	3304      	adds	r3, #4
 800599e:	22a0      	movs	r2, #160	; 0xa0
 80059a0:	00d2      	lsls	r2, r2, #3
 80059a2:	4694      	mov	ip, r2
 80059a4:	4463      	add	r3, ip
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	18d3      	adds	r3, r2, r3
				(void)memcpy(p_results->target_status,
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0019      	movs	r1, r3
 80059ae:	f000 fb87 	bl	80060c0 <memcpy>
				break;
 80059b2:	e010      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				(void)memcpy(&p_results->motion_indicator,
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	4a6b      	ldr	r2, [pc, #428]	; (8005b64 <vl53l5cx_get_ranging_data+0x408>)
 80059b8:	1898      	adds	r0, r3, r2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3304      	adds	r3, #4
 80059be:	22a0      	movs	r2, #160	; 0xa0
 80059c0:	00d2      	lsls	r2, r2, #3
 80059c2:	4694      	mov	ip, r2
 80059c4:	4463      	add	r3, ip
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	18d3      	adds	r3, r2, r3
				(void)memcpy(&p_results->motion_indicator,
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	0019      	movs	r1, r3
 80059ce:	f000 fb77 	bl	80060c0 <memcpy>
				break;
 80059d2:	e000      	b.n	80059d6 <vl53l5cx_get_ranging_data+0x27a>
				break;
 80059d4:	46c0      	nop			; (mov r8, r8)
		}
		i += msize;
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	18d3      	adds	r3, r2, r3
 80059dc:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	3304      	adds	r3, #4
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d200      	bcs.n	80059f0 <vl53l5cx_get_ranging_data+0x294>
 80059ee:	e6e1      	b.n	80057b4 <vl53l5cx_get_ranging_data+0x58>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e00f      	b.n	8005a16 <vl53l5cx_get_ranging_data+0x2ba>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18d3      	adds	r3, r2, r3
 80059fe:	3304      	adds	r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0ada      	lsrs	r2, r3, #11
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	18cb      	adds	r3, r1, r3
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	601a      	str	r2, [r3, #0]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b3f      	cmp	r3, #63	; 0x3f
 8005a1a:	d9ec      	bls.n	80059f6 <vl53l5cx_get_ranging_data+0x29a>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	e05e      	b.n	8005ae0 <vl53l5cx_get_ranging_data+0x384>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	33e1      	adds	r3, #225	; 0xe1
 8005a28:	33ff      	adds	r3, #255	; 0xff
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	18d3      	adds	r3, r2, r3
 8005a2e:	3304      	adds	r3, #4
 8005a30:	2200      	movs	r2, #0
 8005a32:	5e9b      	ldrsh	r3, [r3, r2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da00      	bge.n	8005a3a <vl53l5cx_get_ranging_data+0x2de>
 8005a38:	3303      	adds	r3, #3
 8005a3a:	109b      	asrs	r3, r3, #2
 8005a3c:	b219      	sxth	r1, r3
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	33e1      	adds	r3, #225	; 0xe1
 8005a44:	33ff      	adds	r3, #255	; 0xff
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	18d3      	adds	r3, r2, r3
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	1c0a      	adds	r2, r1, #0
 8005a4e:	801a      	strh	r2, [r3, #0]
		if(p_results->distance_mm[i] < 0)
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	33e1      	adds	r3, #225	; 0xe1
 8005a56:	33ff      	adds	r3, #255	; 0xff
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	18d3      	adds	r3, r2, r3
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2200      	movs	r2, #0
 8005a60:	5e9b      	ldrsh	r3, [r3, r2]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da08      	bge.n	8005a78 <vl53l5cx_get_ranging_data+0x31c>
		{
			p_results->distance_mm[i] = 0;
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	33e1      	adds	r3, #225	; 0xe1
 8005a6c:	33ff      	adds	r3, #255	; 0xff
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	18d3      	adds	r3, r2, r3
 8005a72:	3304      	adds	r3, #4
 8005a74:	2200      	movs	r2, #0
 8005a76:	801a      	strh	r2, [r3, #0]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	4938      	ldr	r1, [pc, #224]	; (8005b5c <vl53l5cx_get_ranging_data+0x400>)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	18d3      	adds	r3, r2, r3
 8005a80:	185b      	adds	r3, r3, r1
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	b2d8      	uxtb	r0, r3
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	4934      	ldr	r1, [pc, #208]	; (8005b5c <vl53l5cx_get_ranging_data+0x400>)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	18d3      	adds	r3, r2, r3
 8005a90:	185b      	adds	r3, r3, r1
 8005a92:	1c02      	adds	r2, r0, #0
 8005a94:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	33a1      	adds	r3, #161	; 0xa1
 8005a9c:	33ff      	adds	r3, #255	; 0xff
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	18d3      	adds	r3, r2, r3
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	b299      	uxth	r1, r3
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	33a1      	adds	r3, #161	; 0xa1
 8005ab0:	33ff      	adds	r3, #255	; 0xff
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	18d3      	adds	r3, r2, r3
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	1c0a      	adds	r2, r1, #0
 8005aba:	801a      	strh	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3390      	adds	r3, #144	; 0x90
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	0ada      	lsrs	r2, r3, #11
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	3390      	adds	r3, #144	; 0x90
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	18cb      	adds	r3, r1, r3
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	601a      	str	r2, [r3, #0]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	3301      	adds	r3, #1
 8005ade:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ae4:	d99d      	bls.n	8005a22 <vl53l5cx_get_ranging_data+0x2c6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e01d      	b.n	8005b28 <vl53l5cx_get_ranging_data+0x3cc>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	2382      	movs	r3, #130	; 0x82
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	188a      	adds	r2, r1, r2
 8005af6:	18d3      	adds	r3, r2, r3
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d111      	bne.n	8005b22 <vl53l5cx_get_ranging_data+0x3c6>
			for(j = 0; j < (uint32_t)
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e00b      	b.n	8005b1c <vl53l5cx_get_ranging_data+0x3c0>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	18d3      	adds	r3, r2, r3
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	4914      	ldr	r1, [pc, #80]	; (8005b60 <vl53l5cx_get_ranging_data+0x404>)
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	185b      	adds	r3, r3, r1
 8005b12:	22ff      	movs	r2, #255	; 0xff
 8005b14:	701a      	strb	r2, [r3, #0]
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <vl53l5cx_get_ranging_data+0x3a8>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3301      	adds	r3, #1
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8005b2c:	d9de      	bls.n	8005aec <vl53l5cx_get_ranging_data+0x390>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e032      	b.n	8005b9a <vl53l5cx_get_ranging_data+0x43e>
 8005b34:	0000e084 	.word	0x0000e084
 8005b38:	0000e044 	.word	0x0000e044
 8005b3c:	0000df44 	.word	0x0000df44
 8005b40:	0000dec4 	.word	0x0000dec4
 8005b44:	0000dbc4 	.word	0x0000dbc4
 8005b48:	0000db84 	.word	0x0000db84
 8005b4c:	0000d858 	.word	0x0000d858
 8005b50:	000055d0 	.word	0x000055d0
 8005b54:	000054b4 	.word	0x000054b4
 8005b58:	000054d0 	.word	0x000054d0
 8005b5c:	00000444 	.word	0x00000444
 8005b60:	00000484 	.word	0x00000484
 8005b64:	000004c4 	.word	0x000004c4
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	3333      	adds	r3, #51	; 0x33
 8005b6e:	33ff      	adds	r3, #255	; 0xff
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	18d3      	adds	r3, r2, r3
 8005b74:	3308      	adds	r3, #8
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	492b      	ldr	r1, [pc, #172]	; (8005c28 <vl53l5cx_get_ranging_data+0x4cc>)
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f7fa fac2 	bl	8000104 <__udivsi3>
 8005b80:	0003      	movs	r3, r0
 8005b82:	0019      	movs	r1, r3
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	3333      	adds	r3, #51	; 0x33
 8005b8a:	33ff      	adds	r3, #255	; 0xff
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	18d3      	adds	r3, r2, r3
 8005b90:	3308      	adds	r3, #8
 8005b92:	6019      	str	r1, [r3, #0]
	for(i = 0; i < (uint32_t)32; i++)
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	3301      	adds	r3, #1
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b1f      	cmp	r3, #31
 8005b9e:	d9e3      	bls.n	8005b68 <vl53l5cx_get_ranging_data+0x40c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	23a1      	movs	r3, #161	; 0xa1
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	200e      	movs	r0, #14
 8005bac:	183b      	adds	r3, r7, r0
 8005bae:	0212      	lsls	r2, r2, #8
 8005bb0:	801a      	strh	r2, [r3, #0]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <vl53l5cx_get_ranging_data+0x4d0>)
 8005bb6:	5c9b      	ldrb	r3, [r3, r2]
 8005bb8:	b299      	uxth	r1, r3
 8005bba:	183b      	adds	r3, r7, r0
 8005bbc:	183a      	adds	r2, r7, r0
 8005bbe:	8812      	ldrh	r2, [r2, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	801a      	strh	r2, [r3, #0]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8005bc8:	1f1a      	subs	r2, r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	23a0      	movs	r3, #160	; 0xa0
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	188a      	adds	r2, r1, r2
 8005bd2:	18d3      	adds	r3, r2, r3
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	240c      	movs	r4, #12
 8005bda:	193b      	adds	r3, r7, r4
 8005bdc:	0212      	lsls	r2, r2, #8
 8005bde:	801a      	strh	r2, [r3, #0]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 8005be4:	1eda      	subs	r2, r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	23a0      	movs	r3, #160	; 0xa0
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	188a      	adds	r2, r1, r2
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	193b      	adds	r3, r7, r4
 8005bf6:	193a      	adds	r2, r7, r4
 8005bf8:	8812      	ldrh	r2, [r2, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	801a      	strh	r2, [r3, #0]

	if(header_id != footer_id)
 8005bfe:	183a      	adds	r2, r7, r0
 8005c00:	193b      	adds	r3, r7, r4
 8005c02:	8812      	ldrh	r2, [r2, #0]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d006      	beq.n	8005c18 <vl53l5cx_get_ranging_data+0x4bc>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8005c0a:	221f      	movs	r2, #31
 8005c0c:	18bb      	adds	r3, r7, r2
 8005c0e:	18ba      	adds	r2, r7, r2
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	2102      	movs	r1, #2
 8005c14:	430a      	orrs	r2, r1
 8005c16:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8005c18:	231f      	movs	r3, #31
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	781b      	ldrb	r3, [r3, #0]
}
 8005c1e:	0018      	movs	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b008      	add	sp, #32
 8005c24:	bdb0      	pop	{r4, r5, r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	0000ffff 	.word	0x0000ffff
 8005c2c:	00000509 	.word	0x00000509

08005c30 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005c3a:	240f      	movs	r4, #15
 8005c3c:	193b      	adds	r3, r7, r4
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	22a0      	movs	r2, #160	; 0xa0
 8005c46:	00d2      	lsls	r2, r2, #3
 8005c48:	1899      	adds	r1, r3, r2
 8005c4a:	4a0f      	ldr	r2, [pc, #60]	; (8005c88 <vl53l5cx_get_resolution+0x58>)
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	2308      	movs	r3, #8
 8005c50:	f000 f848 	bl	8005ce4 <vl53l5cx_dci_read_data>
 8005c54:	0003      	movs	r3, r0
 8005c56:	0019      	movs	r1, r3
 8005c58:	0020      	movs	r0, r4
 8005c5a:	183b      	adds	r3, r7, r0
 8005c5c:	183a      	adds	r2, r7, r0
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	701a      	strb	r2, [r3, #0]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	23a0      	movs	r3, #160	; 0xa0
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4907      	ldr	r1, [pc, #28]	; (8005c8c <vl53l5cx_get_resolution+0x5c>)
 8005c70:	5c52      	ldrb	r2, [r2, r1]
 8005c72:	4353      	muls	r3, r2
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	701a      	strb	r2, [r3, #0]

	return status;
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	781b      	ldrb	r3, [r3, #0]
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b005      	add	sp, #20
 8005c84:	bd90      	pop	{r4, r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	00005450 	.word	0x00005450
 8005c8c:	00000501 	.word	0x00000501

08005c90 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af04      	add	r7, sp, #16
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	000a      	movs	r2, r1
 8005c9a:	1cfb      	adds	r3, r7, #3
 8005c9c:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005c9e:	240f      	movs	r4, #15
 8005ca0:	193b      	adds	r3, r7, r4
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	22a0      	movs	r2, #160	; 0xa0
 8005caa:	00d2      	lsls	r2, r2, #3
 8005cac:	1899      	adds	r1, r3, r2
 8005cae:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <vl53l5cx_set_ranging_frequency_hz+0x50>)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	1cfb      	adds	r3, r7, #3
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	2304      	movs	r3, #4
 8005cc0:	f000 f994 	bl	8005fec <vl53l5cx_dci_replace_data>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	193b      	adds	r3, r7, r4
 8005cca:	193a      	adds	r2, r7, r4
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	701a      	strb	r2, [r3, #0]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8005cd2:	193b      	adds	r3, r7, r4
 8005cd4:	781b      	ldrb	r3, [r3, #0]
}
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b005      	add	sp, #20
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	00005458 	.word	0x00005458

08005ce4 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005ce4:	b5b0      	push	{r4, r5, r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	001a      	movs	r2, r3
 8005cf2:	1cbb      	adds	r3, r7, #2
 8005cf4:	801a      	strh	r2, [r3, #0]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8005cf6:	2525      	movs	r5, #37	; 0x25
 8005cf8:	197b      	adds	r3, r7, r5
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8005cfe:	1cbb      	adds	r3, r7, #2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8005d06:	2314      	movs	r3, #20
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	4a46      	ldr	r2, [pc, #280]	; (8005e24 <vl53l5cx_dci_read_data+0x140>)
 8005d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d0e:	c313      	stmia	r3!, {r0, r1, r4}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8005d10:	1cbb      	adds	r3, r7, #2
 8005d12:	881a      	ldrh	r2, [r3, #0]
 8005d14:	23b4      	movs	r3, #180	; 0xb4
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d903      	bls.n	8005d24 <vl53l5cx_dci_read_data+0x40>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8005d1c:	197b      	adds	r3, r7, r5
 8005d1e:	22ff      	movs	r2, #255	; 0xff
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e077      	b.n	8005e14 <vl53l5cx_dci_read_data+0x130>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	2114      	movs	r1, #20
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	701a      	strb	r2, [r3, #0]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	705a      	strb	r2, [r3, #1]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8005d38:	1cbb      	adds	r3, r7, #2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	111b      	asrs	r3, r3, #4
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	709a      	strb	r2, [r3, #2]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005d44:	1cbb      	adds	r3, r7, #2
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	70da      	strb	r2, [r3, #3]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	4934      	ldr	r1, [pc, #208]	; (8005e28 <vl53l5cx_dci_read_data+0x144>)
 8005d58:	230c      	movs	r3, #12
 8005d5a:	f7fe f821 	bl	8003da0 <WrMulti>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	0019      	movs	r1, r3
 8005d62:	2425      	movs	r4, #37	; 0x25
 8005d64:	193b      	adds	r3, r7, r4
 8005d66:	193a      	adds	r2, r7, r4
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	701a      	strb	r2, [r3, #0]
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005d6e:	23b0      	movs	r3, #176	; 0xb0
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	2203      	movs	r2, #3
 8005d76:	9201      	str	r2, [sp, #4]
 8005d78:	22ff      	movs	r2, #255	; 0xff
 8005d7a:	9200      	str	r2, [sp, #0]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	2104      	movs	r1, #4
 8005d80:	f7fe f8be 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8005d84:	0003      	movs	r3, r0
 8005d86:	0019      	movs	r1, r3
 8005d88:	193b      	adds	r3, r7, r4
 8005d8a:	193a      	adds	r2, r7, r4
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005d92:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	25a0      	movs	r5, #160	; 0xa0
 8005d98:	00ed      	lsls	r5, r5, #3
 8005d9a:	195a      	adds	r2, r3, r5
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	4923      	ldr	r1, [pc, #140]	; (8005e2c <vl53l5cx_dci_read_data+0x148>)
 8005da0:	f7fe f826 	bl	8003df0 <RdMulti>
 8005da4:	0003      	movs	r3, r0
 8005da6:	0019      	movs	r1, r3
 8005da8:	193b      	adds	r3, r7, r4
 8005daa:	193a      	adds	r2, r7, r4
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	701a      	strb	r2, [r3, #0]
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	195a      	adds	r2, r3, r5
 8005db6:	1cbb      	adds	r3, r7, #2
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	f7fe f855 	bl	8003e70 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8005dc6:	2326      	movs	r3, #38	; 0x26
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	2200      	movs	r2, #0
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e018      	b.n	8005e02 <vl53l5cx_dci_read_data+0x11e>
			data[i] = p_dev->temp_buffer[i + 4];
 8005dd0:	2426      	movs	r4, #38	; 0x26
 8005dd2:	193b      	adds	r3, r7, r4
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	5e9b      	ldrsh	r3, [r3, r2]
 8005dd8:	1d19      	adds	r1, r3, #4
 8005dda:	193b      	adds	r3, r7, r4
 8005ddc:	2200      	movs	r2, #0
 8005dde:	5e9b      	ldrsh	r3, [r3, r2]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	18d3      	adds	r3, r2, r3
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	22a0      	movs	r2, #160	; 0xa0
 8005de8:	00d2      	lsls	r2, r2, #3
 8005dea:	1841      	adds	r1, r0, r1
 8005dec:	188a      	adds	r2, r1, r2
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8005df2:	193b      	adds	r3, r7, r4
 8005df4:	2200      	movs	r2, #0
 8005df6:	5e9b      	ldrsh	r3, [r3, r2]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	193b      	adds	r3, r7, r4
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	1cbb      	adds	r3, r7, #2
 8005e04:	2200      	movs	r2, #0
 8005e06:	5e9b      	ldrsh	r3, [r3, r2]
 8005e08:	2226      	movs	r2, #38	; 0x26
 8005e0a:	18ba      	adds	r2, r7, r2
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5e52      	ldrsh	r2, [r2, r1]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	dbdd      	blt.n	8005dd0 <vl53l5cx_dci_read_data+0xec>
		}
	}

	return status;
 8005e14:	2325      	movs	r3, #37	; 0x25
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	781b      	ldrb	r3, [r3, #0]
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b00a      	add	sp, #40	; 0x28
 8005e20:	bdb0      	pop	{r4, r5, r7, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	0800614c 	.word	0x0800614c
 8005e28:	00002ff4 	.word	0x00002ff4
 8005e2c:	00002c04 	.word	0x00002c04

08005e30 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b08d      	sub	sp, #52	; 0x34
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	1cbb      	adds	r3, r7, #2
 8005e40:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005e42:	2027      	movs	r0, #39	; 0x27
 8005e44:	183b      	adds	r3, r7, r0
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8005e4a:	231c      	movs	r3, #28
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005e52:	2114      	movs	r1, #20
 8005e54:	187b      	adds	r3, r7, r1
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	187b      	adds	r3, r7, r1
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	705a      	strb	r2, [r3, #1]
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	2200      	movs	r2, #0
 8005e64:	709a      	strb	r2, [r3, #2]
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	220f      	movs	r2, #15
 8005e6a:	70da      	strb	r2, [r3, #3]
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	2205      	movs	r2, #5
 8005e70:	711a      	strb	r2, [r3, #4]
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	2201      	movs	r2, #1
 8005e76:	715a      	strb	r2, [r3, #5]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8005e78:	1cbb      	adds	r3, r7, #2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	121b      	asrs	r3, r3, #8
 8005e80:	b2da      	uxtb	r2, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	719a      	strb	r2, [r3, #6]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8005e86:	1cbb      	adds	r3, r7, #2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	b2da      	uxtb	r2, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005e90:	187b      	adds	r3, r7, r1
 8005e92:	71da      	strb	r2, [r3, #7]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8005e94:	2322      	movs	r3, #34	; 0x22
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	1cba      	adds	r2, r7, #2
 8005e9a:	8812      	ldrh	r2, [r2, #0]
 8005e9c:	4952      	ldr	r1, [pc, #328]	; (8005fe8 <vl53l5cx_dci_write_data+0x1b8>)
 8005e9e:	1a8a      	subs	r2, r1, r2
 8005ea0:	801a      	strh	r2, [r3, #0]
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8005ea2:	1cbb      	adds	r3, r7, #2
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	23b4      	movs	r3, #180	; 0xb4
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d903      	bls.n	8005eb6 <vl53l5cx_dci_write_data+0x86>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	22ff      	movs	r2, #255	; 0xff
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	e090      	b.n	8005fd8 <vl53l5cx_dci_write_data+0x1a8>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	211c      	movs	r1, #28
 8005ebe:	187b      	adds	r3, r7, r1
 8005ec0:	701a      	strb	r2, [r3, #0]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	705a      	strb	r2, [r3, #1]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8005eca:	1cbb      	adds	r3, r7, #2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	111b      	asrs	r3, r3, #4
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	187b      	adds	r3, r7, r1
 8005ed4:	709a      	strb	r2, [r3, #2]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005ed6:	1cbb      	adds	r3, r7, #2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	70da      	strb	r2, [r3, #3]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8005ee4:	1cbb      	adds	r3, r7, #2
 8005ee6:	881a      	ldrh	r2, [r3, #0]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7fd ffbf 	bl	8003e70 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005ef2:	1cbb      	adds	r3, r7, #2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	2324      	movs	r3, #36	; 0x24
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e019      	b.n	8005f36 <vl53l5cx_dci_write_data+0x106>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8005f02:	2424      	movs	r4, #36	; 0x24
 8005f04:	193b      	adds	r3, r7, r4
 8005f06:	2200      	movs	r2, #0
 8005f08:	5e9b      	ldrsh	r3, [r3, r2]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	18d3      	adds	r3, r2, r3
 8005f0e:	193a      	adds	r2, r7, r4
 8005f10:	2100      	movs	r1, #0
 8005f12:	5e52      	ldrsh	r2, [r2, r1]
 8005f14:	3204      	adds	r2, #4
 8005f16:	7818      	ldrb	r0, [r3, #0]
 8005f18:	68f9      	ldr	r1, [r7, #12]
 8005f1a:	23a0      	movs	r3, #160	; 0xa0
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	188a      	adds	r2, r1, r2
 8005f20:	18d3      	adds	r3, r2, r3
 8005f22:	1c02      	adds	r2, r0, #0
 8005f24:	701a      	strb	r2, [r3, #0]
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	2200      	movs	r2, #0
 8005f2a:	5e9b      	ldrsh	r3, [r3, r2]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	193b      	adds	r3, r7, r4
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	2324      	movs	r3, #36	; 0x24
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	5e9b      	ldrsh	r3, [r3, r2]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dadf      	bge.n	8005f02 <vl53l5cx_dci_write_data+0xd2>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	24a0      	movs	r4, #160	; 0xa0
 8005f46:	00e4      	lsls	r4, r4, #3
 8005f48:	191a      	adds	r2, r3, r4
 8005f4a:	231c      	movs	r3, #28
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	0010      	movs	r0, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	2304      	movs	r3, #4
 8005f54:	001a      	movs	r2, r3
 8005f56:	f000 f8b3 	bl	80060c0 <memcpy>
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8005f5a:	1cbb      	adds	r3, r7, #2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	22a0      	movs	r2, #160	; 0xa0
 8005f62:	00d2      	lsls	r2, r2, #3
 8005f64:	4694      	mov	ip, r2
 8005f66:	4463      	add	r3, ip
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	18d2      	adds	r2, r2, r3
 8005f6c:	2314      	movs	r3, #20
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	0010      	movs	r0, r2
 8005f72:	0019      	movs	r1, r3
 8005f74:	2308      	movs	r3, #8
 8005f76:	001a      	movs	r2, r3
 8005f78:	f000 f8a2 	bl	80060c0 <memcpy>
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8005f7c:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	191a      	adds	r2, r3, r4
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8005f82:	1cbb      	adds	r3, r7, #2
 8005f84:	881b      	ldrh	r3, [r3, #0]
		status |= WrMulti(&(p_dev->platform),address,
 8005f86:	330c      	adds	r3, #12
 8005f88:	001c      	movs	r4, r3
 8005f8a:	2322      	movs	r3, #34	; 0x22
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	8819      	ldrh	r1, [r3, #0]
 8005f90:	0023      	movs	r3, r4
 8005f92:	f7fd ff05 	bl	8003da0 <WrMulti>
 8005f96:	0003      	movs	r3, r0
 8005f98:	0019      	movs	r1, r3
 8005f9a:	2427      	movs	r4, #39	; 0x27
 8005f9c:	193b      	adds	r3, r7, r4
 8005f9e:	193a      	adds	r2, r7, r4
 8005fa0:	7812      	ldrb	r2, [r2, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	701a      	strb	r2, [r3, #0]
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005fa6:	23b0      	movs	r3, #176	; 0xb0
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	2203      	movs	r2, #3
 8005fae:	9201      	str	r2, [sp, #4]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	9200      	str	r2, [sp, #0]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	2104      	movs	r1, #4
 8005fb8:	f7fd ffa2 	bl	8003f00 <_vl53l5cx_poll_for_answer>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	193b      	adds	r3, r7, r4
 8005fc2:	193a      	adds	r2, r7, r4
 8005fc4:	7812      	ldrb	r2, [r2, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	701a      	strb	r2, [r3, #0]
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8005fca:	1cbb      	adds	r3, r7, #2
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	0011      	movs	r1, r2
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7fd ff4c 	bl	8003e70 <SwapBuffer>
	}

	return status;
 8005fd8:	2327      	movs	r3, #39	; 0x27
 8005fda:	18fb      	adds	r3, r7, r3
 8005fdc:	781b      	ldrb	r3, [r3, #0]
}
 8005fde:	0018      	movs	r0, r3
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b00b      	add	sp, #44	; 0x2c
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	00002ff4 	.word	0x00002ff4

08005fec <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	1cbb      	adds	r3, r7, #2
 8005ffc:	801a      	strh	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005ffe:	2417      	movs	r4, #23
 8006000:	193b      	adds	r3, r7, r4
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8006006:	1cbb      	adds	r3, r7, #2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fe68 	bl	8005ce4 <vl53l5cx_dci_read_data>
 8006014:	0003      	movs	r3, r0
 8006016:	0019      	movs	r1, r3
 8006018:	193b      	adds	r3, r7, r4
 800601a:	193a      	adds	r2, r7, r4
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	701a      	strb	r2, [r3, #0]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8006022:	2328      	movs	r3, #40	; 0x28
 8006024:	2108      	movs	r1, #8
 8006026:	185b      	adds	r3, r3, r1
 8006028:	19db      	adds	r3, r3, r7
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	18d0      	adds	r0, r2, r3
 8006030:	2324      	movs	r3, #36	; 0x24
 8006032:	185b      	adds	r3, r3, r1
 8006034:	19db      	adds	r3, r3, r7
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	0019      	movs	r1, r3
 800603c:	f000 f840 	bl	80060c0 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8006040:	1cbb      	adds	r3, r7, #2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7ff fef1 	bl	8005e30 <vl53l5cx_dci_write_data>
 800604e:	0003      	movs	r3, r0
 8006050:	0019      	movs	r1, r3
 8006052:	193b      	adds	r3, r7, r4
 8006054:	193a      	adds	r2, r7, r4
 8006056:	7812      	ldrb	r2, [r2, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	701a      	strb	r2, [r3, #0]

	return status;
 800605c:	193b      	adds	r3, r7, r4
 800605e:	781b      	ldrb	r3, [r3, #0]
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	b007      	add	sp, #28
 8006066:	bd90      	pop	{r4, r7, pc}

08006068 <memset>:
 8006068:	0003      	movs	r3, r0
 800606a:	1882      	adds	r2, r0, r2
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	7019      	strb	r1, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <__libc_init_array>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	2600      	movs	r6, #0
 800607c:	4c0c      	ldr	r4, [pc, #48]	; (80060b0 <__libc_init_array+0x38>)
 800607e:	4d0d      	ldr	r5, [pc, #52]	; (80060b4 <__libc_init_array+0x3c>)
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	42a6      	cmp	r6, r4
 8006086:	d109      	bne.n	800609c <__libc_init_array+0x24>
 8006088:	2600      	movs	r6, #0
 800608a:	f000 f823 	bl	80060d4 <_init>
 800608e:	4c0a      	ldr	r4, [pc, #40]	; (80060b8 <__libc_init_array+0x40>)
 8006090:	4d0a      	ldr	r5, [pc, #40]	; (80060bc <__libc_init_array+0x44>)
 8006092:	1b64      	subs	r4, r4, r5
 8006094:	10a4      	asrs	r4, r4, #2
 8006096:	42a6      	cmp	r6, r4
 8006098:	d105      	bne.n	80060a6 <__libc_init_array+0x2e>
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	00b3      	lsls	r3, r6, #2
 800609e:	58eb      	ldr	r3, [r5, r3]
 80060a0:	4798      	blx	r3
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7ee      	b.n	8006084 <__libc_init_array+0xc>
 80060a6:	00b3      	lsls	r3, r6, #2
 80060a8:	58eb      	ldr	r3, [r5, r3]
 80060aa:	4798      	blx	r3
 80060ac:	3601      	adds	r6, #1
 80060ae:	e7f2      	b.n	8006096 <__libc_init_array+0x1e>
 80060b0:	0801b8e4 	.word	0x0801b8e4
 80060b4:	0801b8e4 	.word	0x0801b8e4
 80060b8:	0801b8e8 	.word	0x0801b8e8
 80060bc:	0801b8e4 	.word	0x0801b8e4

080060c0 <memcpy>:
 80060c0:	2300      	movs	r3, #0
 80060c2:	b510      	push	{r4, lr}
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d100      	bne.n	80060ca <memcpy+0xa>
 80060c8:	bd10      	pop	{r4, pc}
 80060ca:	5ccc      	ldrb	r4, [r1, r3]
 80060cc:	54c4      	strb	r4, [r0, r3]
 80060ce:	3301      	adds	r3, #1
 80060d0:	e7f8      	b.n	80060c4 <memcpy+0x4>
	...

080060d4 <_init>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr

080060e0 <_fini>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr
