
LEDMatrixApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1a0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015d78  0800b338  0800b338  0001b338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080210b0  080210b0  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  080210b0  080210b0  000310b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080210b8  080210b8  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080210b8  080210b8  000310b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080210bc  080210bc  000310bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080210c0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c0  20000080  08021140  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005540  08021140  00045540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5cf  00000000  00000000  00040143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c6  00000000  00000000  0004e712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000923  00000000  00000000  00051480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001740c  00000000  00000000  00051da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fafd  00000000  00000000  000691af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a92e  00000000  00000000  00078cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003988  00000000  00000000  001035dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00106f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b320 	.word	0x0800b320

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	0800b320 	.word	0x0800b320

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b970 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14a      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4694      	mov	ip, r2
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0xe2>
 8000c26:	fab2 f382 	clz	r3, r2
 8000c2a:	b143      	cbz	r3, 8000c3e <__udivmoddi4+0x2e>
 8000c2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c30:	f1c3 0220 	rsb	r2, r3, #32
 8000c34:	409f      	lsls	r7, r3
 8000c36:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3a:	4317      	orrs	r7, r2
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c42:	fa1f f58c 	uxth.w	r5, ip
 8000c46:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4a:	0c22      	lsrs	r2, r4, #16
 8000c4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	fb01 f005 	mul.w	r0, r1, r5
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x62>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c64:	f080 811c 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f240 8119 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4462      	add	r2, ip
 8000c72:	1a12      	subs	r2, r2, r0
 8000c74:	b2a4      	uxth	r4, r4
 8000c76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	fb00 f505 	mul.w	r5, r0, r5
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x90>
 8000c8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x294>
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x294>
 8000c9c:	4464      	add	r4, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11e      	cbz	r6, 8000cb2 <__udivmoddi4+0xa2>
 8000caa:	40dc      	lsrs	r4, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0xbc>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80ed 	beq.w	8000e9a <__udivmoddi4+0x28a>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d149      	bne.n	8000d68 <__udivmoddi4+0x158>
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	d302      	bcc.n	8000cde <__udivmoddi4+0xce>
 8000cd8:	4282      	cmp	r2, r0
 8000cda:	f200 80f8 	bhi.w	8000ece <__udivmoddi4+0x2be>
 8000cde:	1a84      	subs	r4, r0, r2
 8000ce0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d0e2      	beq.n	8000cb2 <__udivmoddi4+0xa2>
 8000cec:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf0:	e7df      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xe6>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d00:	1a8a      	subs	r2, r1, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d10:	fb07 2015 	mls	r0, r7, r5, r2
 8000d14:	0c22      	lsrs	r2, r4, #16
 8000d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1a:	fb0e f005 	mul.w	r0, lr, r5
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d22:	eb1c 0202 	adds.w	r2, ip, r2
 8000d26:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2b8>
 8000d32:	4645      	mov	r5, r8
 8000d34:	1a12      	subs	r2, r2, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d3c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x14e>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x14c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2c2>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d66:	e79f      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000d68:	f1c1 0720 	rsb	r7, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7e:	40fd      	lsrs	r5, r7
 8000d80:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d84:	4323      	orrs	r3, r4
 8000d86:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d92:	0c1c      	lsrs	r4, r3, #16
 8000d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d98:	fb08 f50e 	mul.w	r5, r8, lr
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	fa00 f001 	lsl.w	r0, r0, r1
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2b4>
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2b4>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4464      	add	r4, ip
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	b29d      	uxth	r5, r3
 8000dc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dcc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2ac>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2ac>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dee:	fba3 9502 	umull	r9, r5, r3, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46ae      	mov	lr, r5
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x29c>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x298>
 8000e00:	b156      	cbz	r6, 8000e18 <__udivmoddi4+0x208>
 8000e02:	ebb0 0208 	subs.w	r2, r0, r8
 8000e06:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0e:	40ca      	lsrs	r2, r1
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	4317      	orrs	r7, r2
 8000e14:	e9c6 7400 	strd	r7, r4, [r6]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	f1c3 0120 	rsb	r1, r3, #32
 8000e24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e28:	fa20 f201 	lsr.w	r2, r0, r1
 8000e2c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e30:	409d      	lsls	r5, r3
 8000e32:	432a      	orrs	r2, r5
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e40:	fb07 1510 	mls	r5, r7, r0, r1
 8000e44:	0c11      	lsrs	r1, r2, #16
 8000e46:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4e:	428d      	cmp	r5, r1
 8000e50:	fa04 f403 	lsl.w	r4, r4, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x258>
 8000e56:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e60:	428d      	cmp	r5, r1
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	1b49      	subs	r1, r1, r5
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e70:	fb07 1115 	mls	r1, r7, r5, r1
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	fb05 f10e 	mul.w	r1, r5, lr
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x282>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a52      	subs	r2, r2, r1
 8000e94:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0xfc>
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	e6e6      	b.n	8000c72 <__udivmoddi4+0x62>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x90>
 8000ea8:	4548      	cmp	r0, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb8:	4645      	mov	r5, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x282>
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x258>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec8:	3d02      	subs	r5, #2
 8000eca:	4462      	add	r2, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e70a      	b.n	8000ce8 <__udivmoddi4+0xd8>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x14e>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fe84 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f80a 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f8cc 	bl	8001084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eec:	f000 f872 	bl	8000fd4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ef0:	f000 f89e 	bl	8001030 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  status |= HAL_I2C_Master_Transmit(&hi2c2, 0x08 << 1, buff, 5, 100);
	  matrix_app_main();
 8000ef4:	f000 fdbc 	bl	8001a70 <matrix_app_main>
 8000ef8:	e7fc      	b.n	8000ef4 <main+0x18>
	...

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 fffc 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f70:	2310      	movs	r3, #16
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fb60 	bl	800364c <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f92:	f000 f96b 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fdc2 	bl	8003b3c <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fbe:	f000 f955 	bl	800126c <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_I2C1_Init+0x54>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_I2C1_Init+0x58>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_I2C1_Init+0x50>)
 8001012:	f001 f9f5 	bl	8002400 <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800101c:	f000 f926 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000009c 	.word	0x2000009c
 8001028:	40005400 	.word	0x40005400
 800102c:	00061a80 	.word	0x00061a80

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f002 ff88 	bl	8003f7c <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f8fb 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000f0 	.word	0x200000f0
 8001080:	40004400 	.word	0x40004400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a61      	ldr	r2, [pc, #388]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b54      	ldr	r3, [pc, #336]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a53      	ldr	r2, [pc, #332]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPn1_GPIO_Port, LPn1_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2101      	movs	r1, #1
 800110e:	4847      	ldr	r0, [pc, #284]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001110:	f001 f92a 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LPn2_Pin|LPn3_Pin|LPn4_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	210e      	movs	r1, #14
 8001118:	4844      	ldr	r0, [pc, #272]	; (800122c <MX_GPIO_Init+0x1a8>)
 800111a:	f001 f925 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4843      	ldr	r0, [pc, #268]	; (8001230 <MX_GPIO_Init+0x1ac>)
 8001124:	f001 f920 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2111      	movs	r1, #17
 800112c:	4841      	ldr	r0, [pc, #260]	; (8001234 <MX_GPIO_Init+0x1b0>)
 800112e:	f001 f91b 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_C_GPIO_Port, I2C_RST_C_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	483f      	ldr	r0, [pc, #252]	; (8001234 <MX_GPIO_Init+0x1b0>)
 8001138:	f001 f916 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4836      	ldr	r0, [pc, #216]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001154:	f000 ff84 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPn1_Pin LPn2_Pin LPn4_Pin */
  GPIO_InitStruct.Pin = LPn1_Pin|LPn2_Pin|LPn4_Pin;
 8001158:	230b      	movs	r3, #11
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001170:	f000 ff76 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPn3_Pin */
  GPIO_InitStruct.Pin = LPn3_Pin;
 8001174:	2304      	movs	r3, #4
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPn3_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4828      	ldr	r0, [pc, #160]	; (800122c <MX_GPIO_Init+0x1a8>)
 800118c:	f000 ff68 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_C_Pin INT1_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8001190:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8001194:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <MX_GPIO_Init+0x1ac>)
 80011a8:	f000 ff5a 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ac:	2320      	movs	r3, #32
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	481b      	ldr	r0, [pc, #108]	; (8001230 <MX_GPIO_Init+0x1ac>)
 80011c4:	f000 ff4c 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_C_Pin LPn_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|LPn_C_Pin;
 80011c8:	2311      	movs	r3, #17
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <MX_GPIO_Init+0x1b0>)
 80011e0:	f000 ff3e 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_C_Pin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 80011e4:	2308      	movs	r3, #8
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_GPIO_Init+0x1b0>)
 80011fc:	f000 ff30 	bl	8002060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200a      	movs	r0, #10
 8001206:	f000 fe62 	bl	8001ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800120a:	200a      	movs	r0, #10
 800120c:	f000 fe7b 	bl	8001f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	f000 fe5a 	bl	8001ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f000 fe73 	bl	8001f06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40020800 	.word	0x40020800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001248:	d106      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x20>
	  vl53lmz_stop_ranging(&Sensor1Cfg);
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <HAL_GPIO_EXTI_Callback+0x2c>)
 800124c:	f004 ff5a 	bl	8006104 <vl53lmz_stop_ranging>
	  ranging = 0;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_Callback+0x30>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001256:	e000      	b.n	800125a <HAL_GPIO_EXTI_Callback+0x22>
      __NOP();
 8001258:	bf00      	nop
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000138 	.word	0x20000138
 8001268:	20000134 	.word	0x20000134

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b6:	2007      	movs	r0, #7
 80012b8:	f000 fdfe 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_I2C_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_I2C_MspInit+0x8c>)
 8001324:	f000 fe9c 	bl	8002060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_I2C_MspInit+0x88>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_I2C_MspInit+0x88>)
 8001332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_I2C_MspInit+0x88>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40005400 	.word	0x40005400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_UART_MspInit+0x94>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d133      	bne.n	80013e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_UART_MspInit+0x98>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_UART_MspInit+0x98>)
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0x98>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_UART_MspInit+0x98>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_UART_MspInit+0x98>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_UART_MspInit+0x98>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b2:	230c      	movs	r3, #12
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c2:	2307      	movs	r3, #7
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <HAL_UART_MspInit+0x9c>)
 80013ce:	f000 fe47 	bl	8002060 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f000 fd79 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013dc:	2026      	movs	r0, #38	; 0x26
 80013de:	f000 fd92 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 fc24 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8001450:	2010      	movs	r0, #16
 8001452:	f000 ffbd 	bl	80023d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <USART2_IRQHandler+0x10>)
 8001462:	f002 fdd9 	bl	8004018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200000f0 	.word	0x200000f0

08001470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001474:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001478:	f000 ffaa 	bl	80023d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <init_tof>:
ActiveLEDFIFO activeLEDs;

led_color cur_color;
LED reset_command;

uint8_t init_tof(VL53LMZ_Configuration	*config){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

	config->platform.address = VL53LMZ_DEFAULT_I2C_ADDRESS;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2252      	movs	r2, #82	; 0x52
 80014b4:	801a      	strh	r2, [r3, #0]

	status |= vl53lmz_init(config);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f004 f912 	bl	80056e0 <vl53lmz_init>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f000 fc01 	bl	8001cd0 <HAL_Delay>
	//TODO more initialization
	status |= vl53lmz_set_resolution(config, VL53LMZ_RESOLUTION_8X8);
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f005 f8d9 	bl	8006688 <vl53lmz_set_resolution>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4313      	orrs	r3, r2
 80014de:	73fb      	strb	r3, [r7, #15]
	status |= vl53lmz_set_ranging_frequency_hz(config, 15);
 80014e0:	210f      	movs	r1, #15
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f005 f9a4 	bl	8006830 <vl53lmz_set_ranging_frequency_hz>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(500);
 80014f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f6:	f000 fbeb 	bl	8001cd0 <HAL_Delay>

	return status;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <init_tracking>:

uint8_t init_tracking(){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	717b      	strb	r3, [r7, #5]
	uint8_t row, col;

	status |= GW_init(&gest_predictor, &hand_tracker, &sensor_data);
 800150e:	4a47      	ldr	r2, [pc, #284]	; (800162c <init_tracking+0x128>)
 8001510:	4947      	ldr	r1, [pc, #284]	; (8001630 <init_tracking+0x12c>)
 8001512:	4848      	ldr	r0, [pc, #288]	; (8001634 <init_tracking+0x130>)
 8001514:	f005 fdb6 	bl	8007084 <GW_init>
 8001518:	4603      	mov	r3, r0
 800151a:	b25a      	sxtb	r2, r3
 800151c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001520:	4313      	orrs	r3, r2
 8001522:	b25b      	sxtb	r3, r3
 8001524:	717b      	strb	r3, [r7, #5]

	status |= HT_set_square_resolution(&hand_tracker, &sensor_data, VL53LMZ_RESOLUTION_8X8);
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	4940      	ldr	r1, [pc, #256]	; (800162c <init_tracking+0x128>)
 800152a:	4841      	ldr	r0, [pc, #260]	; (8001630 <init_tracking+0x12c>)
 800152c:	f006 fd0a 	bl	8007f44 <HT_set_square_resolution>
 8001530:	4603      	mov	r3, r0
 8001532:	b25a      	sxtb	r2, r3
 8001534:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001538:	4313      	orrs	r3, r2
 800153a:	b25b      	sxtb	r3, r3
 800153c:	717b      	strb	r3, [r7, #5]

	status |= GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 15);
 800153e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001542:	4a3a      	ldr	r2, [pc, #232]	; (800162c <init_tracking+0x128>)
 8001544:	493a      	ldr	r1, [pc, #232]	; (8001630 <init_tracking+0x12c>)
 8001546:	483b      	ldr	r0, [pc, #236]	; (8001634 <init_tracking+0x130>)
 8001548:	f005 fe76 	bl	8007238 <GW_set_frequency>
 800154c:	4603      	mov	r3, r0
 800154e:	b25a      	sxtb	r2, r3
 8001550:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001554:	4313      	orrs	r3, r2
 8001556:	b25b      	sxtb	r3, r3
 8001558:	717b      	strb	r3, [r7, #5]

	//fortest
//	status |= SEN_set_orientation(&sensor_data, 0);

	for (row = 0; row < MAX_QUADRANT_Y; row++){
 800155a:	2300      	movs	r3, #0
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	e03e      	b.n	80015de <init_tracking+0xda>
		for (col = 0; col < MAX_QUADRANT_X; col++){
 8001560:	2300      	movs	r3, #0
 8001562:	71bb      	strb	r3, [r7, #6]
 8001564:	e035      	b.n	80015d2 <init_tracking+0xce>
			LEDMatrix[row][col].row = row;
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	79b9      	ldrb	r1, [r7, #6]
 800156a:	4833      	ldr	r0, [pc, #204]	; (8001638 <init_tracking+0x134>)
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	440b      	add	r3, r1
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
			LEDMatrix[row][col].column = col;
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	79b9      	ldrb	r1, [r7, #6]
 8001582:	482d      	ldr	r0, [pc, #180]	; (8001638 <init_tracking+0x134>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009a      	lsls	r2, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	440b      	add	r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4403      	add	r3, r0
 8001594:	79ba      	ldrb	r2, [r7, #6]
 8001596:	705a      	strb	r2, [r3, #1]
			LEDMatrix[row][col].color = Black;
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	79b9      	ldrb	r1, [r7, #6]
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <init_tracking+0x134>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009a      	lsls	r2, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	2200      	movs	r2, #0
 80015b0:	709a      	strb	r2, [r3, #2]
			LEDMatrix[row][col].brightness = 0;
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	79b9      	ldrb	r1, [r7, #6]
 80015b6:	4820      	ldr	r0, [pc, #128]	; (8001638 <init_tracking+0x134>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	2200      	movs	r2, #0
 80015ca:	70da      	strb	r2, [r3, #3]
		for (col = 0; col < MAX_QUADRANT_X; col++){
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	3301      	adds	r3, #1
 80015d0:	71bb      	strb	r3, [r7, #6]
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	2b18      	cmp	r3, #24
 80015d6:	d9c6      	bls.n	8001566 <init_tracking+0x62>
	for (row = 0; row < MAX_QUADRANT_Y; row++){
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	3301      	adds	r3, #1
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b13      	cmp	r3, #19
 80015e2:	d9bd      	bls.n	8001560 <init_tracking+0x5c>

//			set_led_color(&LEDMatrix[row][col], Black);
		}
	}
	LastLED = &LEDMatrix[0][0];
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <init_tracking+0x138>)
 80015e6:	4a14      	ldr	r2, [pc, #80]	; (8001638 <init_tracking+0x134>)
 80015e8:	601a      	str	r2, [r3, #0]
	cur_color = Blue;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <init_tracking+0x13c>)
 80015ec:	2203      	movs	r2, #3
 80015ee:	701a      	strb	r2, [r3, #0]

	activeLEDs.first = 0;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <init_tracking+0x140>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8a3 27d2 	strh.w	r2, [r3, #2002]	; 0x7d2
	activeLEDs.last = 0;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <init_tracking+0x140>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8a3 27d4 	strh.w	r2, [r3, #2004]	; 0x7d4
	activeLEDs.length = 0;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <init_tracking+0x140>)
 8001602:	2200      	movs	r2, #0
 8001604:	f8a3 27d0 	strh.w	r2, [r3, #2000]	; 0x7d0

	reset_command.row = 255;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <init_tracking+0x144>)
 800160a:	22ff      	movs	r2, #255	; 0xff
 800160c:	701a      	strb	r2, [r3, #0]
	reset_command.column = 255;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <init_tracking+0x144>)
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	705a      	strb	r2, [r3, #1]
	reset_command.color = Black;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <init_tracking+0x144>)
 8001616:	2200      	movs	r2, #0
 8001618:	709a      	strb	r2, [r3, #2]

	send_led_data(&reset_command);
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <init_tracking+0x144>)
 800161c:	f000 f816 	bl	800164c <send_led_data>

	return status;
 8001620:	797b      	ldrb	r3, [r7, #5]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20004170 	.word	0x20004170
 8001630:	200039b8 	.word	0x200039b8
 8001634:	20002a58 	.word	0x20002a58
 8001638:	200043d4 	.word	0x200043d4
 800163c:	200043d0 	.word	0x200043d0
 8001640:	2000537c 	.word	0x2000537c
 8001644:	20004ba4 	.word	0x20004ba4
 8001648:	20005380 	.word	0x20005380

0800164c <send_led_data>:
//		break;
//	}
//	led_to_change->color = new_color;
//}

uint8_t send_led_data(LED* updated_LED){
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	75fb      	strb	r3, [r7, #23]
//							updated_LED->color};
	//test buffer
//	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
//								4, 5, 10};
	//todo update to do row col r g b
	uint8_t rgb_buffer[3] = {updated_LED->color == Red ? updated_LED->brightness : 0,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <send_led_data+0x1a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	78db      	ldrb	r3, [r3, #3]
 8001664:	e000      	b.n	8001668 <send_led_data+0x1c>
 8001666:	2300      	movs	r3, #0
 8001668:	753b      	strb	r3, [r7, #20]
							updated_LED->color == Green ? updated_LED->brightness : 0,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	789b      	ldrb	r3, [r3, #2]
	uint8_t rgb_buffer[3] = {updated_LED->color == Red ? updated_LED->brightness : 0,
 800166e:	2b02      	cmp	r3, #2
 8001670:	d102      	bne.n	8001678 <send_led_data+0x2c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	e000      	b.n	800167a <send_led_data+0x2e>
 8001678:	2300      	movs	r3, #0
 800167a:	757b      	strb	r3, [r7, #21]
							updated_LED->color == Blue ? updated_LED->brightness : 0,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	789b      	ldrb	r3, [r3, #2]
	uint8_t rgb_buffer[3] = {updated_LED->color == Red ? updated_LED->brightness : 0,
 8001680:	2b03      	cmp	r3, #3
 8001682:	d102      	bne.n	800168a <send_led_data+0x3e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	78db      	ldrb	r3, [r3, #3]
 8001688:	e000      	b.n	800168c <send_led_data+0x40>
 800168a:	2300      	movs	r3, #0
 800168c:	75bb      	strb	r3, [r7, #22]
	};

	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	733b      	strb	r3, [r7, #12]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	737b      	strb	r3, [r7, #13]
								rgb_buffer[0], rgb_buffer[1], rgb_buffer[2]};
 800169a:	7d3b      	ldrb	r3, [r7, #20]
	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 800169c:	73bb      	strb	r3, [r7, #14]
								rgb_buffer[0], rgb_buffer[1], rgb_buffer[2]};
 800169e:	7d7b      	ldrb	r3, [r7, #21]
	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 80016a0:	73fb      	strb	r3, [r7, #15]
								rgb_buffer[0], rgb_buffer[1], rgb_buffer[2]};
 80016a2:	7dbb      	ldrb	r3, [r7, #22]
	uint8_t data_buffer[5] = {updated_LED->row, updated_LED->column,
 80016a4:	743b      	strb	r3, [r7, #16]

	status |= HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDR, data_buffer, 5, 100);
 80016a6:	f107 020c 	add.w	r2, r7, #12
 80016aa:	2364      	movs	r3, #100	; 0x64
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2305      	movs	r3, #5
 80016b0:	2110      	movs	r1, #16
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <send_led_data+0x80>)
 80016b4:	f000 ffe8 	bl	8002688 <HAL_I2C_Master_Transmit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	4313      	orrs	r3, r2
 80016c0:	75fb      	strb	r3, [r7, #23]

	return status;
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000009c 	.word	0x2000009c

080016d0 <select_target_index>:

int* select_target_index(int *target_indices, int zone_index, VL53LMZ_ResultsData *pRangingData)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	(void) pRangingData;
	target_indices[0] = zone_index * VL53LMZ_NB_TARGET_PER_ZONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	601a      	str	r2, [r3, #0]
	return target_indices;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <sample_once>:

uint8_t sample_once(VL53LMZ_Configuration* config, VL53LMZ_ResultsData* results){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
	uint8_t is_ready = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	73bb      	strb	r3, [r7, #14]

	while(is_ready == 0){ // poll ;)
 8001702:	e00a      	b.n	800171a <sample_once+0x2a>
		status |= vl53lmz_check_data_ready(config, &is_ready);
 8001704:	f107 030e 	add.w	r3, r7, #14
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f004 fdcc 	bl	80062a8 <vl53lmz_check_data_ready>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4313      	orrs	r3, r2
 8001718:	73fb      	strb	r3, [r7, #15]
	while(is_ready == 0){ // poll ;)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f1      	beq.n	8001704 <sample_once+0x14>
	}
	vl53lmz_get_ranging_data(config, results);
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f004 fe16 	bl	8006354 <vl53lmz_get_ranging_data>

	return status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <SEN_CopyRangingData>:

uint8_t SEN_CopyRangingData(SEN_data_t* pDest, VL53LMZ_ResultsData *pRangingData)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	float ranging, peak;
	bool valid;
	int idx, result, nb_targets, target_idx[3], target_status;

	if (pDest == NULL || pRangingData == NULL) return -1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <SEN_CopyRangingData+0x16>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <SEN_CopyRangingData+0x1a>
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	e07e      	b.n	800184c <SEN_CopyRangingData+0x118>

	pDest->timestamp_ms = GET_TIME_STAMP();
 800174e:	f000 fab3 	bl	8001cb8 <HAL_GetTick>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	61da      	str	r2, [r3, #28]

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	e06f      	b.n	8001840 <SEN_CopyRangingData+0x10c>
	{
		select_target_index(target_idx, idx, pRangingData);
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ffb1 	bl	80016d0 <select_target_index>

		ranging = pRangingData->distance_mm[target_idx[0]]/4.0; // Signed 14.2
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe7c 	bl	800047c <__aeabi_i2d>
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <SEN_CopyRangingData+0x120>)
 800178a:	f7ff f80b 	bl	80007a4 <__aeabi_ddiv>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff f9d3 	bl	8000b40 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28

		peak = pRangingData->signal_per_spad[target_idx[0]]/2048.0; // Unsigned 21.11
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	3390      	adds	r3, #144	; 0x90
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe56 	bl	800045c <__aeabi_ui2d>
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <SEN_CopyRangingData+0x124>)
 80017b6:	f7fe fff5 	bl	80007a4 <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff f9bd 	bl	8000b40 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
		nb_targets = pRangingData->nb_target_detected[idx];
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	623b      	str	r3, [r7, #32]
		target_status = pRangingData->target_status[target_idx[0]];
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80017e2:	61fb      	str	r3, [r7, #28]

		valid = (nb_targets > 0)
				&& (target_status == 4 || target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10);
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dd10      	ble.n	800180c <SEN_CopyRangingData+0xd8>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00b      	beq.n	8001808 <SEN_CopyRangingData+0xd4>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d008      	beq.n	8001808 <SEN_CopyRangingData+0xd4>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	d005      	beq.n	8001808 <SEN_CopyRangingData+0xd4>
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b09      	cmp	r3, #9
 8001800:	d002      	beq.n	8001808 <SEN_CopyRangingData+0xd4>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	2b0a      	cmp	r3, #10
 8001806:	d101      	bne.n	800180c <SEN_CopyRangingData+0xd8>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <SEN_CopyRangingData+0xda>
 800180c:	2300      	movs	r3, #0
		valid = (nb_targets > 0)
 800180e:	76fb      	strb	r3, [r7, #27]
 8001810:	7efb      	ldrb	r3, [r7, #27]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	76fb      	strb	r3, [r7, #27]
//		valid &= (ranging < 600);
		result = SEN_set_data(pDest, idx, ranging, peak, valid);
 8001818:	7efb      	ldrb	r3, [r7, #27]
 800181a:	461a      	mov	r2, r3
 800181c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001820:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f007 f983 	bl	8008b32 <SEN_set_data>
 800182c:	6178      	str	r0, [r7, #20]

		if (result != 0) return result;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <SEN_CopyRangingData+0x106>
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	e008      	b.n	800184c <SEN_CopyRangingData+0x118>
	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3301      	adds	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	db8a      	blt.n	8001760 <SEN_CopyRangingData+0x2c>
	}

	return 0;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3730      	adds	r7, #48	; 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40100000 	.word	0x40100000
 8001858:	40a00000 	.word	0x40a00000
 800185c:	00000000 	.word	0x00000000

08001860 <convertSingleSensorPos>:

void convertSingleSensorPos(int x, int y, int z, uint8_t *pos_buffer) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
	float maxX = z*SINE_VALUE;
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fe04 	bl	800047c <__aeabi_i2d>
 8001874:	a34a      	add	r3, pc, #296	; (adr r3, 80019a0 <convertSingleSensorPos+0x140>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe fe69 	bl	8000550 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f95b 	bl	8000b40 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	61fb      	str	r3, [r7, #28]
	float maxY = z*SINE_VALUE;
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7fe fdf4 	bl	800047c <__aeabi_i2d>
 8001894:	a342      	add	r3, pc, #264	; (adr r3, 80019a0 <convertSingleSensorPos+0x140>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fe59 	bl	8000550 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f94b 	bl	8000b40 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	61bb      	str	r3, [r7, #24]
	float Xinterval = (maxX*2)/MAX_QUADRANT_X; // divide by 13 and we can overlap column 13 of left sensor with column 1 of right sensor
 80018ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018b6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80018ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018be:	edc7 7a05 	vstr	s15, [r7, #20]
	float Yinterval = (maxY*2)/MAX_QUADRANT_Y;
 80018c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018ca:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80018ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d2:	edc7 7a04 	vstr	s15, [r7, #16]

	//test

	Xinterval *= 0.85;
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7fe fde2 	bl	80004a0 <__aeabi_f2d>
 80018dc:	a332      	add	r3, pc, #200	; (adr r3, 80019a8 <convertSingleSensorPos+0x148>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe35 	bl	8000550 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f927 	bl	8000b40 <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	617b      	str	r3, [r7, #20]
	Yinterval *= 0.85;
 80018f6:	6938      	ldr	r0, [r7, #16]
 80018f8:	f7fe fdd2 	bl	80004a0 <__aeabi_f2d>
 80018fc:	a32a      	add	r3, pc, #168	; (adr r3, 80019a8 <convertSingleSensorPos+0x148>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe25 	bl	8000550 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f917 	bl	8000b40 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

	int row = -1*(y/Yinterval);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001920:	ed97 7a04 	vldr	s14, [r7, #16]
 8001924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001928:	eef1 7a67 	vneg.f32	s15, s15
 800192c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001930:	ee17 3a90 	vmov	r3, s15
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
	int col = x/Xinterval;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001940:	ed97 7a05 	vldr	s14, [r7, #20]
 8001944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194c:	ee17 3a90 	vmov	r3, s15
 8001950:	623b      	str	r3, [r7, #32]
	row += (int) (MAX_QUADRANT_Y/2);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	330a      	adds	r3, #10
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
	col += (int) (MAX_QUADRANT_X/2);
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	330c      	adds	r3, #12
 800195c:	623b      	str	r3, [r7, #32]
	if (row > MATRIX_HEIGHT-1) {
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	2b13      	cmp	r3, #19
 8001962:	dd01      	ble.n	8001968 <convertSingleSensorPos+0x108>
		row = MATRIX_HEIGHT-1;
 8001964:	2313      	movs	r3, #19
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (row < 0) {
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	da01      	bge.n	8001972 <convertSingleSensorPos+0x112>
		row = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (col > MATRIX_WIDTH-1) {
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	2b18      	cmp	r3, #24
 8001976:	dd01      	ble.n	800197c <convertSingleSensorPos+0x11c>
		col = MATRIX_WIDTH-1;
 8001978:	2318      	movs	r3, #24
 800197a:	623b      	str	r3, [r7, #32]
	}
	if (col < 0) {
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da01      	bge.n	8001986 <convertSingleSensorPos+0x126>
		col = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
	}
	pos_buffer[0] = (uint8_t) row;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	b2da      	uxtb	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	701a      	strb	r2, [r3, #0]
	pos_buffer[1] = (uint8_t) col;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	99fc1567 	.word	0x99fc1567
 80019a4:	3fda8279 	.word	0x3fda8279
 80019a8:	33333333 	.word	0x33333333
 80019ac:	3feb3333 	.word	0x3feb3333

080019b0 <update_led_matrix>:


void update_led_matrix(HT_hand_t* cur_hand, led_color new_color){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
	uint8_t led_index[2];
	uint8_t row, col;

	convertSingleSensorPos(cur_hand->hand_x, cur_hand->hand_y, cur_hand->hand_z, led_index);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019cc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80019d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	ee17 2a90 	vmov	r2, s15
 80019e2:	ee16 1a90 	vmov	r1, s13
 80019e6:	ee17 0a10 	vmov	r0, s14
 80019ea:	f7ff ff39 	bl	8001860 <convertSingleSensorPos>
	row = led_index[0];
 80019ee:	7b3b      	ldrb	r3, [r7, #12]
 80019f0:	73fb      	strb	r3, [r7, #15]
	col = led_index[1];
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	73bb      	strb	r3, [r7, #14]

//	send_led_data(&LEDMatrix[row][col]);
//	LastLED = &LEDMatrix[row][col];

	if (LEDMatrix[row][col].color != new_color){ //new led
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	7bb9      	ldrb	r1, [r7, #14]
 80019fa:	481c      	ldr	r0, [pc, #112]	; (8001a6c <update_led_matrix+0xbc>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009a      	lsls	r2, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	789b      	ldrb	r3, [r3, #2]
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d027      	beq.n	8001a64 <update_led_matrix+0xb4>
//		set_led_color(&LEDMatrix[row][col], new_color);
//		FIFO_add(&activeLEDs, &LEDMatrix[row][col]);
		LEDMatrix[row][col].color = new_color;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	7bb9      	ldrb	r1, [r7, #14]
 8001a18:	4814      	ldr	r0, [pc, #80]	; (8001a6c <update_led_matrix+0xbc>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009a      	lsls	r2, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4403      	add	r3, r0
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	709a      	strb	r2, [r3, #2]
		LEDMatrix[row][col].brightness = 255;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	7bb9      	ldrb	r1, [r7, #14]
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <update_led_matrix+0xbc>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	009a      	lsls	r2, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4403      	add	r3, r0
 8001a44:	22ff      	movs	r2, #255	; 0xff
 8001a46:	70da      	strb	r2, [r3, #3]
		send_led_data(&LEDMatrix[row][col]);
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	7bb9      	ldrb	r1, [r7, #14]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009a      	lsls	r2, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <update_led_matrix+0xbc>)
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fdf4 	bl	800164c <send_led_data>
	}
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200043d4 	.word	0x200043d4

08001a70 <matrix_app_main>:
	gest_predictor.gesture.label = GW_NONE;
	HAL_Delay(50);

}

uint8_t matrix_app_main(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	// variables
	uint8_t status = VL53LMZ_STATUS_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
//	uint32_t rot_percent = 0;

	// initialization
    status |= init_tof(&Sensor1Cfg);
 8001a7a:	483d      	ldr	r0, [pc, #244]	; (8001b70 <matrix_app_main+0x100>)
 8001a7c:	f7ff fd12 	bl	80014a4 <init_tof>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	71fb      	strb	r3, [r7, #7]

    status |= init_tracking();
 8001a8a:	f7ff fd3b 	bl	8001504 <init_tracking>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	71fb      	strb	r3, [r7, #7]

	status |= vl53lmz_start_ranging(&Sensor1Cfg);
 8001a98:	4835      	ldr	r0, [pc, #212]	; (8001b70 <matrix_app_main+0x100>)
 8001a9a:	f004 fb19 	bl	80060d0 <vl53lmz_start_ranging>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
	ranging = 1;
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <matrix_app_main+0x104>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]

    // begin app
    while (1){
    	status |= sample_once(&Sensor1Cfg, &Sensor1Results);
 8001aae:	4932      	ldr	r1, [pc, #200]	; (8001b78 <matrix_app_main+0x108>)
 8001ab0:	482f      	ldr	r0, [pc, #188]	; (8001b70 <matrix_app_main+0x100>)
 8001ab2:	f7ff fe1d 	bl	80016f0 <sample_once>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	71fb      	strb	r3, [r7, #7]

    	status |= SEN_CopyRangingData(&sensor_data, &Sensor1Results);
 8001ac0:	492d      	ldr	r1, [pc, #180]	; (8001b78 <matrix_app_main+0x108>)
 8001ac2:	482e      	ldr	r0, [pc, #184]	; (8001b7c <matrix_app_main+0x10c>)
 8001ac4:	f7ff fe36 	bl	8001734 <SEN_CopyRangingData>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	71fb      	strb	r3, [r7, #7]

		status |= GW_run(&gest_predictor, &hand_tracker, &sensor_data);
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <matrix_app_main+0x10c>)
 8001ad4:	492a      	ldr	r1, [pc, #168]	; (8001b80 <matrix_app_main+0x110>)
 8001ad6:	482b      	ldr	r0, [pc, #172]	; (8001b84 <matrix_app_main+0x114>)
 8001ad8:	f006 f940 	bl	8007d5c <GW_run>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b25a      	sxtb	r2, r3
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	71fb      	strb	r3, [r7, #7]
//
		if (gest_predictor.gesture.label == GW_TOWARD){ // brush change
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <matrix_app_main+0x114>)
 8001aec:	f893 3f1c 	ldrb.w	r3, [r3, #3868]	; 0xf1c
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d110      	bne.n	8001b16 <matrix_app_main+0xa6>
			if (++cur_color == 4){cur_color = 0;}
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <matrix_app_main+0x118>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <matrix_app_main+0x118>)
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <matrix_app_main+0x118>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d102      	bne.n	8001b0e <matrix_app_main+0x9e>
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <matrix_app_main+0x118>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
			gest_predictor.gesture.label = GW_NONE;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <matrix_app_main+0x114>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2f1c 	strb.w	r2, [r3, #3868]	; 0xf1c
//			reset_matrix();
//			continue;
//		}
//		if (ranging % 3 == 0) {do_decay();}
//		do_decay();
		if(hand_tracker.hand.found && hand_tracker.hand.hand_z < 600){
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <matrix_app_main+0x110>)
 8001b18:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <matrix_app_main+0xdc>
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <matrix_app_main+0x110>)
 8001b22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b26:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001b8c <matrix_app_main+0x11c>
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d50b      	bpl.n	8001b4c <matrix_app_main+0xdc>
			update_led_matrix(&hand_tracker.hand, cur_color);
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <matrix_app_main+0x118>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <matrix_app_main+0x120>)
 8001b3c:	f7ff ff38 	bl	80019b0 <update_led_matrix>
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2120      	movs	r1, #32
 8001b44:	4813      	ldr	r0, [pc, #76]	; (8001b94 <matrix_app_main+0x124>)
 8001b46:	f000 fc0f 	bl	8002368 <HAL_GPIO_WritePin>
 8001b4a:	e004      	b.n	8001b56 <matrix_app_main+0xe6>
//    			rot_percent = gest_predictor.gesture.lc_currentLevel;
//    		}

		}
		else {
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2120      	movs	r1, #32
 8001b50:	4810      	ldr	r0, [pc, #64]	; (8001b94 <matrix_app_main+0x124>)
 8001b52:	f000 fc09 	bl	8002368 <HAL_GPIO_WritePin>
		}


    	if(!ranging){
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <matrix_app_main+0x104>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1a7      	bne.n	8001aae <matrix_app_main+0x3e>
    		while(1){
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b5e:	2120      	movs	r1, #32
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <matrix_app_main+0x124>)
 8001b62:	f000 fc1a 	bl	800239a <HAL_GPIO_TogglePin>
    			HAL_Delay(1000);
 8001b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b6a:	f000 f8b1 	bl	8001cd0 <HAL_Delay>
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b6e:	e7f6      	b.n	8001b5e <matrix_app_main+0xee>
 8001b70:	20000138 	.word	0x20000138
 8001b74:	20000134 	.word	0x20000134
 8001b78:	20002508 	.word	0x20002508
 8001b7c:	20004170 	.word	0x20004170
 8001b80:	200039b8 	.word	0x200039b8
 8001b84:	20002a58 	.word	0x20002a58
 8001b88:	2000537c 	.word	0x2000537c
 8001b8c:	44160000 	.word	0x44160000
 8001b90:	200039d4 	.word	0x200039d4
 8001b94:	40020000 	.word	0x40020000

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff fc5d 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f007 f9ad 	bl	8008f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7ff f987 	bl	8000edc <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bdc:	080210c0 	.word	0x080210c0
  ldr r2, =_sbss
 8001be0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001be4:	20005540 	.word	0x20005540

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_Init+0x40>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_Init+0x40>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x40>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f94f 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fb2a 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f967 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c6c:	f000 f92f 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20005384 	.word	0x20005384

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20005384 	.word	0x20005384

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <__NVIC_EnableIRQ+0x38>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e98:	f7ff ff8e 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff29 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff3e 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff8e 	bl	8001e0c <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5d 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff31 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff feb6 	bl	8001cb8 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d008      	beq.n	8001f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e052      	b.n	8002012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0216 	bic.w	r2, r2, #22
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <HAL_DMA_Abort+0x62>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0208 	bic.w	r2, r2, #8
 8001faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	e013      	b.n	8001fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fbe:	f7ff fe7b 	bl	8001cb8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d90c      	bls.n	8001fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e015      	b.n	8002012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e4      	bne.n	8001fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	223f      	movs	r2, #63	; 0x3f
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d004      	beq.n	8002038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e00c      	b.n	8002052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e159      	b.n	8002330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8148 	bne.w	800232a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d130      	bne.n	8002114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a2 	beq.w	800232a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b54      	ldr	r3, [pc, #336]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x2ec>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a49      	ldr	r2, [pc, #292]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x202>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x1fe>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a47      	ldr	r2, [pc, #284]	; (8002358 <HAL_GPIO_Init+0x2f8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x1fa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a46      	ldr	r2, [pc, #280]	; (800235c <HAL_GPIO_Init+0x2fc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x1f6>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a45      	ldr	r2, [pc, #276]	; (8002360 <HAL_GPIO_Init+0x300>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x1f2>
 800224e:	2304      	movs	r3, #4
 8002250:	e008      	b.n	8002264 <HAL_GPIO_Init+0x204>
 8002252:	2307      	movs	r3, #7
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x204>
 8002256:	2303      	movs	r3, #3
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x204>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x204>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x204>
 8002262:	2300      	movs	r3, #0
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002274:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_GPIO_Init+0x2ec>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a2f      	ldr	r2, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fa:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x304>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002324:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	f67f aea2 	bls.w	800207c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	041a      	lsls	r2, r3, #16
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	400b      	ands	r3, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe ff22 	bl	8001238 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40013c00 	.word	0x40013c00

08002400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e12b      	b.n	800266a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe ff4e 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2224      	movs	r2, #36	; 0x24
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002464:	f001 fd62 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8002468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a81      	ldr	r2, [pc, #516]	; (8002674 <HAL_I2C_Init+0x274>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d807      	bhi.n	8002484 <HAL_I2C_Init+0x84>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a80      	ldr	r2, [pc, #512]	; (8002678 <HAL_I2C_Init+0x278>)
 8002478:	4293      	cmp	r3, r2
 800247a:	bf94      	ite	ls
 800247c:	2301      	movls	r3, #1
 800247e:	2300      	movhi	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e006      	b.n	8002492 <HAL_I2C_Init+0x92>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a7d      	ldr	r2, [pc, #500]	; (800267c <HAL_I2C_Init+0x27c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0e7      	b.n	800266a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a78      	ldr	r2, [pc, #480]	; (8002680 <HAL_I2C_Init+0x280>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a6a      	ldr	r2, [pc, #424]	; (8002674 <HAL_I2C_Init+0x274>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d802      	bhi.n	80024d4 <HAL_I2C_Init+0xd4>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3301      	adds	r3, #1
 80024d2:	e009      	b.n	80024e8 <HAL_I2C_Init+0xe8>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_I2C_Init+0x284>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	3301      	adds	r3, #1
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	495c      	ldr	r1, [pc, #368]	; (8002674 <HAL_I2C_Init+0x274>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d819      	bhi.n	800253c <HAL_I2C_Init+0x13c>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e59      	subs	r1, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fbb1 f3f3 	udiv	r3, r1, r3
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800251c:	400b      	ands	r3, r1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_I2C_Init+0x138>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e59      	subs	r1, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002536:	e051      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 8002538:	2304      	movs	r3, #4
 800253a:	e04f      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <HAL_I2C_Init+0x168>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e012      	b.n	800258e <HAL_I2C_Init+0x18e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x196>
 8002592:	2301      	movs	r3, #1
 8002594:	e022      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <HAL_I2C_Init+0x1bc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e58      	subs	r0, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	440b      	add	r3, r1
 80025ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	0099      	lsls	r1, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6809      	ldr	r1, [r1, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800260a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6911      	ldr	r1, [r2, #16]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	000186a0 	.word	0x000186a0
 8002678:	001e847f 	.word	0x001e847f
 800267c:	003d08ff 	.word	0x003d08ff
 8002680:	431bde83 	.word	0x431bde83
 8002684:	10624dd3 	.word	0x10624dd3

08002688 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	460b      	mov	r3, r1
 8002696:	817b      	strh	r3, [r7, #10]
 8002698:	4613      	mov	r3, r2
 800269a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff fb0c 	bl	8001cb8 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	f040 80e0 	bne.w	8002870 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2319      	movs	r3, #25
 80026b6:	2201      	movs	r2, #1
 80026b8:	4970      	ldr	r1, [pc, #448]	; (800287c <HAL_I2C_Master_Transmit+0x1f4>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fde8 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	e0d3      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x50>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0cc      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ea>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d007      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2221      	movs	r2, #33	; 0x21
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2210      	movs	r2, #16
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	893a      	ldrh	r2, [r7, #8]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_I2C_Master_Transmit+0x1f8>)
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fbbc 	bl	8002ec4 <I2C_MasterRequestWrite>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e08d      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800276c:	e066      	b.n	800283c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	6a39      	ldr	r1, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fe62 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b04      	cmp	r3, #4
 8002784:	d107      	bne.n	8002796 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d11b      	bne.n	8002810 <HAL_I2C_Master_Transmit+0x188>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d017      	beq.n	8002810 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	6a39      	ldr	r1, [r7, #32]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fe52 	bl	80034be <I2C_WaitOnBTFFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00d      	beq.n	800283c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2b04      	cmp	r3, #4
 8002826:	d107      	bne.n	8002838 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e01a      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	d194      	bne.n	800276e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	00100002 	.word	0x00100002
 8002880:	ffff0000 	.word	0xffff0000

08002884 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	460b      	mov	r3, r1
 8002892:	817b      	strh	r3, [r7, #10]
 8002894:	4613      	mov	r3, r2
 8002896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff fa0e 	bl	8001cb8 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	f040 820b 	bne.w	8002cc2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	497c      	ldr	r1, [pc, #496]	; (8002aa8 <HAL_I2C_Master_Receive+0x224>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fcea 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e1fe      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2C_Master_Receive+0x50>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e1f7      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2222      	movs	r2, #34	; 0x22
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2210      	movs	r2, #16
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a5c      	ldr	r2, [pc, #368]	; (8002aac <HAL_I2C_Master_Receive+0x228>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fb40 	bl	8002fc8 <I2C_MasterRequestRead>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1b8      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e18c      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b01      	cmp	r3, #1
 8002988:	d11b      	bne.n	80029c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e16c      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d11b      	bne.n	8002a02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	e14c      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a28:	e138      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	f200 80f1 	bhi.w	8002c16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d123      	bne.n	8002a84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fd7d 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e139      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a82:	e10b      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d14e      	bne.n	8002b2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	2200      	movs	r2, #0
 8002a94:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <HAL_I2C_Master_Receive+0x22c>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fbfa 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e10e      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
 8002aa6:	bf00      	nop
 8002aa8:	00100002 	.word	0x00100002
 8002aac:	ffff0000 	.word	0xffff0000
 8002ab0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b28:	e0b8      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	2200      	movs	r2, #0
 8002b32:	4966      	ldr	r1, [pc, #408]	; (8002ccc <HAL_I2C_Master_Receive+0x448>)
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fbab 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0bf      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	494f      	ldr	r1, [pc, #316]	; (8002ccc <HAL_I2C_Master_Receive+0x448>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fb7d 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e091      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c14:	e042      	b.n	8002c9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fc90 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e04c      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d118      	bne.n	8002c9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f aec2 	bne.w	8002a2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	00010004 	.word	0x00010004

08002cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cea:	f7fe ffe5 	bl	8001cb8 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	f040 80d9 	bne.w	8002eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2319      	movs	r3, #25
 8002d04:	2201      	movs	r2, #1
 8002d06:	496d      	ldr	r1, [pc, #436]	; (8002ebc <HAL_I2C_Mem_Write+0x1ec>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fac1 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0cc      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Mem_Write+0x56>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0c5      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d007      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a4d      	ldr	r2, [pc, #308]	; (8002ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d8e:	88f8      	ldrh	r0, [r7, #6]
 8002d90:	893a      	ldrh	r2, [r7, #8]
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f9e0 	bl	8003164 <I2C_RequestMemoryWrite>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d052      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e081      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fb42 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11b      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x180>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d017      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1aa      	bne.n	8002dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fb2e 	bl	80034be <I2C_WaitOnBTFFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e016      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	00100002 	.word	0x00100002
 8002ec0:	ffff0000 	.word	0xffff0000

08002ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d006      	beq.n	8002eee <I2C_MasterRequestWrite+0x2a>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d003      	beq.n	8002eee <I2C_MasterRequestWrite+0x2a>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eec:	d108      	bne.n	8002f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e00b      	b.n	8002f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2b12      	cmp	r3, #18
 8002f06:	d107      	bne.n	8002f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f9b3 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	d103      	bne.n	8002f48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e035      	b.n	8002fb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f54:	d108      	bne.n	8002f68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f56:	897b      	ldrh	r3, [r7, #10]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f64:	611a      	str	r2, [r3, #16]
 8002f66:	e01b      	b.n	8002fa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f68:	897b      	ldrh	r3, [r7, #10]
 8002f6a:	11db      	asrs	r3, r3, #7
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 0306 	and.w	r3, r3, #6
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f063 030f 	orn	r3, r3, #15
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <I2C_MasterRequestWrite+0xfc>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f9d9 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e010      	b.n	8002fb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <I2C_MasterRequestWrite+0x100>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f9c9 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010008 	.word	0x00010008
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d006      	beq.n	8003002 <I2C_MasterRequestRead+0x3a>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d003      	beq.n	8003002 <I2C_MasterRequestRead+0x3a>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003000:	d108      	bne.n	8003014 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e00b      	b.n	800302c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	2b11      	cmp	r3, #17
 800301a:	d107      	bne.n	800302c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800302a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f929 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003052:	d103      	bne.n	800305c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e079      	b.n	8003154 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003068:	d108      	bne.n	800307c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800306a:	897b      	ldrh	r3, [r7, #10]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]
 800307a:	e05f      	b.n	800313c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800307c:	897b      	ldrh	r3, [r7, #10]
 800307e:	11db      	asrs	r3, r3, #7
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0306 	and.w	r3, r3, #6
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f063 030f 	orn	r3, r3, #15
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4930      	ldr	r1, [pc, #192]	; (800315c <I2C_MasterRequestRead+0x194>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f94f 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e054      	b.n	8003154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4929      	ldr	r1, [pc, #164]	; (8003160 <I2C_MasterRequestRead+0x198>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f93f 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e044      	b.n	8003154 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f8c7 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d103      	bne.n	8003120 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e017      	b.n	8003154 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003124:	897b      	ldrh	r3, [r7, #10]
 8003126:	11db      	asrs	r3, r3, #7
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0306 	and.w	r3, r3, #6
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f063 030e 	orn	r3, r3, #14
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <I2C_MasterRequestRead+0x198>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8fb 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	00010008 	.word	0x00010008
 8003160:	00010002 	.word	0x00010002

08003164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	460b      	mov	r3, r1
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2200      	movs	r2, #0
 8003196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f878 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b4:	d103      	bne.n	80031be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e05f      	b.n	8003282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	492d      	ldr	r1, [pc, #180]	; (800328c <I2C_RequestMemoryWrite+0x128>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8b0 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e04c      	b.n	8003282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f91a 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e02b      	b.n	8003282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e021      	b.n	8003280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b29b      	uxth	r3, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f8f4 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e005      	b.n	8003282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003276:	893b      	ldrh	r3, [r7, #8]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00010002 	.word	0x00010002

08003290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a0:	e025      	b.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe fd05 	bl	8001cb8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e023      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10d      	bne.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	e00c      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	429a      	cmp	r2, r3
 8003332:	d0b6      	beq.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	e051      	b.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d123      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e046      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ac:	d021      	beq.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe fc83 	bl	8001cb8 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e020      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10c      	bne.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e00b      	b.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d18d      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	e02d      	b.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8ce 	bl	80035ec <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e02d      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fc29 	bl	8001cb8 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e007      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d1ca      	bne.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ca:	e02d      	b.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f88d 	bl	80035ec <I2C_IsAcknowledgeFailed>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e02d      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e2:	d021      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe fbe8 	bl	8001cb8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d1ca      	bne.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800354c:	e042      	b.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d119      	bne.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0210 	mvn.w	r2, #16
 8003564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e029      	b.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fe fb92 	bl	8001cb8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e007      	b.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d1b5      	bne.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d11b      	bne.n	800363c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e267      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d075      	beq.n	8003756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d00c      	beq.n	8003690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d112      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368e:	d10b      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d05b      	beq.n	8003754 <HAL_RCC_OscConfig+0x108>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d157      	bne.n	8003754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e242      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x74>
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e01d      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6f      	ldr	r2, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6c      	ldr	r2, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a68      	ldr	r2, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fad8 	bl	8001cb8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fad4 	bl	8001cb8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e207      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0xc0>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fac4 	bl	8001cb8 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fe fac0 	bl	8001cb8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1f3      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0xe8>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003776:	2b08      	cmp	r3, #8
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1c7      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4937      	ldr	r1, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	e03a      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fa79 	bl	8001cb8 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe fa75 	bl	8001cb8 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1a8      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4925      	ldr	r1, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe fa58 	bl	8001cb8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fe fa54 	bl	8001cb8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e187      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d036      	beq.n	80038a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fa38 	bl	8001cb8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe fa34 	bl	8001cb8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e167      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x200>
 800386a:	e01b      	b.n	80038a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe fa21 	bl	8001cb8 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	e00e      	b.n	8003898 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387a:	f7fe fa1d 	bl	8001cb8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d907      	bls.n	8003898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e150      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8097 	beq.w	80039e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b7d      	ldr	r3, [pc, #500]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a73      	ldr	r2, [pc, #460]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe f9dd 	bl	8001cb8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe f9d9 	bl	8001cb8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e10c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x2ea>
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a63      	ldr	r2, [pc, #396]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x30c>
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a5b      	ldr	r2, [pc, #364]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003958:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a57      	ldr	r2, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b55      	ldr	r3, [pc, #340]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f99e 	bl	8001cb8 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe f99a 	bl	8001cb8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0cb      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	4b49      	ldr	r3, [pc, #292]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <HAL_RCC_OscConfig+0x334>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fe f988 	bl	8001cb8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe f984 	bl	8001cb8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0b5      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ee      	bne.n	80039ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a1 	beq.w	8003b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d05c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d141      	bne.n	8003a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe f958 	bl	8001cb8 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fe f954 	bl	8001cb8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e087      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	491b      	ldr	r1, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f92d 	bl	8001cb8 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe f929 	bl	8001cb8 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e05c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x416>
 8003a80:	e054      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f916 	bl	8001cb8 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fe f912 	bl	8001cb8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e045      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x444>
 8003aae:	e03d      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e038      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d121      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d111      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0cc      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d90c      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0b8      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	494d      	ldr	r1, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d044      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d119      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e067      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4934      	ldr	r1, [pc, #208]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7fe f844 	bl	8001cb8 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fe f840 	bl	8001cb8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e04f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d20c      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e032      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cc2:	f000 f821 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	490a      	ldr	r1, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd ffa4 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023c00 	.word	0x40023c00
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	0800b394 	.word	0x0800b394
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b094      	sub	sp, #80	; 0x50
 8003d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	647b      	str	r3, [r7, #68]	; 0x44
 8003d14:	2300      	movs	r3, #0
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	2300      	movs	r3, #0
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d20:	4b79      	ldr	r3, [pc, #484]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d00d      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x40>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	f200 80e1 	bhi.w	8003ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x34>
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d3a:	e0db      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d3c:	4b73      	ldr	r3, [pc, #460]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d40:	e0db      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d42:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d46:	e0d8      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d48:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d52:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5e:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	099b      	lsrs	r3, r3, #6
 8003d64:	2200      	movs	r2, #0
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
 8003d72:	2300      	movs	r3, #0
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
 8003d76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	f04f 0000 	mov.w	r0, #0
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	0159      	lsls	r1, r3, #5
 8003d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8c:	0150      	lsls	r0, r2, #5
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4621      	mov	r1, r4
 8003d94:	1a51      	subs	r1, r2, r1
 8003d96:	6139      	str	r1, [r7, #16]
 8003d98:	4629      	mov	r1, r5
 8003d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dac:	4659      	mov	r1, fp
 8003dae:	018b      	lsls	r3, r1, #6
 8003db0:	4651      	mov	r1, sl
 8003db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db6:	4651      	mov	r1, sl
 8003db8:	018a      	lsls	r2, r1, #6
 8003dba:	4651      	mov	r1, sl
 8003dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dda:	4690      	mov	r8, r2
 8003ddc:	4699      	mov	r9, r3
 8003dde:	4623      	mov	r3, r4
 8003de0:	eb18 0303 	adds.w	r3, r8, r3
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	462b      	mov	r3, r5
 8003de8:	eb49 0303 	adc.w	r3, r9, r3
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	024b      	lsls	r3, r1, #9
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e04:	4621      	mov	r1, r4
 8003e06:	024a      	lsls	r2, r1, #9
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	2200      	movs	r2, #0
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e18:	f7fc fee2 	bl	8000be0 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e24:	e058      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e26:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	099b      	lsrs	r3, r3, #6
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	4611      	mov	r1, r2
 8003e32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e40:	4642      	mov	r2, r8
 8003e42:	464b      	mov	r3, r9
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	0159      	lsls	r1, r3, #5
 8003e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e52:	0150      	lsls	r0, r2, #5
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4641      	mov	r1, r8
 8003e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e5e:	4649      	mov	r1, r9
 8003e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e78:	ebb2 040a 	subs.w	r4, r2, sl
 8003e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	00eb      	lsls	r3, r5, #3
 8003e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8e:	00e2      	lsls	r2, r4, #3
 8003e90:	4614      	mov	r4, r2
 8003e92:	461d      	mov	r5, r3
 8003e94:	4643      	mov	r3, r8
 8003e96:	18e3      	adds	r3, r4, r3
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eae:	4629      	mov	r1, r5
 8003eb0:	028b      	lsls	r3, r1, #10
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb8:	4621      	mov	r1, r4
 8003eba:	028a      	lsls	r2, r1, #10
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	61fa      	str	r2, [r7, #28]
 8003ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ecc:	f7fc fe88 	bl	8000be0 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ee8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef2:	e002      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3750      	adds	r7, #80	; 0x50
 8003f00:	46bd      	mov	sp, r7
 8003f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	007a1200 	.word	0x007a1200

08003f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000000 	.word	0x20000000

08003f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f30:	f7ff fff0 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0a9b      	lsrs	r3, r3, #10
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	0800b3a4 	.word	0x0800b3a4

08003f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f58:	f7ff ffdc 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0b5b      	lsrs	r3, r3, #13
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4903      	ldr	r1, [pc, #12]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	0800b3a4 	.word	0x0800b3a4

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e03f      	b.n	800400e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f9d8 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fc7b 	bl	80048bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b0ba      	sub	sp, #232	; 0xe8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_UART_IRQHandler+0x66>
 800406a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fb65 	bl	8004746 <UART_Receive_IT>
      return;
 800407c:	e256      	b.n	800452c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800407e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80de 	beq.w	8004244 <HAL_UART_IRQHandler+0x22c>
 8004088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80d1 	beq.w	8004244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_UART_IRQHandler+0xae>
 80040ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_UART_IRQHandler+0xd2>
 80040d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_UART_IRQHandler+0xf6>
 80040f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0204 	orr.w	r2, r3, #4
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <HAL_UART_IRQHandler+0x126>
 800411a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 81ed 	beq.w	8004522 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_UART_IRQHandler+0x14e>
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 faf0 	bl	8004746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <HAL_UART_IRQHandler+0x17a>
 800418a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d04f      	beq.n	8004232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9f8 	bl	8004588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d141      	bne.n	800422a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1d9      	bne.n	80041a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d013      	beq.n	8004222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	4a7d      	ldr	r2, [pc, #500]	; (80043f4 <HAL_UART_IRQHandler+0x3dc>)
 8004200:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd ff07 	bl	800201a <HAL_DMA_Abort_IT>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800421c:	4610      	mov	r0, r2
 800421e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	e00e      	b.n	8004240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f99a 	bl	800455c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	e00a      	b.n	8004240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f996 	bl	800455c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e006      	b.n	8004240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f992 	bl	800455c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800423e:	e170      	b.n	8004522 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	bf00      	nop
    return;
 8004242:	e16e      	b.n	8004522 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 814a 	bne.w	80044e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8143 	beq.w	80044e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 813c 	beq.w	80044e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	f040 80b4 	bne.w	80043f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800429c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8140 	beq.w	8004526 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ae:	429a      	cmp	r2, r3
 80042b0:	f080 8139 	bcs.w	8004526 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	f000 8088 	beq.w	80043da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800430e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1d9      	bne.n	80042ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800433a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800433e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800434c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e1      	bne.n	8004316 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004376:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800437c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80043be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e3      	bne.n	8004398 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fdb0 	bl	8001f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8c0 	bl	8004570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f0:	e099      	b.n	8004526 <HAL_UART_IRQHandler+0x50e>
 80043f2:	bf00      	nop
 80043f4:	0800464f 	.word	0x0800464f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004400:	b29b      	uxth	r3, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 808b 	beq.w	800452a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8086 	beq.w	800452a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004442:	647a      	str	r2, [r7, #68]	; 0x44
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e3      	bne.n	800441e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	623b      	str	r3, [r7, #32]
   return(result);
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800447a:	633a      	str	r2, [r7, #48]	; 0x30
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e3      	bne.n	8004456 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0310 	bic.w	r3, r3, #16
 80044b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044c0:	61fa      	str	r2, [r7, #28]
 80044c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	69b9      	ldr	r1, [r7, #24]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	617b      	str	r3, [r7, #20]
   return(result);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e3      	bne.n	800449c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f848 	bl	8004570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044e0:	e023      	b.n	800452a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_UART_IRQHandler+0x4ea>
 80044ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8bb 	bl	8004676 <UART_Transmit_IT>
    return;
 8004500:	e014      	b.n	800452c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <HAL_UART_IRQHandler+0x514>
 800450e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8fb 	bl	8004716 <UART_EndTransmit_IT>
    return;
 8004520:	e004      	b.n	800452c <HAL_UART_IRQHandler+0x514>
    return;
 8004522:	bf00      	nop
 8004524:	e002      	b.n	800452c <HAL_UART_IRQHandler+0x514>
      return;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <HAL_UART_IRQHandler+0x514>
      return;
 800452a:	bf00      	nop
  }
}
 800452c:	37e8      	adds	r7, #232	; 0xe8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b095      	sub	sp, #84	; 0x54
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b0:	643a      	str	r2, [r7, #64]	; 0x40
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	64bb      	str	r3, [r7, #72]	; 0x48
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d119      	bne.n	8004634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0310 	bic.w	r3, r3, #16
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004620:	61ba      	str	r2, [r7, #24]
 8004622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004642:	bf00      	nop
 8004644:	3754      	adds	r7, #84	; 0x54
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff77 	bl	800455c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b21      	cmp	r3, #33	; 0x21
 8004688:	d13e      	bne.n	8004708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d114      	bne.n	80046be <UART_Transmit_IT+0x48>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	e008      	b.n	80046d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6211      	str	r1, [r2, #32]
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4619      	mov	r1, r3
 80046de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fefc 	bl	8004534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08c      	sub	sp, #48	; 0x30
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b22      	cmp	r3, #34	; 0x22
 8004758:	f040 80ab 	bne.w	80048b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d117      	bne.n	8004796 <UART_Receive_IT+0x50>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	b29a      	uxth	r2, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
 8004794:	e026      	b.n	80047e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d007      	beq.n	80047ba <UART_Receive_IT+0x74>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <UART_Receive_IT+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e008      	b.n	80047da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4619      	mov	r1, r3
 80047f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d15a      	bne.n	80048ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0220 	bic.w	r2, r2, #32
 8004806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	d135      	bne.n	80048a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f023 0310 	bic.w	r3, r3, #16
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485e:	623a      	str	r2, [r7, #32]
 8004860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	61bb      	str	r3, [r7, #24]
   return(result);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e5      	bne.n	800483e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b10      	cmp	r3, #16
 800487e:	d10a      	bne.n	8004896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe67 	bl	8004570 <HAL_UARTEx_RxEventCallback>
 80048a2:	e002      	b.n	80048aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fe4f 	bl	8004548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e002      	b.n	80048b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3730      	adds	r7, #48	; 0x30
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b0c0      	sub	sp, #256	; 0x100
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	68d9      	ldr	r1, [r3, #12]
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	ea40 0301 	orr.w	r3, r0, r1
 80048e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004914:	f021 010c 	bic.w	r1, r1, #12
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004922:	430b      	orrs	r3, r1
 8004924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	6999      	ldr	r1, [r3, #24]
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	ea40 0301 	orr.w	r3, r0, r1
 8004942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b8f      	ldr	r3, [pc, #572]	; (8004b88 <UART_SetConfig+0x2cc>)
 800494c:	429a      	cmp	r2, r3
 800494e:	d005      	beq.n	800495c <UART_SetConfig+0xa0>
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b8d      	ldr	r3, [pc, #564]	; (8004b8c <UART_SetConfig+0x2d0>)
 8004958:	429a      	cmp	r2, r3
 800495a:	d104      	bne.n	8004966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7ff fafa 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8004960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004964:	e003      	b.n	800496e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004966:	f7ff fae1 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 800496a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	f040 810c 	bne.w	8004b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800497c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004980:	2200      	movs	r2, #0
 8004982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800498a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800498e:	4622      	mov	r2, r4
 8004990:	462b      	mov	r3, r5
 8004992:	1891      	adds	r1, r2, r2
 8004994:	65b9      	str	r1, [r7, #88]	; 0x58
 8004996:	415b      	adcs	r3, r3
 8004998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800499e:	4621      	mov	r1, r4
 80049a0:	eb12 0801 	adds.w	r8, r2, r1
 80049a4:	4629      	mov	r1, r5
 80049a6:	eb43 0901 	adc.w	r9, r3, r1
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049be:	4690      	mov	r8, r2
 80049c0:	4699      	mov	r9, r3
 80049c2:	4623      	mov	r3, r4
 80049c4:	eb18 0303 	adds.w	r3, r8, r3
 80049c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049cc:	462b      	mov	r3, r5
 80049ce:	eb49 0303 	adc.w	r3, r9, r3
 80049d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ea:	460b      	mov	r3, r1
 80049ec:	18db      	adds	r3, r3, r3
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
 80049f0:	4613      	mov	r3, r2
 80049f2:	eb42 0303 	adc.w	r3, r2, r3
 80049f6:	657b      	str	r3, [r7, #84]	; 0x54
 80049f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a00:	f7fc f8ee 	bl	8000be0 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	011c      	lsls	r4, r3, #4
 8004a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a24:	4642      	mov	r2, r8
 8004a26:	464b      	mov	r3, r9
 8004a28:	1891      	adds	r1, r2, r2
 8004a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a2c:	415b      	adcs	r3, r3
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a34:	4641      	mov	r1, r8
 8004a36:	eb12 0a01 	adds.w	sl, r2, r1
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a54:	4692      	mov	sl, r2
 8004a56:	469b      	mov	fp, r3
 8004a58:	4643      	mov	r3, r8
 8004a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a62:	464b      	mov	r3, r9
 8004a64:	eb4b 0303 	adc.w	r3, fp, r3
 8004a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a80:	460b      	mov	r3, r1
 8004a82:	18db      	adds	r3, r3, r3
 8004a84:	643b      	str	r3, [r7, #64]	; 0x40
 8004a86:	4613      	mov	r3, r2
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a96:	f7fc f8a3 	bl	8000be0 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2264      	movs	r2, #100	; 0x64
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	1acb      	subs	r3, r1, r3
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac4:	441c      	add	r4, r3
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae8:	4641      	mov	r1, r8
 8004aea:	1851      	adds	r1, r2, r1
 8004aec:	6339      	str	r1, [r7, #48]	; 0x30
 8004aee:	4649      	mov	r1, r9
 8004af0:	414b      	adcs	r3, r1
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b00:	4659      	mov	r1, fp
 8004b02:	00cb      	lsls	r3, r1, #3
 8004b04:	4651      	mov	r1, sl
 8004b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	00ca      	lsls	r2, r1, #3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	4642      	mov	r2, r8
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	460a      	mov	r2, r1
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	18db      	adds	r3, r3, r3
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	4613      	mov	r3, r2
 8004b44:	eb42 0303 	adc.w	r3, r2, r3
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b52:	f7fc f845 	bl	8000be0 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	2164      	movs	r1, #100	; 0x64
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	3332      	adds	r3, #50	; 0x32
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f003 0207 	and.w	r2, r3, #7
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4422      	add	r2, r4
 8004b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b84:	e106      	b.n	8004d94 <UART_SetConfig+0x4d8>
 8004b86:	bf00      	nop
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	464b      	mov	r3, r9
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	6239      	str	r1, [r7, #32]
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	1854      	adds	r4, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb43 0501 	adc.w	r5, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	00eb      	lsls	r3, r5, #3
 8004bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bce:	00e2      	lsls	r2, r4, #3
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	461d      	mov	r5, r3
 8004bd4:	4643      	mov	r3, r8
 8004bd6:	18e3      	adds	r3, r4, r3
 8004bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bdc:	464b      	mov	r3, r9
 8004bde:	eb45 0303 	adc.w	r3, r5, r3
 8004be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c02:	4629      	mov	r1, r5
 8004c04:	008b      	lsls	r3, r1, #2
 8004c06:	4621      	mov	r1, r4
 8004c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	008a      	lsls	r2, r1, #2
 8004c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c14:	f7fb ffe4 	bl	8000be0 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4b60      	ldr	r3, [pc, #384]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	011c      	lsls	r4, r3, #4
 8004c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	1891      	adds	r1, r2, r2
 8004c3e:	61b9      	str	r1, [r7, #24]
 8004c40:	415b      	adcs	r3, r3
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c48:	4641      	mov	r1, r8
 8004c4a:	1851      	adds	r1, r2, r1
 8004c4c:	6139      	str	r1, [r7, #16]
 8004c4e:	4649      	mov	r1, r9
 8004c50:	414b      	adcs	r3, r1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c60:	4659      	mov	r1, fp
 8004c62:	00cb      	lsls	r3, r1, #3
 8004c64:	4651      	mov	r1, sl
 8004c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	00ca      	lsls	r2, r1, #3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	4642      	mov	r2, r8
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	460a      	mov	r2, r1
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	008b      	lsls	r3, r1, #2
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004caa:	4641      	mov	r1, r8
 8004cac:	008a      	lsls	r2, r1, #2
 8004cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cb2:	f7fb ff95 	bl	8000be0 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	; 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cdc:	441c      	add	r4, r3
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	1851      	adds	r1, r2, r1
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	4649      	mov	r1, r9
 8004d04:	414b      	adcs	r3, r1
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d14:	4659      	mov	r1, fp
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1e:	4651      	mov	r1, sl
 8004d20:	00ca      	lsls	r2, r1, #3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	4642      	mov	r2, r8
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d2e:	464b      	mov	r3, r9
 8004d30:	460a      	mov	r2, r1
 8004d32:	eb42 0303 	adc.w	r3, r2, r3
 8004d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	663b      	str	r3, [r7, #96]	; 0x60
 8004d42:	667a      	str	r2, [r7, #100]	; 0x64
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d50:	4649      	mov	r1, r9
 8004d52:	008b      	lsls	r3, r1, #2
 8004d54:	4641      	mov	r1, r8
 8004d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	008a      	lsls	r2, r1, #2
 8004d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d62:	f7fb ff3d 	bl	8000be0 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	2164      	movs	r1, #100	; 0x64
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	3332      	adds	r3, #50	; 0x32
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4422      	add	r2, r4
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da0:	51eb851f 	.word	0x51eb851f

08004da4 <RdByte>:

uint8_t RdByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	460b      	mov	r3, r1
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8819      	ldrh	r1, [r3, #0]
 8004dca:	f107 0214 	add.w	r2, r7, #20
 8004dce:	2364      	movs	r3, #100	; 0x64
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	480c      	ldr	r0, [pc, #48]	; (8004e08 <RdByte+0x64>)
 8004dd6:	f7fd fc57 	bl	8002688 <HAL_I2C_Master_Transmit>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8819      	ldrh	r1, [r3, #0]
 8004de2:	f107 0210 	add.w	r2, r7, #16
 8004de6:	2364      	movs	r3, #100	; 0x64
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2301      	movs	r3, #1
 8004dec:	4806      	ldr	r0, [pc, #24]	; (8004e08 <RdByte+0x64>)
 8004dee:	f7fd fd49 	bl	8002884 <HAL_I2C_Master_Receive>
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8004df6:	7c3a      	ldrb	r2, [r7, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	701a      	strb	r2, [r3, #0]
	//uart_printf("read 1 byte\n");
	return status;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	2000009c 	.word	0x2000009c

08004e0c <WrByte>:

uint8_t WrByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	807b      	strh	r3, [r7, #2]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004e2a:	887b      	ldrh	r3, [r7, #2]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8004e30:	787b      	ldrb	r3, [r7, #1]
 8004e32:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 3, 100);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8819      	ldrh	r1, [r3, #0]
 8004e38:	f107 020c 	add.w	r2, r7, #12
 8004e3c:	2364      	movs	r3, #100	; 0x64
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2303      	movs	r3, #3
 8004e42:	4805      	ldr	r0, [pc, #20]	; (8004e58 <WrByte+0x4c>)
 8004e44:	f7fd fc20 	bl	8002688 <HAL_I2C_Master_Transmit>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
	//uart_printf("write 1 byte\n");
	return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000009c 	.word	0x2000009c

08004e5c <WrMulti>:
uint8_t WrMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	; 0x28
 8004e60:	af04      	add	r7, sp, #16
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8819      	ldrh	r1, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	897a      	ldrh	r2, [r7, #10]
 8004e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e7a:	9002      	str	r0, [sp, #8]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	2310      	movs	r3, #16
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <WrMulti+0x3c>)
 8004e86:	f7fd ff23 	bl	8002cd0 <HAL_I2C_Mem_Write>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	//uart_printf("write %d bytes\n",size);
	return status;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	2000009c 	.word	0x2000009c

08004e9c <RdMulti>:
uint8_t RdMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8004eac:	897b      	ldrh	r3, [r7, #10]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 10);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8819      	ldrh	r1, [r3, #0]
 8004ec0:	f107 0214 	add.w	r2, r7, #20
 8004ec4:	230a      	movs	r3, #10
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2302      	movs	r3, #2
 8004eca:	480d      	ldr	r0, [pc, #52]	; (8004f00 <RdMulti+0x64>)
 8004ecc:	f7fd fbdc 	bl	8002688 <HAL_I2C_Master_Transmit>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 400);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8819      	ldrh	r1, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ee0:	9200      	str	r2, [sp, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4806      	ldr	r0, [pc, #24]	; (8004f00 <RdMulti+0x64>)
 8004ee6:	f7fd fccd 	bl	8002884 <HAL_I2C_Master_Receive>
 8004eea:	4603      	mov	r3, r0
 8004eec:	461a      	mov	r2, r3
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	75fb      	strb	r3, [r7, #23]
    //uart_printf("read %d bytes\n",size);

	return status;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000009c 	.word	0x2000009c

08004f04 <SwapBuffer>:


void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e021      	b.n	8004f5a <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	440b      	add	r3, r1
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3302      	adds	r3, #2
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	440b      	add	r3, r1
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	3203      	adds	r2, #3
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	440a      	add	r2, r1
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	4313      	orrs	r3, r2
		tmp = (
 8004f48:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3304      	adds	r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3d9      	bcc.n	8004f16 <SwapBuffer+0x12>
	}
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <WaitMs>:

uint8_t WaitMs(
		VL53LMZ_Platform *p_platform,
		uint32_t TimeMs)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8004f7a:	6838      	ldr	r0, [r7, #0]
 8004f7c:	f7fc fea8 	bl	8001cd0 <HAL_Delay>
	return 0;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_vl53lmz_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	461a      	mov	r2, r3
 8004f98:	4603      	mov	r3, r0
 8004f9a:	70fb      	strb	r3, [r7, #3]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70bb      	strb	r3, [r7, #2]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8004fac:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), address,
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	8839      	ldrh	r1, [r7, #0]
 8004fb8:	f7ff ff70 	bl	8004e9c <RdMulti>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	210a      	movs	r1, #10
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ffd0 	bl	8004f70 <WaitMs>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8004fda:	7bbb      	ldrb	r3, [r7, #14]
 8004fdc:	2bc7      	cmp	r3, #199	; 0xc7
 8004fde:	d904      	bls.n	8004fea <_vl53lmz_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53LMZ_STATUS_TIMEOUT_ERROR;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
			break;
 8004fe8:	e01a      	b.n	8005020 <_vl53lmz_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d909      	bls.n	8005004 <_vl53lmz_poll_for_answer+0x7a>
						 && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8004ff6:	2b7e      	cmp	r3, #126	; 0x7e
 8004ff8:	d904      	bls.n	8005004 <_vl53lmz_poll_for_answer+0x7a>
		{
			status |= VL53LMZ_MCU_ERROR;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005000:	73fb      	strb	r3, [r7, #15]
			break;
 8005002:	e00d      	b.n	8005020 <_vl53lmz_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8005004:	7bbb      	ldrb	r3, [r7, #14]
 8005006:	3301      	adds	r3, #1
 8005008:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800500a:	78bb      	ldrb	r3, [r7, #2]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8005014:	7e3b      	ldrb	r3, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	b2db      	uxtb	r3, r3
 800501a:	7f3a      	ldrb	r2, [r7, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d1c5      	bne.n	8004fac <_vl53lmz_poll_for_answer+0x22>

	return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_vl53lmz_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53lmz_poll_for_mcu_boot(
			  VL53LMZ_Configuration		 *p_dev)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53LMZ_STATUS_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f107 020b 	add.w	r2, r7, #11
 8005040:	2106      	movs	r1, #6
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff feae 	bl	8004da4 <RdByte>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4313      	orrs	r3, r2
 8005050:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	b25b      	sxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	da10      	bge.n	800507c <_vl53lmz_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f107 020a 	add.w	r2, r7, #10
 8005060:	2107      	movs	r1, #7
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fe9e 	bl	8004da4 <RdByte>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	4313      	orrs	r3, r2
 8005070:	73fb      	strb	r3, [r7, #15]
			if(go2_status1 & (uint8_t)0x01)
 8005072:	7abb      	ldrb	r3, [r7, #10]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d111      	bne.n	80050a0 <_vl53lmz_poll_for_mcu_boot+0x76>
			{
				status |= VL53LMZ_STATUS_OK;
				break;
			}
		}
		(void)WaitMs(&(p_dev->platform), 1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2101      	movs	r1, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff ff75 	bl	8004f70 <WaitMs>
		timeout++;
 8005086:	89bb      	ldrh	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800508c:	7afb      	ldrb	r3, [r7, #11]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <_vl53lmz_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8005096:	89bb      	ldrh	r3, [r7, #12]
 8005098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800509c:	d3cd      	bcc.n	800503a <_vl53lmz_poll_for_mcu_boot+0x10>
 800509e:	e002      	b.n	80050a6 <_vl53lmz_poll_for_mcu_boot+0x7c>
				break;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <_vl53lmz_poll_for_mcu_boot+0x7c>
			break;
 80050a4:	bf00      	nop

   return status;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_vl53lmz_send_offset_data>:
 */

static uint8_t _vl53lmz_send_offset_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t						resolution)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b0ea      	sub	sp, #424	; 0x1a8
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80050ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80050be:	6018      	str	r0, [r3, #0]
 80050c0:	460a      	mov	r2, r1
 80050c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80050c6:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80050ca:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80050d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80050d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050da:	4ad9      	ldr	r2, [pc, #868]	; (8005440 <_vl53lmz_send_offset_data+0x390>)
 80050dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050e0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80050e4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80050e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80050ec:	4ad5      	ldr	r2, [pc, #852]	; (8005444 <_vl53lmz_send_offset_data+0x394>)
 80050ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050f2:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80050f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80050fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f203 5004 	addw	r0, r3, #1284	; 0x504
			   p_dev->offset_data, VL53LMZ_OFFSET_BUFFER_SIZE);
 8005104:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005108:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
	(void)memcpy(p_dev->temp_buffer,
 8005110:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005114:	4619      	mov	r1, r3
 8005116:	f003 ff29 	bl	8008f6c <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4){
 800511a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800511e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b10      	cmp	r3, #16
 8005126:	f040 8122 	bne.w	800536e <_vl53lmz_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800512a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800512e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f203 5214 	addw	r2, r3, #1300	; 0x514
 8005138:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800513c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005140:	cb03      	ldmia	r3!, {r0, r1}
 8005142:	6010      	str	r0, [r2, #0]
 8005144:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 8005146:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800514a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005154:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fed3 	bl	8004f04 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800515e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005162:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
 800516c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005174:	4618      	mov	r0, r3
 8005176:	f003 fef9 	bl	8008f6c <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800517a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800517e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f203 6144 	addw	r1, r3, #1604	; 0x644
 8005188:	f107 0318 	add.w	r3, r7, #24
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	4618      	mov	r0, r3
 8005190:	f003 feec 	bl	8008f6c <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8005194:	2300      	movs	r3, #0
 8005196:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800519a:	e0ac      	b.n	80052f6 <_vl53lmz_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80051a2:	e09c      	b.n	80052de <_vl53lmz_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 80051a4:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80051a8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	005a      	lsls	r2, r3, #1
 80051b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80051b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80051be:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80051c2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	1c59      	adds	r1, r3, #1
 80051ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051da:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80051dc:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80051e0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	440b      	add	r3, r1
 80051e8:	3304      	adds	r3, #4
 80051ea:	0059      	lsls	r1, r3, #1
 80051ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051f8:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80051fa:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80051fe:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	440b      	add	r3, r1
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	f103 0109 	add.w	r1, r3, #9
 800520c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005218:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800521a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800521e:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8005222:	0092      	lsls	r2, r2, #2
 8005224:	440a      	add	r2, r1
								  /(uint32_t)4;
 8005226:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8005228:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8005234:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8005238:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	005a      	lsls	r2, r3, #1
 8005242:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005246:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800524a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800524e:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8005250:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8005254:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005264:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005268:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800526c:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800526e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005272:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8005276:	00d2      	lsls	r2, r2, #3
 8005278:	440a      	add	r2, r1
 800527a:	3204      	adds	r2, #4
 800527c:	0051      	lsls	r1, r2, #1
 800527e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8005282:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8005286:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800528a:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 800528c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005290:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8005294:	00d2      	lsls	r2, r2, #3
 8005296:	440a      	add	r2, r1
 8005298:	0052      	lsls	r2, r2, #1
 800529a:	f102 0109 	add.w	r1, r2, #9
 800529e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80052a2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80052a6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80052aa:	4413      	add	r3, r2
								  /(int16_t)4;
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	da00      	bge.n	80052b2 <_vl53lmz_send_offset_data+0x202>
 80052b0:	3303      	adds	r3, #3
 80052b2:	109b      	asrs	r3, r3, #2
 80052b4:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80052b6:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80052ba:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	b209      	sxth	r1, r1
 80052c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80052c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80052cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80052d0:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80052de:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	f77f af5e 	ble.w	80051a4 <_vl53lmz_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80052e8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	3301      	adds	r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80052f6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	f77f af4e 	ble.w	800519c <_vl53lmz_send_offset_data+0xec>
			}
		}
		(void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8005300:	f107 0318 	add.w	r3, r7, #24
 8005304:	3320      	adds	r3, #32
 8005306:	2260      	movs	r2, #96	; 0x60
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f003 fdfc 	bl	8008f08 <memset>
		(void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8005310:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005314:	3340      	adds	r3, #64	; 0x40
 8005316:	22c0      	movs	r2, #192	; 0xc0
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f003 fdf4 	bl	8008f08 <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8005320:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005324:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 800532e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8005332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005336:	4618      	mov	r0, r3
 8005338:	f003 fe18 	bl	8008f6c <memcpy>
					signal_grid, sizeof(signal_grid));
		(void)memcpy(&(p_dev->temp_buffer[0x140]),
 800533c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005340:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800534a:	f107 0118 	add.w	r1, r7, #24
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	4618      	mov	r0, r3
 8005352:	f003 fe0b 	bl	8008f6c <memcpy>
					range_grid, sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 8005356:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800535a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005364:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fdcb 	bl	8004f04 <SwapBuffer>
	}

	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800536e:	2300      	movs	r3, #0
 8005370:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8005374:	e01b      	b.n	80053ae <_vl53lmz_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8005376:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8005382:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8005386:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800538a:	6809      	ldr	r1, [r1, #0]
 800538c:	440a      	add	r2, r1
 800538e:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 8005392:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8005396:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	4413      	add	r3, r2
 800539e:	460a      	mov	r2, r1
 80053a0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80053a4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80053a8:	3301      	adds	r3, #1
 80053aa:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 80053ae:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80053b2:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 80053b6:	d3de      	bcc.n	8005376 <_vl53lmz_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80053b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f203 62e4 	addw	r2, r3, #1764	; 0x6e4
 80053c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80053ce:	cb03      	ldmia	r3!, {r0, r1}
 80053d0:	6010      	str	r0, [r2, #0]
 80053d2:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80053d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80053e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f203 5204 	addw	r2, r3, #1284	; 0x504
 80053ec:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80053f0:	f642 6118 	movw	r1, #11800	; 0x2e18
 80053f4:	f7ff fd32 	bl	8004e5c <WrMulti>
 80053f8:	4603      	mov	r3, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8005400:	4313      	orrs	r3, r2
 8005402:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 8005406:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800540a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800540e:	2303      	movs	r3, #3
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	23ff      	movs	r3, #255	; 0xff
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800541a:	2201      	movs	r2, #1
 800541c:	2104      	movs	r1, #4
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f7ff fdb3 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8005424:	4603      	mov	r3, r0
 8005426:	461a      	mov	r2, r3
 8005428:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800542c:	4313      	orrs	r3, r2
 800542e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8005432:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8005436:	4618      	mov	r0, r3
 8005438:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	0800b338 	.word	0x0800b338
 8005444:	0800b340 	.word	0x0800b340

08005448 <_vl53lmz_send_xtalk_data>:
 */

static uint8_t _vl53lmz_send_xtalk_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				resolution)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b0ca      	sub	sp, #296	; 0x128
 800544c:	af02      	add	r7, sp, #8
 800544e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005452:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005456:	6018      	str	r0, [r3, #0]
 8005458:	460a      	mov	r2, r1
 800545a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800545e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005462:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800546a:	4a9a      	ldr	r2, [pc, #616]	; (80056d4 <_vl53lmz_send_xtalk_data+0x28c>)
 800546c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005474:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8005478:	4a97      	ldr	r2, [pc, #604]	; (80056d8 <_vl53lmz_send_xtalk_data+0x290>)
 800547a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800547e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005482:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8005486:	4b95      	ldr	r3, [pc, #596]	; (80056dc <_vl53lmz_send_xtalk_data+0x294>)
 8005488:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 800548c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005490:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f203 5004 	addw	r0, r3, #1284	; 0x504
 800549a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800549e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80054a8:	f44f 7242 	mov.w	r2, #776	; 0x308
 80054ac:	4619      	mov	r1, r3
 80054ae:	f003 fd5d 	bl	8008f6c <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4)
 80054b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054b6:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b10      	cmp	r3, #16
 80054be:	f040 80d2 	bne.w	8005666 <_vl53lmz_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80054c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80054d0:	461a      	mov	r2, r3
 80054d2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80054d6:	cb03      	ldmia	r3!, {r0, r1}
 80054d8:	6010      	str	r0, [r2, #0]
 80054da:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80054dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80054ea:	461a      	mov	r2, r3
 80054ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80054f0:	cb03      	ldmia	r3!, {r0, r1}
 80054f2:	6010      	str	r0, [r2, #0]
 80054f4:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80054f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005504:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fcfb 	bl	8004f04 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800550e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 800551c:	f107 0308 	add.w	r3, r7, #8
 8005520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005524:	4618      	mov	r0, r3
 8005526:	f003 fd21 	bl	8008f6c <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800552a:	2300      	movs	r3, #0
 800552c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005530:	e05d      	b.n	80055ee <_vl53lmz_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8005532:	2300      	movs	r3, #0
 8005534:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8005538:	e04e      	b.n	80055d8 <_vl53lmz_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800553a:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 800553e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	005a      	lsls	r2, r3, #1
 8005548:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800554c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8005554:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8005558:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005568:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800556c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005570:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8005572:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8005576:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	3304      	adds	r3, #4
 8005580:	0059      	lsls	r1, r3, #1
 8005582:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005586:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800558a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800558e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8005590:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8005594:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	f103 0109 	add.w	r1, r3, #9
 80055a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80055ae:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80055b0:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80055b4:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 80055b8:	0092      	lsls	r2, r2, #2
 80055ba:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80055bc:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80055be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80055ca:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80055d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80055dc:	2b03      	cmp	r3, #3
 80055de:	ddac      	ble.n	800553a <_vl53lmz_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80055e0:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80055ee:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	dd9d      	ble.n	8005532 <_vl53lmz_send_xtalk_data+0xea>
			}
		}
		(void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	3340      	adds	r3, #64	; 0x40
 80055fc:	22c0      	movs	r2, #192	; 0xc0
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f003 fc81 	bl	8008f08 <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x34]),
 8005606:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800560a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005614:	f107 0108 	add.w	r1, r7, #8
 8005618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561c:	4618      	mov	r0, r3
 800561e:	f003 fca5 	bl	8008f6c <memcpy>
				  signal_grid, sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8005622:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005626:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005630:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fc65 	bl	8004f04 <SwapBuffer>
		(void)memcpy(&(p_dev->temp_buffer[0x134]),
 800563a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800563e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8005648:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800564c:	601a      	str	r2, [r3, #0]
		profile_4x4, sizeof(profile_4x4));
		(void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800564e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005652:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 800565c:	2204      	movs	r2, #4
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f003 fc51 	bl	8008f08 <memset>
						 (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8005666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800566a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800566e:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 8005670:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005674:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800567e:	f44f 7342 	mov.w	r3, #776	; 0x308
 8005682:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8005686:	f7ff fbe9 	bl	8004e5c <WrMulti>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005692:	4313      	orrs	r3, r2
 8005694:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 8005698:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800569c:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80056a0:	2303      	movs	r3, #3
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	23ff      	movs	r3, #255	; 0xff
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80056ac:	2201      	movs	r2, #1
 80056ae:	2104      	movs	r1, #4
 80056b0:	6800      	ldr	r0, [r0, #0]
 80056b2:	f7ff fc6a 	bl	8004f8a <_vl53lmz_poll_for_answer>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80056be:	4313      	orrs	r3, r2
 80056c0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80056c4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	0800b348 	.word	0x0800b348
 80056d8:	0800b350 	.word	0x0800b350
 80056dc:	0001fca0 	.word	0x0001fca0

080056e0 <vl53lmz_init>:
	return status;
}

uint8_t vl53lmz_init(
		VL53LMZ_Configuration		*p_dev)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53LMZ_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80056ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80056f0:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80056f2:	2301      	movs	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	/* method below copied from vl52l5cx_is_alive() */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fb7e 	bl	8004e0c <WrByte>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	4313      	orrs	r3, r2
 8005718:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0, &(p_dev->device_id));
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 8005722:	330d      	adds	r3, #13
 8005724:	461a      	mov	r2, r3
 8005726:	2100      	movs	r1, #0
 8005728:	f7ff fb3c 	bl	8004da4 <RdByte>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	4313      	orrs	r3, r2
 8005734:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 1, &(p_dev->revision_id));
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f503 530f 	add.w	r3, r3, #9152	; 0x23c0
 800573e:	330e      	adds	r3, #14
 8005740:	461a      	mov	r2, r3
 8005742:	2101      	movs	r1, #1
 8005744:	f7ff fb2e 	bl	8004da4 <RdByte>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	7dfb      	ldrb	r3, [r7, #23]
 800574e:	4313      	orrs	r3, r2
 8005750:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fb56 	bl	8004e0c <WrByte>
 8005760:	4603      	mov	r3, r0
 8005762:	461a      	mov	r2, r3
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	4313      	orrs	r3, r2
 8005768:	75fb      	strb	r3, [r7, #23]
	if((p_dev->device_id!=(uint8_t)0xF0)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005770:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8005774:	2bf0      	cmp	r3, #240	; 0xf0
 8005776:	d114      	bne.n	80057a2 <vl53lmz_init+0xc2>
		|| ((p_dev->revision_id!=(uint8_t)REVISION_CUT11) && (p_dev->revision_id!=(uint8_t)REVISION_CUT12) && (p_dev->revision_id!=(uint8_t)REVISION_L8))) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800577e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005782:	2b01      	cmp	r3, #1
 8005784:	d011      	beq.n	80057aa <vl53lmz_init+0xca>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800578c:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005790:	2b02      	cmp	r3, #2
 8005792:	d00a      	beq.n	80057aa <vl53lmz_init+0xca>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800579a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	d003      	beq.n	80057aa <vl53lmz_init+0xca>
		/* unexpected combination of device and revision IDs */
		status = VL53LMZ_STATUS_UNKNOWN_DEVICE;
 80057a2:	2304      	movs	r3, #4
 80057a4:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80057a6:	f000 bc8c 	b.w	80060c2 <vl53lmz_init+0x9e2>
	}

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fb2a 	bl	8004e0c <WrByte>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	4313      	orrs	r3, r2
 80057c0:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2204      	movs	r2, #4
 80057c6:	2109      	movs	r1, #9
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fb1f 	bl	8004e0c <WrByte>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2240      	movs	r2, #64	; 0x40
 80057dc:	210f      	movs	r1, #15
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fb14 	bl	8004e0c <WrByte>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2203      	movs	r2, #3
 80057f2:	210a      	movs	r1, #10
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fb09 	bl	8004e0c <WrByte>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	4313      	orrs	r3, r2
 8005802:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f107 0216 	add.w	r2, r7, #22
 800580a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fac8 	bl	8004da4 <RdByte>
 8005814:	4603      	mov	r3, r0
 8005816:	461a      	mov	r2, r3
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	4313      	orrs	r3, r2
 800581c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	210c      	movs	r1, #12
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff faf1 	bl	8004e0c <WrByte>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	4313      	orrs	r3, r2
 8005832:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f240 1101 	movw	r1, #257	; 0x101
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fae5 	bl	8004e0c <WrByte>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	4313      	orrs	r3, r2
 800584a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fad9 	bl	8004e0c <WrByte>
 800585a:	4603      	mov	r3, r0
 800585c:	461a      	mov	r2, r3
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	4313      	orrs	r3, r2
 8005862:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff facd 	bl	8004e0c <WrByte>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	4313      	orrs	r3, r2
 800587a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f244 0102 	movw	r1, #16386	; 0x4002
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fac1 	bl	8004e0c <WrByte>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	4313      	orrs	r3, r2
 8005892:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f244 0102 	movw	r1, #16386	; 0x4002
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff fab5 	bl	8004e0c <WrByte>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2203      	movs	r2, #3
 80058b0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff faa9 	bl	8004e0c <WrByte>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f240 1103 	movw	r1, #259	; 0x103
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fa9d 	bl	8004e0c <WrByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	4313      	orrs	r3, r2
 80058da:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	210c      	movs	r1, #12
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fa92 	bl	8004e0c <WrByte>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2243      	movs	r2, #67	; 0x43
 80058f6:	210f      	movs	r1, #15
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fa87 	bl	8004e0c <WrByte>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	4313      	orrs	r3, r2
 8005906:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fb2f 	bl	8004f70 <WaitMs>
 8005912:	4603      	mov	r3, r0
 8005914:	461a      	mov	r2, r3
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	4313      	orrs	r3, r2
 800591a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	210f      	movs	r1, #15
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fa72 	bl	8004e0c <WrByte>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	4313      	orrs	r3, r2
 8005930:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	210a      	movs	r1, #10
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fa67 	bl	8004e0c <WrByte>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	4313      	orrs	r3, r2
 8005946:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2164      	movs	r1, #100	; 0x64
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fb0f 	bl	8004f70 <WaitMs>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	4313      	orrs	r3, r2
 800595a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fa51 	bl	8004e0c <WrByte>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	4313      	orrs	r3, r2
 8005972:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8005974:	2301      	movs	r3, #1
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	23ff      	movs	r3, #255	; 0xff
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2306      	movs	r3, #6
 800597e:	2200      	movs	r2, #0
 8005980:	2101      	movs	r1, #1
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fb01 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	4313      	orrs	r3, r2
 8005990:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 838f 	bne.w	80060b8 <vl53lmz_init+0x9d8>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	210e      	movs	r1, #14
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fa33 	bl	8004e0c <WrByte>
 80059a6:	4603      	mov	r3, r0
 80059a8:	461a      	mov	r2, r3
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059b6:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d126      	bne.n	8005a0c <vl53lmz_init+0x32c>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fa20 	bl	8004e0c <WrByte>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	2106      	movs	r1, #6
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fa15 	bl	8004e0c <WrByte>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 80059ec:	2304      	movs	r3, #4
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	23ff      	movs	r3, #255	; 0xff
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2321      	movs	r3, #33	; 0x21
 80059f6:	2200      	movs	r2, #0
 80059f8:	2101      	movs	r1, #1
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fac5 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	75fb      	strb	r3, [r7, #23]
 8005a0a:	e031      	b.n	8005a70 <vl53lmz_init+0x390>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff f9f9 	bl	8004e0c <WrByte>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	220d      	movs	r2, #13
 8005a28:	2103      	movs	r1, #3
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff f9ee 	bl	8004e0c <WrByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff f9e2 	bl	8004e0c <WrByte>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8005a52:	2310      	movs	r3, #16
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	2310      	movs	r3, #16
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	2321      	movs	r3, #33	; 0x21
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2101      	movs	r1, #1
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fa92 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	75fb      	strb	r3, [r7, #23]
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff f9c7 	bl	8004e0c <WrByte>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	461a      	mov	r2, r3
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f107 0216 	add.w	r2, r7, #22
 8005a8e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff f986 	bl	8004da4 <RdByte>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	210c      	movs	r1, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff f9af 	bl	8004e0c <WrByte>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff f9a3 	bl	8004e0c <WrByte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	461a      	mov	r2, r3
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f240 1101 	movw	r1, #257	; 0x101
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff f997 	bl	8004e0c <WrByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff f98b 	bl	8004e0c <WrByte>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff f97f 	bl	8004e0c <WrByte>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f244 0102 	movw	r1, #16386	; 0x4002
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff f973 	bl	8004e0c <WrByte>
 8005b26:	4603      	mov	r3, r0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f244 0102 	movw	r1, #16386	; 0x4002
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff f967 	bl	8004e0c <WrByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff f95b 	bl	8004e0c <WrByte>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f240 1103 	movw	r1, #259	; 0x103
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff f94f 	bl	8004e0c <WrByte>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f244 010f 	movw	r1, #16399	; 0x400f
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff f943 	bl	8004e0c <WrByte>
 8005b86:	4603      	mov	r3, r0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2243      	movs	r2, #67	; 0x43
 8005b94:	f240 211a 	movw	r1, #538	; 0x21a
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff f937 	bl	8004e0c <WrByte>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2203      	movs	r2, #3
 8005bac:	f240 211a 	movw	r1, #538	; 0x21a
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff f92b 	bl	8004e0c <WrByte>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f240 211a 	movw	r1, #538	; 0x21a
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff f91f 	bl	8004e0c <WrByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f240 211a 	movw	r1, #538	; 0x21a
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff f913 	bl	8004e0c <WrByte>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f240 2119 	movw	r1, #537	; 0x219
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff f907 	bl	8004e0c <WrByte>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	461a      	mov	r2, r3
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f240 211b 	movw	r1, #539	; 0x21b
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff f8fb 	bl	8004e0c <WrByte>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff f8ef 	bl	8004e0c <WrByte>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f107 0216 	add.w	r2, r7, #22
 8005c3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f8ae 	bl	8004da4 <RdByte>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f8d6 	bl	8004e0c <WrByte>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2207      	movs	r2, #7
 8005c6e:	2120      	movs	r1, #32
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f8cb 	bl	8004e0c <WrByte>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2206      	movs	r2, #6
 8005c84:	2120      	movs	r1, #32
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff f8c0 	bl	8004e0c <WrByte>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53LMZ */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2209      	movs	r2, #9
 8005c9a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff f8b4 	bl	8004e0c <WrByte>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb4:	4adc      	ldr	r2, [pc, #880]	; (8006028 <vl53lmz_init+0x948>)
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	f7ff f8d0 	bl	8004e5c <WrMulti>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	220a      	movs	r2, #10
 8005cca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f89c 	bl	8004e0c <WrByte>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce4:	4ad1      	ldr	r2, [pc, #836]	; (800602c <vl53lmz_init+0x94c>)
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	f7ff f8b8 	bl	8004e5c <WrMulti>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	220b      	movs	r2, #11
 8005cfa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff f884 	bl	8004e0c <WrByte>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8005d14:	4ac6      	ldr	r2, [pc, #792]	; (8006030 <vl53lmz_init+0x950>)
 8005d16:	2100      	movs	r1, #0
 8005d18:	f7ff f8a0 	bl	8004e5c <WrMulti>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff f86c 	bl	8004e0c <WrByte>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d44:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d121      	bne.n	8005d90 <vl53lmz_init+0x6b0>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff f859 	bl	8004e0c <WrByte>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2203      	movs	r2, #3
 8005d68:	2106      	movs	r1, #6
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff f84e 	bl	8004e0c <WrByte>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	75fb      	strb	r3, [r7, #23]
		status |= WaitMs(&(p_dev->platform), 5);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2105      	movs	r1, #5
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff f8f6 	bl	8004f70 <WaitMs>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	75fb      	strb	r3, [r7, #23]
 8005d8e:	e031      	b.n	8005df4 <vl53lmz_init+0x714>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff f837 	bl	8004e0c <WrByte>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	220d      	movs	r2, #13
 8005dac:	2103      	movs	r1, #3
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff f82c 	bl	8004e0c <WrByte>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff f820 	bl	8004e0c <WrByte>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	2310      	movs	r3, #16
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	2321      	movs	r3, #33	; 0x21
 8005de0:	2200      	movs	r2, #0
 8005de2:	2101      	movs	r1, #1
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff f8d0 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	75fb      	strb	r3, [r7, #23]
	}
	if(status != (uint8_t)0) {
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8160 	bne.w	80060bc <vl53lmz_init+0x9dc>
		goto exit;
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff f801 	bl	8004e0c <WrByte>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f107 0216 	add.w	r2, r7, #22
 8005e1a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe ffc0 	bl	8004da4 <RdByte>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	210c      	movs	r1, #12
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe ffe9 	bl	8004e0c <WrByte>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe ffdd 	bl	8004e0c <WrByte>
 8005e52:	4603      	mov	r3, r0
 8005e54:	461a      	mov	r2, r3
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe ffd1 	bl	8004e0c <WrByte>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f240 1115 	movw	r1, #277	; 0x115
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe ffc5 	bl	8004e0c <WrByte>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461a      	mov	r2, r3
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2242      	movs	r2, #66	; 0x42
 8005e90:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fe ffb9 	bl	8004e0c <WrByte>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f240 1117 	movw	r1, #279	; 0x117
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe ffad 	bl	8004e0c <WrByte>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	210b      	movs	r1, #11
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe ffa2 	bl	8004e0c <WrByte>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f107 0216 	add.w	r2, r7, #22
 8005ed8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe ff61 	bl	8004da4 <RdByte>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	210c      	movs	r1, #12
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe ff8a 	bl	8004e0c <WrByte>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	210b      	movs	r1, #11
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe ff7f 	bl	8004e0c <WrByte>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461a      	mov	r2, r3
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	75fb      	strb	r3, [r7, #23]

	status |= _vl53lmz_poll_for_mcu_boot(p_dev);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff f886 	bl	800502a <_vl53lmz_poll_for_mcu_boot>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	461a      	mov	r2, r3
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 80c8 	bne.w	80060c0 <vl53lmz_init+0x9e0>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe ff67 	bl	8004e0c <WrByte>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	2328      	movs	r3, #40	; 0x28
 8005f4c:	4a39      	ldr	r2, [pc, #228]	; (8006034 <vl53lmz_init+0x954>)
 8005f4e:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8005f52:	f7fe ff83 	bl	8004e5c <WrMulti>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53LMZ_GET_NVM_CMD, sizeof(VL53LMZ_GET_NVM_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 0,
 8005f60:	2302      	movs	r3, #2
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	23ff      	movs	r3, #255	; 0xff
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2104      	movs	r1, #4
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff f80a 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8005f76:	4603      	mov	r3, r0
 8005f78:	461a      	mov	r2, r3
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	75fb      	strb	r3, [r7, #23]
		VL53LMZ_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005f80:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53LMZ_NVM_DATA_SIZE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005f88:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8005f8c:	f642 4104 	movw	r1, #11268	; 0x2c04
 8005f90:	f7fe ff84 	bl	8004e9c <RdMulti>
 8005f94:	4603      	mov	r3, r0
 8005f96:	461a      	mov	r2, r3
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f103 0014 	add.w	r0, r3, #20
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8005faa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f002 ffdc 	bl	8008f6c <memcpy>
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |= _vl53lmz_send_offset_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8005fb4:	2110      	movs	r1, #16
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff f87a 	bl	80050b0 <_vl53lmz_send_offset_data>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	p_dev->default_xtalk = (uint8_t*)VL53LMZ_DEFAULT_XTALK;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <vl53lmz_init+0x958>)
 8005fca:	611a      	str	r2, [r3, #16]
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53LMZ_DEFAULT_XTALK,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005fd2:	4a19      	ldr	r2, [pc, #100]	; (8006038 <vl53lmz_init+0x958>)
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	f44f 7342 	mov.w	r3, #776	; 0x308
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f002 ffc5 	bl	8008f6c <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);
	status |= _vl53lmz_send_xtalk_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8005fe2:	2110      	movs	r1, #16
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fa2f 	bl	8005448 <_vl53lmz_send_xtalk_data>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ffa:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d11e      	bne.n	8006040 <vl53lmz_init+0x960>
		p_dev->default_configuration = (uint8_t*)VL53L8_DEFAULT_CONFIGURATION;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a0d      	ldr	r2, [pc, #52]	; (800603c <vl53lmz_init+0x95c>)
 8006006:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8006012:	f642 4134 	movw	r1, #11316	; 0x2c34
 8006016:	f7fe ff21 	bl	8004e5c <WrMulti>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	4313      	orrs	r3, r2
 8006022:	75fb      	strb	r3, [r7, #23]
 8006024:	e01d      	b.n	8006062 <vl53lmz_init+0x982>
 8006026:	bf00      	nop
 8006028:	0800b3ac 	.word	0x0800b3ac
 800602c:	080133ac 	.word	0x080133ac
 8006030:	0801b3ac 	.word	0x0801b3ac
 8006034:	08020e4c 	.word	0x08020e4c
 8006038:	08020b44 	.word	0x08020b44
 800603c:	080203ac 	.word	0x080203ac
							p_dev->default_configuration,
							sizeof(VL53L8_DEFAULT_CONFIGURATION));
	}
	else {
		p_dev->default_configuration = (uint8_t*)VL53L7_DEFAULT_CONFIGURATION;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a22      	ldr	r2, [pc, #136]	; (80060cc <vl53lmz_init+0x9ec>)
 8006044:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8006050:	f642 4134 	movw	r1, #11316	; 0x2c34
 8006054:	f7fe ff02 	bl	8004e5c <WrMulti>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	4313      	orrs	r3, r2
 8006060:	75fb      	strb	r3, [r7, #23]
							p_dev->default_configuration,
							sizeof(VL53L7_DEFAULT_CONFIGURATION));
	}

	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1, VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);
 8006062:	2303      	movs	r3, #3
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	23ff      	movs	r3, #255	; 0xff
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800606e:	2201      	movs	r2, #1
 8006070:	2104      	movs	r1, #4
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fe ff89 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	4313      	orrs	r3, r2
 8006080:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8006082:	f107 0110 	add.w	r1, r7, #16
 8006086:	2304      	movs	r3, #4
 8006088:	f64d 3280 	movw	r2, #56192	; 0xdb80
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc7b 	bl	8006988 <vl53lmz_dci_write_data>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	4313      	orrs	r3, r2
 800609a:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53LMZ_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 800609c:	f107 010c 	add.w	r1, r7, #12
 80060a0:	2304      	movs	r3, #4
 80060a2:	f64d 1264 	movw	r2, #55652	; 0xd964
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fc6e 	bl	8006988 <vl53lmz_dci_write_data>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	75fb      	strb	r3, [r7, #23]
 80060b6:	e004      	b.n	80060c2 <vl53lmz_init+0x9e2>
		goto exit;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <vl53lmz_init+0x9e2>
		goto exit;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <vl53lmz_init+0x9e2>
		goto exit;
 80060c0:	bf00      	nop
			VL53LMZ_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	08020778 	.word	0x08020778

080060d0 <vl53lmz_start_ranging>:
	return status;
}

uint8_t vl53lmz_start_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]

	status = vl53lmz_create_output_config( p_dev );
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fd1f 	bl	8006b20 <vl53lmz_create_output_config>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
	if (status != VL53LMZ_STATUS_OK)
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <vl53lmz_start_ranging+0x20>
		return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	e005      	b.n	80060fc <vl53lmz_start_ranging+0x2c>

	status = vl53lmz_send_output_config_and_start( p_dev );
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fd83 	bl	8006bfc <vl53lmz_send_output_config_and_start>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]

	return status;
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <vl53lmz_stop_ranging>:

uint8_t vl53lmz_stop_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53LMZ_STATUS_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	74fb      	strb	r3, [r7, #19]
 8006110:	2300      	movs	r3, #0
 8006112:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f107 020c 	add.w	r2, r7, #12
 8006122:	2304      	movs	r3, #4
 8006124:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8006128:	f7fe feb8 	bl	8004e9c <RdMulti>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	4313      	orrs	r3, r2
 8006134:	75fb      	strb	r3, [r7, #23]
						  0x2FFC, (uint8_t*)&auto_stop_flag, 4);

	if((auto_stop_flag != (uint32_t)0x4FF)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f240 42ff 	movw	r2, #1279	; 0x4ff
 800613c:	4293      	cmp	r3, r2
 800613e:	d04f      	beq.n	80061e0 <vl53lmz_stop_ranging+0xdc>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006146:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800614a:	2b01      	cmp	r3, #1
 800614c:	d148      	bne.n	80061e0 <vl53lmz_stop_ranging+0xdc>
	{
			status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fe58 	bl	8004e0c <WrByte>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	4313      	orrs	r3, r2
 8006164:	75fb      	strb	r3, [r7, #23]

			/* Provoke MCU stop */
			status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2216      	movs	r2, #22
 800616a:	2115      	movs	r1, #21
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fe4d 	bl	8004e0c <WrByte>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	4313      	orrs	r3, r2
 800617a:	75fb      	strb	r3, [r7, #23]
			status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	2114      	movs	r1, #20
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fe42 	bl	8004e0c <WrByte>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	4313      	orrs	r3, r2
 8006190:	75fb      	strb	r3, [r7, #23]

			/* Poll for G02 status 0 MCU stop */
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8006192:	e021      	b.n	80061d8 <vl53lmz_stop_ranging+0xd4>
			{
				status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f107 0213 	add.w	r2, r7, #19
 800619a:	2106      	movs	r1, #6
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe fe01 	bl	8004da4 <RdByte>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461a      	mov	r2, r3
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	75fb      	strb	r3, [r7, #23]
				status |= WaitMs(&(p_dev->platform), 10);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	210a      	movs	r1, #10
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe fedd 	bl	8004f70 <WaitMs>
 80061b6:	4603      	mov	r3, r0
 80061b8:	461a      	mov	r2, r3
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	4313      	orrs	r3, r2
 80061be:	75fb      	strb	r3, [r7, #23]
				timeout++;	/* Timeout reached after 5 seconds */
 80061c0:	8abb      	ldrh	r3, [r7, #20]
 80061c2:	3301      	adds	r3, #1
 80061c4:	82bb      	strh	r3, [r7, #20]

				if(timeout > (uint16_t)500)
 80061c6:	8abb      	ldrh	r3, [r7, #20]
 80061c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80061cc:	d904      	bls.n	80061d8 <vl53lmz_stop_ranging+0xd4>
				{
					status |= tmp;
 80061ce:	7cfa      	ldrb	r2, [r7, #19]
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	75fb      	strb	r3, [r7, #23]
					break;
 80061d6:	e003      	b.n	80061e0 <vl53lmz_stop_ranging+0xdc>
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80061d8:	7cfb      	ldrb	r3, [r7, #19]
 80061da:	b25b      	sxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dad9      	bge.n	8006194 <vl53lmz_stop_ranging+0x90>
				}
			}
		}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f107 0213 	add.w	r2, r7, #19
 80061e6:	2106      	movs	r1, #6
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fddb 	bl	8004da4 <RdByte>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	da15      	bge.n	800622c <vl53lmz_stop_ranging+0x128>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f107 0213 	add.w	r2, r7, #19
 8006206:	2107      	movs	r1, #7
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fdcb 	bl	8004da4 <RdByte>
 800620e:	4603      	mov	r3, r0
 8006210:	461a      	mov	r2, r3
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	4313      	orrs	r3, r2
 8006216:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8006218:	7cfb      	ldrb	r3, [r7, #19]
 800621a:	2b84      	cmp	r3, #132	; 0x84
 800621c:	d006      	beq.n	800622c <vl53lmz_stop_ranging+0x128>
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	2b85      	cmp	r3, #133	; 0x85
 8006222:	d003      	beq.n	800622c <vl53lmz_stop_ranging+0x128>
		   status |= tmp;
 8006224:	7cfa      	ldrb	r2, [r7, #19]
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	4313      	orrs	r3, r2
 800622a:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fde9 	bl	8004e0c <WrByte>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	4313      	orrs	r3, r2
 8006242:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	2114      	movs	r1, #20
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fdde 	bl	8004e0c <WrByte>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	4313      	orrs	r3, r2
 8006258:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	2115      	movs	r1, #21
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fdd3 	bl	8004e0c <WrByte>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	4313      	orrs	r3, r2
 800626e:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2204      	movs	r2, #4
 8006274:	2109      	movs	r1, #9
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fdc8 	bl	8004e0c <WrByte>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	4313      	orrs	r3, r2
 8006284:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fdbc 	bl	8004e0c <WrByte>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	4313      	orrs	r3, r2
 800629c:	75fb      	strb	r3, [r7, #23]

	return status;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <vl53lmz_check_data_ready>:

uint8_t vl53lmz_check_data_ready(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
	*p_isReady = 0;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f203 5204 	addw	r2, r3, #1284	; 0x504
 80062c4:	2304      	movs	r3, #4
 80062c6:	2100      	movs	r1, #0
 80062c8:	f7fe fde8 	bl	8004e9c <RdMulti>
 80062cc:	4603      	mov	r3, r0
 80062ce:	461a      	mov	r2, r3
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	73fb      	strb	r3, [r7, #15]

	if ( status == VL53LMZ_STATUS_OK ){
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d136      	bne.n	800634a <vl53lmz_check_data_ready+0xa2>
		if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	791b      	ldrb	r3, [r3, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d020      	beq.n	800632c <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 80062f0:	2bff      	cmp	r3, #255	; 0xff
 80062f2:	d01b      	beq.n	800632c <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d116      	bne.n	800632c <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3506 	ldrb.w	r3, [r3, #1286]	; 0x506
 8006304:	f003 0305 	and.w	r3, r3, #5
 8006308:	2b05      	cmp	r3, #5
 800630a:	d10f      	bne.n	800632c <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <vl53lmz_check_data_ready+0x84>
				)
		{
			*p_isReady = (uint8_t)1;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
			 p_dev->streamcount = p_dev->temp_buffer[0];
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	711a      	strb	r2, [r3, #4]
 800632a:	e00e      	b.n	800634a <vl53lmz_check_data_ready+0xa2>
		}
		else
		{
			if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3507 	ldrb.w	r3, [r3, #1287]	; 0x507
 8006332:	b25b      	sxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	da05      	bge.n	8006344 <vl53lmz_check_data_ready+0x9c>
			{
				status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 2506 	ldrb.w	r2, [r3, #1286]	; 0x506
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	4313      	orrs	r3, r2
 8006342:	73fb      	strb	r3, [r7, #15]
			}

			*p_isReady = 0;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <vl53lmz_get_ranging_data>:

uint8_t vl53lmz_get_ranging_data(
		VL53LMZ_Configuration		*p_dev,
		VL53LMZ_ResultsData		*p_results)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8006362:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f203 5204 	addw	r2, r3, #1284	; 0x504
	status |= RdMulti(&(p_dev->platform), 0x0,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2100      	movs	r1, #0
 8006370:	f7fe fd94 	bl	8004e9c <RdMulti>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	7ffb      	ldrb	r3, [r7, #31]
 800637a:	4313      	orrs	r3, r2
 800637c:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	711a      	strb	r2, [r3, #4]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f203 5204 	addw	r2, r3, #1284	; 0x504
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	b29b      	uxth	r3, r3
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fe fdb4 	bl	8004f04 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800639c:	2310      	movs	r3, #16
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	e118      	b.n	80065d4 <vl53lmz_get_ranging_data+0x280>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	3304      	adds	r3, #4
 80063ae:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d915      	bls.n	80063ea <vl53lmz_get_ranging_data+0x96>
					&& (bh_ptr->type < (uint32_t)0xd))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b0c      	cmp	r3, #12
 80063ca:	d80e      	bhi.n	80063ea <vl53lmz_get_ranging_data+0x96>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e005      	b.n	80063f6 <vl53lmz_get_ranging_data+0xa2>
		}
		else
		{
			msize = bh_ptr->size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	885b      	ldrh	r3, [r3, #2]
 80063fa:	f24e 0284 	movw	r2, #57476	; 0xe084
 80063fe:	4293      	cmp	r3, r2
 8006400:	f000 80c2 	beq.w	8006588 <vl53lmz_get_ranging_data+0x234>
 8006404:	f24e 0284 	movw	r2, #57476	; 0xe084
 8006408:	4293      	cmp	r3, r2
 800640a:	f300 80db 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 800640e:	f24e 0244 	movw	r2, #57412	; 0xe044
 8006412:	4293      	cmp	r3, r2
 8006414:	f000 80a9 	beq.w	800656a <vl53lmz_get_ranging_data+0x216>
 8006418:	f24e 0244 	movw	r2, #57412	; 0xe044
 800641c:	4293      	cmp	r3, r2
 800641e:	f300 80d1 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 8006422:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8006426:	4293      	cmp	r3, r2
 8006428:	f000 8090 	beq.w	800654c <vl53lmz_get_ranging_data+0x1f8>
 800642c:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8006430:	4293      	cmp	r3, r2
 8006432:	f300 80c7 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 8006436:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 800643a:	4293      	cmp	r3, r2
 800643c:	d077      	beq.n	800652e <vl53lmz_get_ranging_data+0x1da>
 800643e:	f64d 62c4 	movw	r2, #57028	; 0xdec4
 8006442:	4293      	cmp	r3, r2
 8006444:	f300 80be 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 8006448:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 800644c:	4293      	cmp	r3, r2
 800644e:	d05f      	beq.n	8006510 <vl53lmz_get_ranging_data+0x1bc>
 8006450:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8006454:	4293      	cmp	r3, r2
 8006456:	f300 80b5 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 800645a:	f64d 3284 	movw	r2, #56196	; 0xdb84
 800645e:	4293      	cmp	r3, r2
 8006460:	d047      	beq.n	80064f2 <vl53lmz_get_ranging_data+0x19e>
 8006462:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8006466:	4293      	cmp	r3, r2
 8006468:	f300 80ac 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 800646c:	f64d 0258 	movw	r2, #55384	; 0xd858
 8006470:	4293      	cmp	r3, r2
 8006472:	f000 8098 	beq.w	80065a6 <vl53lmz_get_ranging_data+0x252>
 8006476:	f64d 0258 	movw	r2, #55384	; 0xd858
 800647a:	4293      	cmp	r3, r2
 800647c:	f300 80a2 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 8006480:	f245 52d0 	movw	r2, #21968	; 0x55d0
 8006484:	4293      	cmp	r3, r2
 8006486:	d025      	beq.n	80064d4 <vl53lmz_get_ranging_data+0x180>
 8006488:	f245 52d0 	movw	r2, #21968	; 0x55d0
 800648c:	4293      	cmp	r3, r2
 800648e:	f300 8099 	bgt.w	80065c4 <vl53lmz_get_ranging_data+0x270>
 8006492:	f245 42b4 	movw	r2, #21684	; 0x54b4
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <vl53lmz_get_ranging_data+0x150>
 800649a:	f245 42d0 	movw	r2, #21712	; 0x54d0
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00a      	beq.n	80064b8 <vl53lmz_get_ranging_data+0x164>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80064a2:	e08f      	b.n	80065c4 <vl53lmz_get_ranging_data+0x270>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	330c      	adds	r3, #12
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 80064b0:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	701a      	strb	r2, [r3, #0]
				break;
 80064b6:	e086      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->ambient_per_spad,
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	3304      	adds	r3, #4
 80064c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4413      	add	r3, r2
 80064c8:	3304      	adds	r3, #4
				(void)memcpy(p_results->ambient_per_spad,
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4619      	mov	r1, r3
 80064ce:	f002 fd4d 	bl	8008f6c <memcpy>
				break;
 80064d2:	e078      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_spads_enabled,
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	3304      	adds	r3, #4
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_spads_enabled,
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4619      	mov	r1, r3
 80064ec:	f002 fd3e 	bl	8008f6c <memcpy>
				break;
 80064f0:	e069      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_target_detected,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3304      	adds	r3, #4
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_target_detected,
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4619      	mov	r1, r3
 800650a:	f002 fd2f 	bl	8008f6c <memcpy>
				break;
 800650e:	e05a      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->signal_per_spad,
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	3304      	adds	r3, #4
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	3304      	adds	r3, #4
				(void)memcpy(p_results->signal_per_spad,
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4619      	mov	r1, r3
 8006528:	f002 fd20 	bl	8008f6c <memcpy>
				break;
 800652c:	e04b      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->range_sigma_mm,
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	3304      	adds	r3, #4
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	4413      	add	r3, r2
 8006540:	3304      	adds	r3, #4
				(void)memcpy(p_results->range_sigma_mm,
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4619      	mov	r1, r3
 8006546:	f002 fd11 	bl	8008f6c <memcpy>
				break;
 800654a:	e03c      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->distance_mm,
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	3304      	adds	r3, #4
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	3304      	adds	r3, #4
				(void)memcpy(p_results->distance_mm,
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4619      	mov	r1, r3
 8006564:	f002 fd02 	bl	8008f6c <memcpy>
				break;
 8006568:	e02d      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->reflectance,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	f203 4044 	addw	r0, r3, #1092	; 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	3304      	adds	r3, #4
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
				(void)memcpy(p_results->reflectance,
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4619      	mov	r1, r3
 8006582:	f002 fcf3 	bl	8008f6c <memcpy>
				break;
 8006586:	e01e      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->target_status,
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f203 4084 	addw	r0, r3, #1156	; 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	3304      	adds	r3, #4
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
				(void)memcpy(p_results->target_status,
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4619      	mov	r1, r3
 80065a0:	f002 fce4 	bl	8008f6c <memcpy>
				break;
 80065a4:	e00f      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(&p_results->motion_indicator,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f203 40c4 	addw	r0, r3, #1220	; 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3304      	adds	r3, #4
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	3304      	adds	r3, #4
				(void)memcpy(&p_results->motion_indicator,
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4619      	mov	r1, r3
 80065be:	f002 fcd5 	bl	8008f6c <memcpy>
				break;
 80065c2:	e000      	b.n	80065c6 <vl53lmz_get_ranging_data+0x272>
				break;
 80065c4:	bf00      	nop
		}
		i += msize;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	3304      	adds	r3, #4
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	429a      	cmp	r2, r3
 80065dc:	f4ff aee1 	bcc.w	80063a2 <vl53lmz_get_ranging_data+0x4e>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	827b      	strh	r3, [r7, #18]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 350d 	ldrb.w	r3, [r3, #1293]	; 0x50d
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	8a7b      	ldrh	r3, [r7, #18]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	827b      	strh	r3, [r7, #18]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)4]) << 8) & 0xFF00U;
 80065fe:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8006608:	b29b      	uxth	r3, r3
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	823b      	strh	r3, [r7, #16]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)3])) & 0xFFU;
 8006612:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800661c:	b29a      	uxth	r2, r3
 800661e:	8a3b      	ldrh	r3, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	823b      	strh	r3, [r7, #16]

	if(header_id != footer_id)
 8006624:	8a7a      	ldrh	r2, [r7, #18]
 8006626:	8a3b      	ldrh	r3, [r7, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	d003      	beq.n	8006634 <vl53lmz_get_ranging_data+0x2e0>
	{
		status |= VL53LMZ_STATUS_CORRUPTED_FRAME;
 800662c:	7ffb      	ldrb	r3, [r7, #31]
 800662e:	f043 0302 	orr.w	r3, r3, #2
 8006632:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <vl53lmz_get_resolution>:

uint8_t vl53lmz_get_resolution(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8006652:	2308      	movs	r3, #8
 8006654:	f245 4250 	movw	r2, #21584	; 0x5450
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f90b 	bl	8006874 <vl53lmz_dci_read_data>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	4313      	orrs	r3, r2
 8006666:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 2504 	ldrb.w	r2, [r3, #1284]	; 0x504
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8006674:	fb12 f303 	smulbb	r3, r2, r3
 8006678:	b2da      	uxtb	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	701a      	strb	r2, [r3, #0]

	return status;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <vl53lmz_set_resolution>:


uint8_t vl53lmz_set_resolution(
		VL53LMZ_Configuration		 *p_dev,
		uint8_t				resolution)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	2b10      	cmp	r3, #16
 800669c:	d002      	beq.n	80066a4 <vl53lmz_set_resolution+0x1c>
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d055      	beq.n	800674e <vl53lmz_set_resolution+0xc6>
 80066a2:	e0a9      	b.n	80067f8 <vl53lmz_set_resolution+0x170>
		case VL53LMZ_RESOLUTION_4X4:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80066aa:	2310      	movs	r3, #16
 80066ac:	f64a 5238 	movw	r2, #44344	; 0xad38
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8df 	bl	8006874 <vl53lmz_dci_read_data>
 80066b6:	4603      	mov	r3, r0
 80066b8:	461a      	mov	r2, r3
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	4313      	orrs	r3, r2
 80066be:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2240      	movs	r2, #64	; 0x40
 80066c4:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 64;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2240      	movs	r2, #64	; 0x40
 80066cc:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 4;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2204      	movs	r2, #4
 80066d4:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80066de:	2310      	movs	r3, #16
 80066e0:	f64a 5238 	movw	r2, #44344	; 0xad38
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f94f 	bl	8006988 <vl53lmz_dci_write_data>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80066fa:	2308      	movs	r3, #8
 80066fc:	f245 4250 	movw	r2, #21584	; 0x5450
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8b7 	bl	8006874 <vl53lmz_dci_read_data>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	4313      	orrs	r3, r2
 800670e:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 4;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2204      	movs	r2, #4
 800671c:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 8;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 8;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2208      	movs	r2, #8
 800672c:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8006736:	2308      	movs	r3, #8
 8006738:	f245 4250 	movw	r2, #21584	; 0x5450
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f923 	bl	8006988 <vl53lmz_dci_write_data>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	4313      	orrs	r3, r2
 800674a:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			break;
 800674c:	e057      	b.n	80067fe <vl53lmz_set_resolution+0x176>

		case VL53LMZ_RESOLUTION_8X8:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8006754:	2310      	movs	r3, #16
 8006756:	f64a 5238 	movw	r2, #44344	; 0xad38
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f88a 	bl	8006874 <vl53lmz_dci_read_data>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4313      	orrs	r3, r2
 8006768:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2210      	movs	r2, #16
 800676e:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x06] = 16;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2210      	movs	r2, #16
 8006776:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
			p_dev->temp_buffer[0x09] = 1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 250d 	strb.w	r2, [r3, #1293]	; 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8006788:	2310      	movs	r3, #16
 800678a:	f64a 5238 	movw	r2, #44344	; 0xad38
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f8fa 	bl	8006988 <vl53lmz_dci_write_data>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	4313      	orrs	r3, r2
 800679c:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 80067a4:	2308      	movs	r3, #8
 80067a6:	f245 4250 	movw	r2, #21584	; 0x5450
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f862 	bl	8006874 <vl53lmz_dci_read_data>
 80067b0:	4603      	mov	r3, r0
 80067b2:	461a      	mov	r2, r3
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2208      	movs	r2, #8
 80067be:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
			p_dev->temp_buffer[0x01] = 8;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2208      	movs	r2, #8
 80067c6:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
			p_dev->temp_buffer[0x04] = 4;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2204      	movs	r2, #4
 80067ce:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
			p_dev->temp_buffer[0x05] = 4;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2204      	movs	r2, #4
 80067d6:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f203 5104 	addw	r1, r3, #1284	; 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 80067e0:	2308      	movs	r3, #8
 80067e2:	f245 4250 	movw	r2, #21584	; 0x5450
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f8ce 	bl	8006988 <vl53lmz_dci_write_data>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);

			break;
 80067f6:	e002      	b.n	80067fe <vl53lmz_set_resolution+0x176>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 80067f8:	237f      	movs	r3, #127	; 0x7f
 80067fa:	73fb      	strb	r3, [r7, #15]
			break;
 80067fc:	bf00      	nop
		}

	status |= _vl53lmz_send_offset_data(p_dev, resolution);
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fe fc54 	bl	80050b0 <_vl53lmz_send_offset_data>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	4313      	orrs	r3, r2
 8006810:	73fb      	strb	r3, [r7, #15]
	status |= _vl53lmz_send_xtalk_data(p_dev, resolution);
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fe fe16 	bl	8005448 <_vl53lmz_send_xtalk_data>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	4313      	orrs	r3, r2
 8006824:	73fb      	strb	r3, [r7, #15]

	return status;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <vl53lmz_set_ranging_frequency_hz>:
}

uint8_t vl53lmz_set_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af04      	add	r7, sp, #16
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f203 5104 	addw	r1, r3, #1284	; 0x504
 8006846:	2301      	movs	r3, #1
 8006848:	9302      	str	r3, [sp, #8]
 800684a:	2301      	movs	r3, #1
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	1cfb      	adds	r3, r7, #3
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	2304      	movs	r3, #4
 8006854:	f245 4258 	movw	r2, #21592	; 0x5458
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f935 	bl	8006ac8 <vl53lmz_dci_replace_data>
 800685e:	4603      	mov	r3, r0
 8006860:	461a      	mov	r2, r3
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	4313      	orrs	r3, r2
 8006866:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <vl53lmz_dci_read_data>:
uint8_t vl53lmz_dci_read_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08c      	sub	sp, #48	; 0x30
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53LMZ_STATUS_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	330c      	adds	r3, #12
 800688c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <vl53lmz_dci_read_data+0x110>)
 8006890:	f107 0314 	add.w	r3, r7, #20
 8006894:	ca07      	ldmia	r2, {r0, r1, r2}
 8006896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d903      	bls.n	80068ac <vl53lmz_dci_read_data+0x38>
	{
		status |= VL53LMZ_STATUS_ERROR;
 80068a4:	23ff      	movs	r3, #255	; 0xff
 80068a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80068aa:	e065      	b.n	8006978 <vl53lmz_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	0a1b      	lsrs	r3, r3, #8
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80068ba:	887b      	ldrh	r3, [r7, #2]
 80068bc:	111b      	asrs	r3, r3, #4
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80068c2:	887b      	ldrh	r3, [r7, #2]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f107 0214 	add.w	r2, r7, #20
 80068d2:	230c      	movs	r3, #12
 80068d4:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 80068d8:	f7fe fac0 	bl	8004e5c <WrMulti>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53LMZ_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 80068ea:	2303      	movs	r3, #3
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	23ff      	movs	r3, #255	; 0xff
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80068f6:	2201      	movs	r2, #1
 80068f8:	2104      	movs	r1, #4
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7fe fb45 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006908:	4313      	orrs	r3, r2
 800690a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53LMZ_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800690e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f203 5204 	addw	r2, r3, #1284	; 0x504
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	f642 4104 	movw	r1, #11268	; 0x2c04
 800691c:	f7fe fabe 	bl	8004e9c <RdMulti>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006928:	4313      	orrs	r3, r2
 800692a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f203 5204 	addw	r2, r3, #1284	; 0x504
 8006934:	887b      	ldrh	r3, [r7, #2]
 8006936:	330c      	adds	r3, #12
 8006938:	b29b      	uxth	r3, r3
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7fe fae1 	bl	8004f04 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006942:	2300      	movs	r3, #0
 8006944:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006946:	e011      	b.n	800696c <vl53lmz_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8006948:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800694c:	1d1a      	adds	r2, r3, #4
 800694e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	440b      	add	r3, r1
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	440a      	add	r2, r1
 800695a:	f892 2504 	ldrb.w	r2, [r2, #1284]	; 0x504
 800695e:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006960:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006964:	b29b      	uxth	r3, r3
 8006966:	3301      	adds	r3, #1
 8006968:	b29b      	uxth	r3, r3
 800696a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800696c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006970:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006974:	429a      	cmp	r2, r3
 8006976:	dbe7      	blt.n	8006948 <vl53lmz_dci_read_data+0xd4>
		}
	}

	return status;
 8006978:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	0800b358 	.word	0x0800b358

08006988 <vl53lmz_dci_write_data>:
uint8_t vl53lmz_dci_write_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08c      	sub	sp, #48	; 0x30
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80069a0:	2300      	movs	r3, #0
 80069a2:	753b      	strb	r3, [r7, #20]
 80069a4:	2300      	movs	r3, #0
 80069a6:	757b      	strb	r3, [r7, #21]
 80069a8:	2300      	movs	r3, #0
 80069aa:	75bb      	strb	r3, [r7, #22]
 80069ac:	230f      	movs	r3, #15
 80069ae:	75fb      	strb	r3, [r7, #23]
 80069b0:	2305      	movs	r3, #5
 80069b2:	763b      	strb	r3, [r7, #24]
 80069b4:	2301      	movs	r3, #1
 80069b6:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80069b8:	887b      	ldrh	r3, [r7, #2]
 80069ba:	3308      	adds	r3, #8
 80069bc:	121b      	asrs	r3, r3, #8
 80069be:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80069c0:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80069c2:	887b      	ldrh	r3, [r7, #2]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	3308      	adds	r3, #8
 80069c8:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80069ca:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53LMZ_UI_CMD_END -
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 80069d2:	3334      	adds	r3, #52	; 0x34
 80069d4:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80069d6:	887b      	ldrh	r3, [r7, #2]
 80069d8:	f641 62bc 	movw	r2, #7868	; 0x1ebc
 80069dc:	4293      	cmp	r3, r2
 80069de:	d903      	bls.n	80069e8 <vl53lmz_dci_write_data+0x60>
		   > (uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53LMZ_STATUS_ERROR;
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069e6:	e069      	b.n	8006abc <vl53lmz_dci_write_data+0x134>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 80069f6:	887b      	ldrh	r3, [r7, #2]
 80069f8:	111b      	asrs	r3, r3, #4
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80069fe:	887b      	ldrh	r3, [r7, #2]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f7fe fa79 	bl	8004f04 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006a12:	887b      	ldrh	r3, [r7, #2]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a1a:	e012      	b.n	8006a42 <vl53lmz_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8006a1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	441a      	add	r2, r3
 8006a24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006a28:	3304      	adds	r3, #4
 8006a2a:	7811      	ldrb	r1, [r2, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	460a      	mov	r2, r1
 8006a32:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006a36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dae8      	bge.n	8006a1c <vl53lmz_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f203 5304 	addw	r3, r3, #1284	; 0x504
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8006a54:	887b      	ldrh	r3, [r7, #2]
 8006a56:	3304      	adds	r3, #4
 8006a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	461a      	mov	r2, r3
 8006a64:	f107 0314 	add.w	r3, r7, #20
 8006a68:	cb03      	ldmia	r3!, {r0, r1}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8006a6e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f203 5204 	addw	r2, r3, #1284	; 0x504
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8006a76:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8006a78:	330c      	adds	r3, #12
 8006a7a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8006a7c:	f7fe f9ee 	bl	8004e5c <WrMulti>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006a8e:	2303      	movs	r3, #3
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	23ff      	movs	r3, #255	; 0xff
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7fe fa73 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8006ab2:	887b      	ldrh	r3, [r7, #2]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	68b8      	ldr	r0, [r7, #8]
 8006ab8:	f7fe fa24 	bl	8004f04 <SwapBuffer>
	}

	return status;
 8006abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	; 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <vl53lmz_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_read_data(p_dev, data, index, data_size);
 8006ada:	887b      	ldrh	r3, [r7, #2]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fec7 	bl	8006874 <vl53lmz_dci_read_data>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8006af0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006af8:	6a39      	ldr	r1, [r7, #32]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 fa36 	bl	8008f6c <memcpy>
	status |= vl53lmz_dci_write_data(p_dev, data, index, data_size);
 8006b00:	887b      	ldrh	r3, [r7, #2]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff ff3e 	bl	8006988 <vl53lmz_dci_write_data>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	75fb      	strb	r3, [r7, #23]

	return status;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <vl53lmz_create_output_config>:
uint8_t vl53lmz_create_output_config(
		VL53LMZ_Configuration	  *p_dev ) {
 8006b20:	b5b0      	push	{r4, r5, r7, lr}
 8006b22:	b090      	sub	sp, #64	; 0x40
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]

	uint8_t status = VL53LMZ_STATUS_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Send addresses of possible output */
	uint32_t default_output_config[] ={
 8006b2e:	4b30      	ldr	r3, [pc, #192]	; (8006bf0 <vl53lmz_create_output_config+0xd0>)
 8006b30:	f107 040c 	add.w	r4, r7, #12
 8006b34:	461d      	mov	r5, r3
 8006b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53LMZ_DISTANCE_BH,
		VL53LMZ_REFLECTANCE_BH,
		VL53LMZ_TARGET_STATUS_BH,
		VL53LMZ_MOTION_DETECT_BH };

	memset(g_output_config, 0x00, sizeof(g_output_config));
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	2100      	movs	r1, #0
 8006b4a:	482a      	ldr	r0, [pc, #168]	; (8006bf4 <vl53lmz_create_output_config+0xd4>)
 8006b4c:	f002 f9dc 	bl	8008f08 <memset>
	memcpy(g_output_config, default_output_config, sizeof(default_output_config));
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <vl53lmz_create_output_config+0xd4>)
 8006b52:	461d      	mov	r5, r3
 8006b54:	f107 040c 	add.w	r4, r7, #12
 8006b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006b64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	/* Enable mandatory output (meta and common data) */
	g_output_bh_enable[0] = 0x00000007U;
 8006b68:	4b23      	ldr	r3, [pc, #140]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	601a      	str	r2, [r3, #0]
	g_output_bh_enable[1] = 0x00000000U;
 8006b6e:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	605a      	str	r2, [r3, #4]
	g_output_bh_enable[2] = 0x00000000U;
 8006b74:	4b20      	ldr	r3, [pc, #128]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	609a      	str	r2, [r3, #8]
	g_output_bh_enable[3] = 0x00000000U;
 8006b7a:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	60da      	str	r2, [r3, #12]

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53LMZ_DISABLE_AMBIENT_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)8;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b88:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_SPADS_ENABLED
	g_output_bh_enable[0] += (uint32_t)16;
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3310      	adds	r3, #16
 8006b90:	4a19      	ldr	r2, [pc, #100]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b92:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_TARGET_DETECTED
	g_output_bh_enable[0] += (uint32_t)32;
 8006b94:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3320      	adds	r3, #32
 8006b9a:	4a17      	ldr	r2, [pc, #92]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006b9c:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_SIGNAL_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)64;
 8006b9e:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3340      	adds	r3, #64	; 0x40
 8006ba4:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006ba6:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_RANGE_SIGMA_MM
	g_output_bh_enable[0] += (uint32_t)128;
 8006ba8:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3380      	adds	r3, #128	; 0x80
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bb0:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_DISTANCE_MM
	g_output_bh_enable[0] += (uint32_t)256;
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bba:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bbc:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_REFLECTANCE_PERCENT
	g_output_bh_enable[0] += (uint32_t)512;
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006bc6:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bc8:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_TARGET_STATUS
	g_output_bh_enable[0] += (uint32_t)1024;
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bd4:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_MOTION_INDICATOR
	g_output_bh_enable[0] += (uint32_t)2048;
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bde:	4a06      	ldr	r2, [pc, #24]	; (8006bf8 <vl53lmz_create_output_config+0xd8>)
 8006be0:	6013      	str	r3, [r2, #0]
#endif

	return status;
 8006be2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3740      	adds	r7, #64	; 0x40
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bdb0      	pop	{r4, r5, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	0800b364 	.word	0x0800b364
 8006bf4:	20005388 	.word	0x20005388
 8006bf8:	2000000c 	.word	0x2000000c

08006bfc <vl53lmz_send_output_config_and_start>:


uint8_t vl53lmz_send_output_config_and_start(
		VL53LMZ_Configuration	  *p_dev ) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08c      	sub	sp, #48	; 0x30
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	6078      	str	r0, [r7, #4]

	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8006c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c16:	60fb      	str	r3, [r7, #12]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8006c18:	f107 031b 	add.w	r3, r7, #27
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fd0d 	bl	800663e <vl53lmz_get_resolution>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	p_dev->data_read_size = 0;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	609a      	str	r2, [r3, #8]
	p_dev->streamcount = 255;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	22ff      	movs	r2, #255	; 0xff
 8006c3c:	711a      	strb	r2, [r3, #4]

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	e072      	b.n	8006d2a <vl53lmz_send_output_config_and_start+0x12e>
	{
		if ((g_output_config[i] == (uint8_t)0)
 8006c44:	4a93      	ldr	r2, [pc, #588]	; (8006e94 <vl53lmz_send_output_config_and_start+0x298>)
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d068      	beq.n	8006d22 <vl53lmz_send_output_config_and_start+0x126>
					|| ((g_output_bh_enable[i/(uint32_t)32]
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	4a90      	ldr	r2, [pc, #576]	; (8006e98 <vl53lmz_send_output_config_and_start+0x29c>)
 8006c56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						 &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	f003 0301 	and.w	r3, r3, #1
					|| ((g_output_bh_enable[i/(uint32_t)32]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d05a      	beq.n	8006d22 <vl53lmz_send_output_config_and_start+0x126>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(g_output_config[i]);
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4a88      	ldr	r2, [pc, #544]	; (8006e94 <vl53lmz_send_output_config_and_start+0x298>)
 8006c72:	4413      	add	r3, r2
 8006c74:	61fb      	str	r3, [r7, #28]
		if ( (bh_ptr->type >= 0x1) && (bh_ptr->type < 0x0d))
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d03e      	beq.n	8006d02 <vl53lmz_send_output_config_and_start+0x106>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	d837      	bhi.n	8006d02 <vl53lmz_send_output_config_and_start+0x106>
		{
			if ( bh_ptr->idx >= 0x54d0 ) {
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	885b      	ldrh	r3, [r3, #2]
 8006c96:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d91e      	bls.n	8006cdc <vl53lmz_send_output_config_and_start+0xe0>
				/* might be a zone or target data block */
				if ( bh_ptr->idx < (0x5890) )
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	f645 028f 	movw	r2, #22671	; 0x588f
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d809      	bhi.n	8006cbe <vl53lmz_send_output_config_and_start+0xc2>
				{
					/* it is zone data (does not depend on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution;
 8006caa:	7efb      	ldrb	r3, [r7, #27]
 8006cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb0:	b299      	uxth	r1, r3
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	8813      	ldrh	r3, [r2, #0]
 8006cb6:	f361 130f 	bfi	r3, r1, #4, #12
 8006cba:	8013      	strh	r3, [r2, #0]
 8006cbc:	e00e      	b.n	8006cdc <vl53lmz_send_output_config_and_start+0xe0>
				}
				else if (bh_ptr->idx < (uint16_t)(0x6C90))
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	f646 428f 	movw	r2, #27791	; 0x6c8f
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d808      	bhi.n	8006cdc <vl53lmz_send_output_config_and_start+0xe0>
				{
					/* it is a per-target data block (depends on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution * VL53LMZ_NB_TARGET_PER_ZONE;
 8006cca:	7efb      	ldrb	r3, [r7, #27]
 8006ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd0:	b299      	uxth	r1, r3
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	8813      	ldrh	r3, [r2, #0]
 8006cd6:	f361 130f 	bfi	r3, r1, #4, #12
 8006cda:	8013      	strh	r3, [r2, #0]
				}
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	4611      	mov	r1, r2
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	8812      	ldrh	r2, [r2, #0]
 8006cf0:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006cf4:	b292      	uxth	r2, r2
 8006cf6:	fb01 f202 	mul.w	r2, r1, r2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	e009      	b.n	8006d16 <vl53lmz_send_output_config_and_start+0x11a>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	8812      	ldrh	r2, [r2, #0]
 8006d0a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	441a      	add	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	609a      	str	r2, [r3, #8]
		}
		p_dev->data_read_size += (uint32_t)4;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	1d1a      	adds	r2, r3, #4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	e000      	b.n	8006d24 <vl53lmz_send_output_config_and_start+0x128>
			continue;
 8006d22:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	3301      	adds	r3, #1
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	2b1f      	cmp	r3, #31
 8006d2e:	d989      	bls.n	8006c44 <vl53lmz_send_output_config_and_start+0x48>
	}
	p_dev->data_read_size += (uint32_t)24;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f103 0218 	add.w	r2, r3, #24
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	609a      	str	r2, [r3, #8]


	if (p_dev->data_read_size > VL53LMZ_MAX_RESULTS_SIZE) {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f641 62c8 	movw	r2, #7880	; 0x1ec8
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d905      	bls.n	8006d54 <vl53lmz_send_output_config_and_start+0x158>
		status |= VL53LMZ_STATUS_ERROR;
 8006d48:	23ff      	movs	r3, #255	; 0xff
 8006d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return status;
 8006d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d52:	e09b      	b.n	8006e8c <vl53lmz_send_output_config_and_start+0x290>
	}

	status |= vl53lmz_dci_write_data(p_dev,
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	f64d 1280 	movw	r2, #55680	; 0xd980
 8006d5a:	494e      	ldr	r1, [pc, #312]	; (8006e94 <vl53lmz_send_output_config_and_start+0x298>)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe13 	bl	8006988 <vl53lmz_dci_write_data>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_config), VL53LMZ_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(g_output_config));

	header_config[0] = p_dev->data_read_size;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	613b      	str	r3, [r7, #16]
	header_config[1] = i + (uint32_t)1;
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]

	status |= vl53lmz_dci_write_data(p_dev,
 8006d7c:	f107 0110 	add.w	r1, r7, #16
 8006d80:	2308      	movs	r3, #8
 8006d82:	f64d 1268 	movw	r2, #55656	; 0xd968
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fdfe 	bl	8006988 <vl53lmz_dci_write_data>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(header_config), VL53LMZ_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53lmz_dci_write_data(p_dev,
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	f64d 1270 	movw	r2, #55664	; 0xd970
 8006da0:	493d      	ldr	r1, [pc, #244]	; (8006e98 <vl53lmz_send_output_config_and_start+0x29c>)
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff fdf0 	bl	8006988 <vl53lmz_dci_write_data>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint8_t*)&(g_output_bh_enable), VL53LMZ_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(g_output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe f824 	bl	8004e0c <WrByte>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	2109      	movs	r1, #9
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe f817 	bl	8004e0c <WrByte>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe f809 	bl	8004e0c <WrByte>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53LMZ_UI_CMD_END -
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f107 020c 	add.w	r2, r7, #12
 8006e0e:	2304      	movs	r3, #4
 8006e10:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8006e14:	f7fe f822 	bl	8004e5c <WrMulti>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8006e26:	2303      	movs	r3, #3
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	23ff      	movs	r3, #255	; 0xff
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006e32:	2201      	movs	r2, #1
 8006e34:	2104      	movs	r1, #4
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fe f8a7 	bl	8004f8a <_vl53lmz_poll_for_answer>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53lmz_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f203 5104 	addw	r1, r3, #1284	; 0x504
	status |= vl53lmz_dci_read_data(p_dev,
 8006e50:	230c      	movs	r3, #12
 8006e52:	f245 4240 	movw	r2, #21568	; 0x5440
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fd0c 	bl	8006874 <vl53lmz_dci_read_data>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	833b      	strh	r3, [r7, #24]
	if(tmp != p_dev->data_read_size) {
 8006e76:	8b3b      	ldrh	r3, [r7, #24]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d002      	beq.n	8006e88 <vl53lmz_send_output_config_and_start+0x28c>
		status |= VL53LMZ_STATUS_ERROR;
 8006e82:	23ff      	movs	r3, #255	; 0xff
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8006e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3728      	adds	r7, #40	; 0x28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20005388 	.word	0x20005388
 8006e98:	2000000c 	.word	0x2000000c

08006e9c <GW_set_params>:
 8006e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8006ea4:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
 8006ea8:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
 8006eac:	e9dd c615 	ldrd	ip, r6, [sp, #84]	; 0x54
 8006eb0:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f000 80d4 	beq.w	8007064 <GW_set_params+0x1c8>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	bfb8      	it	lt
 8006ec0:	215f      	movlt	r1, #95	; 0x5f
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	bfb8      	it	lt
 8006ec6:	22c8      	movlt	r2, #200	; 0xc8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfb8      	it	lt
 8006ecc:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 8006ed0:	f1bb 0f00 	cmp.w	fp, #0
 8006ed4:	bfb8      	it	lt
 8006ed6:	f44f 7b16 	movlt.w	fp, #600	; 0x258
 8006eda:	f1ba 0f00 	cmp.w	sl, #0
 8006ede:	bfb8      	it	lt
 8006ee0:	f04f 0a14 	movlt.w	sl, #20
 8006ee4:	f1b9 0f00 	cmp.w	r9, #0
 8006ee8:	6103      	str	r3, [r0, #16]
 8006eea:	bfb8      	it	lt
 8006eec:	f44f 79fa 	movlt.w	r9, #500	; 0x1f4
 8006ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef2:	6082      	str	r2, [r0, #8]
 8006ef4:	f1b8 0f00 	cmp.w	r8, #0
 8006ef8:	bfb8      	it	lt
 8006efa:	f44f 7816 	movlt.w	r8, #600	; 0x258
 8006efe:	f1be 0f00 	cmp.w	lr, #0
 8006f02:	bfb8      	it	lt
 8006f04:	f44f 7e16 	movlt.w	lr, #600	; 0x258
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bfb8      	it	lt
 8006f0c:	f44f 63fa 	movlt.w	r3, #2000	; 0x7d0
 8006f10:	6283      	str	r3, [r0, #40]	; 0x28
 8006f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f16:	6001      	str	r1, [r0, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bfb8      	it	lt
 8006f1c:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 8006f20:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006f22:	9312      	str	r3, [sp, #72]	; 0x48
 8006f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f26:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfb8      	it	lt
 8006f2e:	f44f 6396 	movlt.w	r3, #1200	; 0x4b0
 8006f32:	6503      	str	r3, [r0, #80]	; 0x50
 8006f34:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f38:	f8c0 8020 	str.w	r8, [r0, #32]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f42:	bfb8      	it	lt
 8006f44:	2396      	movlt	r3, #150	; 0x96
 8006f46:	60c2      	str	r2, [r0, #12]
 8006f48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f4a:	6543      	str	r3, [r0, #84]	; 0x54
 8006f4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f50:	9314      	str	r3, [sp, #80]	; 0x50
 8006f52:	f240 3352 	movw	r3, #850	; 0x352
 8006f56:	ea32 0222 	bics.w	r2, r2, r2, asr #32
 8006f5a:	bf28      	it	cs
 8006f5c:	461a      	movcs	r2, r3
 8006f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f62:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8006f66:	bfb8      	it	lt
 8006f68:	ed9f 0a40 	vldrlt	s0, [pc, #256]	; 800706c <GW_set_params+0x1d0>
 8006f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f6e:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
 8006f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f76:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8006f7a:	bfb8      	it	lt
 8006f7c:	eef7 0a00 	vmovlt.f32	s1, #112	; 0x3f800000  1.0
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 8006f88:	bfb8      	it	lt
 8006f8a:	ed9f 1a39 	vldrlt	s2, [pc, #228]	; 8007070 <GW_set_params+0x1d4>
 8006f8e:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8006f9a:	bfb8      	it	lt
 8006f9c:	eddf 1a35 	vldrlt	s3, [pc, #212]	; 8007074 <GW_set_params+0x1d8>
 8006fa0:	ed80 1a0e 	vstr	s2, [r0, #56]	; 0x38
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8006fac:	bfb8      	it	lt
 8006fae:	eeb0 2a00 	vmovlt.f32	s4, #0	; 0x40000000  2.0
 8006fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb6:	bfb8      	it	lt
 8006fb8:	eddf 2a2f 	vldrlt	s5, [pc, #188]	; 8007078 <GW_set_params+0x1dc>
 8006fbc:	edc0 1a0f 	vstr	s3, [r0, #60]	; 0x3c
 8006fc0:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfd4      	ite	le
 8006fc8:	2300      	movle	r3, #0
 8006fca:	2301      	movgt	r3, #1
 8006fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd0:	bfd8      	it	le
 8006fd2:	ed9f 3a2a 	vldrle	s6, [pc, #168]	; 800707c <GW_set_params+0x1e0>
 8006fd6:	ed80 2a10 	vstr	s4, [r0, #64]	; 0x40
 8006fda:	f1bc 0f00 	cmp.w	ip, #0
 8006fde:	bfd8      	it	le
 8006fe0:	f44f 7c7a 	movle.w	ip, #1000	; 0x3e8
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	bfd8      	it	le
 8006fe8:	f44f 76c8 	movle.w	r6, #400	; 0x190
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	bfd8      	it	le
 8006ff0:	2564      	movle	r5, #100	; 0x64
 8006ff2:	43c9      	mvns	r1, r1
 8006ff4:	edc0 2a11 	vstr	s5, [r0, #68]	; 0x44
 8006ff8:	62c2      	str	r2, [r0, #44]	; 0x2c
 8006ffa:	6041      	str	r1, [r0, #4]
 8006ffc:	9210      	str	r2, [sp, #64]	; 0x40
 8006ffe:	f8c0 b014 	str.w	fp, [r0, #20]
 8007002:	f8c0 a018 	str.w	sl, [r0, #24]
 8007006:	f8c0 901c 	str.w	r9, [r0, #28]
 800700a:	f500 682f 	add.w	r8, r0, #2800	; 0xaf0
 800700e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 8007012:	ed80 3a16 	vstr	s6, [r0, #88]	; 0x58
 8007016:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
 800701a:	6606      	str	r6, [r0, #96]	; 0x60
 800701c:	6645      	str	r5, [r0, #100]	; 0x64
 800701e:	1b70      	subs	r0, r6, r5
 8007020:	f7f9 fa2c 	bl	800047c <__aeabi_i2d>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	2000      	movs	r0, #0
 800702a:	4915      	ldr	r1, [pc, #84]	; (8007080 <GW_set_params+0x1e4>)
 800702c:	f7f9 fbba 	bl	80007a4 <__aeabi_ddiv>
 8007030:	f7f9 fd86 	bl	8000b40 <__aeabi_d2f>
 8007034:	2105      	movs	r1, #5
 8007036:	f8c8 0000 	str.w	r0, [r8]
 800703a:	f604 00dc 	addw	r0, r4, #2268	; 0x8dc
 800703e:	f001 fc70 	bl	8008922 <RFBVM_init>
 8007042:	2105      	movs	r1, #5
 8007044:	f604 20f4 	addw	r0, r4, #2804	; 0xaf4
 8007048:	f001 fc6b 	bl	8008922 <RFBVM_init>
 800704c:	2105      	movs	r1, #5
 800704e:	f604 5008 	addw	r0, r4, #3336	; 0xd08
 8007052:	f001 fc66 	bl	8008922 <RFBVM_init>
 8007056:	2f00      	cmp	r7, #0
 8007058:	bfd8      	it	le
 800705a:	27fa      	movle	r7, #250	; 0xfa
 800705c:	66a7      	str	r7, [r4, #104]	; 0x68
 800705e:	2000      	movs	r0, #0
 8007060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	f06f 0001 	mvn.w	r0, #1
 8007068:	e7fa      	b.n	8007060 <GW_set_params+0x1c4>
 800706a:	bf00      	nop
 800706c:	3ed58106 	.word	0x3ed58106
 8007070:	3fcf7cee 	.word	0x3fcf7cee
 8007074:	3f99999a 	.word	0x3f99999a
 8007078:	3f8f1aa0 	.word	0x3f8f1aa0
 800707c:	451c4000 	.word	0x451c4000
 8007080:	40590000 	.word	0x40590000

08007084 <GW_init>:
 8007084:	b530      	push	{r4, r5, lr}
 8007086:	460d      	mov	r5, r1
 8007088:	b091      	sub	sp, #68	; 0x44
 800708a:	4611      	mov	r1, r2
 800708c:	4604      	mov	r4, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d04c      	beq.n	800712c <GW_init+0xa8>
 8007092:	2d00      	cmp	r5, #0
 8007094:	d04a      	beq.n	800712c <GW_init+0xa8>
 8007096:	2a00      	cmp	r2, #0
 8007098:	d048      	beq.n	800712c <GW_init+0xa8>
 800709a:	4628      	mov	r0, r5
 800709c:	f000 fe99 	bl	8007dd2 <HT_init>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d141      	bne.n	8007128 <GW_init+0xa4>
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a8:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 80070ac:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80070b0:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80070b4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80070b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80070bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80070c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80070c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	eef0 2a43 	vmov.f32	s5, s6
 80070ce:	eeb0 2a43 	vmov.f32	s4, s6
 80070d2:	eef0 1a43 	vmov.f32	s3, s6
 80070d6:	eeb0 1a43 	vmov.f32	s2, s6
 80070da:	eef0 0a43 	vmov.f32	s1, s6
 80070de:	eeb0 0a43 	vmov.f32	s0, s6
 80070e2:	461a      	mov	r2, r3
 80070e4:	4619      	mov	r1, r3
 80070e6:	4620      	mov	r0, r4
 80070e8:	f7ff fed8 	bl	8006e9c <GW_set_params>
 80070ec:	b9e0      	cbnz	r0, 8007128 <GW_init+0xa4>
 80070ee:	f884 0f1c 	strb.w	r0, [r4, #3868]	; 0xf1c
 80070f2:	edd5 7a02 	vldr	s15, [r5, #8]
 80070f6:	f8c4 0f20 	str.w	r0, [r4, #3872]	; 0xf20
 80070fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070fe:	f604 732c 	addw	r3, r4, #3884	; 0xf2c
 8007102:	f8c4 0f24 	str.w	r0, [r4, #3876]	; 0xf24
 8007106:	f8a4 0f28 	strh.w	r0, [r4, #3880]	; 0xf28
 800710a:	edc3 7a00 	vstr	s15, [r3]
 800710e:	2300      	movs	r3, #0
 8007110:	6723      	str	r3, [r4, #112]	; 0x70
 8007112:	6763      	str	r3, [r4, #116]	; 0x74
 8007114:	67a3      	str	r3, [r4, #120]	; 0x78
 8007116:	2364      	movs	r3, #100	; 0x64
 8007118:	f8c4 0f30 	str.w	r0, [r4, #3888]	; 0xf30
 800711c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8007120:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8007124:	f8c4 0f40 	str.w	r0, [r4, #3904]	; 0xf40
 8007128:	b011      	add	sp, #68	; 0x44
 800712a:	bd30      	pop	{r4, r5, pc}
 800712c:	f06f 0001 	mvn.w	r0, #1
 8007130:	e7fa      	b.n	8007128 <GW_init+0xa4>
	...

08007134 <GW_set_buffer_length>:
 8007134:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
 8007138:	ed2d 8b02 	vpush	{d8}
 800713c:	4683      	mov	fp, r0
 800713e:	b083      	sub	sp, #12
 8007140:	2800      	cmp	r0, #0
 8007142:	d071      	beq.n	8007228 <GW_set_buffer_length+0xf4>
 8007144:	2900      	cmp	r1, #0
 8007146:	d06f      	beq.n	8007228 <GW_set_buffer_length+0xf4>
 8007148:	edd0 7a02 	vldr	s15, [r0, #8]
 800714c:	ed91 7a03 	vldr	s14, [r1, #12]
 8007150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007154:	f10b 077c 	add.w	r7, fp, #124	; 0x7c
 8007158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800715c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007230 <GW_set_buffer_length+0xfc>
 8007160:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8007164:	ee17 0a90 	vmov	r0, s15
 8007168:	f7f9 f99a 	bl	80004a0 <__aeabi_f2d>
 800716c:	ec41 0b10 	vmov	d0, r0, r1
 8007170:	f002 f90a 	bl	8009388 <ceil>
 8007174:	ec51 0b10 	vmov	r0, r1, d0
 8007178:	f7f9 fc9a 	bl	8000ab0 <__aeabi_d2iz>
 800717c:	2801      	cmp	r0, #1
 800717e:	bfd6      	itet	le
 8007180:	2302      	movle	r3, #2
 8007182:	f8cb 000c 	strgt.w	r0, [fp, #12]
 8007186:	f8cb 300c 	strle.w	r3, [fp, #12]
 800718a:	f8db 100c 	ldr.w	r1, [fp, #12]
 800718e:	4638      	mov	r0, r7
 8007190:	f001 fbc7 	bl	8008922 <RFBVM_init>
 8007194:	4604      	mov	r4, r0
 8007196:	bb28      	cbnz	r0, 80071e4 <GW_set_buffer_length+0xb0>
 8007198:	f50b 7824 	add.w	r8, fp, #656	; 0x290
 800719c:	f8db 100c 	ldr.w	r1, [fp, #12]
 80071a0:	4640      	mov	r0, r8
 80071a2:	f001 fbbe 	bl	8008922 <RFBVM_init>
 80071a6:	4604      	mov	r4, r0
 80071a8:	b9e0      	cbnz	r0, 80071e4 <GW_set_buffer_length+0xb0>
 80071aa:	f20b 49a4 	addw	r9, fp, #1188	; 0x4a4
 80071ae:	f8db 100c 	ldr.w	r1, [fp, #12]
 80071b2:	4648      	mov	r0, r9
 80071b4:	f001 fbb5 	bl	8008922 <RFBVM_init>
 80071b8:	4604      	mov	r4, r0
 80071ba:	b998      	cbnz	r0, 80071e4 <GW_set_buffer_length+0xb0>
 80071bc:	f50b 6ad7 	add.w	sl, fp, #1720	; 0x6b8
 80071c0:	f8db 100c 	ldr.w	r1, [fp, #12]
 80071c4:	4650      	mov	r0, sl
 80071c6:	f001 fbac 	bl	8008922 <RFBVM_init>
 80071ca:	4604      	mov	r4, r0
 80071cc:	b950      	cbnz	r0, 80071e4 <GW_set_buffer_length+0xb0>
 80071ce:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007234 <GW_set_buffer_length+0x100>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80071d8:	429a      	cmp	r2, r3
 80071da:	dc09      	bgt.n	80071f0 <GW_set_buffer_length+0xbc>
 80071dc:	2c00      	cmp	r4, #0
 80071de:	bf18      	it	ne
 80071e0:	f06f 0407 	mvnne.w	r4, #7
 80071e4:	4620      	mov	r0, r4
 80071e6:	b003      	add	sp, #12
 80071e8:	ecbd 8b02 	vpop	{d8}
 80071ec:	e8bd 8f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, pc}
 80071f0:	eeb0 0a48 	vmov.f32	s0, s16
 80071f4:	4638      	mov	r0, r7
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	f001 fbaa 	bl	8008950 <RFBVM_push>
 80071fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007200:	4404      	add	r4, r0
 8007202:	4640      	mov	r0, r8
 8007204:	f001 fba4 	bl	8008950 <RFBVM_push>
 8007208:	eeb0 0a48 	vmov.f32	s0, s16
 800720c:	4404      	add	r4, r0
 800720e:	4648      	mov	r0, r9
 8007210:	f001 fb9e 	bl	8008950 <RFBVM_push>
 8007214:	eeb0 0a48 	vmov.f32	s0, s16
 8007218:	4404      	add	r4, r0
 800721a:	4650      	mov	r0, sl
 800721c:	f001 fb98 	bl	8008950 <RFBVM_push>
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	4404      	add	r4, r0
 8007224:	3301      	adds	r3, #1
 8007226:	e7d5      	b.n	80071d4 <GW_set_buffer_length+0xa0>
 8007228:	f06f 0401 	mvn.w	r4, #1
 800722c:	e7da      	b.n	80071e4 <GW_set_buffer_length+0xb0>
 800722e:	bf00      	nop
 8007230:	447a0000 	.word	0x447a0000
 8007234:	00000000 	.word	0x00000000

08007238 <GW_set_frequency>:
 8007238:	b513      	push	{r0, r1, r4, lr}
 800723a:	460b      	mov	r3, r1
 800723c:	4604      	mov	r4, r0
 800723e:	4611      	mov	r1, r2
 8007240:	b190      	cbz	r0, 8007268 <GW_set_frequency+0x30>
 8007242:	b18b      	cbz	r3, 8007268 <GW_set_frequency+0x30>
 8007244:	b182      	cbz	r2, 8007268 <GW_set_frequency+0x30>
 8007246:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800724a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724e:	d90f      	bls.n	8007270 <GW_set_frequency+0x38>
 8007250:	4618      	mov	r0, r3
 8007252:	9201      	str	r2, [sp, #4]
 8007254:	f000 fe02 	bl	8007e5c <HT_set_frequency>
 8007258:	b940      	cbnz	r0, 800726c <GW_set_frequency+0x34>
 800725a:	9901      	ldr	r1, [sp, #4]
 800725c:	4620      	mov	r0, r4
 800725e:	b002      	add	sp, #8
 8007260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007264:	f7ff bf66 	b.w	8007134 <GW_set_buffer_length>
 8007268:	f06f 0001 	mvn.w	r0, #1
 800726c:	b002      	add	sp, #8
 800726e:	bd10      	pop	{r4, pc}
 8007270:	f06f 0005 	mvn.w	r0, #5
 8007274:	e7fa      	b.n	800726c <GW_set_frequency+0x34>

08007276 <GW_update_hand_buffers>:
 8007276:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800727a:	460d      	mov	r5, r1
 800727c:	ed2d 8b04 	vpush	{d8-d9}
 8007280:	4616      	mov	r6, r2
 8007282:	4607      	mov	r7, r0
 8007284:	2800      	cmp	r0, #0
 8007286:	f000 8082 	beq.w	800738e <GW_update_hand_buffers+0x118>
 800728a:	2900      	cmp	r1, #0
 800728c:	d07f      	beq.n	800738e <GW_update_hand_buffers+0x118>
 800728e:	f8d1 4178 	ldr.w	r4, [r1, #376]	; 0x178
 8007292:	2c00      	cmp	r4, #0
 8007294:	d04b      	beq.n	800732e <GW_update_hand_buffers+0xb8>
 8007296:	68c3      	ldr	r3, [r0, #12]
 8007298:	429c      	cmp	r4, r3
 800729a:	dc7b      	bgt.n	8007394 <GW_update_hand_buffers+0x11e>
 800729c:	f8d1 1388 	ldr.w	r1, [r1, #904]	; 0x388
 80072a0:	f505 70be 	add.w	r0, r5, #380	; 0x17c
 80072a4:	1b09      	subs	r1, r1, r4
 80072a6:	f001 fbbb 	bl	8008a20 <RFBVM_get_element_value>
 80072aa:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 80072ae:	f8d5 159c 	ldr.w	r1, [r5, #1436]	; 0x59c
 80072b2:	f505 7064 	add.w	r0, r5, #912	; 0x390
 80072b6:	1ac9      	subs	r1, r1, r3
 80072b8:	eef0 9a40 	vmov.f32	s19, s0
 80072bc:	f001 fbb0 	bl	8008a20 <RFBVM_get_element_value>
 80072c0:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 80072c4:	f8d5 17b0 	ldr.w	r1, [r5, #1968]	; 0x7b0
 80072c8:	f205 50a4 	addw	r0, r5, #1444	; 0x5a4
 80072cc:	1ac9      	subs	r1, r1, r3
 80072ce:	eeb0 9a40 	vmov.f32	s18, s0
 80072d2:	f001 fba5 	bl	8008a20 <RFBVM_get_element_value>
 80072d6:	edd5 7a5b 	vldr	s15, [r5, #364]	; 0x16c
 80072da:	f895 3168 	ldrb.w	r3, [r5, #360]	; 0x168
 80072de:	eef0 8a40 	vmov.f32	s17, s0
 80072e2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80072e6:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80072ea:	f507 7924 	add.w	r9, r7, #656	; 0x290
 80072ee:	f207 48a4 	addw	r8, r7, #1188	; 0x4a4
 80072f2:	eeb0 0a69 	vmov.f32	s0, s19
 80072f6:	b39b      	cbz	r3, 8007360 <GW_update_hand_buffers+0xea>
 80072f8:	f895 3169 	ldrb.w	r3, [r5, #361]	; 0x169
 80072fc:	b383      	cbz	r3, 8007360 <GW_update_hand_buffers+0xea>
 80072fe:	f001 fba6 	bl	8008a4e <RFBVM_fill>
 8007302:	eeb0 0a49 	vmov.f32	s0, s18
 8007306:	4604      	mov	r4, r0
 8007308:	4648      	mov	r0, r9
 800730a:	f001 fba0 	bl	8008a4e <RFBVM_fill>
 800730e:	eeb0 0a68 	vmov.f32	s0, s17
 8007312:	4404      	add	r4, r0
 8007314:	4640      	mov	r0, r8
 8007316:	f001 fb9a 	bl	8008a4e <RFBVM_fill>
 800731a:	2500      	movs	r5, #0
 800731c:	4404      	add	r4, r0
 800731e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8007322:	f507 69d7 	add.w	r9, r7, #1720	; 0x6b8
 8007326:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800732a:	42a9      	cmp	r1, r5
 800732c:	dc04      	bgt.n	8007338 <GW_update_hand_buffers+0xc2>
 800732e:	ecbd 8b04 	vpop	{d8-d9}
 8007332:	4620      	mov	r0, r4
 8007334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007338:	fb08 f305 	mul.w	r3, r8, r5
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	ed96 7a03 	vldr	s14, [r6, #12]
 8007344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007348:	3901      	subs	r1, #1
 800734a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800734e:	1b49      	subs	r1, r1, r5
 8007350:	4648      	mov	r0, r9
 8007352:	3501      	adds	r5, #1
 8007354:	ee38 0a40 	vsub.f32	s0, s16, s0
 8007358:	f001 fb6e 	bl	8008a38 <RFBVM_set_element_value>
 800735c:	4404      	add	r4, r0
 800735e:	e7e2      	b.n	8007326 <GW_update_hand_buffers+0xb0>
 8007360:	f001 faf6 	bl	8008950 <RFBVM_push>
 8007364:	eeb0 0a49 	vmov.f32	s0, s18
 8007368:	4604      	mov	r4, r0
 800736a:	4648      	mov	r0, r9
 800736c:	f001 faf0 	bl	8008950 <RFBVM_push>
 8007370:	eeb0 0a68 	vmov.f32	s0, s17
 8007374:	4404      	add	r4, r0
 8007376:	4640      	mov	r0, r8
 8007378:	f001 faea 	bl	8008950 <RFBVM_push>
 800737c:	eeb0 0a48 	vmov.f32	s0, s16
 8007380:	4404      	add	r4, r0
 8007382:	f507 60d7 	add.w	r0, r7, #1720	; 0x6b8
 8007386:	f001 fae3 	bl	8008950 <RFBVM_push>
 800738a:	4404      	add	r4, r0
 800738c:	e7cf      	b.n	800732e <GW_update_hand_buffers+0xb8>
 800738e:	f06f 0401 	mvn.w	r4, #1
 8007392:	e7cc      	b.n	800732e <GW_update_hand_buffers+0xb8>
 8007394:	2400      	movs	r4, #0
 8007396:	e7ca      	b.n	800732e <GW_update_hand_buffers+0xb8>

08007398 <GW_compute_speeds>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4604      	mov	r4, r0
 800739e:	ed2d 8b0c 	vpush	{d8-d13}
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f000 80cb 	beq.w	800753e <GW_compute_speeds+0x1a6>
 80073a8:	2900      	cmp	r1, #0
 80073aa:	f000 80c8 	beq.w	800753e <GW_compute_speeds+0x1a6>
 80073ae:	f890 6048 	ldrb.w	r6, [r0, #72]	; 0x48
 80073b2:	68c5      	ldr	r5, [r0, #12]
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	f040 80a3 	bne.w	8007500 <GW_compute_speeds+0x168>
 80073ba:	edd1 6a03 	vldr	s13, [r1, #12]
 80073be:	eddf 8a61 	vldr	s17, [pc, #388]	; 8007544 <GW_compute_speeds+0x1ac>
 80073c2:	ee07 5a10 	vmov	s14, r5
 80073c6:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80073ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073d2:	fb05 f305 	mul.w	r3, r5, r5
 80073d6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80073da:	3b01      	subs	r3, #1
 80073dc:	f100 077c 	add.w	r7, r0, #124	; 0x7c
 80073e0:	f500 7824 	add.w	r8, r0, #656	; 0x290
 80073e4:	f200 49a4 	addw	r9, r0, #1188	; 0x4a4
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073f0:	1c6b      	adds	r3, r5, #1
 80073f2:	ee86 9a27 	vdiv.f32	s18, s12, s15
 80073f6:	eef9 7a08 	vmov.f32	s15, #152	; 0xc0c00000 -6.0
 80073fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8007406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800740a:	eef0 9a68 	vmov.f32	s19, s17
 800740e:	eec6 aa27 	vdiv.f32	s21, s12, s15
 8007412:	eeb0 aa68 	vmov.f32	s20, s17
 8007416:	42ae      	cmp	r6, r5
 8007418:	da67      	bge.n	80074ea <GW_compute_speeds+0x152>
 800741a:	ee07 6a90 	vmov	s15, r6
 800741e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007422:	eeb0 8a6a 	vmov.f32	s16, s21
 8007426:	eea7 8a89 	vfma.f32	s16, s15, s18
 800742a:	4631      	mov	r1, r6
 800742c:	4638      	mov	r0, r7
 800742e:	f001 faf7 	bl	8008a20 <RFBVM_get_element_value>
 8007432:	4631      	mov	r1, r6
 8007434:	4640      	mov	r0, r8
 8007436:	eea8 aa00 	vfma.f32	s20, s16, s0
 800743a:	f001 faf1 	bl	8008a20 <RFBVM_get_element_value>
 800743e:	4631      	mov	r1, r6
 8007440:	4648      	mov	r0, r9
 8007442:	eee8 9a00 	vfma.f32	s19, s16, s0
 8007446:	f001 faeb 	bl	8008a20 <RFBVM_get_element_value>
 800744a:	3601      	adds	r6, #1
 800744c:	eee8 8a00 	vfma.f32	s17, s16, s0
 8007450:	e7e1      	b.n	8007416 <GW_compute_speeds+0x7e>
 8007452:	4631      	mov	r1, r6
 8007454:	4638      	mov	r0, r7
 8007456:	f001 fae3 	bl	8008a20 <RFBVM_get_element_value>
 800745a:	4631      	mov	r1, r6
 800745c:	4640      	mov	r0, r8
 800745e:	eeb0 ba40 	vmov.f32	s22, s0
 8007462:	f001 fadd 	bl	8008a20 <RFBVM_get_element_value>
 8007466:	4631      	mov	r1, r6
 8007468:	f204 40a4 	addw	r0, r4, #1188	; 0x4a4
 800746c:	eef0 aa40 	vmov.f32	s21, s0
 8007470:	f001 fad6 	bl	8008a20 <RFBVM_get_element_value>
 8007474:	4631      	mov	r1, r6
 8007476:	f504 60d7 	add.w	r0, r4, #1720	; 0x6b8
 800747a:	eeb0 aa40 	vmov.f32	s20, s0
 800747e:	f001 facf 	bl	8008a20 <RFBVM_get_element_value>
 8007482:	eec0 7a2d 	vdiv.f32	s15, s0, s27
 8007486:	3601      	adds	r6, #1
 8007488:	ee79 9a8b 	vadd.f32	s19, s19, s22
 800748c:	eea7 daa7 	vfma.f32	s26, s15, s15
 8007490:	eeeb ca27 	vfma.f32	s25, s22, s15
 8007494:	eeaa caa7 	vfma.f32	s24, s21, s15
 8007498:	eeea ba27 	vfma.f32	s23, s20, s15
 800749c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80074a0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80074a4:	ee38 8a0a 	vadd.f32	s16, s16, s20
 80074a8:	42ae      	cmp	r6, r5
 80074aa:	dbd2      	blt.n	8007452 <GW_compute_speeds+0xba>
 80074ac:	ee07 5a90 	vmov	s15, r5
 80074b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074b4:	ee68 7ae8 	vnmul.f32	s15, s17, s17
 80074b8:	eee7 7a0d 	vfma.f32	s15, s14, s26
 80074bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c4:	d034      	beq.n	8007530 <GW_compute_speeds+0x198>
 80074c6:	ee69 9ae8 	vnmul.f32	s19, s19, s17
 80074ca:	ee29 9a68 	vnmul.f32	s18, s18, s17
 80074ce:	ee28 8a68 	vnmul.f32	s16, s16, s17
 80074d2:	eee7 9a2c 	vfma.f32	s19, s14, s25
 80074d6:	eea7 9a0c 	vfma.f32	s18, s14, s24
 80074da:	eea7 8a2b 	vfma.f32	s16, s14, s23
 80074de:	ee89 aaa7 	vdiv.f32	s20, s19, s15
 80074e2:	eec8 8a27 	vdiv.f32	s17, s16, s15
 80074e6:	eec9 9a27 	vdiv.f32	s19, s18, s15
 80074ea:	2000      	movs	r0, #0
 80074ec:	ed84 aa1c 	vstr	s20, [r4, #112]	; 0x70
 80074f0:	edc4 9a1d 	vstr	s19, [r4, #116]	; 0x74
 80074f4:	edc4 8a1e 	vstr	s17, [r4, #120]	; 0x78
 80074f8:	ecbd 8b0c 	vpop	{d8-d13}
 80074fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007500:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8007544 <GW_compute_speeds+0x1ac>
 8007504:	eddf da10 	vldr	s27, [pc, #64]	; 8007548 <GW_compute_speeds+0x1b0>
 8007508:	eeb0 9a48 	vmov.f32	s18, s16
 800750c:	eef0 9a48 	vmov.f32	s19, s16
 8007510:	eef0 ba48 	vmov.f32	s23, s16
 8007514:	eeb0 ca48 	vmov.f32	s24, s16
 8007518:	eef0 ca48 	vmov.f32	s25, s16
 800751c:	eeb0 da48 	vmov.f32	s26, s16
 8007520:	eef0 8a48 	vmov.f32	s17, s16
 8007524:	2600      	movs	r6, #0
 8007526:	f100 077c 	add.w	r7, r0, #124	; 0x7c
 800752a:	f500 7824 	add.w	r8, r0, #656	; 0x290
 800752e:	e7bb      	b.n	80074a8 <GW_compute_speeds+0x110>
 8007530:	eddf 8a04 	vldr	s17, [pc, #16]	; 8007544 <GW_compute_speeds+0x1ac>
 8007534:	eef0 9a68 	vmov.f32	s19, s17
 8007538:	eeb0 aa68 	vmov.f32	s20, s17
 800753c:	e7d5      	b.n	80074ea <GW_compute_speeds+0x152>
 800753e:	f06f 0001 	mvn.w	r0, #1
 8007542:	e7d9      	b.n	80074f8 <GW_compute_speeds+0x160>
 8007544:	00000000 	.word	0x00000000
 8007548:	447a0000 	.word	0x447a0000
 800754c:	00000000 	.word	0x00000000

08007550 <GW_interpret_speeds>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	ed2d 8b06 	vpush	{d8-d10}
 8007558:	4604      	mov	r4, r0
 800755a:	b087      	sub	sp, #28
 800755c:	2800      	cmp	r0, #0
 800755e:	f000 81cc 	beq.w	80078fa <GW_interpret_speeds+0x3aa>
 8007562:	6803      	ldr	r3, [r0, #0]
 8007564:	f003 060c 	and.w	r6, r3, #12
 8007568:	f003 0570 	and.w	r5, r3, #112	; 0x70
 800756c:	079b      	lsls	r3, r3, #30
 800756e:	d051      	beq.n	8007614 <GW_interpret_speeds+0xc4>
 8007570:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8007572:	f7f8 ff95 	bl	80004a0 <__aeabi_f2d>
 8007576:	ec41 0b18 	vmov	d8, r0, r1
 800757a:	2e00      	cmp	r6, #0
 800757c:	d051      	beq.n	8007622 <GW_interpret_speeds+0xd2>
 800757e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007580:	f7f8 ff8e 	bl	80004a0 <__aeabi_f2d>
 8007584:	ec41 0b19 	vmov	d9, r0, r1
 8007588:	2d00      	cmp	r5, #0
 800758a:	d051      	beq.n	8007630 <GW_interpret_speeds+0xe0>
 800758c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800758e:	f7f8 ff87 	bl	80004a0 <__aeabi_f2d>
 8007592:	e9cd 0100 	strd	r0, r1, [sp]
 8007596:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007598:	f7f8 ff70 	bl	800047c <__aeabi_i2d>
 800759c:	2300      	movs	r3, #0
 800759e:	4606      	mov	r6, r0
 80075a0:	460f      	mov	r7, r1
 80075a2:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 80075a6:	ec51 0b18 	vmov	r0, r1, d8
 80075aa:	ec53 2b18 	vmov	r2, r3, d8
 80075ae:	f7f8 ffcf 	bl	8000550 <__aeabi_dmul>
 80075b2:	ec53 2b19 	vmov	r2, r3, d9
 80075b6:	4680      	mov	r8, r0
 80075b8:	4689      	mov	r9, r1
 80075ba:	ec51 0b19 	vmov	r0, r1, d9
 80075be:	f7f8 ffc7 	bl	8000550 <__aeabi_dmul>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7f8 fe0b 	bl	80001e4 <__adddf3>
 80075ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075d2:	4680      	mov	r8, r0
 80075d4:	4689      	mov	r9, r1
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	f7f8 ffb9 	bl	8000550 <__aeabi_dmul>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4640      	mov	r0, r8
 80075e4:	4649      	mov	r1, r9
 80075e6:	f7f8 fdfd 	bl	80001e4 <__adddf3>
 80075ea:	4632      	mov	r2, r6
 80075ec:	ec41 0b1a 	vmov	d10, r0, r1
 80075f0:	463b      	mov	r3, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f8 ffab 	bl	8000550 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	ec51 0b1a 	vmov	r0, r1, d10
 8007602:	f7f9 fa17 	bl	8000a34 <__aeabi_dcmplt>
 8007606:	b9c0      	cbnz	r0, 800763a <GW_interpret_speeds+0xea>
 8007608:	2000      	movs	r0, #0
 800760a:	b007      	add	sp, #28
 800760c:	ecbd 8b06 	vpop	{d8-d10}
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	ed9f 7bbe 	vldr	d7, [pc, #760]	; 8007910 <GW_interpret_speeds+0x3c0>
 8007618:	eeb0 8a47 	vmov.f32	s16, s14
 800761c:	eef0 8a67 	vmov.f32	s17, s15
 8007620:	e7ab      	b.n	800757a <GW_interpret_speeds+0x2a>
 8007622:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 8007910 <GW_interpret_speeds+0x3c0>
 8007626:	eeb0 9a47 	vmov.f32	s18, s14
 800762a:	eef0 9a67 	vmov.f32	s19, s15
 800762e:	e7ab      	b.n	8007588 <GW_interpret_speeds+0x38>
 8007630:	ed9f 7bb7 	vldr	d7, [pc, #732]	; 8007910 <GW_interpret_speeds+0x3c0>
 8007634:	ed8d 7b00 	vstr	d7, [sp]
 8007638:	e7ad      	b.n	8007596 <GW_interpret_speeds+0x46>
 800763a:	ee18 3a90 	vmov	r3, s17
 800763e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007642:	ee19 3a90 	vmov	r3, s19
 8007646:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800764a:	ee19 0a10 	vmov	r0, s18
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	4659      	mov	r1, fp
 8007654:	ee18 6a10 	vmov	r6, s16
 8007658:	ee19 aa10 	vmov	sl, s18
 800765c:	f7f9 fa08 	bl	8000a70 <__aeabi_dcmpgt>
 8007660:	2800      	cmp	r0, #0
 8007662:	f000 80ff 	beq.w	8007864 <GW_interpret_speeds+0x314>
 8007666:	ee19 2a10 	vmov	r2, s18
 800766a:	ee18 0a10 	vmov	r0, s16
 800766e:	465b      	mov	r3, fp
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 f897 	bl	80007a4 <__aeabi_ddiv>
 8007676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767a:	e9dd 8300 	ldrd	r8, r3, [sp]
 800767e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f9 f9f1 	bl	8000a70 <__aeabi_dcmpgt>
 800768e:	2800      	cmp	r0, #0
 8007690:	f000 80ed 	beq.w	800786e <GW_interpret_speeds+0x31e>
 8007694:	4642      	mov	r2, r8
 8007696:	464b      	mov	r3, r9
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f9 f882 	bl	80007a4 <__aeabi_ddiv>
 80076a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a4:	69e0      	ldr	r0, [r4, #28]
 80076a6:	f7f8 fee9 	bl	800047c <__aeabi_i2d>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f9 f9dd 	bl	8000a70 <__aeabi_dcmpgt>
 80076b6:	b1f8      	cbz	r0, 80076f8 <GW_interpret_speeds+0x1a8>
 80076b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80076ba:	f7f8 fef1 	bl	80004a0 <__aeabi_f2d>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c6:	f7f9 f9d3 	bl	8000a70 <__aeabi_dcmpgt>
 80076ca:	b1a8      	cbz	r0, 80076f8 <GW_interpret_speeds+0x1a8>
 80076cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80076ce:	f7f8 fee7 	bl	80004a0 <__aeabi_f2d>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076da:	f7f9 f9c9 	bl	8000a70 <__aeabi_dcmpgt>
 80076de:	b158      	cbz	r0, 80076f8 <GW_interpret_speeds+0x1a8>
 80076e0:	ec51 0b18 	vmov	r0, r1, d8
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	f7f9 f9c2 	bl	8000a70 <__aeabi_dcmpgt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f000 80c3 	beq.w	8007878 <GW_interpret_speeds+0x328>
 80076f2:	2302      	movs	r3, #2
 80076f4:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	4630      	mov	r0, r6
 80076fe:	4639      	mov	r1, r7
 8007700:	f7f9 f9b6 	bl	8000a70 <__aeabi_dcmpgt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f000 80c2 	beq.w	800788e <GW_interpret_speeds+0x33e>
 800770a:	4632      	mov	r2, r6
 800770c:	463b      	mov	r3, r7
 800770e:	4650      	mov	r0, sl
 8007710:	4659      	mov	r1, fp
 8007712:	f7f9 f847 	bl	80007a4 <__aeabi_ddiv>
 8007716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4640      	mov	r0, r8
 8007720:	4649      	mov	r1, r9
 8007722:	f7f9 f9a5 	bl	8000a70 <__aeabi_dcmpgt>
 8007726:	2800      	cmp	r0, #0
 8007728:	f000 80b6 	beq.w	8007898 <GW_interpret_speeds+0x348>
 800772c:	4642      	mov	r2, r8
 800772e:	464b      	mov	r3, r9
 8007730:	4650      	mov	r0, sl
 8007732:	4659      	mov	r1, fp
 8007734:	f7f9 f836 	bl	80007a4 <__aeabi_ddiv>
 8007738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800773c:	6a20      	ldr	r0, [r4, #32]
 800773e:	f7f8 fe9d 	bl	800047c <__aeabi_i2d>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4650      	mov	r0, sl
 8007748:	4659      	mov	r1, fp
 800774a:	f7f9 f991 	bl	8000a70 <__aeabi_dcmpgt>
 800774e:	b1f8      	cbz	r0, 8007790 <GW_interpret_speeds+0x240>
 8007750:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007752:	f7f8 fea5 	bl	80004a0 <__aeabi_f2d>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800775e:	f7f9 f987 	bl	8000a70 <__aeabi_dcmpgt>
 8007762:	b1a8      	cbz	r0, 8007790 <GW_interpret_speeds+0x240>
 8007764:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007766:	f7f8 fe9b 	bl	80004a0 <__aeabi_f2d>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007772:	f7f9 f97d 	bl	8000a70 <__aeabi_dcmpgt>
 8007776:	b158      	cbz	r0, 8007790 <GW_interpret_speeds+0x240>
 8007778:	ec51 0b19 	vmov	r0, r1, d9
 800777c:	2200      	movs	r2, #0
 800777e:	2300      	movs	r3, #0
 8007780:	f7f9 f976 	bl	8000a70 <__aeabi_dcmpgt>
 8007784:	2800      	cmp	r0, #0
 8007786:	f000 808c 	beq.w	80078a2 <GW_interpret_speeds+0x352>
 800778a:	2304      	movs	r3, #4
 800778c:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8007790:	2200      	movs	r2, #0
 8007792:	2300      	movs	r3, #0
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f9 f96a 	bl	8000a70 <__aeabi_dcmpgt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f000 808b 	beq.w	80078b8 <GW_interpret_speeds+0x368>
 80077a2:	4632      	mov	r2, r6
 80077a4:	463b      	mov	r3, r7
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	f7f8 fffb 	bl	80007a4 <__aeabi_ddiv>
 80077ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	4650      	mov	r0, sl
 80077b8:	4659      	mov	r1, fp
 80077ba:	f7f9 f959 	bl	8000a70 <__aeabi_dcmpgt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d07f      	beq.n	80078c2 <GW_interpret_speeds+0x372>
 80077c2:	4652      	mov	r2, sl
 80077c4:	465b      	mov	r3, fp
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f8 ffeb 	bl	80007a4 <__aeabi_ddiv>
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077d4:	f7f8 fe52 	bl	800047c <__aeabi_i2d>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4640      	mov	r0, r8
 80077de:	4649      	mov	r1, r9
 80077e0:	f7f9 f946 	bl	8000a70 <__aeabi_dcmpgt>
 80077e4:	b328      	cbz	r0, 8007832 <GW_interpret_speeds+0x2e2>
 80077e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80077e8:	f7f8 fe5a 	bl	80004a0 <__aeabi_f2d>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f4:	f7f9 f93c 	bl	8000a70 <__aeabi_dcmpgt>
 80077f8:	b1d8      	cbz	r0, 8007832 <GW_interpret_speeds+0x2e2>
 80077fa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80077fc:	f7f8 fe50 	bl	80004a0 <__aeabi_f2d>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f9 f932 	bl	8000a70 <__aeabi_dcmpgt>
 800780c:	b188      	cbz	r0, 8007832 <GW_interpret_speeds+0x2e2>
 800780e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	f8d4 5f48 	ldr.w	r5, [r4, #3912]	; 0xf48
 800781a:	f7f9 f929 	bl	8000a70 <__aeabi_dcmpgt>
 800781e:	2800      	cmp	r0, #0
 8007820:	d053      	beq.n	80078ca <GW_interpret_speeds+0x37a>
 8007822:	2301      	movs	r3, #1
 8007824:	f8c4 3f58 	str.w	r3, [r4, #3928]	; 0xf58
 8007828:	f8c4 5f50 	str.w	r5, [r4, #3920]	; 0xf50
 800782c:	2306      	movs	r3, #6
 800782e:	f884 38cc 	strb.w	r3, [r4, #2252]	; 0x8cc
 8007832:	f894 2f3c 	ldrb.w	r2, [r4, #3900]	; 0xf3c
 8007836:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800783a:	2a00      	cmp	r2, #0
 800783c:	d160      	bne.n	8007900 <GW_interpret_speeds+0x3b0>
 800783e:	2bc8      	cmp	r3, #200	; 0xc8
 8007840:	f47f aee2 	bne.w	8007608 <GW_interpret_speeds+0xb8>
 8007844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007846:	f7f8 fe2b 	bl	80004a0 <__aeabi_f2d>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	ec51 0b1a 	vmov	r0, r1, d10
 8007852:	f7f9 f8ef 	bl	8000a34 <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f43f aed6 	beq.w	8007608 <GW_interpret_speeds+0xb8>
 800785c:	2301      	movs	r3, #1
 800785e:	f884 3f3c 	strb.w	r3, [r4, #3900]	; 0xf3c
 8007862:	e6d1      	b.n	8007608 <GW_interpret_speeds+0xb8>
 8007864:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8007918 <GW_interpret_speeds+0x3c8>
 8007868:	ed8d 7b02 	vstr	d7, [sp, #8]
 800786c:	e705      	b.n	800767a <GW_interpret_speeds+0x12a>
 800786e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8007918 <GW_interpret_speeds+0x3c8>
 8007872:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007876:	e715      	b.n	80076a4 <GW_interpret_speeds+0x154>
 8007878:	ec51 0b18 	vmov	r0, r1, d8
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f9 f8d8 	bl	8000a34 <__aeabi_dcmplt>
 8007884:	2800      	cmp	r0, #0
 8007886:	f43f af37 	beq.w	80076f8 <GW_interpret_speeds+0x1a8>
 800788a:	2301      	movs	r3, #1
 800788c:	e732      	b.n	80076f4 <GW_interpret_speeds+0x1a4>
 800788e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007918 <GW_interpret_speeds+0x3c8>
 8007892:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007896:	e740      	b.n	800771a <GW_interpret_speeds+0x1ca>
 8007898:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8007918 <GW_interpret_speeds+0x3c8>
 800789c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078a0:	e74c      	b.n	800773c <GW_interpret_speeds+0x1ec>
 80078a2:	ec51 0b19 	vmov	r0, r1, d9
 80078a6:	2200      	movs	r2, #0
 80078a8:	2300      	movs	r3, #0
 80078aa:	f7f9 f8c3 	bl	8000a34 <__aeabi_dcmplt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f af6e 	beq.w	8007790 <GW_interpret_speeds+0x240>
 80078b4:	2303      	movs	r3, #3
 80078b6:	e769      	b.n	800778c <GW_interpret_speeds+0x23c>
 80078b8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8007918 <GW_interpret_speeds+0x3c8>
 80078bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078c0:	e777      	b.n	80077b2 <GW_interpret_speeds+0x262>
 80078c2:	4f17      	ldr	r7, [pc, #92]	; (8007920 <GW_interpret_speeds+0x3d0>)
 80078c4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80078c8:	e783      	b.n	80077d2 <GW_interpret_speeds+0x282>
 80078ca:	f8d4 3f58 	ldr.w	r3, [r4, #3928]	; 0xf58
 80078ce:	f8c4 5f4c 	str.w	r5, [r4, #3916]	; 0xf4c
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d10f      	bne.n	80078f6 <GW_interpret_speeds+0x3a6>
 80078d6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 80078da:	f8c4 0f58 	str.w	r0, [r4, #3928]	; 0xf58
 80078de:	1aad      	subs	r5, r5, r2
 80078e0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80078e2:	f8c4 5f54 	str.w	r5, [r4, #3924]	; 0xf54
 80078e6:	4295      	cmp	r5, r2
 80078e8:	dc03      	bgt.n	80078f2 <GW_interpret_speeds+0x3a2>
 80078ea:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
 80078ee:	2307      	movs	r3, #7
 80078f0:	e79d      	b.n	800782e <GW_interpret_speeds+0x2de>
 80078f2:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
 80078f6:	2305      	movs	r3, #5
 80078f8:	e799      	b.n	800782e <GW_interpret_speeds+0x2de>
 80078fa:	f06f 0001 	mvn.w	r0, #1
 80078fe:	e684      	b.n	800760a <GW_interpret_speeds+0xba>
 8007900:	2bc8      	cmp	r3, #200	; 0xc8
 8007902:	f43f ae81 	beq.w	8007608 <GW_interpret_speeds+0xb8>
 8007906:	2000      	movs	r0, #0
 8007908:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 800790c:	e67d      	b.n	800760a <GW_interpret_speeds+0xba>
 800790e:	bf00      	nop
	...
 8007918:	e0000000 	.word	0xe0000000
 800791c:	47efffff 	.word	0x47efffff
 8007920:	47efffff 	.word	0x47efffff
 8007924:	00000000 	.word	0x00000000

08007928 <GW_update_prediction>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	4615      	mov	r5, r2
 800792c:	4604      	mov	r4, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	f000 80b7 	beq.w	8007aa2 <GW_update_prediction+0x17a>
 8007934:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
 8007938:	f001 f848 	bl	80089cc <RFBVM_mean>
 800793c:	f504 660d 	add.w	r6, r4, #2256	; 0x8d0
 8007940:	ed86 0a00 	vstr	s0, [r6]
 8007944:	f894 38cc 	ldrb.w	r3, [r4, #2252]	; 0x8cc
 8007948:	f894 cf1c 	ldrb.w	ip, [r4, #3868]	; 0xf1c
 800794c:	6920      	ldr	r0, [r4, #16]
 800794e:	ebac 0103 	sub.w	r1, ip, r3
 8007952:	424a      	negs	r2, r1
 8007954:	414a      	adcs	r2, r1
 8007956:	f604 772c 	addw	r7, r4, #3884	; 0xf2c
 800795a:	f894 1f28 	ldrb.w	r1, [r4, #3880]	; 0xf28
 800795e:	edd7 7a00 	vldr	s15, [r7]
 8007962:	f884 28d8 	strb.w	r2, [r4, #2264]	; 0x8d8
 8007966:	2900      	cmp	r1, #0
 8007968:	bf08      	it	eq
 800796a:	2200      	moveq	r2, #0
 800796c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007970:	edd4 7a06 	vldr	s15, [r4, #24]
 8007974:	f884 28d5 	strb.w	r2, [r4, #2261]	; 0x8d5
 8007978:	f8d4 2f24 	ldr.w	r2, [r4, #3876]	; 0xf24
 800797c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007980:	1aaa      	subs	r2, r5, r2
 8007982:	4282      	cmp	r2, r0
 8007984:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007988:	bfd4      	ite	le
 800798a:	2200      	movle	r2, #0
 800798c:	2201      	movgt	r2, #1
 800798e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007992:	f884 28d6 	strb.w	r2, [r4, #2262]	; 0x8d6
 8007996:	bfcc      	ite	gt
 8007998:	2201      	movgt	r2, #1
 800799a:	2200      	movle	r2, #0
 800799c:	f884 28d4 	strb.w	r2, [r4, #2260]	; 0x8d4
 80079a0:	1e58      	subs	r0, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d06e      	beq.n	8007a84 <GW_update_prediction+0x15c>
 80079a6:	4218      	tst	r0, r3
 80079a8:	bf0c      	ite	eq
 80079aa:	2201      	moveq	r2, #1
 80079ac:	2200      	movne	r2, #0
 80079ae:	459c      	cmp	ip, r3
 80079b0:	f884 28d9 	strb.w	r2, [r4, #2265]	; 0x8d9
 80079b4:	d003      	beq.n	80079be <GW_update_prediction+0x96>
 80079b6:	b111      	cbz	r1, 80079be <GW_update_prediction+0x96>
 80079b8:	2200      	movs	r2, #0
 80079ba:	f884 2f28 	strb.w	r2, [r4, #3880]	; 0xf28
 80079be:	fab3 f383 	clz	r3, r3
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f884 38d7 	strb.w	r3, [r4, #2263]	; 0x8d7
 80079c8:	f7f8 fd58 	bl	800047c <__aeabi_i2d>
 80079cc:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8007aa8 <GW_update_prediction+0x180>
 80079d0:	ec41 0b11 	vmov	d1, r0, r1
 80079d4:	f001 fb20 	bl	8009018 <pow>
 80079d8:	ec51 0b10 	vmov	r0, r1, d0
 80079dc:	f7f9 f890 	bl	8000b00 <__aeabi_d2uiz>
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	4218      	tst	r0, r3
 80079e4:	f894 38d7 	ldrb.w	r3, [r4, #2263]	; 0x8d7
 80079e8:	bf18      	it	ne
 80079ea:	f043 0301 	orrne.w	r3, r3, #1
 80079ee:	f884 38d7 	strb.w	r3, [r4, #2263]	; 0x8d7
 80079f2:	bb53      	cbnz	r3, 8007a4a <GW_update_prediction+0x122>
 80079f4:	f894 38d5 	ldrb.w	r3, [r4, #2261]	; 0x8d5
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d145      	bne.n	8007a88 <GW_update_prediction+0x160>
 80079fc:	f8d4 38d4 	ldr.w	r3, [r4, #2260]	; 0x8d4
 8007a00:	f013 1fff 	tst.w	r3, #16711935	; 0xff00ff
 8007a04:	d102      	bne.n	8007a0c <GW_update_prediction+0xe4>
 8007a06:	f894 38d8 	ldrb.w	r3, [r4, #2264]	; 0x8d8
 8007a0a:	b1f3      	cbz	r3, 8007a4a <GW_update_prediction+0x122>
 8007a0c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007a10:	ed96 7a00 	vldr	s14, [r6]
 8007a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a20:	d513      	bpl.n	8007a4a <GW_update_prediction+0x122>
 8007a22:	f894 38cc 	ldrb.w	r3, [r4, #2252]	; 0x8cc
 8007a26:	f884 3f1c 	strb.w	r3, [r4, #3868]	; 0xf1c
 8007a2a:	f8d4 3f5c 	ldr.w	r3, [r4, #3932]	; 0xf5c
 8007a2e:	b113      	cbz	r3, 8007a36 <GW_update_prediction+0x10e>
 8007a30:	2307      	movs	r3, #7
 8007a32:	f884 3f1c 	strb.w	r3, [r4, #3868]	; 0xf1c
 8007a36:	f240 1301 	movw	r3, #257	; 0x101
 8007a3a:	f8c4 5f20 	str.w	r5, [r4, #3872]	; 0xf20
 8007a3e:	f8c4 5f24 	str.w	r5, [r4, #3876]	; 0xf24
 8007a42:	f8a4 3f28 	strh.w	r3, [r4, #3880]	; 0xf28
 8007a46:	ed87 7a00 	vstr	s14, [r7]
 8007a4a:	f8d4 2f20 	ldr.w	r2, [r4, #3872]	; 0xf20
 8007a4e:	6963      	ldr	r3, [r4, #20]
 8007a50:	1aad      	subs	r5, r5, r2
 8007a52:	429d      	cmp	r5, r3
 8007a54:	bfcc      	ite	gt
 8007a56:	2301      	movgt	r3, #1
 8007a58:	2300      	movle	r3, #0
 8007a5a:	f884 38da 	strb.w	r3, [r4, #2266]	; 0x8da
 8007a5e:	dd16      	ble.n	8007a8e <GW_update_prediction+0x166>
 8007a60:	f894 3f29 	ldrb.w	r3, [r4, #3881]	; 0xf29
 8007a64:	b19b      	cbz	r3, 8007a8e <GW_update_prediction+0x166>
 8007a66:	2301      	movs	r3, #1
 8007a68:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 8007a6c:	f894 3f1c 	ldrb.w	r3, [r4, #3868]	; 0xf1c
 8007a70:	2000      	movs	r0, #0
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	f884 0f29 	strb.w	r0, [r4, #3881]	; 0xf29
 8007a78:	d003      	beq.n	8007a82 <GW_update_prediction+0x15a>
 8007a7a:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
 8007a7e:	f8c4 0f58 	str.w	r0, [r4, #3928]	; 0xf58
 8007a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a84:	2201      	movs	r2, #1
 8007a86:	e792      	b.n	80079ae <GW_update_prediction+0x86>
 8007a88:	f8c4 5f24 	str.w	r5, [r4, #3876]	; 0xf24
 8007a8c:	e7dd      	b.n	8007a4a <GW_update_prediction+0x122>
 8007a8e:	f894 2f2a 	ldrb.w	r2, [r4, #3882]	; 0xf2a
 8007a92:	2300      	movs	r3, #0
 8007a94:	b10a      	cbz	r2, 8007a9a <GW_update_prediction+0x172>
 8007a96:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
 8007a9a:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e7ef      	b.n	8007a82 <GW_update_prediction+0x15a>
 8007aa2:	f06f 0001 	mvn.w	r0, #1
 8007aa6:	e7ec      	b.n	8007a82 <GW_update_prediction+0x15a>
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	40000000 	.word	0x40000000

08007ab0 <GW_filter_prediction>:
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	f600 7444 	addw	r4, r0, #3908	; 0xf44
 8007ab8:	2500      	movs	r5, #0
 8007aba:	2300      	movs	r3, #0
 8007abc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007ac0:	6025      	str	r5, [r4, #0]
 8007ac2:	f102 0720 	add.w	r7, r2, #32
 8007ac6:	461e      	mov	r6, r3
 8007ac8:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8007acc:	f501 7e94 	add.w	lr, r1, #296	; 0x128
 8007ad0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007ad4:	45b4      	cmp	ip, r6
 8007ad6:	dc46      	bgt.n	8007b66 <GW_filter_prediction+0xb6>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d069      	beq.n	8007bb0 <GW_filter_prediction+0x100>
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	edd4 6a00 	vldr	s13, [r4]
 8007ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aec:	f890 3f2a 	ldrb.w	r3, [r0, #3882]	; 0xf2a
 8007af0:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 8007af4:	ed84 7a00 	vstr	s14, [r4]
 8007af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b04:	bfc2      	ittt	gt
 8007b06:	ed90 7a14 	vldrgt	s14, [r0, #80]	; 0x50
 8007b0a:	eeb8 7ac7 	vcvtgt.f32.s32	s14, s14
 8007b0e:	ed84 7a00 	vstrgt	s14, [r4]
 8007b12:	ed90 7a15 	vldr	s14, [r0, #84]	; 0x54
 8007b16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b1a:	ed94 7a00 	vldr	s14, [r4]
 8007b1e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007b22:	b15b      	cbz	r3, 8007b3c <GW_filter_prediction+0x8c>
 8007b24:	f600 732c 	addw	r3, r0, #3884	; 0xf2c
 8007b28:	edd3 6a00 	vldr	s13, [r3]
 8007b2c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b34:	bfc4      	itt	gt
 8007b36:	2300      	movgt	r3, #0
 8007b38:	f880 3f2a 	strbgt.w	r3, [r0, #3882]	; 0xf2a
 8007b3c:	edd1 6a09 	vldr	s13, [r1, #36]	; 0x24
 8007b40:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b48:	dd0a      	ble.n	8007b60 <GW_filter_prediction+0xb0>
 8007b4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	d505      	bpl.n	8007b60 <GW_filter_prediction+0xb0>
 8007b54:	2300      	movs	r3, #0
 8007b56:	f881 3168 	strb.w	r3, [r1, #360]	; 0x168
 8007b5a:	61cd      	str	r5, [r1, #28]
 8007b5c:	620d      	str	r5, [r1, #32]
 8007b5e:	624d      	str	r5, [r1, #36]	; 0x24
 8007b60:	2000      	movs	r0, #0
 8007b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b66:	f812 8b01 	ldrb.w	r8, [r2], #1
 8007b6a:	f1b8 0f00 	cmp.w	r8, #0
 8007b6e:	d016      	beq.n	8007b9e <GW_filter_prediction+0xee>
 8007b70:	ed90 7a14 	vldr	s14, [r0, #80]	; 0x50
 8007b74:	edd7 7a00 	vldr	s15, [r7]
 8007b78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b84:	d50b      	bpl.n	8007b9e <GW_filter_prediction+0xee>
 8007b86:	f81e 8006 	ldrb.w	r8, [lr, r6]
 8007b8a:	ed94 7a00 	vldr	s14, [r4]
 8007b8e:	f1b8 0f00 	cmp.w	r8, #0
 8007b92:	d007      	beq.n	8007ba4 <GW_filter_prediction+0xf4>
 8007b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b98:	3301      	adds	r3, #1
 8007b9a:	edc4 7a00 	vstr	s15, [r4]
 8007b9e:	3601      	adds	r6, #1
 8007ba0:	3704      	adds	r7, #4
 8007ba2:	e797      	b.n	8007ad4 <GW_filter_prediction+0x24>
 8007ba4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007ba8:	330a      	adds	r3, #10
 8007baa:	ed84 7a00 	vstr	s14, [r4]
 8007bae:	e7f6      	b.n	8007b9e <GW_filter_prediction+0xee>
 8007bb0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007bb8 <GW_filter_prediction+0x108>
 8007bb4:	e79a      	b.n	8007aec <GW_filter_prediction+0x3c>
 8007bb6:	bf00      	nop
 8007bb8:	00000000 	.word	0x00000000

08007bbc <setLevelController>:
 8007bbc:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8007bc0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bc6:	b538      	push	{r3, r4, r5, lr}
 8007bc8:	ee17 3a90 	vmov	r3, s15
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f600 05dc 	addw	r5, r0, #2268	; 0x8dc
 8007bd4:	da0e      	bge.n	8007bf4 <setLevelController+0x38>
 8007bd6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8007c20 <setLevelController+0x64>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 feb8 	bl	8008950 <RFBVM_push>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 fef3 	bl	80089cc <RFBVM_mean>
 8007be6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8007bea:	ee10 3a10 	vmov	r3, s0
 8007bee:	f8c4 3f30 	str.w	r3, [r4, #3888]	; 0xf30
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	dd02      	ble.n	8007c00 <setLevelController+0x44>
 8007bfa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8007c24 <setLevelController+0x68>
 8007bfe:	e7ec      	b.n	8007bda <setLevelController+0x1e>
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	ee00 3a10 	vmov	s0, r3
 8007c06:	f500 632f 	add.w	r3, r0, #2800	; 0xaf0
 8007c0a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007c0e:	edd3 7a00 	vldr	s15, [r3]
 8007c12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c1a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007c1e:	e7dc      	b.n	8007bda <setLevelController+0x1e>
 8007c20:	42c80000 	.word	0x42c80000
 8007c24:	00000000 	.word	0x00000000

08007c28 <setPolarLevelController>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	ed91 0a08 	vldr	s0, [r1, #32]
 8007c2e:	edd1 7a07 	vldr	s15, [r1, #28]
 8007c32:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007c36:	ed2d 8b02 	vpush	{d8}
 8007c3a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8007c3e:	460c      	mov	r4, r1
 8007c40:	4605      	mov	r5, r0
 8007c42:	f000 fe3d 	bl	80088c0 <taylor_sqrt>
 8007c46:	edd4 7a07 	vldr	s15, [r4, #28]
 8007c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	eef0 8a40 	vmov.f32	s17, s0
 8007c56:	d032      	beq.n	8007cbe <setPolarLevelController+0x96>
 8007c58:	ed94 0a08 	vldr	s0, [r4, #32]
 8007c5c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007c60:	f000 fdb6 	bl	80087d0 <taylor_atan>
 8007c64:	ee10 0a10 	vmov	r0, s0
 8007c68:	f7f8 fc1a 	bl	80004a0 <__aeabi_f2d>
 8007c6c:	a321      	add	r3, pc, #132	; (adr r3, 8007cf4 <setPolarLevelController+0xcc>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fc6d 	bl	8000550 <__aeabi_dmul>
 8007c76:	f7f8 ff63 	bl	8000b40 <__aeabi_d2f>
 8007c7a:	ee08 0a10 	vmov	s16, r0
 8007c7e:	edd4 7a07 	vldr	s15, [r4, #28]
 8007c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8a:	d51b      	bpl.n	8007cc4 <setPolarLevelController+0x9c>
 8007c8c:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007ce8 <setPolarLevelController+0xc0>
 8007c90:	ee38 8a27 	vadd.f32	s16, s16, s15
 8007c94:	f605 24f4 	addw	r4, r5, #2804	; 0xaf4
 8007c98:	eeb0 0a68 	vmov.f32	s0, s17
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 fe57 	bl	8008950 <RFBVM_push>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fe92 	bl	80089cc <RFBVM_mean>
 8007ca8:	f605 7334 	addw	r3, r5, #3892	; 0xf34
 8007cac:	f605 7538 	addw	r5, r5, #3896	; 0xf38
 8007cb0:	ed83 0a00 	vstr	s0, [r3]
 8007cb4:	ed85 8a00 	vstr	s16, [r5]
 8007cb8:	ecbd 8b02 	vpop	{d8}
 8007cbc:	bd38      	pop	{r3, r4, r5, pc}
 8007cbe:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8007cec <setPolarLevelController+0xc4>
 8007cc2:	e7dc      	b.n	8007c7e <setPolarLevelController+0x56>
 8007cc4:	ed94 7a08 	vldr	s14, [r4, #32]
 8007cc8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd0:	d5e0      	bpl.n	8007c94 <setPolarLevelController+0x6c>
 8007cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	dddb      	ble.n	8007c94 <setPolarLevelController+0x6c>
 8007cdc:	eddf 7a04 	vldr	s15, [pc, #16]	; 8007cf0 <setPolarLevelController+0xc8>
 8007ce0:	e7d6      	b.n	8007c90 <setPolarLevelController+0x68>
 8007ce2:	bf00      	nop
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	43340000 	.word	0x43340000
 8007cec:	42b40000 	.word	0x42b40000
 8007cf0:	43b40000 	.word	0x43b40000
 8007cf4:	7a711848 	.word	0x7a711848
 8007cf8:	404ca5dc 	.word	0x404ca5dc

08007cfc <GW_level_control>:
 8007cfc:	b513      	push	{r0, r1, r4, lr}
 8007cfe:	4604      	mov	r4, r0
 8007d00:	b348      	cbz	r0, 8007d56 <GW_level_control+0x5a>
 8007d02:	f891 0168 	ldrb.w	r0, [r1, #360]	; 0x168
 8007d06:	b918      	cbnz	r0, 8007d10 <GW_level_control+0x14>
 8007d08:	f884 0f3c 	strb.w	r0, [r4, #3900]	; 0xf3c
 8007d0c:	b002      	add	sp, #8
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	f894 3f3c 	ldrb.w	r3, [r4, #3900]	; 0xf3c
 8007d14:	b91b      	cbnz	r3, 8007d1e <GW_level_control+0x22>
 8007d16:	f8c4 3f40 	str.w	r3, [r4, #3904]	; 0xf40
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e7f6      	b.n	8007d0c <GW_level_control+0x10>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d116      	bne.n	8007d50 <GW_level_control+0x54>
 8007d22:	f8d4 3f40 	ldr.w	r3, [r4, #3904]	; 0xf40
 8007d26:	b90b      	cbnz	r3, 8007d2c <GW_level_control+0x30>
 8007d28:	f8c4 2f40 	str.w	r2, [r4, #3904]	; 0xf40
 8007d2c:	f8d4 3f40 	ldr.w	r3, [r4, #3904]	; 0xf40
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	ddf0      	ble.n	8007d1a <GW_level_control+0x1e>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f884 3f3c 	strb.w	r3, [r4, #3900]	; 0xf3c
 8007d3e:	4620      	mov	r0, r4
 8007d40:	9101      	str	r1, [sp, #4]
 8007d42:	f7ff ff3b 	bl	8007bbc <setLevelController>
 8007d46:	9901      	ldr	r1, [sp, #4]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f7ff ff6d 	bl	8007c28 <setPolarLevelController>
 8007d4e:	e7e4      	b.n	8007d1a <GW_level_control+0x1e>
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d1e2      	bne.n	8007d1a <GW_level_control+0x1e>
 8007d54:	e7f3      	b.n	8007d3e <GW_level_control+0x42>
 8007d56:	f06f 0001 	mvn.w	r0, #1
 8007d5a:	e7d7      	b.n	8007d0c <GW_level_control+0x10>

08007d5c <GW_run>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	460e      	mov	r6, r1
 8007d60:	4615      	mov	r5, r2
 8007d62:	4604      	mov	r4, r0
 8007d64:	b390      	cbz	r0, 8007dcc <GW_run+0x70>
 8007d66:	b389      	cbz	r1, 8007dcc <GW_run+0x70>
 8007d68:	b382      	cbz	r2, 8007dcc <GW_run+0x70>
 8007d6a:	69d3      	ldr	r3, [r2, #28]
 8007d6c:	f8c0 3f48 	str.w	r3, [r0, #3912]	; 0xf48
 8007d70:	4611      	mov	r1, r2
 8007d72:	4630      	mov	r0, r6
 8007d74:	f000 fd1c 	bl	80087b0 <HT_run>
 8007d78:	bb50      	cbnz	r0, 8007dd0 <GW_run+0x74>
 8007d7a:	f896 3168 	ldrb.w	r3, [r6, #360]	; 0x168
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bf14      	ite	ne
 8007d82:	23c8      	movne	r3, #200	; 0xc8
 8007d84:	2364      	moveq	r3, #100	; 0x64
 8007d86:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff fa71 	bl	8007276 <GW_update_hand_buffers>
 8007d94:	b9e0      	cbnz	r0, 8007dd0 <GW_run+0x74>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff fafd 	bl	8007398 <GW_compute_speeds>
 8007d9e:	b9b8      	cbnz	r0, 8007dd0 <GW_run+0x74>
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7ff fbd5 	bl	8007550 <GW_interpret_speeds>
 8007da6:	b998      	cbnz	r0, 8007dd0 <GW_run+0x74>
 8007da8:	69ea      	ldr	r2, [r5, #28]
 8007daa:	4631      	mov	r1, r6
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7ff fdbb 	bl	8007928 <GW_update_prediction>
 8007db2:	b968      	cbnz	r0, 8007dd0 <GW_run+0x74>
 8007db4:	462a      	mov	r2, r5
 8007db6:	4631      	mov	r1, r6
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7ff fe79 	bl	8007ab0 <GW_filter_prediction>
 8007dbe:	b938      	cbnz	r0, 8007dd0 <GW_run+0x74>
 8007dc0:	69ea      	ldr	r2, [r5, #28]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dc8:	f7ff bf98 	b.w	8007cfc <GW_level_control>
 8007dcc:	f06f 0001 	mvn.w	r0, #1
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}

08007dd2 <HT_init>:
 8007dd2:	b410      	push	{r4}
 8007dd4:	b1f0      	cbz	r0, 8007e14 <HT_init+0x42>
 8007dd6:	b1e9      	cbz	r1, 8007e14 <HT_init+0x42>
 8007dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ddc:	22fa      	movs	r2, #250	; 0xfa
 8007dde:	e9c0 3200 	strd	r3, r2, [r0]
 8007de2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8007de6:	2301      	movs	r3, #1
 8007de8:	e9c0 4302 	strd	r4, r3, [r0, #8]
 8007dec:	7603      	strb	r3, [r0, #24]
 8007dee:	2300      	movs	r3, #0
 8007df0:	2464      	movs	r4, #100	; 0x64
 8007df2:	61c3      	str	r3, [r0, #28]
 8007df4:	6203      	str	r3, [r0, #32]
 8007df6:	6243      	str	r3, [r0, #36]	; 0x24
 8007df8:	2300      	movs	r3, #0
 8007dfa:	e9c0 4204 	strd	r4, r2, [r0, #16]
 8007dfe:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
 8007e02:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 8007e06:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
 8007e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e0e:	4608      	mov	r0, r1
 8007e10:	f000 be32 	b.w	8008a78 <SEN_init>
 8007e14:	f06f 0001 	mvn.w	r0, #1
 8007e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HT_set_path_length>:
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	b1a8      	cbz	r0, 8007e50 <HT_set_path_length+0x32>
 8007e24:	2900      	cmp	r1, #0
 8007e26:	db16      	blt.n	8007e56 <HT_set_path_length+0x38>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6001      	str	r1, [r0, #0]
 8007e2c:	6083      	str	r3, [r0, #8]
 8007e2e:	300c      	adds	r0, #12
 8007e30:	f000 fd77 	bl	8008922 <RFBVM_init>
 8007e34:	b970      	cbnz	r0, 8007e54 <HT_set_path_length+0x36>
 8007e36:	6821      	ldr	r1, [r4, #0]
 8007e38:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8007e3c:	f000 fd71 	bl	8008922 <RFBVM_init>
 8007e40:	b940      	cbnz	r0, 8007e54 <HT_set_path_length+0x36>
 8007e42:	6821      	ldr	r1, [r4, #0]
 8007e44:	f204 4034 	addw	r0, r4, #1076	; 0x434
 8007e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4c:	f000 bd69 	b.w	8008922 <RFBVM_init>
 8007e50:	f06f 0001 	mvn.w	r0, #1
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	f06f 0003 	mvn.w	r0, #3
 8007e5a:	e7fb      	b.n	8007e54 <HT_set_path_length+0x36>

08007e5c <HT_set_frequency>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	460d      	mov	r5, r1
 8007e60:	ed2d 8b02 	vpush	{d8}
 8007e64:	4604      	mov	r4, r0
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d044      	beq.n	8007ef4 <HT_set_frequency+0x98>
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	d042      	beq.n	8007ef4 <HT_set_frequency+0x98>
 8007e6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e76:	d942      	bls.n	8007efe <HT_set_frequency+0xa2>
 8007e78:	4608      	mov	r0, r1
 8007e7a:	f000 fe11 	bl	8008aa0 <SEN_set_frequency>
 8007e7e:	bbd8      	cbnz	r0, 8007ef8 <HT_set_frequency+0x9c>
 8007e80:	edd4 7a00 	vldr	s15, [r4]
 8007e84:	edd5 8a03 	vldr	s17, [r5, #12]
 8007e88:	ed9f 8a20 	vldr	s16, [pc, #128]	; 8007f0c <HT_set_frequency+0xb0>
 8007e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e90:	ee27 7a28 	vmul.f32	s14, s14, s17
 8007e94:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007e98:	ee17 0a90 	vmov	r0, s15
 8007e9c:	f7f8 fb00 	bl	80004a0 <__aeabi_f2d>
 8007ea0:	ec41 0b10 	vmov	d0, r0, r1
 8007ea4:	f001 fa70 	bl	8009388 <ceil>
 8007ea8:	ec51 0b10 	vmov	r0, r1, d0
 8007eac:	f7f8 fe00 	bl	8000ab0 <__aeabi_d2iz>
 8007eb0:	edd4 7a01 	vldr	s15, [r4, #4]
 8007eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eb8:	4605      	mov	r5, r0
 8007eba:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8007ebe:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8007ec2:	ee17 0a90 	vmov	r0, s15
 8007ec6:	f7f8 faeb 	bl	80004a0 <__aeabi_f2d>
 8007eca:	ec41 0b10 	vmov	d0, r0, r1
 8007ece:	f001 fa5b 	bl	8009388 <ceil>
 8007ed2:	ec51 0b10 	vmov	r0, r1, d0
 8007ed6:	f7f8 fdeb 	bl	8000ab0 <__aeabi_d2iz>
 8007eda:	4285      	cmp	r5, r0
 8007edc:	db12      	blt.n	8007f04 <HT_set_frequency+0xa8>
 8007ede:	ecbd 8b02 	vpop	{d8}
 8007ee2:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 8007eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef0:	f7ff bf95 	b.w	8007e1e <HT_set_path_length>
 8007ef4:	f06f 0001 	mvn.w	r0, #1
 8007ef8:	ecbd 8b02 	vpop	{d8}
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	f06f 0005 	mvn.w	r0, #5
 8007f02:	e7f9      	b.n	8007ef8 <HT_set_frequency+0x9c>
 8007f04:	f06f 0006 	mvn.w	r0, #6
 8007f08:	e7f6      	b.n	8007ef8 <HT_set_frequency+0x9c>
 8007f0a:	bf00      	nop
 8007f0c:	447a0000 	.word	0x447a0000

08007f10 <HT_struct_init>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	460d      	mov	r5, r1
 8007f14:	4604      	mov	r4, r0
 8007f16:	b178      	cbz	r0, 8007f38 <HT_struct_init+0x28>
 8007f18:	1e4b      	subs	r3, r1, #1
 8007f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8007f1c:	d80f      	bhi.n	8007f3e <HT_struct_init+0x2e>
 8007f1e:	008a      	lsls	r2, r1, #2
 8007f20:	300c      	adds	r0, #12
 8007f22:	2100      	movs	r1, #0
 8007f24:	f000 fff0 	bl	8008f08 <memset>
 8007f28:	462a      	mov	r2, r5
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8007f30:	f000 ffea 	bl	8008f08 <memset>
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	f06f 0001 	mvn.w	r0, #1
 8007f3c:	e7fb      	b.n	8007f36 <HT_struct_init+0x26>
 8007f3e:	f06f 0003 	mvn.w	r0, #3
 8007f42:	e7f8      	b.n	8007f36 <HT_struct_init+0x26>

08007f44 <HT_set_square_resolution>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	460c      	mov	r4, r1
 8007f48:	4605      	mov	r5, r0
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	b168      	cbz	r0, 8007f6a <HT_set_square_resolution+0x26>
 8007f4e:	b164      	cbz	r4, 8007f6a <HT_set_square_resolution+0x26>
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	dd0d      	ble.n	8007f70 <HT_set_square_resolution+0x2c>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fdc7 	bl	8008ae8 <SEN_set_square_resolution>
 8007f5a:	b940      	cbnz	r0, 8007f6e <HT_set_square_resolution+0x2a>
 8007f5c:	68a1      	ldr	r1, [r4, #8]
 8007f5e:	f105 001c 	add.w	r0, r5, #28
 8007f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f66:	f7ff bfd3 	b.w	8007f10 <HT_struct_init>
 8007f6a:	f06f 0001 	mvn.w	r0, #1
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	f06f 0003 	mvn.w	r0, #3
 8007f74:	e7fb      	b.n	8007f6e <HT_set_square_resolution+0x2a>
	...

08007f78 <HT_find_hand>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b08 	vpush	{d8-d11}
 8007f80:	468a      	mov	sl, r1
 8007f82:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8007f86:	4604      	mov	r4, r0
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f000 8334 	beq.w	80085f6 <HT_find_hand+0x67e>
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	f000 8331 	beq.w	80085f6 <HT_find_hand+0x67e>
 8007f94:	688b      	ldr	r3, [r1, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f340 832f 	ble.w	80085fc <HT_find_hand+0x684>
 8007f9e:	f501 7308 	add.w	r3, r1, #544	; 0x220
 8007fa2:	9306      	str	r3, [sp, #24]
 8007fa4:	69cb      	ldr	r3, [r1, #28]
 8007fa6:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8008084 <HT_find_hand+0x10c>
 8007fb0:	edd0 9a07 	vldr	s19, [r0, #28]
 8007fb4:	ed90 aa08 	vldr	s20, [r0, #32]
 8007fb8:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 8007fbc:	ed80 8a07 	vstr	s16, [r0, #28]
 8007fc0:	009e      	lsls	r6, r3, #2
 8007fc2:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8007fc6:	2700      	movs	r7, #0
 8007fc8:	f101 0920 	add.w	r9, r1, #32
 8007fcc:	4632      	mov	r2, r6
 8007fce:	ed80 8a08 	vstr	s16, [r0, #32]
 8007fd2:	ed80 8a09 	vstr	s16, [r0, #36]	; 0x24
 8007fd6:	f8a0 7168 	strh.w	r7, [r0, #360]	; 0x168
 8007fda:	4629      	mov	r1, r5
 8007fdc:	a8e8      	add	r0, sp, #928	; 0x3a0
 8007fde:	f000 ffc5 	bl	8008f6c <memcpy>
 8007fe2:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	9a01      	ldr	r2, [sp, #4]
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
 8007ff0:	f000 ffbc 	bl	8008f6c <memcpy>
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ff8:	f20a 231f 	addw	r3, sl, #543	; 0x21f
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	f8cd 900c 	str.w	r9, [sp, #12]
 8008002:	444e      	add	r6, r9
 8008004:	4618      	mov	r0, r3
 8008006:	464a      	mov	r2, r9
 8008008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8008010:	ecf2 7a01 	vldmia	r2!, {s15}
 8008014:	f1bc 0f00 	cmp.w	ip, #0
 8008018:	bf0c      	ite	eq
 800801a:	eeb0 7a48 	vmoveq.f32	s14, s16
 800801e:	eeb0 7a66 	vmovne.f32	s14, s13
 8008022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008026:	42b2      	cmp	r2, r6
 8008028:	ece5 7a01 	vstmia	r5!, {s15}
 800802c:	f801 7b01 	strb.w	r7, [r1], #1
 8008030:	d1ec      	bne.n	800800c <HT_find_hand+0x94>
 8008032:	4649      	mov	r1, r9
 8008034:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008038:	2200      	movs	r2, #0
 800803a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800803e:	b168      	cbz	r0, 800805c <HT_find_hand+0xe4>
 8008040:	1c70      	adds	r0, r6, #1
 8008042:	d01b      	beq.n	800807c <HT_find_hand+0x104>
 8008044:	eb09 0086 	add.w	r0, r9, r6, lsl #2
 8008048:	ed91 7a00 	vldr	s14, [r1]
 800804c:	edd0 7a00 	vldr	s15, [r0]
 8008050:	eeb4 7a67 	vcmp.f32	s14, s15
 8008054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008058:	bf48      	it	mi
 800805a:	4616      	movmi	r6, r2
 800805c:	9801      	ldr	r0, [sp, #4]
 800805e:	3201      	adds	r2, #1
 8008060:	4290      	cmp	r0, r2
 8008062:	f101 0104 	add.w	r1, r1, #4
 8008066:	d1e8      	bne.n	800803a <HT_find_hand+0xc2>
 8008068:	1c73      	adds	r3, r6, #1
 800806a:	d10d      	bne.n	8008088 <HT_find_hand+0x110>
 800806c:	2500      	movs	r5, #0
 800806e:	4628      	mov	r0, r5
 8008070:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8008074:	ecbd 8b08 	vpop	{d8-d11}
 8008078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	4616      	mov	r6, r2
 800807e:	e7ed      	b.n	800805c <HT_find_hand+0xe4>
 8008080:	43c80000 	.word	0x43c80000
 8008084:	00000000 	.word	0x00000000
 8008088:	4652      	mov	r2, sl
 800808a:	eeb0 1a49 	vmov.f32	s2, s18
 800808e:	eef0 0a4a 	vmov.f32	s1, s20
 8008092:	eeb0 0a69 	vmov.f32	s0, s19
 8008096:	a919      	add	r1, sp, #100	; 0x64
 8008098:	a818      	add	r0, sp, #96	; 0x60
 800809a:	f000 feb5 	bl	8008e08 <SEN_mm_to_col_row>
 800809e:	1cc7      	adds	r7, r0, #3
 80080a0:	4605      	mov	r5, r0
 80080a2:	d02b      	beq.n	80080fc <HT_find_hand+0x184>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d1e2      	bne.n	800806e <HT_find_hand+0xf6>
 80080a8:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 80080ac:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80080b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80080b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080b8:	ee17 2a10 	vmov	r2, s14
 80080bc:	ee17 1a90 	vmov	r1, s15
 80080c0:	4653      	mov	r3, sl
 80080c2:	a816      	add	r0, sp, #88	; 0x58
 80080c4:	f000 fd8c 	bl	8008be0 <SEN_col_row_to_idx>
 80080c8:	4605      	mov	r5, r0
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d1cf      	bne.n	800806e <HT_find_hand+0xf6>
 80080ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080d0:	9a06      	ldr	r2, [sp, #24]
 80080d2:	5cd2      	ldrb	r2, [r2, r3]
 80080d4:	b192      	cbz	r2, 80080fc <HT_find_hand+0x184>
 80080d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80080da:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80080de:	edd2 7a00 	vldr	s15, [r2]
 80080e2:	ed93 7a00 	vldr	s14, [r3]
 80080e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080ea:	edd4 7a04 	vldr	s15, [r4, #16]
 80080ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	d400      	bmi.n	80080fe <HT_find_hand+0x186>
 80080fc:	9616      	str	r6, [sp, #88]	; 0x58
 80080fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008100:	9325      	str	r3, [sp, #148]	; 0x94
 8008102:	18e1      	adds	r1, r4, r3
 8008104:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008108:	2201      	movs	r2, #1
 800810a:	ed93 8a00 	vldr	s16, [r3]
 800810e:	f881 2128 	strb.w	r2, [r1, #296]	; 0x128
 8008112:	2300      	movs	r3, #0
 8008114:	9202      	str	r2, [sp, #8]
 8008116:	9305      	str	r3, [sp, #20]
 8008118:	9a05      	ldr	r2, [sp, #20]
 800811a:	ab25      	add	r3, sp, #148	; 0x94
 800811c:	ae17      	add	r6, sp, #92	; 0x5c
 800811e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008122:	4631      	mov	r1, r6
 8008124:	4653      	mov	r3, sl
 8008126:	462a      	mov	r2, r5
 8008128:	a815      	add	r0, sp, #84	; 0x54
 800812a:	f000 fd19 	bl	8008b60 <SEN_idx_to_col_row>
 800812e:	9000      	str	r0, [sp, #0]
 8008130:	2800      	cmp	r0, #0
 8008132:	f040 8266 	bne.w	8008602 <HT_find_hand+0x68a>
 8008136:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 800813a:	9312      	str	r3, [sp, #72]	; 0x48
 800813c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008140:	4680      	mov	r8, r0
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	9613      	str	r6, [sp, #76]	; 0x4c
 8008146:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800814a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800814c:	9807      	ldr	r0, [sp, #28]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008152:	4653      	mov	r3, sl
 8008154:	4401      	add	r1, r0
 8008156:	445a      	add	r2, fp
 8008158:	a816      	add	r0, sp, #88	; 0x58
 800815a:	f000 fd41 	bl	8008be0 <SEN_col_row_to_idx>
 800815e:	1cc6      	adds	r6, r0, #3
 8008160:	4605      	mov	r5, r0
 8008162:	d018      	beq.n	8008196 <HT_find_hand+0x21e>
 8008164:	2800      	cmp	r0, #0
 8008166:	d182      	bne.n	800806e <HT_find_hand+0xf6>
 8008168:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800816a:	19a3      	adds	r3, r4, r6
 800816c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8008170:	9308      	str	r3, [sp, #32]
 8008172:	b983      	cbnz	r3, 8008196 <HT_find_hand+0x21e>
 8008174:	9b06      	ldr	r3, [sp, #24]
 8008176:	5d9b      	ldrb	r3, [r3, r6]
 8008178:	930a      	str	r3, [sp, #40]	; 0x28
 800817a:	b163      	cbz	r3, 8008196 <HT_find_hand+0x21e>
 800817c:	af1c      	add	r7, sp, #112	; 0x70
 800817e:	4545      	cmp	r5, r8
 8008180:	f040 817a 	bne.w	8008478 <HT_find_hand+0x500>
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	b103      	cbz	r3, 800818a <HT_find_hand+0x212>
 8008188:	9616      	str	r6, [sp, #88]	; 0x58
 800818a:	aa1c      	add	r2, sp, #112	; 0x70
 800818c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800818e:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	f10b 0b01 	add.w	fp, fp, #1
 800819a:	f1bb 0f02 	cmp.w	fp, #2
 800819e:	d1d4      	bne.n	800814a <HT_find_hand+0x1d2>
 80081a0:	9b07      	ldr	r3, [sp, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	d1cd      	bne.n	8008146 <HT_find_hand+0x1ce>
 80081aa:	2500      	movs	r5, #0
 80081ac:	9516      	str	r5, [sp, #88]	; 0x58
 80081ae:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80081b2:	462b      	mov	r3, r5
 80081b4:	2701      	movs	r7, #1
 80081b6:	4545      	cmp	r5, r8
 80081b8:	f040 8194 	bne.w	80084e4 <HT_find_hand+0x56c>
 80081bc:	b103      	cbz	r3, 80081c0 <HT_find_hand+0x248>
 80081be:	9516      	str	r5, [sp, #88]	; 0x58
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	9a05      	ldr	r2, [sp, #20]
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	4293      	cmp	r3, r2
 80081cc:	dca4      	bgt.n	8008118 <HT_find_hand+0x1a0>
 80081ce:	edd4 7a02 	vldr	s15, [r4, #8]
 80081d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081d6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80081da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081de:	f53f af45 	bmi.w	800806c <HT_find_hand+0xf4>
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	9a02      	ldr	r2, [sp, #8]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	f6bf af40 	bge.w	800806c <HT_find_hand+0xf4>
 80081ec:	6963      	ldr	r3, [r4, #20]
 80081ee:	eddd 7a01 	vldr	s15, [sp, #4]
 80081f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008202:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	bfdf      	itttt	le
 800820c:	435b      	mulle	r3, r3
 800820e:	ee07 3a90 	vmovle	s15, r3
 8008212:	ee68 6a08 	vmulle.f32	s13, s16, s16
 8008216:	eef8 7ae7 	vcvtle.f32.s32	s15, s15
 800821a:	bfcf      	iteee	gt
 800821c:	ee36 7a07 	vaddgt.f32	s14, s12, s14
 8008220:	eec6 5aa7 	vdivle.f32	s11, s13, s15
 8008224:	eec6 7a25 	vdivle.f32	s15, s12, s11
 8008228:	ee37 7a87 	vaddle.f32	s14, s15, s14
 800822c:	eddd 7a02 	vldr	s15, [sp, #8]
 8008230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823c:	dd07      	ble.n	800824e <HT_find_hand+0x2d6>
 800823e:	ed5f 7a70 	vldr	s15, [pc, #-448]	; 8008080 <HT_find_hand+0x108>
 8008242:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824a:	f53f af0f 	bmi.w	800806c <HT_find_hand+0xf4>
 800824e:	2301      	movs	r3, #1
 8008250:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
 8008254:	f50d 7825 	add.w	r8, sp, #660	; 0x294
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	9302      	str	r3, [sp, #8]
 800825c:	464f      	mov	r7, r9
 800825e:	46c3      	mov	fp, r8
 8008260:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008264:	9a02      	ldr	r2, [sp, #8]
 8008266:	f812 3b01 	ldrb.w	r3, [r2], #1
 800826a:	9202      	str	r2, [sp, #8]
 800826c:	b1f3      	cbz	r3, 80082ac <HT_find_hand+0x334>
 800826e:	9a00      	ldr	r2, [sp, #0]
 8008270:	ed97 0a00 	vldr	s0, [r7]
 8008274:	ad65      	add	r5, sp, #404	; 0x194
 8008276:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 800827a:	4653      	mov	r3, sl
 800827c:	4659      	mov	r1, fp
 800827e:	f000 fda4 	bl	8008dca <SEN_idx_to_mm>
 8008282:	4605      	mov	r5, r0
 8008284:	2800      	cmp	r0, #0
 8008286:	f47f aef2 	bne.w	800806e <HT_find_hand+0xf6>
 800828a:	1c70      	adds	r0, r6, #1
 800828c:	f000 8167 	beq.w	800855e <HT_find_hand+0x5e6>
 8008290:	aba5      	add	r3, sp, #660	; 0x294
 8008292:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008296:	ed93 7a00 	vldr	s14, [r3]
 800829a:	eddb 7a00 	vldr	s15, [fp]
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80082a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a8:	bf48      	it	mi
 80082aa:	461e      	movmi	r6, r3
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	3301      	adds	r3, #1
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b6:	4293      	cmp	r3, r2
 80082b8:	f10b 0b04 	add.w	fp, fp, #4
 80082bc:	f107 0704 	add.w	r7, r7, #4
 80082c0:	dcd0      	bgt.n	8008264 <HT_find_hand+0x2ec>
 80082c2:	1c71      	adds	r1, r6, #1
 80082c4:	f43f aed2 	beq.w	800806c <HT_find_hand+0xf4>
 80082c8:	4652      	mov	r2, sl
 80082ca:	eeb0 0a48 	vmov.f32	s0, s16
 80082ce:	a91a      	add	r1, sp, #104	; 0x68
 80082d0:	a81b      	add	r0, sp, #108	; 0x6c
 80082d2:	f000 fcc8 	bl	8008c66 <SEN_zone_size>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 8195 	bne.w	8008606 <HT_find_hand+0x68e>
 80082dc:	6963      	ldr	r3, [r4, #20]
 80082de:	435b      	muls	r3, r3
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	ee28 8a08 	vmul.f32	s16, s16, s16
 80082e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ec:	ad65      	add	r5, sp, #404	; 0x194
 80082ee:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80082f2:	ed1f 8a9c 	vldr	s16, [pc, #-624]	; 8008084 <HT_find_hand+0x10c>
 80082f6:	ee17 0a90 	vmov	r0, s15
 80082fa:	f7f8 f8d1 	bl	80004a0 <__aeabi_f2d>
 80082fe:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 8008610 <HT_find_hand+0x698>
 8008302:	ec41 0b11 	vmov	d1, r0, r1
 8008306:	f000 fe87 	bl	8009018 <pow>
 800830a:	49c3      	ldr	r1, [pc, #780]	; (8008618 <HT_find_hand+0x6a0>)
 800830c:	ec53 2b10 	vmov	r2, r3, d0
 8008310:	2000      	movs	r0, #0
 8008312:	f7f7 ff65 	bl	80001e0 <__aeabi_dsub>
 8008316:	460b      	mov	r3, r1
 8008318:	4602      	mov	r2, r0
 800831a:	f7f7 ff63 	bl	80001e4 <__adddf3>
 800831e:	f7f8 fc0f 	bl	8000b40 <__aeabi_d2f>
 8008322:	aba5      	add	r3, sp, #660	; 0x294
 8008324:	ee0a 0a90 	vmov	s21, r0
 8008328:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800832c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800832e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008332:	9209      	str	r2, [sp, #36]	; 0x24
 8008334:	b3db      	cbz	r3, 80083ae <HT_find_hand+0x436>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 800833c:	7e23      	ldrb	r3, [r4, #24]
 800833e:	b1db      	cbz	r3, 8008378 <HT_find_hand+0x400>
 8008340:	ed96 7a00 	vldr	s14, [r6]
 8008344:	edd8 7a00 	vldr	s15, [r8]
 8008348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800834c:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8008350:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8008354:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8008358:	ee17 0a90 	vmov	r0, s15
 800835c:	f7f8 f8a0 	bl	80004a0 <__aeabi_f2d>
 8008360:	ec41 0b10 	vmov	d0, r0, r1
 8008364:	f000 fe10 	bl	8008f88 <exp>
 8008368:	ec51 0b10 	vmov	r0, r1, d0
 800836c:	f7f8 fbe8 	bl	8000b40 <__aeabi_d2f>
 8008370:	ee07 0a90 	vmov	s15, r0
 8008374:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8008378:	ed95 7a00 	vldr	s14, [r5]
 800837c:	edd4 7a07 	vldr	s15, [r4, #28]
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	eee7 7a28 	vfma.f32	s15, s14, s17
 8008386:	ed98 7a00 	vldr	s14, [r8]
 800838a:	edc4 7a07 	vstr	s15, [r4, #28]
 800838e:	edd4 7a08 	vldr	s15, [r4, #32]
 8008392:	eee7 7a28 	vfma.f32	s15, s14, s17
 8008396:	ee38 8a28 	vadd.f32	s16, s16, s17
 800839a:	edc4 7a08 	vstr	s15, [r4, #32]
 800839e:	ed93 7a00 	vldr	s14, [r3]
 80083a2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80083a6:	eee7 7a28 	vfma.f32	s15, s14, s17
 80083aa:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	9a01      	ldr	r2, [sp, #4]
 80083b2:	3304      	adds	r3, #4
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	1b1b      	subs	r3, r3, r4
 80083ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80083be:	429a      	cmp	r2, r3
 80083c0:	f105 0504 	add.w	r5, r5, #4
 80083c4:	f108 0804 	add.w	r8, r8, #4
 80083c8:	dcb0      	bgt.n	800832c <HT_find_hand+0x3b4>
 80083ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	d011      	beq.n	80083f8 <HT_find_hand+0x480>
 80083d4:	ed94 7a07 	vldr	s14, [r4, #28]
 80083d8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80083dc:	ed94 7a08 	vldr	s14, [r4, #32]
 80083e0:	edc4 7a07 	vstr	s15, [r4, #28]
 80083e4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80083e8:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80083ec:	edc4 7a08 	vstr	s15, [r4, #32]
 80083f0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80083f4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 80083f8:	4651      	mov	r1, sl
 80083fa:	eeb0 1a49 	vmov.f32	s2, s18
 80083fe:	eef0 0a4a 	vmov.f32	s1, s20
 8008402:	eeb0 0a69 	vmov.f32	s0, s19
 8008406:	a816      	add	r0, sp, #88	; 0x58
 8008408:	f000 fd5f 	bl	8008eca <SEN_mm_to_idx>
 800840c:	1cc2      	adds	r2, r0, #3
 800840e:	4605      	mov	r5, r0
 8008410:	f000 80e6 	beq.w	80085e0 <HT_find_hand+0x668>
 8008414:	2800      	cmp	r0, #0
 8008416:	f47f ae2a 	bne.w	800806e <HT_find_hand+0xf6>
 800841a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800841c:	18e2      	adds	r2, r4, r3
 800841e:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
 8008422:	2a00      	cmp	r2, #0
 8008424:	f47f ae22 	bne.w	800806c <HT_find_hand+0xf4>
 8008428:	9a06      	ldr	r2, [sp, #24]
 800842a:	5cd2      	ldrb	r2, [r2, r3]
 800842c:	2a00      	cmp	r2, #0
 800842e:	f000 8098 	beq.w	8008562 <HT_find_hand+0x5ea>
 8008432:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	f7f8 f832 	bl	80004a0 <__aeabi_f2d>
 800843c:	4606      	mov	r6, r0
 800843e:	ee19 0a10 	vmov	r0, s18
 8008442:	460f      	mov	r7, r1
 8008444:	f7f8 f82c 	bl	80004a0 <__aeabi_f2d>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4630      	mov	r0, r6
 800844e:	4639      	mov	r1, r7
 8008450:	f7f7 fec6 	bl	80001e0 <__aeabi_dsub>
 8008454:	4606      	mov	r6, r0
 8008456:	6920      	ldr	r0, [r4, #16]
 8008458:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800845c:	f7f8 f80e 	bl	800047c <__aeabi_i2d>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4630      	mov	r0, r6
 8008466:	4639      	mov	r1, r7
 8008468:	f7f8 fae4 	bl	8000a34 <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	d078      	beq.n	8008562 <HT_find_hand+0x5ea>
 8008470:	2301      	movs	r3, #1
 8008472:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
 8008476:	e5f9      	b.n	800806c <HT_find_hand+0xf4>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	930b      	str	r3, [sp, #44]	; 0x2c
 800847c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	f7f8 f80e 	bl	80004a0 <__aeabi_f2d>
 8008484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008486:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800848a:	ec41 0b1b 	vmov	d11, r0, r1
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	f7f8 f806 	bl	80004a0 <__aeabi_f2d>
 8008494:	ec53 2b1b 	vmov	r2, r3, d11
 8008498:	f7f7 fea2 	bl	80001e0 <__aeabi_dsub>
 800849c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084a0:	930d      	str	r3, [sp, #52]	; 0x34
 80084a2:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80084a6:	900c      	str	r0, [sp, #48]	; 0x30
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	f7f7 fff9 	bl	80004a0 <__aeabi_f2d>
 80084ae:	ec53 2b1b 	vmov	r2, r3, d11
 80084b2:	f7f7 fe95 	bl	80001e0 <__aeabi_dsub>
 80084b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084ba:	900e      	str	r0, [sp, #56]	; 0x38
 80084bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80084be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084c6:	f7f8 fad3 	bl	8000a70 <__aeabi_dcmpgt>
 80084ca:	b140      	cbz	r0, 80084de <HT_find_hand+0x566>
 80084cc:	aa1c      	add	r2, sp, #112	; 0x70
 80084ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d0:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
 80084d4:	603e      	str	r6, [r7, #0]
 80084d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d8:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 80084dc:	9308      	str	r3, [sp, #32]
 80084de:	3501      	adds	r5, #1
 80084e0:	3704      	adds	r7, #4
 80084e2:	e64c      	b.n	800817e <HT_find_hand+0x206>
 80084e4:	f85b 6b04 	ldr.w	r6, [fp], #4
 80084e8:	ee18 0a10 	vmov	r0, s16
 80084ec:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80084f0:	edd3 8a00 	vldr	s17, [r3]
 80084f4:	f7f7 ffd4 	bl	80004a0 <__aeabi_f2d>
 80084f8:	ec41 0b1b 	vmov	d11, r0, r1
 80084fc:	ee18 0a90 	vmov	r0, s17
 8008500:	f7f7 ffce 	bl	80004a0 <__aeabi_f2d>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	ec51 0b1b 	vmov	r0, r1, d11
 800850c:	f7f7 fe68 	bl	80001e0 <__aeabi_dsub>
 8008510:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008514:	9010      	str	r0, [sp, #64]	; 0x40
 8008516:	6920      	ldr	r0, [r4, #16]
 8008518:	9311      	str	r3, [sp, #68]	; 0x44
 800851a:	f7f7 ffaf 	bl	800047c <__aeabi_i2d>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008526:	f7f8 fa85 	bl	8000a34 <__aeabi_dcmplt>
 800852a:	b1a8      	cbz	r0, 8008558 <HT_find_hand+0x5e0>
 800852c:	9a02      	ldr	r2, [sp, #8]
 800852e:	19a3      	adds	r3, r4, r6
 8008530:	ee07 2a90 	vmov	s15, r2
 8008534:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800853e:	3301      	adds	r3, #1
 8008540:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008544:	a925      	add	r1, sp, #148	; 0x94
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008550:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
 8008554:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8008558:	3501      	adds	r5, #1
 800855a:	2301      	movs	r3, #1
 800855c:	e62b      	b.n	80081b6 <HT_find_hand+0x23e>
 800855e:	9e00      	ldr	r6, [sp, #0]
 8008560:	e6a4      	b.n	80082ac <HT_find_hand+0x334>
 8008562:	ed94 1a09 	vldr	s2, [r4, #36]	; 0x24
 8008566:	edd4 0a08 	vldr	s1, [r4, #32]
 800856a:	ed94 0a07 	vldr	s0, [r4, #28]
 800856e:	4651      	mov	r1, sl
 8008570:	a816      	add	r0, sp, #88	; 0x58
 8008572:	f000 fcaa 	bl	8008eca <SEN_mm_to_idx>
 8008576:	1cc3      	adds	r3, r0, #3
 8008578:	f43f ad79 	beq.w	800806e <HT_find_hand+0xf6>
 800857c:	2800      	cmp	r0, #0
 800857e:	d142      	bne.n	8008606 <HT_find_hand+0x68e>
 8008580:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008582:	9b06      	ldr	r3, [sp, #24]
 8008584:	5d5b      	ldrb	r3, [r3, r5]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f43f ad70 	beq.w	800806c <HT_find_hand+0xf4>
 800858c:	abe5      	add	r3, sp, #916	; 0x394
 800858e:	442b      	add	r3, r5
 8008590:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f ad69 	bne.w	800806c <HT_find_hand+0xf4>
 800859a:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	f7f7 ff7e 	bl	80004a0 <__aeabi_f2d>
 80085a4:	abe5      	add	r3, sp, #916	; 0x394
 80085a6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80085aa:	4606      	mov	r6, r0
 80085ac:	68d8      	ldr	r0, [r3, #12]
 80085ae:	460f      	mov	r7, r1
 80085b0:	f7f7 ff76 	bl	80004a0 <__aeabi_f2d>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 fe10 	bl	80001e0 <__aeabi_dsub>
 80085c0:	4606      	mov	r6, r0
 80085c2:	6920      	ldr	r0, [r4, #16]
 80085c4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80085c8:	f7f7 ff58 	bl	800047c <__aeabi_i2d>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f8 fa2e 	bl	8000a34 <__aeabi_dcmplt>
 80085d8:	2800      	cmp	r0, #0
 80085da:	f47f af49 	bne.w	8008470 <HT_find_hand+0x4f8>
 80085de:	e545      	b.n	800806c <HT_find_hand+0xf4>
 80085e0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f77f af43 	ble.w	8008470 <HT_find_hand+0x4f8>
 80085ea:	f8d4 2174 	ldr.w	r2, [r4, #372]	; 0x174
 80085ee:	4293      	cmp	r3, r2
 80085f0:	f73f af3e 	bgt.w	8008470 <HT_find_hand+0x4f8>
 80085f4:	e53a      	b.n	800806c <HT_find_hand+0xf4>
 80085f6:	f06f 0501 	mvn.w	r5, #1
 80085fa:	e538      	b.n	800806e <HT_find_hand+0xf6>
 80085fc:	f06f 0503 	mvn.w	r5, #3
 8008600:	e535      	b.n	800806e <HT_find_hand+0xf6>
 8008602:	9d00      	ldr	r5, [sp, #0]
 8008604:	e533      	b.n	800806e <HT_find_hand+0xf6>
 8008606:	4605      	mov	r5, r0
 8008608:	e531      	b.n	800806e <HT_find_hand+0xf6>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	00000000 	.word	0x00000000
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	3ff00000 	.word	0x3ff00000

0800861c <HT_path_interpolate>:
 800861c:	e92d 4f58 	stmdb	sp!, {r3, r4, r6, r8, r9, sl, fp, lr}
 8008620:	4604      	mov	r4, r0
 8008622:	ed2d 8b08 	vpush	{d8-d11}
 8008626:	eeb0 8a40 	vmov.f32	s16, s0
 800862a:	eef0 8a60 	vmov.f32	s17, s1
 800862e:	eeb0 9a41 	vmov.f32	s18, s2
 8008632:	2800      	cmp	r0, #0
 8008634:	d072      	beq.n	800871c <HT_path_interpolate+0x100>
 8008636:	6883      	ldr	r3, [r0, #8]
 8008638:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
 800863c:	f100 0b0c 	add.w	fp, r0, #12
 8008640:	1ac9      	subs	r1, r1, r3
 8008642:	4658      	mov	r0, fp
 8008644:	f000 f9ec 	bl	8008a20 <RFBVM_get_element_value>
 8008648:	68a3      	ldr	r3, [r4, #8]
 800864a:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 800864e:	f504 7908 	add.w	r9, r4, #544	; 0x220
 8008652:	1ac9      	subs	r1, r1, r3
 8008654:	4648      	mov	r0, r9
 8008656:	eef0 9a40 	vmov.f32	s19, s0
 800865a:	f000 f9e1 	bl	8008a20 <RFBVM_get_element_value>
 800865e:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	f204 4a34 	addw	sl, r4, #1076	; 0x434
 8008668:	1ac9      	subs	r1, r1, r3
 800866a:	4650      	mov	r0, sl
 800866c:	eeb0 aa40 	vmov.f32	s20, s0
 8008670:	f000 f9d6 	bl	8008a20 <RFBVM_get_element_value>
 8008674:	2600      	movs	r6, #0
 8008676:	eef0 aa40 	vmov.f32	s21, s0
 800867a:	f04f 0801 	mov.w	r8, #1
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	4543      	cmp	r3, r8
 8008682:	dc08      	bgt.n	8008696 <HT_path_interpolate+0x7a>
 8008684:	2e00      	cmp	r6, #0
 8008686:	bf18      	it	ne
 8008688:	f06f 0607 	mvnne.w	r6, #7
 800868c:	ecbd 8b08 	vpop	{d8-d11}
 8008690:	4630      	mov	r0, r6
 8008692:	e8bd 8f58 	ldmia.w	sp!, {r3, r4, r6, r8, r9, sl, fp, pc}
 8008696:	ee07 8a90 	vmov	s15, r8
 800869a:	ee39 7ac8 	vsub.f32	s14, s19, s16
 800869e:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80086aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ae:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 80086b2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80086b6:	eba1 0108 	sub.w	r1, r1, r8
 80086ba:	4658      	mov	r0, fp
 80086bc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80086c0:	f000 f9ba 	bl	8008a38 <RFBVM_set_element_value>
 80086c4:	edd4 7a02 	vldr	s15, [r4, #8]
 80086c8:	f8d4 142c 	ldr.w	r1, [r4, #1068]	; 0x42c
 80086cc:	ee3a 7a68 	vsub.f32	s14, s20, s17
 80086d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086d4:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80086d8:	eba1 0108 	sub.w	r1, r1, r8
 80086dc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80086e0:	4406      	add	r6, r0
 80086e2:	4648      	mov	r0, r9
 80086e4:	ee30 0a28 	vadd.f32	s0, s0, s17
 80086e8:	f000 f9a6 	bl	8008a38 <RFBVM_set_element_value>
 80086ec:	edd4 7a02 	vldr	s15, [r4, #8]
 80086f0:	f8d4 1640 	ldr.w	r1, [r4, #1600]	; 0x640
 80086f4:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 80086f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086fc:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8008700:	4406      	add	r6, r0
 8008702:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008706:	eba1 0108 	sub.w	r1, r1, r8
 800870a:	4650      	mov	r0, sl
 800870c:	f108 0801 	add.w	r8, r8, #1
 8008710:	ee30 0a09 	vadd.f32	s0, s0, s18
 8008714:	f000 f990 	bl	8008a38 <RFBVM_set_element_value>
 8008718:	4406      	add	r6, r0
 800871a:	e7b0      	b.n	800867e <HT_path_interpolate+0x62>
 800871c:	f06f 0601 	mvn.w	r6, #1
 8008720:	e7b4      	b.n	800868c <HT_path_interpolate+0x70>

08008722 <HT_update_path>:
 8008722:	b510      	push	{r4, lr}
 8008724:	4604      	mov	r4, r0
 8008726:	2800      	cmp	r0, #0
 8008728:	d03f      	beq.n	80087aa <HT_update_path+0x88>
 800872a:	f890 2168 	ldrb.w	r2, [r0, #360]	; 0x168
 800872e:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
 8008732:	b37a      	cbz	r2, 8008794 <HT_update_path+0x72>
 8008734:	2b01      	cmp	r3, #1
 8008736:	dc18      	bgt.n	800876a <HT_update_path+0x48>
 8008738:	2301      	movs	r3, #1
 800873a:	ed94 0a07 	vldr	s0, [r4, #28]
 800873e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 8008742:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8008746:	f000 f903 	bl	8008950 <RFBVM_push>
 800874a:	bb10      	cbnz	r0, 8008792 <HT_update_path+0x70>
 800874c:	ed94 0a08 	vldr	s0, [r4, #32]
 8008750:	f504 7064 	add.w	r0, r4, #912	; 0x390
 8008754:	f000 f8fc 	bl	8008950 <RFBVM_push>
 8008758:	b9d8      	cbnz	r0, 8008792 <HT_update_path+0x70>
 800875a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 800875e:	f204 50a4 	addw	r0, r4, #1444	; 0x5a4
 8008762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008766:	f000 b8f3 	b.w	8008950 <RFBVM_push>
 800876a:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
 800876e:	429a      	cmp	r2, r3
 8008770:	dbe2      	blt.n	8008738 <HT_update_path+0x16>
 8008772:	f890 3169 	ldrb.w	r3, [r0, #361]	; 0x169
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1de      	bne.n	8008738 <HT_update_path+0x16>
 800877a:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 800877e:	edd0 0a08 	vldr	s1, [r0, #32]
 8008782:	ed90 0a07 	vldr	s0, [r0, #28]
 8008786:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800878a:	f7ff ff47 	bl	800861c <HT_path_interpolate>
 800878e:	2800      	cmp	r0, #0
 8008790:	d0d2      	beq.n	8008738 <HT_update_path+0x16>
 8008792:	bd10      	pop	{r4, pc}
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd06      	ble.n	80087a6 <HT_update_path+0x84>
 8008798:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	2a00      	cmp	r2, #0
 80087a0:	dd01      	ble.n	80087a6 <HT_update_path+0x84>
 80087a2:	3301      	adds	r3, #1
 80087a4:	e7c9      	b.n	800873a <HT_update_path+0x18>
 80087a6:	2300      	movs	r3, #0
 80087a8:	e7c7      	b.n	800873a <HT_update_path+0x18>
 80087aa:	f06f 0001 	mvn.w	r0, #1
 80087ae:	e7f0      	b.n	8008792 <HT_update_path+0x70>

080087b0 <HT_run>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4604      	mov	r4, r0
 80087b4:	b140      	cbz	r0, 80087c8 <HT_run+0x18>
 80087b6:	b139      	cbz	r1, 80087c8 <HT_run+0x18>
 80087b8:	f7ff fbde 	bl	8007f78 <HT_find_hand>
 80087bc:	b930      	cbnz	r0, 80087cc <HT_run+0x1c>
 80087be:	4620      	mov	r0, r4
 80087c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c4:	f7ff bfad 	b.w	8008722 <HT_update_path>
 80087c8:	f06f 0001 	mvn.w	r0, #1
 80087cc:	bd10      	pop	{r4, pc}
	...

080087d0 <taylor_atan>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	ee10 0a10 	vmov	r0, s0
 80087d6:	ed2d 8b02 	vpush	{d8}
 80087da:	eeb0 8a40 	vmov.f32	s16, s0
 80087de:	f7f7 fe5f 	bl	80004a0 <__aeabi_f2d>
 80087e2:	ee68 7a08 	vmul.f32	s15, s16, s16
 80087e6:	4606      	mov	r6, r0
 80087e8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80087ec:	460f      	mov	r7, r1
 80087ee:	ee17 0a90 	vmov	r0, s15
 80087f2:	f7f7 fe55 	bl	80004a0 <__aeabi_f2d>
 80087f6:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 80087fa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	4604      	mov	r4, r0
 8008804:	460d      	mov	r5, r1
 8008806:	db23      	blt.n	8008850 <taylor_atan+0x80>
 8008808:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800880c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008814:	d81c      	bhi.n	8008850 <taylor_atan+0x80>
 8008816:	a322      	add	r3, pc, #136	; (adr r3, 80088a0 <taylor_atan+0xd0>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f7f7 fe96 	bl	8000550 <__aeabi_dmul>
 8008824:	a320      	add	r3, pc, #128	; (adr r3, 80088a8 <taylor_atan+0xd8>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	f7f7 fe8d 	bl	8000550 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f7 fccf 	bl	80001e0 <__aeabi_dsub>
 8008842:	f7f8 f97d 	bl	8000b40 <__aeabi_d2f>
 8008846:	ecbd 8b02 	vpop	{d8}
 800884a:	ee00 0a10 	vmov	s0, r0
 800884e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008850:	4632      	mov	r2, r6
 8008852:	463b      	mov	r3, r7
 8008854:	a112      	add	r1, pc, #72	; (adr r1, 80088a0 <taylor_atan+0xd0>)
 8008856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800885a:	f7f7 ffa3 	bl	80007a4 <__aeabi_ddiv>
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	4606      	mov	r6, r0
 8008864:	460f      	mov	r7, r1
 8008866:	a110      	add	r1, pc, #64	; (adr r1, 80088a8 <taylor_atan+0xd8>)
 8008868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886c:	f7f7 ff9a 	bl	80007a4 <__aeabi_ddiv>
 8008870:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	d809      	bhi.n	8008896 <taylor_atan+0xc6>
 8008882:	a10b      	add	r1, pc, #44	; (adr r1, 80088b0 <taylor_atan+0xe0>)
 8008884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008888:	f7f7 fcaa 	bl	80001e0 <__aeabi_dsub>
 800888c:	4622      	mov	r2, r4
 800888e:	462b      	mov	r3, r5
 8008890:	f7f7 fca8 	bl	80001e4 <__adddf3>
 8008894:	e7d5      	b.n	8008842 <taylor_atan+0x72>
 8008896:	a108      	add	r1, pc, #32	; (adr r1, 80088b8 <taylor_atan+0xe8>)
 8008898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889c:	e7f4      	b.n	8008888 <taylor_atan+0xb8>
 800889e:	bf00      	nop
 80088a0:	9ad42c3d 	.word	0x9ad42c3d
 80088a4:	3fef1de6 	.word	0x3fef1de6
 80088a8:	e00d1b71 	.word	0xe00d1b71
 80088ac:	3fc8902d 	.word	0x3fc8902d
 80088b0:	00000000 	.word	0x00000000
 80088b4:	bff921fb 	.word	0xbff921fb
 80088b8:	00000000 	.word	0x00000000
 80088bc:	3ff921fb 	.word	0x3ff921fb

080088c0 <taylor_sqrt>:
 80088c0:	2301      	movs	r3, #1
 80088c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80088ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80088ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d2:	dc22      	bgt.n	800891a <taylor_sqrt+0x5a>
 80088d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088e0:	eef0 6a47 	vmov.f32	s13, s14
 80088e4:	ee07 2a90 	vmov	s15, r2
 80088e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ec:	1cd1      	adds	r1, r2, #3
 80088ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80088f2:	ee06 1a10 	vmov	s12, r1
 80088f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80088fe:	3202      	adds	r2, #2
 8008900:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8008904:	2a09      	cmp	r2, #9
 8008906:	ee76 6a87 	vadd.f32	s13, s13, s14
 800890a:	d1eb      	bne.n	80088e4 <taylor_sqrt+0x24>
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8008914:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008918:	4770      	bx	lr
 800891a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	e7d3      	b.n	80088ca <taylor_sqrt+0xa>

08008922 <RFBVM_init>:
 8008922:	2901      	cmp	r1, #1
 8008924:	460b      	mov	r3, r1
 8008926:	bfb8      	it	lt
 8008928:	2301      	movlt	r3, #1
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	bfa8      	it	ge
 800892e:	2380      	movge	r3, #128	; 0x80
 8008930:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008934:	e9c0 2080 	strd	r2, r0, [r0, #512]	; 0x200
 8008938:	2200      	movs	r2, #0
 800893a:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800893e:	f8c0 0208 	str.w	r0, [r0, #520]	; 0x208
 8008942:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 8008946:	1a58      	subs	r0, r3, r1
 8008948:	bf18      	it	ne
 800894a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800894e:	4770      	bx	lr

08008950 <RFBVM_push>:
 8008950:	b1f0      	cbz	r0, 8008990 <RFBVM_push+0x40>
 8008952:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8008956:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 800895a:	eca3 0a01 	vstmia	r3!, {s0}
 800895e:	4293      	cmp	r3, r2
 8008960:	bf14      	ite	ne
 8008962:	4619      	movne	r1, r3
 8008964:	4601      	moveq	r1, r0
 8008966:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
 800896a:	e9d0 3183 	ldrd	r3, r1, [r0, #524]	; 0x20c
 800896e:	428b      	cmp	r3, r1
 8008970:	d10a      	bne.n	8008988 <RFBVM_push+0x38>
 8008972:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008976:	3304      	adds	r3, #4
 8008978:	429a      	cmp	r2, r3
 800897a:	bf0c      	ite	eq
 800897c:	f8c0 0204 	streq.w	r0, [r0, #516]	; 0x204
 8008980:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 8008984:	2000      	movs	r0, #0
 8008986:	4770      	bx	lr
 8008988:	3301      	adds	r3, #1
 800898a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
 800898e:	e7f9      	b.n	8008984 <RFBVM_push+0x34>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008994:	4770      	bx	lr
	...

08008998 <RFBVM_sum>:
 8008998:	b530      	push	{r4, r5, lr}
 800899a:	f8d0 1204 	ldr.w	r1, [r0, #516]	; 0x204
 800899e:	f8d0 420c 	ldr.w	r4, [r0, #524]	; 0x20c
 80089a2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80089c8 <RFBVM_sum+0x30>
 80089a6:	2200      	movs	r2, #0
 80089a8:	4294      	cmp	r4, r2
 80089aa:	dc00      	bgt.n	80089ae <RFBVM_sum+0x16>
 80089ac:	bd30      	pop	{r4, r5, pc}
 80089ae:	460b      	mov	r3, r1
 80089b0:	ecf3 7a01 	vldmia	r3!, {s15}
 80089b4:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 80089b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089bc:	3201      	adds	r2, #1
 80089be:	429d      	cmp	r5, r3
 80089c0:	bf14      	ite	ne
 80089c2:	4619      	movne	r1, r3
 80089c4:	4601      	moveq	r1, r0
 80089c6:	e7ef      	b.n	80089a8 <RFBVM_sum+0x10>
 80089c8:	00000000 	.word	0x00000000

080089cc <RFBVM_mean>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	f8d0 420c 	ldr.w	r4, [r0, #524]	; 0x20c
 80089d2:	b154      	cbz	r4, 80089ea <RFBVM_mean+0x1e>
 80089d4:	f7ff ffe0 	bl	8008998 <RFBVM_sum>
 80089d8:	ee07 4a90 	vmov	s15, r4
 80089dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089e0:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80089e4:	eeb0 0a47 	vmov.f32	s0, s14
 80089e8:	bd10      	pop	{r4, pc}
 80089ea:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80089f0 <RFBVM_mean+0x24>
 80089ee:	e7f9      	b.n	80089e4 <RFBVM_mean+0x18>
 80089f0:	00000000 	.word	0x00000000

080089f4 <RFBVM_get_element_pointer>:
 80089f4:	2900      	cmp	r1, #0
 80089f6:	4602      	mov	r2, r0
 80089f8:	db10      	blt.n	8008a1c <RFBVM_get_element_pointer+0x28>
 80089fa:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
 80089fe:	428b      	cmp	r3, r1
 8008a00:	dd0c      	ble.n	8008a1c <RFBVM_get_element_pointer+0x28>
 8008a02:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008a06:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8008a0a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8008a0e:	4298      	cmp	r0, r3
 8008a10:	d305      	bcc.n	8008a1e <RFBVM_get_element_pointer+0x2a>
 8008a12:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8008a16:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8008a1a:	4770      	bx	lr
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4770      	bx	lr

08008a20 <RFBVM_get_element_value>:
 8008a20:	b508      	push	{r3, lr}
 8008a22:	f7ff ffe7 	bl	80089f4 <RFBVM_get_element_pointer>
 8008a26:	b110      	cbz	r0, 8008a2e <RFBVM_get_element_value+0xe>
 8008a28:	ed90 0a00 	vldr	s0, [r0]
 8008a2c:	bd08      	pop	{r3, pc}
 8008a2e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a34 <RFBVM_get_element_value+0x14>
 8008a32:	e7fb      	b.n	8008a2c <RFBVM_get_element_value+0xc>
 8008a34:	00000000 	.word	0x00000000

08008a38 <RFBVM_set_element_value>:
 8008a38:	b508      	push	{r3, lr}
 8008a3a:	f7ff ffdb 	bl	80089f4 <RFBVM_get_element_pointer>
 8008a3e:	b118      	cbz	r0, 8008a48 <RFBVM_set_element_value+0x10>
 8008a40:	ed80 0a00 	vstr	s0, [r0]
 8008a44:	2000      	movs	r0, #0
 8008a46:	bd08      	pop	{r3, pc}
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a4c:	e7fb      	b.n	8008a46 <RFBVM_set_element_value+0xe>

08008a4e <RFBVM_fill>:
 8008a4e:	b570      	push	{r4, r5, r6, lr}
 8008a50:	2400      	movs	r4, #0
 8008a52:	4606      	mov	r6, r0
 8008a54:	4625      	mov	r5, r4
 8008a56:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
 8008a5a:	42ab      	cmp	r3, r5
 8008a5c:	dc04      	bgt.n	8008a68 <RFBVM_fill+0x1a>
 8008a5e:	1e20      	subs	r0, r4, #0
 8008a60:	bf18      	it	ne
 8008a62:	2001      	movne	r0, #1
 8008a64:	4240      	negs	r0, r0
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ffe4 	bl	8008a38 <RFBVM_set_element_value>
 8008a70:	3501      	adds	r5, #1
 8008a72:	4404      	add	r4, r0
 8008a74:	e7ef      	b.n	8008a56 <RFBVM_fill+0x8>
	...

08008a78 <SEN_init>:
 8008a78:	b160      	cbz	r0, 8008a94 <SEN_init+0x1c>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	60c2      	str	r2, [r0, #12]
 8008a7e:	4a07      	ldr	r2, [pc, #28]	; (8008a9c <SEN_init+0x24>)
 8008a80:	6102      	str	r2, [r0, #16]
 8008a82:	2300      	movs	r3, #0
 8008a84:	6142      	str	r2, [r0, #20]
 8008a86:	2201      	movs	r2, #1
 8008a88:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8c:	6083      	str	r3, [r0, #8]
 8008a8e:	7602      	strb	r2, [r0, #24]
 8008a90:	4618      	mov	r0, r3
 8008a92:	4770      	bx	lr
 8008a94:	f06f 0001 	mvn.w	r0, #1
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	3f402037 	.word	0x3f402037

08008aa0 <SEN_set_frequency>:
 8008aa0:	b140      	cbz	r0, 8008ab4 <SEN_set_frequency+0x14>
 8008aa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aaa:	d906      	bls.n	8008aba <SEN_set_frequency+0x1a>
 8008aac:	ed80 0a03 	vstr	s0, [r0, #12]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4770      	bx	lr
 8008ab4:	f06f 0001 	mvn.w	r0, #1
 8008ab8:	4770      	bx	lr
 8008aba:	f06f 0005 	mvn.w	r0, #5
 8008abe:	4770      	bx	lr

08008ac0 <SEN_set_resolution>:
 8008ac0:	b160      	cbz	r0, 8008adc <SEN_set_resolution+0x1c>
 8008ac2:	2900      	cmp	r1, #0
 8008ac4:	dd0d      	ble.n	8008ae2 <SEN_set_resolution+0x22>
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	dd0b      	ble.n	8008ae2 <SEN_set_resolution+0x22>
 8008aca:	fb02 f301 	mul.w	r3, r2, r1
 8008ace:	2b40      	cmp	r3, #64	; 0x40
 8008ad0:	dc07      	bgt.n	8008ae2 <SEN_set_resolution+0x22>
 8008ad2:	e9c0 1200 	strd	r1, r2, [r0]
 8008ad6:	6083      	str	r3, [r0, #8]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	4770      	bx	lr
 8008adc:	f06f 0001 	mvn.w	r0, #1
 8008ae0:	4770      	bx	lr
 8008ae2:	f06f 0003 	mvn.w	r0, #3
 8008ae6:	4770      	bx	lr

08008ae8 <SEN_set_square_resolution>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	4605      	mov	r5, r0
 8008aee:	b1b8      	cbz	r0, 8008b20 <SEN_set_square_resolution+0x38>
 8008af0:	2900      	cmp	r1, #0
 8008af2:	dd18      	ble.n	8008b26 <SEN_set_square_resolution+0x3e>
 8008af4:	4608      	mov	r0, r1
 8008af6:	f7f7 fcc1 	bl	800047c <__aeabi_i2d>
 8008afa:	ec41 0b10 	vmov	d0, r0, r1
 8008afe:	f000 fafb 	bl	80090f8 <sqrt>
 8008b02:	ec51 0b10 	vmov	r0, r1, d0
 8008b06:	f7f7 ffd3 	bl	8000ab0 <__aeabi_d2iz>
 8008b0a:	fb00 f300 	mul.w	r3, r0, r0
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	4602      	mov	r2, r0
 8008b12:	d10b      	bne.n	8008b2c <SEN_set_square_resolution+0x44>
 8008b14:	4601      	mov	r1, r0
 8008b16:	4628      	mov	r0, r5
 8008b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b1c:	f7ff bfd0 	b.w	8008ac0 <SEN_set_resolution>
 8008b20:	f06f 0001 	mvn.w	r0, #1
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	f06f 0003 	mvn.w	r0, #3
 8008b2a:	e7fb      	b.n	8008b24 <SEN_set_square_resolution+0x3c>
 8008b2c:	f06f 0004 	mvn.w	r0, #4
 8008b30:	e7f8      	b.n	8008b24 <SEN_set_square_resolution+0x3c>

08008b32 <SEN_set_data>:
 8008b32:	b178      	cbz	r0, 8008b54 <SEN_set_data+0x22>
 8008b34:	2900      	cmp	r1, #0
 8008b36:	db10      	blt.n	8008b5a <SEN_set_data+0x28>
 8008b38:	6883      	ldr	r3, [r0, #8]
 8008b3a:	428b      	cmp	r3, r1
 8008b3c:	dd0d      	ble.n	8008b5a <SEN_set_data+0x28>
 8008b3e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008b42:	4408      	add	r0, r1
 8008b44:	ed83 0a08 	vstr	s0, [r3, #32]
 8008b48:	edc3 0a48 	vstr	s1, [r3, #288]	; 0x120
 8008b4c:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
 8008b50:	2000      	movs	r0, #0
 8008b52:	4770      	bx	lr
 8008b54:	f06f 0001 	mvn.w	r0, #1
 8008b58:	4770      	bx	lr
 8008b5a:	f06f 0002 	mvn.w	r0, #2
 8008b5e:	4770      	bx	lr

08008b60 <SEN_idx_to_col_row>:
 8008b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b62:	b38b      	cbz	r3, 8008bc8 <SEN_idx_to_col_row+0x68>
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	db32      	blt.n	8008bce <SEN_idx_to_col_row+0x6e>
 8008b68:	689c      	ldr	r4, [r3, #8]
 8008b6a:	4294      	cmp	r4, r2
 8008b6c:	dd2f      	ble.n	8008bce <SEN_idx_to_col_row+0x6e>
 8008b6e:	681d      	ldr	r5, [r3, #0]
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	dd2f      	ble.n	8008bd4 <SEN_idx_to_col_row+0x74>
 8008b74:	fb92 f6f5 	sdiv	r6, r2, r5
 8008b78:	7e1f      	ldrb	r7, [r3, #24]
 8008b7a:	fb05 2216 	mls	r2, r5, r6, r2
 8008b7e:	4634      	mov	r4, r6
 8008b80:	2f07      	cmp	r7, #7
 8008b82:	d82a      	bhi.n	8008bda <SEN_idx_to_col_row+0x7a>
 8008b84:	e8df f007 	tbb	[pc, r7]
 8008b88:	090d070f 	.word	0x090d070f
 8008b8c:	1b041613 	.word	0x1b041613
 8008b90:	4614      	mov	r4, r2
 8008b92:	4632      	mov	r2, r6
 8008b94:	e007      	b.n	8008ba6 <SEN_idx_to_col_row+0x46>
 8008b96:	3d01      	subs	r5, #1
 8008b98:	1aaa      	subs	r2, r5, r2
 8008b9a:	685c      	ldr	r4, [r3, #4]
 8008b9c:	3c01      	subs	r4, #1
 8008b9e:	1ba4      	subs	r4, r4, r6
 8008ba0:	e001      	b.n	8008ba6 <SEN_idx_to_col_row+0x46>
 8008ba2:	3d01      	subs	r5, #1
 8008ba4:	1aaa      	subs	r2, r5, r2
 8008ba6:	6002      	str	r2, [r0, #0]
 8008ba8:	600c      	str	r4, [r1, #0]
 8008baa:	2000      	movs	r0, #0
 8008bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bae:	1e6c      	subs	r4, r5, #1
 8008bb0:	1aa4      	subs	r4, r4, r2
 8008bb2:	e7ee      	b.n	8008b92 <SEN_idx_to_col_row+0x32>
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	1b9a      	subs	r2, r3, r6
 8008bbc:	e7f3      	b.n	8008ba6 <SEN_idx_to_col_row+0x46>
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	1e6c      	subs	r4, r5, #1
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	1aa4      	subs	r4, r4, r2
 8008bc6:	e7f8      	b.n	8008bba <SEN_idx_to_col_row+0x5a>
 8008bc8:	f06f 0001 	mvn.w	r0, #1
 8008bcc:	e7ee      	b.n	8008bac <SEN_idx_to_col_row+0x4c>
 8008bce:	f06f 0002 	mvn.w	r0, #2
 8008bd2:	e7eb      	b.n	8008bac <SEN_idx_to_col_row+0x4c>
 8008bd4:	f06f 0003 	mvn.w	r0, #3
 8008bd8:	e7e8      	b.n	8008bac <SEN_idx_to_col_row+0x4c>
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bde:	e7e5      	b.n	8008bac <SEN_idx_to_col_row+0x4c>

08008be0 <SEN_col_row_to_idx>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d036      	beq.n	8008c54 <SEN_col_row_to_idx+0x74>
 8008be6:	7e1c      	ldrb	r4, [r3, #24]
 8008be8:	2c07      	cmp	r4, #7
 8008bea:	d836      	bhi.n	8008c5a <SEN_col_row_to_idx+0x7a>
 8008bec:	e8df f004 	tbb	[pc, r4]
 8008bf0:	0b0f0812 	.word	0x0b0f0812
 8008bf4:	2b042721 	.word	0x2b042721
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	e009      	b.n	8008c14 <SEN_col_row_to_idx+0x34>
 8008c00:	681c      	ldr	r4, [r3, #0]
 8008c02:	3c01      	subs	r4, #1
 8008c04:	1a61      	subs	r1, r4, r1
 8008c06:	685c      	ldr	r4, [r3, #4]
 8008c08:	3c01      	subs	r4, #1
 8008c0a:	1aa2      	subs	r2, r4, r2
 8008c0c:	e002      	b.n	8008c14 <SEN_col_row_to_idx+0x34>
 8008c0e:	681c      	ldr	r4, [r3, #0]
 8008c10:	3c01      	subs	r4, #1
 8008c12:	1a61      	subs	r1, r4, r1
 8008c14:	2900      	cmp	r1, #0
 8008c16:	db23      	blt.n	8008c60 <SEN_col_row_to_idx+0x80>
 8008c18:	681c      	ldr	r4, [r3, #0]
 8008c1a:	428c      	cmp	r4, r1
 8008c1c:	dd20      	ble.n	8008c60 <SEN_col_row_to_idx+0x80>
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	db1e      	blt.n	8008c60 <SEN_col_row_to_idx+0x80>
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	dd1b      	ble.n	8008c60 <SEN_col_row_to_idx+0x80>
 8008c28:	fb02 1104 	mla	r1, r2, r4, r1
 8008c2c:	6001      	str	r1, [r0, #0]
 8008c2e:	2000      	movs	r0, #0
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	681c      	ldr	r4, [r3, #0]
 8008c34:	3c01      	subs	r4, #1
 8008c36:	1aa4      	subs	r4, r4, r2
 8008c38:	460a      	mov	r2, r1
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	e7ea      	b.n	8008c14 <SEN_col_row_to_idx+0x34>
 8008c3e:	685c      	ldr	r4, [r3, #4]
 8008c40:	3c01      	subs	r4, #1
 8008c42:	1a64      	subs	r4, r4, r1
 8008c44:	e7d9      	b.n	8008bfa <SEN_col_row_to_idx+0x1a>
 8008c46:	681c      	ldr	r4, [r3, #0]
 8008c48:	3c01      	subs	r4, #1
 8008c4a:	1aa4      	subs	r4, r4, r2
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	3a01      	subs	r2, #1
 8008c50:	1a52      	subs	r2, r2, r1
 8008c52:	e7f2      	b.n	8008c3a <SEN_col_row_to_idx+0x5a>
 8008c54:	f06f 0001 	mvn.w	r0, #1
 8008c58:	e7ea      	b.n	8008c30 <SEN_col_row_to_idx+0x50>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c5e:	e7e7      	b.n	8008c30 <SEN_col_row_to_idx+0x50>
 8008c60:	f06f 0002 	mvn.w	r0, #2
 8008c64:	e7e4      	b.n	8008c30 <SEN_col_row_to_idx+0x50>

08008c66 <SEN_zone_size>:
 8008c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	ed2d 8b04 	vpush	{d8-d9}
 8008c70:	460f      	mov	r7, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d04e      	beq.n	8008d16 <SEN_zone_size+0xb0>
 8008c78:	6816      	ldr	r6, [r2, #0]
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	dd4e      	ble.n	8008d1c <SEN_zone_size+0xb6>
 8008c7e:	6855      	ldr	r5, [r2, #4]
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	dd4b      	ble.n	8008d1c <SEN_zone_size+0xb6>
 8008c84:	edd2 7a04 	vldr	s15, [r2, #16]
 8008c88:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008c8c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008c90:	ee30 8a00 	vadd.f32	s16, s0, s0
 8008c94:	ee17 0a90 	vmov	r0, s15
 8008c98:	f7f7 fc02 	bl	80004a0 <__aeabi_f2d>
 8008c9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ca0:	f000 fa56 	bl	8009150 <tan>
 8008ca4:	ec51 0b10 	vmov	r0, r1, d0
 8008ca8:	f7f7 ff4a 	bl	8000b40 <__aeabi_d2f>
 8008cac:	ee07 0a90 	vmov	s15, r0
 8008cb0:	ee27 7a88 	vmul.f32	s14, s15, s16
 8008cb4:	ee07 6a90 	vmov	s15, r6
 8008cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cbc:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8008cc0:	edd4 7a05 	vldr	s15, [r4, #20]
 8008cc4:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008cc8:	ee17 0a90 	vmov	r0, s15
 8008ccc:	f7f7 fbe8 	bl	80004a0 <__aeabi_f2d>
 8008cd0:	ec41 0b10 	vmov	d0, r0, r1
 8008cd4:	f000 fa3c 	bl	8009150 <tan>
 8008cd8:	ec51 0b10 	vmov	r0, r1, d0
 8008cdc:	f7f7 ff30 	bl	8000b40 <__aeabi_d2f>
 8008ce0:	ee07 0a90 	vmov	s15, r0
 8008ce4:	ee27 8a88 	vmul.f32	s16, s15, s16
 8008ce8:	ee07 5a90 	vmov	s15, r5
 8008cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf0:	7e23      	ldrb	r3, [r4, #24]
 8008cf2:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	f04f 0000 	mov.w	r0, #0
 8008cfc:	bf95      	itete	ls
 8008cfe:	edc8 8a00 	vstrls	s17, [r8]
 8008d02:	ed88 7a00 	vstrhi	s14, [r8]
 8008d06:	ed87 7a00 	vstrls	s14, [r7]
 8008d0a:	edc7 8a00 	vstrhi	s17, [r7]
 8008d0e:	ecbd 8b04 	vpop	{d8-d9}
 8008d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d16:	f06f 0001 	mvn.w	r0, #1
 8008d1a:	e7f8      	b.n	8008d0e <SEN_zone_size+0xa8>
 8008d1c:	f06f 0003 	mvn.w	r0, #3
 8008d20:	e7f5      	b.n	8008d0e <SEN_zone_size+0xa8>

08008d22 <SEN_actual_res>:
 8008d22:	b162      	cbz	r2, 8008d3e <SEN_actual_res+0x1c>
 8008d24:	7e13      	ldrb	r3, [r2, #24]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	bf95      	itete	ls
 8008d2a:	6813      	ldrls	r3, [r2, #0]
 8008d2c:	6853      	ldrhi	r3, [r2, #4]
 8008d2e:	6003      	strls	r3, [r0, #0]
 8008d30:	6003      	strhi	r3, [r0, #0]
 8008d32:	bf94      	ite	ls
 8008d34:	6853      	ldrls	r3, [r2, #4]
 8008d36:	6813      	ldrhi	r3, [r2, #0]
 8008d38:	600b      	str	r3, [r1, #0]
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	4770      	bx	lr
 8008d3e:	f06f 0001 	mvn.w	r0, #1
 8008d42:	4770      	bx	lr

08008d44 <SEN_col_row_to_mm>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	ed2d 8b02 	vpush	{d8}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	ee08 2a90 	vmov	s17, r2
 8008d50:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008d52:	ee08 3a10 	vmov	s16, r3
 8008d56:	4605      	mov	r5, r0
 8008d58:	460c      	mov	r4, r1
 8008d5a:	b39e      	cbz	r6, 8008dc4 <SEN_col_row_to_mm+0x80>
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	a901      	add	r1, sp, #4
 8008d60:	4668      	mov	r0, sp
 8008d62:	f7ff ff80 	bl	8008c66 <SEN_zone_size>
 8008d66:	bb48      	cbnz	r0, 8008dbc <SEN_col_row_to_mm+0x78>
 8008d68:	4632      	mov	r2, r6
 8008d6a:	a903      	add	r1, sp, #12
 8008d6c:	a802      	add	r0, sp, #8
 8008d6e:	f7ff ffd8 	bl	8008d22 <SEN_actual_res>
 8008d72:	bb18      	cbnz	r0, 8008dbc <SEN_col_row_to_mm+0x78>
 8008d74:	eddd 7a02 	vldr	s15, [sp, #8]
 8008d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d84:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8008d88:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008d8c:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8008d90:	eddd 7a00 	vldr	s15, [sp]
 8008d94:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8008d98:	eddd 7a03 	vldr	s15, [sp, #12]
 8008d9c:	edc5 8a00 	vstr	s17, [r5]
 8008da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008da4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8008da8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dac:	eddd 7a01 	vldr	s15, [sp, #4]
 8008db0:	eea7 8a26 	vfma.f32	s16, s14, s13
 8008db4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008db8:	ed84 8a00 	vstr	s16, [r4]
 8008dbc:	b004      	add	sp, #16
 8008dbe:	ecbd 8b02 	vpop	{d8}
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f06f 0001 	mvn.w	r0, #1
 8008dc8:	e7f8      	b.n	8008dbc <SEN_col_row_to_mm+0x78>

08008dca <SEN_idx_to_mm>:
 8008dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dcc:	4606      	mov	r6, r0
 8008dce:	b085      	sub	sp, #20
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	461c      	mov	r4, r3
 8008dd4:	b193      	cbz	r3, 8008dfc <SEN_idx_to_mm+0x32>
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	db13      	blt.n	8008e02 <SEN_idx_to_mm+0x38>
 8008dda:	6899      	ldr	r1, [r3, #8]
 8008ddc:	4291      	cmp	r1, r2
 8008dde:	dd10      	ble.n	8008e02 <SEN_idx_to_mm+0x38>
 8008de0:	a903      	add	r1, sp, #12
 8008de2:	a802      	add	r0, sp, #8
 8008de4:	f7ff febc 	bl	8008b60 <SEN_idx_to_col_row>
 8008de8:	b930      	cbnz	r0, 8008df8 <SEN_idx_to_mm+0x2e>
 8008dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dee:	9400      	str	r4, [sp, #0]
 8008df0:	4639      	mov	r1, r7
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ffa6 	bl	8008d44 <SEN_col_row_to_mm>
 8008df8:	b005      	add	sp, #20
 8008dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfc:	f06f 0001 	mvn.w	r0, #1
 8008e00:	e7fa      	b.n	8008df8 <SEN_idx_to_mm+0x2e>
 8008e02:	f06f 0002 	mvn.w	r0, #2
 8008e06:	e7f7      	b.n	8008df8 <SEN_idx_to_mm+0x2e>

08008e08 <SEN_mm_to_col_row>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	ed2d 8b02 	vpush	{d8}
 8008e0e:	4606      	mov	r6, r0
 8008e10:	eef0 8a40 	vmov.f32	s17, s0
 8008e14:	b084      	sub	sp, #16
 8008e16:	460d      	mov	r5, r1
 8008e18:	eeb0 8a60 	vmov.f32	s16, s1
 8008e1c:	eeb0 0a41 	vmov.f32	s0, s2
 8008e20:	4614      	mov	r4, r2
 8008e22:	2a00      	cmp	r2, #0
 8008e24:	d04e      	beq.n	8008ec4 <SEN_mm_to_col_row+0xbc>
 8008e26:	a901      	add	r1, sp, #4
 8008e28:	4668      	mov	r0, sp
 8008e2a:	f7ff ff1c 	bl	8008c66 <SEN_zone_size>
 8008e2e:	b940      	cbnz	r0, 8008e42 <SEN_mm_to_col_row+0x3a>
 8008e30:	eddd 7a00 	vldr	s15, [sp]
 8008e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	d805      	bhi.n	8008e4a <SEN_mm_to_col_row+0x42>
 8008e3e:	f06f 0002 	mvn.w	r0, #2
 8008e42:	b004      	add	sp, #16
 8008e44:	ecbd 8b02 	vpop	{d8}
 8008e48:	bd70      	pop	{r4, r5, r6, pc}
 8008e4a:	eddd 7a01 	vldr	s15, [sp, #4]
 8008e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	d9f2      	bls.n	8008e3e <SEN_mm_to_col_row+0x36>
 8008e58:	4622      	mov	r2, r4
 8008e5a:	a903      	add	r1, sp, #12
 8008e5c:	a802      	add	r0, sp, #8
 8008e5e:	f7ff ff60 	bl	8008d22 <SEN_actual_res>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d1ed      	bne.n	8008e42 <SEN_mm_to_col_row+0x3a>
 8008e66:	eddd 7a02 	vldr	s15, [sp, #8]
 8008e6a:	ed9d 5a01 	vldr	s10, [sp, #4]
 8008e6e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008e72:	eddd 7a00 	vldr	s15, [sp]
 8008e76:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8008e7a:	eddd 7a03 	vldr	s15, [sp, #12]
 8008e7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008e82:	eec8 7a05 	vdiv.f32	s15, s16, s10
 8008e86:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008e8a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008e8e:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8008e92:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9a:	d4d0      	bmi.n	8008e3e <SEN_mm_to_col_row+0x36>
 8008e9c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8008ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea4:	d9cb      	bls.n	8008e3e <SEN_mm_to_col_row+0x36>
 8008ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eae:	d4c6      	bmi.n	8008e3e <SEN_mm_to_col_row+0x36>
 8008eb0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb8:	d9c1      	bls.n	8008e3e <SEN_mm_to_col_row+0x36>
 8008eba:	ed86 7a00 	vstr	s14, [r6]
 8008ebe:	edc5 7a00 	vstr	s15, [r5]
 8008ec2:	e7be      	b.n	8008e42 <SEN_mm_to_col_row+0x3a>
 8008ec4:	f06f 0001 	mvn.w	r0, #1
 8008ec8:	e7bb      	b.n	8008e42 <SEN_mm_to_col_row+0x3a>

08008eca <SEN_mm_to_idx>:
 8008eca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ecc:	4604      	mov	r4, r0
 8008ece:	b1c1      	cbz	r1, 8008f02 <SEN_mm_to_idx+0x38>
 8008ed0:	460a      	mov	r2, r1
 8008ed2:	9101      	str	r1, [sp, #4]
 8008ed4:	a802      	add	r0, sp, #8
 8008ed6:	a903      	add	r1, sp, #12
 8008ed8:	f7ff ff96 	bl	8008e08 <SEN_mm_to_col_row>
 8008edc:	b978      	cbnz	r0, 8008efe <SEN_mm_to_idx+0x34>
 8008ede:	eddd 7a03 	vldr	s15, [sp, #12]
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ee8:	4620      	mov	r0, r4
 8008eea:	ee17 2a90 	vmov	r2, s15
 8008eee:	eddd 7a02 	vldr	s15, [sp, #8]
 8008ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ef6:	ee17 1a90 	vmov	r1, s15
 8008efa:	f7ff fe71 	bl	8008be0 <SEN_col_row_to_idx>
 8008efe:	b004      	add	sp, #16
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f06f 0001 	mvn.w	r0, #1
 8008f06:	e7fa      	b.n	8008efe <SEN_mm_to_idx+0x34>

08008f08 <memset>:
 8008f08:	4402      	add	r2, r0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <__errno>:
 8008f18:	4b01      	ldr	r3, [pc, #4]	; (8008f20 <__errno+0x8>)
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20000068 	.word	0x20000068

08008f24 <__libc_init_array>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	4d0d      	ldr	r5, [pc, #52]	; (8008f5c <__libc_init_array+0x38>)
 8008f28:	4c0d      	ldr	r4, [pc, #52]	; (8008f60 <__libc_init_array+0x3c>)
 8008f2a:	1b64      	subs	r4, r4, r5
 8008f2c:	10a4      	asrs	r4, r4, #2
 8008f2e:	2600      	movs	r6, #0
 8008f30:	42a6      	cmp	r6, r4
 8008f32:	d109      	bne.n	8008f48 <__libc_init_array+0x24>
 8008f34:	4d0b      	ldr	r5, [pc, #44]	; (8008f64 <__libc_init_array+0x40>)
 8008f36:	4c0c      	ldr	r4, [pc, #48]	; (8008f68 <__libc_init_array+0x44>)
 8008f38:	f002 f9f2 	bl	800b320 <_init>
 8008f3c:	1b64      	subs	r4, r4, r5
 8008f3e:	10a4      	asrs	r4, r4, #2
 8008f40:	2600      	movs	r6, #0
 8008f42:	42a6      	cmp	r6, r4
 8008f44:	d105      	bne.n	8008f52 <__libc_init_array+0x2e>
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4c:	4798      	blx	r3
 8008f4e:	3601      	adds	r6, #1
 8008f50:	e7ee      	b.n	8008f30 <__libc_init_array+0xc>
 8008f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f56:	4798      	blx	r3
 8008f58:	3601      	adds	r6, #1
 8008f5a:	e7f2      	b.n	8008f42 <__libc_init_array+0x1e>
 8008f5c:	080210b8 	.word	0x080210b8
 8008f60:	080210b8 	.word	0x080210b8
 8008f64:	080210b8 	.word	0x080210b8
 8008f68:	080210bc 	.word	0x080210bc

08008f6c <memcpy>:
 8008f6c:	440a      	add	r2, r1
 8008f6e:	4291      	cmp	r1, r2
 8008f70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f74:	d100      	bne.n	8008f78 <memcpy+0xc>
 8008f76:	4770      	bx	lr
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d1f9      	bne.n	8008f7a <memcpy+0xe>
 8008f86:	bd10      	pop	{r4, pc}

08008f88 <exp>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	ed2d 8b02 	vpush	{d8}
 8008f8e:	ec55 4b10 	vmov	r4, r5, d0
 8008f92:	f000 fc85 	bl	80098a0 <__ieee754_exp>
 8008f96:	eeb0 8a40 	vmov.f32	s16, s0
 8008f9a:	eef0 8a60 	vmov.f32	s17, s1
 8008f9e:	ec45 4b10 	vmov	d0, r4, r5
 8008fa2:	f000 f909 	bl	80091b8 <finite>
 8008fa6:	b168      	cbz	r0, 8008fc4 <exp+0x3c>
 8008fa8:	a317      	add	r3, pc, #92	; (adr r3, 8009008 <exp+0x80>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 fd5d 	bl	8000a70 <__aeabi_dcmpgt>
 8008fb6:	b160      	cbz	r0, 8008fd2 <exp+0x4a>
 8008fb8:	f7ff ffae 	bl	8008f18 <__errno>
 8008fbc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008ff8 <exp+0x70>
 8008fc0:	2322      	movs	r3, #34	; 0x22
 8008fc2:	6003      	str	r3, [r0, #0]
 8008fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008fc8:	eef0 0a68 	vmov.f32	s1, s17
 8008fcc:	ecbd 8b02 	vpop	{d8}
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	a30f      	add	r3, pc, #60	; (adr r3, 8009010 <exp+0x88>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7f7 fd2a 	bl	8000a34 <__aeabi_dcmplt>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d0ef      	beq.n	8008fc4 <exp+0x3c>
 8008fe4:	f7ff ff98 	bl	8008f18 <__errno>
 8008fe8:	2322      	movs	r3, #34	; 0x22
 8008fea:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8009000 <exp+0x78>
 8008fee:	6003      	str	r3, [r0, #0]
 8008ff0:	e7e8      	b.n	8008fc4 <exp+0x3c>
 8008ff2:	bf00      	nop
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	00000000 	.word	0x00000000
 8008ffc:	7ff00000 	.word	0x7ff00000
	...
 8009008:	fefa39ef 	.word	0xfefa39ef
 800900c:	40862e42 	.word	0x40862e42
 8009010:	d52d3051 	.word	0xd52d3051
 8009014:	c0874910 	.word	0xc0874910

08009018 <pow>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	ed2d 8b02 	vpush	{d8}
 800901e:	eeb0 8a40 	vmov.f32	s16, s0
 8009022:	eef0 8a60 	vmov.f32	s17, s1
 8009026:	ec55 4b11 	vmov	r4, r5, d1
 800902a:	f000 fdbd 	bl	8009ba8 <__ieee754_pow>
 800902e:	4622      	mov	r2, r4
 8009030:	462b      	mov	r3, r5
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	ec57 6b10 	vmov	r6, r7, d0
 800903a:	f7f7 fd23 	bl	8000a84 <__aeabi_dcmpun>
 800903e:	2800      	cmp	r0, #0
 8009040:	d13b      	bne.n	80090ba <pow+0xa2>
 8009042:	ec51 0b18 	vmov	r0, r1, d8
 8009046:	2200      	movs	r2, #0
 8009048:	2300      	movs	r3, #0
 800904a:	f7f7 fce9 	bl	8000a20 <__aeabi_dcmpeq>
 800904e:	b1b8      	cbz	r0, 8009080 <pow+0x68>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fce2 	bl	8000a20 <__aeabi_dcmpeq>
 800905c:	2800      	cmp	r0, #0
 800905e:	d146      	bne.n	80090ee <pow+0xd6>
 8009060:	ec45 4b10 	vmov	d0, r4, r5
 8009064:	f000 f8a8 	bl	80091b8 <finite>
 8009068:	b338      	cbz	r0, 80090ba <pow+0xa2>
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	4620      	mov	r0, r4
 8009070:	4629      	mov	r1, r5
 8009072:	f7f7 fcdf 	bl	8000a34 <__aeabi_dcmplt>
 8009076:	b300      	cbz	r0, 80090ba <pow+0xa2>
 8009078:	f7ff ff4e 	bl	8008f18 <__errno>
 800907c:	2322      	movs	r3, #34	; 0x22
 800907e:	e01b      	b.n	80090b8 <pow+0xa0>
 8009080:	ec47 6b10 	vmov	d0, r6, r7
 8009084:	f000 f898 	bl	80091b8 <finite>
 8009088:	b9e0      	cbnz	r0, 80090c4 <pow+0xac>
 800908a:	eeb0 0a48 	vmov.f32	s0, s16
 800908e:	eef0 0a68 	vmov.f32	s1, s17
 8009092:	f000 f891 	bl	80091b8 <finite>
 8009096:	b1a8      	cbz	r0, 80090c4 <pow+0xac>
 8009098:	ec45 4b10 	vmov	d0, r4, r5
 800909c:	f000 f88c 	bl	80091b8 <finite>
 80090a0:	b180      	cbz	r0, 80090c4 <pow+0xac>
 80090a2:	4632      	mov	r2, r6
 80090a4:	463b      	mov	r3, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 fceb 	bl	8000a84 <__aeabi_dcmpun>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d0e2      	beq.n	8009078 <pow+0x60>
 80090b2:	f7ff ff31 	bl	8008f18 <__errno>
 80090b6:	2321      	movs	r3, #33	; 0x21
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	ecbd 8b02 	vpop	{d8}
 80090be:	ec47 6b10 	vmov	d0, r6, r7
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	2200      	movs	r2, #0
 80090c6:	2300      	movs	r3, #0
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f7f7 fca8 	bl	8000a20 <__aeabi_dcmpeq>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d0f2      	beq.n	80090ba <pow+0xa2>
 80090d4:	eeb0 0a48 	vmov.f32	s0, s16
 80090d8:	eef0 0a68 	vmov.f32	s1, s17
 80090dc:	f000 f86c 	bl	80091b8 <finite>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d0ea      	beq.n	80090ba <pow+0xa2>
 80090e4:	ec45 4b10 	vmov	d0, r4, r5
 80090e8:	f000 f866 	bl	80091b8 <finite>
 80090ec:	e7c3      	b.n	8009076 <pow+0x5e>
 80090ee:	4f01      	ldr	r7, [pc, #4]	; (80090f4 <pow+0xdc>)
 80090f0:	2600      	movs	r6, #0
 80090f2:	e7e2      	b.n	80090ba <pow+0xa2>
 80090f4:	3ff00000 	.word	0x3ff00000

080090f8 <sqrt>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	ed2d 8b02 	vpush	{d8}
 80090fe:	ec55 4b10 	vmov	r4, r5, d0
 8009102:	f000 f865 	bl	80091d0 <__ieee754_sqrt>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	4620      	mov	r0, r4
 800910c:	4629      	mov	r1, r5
 800910e:	eeb0 8a40 	vmov.f32	s16, s0
 8009112:	eef0 8a60 	vmov.f32	s17, s1
 8009116:	f7f7 fcb5 	bl	8000a84 <__aeabi_dcmpun>
 800911a:	b990      	cbnz	r0, 8009142 <sqrt+0x4a>
 800911c:	2200      	movs	r2, #0
 800911e:	2300      	movs	r3, #0
 8009120:	4620      	mov	r0, r4
 8009122:	4629      	mov	r1, r5
 8009124:	f7f7 fc86 	bl	8000a34 <__aeabi_dcmplt>
 8009128:	b158      	cbz	r0, 8009142 <sqrt+0x4a>
 800912a:	f7ff fef5 	bl	8008f18 <__errno>
 800912e:	2321      	movs	r3, #33	; 0x21
 8009130:	6003      	str	r3, [r0, #0]
 8009132:	2200      	movs	r2, #0
 8009134:	2300      	movs	r3, #0
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	f7f7 fb33 	bl	80007a4 <__aeabi_ddiv>
 800913e:	ec41 0b18 	vmov	d8, r0, r1
 8009142:	eeb0 0a48 	vmov.f32	s0, s16
 8009146:	eef0 0a68 	vmov.f32	s1, s17
 800914a:	ecbd 8b02 	vpop	{d8}
 800914e:	bd38      	pop	{r3, r4, r5, pc}

08009150 <tan>:
 8009150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009152:	ec53 2b10 	vmov	r2, r3, d0
 8009156:	4816      	ldr	r0, [pc, #88]	; (80091b0 <tan+0x60>)
 8009158:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800915c:	4281      	cmp	r1, r0
 800915e:	dc07      	bgt.n	8009170 <tan+0x20>
 8009160:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80091a8 <tan+0x58>
 8009164:	2001      	movs	r0, #1
 8009166:	b005      	add	sp, #20
 8009168:	f85d eb04 	ldr.w	lr, [sp], #4
 800916c:	f000 b98c 	b.w	8009488 <__kernel_tan>
 8009170:	4810      	ldr	r0, [pc, #64]	; (80091b4 <tan+0x64>)
 8009172:	4281      	cmp	r1, r0
 8009174:	dd09      	ble.n	800918a <tan+0x3a>
 8009176:	ee10 0a10 	vmov	r0, s0
 800917a:	4619      	mov	r1, r3
 800917c:	f7f7 f830 	bl	80001e0 <__aeabi_dsub>
 8009180:	ec41 0b10 	vmov	d0, r0, r1
 8009184:	b005      	add	sp, #20
 8009186:	f85d fb04 	ldr.w	pc, [sp], #4
 800918a:	4668      	mov	r0, sp
 800918c:	f001 fa38 	bl	800a600 <__ieee754_rem_pio2>
 8009190:	0040      	lsls	r0, r0, #1
 8009192:	f000 0002 	and.w	r0, r0, #2
 8009196:	ed9d 1b02 	vldr	d1, [sp, #8]
 800919a:	ed9d 0b00 	vldr	d0, [sp]
 800919e:	f1c0 0001 	rsb	r0, r0, #1
 80091a2:	f000 f971 	bl	8009488 <__kernel_tan>
 80091a6:	e7ed      	b.n	8009184 <tan+0x34>
	...
 80091b0:	3fe921fb 	.word	0x3fe921fb
 80091b4:	7fefffff 	.word	0x7fefffff

080091b8 <finite>:
 80091b8:	b082      	sub	sp, #8
 80091ba:	ed8d 0b00 	vstr	d0, [sp]
 80091be:	9801      	ldr	r0, [sp, #4]
 80091c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80091c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091c8:	0fc0      	lsrs	r0, r0, #31
 80091ca:	b002      	add	sp, #8
 80091cc:	4770      	bx	lr
	...

080091d0 <__ieee754_sqrt>:
 80091d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	ec55 4b10 	vmov	r4, r5, d0
 80091d8:	4e67      	ldr	r6, [pc, #412]	; (8009378 <__ieee754_sqrt+0x1a8>)
 80091da:	43ae      	bics	r6, r5
 80091dc:	ee10 0a10 	vmov	r0, s0
 80091e0:	ee10 2a10 	vmov	r2, s0
 80091e4:	4629      	mov	r1, r5
 80091e6:	462b      	mov	r3, r5
 80091e8:	d10d      	bne.n	8009206 <__ieee754_sqrt+0x36>
 80091ea:	f7f7 f9b1 	bl	8000550 <__aeabi_dmul>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7f6 fff5 	bl	80001e4 <__adddf3>
 80091fa:	4604      	mov	r4, r0
 80091fc:	460d      	mov	r5, r1
 80091fe:	ec45 4b10 	vmov	d0, r4, r5
 8009202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	2d00      	cmp	r5, #0
 8009208:	dc0b      	bgt.n	8009222 <__ieee754_sqrt+0x52>
 800920a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800920e:	4326      	orrs	r6, r4
 8009210:	d0f5      	beq.n	80091fe <__ieee754_sqrt+0x2e>
 8009212:	b135      	cbz	r5, 8009222 <__ieee754_sqrt+0x52>
 8009214:	f7f6 ffe4 	bl	80001e0 <__aeabi_dsub>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	f7f7 fac2 	bl	80007a4 <__aeabi_ddiv>
 8009220:	e7eb      	b.n	80091fa <__ieee754_sqrt+0x2a>
 8009222:	1509      	asrs	r1, r1, #20
 8009224:	f000 808d 	beq.w	8009342 <__ieee754_sqrt+0x172>
 8009228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800922c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009234:	07c9      	lsls	r1, r1, #31
 8009236:	bf5c      	itt	pl
 8009238:	005b      	lslpl	r3, r3, #1
 800923a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800923e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009242:	bf58      	it	pl
 8009244:	0052      	lslpl	r2, r2, #1
 8009246:	2500      	movs	r5, #0
 8009248:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800924c:	1076      	asrs	r6, r6, #1
 800924e:	0052      	lsls	r2, r2, #1
 8009250:	f04f 0e16 	mov.w	lr, #22
 8009254:	46ac      	mov	ip, r5
 8009256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800925a:	eb0c 0001 	add.w	r0, ip, r1
 800925e:	4298      	cmp	r0, r3
 8009260:	bfde      	ittt	le
 8009262:	1a1b      	suble	r3, r3, r0
 8009264:	eb00 0c01 	addle.w	ip, r0, r1
 8009268:	186d      	addle	r5, r5, r1
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	f1be 0e01 	subs.w	lr, lr, #1
 8009270:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009274:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009278:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800927c:	d1ed      	bne.n	800925a <__ieee754_sqrt+0x8a>
 800927e:	4674      	mov	r4, lr
 8009280:	2720      	movs	r7, #32
 8009282:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009286:	4563      	cmp	r3, ip
 8009288:	eb01 000e 	add.w	r0, r1, lr
 800928c:	dc02      	bgt.n	8009294 <__ieee754_sqrt+0xc4>
 800928e:	d113      	bne.n	80092b8 <__ieee754_sqrt+0xe8>
 8009290:	4290      	cmp	r0, r2
 8009292:	d811      	bhi.n	80092b8 <__ieee754_sqrt+0xe8>
 8009294:	2800      	cmp	r0, #0
 8009296:	eb00 0e01 	add.w	lr, r0, r1
 800929a:	da57      	bge.n	800934c <__ieee754_sqrt+0x17c>
 800929c:	f1be 0f00 	cmp.w	lr, #0
 80092a0:	db54      	blt.n	800934c <__ieee754_sqrt+0x17c>
 80092a2:	f10c 0801 	add.w	r8, ip, #1
 80092a6:	eba3 030c 	sub.w	r3, r3, ip
 80092aa:	4290      	cmp	r0, r2
 80092ac:	bf88      	it	hi
 80092ae:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80092b2:	1a12      	subs	r2, r2, r0
 80092b4:	440c      	add	r4, r1
 80092b6:	46c4      	mov	ip, r8
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	3f01      	subs	r7, #1
 80092bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80092c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80092c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80092c8:	d1dd      	bne.n	8009286 <__ieee754_sqrt+0xb6>
 80092ca:	4313      	orrs	r3, r2
 80092cc:	d01b      	beq.n	8009306 <__ieee754_sqrt+0x136>
 80092ce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800937c <__ieee754_sqrt+0x1ac>
 80092d2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009380 <__ieee754_sqrt+0x1b0>
 80092d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80092da:	e9db 2300 	ldrd	r2, r3, [fp]
 80092de:	f7f6 ff7f 	bl	80001e0 <__aeabi_dsub>
 80092e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f7 fbab 	bl	8000a48 <__aeabi_dcmple>
 80092f2:	b140      	cbz	r0, 8009306 <__ieee754_sqrt+0x136>
 80092f4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80092f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80092fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009300:	d126      	bne.n	8009350 <__ieee754_sqrt+0x180>
 8009302:	3501      	adds	r5, #1
 8009304:	463c      	mov	r4, r7
 8009306:	106a      	asrs	r2, r5, #1
 8009308:	0863      	lsrs	r3, r4, #1
 800930a:	07e9      	lsls	r1, r5, #31
 800930c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009310:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009314:	bf48      	it	mi
 8009316:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800931a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800931e:	461c      	mov	r4, r3
 8009320:	e76d      	b.n	80091fe <__ieee754_sqrt+0x2e>
 8009322:	0ad3      	lsrs	r3, r2, #11
 8009324:	3815      	subs	r0, #21
 8009326:	0552      	lsls	r2, r2, #21
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0fa      	beq.n	8009322 <__ieee754_sqrt+0x152>
 800932c:	02dc      	lsls	r4, r3, #11
 800932e:	d50a      	bpl.n	8009346 <__ieee754_sqrt+0x176>
 8009330:	f1c1 0420 	rsb	r4, r1, #32
 8009334:	fa22 f404 	lsr.w	r4, r2, r4
 8009338:	1e4d      	subs	r5, r1, #1
 800933a:	408a      	lsls	r2, r1
 800933c:	4323      	orrs	r3, r4
 800933e:	1b41      	subs	r1, r0, r5
 8009340:	e772      	b.n	8009228 <__ieee754_sqrt+0x58>
 8009342:	4608      	mov	r0, r1
 8009344:	e7f0      	b.n	8009328 <__ieee754_sqrt+0x158>
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	3101      	adds	r1, #1
 800934a:	e7ef      	b.n	800932c <__ieee754_sqrt+0x15c>
 800934c:	46e0      	mov	r8, ip
 800934e:	e7aa      	b.n	80092a6 <__ieee754_sqrt+0xd6>
 8009350:	f7f6 ff48 	bl	80001e4 <__adddf3>
 8009354:	e9da 8900 	ldrd	r8, r9, [sl]
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f7 fb68 	bl	8000a34 <__aeabi_dcmplt>
 8009364:	b120      	cbz	r0, 8009370 <__ieee754_sqrt+0x1a0>
 8009366:	1ca0      	adds	r0, r4, #2
 8009368:	bf08      	it	eq
 800936a:	3501      	addeq	r5, #1
 800936c:	3402      	adds	r4, #2
 800936e:	e7ca      	b.n	8009306 <__ieee754_sqrt+0x136>
 8009370:	3401      	adds	r4, #1
 8009372:	f024 0401 	bic.w	r4, r4, #1
 8009376:	e7c6      	b.n	8009306 <__ieee754_sqrt+0x136>
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	20000070 	.word	0x20000070
 8009380:	20000078 	.word	0x20000078
 8009384:	00000000 	.word	0x00000000

08009388 <ceil>:
 8009388:	ec51 0b10 	vmov	r0, r1, d0
 800938c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009398:	2e13      	cmp	r6, #19
 800939a:	ee10 5a10 	vmov	r5, s0
 800939e:	ee10 8a10 	vmov	r8, s0
 80093a2:	460c      	mov	r4, r1
 80093a4:	dc2f      	bgt.n	8009406 <ceil+0x7e>
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	da12      	bge.n	80093d0 <ceil+0x48>
 80093aa:	a333      	add	r3, pc, #204	; (adr r3, 8009478 <ceil+0xf0>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f6 ff18 	bl	80001e4 <__adddf3>
 80093b4:	2200      	movs	r2, #0
 80093b6:	2300      	movs	r3, #0
 80093b8:	f7f7 fb5a 	bl	8000a70 <__aeabi_dcmpgt>
 80093bc:	b128      	cbz	r0, 80093ca <ceil+0x42>
 80093be:	2c00      	cmp	r4, #0
 80093c0:	db51      	blt.n	8009466 <ceil+0xde>
 80093c2:	432c      	orrs	r4, r5
 80093c4:	d053      	beq.n	800946e <ceil+0xe6>
 80093c6:	4c2e      	ldr	r4, [pc, #184]	; (8009480 <ceil+0xf8>)
 80093c8:	2500      	movs	r5, #0
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	e024      	b.n	800941a <ceil+0x92>
 80093d0:	4f2c      	ldr	r7, [pc, #176]	; (8009484 <ceil+0xfc>)
 80093d2:	4137      	asrs	r7, r6
 80093d4:	ea01 0307 	and.w	r3, r1, r7
 80093d8:	4303      	orrs	r3, r0
 80093da:	d01e      	beq.n	800941a <ceil+0x92>
 80093dc:	a326      	add	r3, pc, #152	; (adr r3, 8009478 <ceil+0xf0>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f7f6 feff 	bl	80001e4 <__adddf3>
 80093e6:	2200      	movs	r2, #0
 80093e8:	2300      	movs	r3, #0
 80093ea:	f7f7 fb41 	bl	8000a70 <__aeabi_dcmpgt>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d0eb      	beq.n	80093ca <ceil+0x42>
 80093f2:	2c00      	cmp	r4, #0
 80093f4:	bfc2      	ittt	gt
 80093f6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80093fa:	4133      	asrgt	r3, r6
 80093fc:	18e4      	addgt	r4, r4, r3
 80093fe:	ea24 0407 	bic.w	r4, r4, r7
 8009402:	2500      	movs	r5, #0
 8009404:	e7e1      	b.n	80093ca <ceil+0x42>
 8009406:	2e33      	cmp	r6, #51	; 0x33
 8009408:	dd0b      	ble.n	8009422 <ceil+0x9a>
 800940a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800940e:	d104      	bne.n	800941a <ceil+0x92>
 8009410:	ee10 2a10 	vmov	r2, s0
 8009414:	460b      	mov	r3, r1
 8009416:	f7f6 fee5 	bl	80001e4 <__adddf3>
 800941a:	ec41 0b10 	vmov	d0, r0, r1
 800941e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009422:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009426:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800942a:	40df      	lsrs	r7, r3
 800942c:	4238      	tst	r0, r7
 800942e:	d0f4      	beq.n	800941a <ceil+0x92>
 8009430:	a311      	add	r3, pc, #68	; (adr r3, 8009478 <ceil+0xf0>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f6 fed5 	bl	80001e4 <__adddf3>
 800943a:	2200      	movs	r2, #0
 800943c:	2300      	movs	r3, #0
 800943e:	f7f7 fb17 	bl	8000a70 <__aeabi_dcmpgt>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0c1      	beq.n	80093ca <ceil+0x42>
 8009446:	2c00      	cmp	r4, #0
 8009448:	dd0a      	ble.n	8009460 <ceil+0xd8>
 800944a:	2e14      	cmp	r6, #20
 800944c:	d101      	bne.n	8009452 <ceil+0xca>
 800944e:	3401      	adds	r4, #1
 8009450:	e006      	b.n	8009460 <ceil+0xd8>
 8009452:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009456:	2301      	movs	r3, #1
 8009458:	40b3      	lsls	r3, r6
 800945a:	441d      	add	r5, r3
 800945c:	45a8      	cmp	r8, r5
 800945e:	d8f6      	bhi.n	800944e <ceil+0xc6>
 8009460:	ea25 0507 	bic.w	r5, r5, r7
 8009464:	e7b1      	b.n	80093ca <ceil+0x42>
 8009466:	2500      	movs	r5, #0
 8009468:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800946c:	e7ad      	b.n	80093ca <ceil+0x42>
 800946e:	4625      	mov	r5, r4
 8009470:	e7ab      	b.n	80093ca <ceil+0x42>
 8009472:	bf00      	nop
 8009474:	f3af 8000 	nop.w
 8009478:	8800759c 	.word	0x8800759c
 800947c:	7e37e43c 	.word	0x7e37e43c
 8009480:	3ff00000 	.word	0x3ff00000
 8009484:	000fffff 	.word	0x000fffff

08009488 <__kernel_tan>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	ed2d 8b06 	vpush	{d8-d10}
 8009490:	ec5b ab10 	vmov	sl, fp, d0
 8009494:	4be0      	ldr	r3, [pc, #896]	; (8009818 <__kernel_tan+0x390>)
 8009496:	b083      	sub	sp, #12
 8009498:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800949c:	429f      	cmp	r7, r3
 800949e:	ec59 8b11 	vmov	r8, r9, d1
 80094a2:	4606      	mov	r6, r0
 80094a4:	f8cd b000 	str.w	fp, [sp]
 80094a8:	dc61      	bgt.n	800956e <__kernel_tan+0xe6>
 80094aa:	ee10 0a10 	vmov	r0, s0
 80094ae:	4659      	mov	r1, fp
 80094b0:	f7f7 fafe 	bl	8000ab0 <__aeabi_d2iz>
 80094b4:	4605      	mov	r5, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f040 8083 	bne.w	80095c2 <__kernel_tan+0x13a>
 80094bc:	1c73      	adds	r3, r6, #1
 80094be:	4652      	mov	r2, sl
 80094c0:	4313      	orrs	r3, r2
 80094c2:	433b      	orrs	r3, r7
 80094c4:	d112      	bne.n	80094ec <__kernel_tan+0x64>
 80094c6:	ec4b ab10 	vmov	d0, sl, fp
 80094ca:	f001 fa9f 	bl	800aa0c <fabs>
 80094ce:	49d3      	ldr	r1, [pc, #844]	; (800981c <__kernel_tan+0x394>)
 80094d0:	ec53 2b10 	vmov	r2, r3, d0
 80094d4:	2000      	movs	r0, #0
 80094d6:	f7f7 f965 	bl	80007a4 <__aeabi_ddiv>
 80094da:	4682      	mov	sl, r0
 80094dc:	468b      	mov	fp, r1
 80094de:	ec4b ab10 	vmov	d0, sl, fp
 80094e2:	b003      	add	sp, #12
 80094e4:	ecbd 8b06 	vpop	{d8-d10}
 80094e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ec:	2e01      	cmp	r6, #1
 80094ee:	d0f6      	beq.n	80094de <__kernel_tan+0x56>
 80094f0:	4642      	mov	r2, r8
 80094f2:	464b      	mov	r3, r9
 80094f4:	4650      	mov	r0, sl
 80094f6:	4659      	mov	r1, fp
 80094f8:	f7f6 fe74 	bl	80001e4 <__adddf3>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	460f      	mov	r7, r1
 8009502:	2000      	movs	r0, #0
 8009504:	49c6      	ldr	r1, [pc, #792]	; (8009820 <__kernel_tan+0x398>)
 8009506:	f7f7 f94d 	bl	80007a4 <__aeabi_ddiv>
 800950a:	e9cd 0100 	strd	r0, r1, [sp]
 800950e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009512:	462e      	mov	r6, r5
 8009514:	4652      	mov	r2, sl
 8009516:	462c      	mov	r4, r5
 8009518:	4630      	mov	r0, r6
 800951a:	461d      	mov	r5, r3
 800951c:	4639      	mov	r1, r7
 800951e:	465b      	mov	r3, fp
 8009520:	f7f6 fe5e 	bl	80001e0 <__aeabi_dsub>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4640      	mov	r0, r8
 800952a:	4649      	mov	r1, r9
 800952c:	f7f6 fe58 	bl	80001e0 <__aeabi_dsub>
 8009530:	4632      	mov	r2, r6
 8009532:	462b      	mov	r3, r5
 8009534:	f7f7 f80c 	bl	8000550 <__aeabi_dmul>
 8009538:	4632      	mov	r2, r6
 800953a:	4680      	mov	r8, r0
 800953c:	4689      	mov	r9, r1
 800953e:	462b      	mov	r3, r5
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 f804 	bl	8000550 <__aeabi_dmul>
 8009548:	4bb4      	ldr	r3, [pc, #720]	; (800981c <__kernel_tan+0x394>)
 800954a:	2200      	movs	r2, #0
 800954c:	f7f6 fe4a 	bl	80001e4 <__adddf3>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4640      	mov	r0, r8
 8009556:	4649      	mov	r1, r9
 8009558:	f7f6 fe44 	bl	80001e4 <__adddf3>
 800955c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009560:	f7f6 fff6 	bl	8000550 <__aeabi_dmul>
 8009564:	4622      	mov	r2, r4
 8009566:	462b      	mov	r3, r5
 8009568:	f7f6 fe3c 	bl	80001e4 <__adddf3>
 800956c:	e7b5      	b.n	80094da <__kernel_tan+0x52>
 800956e:	4bad      	ldr	r3, [pc, #692]	; (8009824 <__kernel_tan+0x39c>)
 8009570:	429f      	cmp	r7, r3
 8009572:	dd26      	ble.n	80095c2 <__kernel_tan+0x13a>
 8009574:	9b00      	ldr	r3, [sp, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	da09      	bge.n	800958e <__kernel_tan+0x106>
 800957a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800957e:	469b      	mov	fp, r3
 8009580:	ee10 aa10 	vmov	sl, s0
 8009584:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009588:	ee11 8a10 	vmov	r8, s2
 800958c:	4699      	mov	r9, r3
 800958e:	4652      	mov	r2, sl
 8009590:	465b      	mov	r3, fp
 8009592:	a183      	add	r1, pc, #524	; (adr r1, 80097a0 <__kernel_tan+0x318>)
 8009594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009598:	f7f6 fe22 	bl	80001e0 <__aeabi_dsub>
 800959c:	4642      	mov	r2, r8
 800959e:	464b      	mov	r3, r9
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	a180      	add	r1, pc, #512	; (adr r1, 80097a8 <__kernel_tan+0x320>)
 80095a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095aa:	f7f6 fe19 	bl	80001e0 <__aeabi_dsub>
 80095ae:	4622      	mov	r2, r4
 80095b0:	462b      	mov	r3, r5
 80095b2:	f7f6 fe17 	bl	80001e4 <__adddf3>
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	4682      	mov	sl, r0
 80095bc:	468b      	mov	fp, r1
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	4650      	mov	r0, sl
 80095c8:	4659      	mov	r1, fp
 80095ca:	f7f6 ffc1 	bl	8000550 <__aeabi_dmul>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	ec43 2b18 	vmov	d8, r2, r3
 80095d6:	f7f6 ffbb 	bl	8000550 <__aeabi_dmul>
 80095da:	ec53 2b18 	vmov	r2, r3, d8
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	4650      	mov	r0, sl
 80095e4:	4659      	mov	r1, fp
 80095e6:	f7f6 ffb3 	bl	8000550 <__aeabi_dmul>
 80095ea:	a371      	add	r3, pc, #452	; (adr r3, 80097b0 <__kernel_tan+0x328>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	ec41 0b19 	vmov	d9, r0, r1
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 ffaa 	bl	8000550 <__aeabi_dmul>
 80095fc:	a36e      	add	r3, pc, #440	; (adr r3, 80097b8 <__kernel_tan+0x330>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f7f6 fdef 	bl	80001e4 <__adddf3>
 8009606:	4622      	mov	r2, r4
 8009608:	462b      	mov	r3, r5
 800960a:	f7f6 ffa1 	bl	8000550 <__aeabi_dmul>
 800960e:	a36c      	add	r3, pc, #432	; (adr r3, 80097c0 <__kernel_tan+0x338>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fde6 	bl	80001e4 <__adddf3>
 8009618:	4622      	mov	r2, r4
 800961a:	462b      	mov	r3, r5
 800961c:	f7f6 ff98 	bl	8000550 <__aeabi_dmul>
 8009620:	a369      	add	r3, pc, #420	; (adr r3, 80097c8 <__kernel_tan+0x340>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fddd 	bl	80001e4 <__adddf3>
 800962a:	4622      	mov	r2, r4
 800962c:	462b      	mov	r3, r5
 800962e:	f7f6 ff8f 	bl	8000550 <__aeabi_dmul>
 8009632:	a367      	add	r3, pc, #412	; (adr r3, 80097d0 <__kernel_tan+0x348>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fdd4 	bl	80001e4 <__adddf3>
 800963c:	4622      	mov	r2, r4
 800963e:	462b      	mov	r3, r5
 8009640:	f7f6 ff86 	bl	8000550 <__aeabi_dmul>
 8009644:	a364      	add	r3, pc, #400	; (adr r3, 80097d8 <__kernel_tan+0x350>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	f7f6 fdcb 	bl	80001e4 <__adddf3>
 800964e:	ec53 2b18 	vmov	r2, r3, d8
 8009652:	f7f6 ff7d 	bl	8000550 <__aeabi_dmul>
 8009656:	a362      	add	r3, pc, #392	; (adr r3, 80097e0 <__kernel_tan+0x358>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	ec41 0b1a 	vmov	d10, r0, r1
 8009660:	4620      	mov	r0, r4
 8009662:	4629      	mov	r1, r5
 8009664:	f7f6 ff74 	bl	8000550 <__aeabi_dmul>
 8009668:	a35f      	add	r3, pc, #380	; (adr r3, 80097e8 <__kernel_tan+0x360>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f6 fdb9 	bl	80001e4 <__adddf3>
 8009672:	4622      	mov	r2, r4
 8009674:	462b      	mov	r3, r5
 8009676:	f7f6 ff6b 	bl	8000550 <__aeabi_dmul>
 800967a:	a35d      	add	r3, pc, #372	; (adr r3, 80097f0 <__kernel_tan+0x368>)
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	f7f6 fdb0 	bl	80001e4 <__adddf3>
 8009684:	4622      	mov	r2, r4
 8009686:	462b      	mov	r3, r5
 8009688:	f7f6 ff62 	bl	8000550 <__aeabi_dmul>
 800968c:	a35a      	add	r3, pc, #360	; (adr r3, 80097f8 <__kernel_tan+0x370>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f7f6 fda7 	bl	80001e4 <__adddf3>
 8009696:	4622      	mov	r2, r4
 8009698:	462b      	mov	r3, r5
 800969a:	f7f6 ff59 	bl	8000550 <__aeabi_dmul>
 800969e:	a358      	add	r3, pc, #352	; (adr r3, 8009800 <__kernel_tan+0x378>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f7f6 fd9e 	bl	80001e4 <__adddf3>
 80096a8:	4622      	mov	r2, r4
 80096aa:	462b      	mov	r3, r5
 80096ac:	f7f6 ff50 	bl	8000550 <__aeabi_dmul>
 80096b0:	a355      	add	r3, pc, #340	; (adr r3, 8009808 <__kernel_tan+0x380>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 fd95 	bl	80001e4 <__adddf3>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	ec51 0b1a 	vmov	r0, r1, d10
 80096c2:	f7f6 fd8f 	bl	80001e4 <__adddf3>
 80096c6:	ec53 2b19 	vmov	r2, r3, d9
 80096ca:	f7f6 ff41 	bl	8000550 <__aeabi_dmul>
 80096ce:	4642      	mov	r2, r8
 80096d0:	464b      	mov	r3, r9
 80096d2:	f7f6 fd87 	bl	80001e4 <__adddf3>
 80096d6:	ec53 2b18 	vmov	r2, r3, d8
 80096da:	f7f6 ff39 	bl	8000550 <__aeabi_dmul>
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	f7f6 fd7f 	bl	80001e4 <__adddf3>
 80096e6:	a34a      	add	r3, pc, #296	; (adr r3, 8009810 <__kernel_tan+0x388>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	ec51 0b19 	vmov	r0, r1, d9
 80096f4:	f7f6 ff2c 	bl	8000550 <__aeabi_dmul>
 80096f8:	4622      	mov	r2, r4
 80096fa:	462b      	mov	r3, r5
 80096fc:	f7f6 fd72 	bl	80001e4 <__adddf3>
 8009700:	460b      	mov	r3, r1
 8009702:	ec41 0b18 	vmov	d8, r0, r1
 8009706:	4602      	mov	r2, r0
 8009708:	4659      	mov	r1, fp
 800970a:	4650      	mov	r0, sl
 800970c:	f7f6 fd6a 	bl	80001e4 <__adddf3>
 8009710:	4b44      	ldr	r3, [pc, #272]	; (8009824 <__kernel_tan+0x39c>)
 8009712:	429f      	cmp	r7, r3
 8009714:	4604      	mov	r4, r0
 8009716:	460d      	mov	r5, r1
 8009718:	f340 8086 	ble.w	8009828 <__kernel_tan+0x3a0>
 800971c:	4630      	mov	r0, r6
 800971e:	f7f6 fead 	bl	800047c <__aeabi_i2d>
 8009722:	4622      	mov	r2, r4
 8009724:	4680      	mov	r8, r0
 8009726:	4689      	mov	r9, r1
 8009728:	462b      	mov	r3, r5
 800972a:	4620      	mov	r0, r4
 800972c:	4629      	mov	r1, r5
 800972e:	f7f6 ff0f 	bl	8000550 <__aeabi_dmul>
 8009732:	4642      	mov	r2, r8
 8009734:	4606      	mov	r6, r0
 8009736:	460f      	mov	r7, r1
 8009738:	464b      	mov	r3, r9
 800973a:	4620      	mov	r0, r4
 800973c:	4629      	mov	r1, r5
 800973e:	f7f6 fd51 	bl	80001e4 <__adddf3>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f7 f82b 	bl	80007a4 <__aeabi_ddiv>
 800974e:	ec53 2b18 	vmov	r2, r3, d8
 8009752:	f7f6 fd45 	bl	80001e0 <__aeabi_dsub>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4650      	mov	r0, sl
 800975c:	4659      	mov	r1, fp
 800975e:	f7f6 fd3f 	bl	80001e0 <__aeabi_dsub>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	f7f6 fd3d 	bl	80001e4 <__adddf3>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	f7f6 fd35 	bl	80001e0 <__aeabi_dsub>
 8009776:	9b00      	ldr	r3, [sp, #0]
 8009778:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800977c:	f00a 0a02 	and.w	sl, sl, #2
 8009780:	4604      	mov	r4, r0
 8009782:	f1ca 0001 	rsb	r0, sl, #1
 8009786:	460d      	mov	r5, r1
 8009788:	f7f6 fe78 	bl	800047c <__aeabi_i2d>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fedc 	bl	8000550 <__aeabi_dmul>
 8009798:	e69f      	b.n	80094da <__kernel_tan+0x52>
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
 80097a0:	54442d18 	.word	0x54442d18
 80097a4:	3fe921fb 	.word	0x3fe921fb
 80097a8:	33145c07 	.word	0x33145c07
 80097ac:	3c81a626 	.word	0x3c81a626
 80097b0:	74bf7ad4 	.word	0x74bf7ad4
 80097b4:	3efb2a70 	.word	0x3efb2a70
 80097b8:	32f0a7e9 	.word	0x32f0a7e9
 80097bc:	3f12b80f 	.word	0x3f12b80f
 80097c0:	1a8d1068 	.word	0x1a8d1068
 80097c4:	3f3026f7 	.word	0x3f3026f7
 80097c8:	fee08315 	.word	0xfee08315
 80097cc:	3f57dbc8 	.word	0x3f57dbc8
 80097d0:	e96e8493 	.word	0xe96e8493
 80097d4:	3f8226e3 	.word	0x3f8226e3
 80097d8:	1bb341fe 	.word	0x1bb341fe
 80097dc:	3faba1ba 	.word	0x3faba1ba
 80097e0:	db605373 	.word	0xdb605373
 80097e4:	bef375cb 	.word	0xbef375cb
 80097e8:	a03792a6 	.word	0xa03792a6
 80097ec:	3f147e88 	.word	0x3f147e88
 80097f0:	f2f26501 	.word	0xf2f26501
 80097f4:	3f4344d8 	.word	0x3f4344d8
 80097f8:	c9560328 	.word	0xc9560328
 80097fc:	3f6d6d22 	.word	0x3f6d6d22
 8009800:	8406d637 	.word	0x8406d637
 8009804:	3f9664f4 	.word	0x3f9664f4
 8009808:	1110fe7a 	.word	0x1110fe7a
 800980c:	3fc11111 	.word	0x3fc11111
 8009810:	55555563 	.word	0x55555563
 8009814:	3fd55555 	.word	0x3fd55555
 8009818:	3e2fffff 	.word	0x3e2fffff
 800981c:	3ff00000 	.word	0x3ff00000
 8009820:	bff00000 	.word	0xbff00000
 8009824:	3fe59427 	.word	0x3fe59427
 8009828:	2e01      	cmp	r6, #1
 800982a:	d02f      	beq.n	800988c <__kernel_tan+0x404>
 800982c:	460f      	mov	r7, r1
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4689      	mov	r9, r1
 8009834:	2000      	movs	r0, #0
 8009836:	4917      	ldr	r1, [pc, #92]	; (8009894 <__kernel_tan+0x40c>)
 8009838:	f7f6 ffb4 	bl	80007a4 <__aeabi_ddiv>
 800983c:	2600      	movs	r6, #0
 800983e:	e9cd 0100 	strd	r0, r1, [sp]
 8009842:	4652      	mov	r2, sl
 8009844:	465b      	mov	r3, fp
 8009846:	4630      	mov	r0, r6
 8009848:	4639      	mov	r1, r7
 800984a:	f7f6 fcc9 	bl	80001e0 <__aeabi_dsub>
 800984e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	ec51 0b18 	vmov	r0, r1, d8
 800985a:	f7f6 fcc1 	bl	80001e0 <__aeabi_dsub>
 800985e:	4632      	mov	r2, r6
 8009860:	462b      	mov	r3, r5
 8009862:	f7f6 fe75 	bl	8000550 <__aeabi_dmul>
 8009866:	46b0      	mov	r8, r6
 8009868:	460f      	mov	r7, r1
 800986a:	4642      	mov	r2, r8
 800986c:	462b      	mov	r3, r5
 800986e:	4634      	mov	r4, r6
 8009870:	4649      	mov	r1, r9
 8009872:	4606      	mov	r6, r0
 8009874:	4640      	mov	r0, r8
 8009876:	f7f6 fe6b 	bl	8000550 <__aeabi_dmul>
 800987a:	4b07      	ldr	r3, [pc, #28]	; (8009898 <__kernel_tan+0x410>)
 800987c:	2200      	movs	r2, #0
 800987e:	f7f6 fcb1 	bl	80001e4 <__adddf3>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	e665      	b.n	8009558 <__kernel_tan+0xd0>
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	e625      	b.n	80094de <__kernel_tan+0x56>
 8009892:	bf00      	nop
 8009894:	bff00000 	.word	0xbff00000
 8009898:	3ff00000 	.word	0x3ff00000
 800989c:	00000000 	.word	0x00000000

080098a0 <__ieee754_exp>:
 80098a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	ec55 4b10 	vmov	r4, r5, d0
 80098a8:	49b5      	ldr	r1, [pc, #724]	; (8009b80 <__ieee754_exp+0x2e0>)
 80098aa:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80098ae:	428a      	cmp	r2, r1
 80098b0:	ed2d 8b04 	vpush	{d8-d9}
 80098b4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80098b8:	d93b      	bls.n	8009932 <__ieee754_exp+0x92>
 80098ba:	49b2      	ldr	r1, [pc, #712]	; (8009b84 <__ieee754_exp+0x2e4>)
 80098bc:	428a      	cmp	r2, r1
 80098be:	d916      	bls.n	80098ee <__ieee754_exp+0x4e>
 80098c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80098c4:	4323      	orrs	r3, r4
 80098c6:	ee10 2a10 	vmov	r2, s0
 80098ca:	d007      	beq.n	80098dc <__ieee754_exp+0x3c>
 80098cc:	462b      	mov	r3, r5
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f6 fc87 	bl	80001e4 <__adddf3>
 80098d6:	4604      	mov	r4, r0
 80098d8:	460d      	mov	r5, r1
 80098da:	e002      	b.n	80098e2 <__ieee754_exp+0x42>
 80098dc:	b10e      	cbz	r6, 80098e2 <__ieee754_exp+0x42>
 80098de:	2400      	movs	r4, #0
 80098e0:	2500      	movs	r5, #0
 80098e2:	ecbd 8b04 	vpop	{d8-d9}
 80098e6:	ec45 4b10 	vmov	d0, r4, r5
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ee:	a38e      	add	r3, pc, #568	; (adr r3, 8009b28 <__ieee754_exp+0x288>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	ee10 0a10 	vmov	r0, s0
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7f7 f8b9 	bl	8000a70 <__aeabi_dcmpgt>
 80098fe:	4607      	mov	r7, r0
 8009900:	b130      	cbz	r0, 8009910 <__ieee754_exp+0x70>
 8009902:	ecbd 8b04 	vpop	{d8-d9}
 8009906:	2000      	movs	r0, #0
 8009908:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	f001 b92d 	b.w	800ab6a <__math_oflow>
 8009910:	a387      	add	r3, pc, #540	; (adr r3, 8009b30 <__ieee754_exp+0x290>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f7 f88b 	bl	8000a34 <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	f000 808b 	beq.w	8009a3a <__ieee754_exp+0x19a>
 8009924:	ecbd 8b04 	vpop	{d8-d9}
 8009928:	4638      	mov	r0, r7
 800992a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800992e:	f001 b913 	b.w	800ab58 <__math_uflow>
 8009932:	4b95      	ldr	r3, [pc, #596]	; (8009b88 <__ieee754_exp+0x2e8>)
 8009934:	429a      	cmp	r2, r3
 8009936:	f240 80ac 	bls.w	8009a92 <__ieee754_exp+0x1f2>
 800993a:	4b94      	ldr	r3, [pc, #592]	; (8009b8c <__ieee754_exp+0x2ec>)
 800993c:	429a      	cmp	r2, r3
 800993e:	d87c      	bhi.n	8009a3a <__ieee754_exp+0x19a>
 8009940:	4b93      	ldr	r3, [pc, #588]	; (8009b90 <__ieee754_exp+0x2f0>)
 8009942:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	ee10 0a10 	vmov	r0, s0
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fc46 	bl	80001e0 <__aeabi_dsub>
 8009954:	4b8f      	ldr	r3, [pc, #572]	; (8009b94 <__ieee754_exp+0x2f4>)
 8009956:	00f7      	lsls	r7, r6, #3
 8009958:	443b      	add	r3, r7
 800995a:	ed93 7b00 	vldr	d7, [r3]
 800995e:	f1c6 0a01 	rsb	sl, r6, #1
 8009962:	4680      	mov	r8, r0
 8009964:	4689      	mov	r9, r1
 8009966:	ebaa 0a06 	sub.w	sl, sl, r6
 800996a:	eeb0 8a47 	vmov.f32	s16, s14
 800996e:	eef0 8a67 	vmov.f32	s17, s15
 8009972:	ec53 2b18 	vmov	r2, r3, d8
 8009976:	4640      	mov	r0, r8
 8009978:	4649      	mov	r1, r9
 800997a:	f7f6 fc31 	bl	80001e0 <__aeabi_dsub>
 800997e:	4604      	mov	r4, r0
 8009980:	460d      	mov	r5, r1
 8009982:	4622      	mov	r2, r4
 8009984:	462b      	mov	r3, r5
 8009986:	4620      	mov	r0, r4
 8009988:	4629      	mov	r1, r5
 800998a:	f7f6 fde1 	bl	8000550 <__aeabi_dmul>
 800998e:	a36a      	add	r3, pc, #424	; (adr r3, 8009b38 <__ieee754_exp+0x298>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	4606      	mov	r6, r0
 8009996:	460f      	mov	r7, r1
 8009998:	f7f6 fdda 	bl	8000550 <__aeabi_dmul>
 800999c:	a368      	add	r3, pc, #416	; (adr r3, 8009b40 <__ieee754_exp+0x2a0>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7f6 fc1d 	bl	80001e0 <__aeabi_dsub>
 80099a6:	4632      	mov	r2, r6
 80099a8:	463b      	mov	r3, r7
 80099aa:	f7f6 fdd1 	bl	8000550 <__aeabi_dmul>
 80099ae:	a366      	add	r3, pc, #408	; (adr r3, 8009b48 <__ieee754_exp+0x2a8>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f7f6 fc16 	bl	80001e4 <__adddf3>
 80099b8:	4632      	mov	r2, r6
 80099ba:	463b      	mov	r3, r7
 80099bc:	f7f6 fdc8 	bl	8000550 <__aeabi_dmul>
 80099c0:	a363      	add	r3, pc, #396	; (adr r3, 8009b50 <__ieee754_exp+0x2b0>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f7f6 fc0b 	bl	80001e0 <__aeabi_dsub>
 80099ca:	4632      	mov	r2, r6
 80099cc:	463b      	mov	r3, r7
 80099ce:	f7f6 fdbf 	bl	8000550 <__aeabi_dmul>
 80099d2:	a361      	add	r3, pc, #388	; (adr r3, 8009b58 <__ieee754_exp+0x2b8>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fc04 	bl	80001e4 <__adddf3>
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	f7f6 fdb6 	bl	8000550 <__aeabi_dmul>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7f6 fbf8 	bl	80001e0 <__aeabi_dsub>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4606      	mov	r6, r0
 80099f6:	460f      	mov	r7, r1
 80099f8:	4620      	mov	r0, r4
 80099fa:	4629      	mov	r1, r5
 80099fc:	f7f6 fda8 	bl	8000550 <__aeabi_dmul>
 8009a00:	ec41 0b19 	vmov	d9, r0, r1
 8009a04:	f1ba 0f00 	cmp.w	sl, #0
 8009a08:	d15d      	bne.n	8009ac6 <__ieee754_exp+0x226>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fbe4 	bl	80001e0 <__aeabi_dsub>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	ec51 0b19 	vmov	r0, r1, d9
 8009a20:	f7f6 fec0 	bl	80007a4 <__aeabi_ddiv>
 8009a24:	4622      	mov	r2, r4
 8009a26:	462b      	mov	r3, r5
 8009a28:	f7f6 fbda 	bl	80001e0 <__aeabi_dsub>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	2000      	movs	r0, #0
 8009a32:	4959      	ldr	r1, [pc, #356]	; (8009b98 <__ieee754_exp+0x2f8>)
 8009a34:	f7f6 fbd4 	bl	80001e0 <__aeabi_dsub>
 8009a38:	e74d      	b.n	80098d6 <__ieee754_exp+0x36>
 8009a3a:	4b58      	ldr	r3, [pc, #352]	; (8009b9c <__ieee754_exp+0x2fc>)
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009a42:	4629      	mov	r1, r5
 8009a44:	a346      	add	r3, pc, #280	; (adr r3, 8009b60 <__ieee754_exp+0x2c0>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f7f6 fd81 	bl	8000550 <__aeabi_dmul>
 8009a4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a52:	f7f6 fbc7 	bl	80001e4 <__adddf3>
 8009a56:	f7f7 f82b 	bl	8000ab0 <__aeabi_d2iz>
 8009a5a:	4682      	mov	sl, r0
 8009a5c:	f7f6 fd0e 	bl	800047c <__aeabi_i2d>
 8009a60:	a341      	add	r3, pc, #260	; (adr r3, 8009b68 <__ieee754_exp+0x2c8>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	f7f6 fd71 	bl	8000550 <__aeabi_dmul>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 fbb3 	bl	80001e0 <__aeabi_dsub>
 8009a7a:	a33d      	add	r3, pc, #244	; (adr r3, 8009b70 <__ieee754_exp+0x2d0>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	4680      	mov	r8, r0
 8009a82:	4689      	mov	r9, r1
 8009a84:	4630      	mov	r0, r6
 8009a86:	4639      	mov	r1, r7
 8009a88:	f7f6 fd62 	bl	8000550 <__aeabi_dmul>
 8009a8c:	ec41 0b18 	vmov	d8, r0, r1
 8009a90:	e76f      	b.n	8009972 <__ieee754_exp+0xd2>
 8009a92:	4b43      	ldr	r3, [pc, #268]	; (8009ba0 <__ieee754_exp+0x300>)
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d811      	bhi.n	8009abc <__ieee754_exp+0x21c>
 8009a98:	a337      	add	r3, pc, #220	; (adr r3, 8009b78 <__ieee754_exp+0x2d8>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	ee10 0a10 	vmov	r0, s0
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f7f6 fb9e 	bl	80001e4 <__adddf3>
 8009aa8:	4b3b      	ldr	r3, [pc, #236]	; (8009b98 <__ieee754_exp+0x2f8>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f7f6 ffe0 	bl	8000a70 <__aeabi_dcmpgt>
 8009ab0:	b138      	cbz	r0, 8009ac2 <__ieee754_exp+0x222>
 8009ab2:	4b39      	ldr	r3, [pc, #228]	; (8009b98 <__ieee754_exp+0x2f8>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	e70a      	b.n	80098d2 <__ieee754_exp+0x32>
 8009abc:	f04f 0a00 	mov.w	sl, #0
 8009ac0:	e75f      	b.n	8009982 <__ieee754_exp+0xe2>
 8009ac2:	4682      	mov	sl, r0
 8009ac4:	e75d      	b.n	8009982 <__ieee754_exp+0xe2>
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	463b      	mov	r3, r7
 8009aca:	2000      	movs	r0, #0
 8009acc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009ad0:	f7f6 fb86 	bl	80001e0 <__aeabi_dsub>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	ec51 0b19 	vmov	r0, r1, d9
 8009adc:	f7f6 fe62 	bl	80007a4 <__aeabi_ddiv>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	ec51 0b18 	vmov	r0, r1, d8
 8009ae8:	f7f6 fb7a 	bl	80001e0 <__aeabi_dsub>
 8009aec:	4642      	mov	r2, r8
 8009aee:	464b      	mov	r3, r9
 8009af0:	f7f6 fb76 	bl	80001e0 <__aeabi_dsub>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	2000      	movs	r0, #0
 8009afa:	4927      	ldr	r1, [pc, #156]	; (8009b98 <__ieee754_exp+0x2f8>)
 8009afc:	f7f6 fb70 	bl	80001e0 <__aeabi_dsub>
 8009b00:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009b04:	4592      	cmp	sl, r2
 8009b06:	db02      	blt.n	8009b0e <__ieee754_exp+0x26e>
 8009b08:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009b0c:	e6e3      	b.n	80098d6 <__ieee754_exp+0x36>
 8009b0e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009b12:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009b16:	2200      	movs	r2, #0
 8009b18:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009b1c:	f7f6 fd18 	bl	8000550 <__aeabi_dmul>
 8009b20:	e6d9      	b.n	80098d6 <__ieee754_exp+0x36>
 8009b22:	bf00      	nop
 8009b24:	f3af 8000 	nop.w
 8009b28:	fefa39ef 	.word	0xfefa39ef
 8009b2c:	40862e42 	.word	0x40862e42
 8009b30:	d52d3051 	.word	0xd52d3051
 8009b34:	c0874910 	.word	0xc0874910
 8009b38:	72bea4d0 	.word	0x72bea4d0
 8009b3c:	3e663769 	.word	0x3e663769
 8009b40:	c5d26bf1 	.word	0xc5d26bf1
 8009b44:	3ebbbd41 	.word	0x3ebbbd41
 8009b48:	af25de2c 	.word	0xaf25de2c
 8009b4c:	3f11566a 	.word	0x3f11566a
 8009b50:	16bebd93 	.word	0x16bebd93
 8009b54:	3f66c16c 	.word	0x3f66c16c
 8009b58:	5555553e 	.word	0x5555553e
 8009b5c:	3fc55555 	.word	0x3fc55555
 8009b60:	652b82fe 	.word	0x652b82fe
 8009b64:	3ff71547 	.word	0x3ff71547
 8009b68:	fee00000 	.word	0xfee00000
 8009b6c:	3fe62e42 	.word	0x3fe62e42
 8009b70:	35793c76 	.word	0x35793c76
 8009b74:	3dea39ef 	.word	0x3dea39ef
 8009b78:	8800759c 	.word	0x8800759c
 8009b7c:	7e37e43c 	.word	0x7e37e43c
 8009b80:	40862e41 	.word	0x40862e41
 8009b84:	7fefffff 	.word	0x7fefffff
 8009b88:	3fd62e42 	.word	0x3fd62e42
 8009b8c:	3ff0a2b1 	.word	0x3ff0a2b1
 8009b90:	08020e88 	.word	0x08020e88
 8009b94:	08020e98 	.word	0x08020e98
 8009b98:	3ff00000 	.word	0x3ff00000
 8009b9c:	08020e78 	.word	0x08020e78
 8009ba0:	3defffff 	.word	0x3defffff
 8009ba4:	00000000 	.word	0x00000000

08009ba8 <__ieee754_pow>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	ed2d 8b06 	vpush	{d8-d10}
 8009bb0:	b089      	sub	sp, #36	; 0x24
 8009bb2:	ed8d 1b00 	vstr	d1, [sp]
 8009bb6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009bba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009bbe:	ea58 0102 	orrs.w	r1, r8, r2
 8009bc2:	ec57 6b10 	vmov	r6, r7, d0
 8009bc6:	d115      	bne.n	8009bf4 <__ieee754_pow+0x4c>
 8009bc8:	19b3      	adds	r3, r6, r6
 8009bca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009bce:	4152      	adcs	r2, r2
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	4b89      	ldr	r3, [pc, #548]	; (8009df8 <__ieee754_pow+0x250>)
 8009bd4:	4193      	sbcs	r3, r2
 8009bd6:	f080 84d1 	bcs.w	800a57c <__ieee754_pow+0x9d4>
 8009bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bde:	4630      	mov	r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	f7f6 faff 	bl	80001e4 <__adddf3>
 8009be6:	ec41 0b10 	vmov	d0, r0, r1
 8009bea:	b009      	add	sp, #36	; 0x24
 8009bec:	ecbd 8b06 	vpop	{d8-d10}
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	4b81      	ldr	r3, [pc, #516]	; (8009dfc <__ieee754_pow+0x254>)
 8009bf6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	ee10 aa10 	vmov	sl, s0
 8009c00:	463d      	mov	r5, r7
 8009c02:	dc06      	bgt.n	8009c12 <__ieee754_pow+0x6a>
 8009c04:	d101      	bne.n	8009c0a <__ieee754_pow+0x62>
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d1e7      	bne.n	8009bda <__ieee754_pow+0x32>
 8009c0a:	4598      	cmp	r8, r3
 8009c0c:	dc01      	bgt.n	8009c12 <__ieee754_pow+0x6a>
 8009c0e:	d10f      	bne.n	8009c30 <__ieee754_pow+0x88>
 8009c10:	b172      	cbz	r2, 8009c30 <__ieee754_pow+0x88>
 8009c12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009c16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009c1a:	ea55 050a 	orrs.w	r5, r5, sl
 8009c1e:	d1dc      	bne.n	8009bda <__ieee754_pow+0x32>
 8009c20:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c24:	18db      	adds	r3, r3, r3
 8009c26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009c2a:	4152      	adcs	r2, r2
 8009c2c:	429d      	cmp	r5, r3
 8009c2e:	e7d0      	b.n	8009bd2 <__ieee754_pow+0x2a>
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	da3b      	bge.n	8009cac <__ieee754_pow+0x104>
 8009c34:	4b72      	ldr	r3, [pc, #456]	; (8009e00 <__ieee754_pow+0x258>)
 8009c36:	4598      	cmp	r8, r3
 8009c38:	dc51      	bgt.n	8009cde <__ieee754_pow+0x136>
 8009c3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009c3e:	4598      	cmp	r8, r3
 8009c40:	f340 84ab 	ble.w	800a59a <__ieee754_pow+0x9f2>
 8009c44:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c4c:	2b14      	cmp	r3, #20
 8009c4e:	dd0f      	ble.n	8009c70 <__ieee754_pow+0xc8>
 8009c50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009c54:	fa22 f103 	lsr.w	r1, r2, r3
 8009c58:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	f040 849c 	bne.w	800a59a <__ieee754_pow+0x9f2>
 8009c62:	f001 0101 	and.w	r1, r1, #1
 8009c66:	f1c1 0302 	rsb	r3, r1, #2
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	b182      	cbz	r2, 8009c90 <__ieee754_pow+0xe8>
 8009c6e:	e05f      	b.n	8009d30 <__ieee754_pow+0x188>
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	d15b      	bne.n	8009d2c <__ieee754_pow+0x184>
 8009c74:	f1c3 0314 	rsb	r3, r3, #20
 8009c78:	fa48 f103 	asr.w	r1, r8, r3
 8009c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c80:	4543      	cmp	r3, r8
 8009c82:	f040 8487 	bne.w	800a594 <__ieee754_pow+0x9ec>
 8009c86:	f001 0101 	and.w	r1, r1, #1
 8009c8a:	f1c1 0302 	rsb	r3, r1, #2
 8009c8e:	9304      	str	r3, [sp, #16]
 8009c90:	4b5c      	ldr	r3, [pc, #368]	; (8009e04 <__ieee754_pow+0x25c>)
 8009c92:	4598      	cmp	r8, r3
 8009c94:	d132      	bne.n	8009cfc <__ieee754_pow+0x154>
 8009c96:	f1b9 0f00 	cmp.w	r9, #0
 8009c9a:	f280 8477 	bge.w	800a58c <__ieee754_pow+0x9e4>
 8009c9e:	4959      	ldr	r1, [pc, #356]	; (8009e04 <__ieee754_pow+0x25c>)
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	f7f6 fd7d 	bl	80007a4 <__aeabi_ddiv>
 8009caa:	e79c      	b.n	8009be6 <__ieee754_pow+0x3e>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	d13d      	bne.n	8009d30 <__ieee754_pow+0x188>
 8009cb4:	4b51      	ldr	r3, [pc, #324]	; (8009dfc <__ieee754_pow+0x254>)
 8009cb6:	4598      	cmp	r8, r3
 8009cb8:	d1ea      	bne.n	8009c90 <__ieee754_pow+0xe8>
 8009cba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009cbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8009cc6:	f000 8459 	beq.w	800a57c <__ieee754_pow+0x9d4>
 8009cca:	4b4f      	ldr	r3, [pc, #316]	; (8009e08 <__ieee754_pow+0x260>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	dd08      	ble.n	8009ce2 <__ieee754_pow+0x13a>
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	f2c0 8456 	blt.w	800a584 <__ieee754_pow+0x9dc>
 8009cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cdc:	e783      	b.n	8009be6 <__ieee754_pow+0x3e>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e7e5      	b.n	8009cae <__ieee754_pow+0x106>
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	f04f 0000 	mov.w	r0, #0
 8009cea:	f04f 0100 	mov.w	r1, #0
 8009cee:	f6bf af7a 	bge.w	8009be6 <__ieee754_pow+0x3e>
 8009cf2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009cf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009cfa:	e774      	b.n	8009be6 <__ieee754_pow+0x3e>
 8009cfc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009d00:	d106      	bne.n	8009d10 <__ieee754_pow+0x168>
 8009d02:	4632      	mov	r2, r6
 8009d04:	463b      	mov	r3, r7
 8009d06:	4630      	mov	r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	f7f6 fc21 	bl	8000550 <__aeabi_dmul>
 8009d0e:	e76a      	b.n	8009be6 <__ieee754_pow+0x3e>
 8009d10:	4b3e      	ldr	r3, [pc, #248]	; (8009e0c <__ieee754_pow+0x264>)
 8009d12:	4599      	cmp	r9, r3
 8009d14:	d10c      	bne.n	8009d30 <__ieee754_pow+0x188>
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	db0a      	blt.n	8009d30 <__ieee754_pow+0x188>
 8009d1a:	ec47 6b10 	vmov	d0, r6, r7
 8009d1e:	b009      	add	sp, #36	; 0x24
 8009d20:	ecbd 8b06 	vpop	{d8-d10}
 8009d24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	f7ff ba52 	b.w	80091d0 <__ieee754_sqrt>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	ec47 6b10 	vmov	d0, r6, r7
 8009d34:	f000 fe6a 	bl	800aa0c <fabs>
 8009d38:	ec51 0b10 	vmov	r0, r1, d0
 8009d3c:	f1ba 0f00 	cmp.w	sl, #0
 8009d40:	d129      	bne.n	8009d96 <__ieee754_pow+0x1ee>
 8009d42:	b124      	cbz	r4, 8009d4e <__ieee754_pow+0x1a6>
 8009d44:	4b2f      	ldr	r3, [pc, #188]	; (8009e04 <__ieee754_pow+0x25c>)
 8009d46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d123      	bne.n	8009d96 <__ieee754_pow+0x1ee>
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	da05      	bge.n	8009d60 <__ieee754_pow+0x1b8>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	2000      	movs	r0, #0
 8009d5a:	492a      	ldr	r1, [pc, #168]	; (8009e04 <__ieee754_pow+0x25c>)
 8009d5c:	f7f6 fd22 	bl	80007a4 <__aeabi_ddiv>
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	f6bf af40 	bge.w	8009be6 <__ieee754_pow+0x3e>
 8009d66:	9b04      	ldr	r3, [sp, #16]
 8009d68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d70:	431c      	orrs	r4, r3
 8009d72:	d108      	bne.n	8009d86 <__ieee754_pow+0x1de>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f7f6 fa30 	bl	80001e0 <__aeabi_dsub>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	e78f      	b.n	8009ca6 <__ieee754_pow+0xfe>
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	f47f af2c 	bne.w	8009be6 <__ieee754_pow+0x3e>
 8009d8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d92:	4619      	mov	r1, r3
 8009d94:	e727      	b.n	8009be6 <__ieee754_pow+0x3e>
 8009d96:	0feb      	lsrs	r3, r5, #31
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	9306      	str	r3, [sp, #24]
 8009d9c:	9a06      	ldr	r2, [sp, #24]
 8009d9e:	9b04      	ldr	r3, [sp, #16]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d102      	bne.n	8009daa <__ieee754_pow+0x202>
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	e7e6      	b.n	8009d78 <__ieee754_pow+0x1d0>
 8009daa:	4b19      	ldr	r3, [pc, #100]	; (8009e10 <__ieee754_pow+0x268>)
 8009dac:	4598      	cmp	r8, r3
 8009dae:	f340 80fb 	ble.w	8009fa8 <__ieee754_pow+0x400>
 8009db2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009db6:	4598      	cmp	r8, r3
 8009db8:	4b13      	ldr	r3, [pc, #76]	; (8009e08 <__ieee754_pow+0x260>)
 8009dba:	dd0c      	ble.n	8009dd6 <__ieee754_pow+0x22e>
 8009dbc:	429c      	cmp	r4, r3
 8009dbe:	dc0f      	bgt.n	8009de0 <__ieee754_pow+0x238>
 8009dc0:	f1b9 0f00 	cmp.w	r9, #0
 8009dc4:	da0f      	bge.n	8009de6 <__ieee754_pow+0x23e>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	b009      	add	sp, #36	; 0x24
 8009dca:	ecbd 8b06 	vpop	{d8-d10}
 8009dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd2:	f000 beca 	b.w	800ab6a <__math_oflow>
 8009dd6:	429c      	cmp	r4, r3
 8009dd8:	dbf2      	blt.n	8009dc0 <__ieee754_pow+0x218>
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <__ieee754_pow+0x25c>)
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	dd19      	ble.n	8009e14 <__ieee754_pow+0x26c>
 8009de0:	f1b9 0f00 	cmp.w	r9, #0
 8009de4:	dcef      	bgt.n	8009dc6 <__ieee754_pow+0x21e>
 8009de6:	2000      	movs	r0, #0
 8009de8:	b009      	add	sp, #36	; 0x24
 8009dea:	ecbd 8b06 	vpop	{d8-d10}
 8009dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df2:	f000 beb1 	b.w	800ab58 <__math_uflow>
 8009df6:	bf00      	nop
 8009df8:	fff00000 	.word	0xfff00000
 8009dfc:	7ff00000 	.word	0x7ff00000
 8009e00:	433fffff 	.word	0x433fffff
 8009e04:	3ff00000 	.word	0x3ff00000
 8009e08:	3fefffff 	.word	0x3fefffff
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	41e00000 	.word	0x41e00000
 8009e14:	4b60      	ldr	r3, [pc, #384]	; (8009f98 <__ieee754_pow+0x3f0>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	f7f6 f9e2 	bl	80001e0 <__aeabi_dsub>
 8009e1c:	a354      	add	r3, pc, #336	; (adr r3, 8009f70 <__ieee754_pow+0x3c8>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	4604      	mov	r4, r0
 8009e24:	460d      	mov	r5, r1
 8009e26:	f7f6 fb93 	bl	8000550 <__aeabi_dmul>
 8009e2a:	a353      	add	r3, pc, #332	; (adr r3, 8009f78 <__ieee754_pow+0x3d0>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	4606      	mov	r6, r0
 8009e32:	460f      	mov	r7, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f7f6 fb8a 	bl	8000550 <__aeabi_dmul>
 8009e3c:	4b57      	ldr	r3, [pc, #348]	; (8009f9c <__ieee754_pow+0x3f4>)
 8009e3e:	4682      	mov	sl, r0
 8009e40:	468b      	mov	fp, r1
 8009e42:	2200      	movs	r2, #0
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 fb82 	bl	8000550 <__aeabi_dmul>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	a14b      	add	r1, pc, #300	; (adr r1, 8009f80 <__ieee754_pow+0x3d8>)
 8009e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e56:	f7f6 f9c3 	bl	80001e0 <__aeabi_dsub>
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	462b      	mov	r3, r5
 8009e5e:	f7f6 fb77 	bl	8000550 <__aeabi_dmul>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	2000      	movs	r0, #0
 8009e68:	494d      	ldr	r1, [pc, #308]	; (8009fa0 <__ieee754_pow+0x3f8>)
 8009e6a:	f7f6 f9b9 	bl	80001e0 <__aeabi_dsub>
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4680      	mov	r8, r0
 8009e72:	4689      	mov	r9, r1
 8009e74:	462b      	mov	r3, r5
 8009e76:	4620      	mov	r0, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7f6 fb69 	bl	8000550 <__aeabi_dmul>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 fb63 	bl	8000550 <__aeabi_dmul>
 8009e8a:	a33f      	add	r3, pc, #252	; (adr r3, 8009f88 <__ieee754_pow+0x3e0>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 fb5e 	bl	8000550 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4650      	mov	r0, sl
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	f7f6 f9a0 	bl	80001e0 <__aeabi_dsub>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 f99a 	bl	80001e4 <__adddf3>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	460d      	mov	r5, r1
 8009eba:	f7f6 f991 	bl	80001e0 <__aeabi_dsub>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	f7f6 f98b 	bl	80001e0 <__aeabi_dsub>
 8009eca:	9b04      	ldr	r3, [sp, #16]
 8009ecc:	9a06      	ldr	r2, [sp, #24]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	4682      	mov	sl, r0
 8009ed4:	468b      	mov	fp, r1
 8009ed6:	f040 81e7 	bne.w	800a2a8 <__ieee754_pow+0x700>
 8009eda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009f90 <__ieee754_pow+0x3e8>
 8009ede:	eeb0 8a47 	vmov.f32	s16, s14
 8009ee2:	eef0 8a67 	vmov.f32	s17, s15
 8009ee6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009eea:	2600      	movs	r6, #0
 8009eec:	4632      	mov	r2, r6
 8009eee:	463b      	mov	r3, r7
 8009ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ef4:	f7f6 f974 	bl	80001e0 <__aeabi_dsub>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	462b      	mov	r3, r5
 8009efc:	f7f6 fb28 	bl	8000550 <__aeabi_dmul>
 8009f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f04:	4680      	mov	r8, r0
 8009f06:	4689      	mov	r9, r1
 8009f08:	4650      	mov	r0, sl
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	f7f6 fb20 	bl	8000550 <__aeabi_dmul>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4640      	mov	r0, r8
 8009f16:	4649      	mov	r1, r9
 8009f18:	f7f6 f964 	bl	80001e4 <__adddf3>
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	463b      	mov	r3, r7
 8009f20:	4680      	mov	r8, r0
 8009f22:	4689      	mov	r9, r1
 8009f24:	4620      	mov	r0, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	f7f6 fb12 	bl	8000550 <__aeabi_dmul>
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4604      	mov	r4, r0
 8009f30:	460d      	mov	r5, r1
 8009f32:	4602      	mov	r2, r0
 8009f34:	4649      	mov	r1, r9
 8009f36:	4640      	mov	r0, r8
 8009f38:	f7f6 f954 	bl	80001e4 <__adddf3>
 8009f3c:	4b19      	ldr	r3, [pc, #100]	; (8009fa4 <__ieee754_pow+0x3fc>)
 8009f3e:	4299      	cmp	r1, r3
 8009f40:	ec45 4b19 	vmov	d9, r4, r5
 8009f44:	4606      	mov	r6, r0
 8009f46:	460f      	mov	r7, r1
 8009f48:	468b      	mov	fp, r1
 8009f4a:	f340 82f0 	ble.w	800a52e <__ieee754_pow+0x986>
 8009f4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f56:	4303      	orrs	r3, r0
 8009f58:	f000 81e4 	beq.w	800a324 <__ieee754_pow+0x77c>
 8009f5c:	ec51 0b18 	vmov	r0, r1, d8
 8009f60:	2200      	movs	r2, #0
 8009f62:	2300      	movs	r3, #0
 8009f64:	f7f6 fd66 	bl	8000a34 <__aeabi_dcmplt>
 8009f68:	3800      	subs	r0, #0
 8009f6a:	bf18      	it	ne
 8009f6c:	2001      	movne	r0, #1
 8009f6e:	e72b      	b.n	8009dc8 <__ieee754_pow+0x220>
 8009f70:	60000000 	.word	0x60000000
 8009f74:	3ff71547 	.word	0x3ff71547
 8009f78:	f85ddf44 	.word	0xf85ddf44
 8009f7c:	3e54ae0b 	.word	0x3e54ae0b
 8009f80:	55555555 	.word	0x55555555
 8009f84:	3fd55555 	.word	0x3fd55555
 8009f88:	652b82fe 	.word	0x652b82fe
 8009f8c:	3ff71547 	.word	0x3ff71547
 8009f90:	00000000 	.word	0x00000000
 8009f94:	bff00000 	.word	0xbff00000
 8009f98:	3ff00000 	.word	0x3ff00000
 8009f9c:	3fd00000 	.word	0x3fd00000
 8009fa0:	3fe00000 	.word	0x3fe00000
 8009fa4:	408fffff 	.word	0x408fffff
 8009fa8:	4bd5      	ldr	r3, [pc, #852]	; (800a300 <__ieee754_pow+0x758>)
 8009faa:	402b      	ands	r3, r5
 8009fac:	2200      	movs	r2, #0
 8009fae:	b92b      	cbnz	r3, 8009fbc <__ieee754_pow+0x414>
 8009fb0:	4bd4      	ldr	r3, [pc, #848]	; (800a304 <__ieee754_pow+0x75c>)
 8009fb2:	f7f6 facd 	bl	8000550 <__aeabi_dmul>
 8009fb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009fba:	460c      	mov	r4, r1
 8009fbc:	1523      	asrs	r3, r4, #20
 8009fbe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009fc2:	4413      	add	r3, r2
 8009fc4:	9305      	str	r3, [sp, #20]
 8009fc6:	4bd0      	ldr	r3, [pc, #832]	; (800a308 <__ieee754_pow+0x760>)
 8009fc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009fcc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009fd0:	429c      	cmp	r4, r3
 8009fd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009fd6:	dd08      	ble.n	8009fea <__ieee754_pow+0x442>
 8009fd8:	4bcc      	ldr	r3, [pc, #816]	; (800a30c <__ieee754_pow+0x764>)
 8009fda:	429c      	cmp	r4, r3
 8009fdc:	f340 8162 	ble.w	800a2a4 <__ieee754_pow+0x6fc>
 8009fe0:	9b05      	ldr	r3, [sp, #20]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009fea:	2400      	movs	r4, #0
 8009fec:	00e3      	lsls	r3, r4, #3
 8009fee:	9307      	str	r3, [sp, #28]
 8009ff0:	4bc7      	ldr	r3, [pc, #796]	; (800a310 <__ieee754_pow+0x768>)
 8009ff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ff6:	ed93 7b00 	vldr	d7, [r3]
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	ec53 2b17 	vmov	r2, r3, d7
 800a000:	eeb0 9a47 	vmov.f32	s18, s14
 800a004:	eef0 9a67 	vmov.f32	s19, s15
 800a008:	4682      	mov	sl, r0
 800a00a:	f7f6 f8e9 	bl	80001e0 <__aeabi_dsub>
 800a00e:	4652      	mov	r2, sl
 800a010:	4606      	mov	r6, r0
 800a012:	460f      	mov	r7, r1
 800a014:	462b      	mov	r3, r5
 800a016:	ec51 0b19 	vmov	r0, r1, d9
 800a01a:	f7f6 f8e3 	bl	80001e4 <__adddf3>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	2000      	movs	r0, #0
 800a024:	49bb      	ldr	r1, [pc, #748]	; (800a314 <__ieee754_pow+0x76c>)
 800a026:	f7f6 fbbd 	bl	80007a4 <__aeabi_ddiv>
 800a02a:	ec41 0b1a 	vmov	d10, r0, r1
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4630      	mov	r0, r6
 800a034:	4639      	mov	r1, r7
 800a036:	f7f6 fa8b 	bl	8000550 <__aeabi_dmul>
 800a03a:	2300      	movs	r3, #0
 800a03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a040:	9302      	str	r3, [sp, #8]
 800a042:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a046:	46ab      	mov	fp, r5
 800a048:	106d      	asrs	r5, r5, #1
 800a04a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a04e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a052:	ec41 0b18 	vmov	d8, r0, r1
 800a056:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a05a:	2200      	movs	r2, #0
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	4614      	mov	r4, r2
 800a062:	461d      	mov	r5, r3
 800a064:	f7f6 fa74 	bl	8000550 <__aeabi_dmul>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4630      	mov	r0, r6
 800a06e:	4639      	mov	r1, r7
 800a070:	f7f6 f8b6 	bl	80001e0 <__aeabi_dsub>
 800a074:	ec53 2b19 	vmov	r2, r3, d9
 800a078:	4606      	mov	r6, r0
 800a07a:	460f      	mov	r7, r1
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 f8ae 	bl	80001e0 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4650      	mov	r0, sl
 800a08a:	4659      	mov	r1, fp
 800a08c:	f7f6 f8a8 	bl	80001e0 <__aeabi_dsub>
 800a090:	4642      	mov	r2, r8
 800a092:	464b      	mov	r3, r9
 800a094:	f7f6 fa5c 	bl	8000550 <__aeabi_dmul>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 f89e 	bl	80001e0 <__aeabi_dsub>
 800a0a4:	ec53 2b1a 	vmov	r2, r3, d10
 800a0a8:	f7f6 fa52 	bl	8000550 <__aeabi_dmul>
 800a0ac:	ec53 2b18 	vmov	r2, r3, d8
 800a0b0:	ec41 0b19 	vmov	d9, r0, r1
 800a0b4:	ec51 0b18 	vmov	r0, r1, d8
 800a0b8:	f7f6 fa4a 	bl	8000550 <__aeabi_dmul>
 800a0bc:	a37c      	add	r3, pc, #496	; (adr r3, 800a2b0 <__ieee754_pow+0x708>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	f7f6 fa43 	bl	8000550 <__aeabi_dmul>
 800a0ca:	a37b      	add	r3, pc, #492	; (adr r3, 800a2b8 <__ieee754_pow+0x710>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f888 	bl	80001e4 <__adddf3>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f7f6 fa3a 	bl	8000550 <__aeabi_dmul>
 800a0dc:	a378      	add	r3, pc, #480	; (adr r3, 800a2c0 <__ieee754_pow+0x718>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f87f 	bl	80001e4 <__adddf3>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 fa31 	bl	8000550 <__aeabi_dmul>
 800a0ee:	a376      	add	r3, pc, #472	; (adr r3, 800a2c8 <__ieee754_pow+0x720>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f876 	bl	80001e4 <__adddf3>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	f7f6 fa28 	bl	8000550 <__aeabi_dmul>
 800a100:	a373      	add	r3, pc, #460	; (adr r3, 800a2d0 <__ieee754_pow+0x728>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f86d 	bl	80001e4 <__adddf3>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 fa1f 	bl	8000550 <__aeabi_dmul>
 800a112:	a371      	add	r3, pc, #452	; (adr r3, 800a2d8 <__ieee754_pow+0x730>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f864 	bl	80001e4 <__adddf3>
 800a11c:	4622      	mov	r2, r4
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	462b      	mov	r3, r5
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 fa12 	bl	8000550 <__aeabi_dmul>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4630      	mov	r0, r6
 800a132:	4639      	mov	r1, r7
 800a134:	f7f6 fa0c 	bl	8000550 <__aeabi_dmul>
 800a138:	4642      	mov	r2, r8
 800a13a:	4604      	mov	r4, r0
 800a13c:	460d      	mov	r5, r1
 800a13e:	464b      	mov	r3, r9
 800a140:	ec51 0b18 	vmov	r0, r1, d8
 800a144:	f7f6 f84e 	bl	80001e4 <__adddf3>
 800a148:	ec53 2b19 	vmov	r2, r3, d9
 800a14c:	f7f6 fa00 	bl	8000550 <__aeabi_dmul>
 800a150:	4622      	mov	r2, r4
 800a152:	462b      	mov	r3, r5
 800a154:	f7f6 f846 	bl	80001e4 <__adddf3>
 800a158:	4642      	mov	r2, r8
 800a15a:	4682      	mov	sl, r0
 800a15c:	468b      	mov	fp, r1
 800a15e:	464b      	mov	r3, r9
 800a160:	4640      	mov	r0, r8
 800a162:	4649      	mov	r1, r9
 800a164:	f7f6 f9f4 	bl	8000550 <__aeabi_dmul>
 800a168:	4b6b      	ldr	r3, [pc, #428]	; (800a318 <__ieee754_pow+0x770>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	f7f6 f838 	bl	80001e4 <__adddf3>
 800a174:	4652      	mov	r2, sl
 800a176:	465b      	mov	r3, fp
 800a178:	f7f6 f834 	bl	80001e4 <__adddf3>
 800a17c:	2000      	movs	r0, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4640      	mov	r0, r8
 800a188:	4649      	mov	r1, r9
 800a18a:	f7f6 f9e1 	bl	8000550 <__aeabi_dmul>
 800a18e:	4b62      	ldr	r3, [pc, #392]	; (800a318 <__ieee754_pow+0x770>)
 800a190:	4680      	mov	r8, r0
 800a192:	4689      	mov	r9, r1
 800a194:	2200      	movs	r2, #0
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f821 	bl	80001e0 <__aeabi_dsub>
 800a19e:	4632      	mov	r2, r6
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	f7f6 f81d 	bl	80001e0 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	f7f6 f817 	bl	80001e0 <__aeabi_dsub>
 800a1b2:	ec53 2b18 	vmov	r2, r3, d8
 800a1b6:	f7f6 f9cb 	bl	8000550 <__aeabi_dmul>
 800a1ba:	4622      	mov	r2, r4
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460f      	mov	r7, r1
 800a1c0:	462b      	mov	r3, r5
 800a1c2:	ec51 0b19 	vmov	r0, r1, d9
 800a1c6:	f7f6 f9c3 	bl	8000550 <__aeabi_dmul>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	f7f6 f807 	bl	80001e4 <__adddf3>
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460f      	mov	r7, r1
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f5 ffff 	bl	80001e4 <__adddf3>
 800a1e6:	a33e      	add	r3, pc, #248	; (adr r3, 800a2e0 <__ieee754_pow+0x738>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	f7f6 f9ad 	bl	8000550 <__aeabi_dmul>
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	ec41 0b18 	vmov	d8, r0, r1
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	4620      	mov	r0, r4
 800a200:	4629      	mov	r1, r5
 800a202:	f7f5 ffed 	bl	80001e0 <__aeabi_dsub>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4630      	mov	r0, r6
 800a20c:	4639      	mov	r1, r7
 800a20e:	f7f5 ffe7 	bl	80001e0 <__aeabi_dsub>
 800a212:	a335      	add	r3, pc, #212	; (adr r3, 800a2e8 <__ieee754_pow+0x740>)
 800a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a218:	f7f6 f99a 	bl	8000550 <__aeabi_dmul>
 800a21c:	a334      	add	r3, pc, #208	; (adr r3, 800a2f0 <__ieee754_pow+0x748>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f7f6 f991 	bl	8000550 <__aeabi_dmul>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f5 ffd5 	bl	80001e4 <__adddf3>
 800a23a:	9a07      	ldr	r2, [sp, #28]
 800a23c:	4b37      	ldr	r3, [pc, #220]	; (800a31c <__ieee754_pow+0x774>)
 800a23e:	4413      	add	r3, r2
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f5 ffce 	bl	80001e4 <__adddf3>
 800a248:	4682      	mov	sl, r0
 800a24a:	9805      	ldr	r0, [sp, #20]
 800a24c:	468b      	mov	fp, r1
 800a24e:	f7f6 f915 	bl	800047c <__aeabi_i2d>
 800a252:	9a07      	ldr	r2, [sp, #28]
 800a254:	4b32      	ldr	r3, [pc, #200]	; (800a320 <__ieee754_pow+0x778>)
 800a256:	4413      	add	r3, r2
 800a258:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	4652      	mov	r2, sl
 800a262:	465b      	mov	r3, fp
 800a264:	ec51 0b18 	vmov	r0, r1, d8
 800a268:	f7f5 ffbc 	bl	80001e4 <__adddf3>
 800a26c:	4642      	mov	r2, r8
 800a26e:	464b      	mov	r3, r9
 800a270:	f7f5 ffb8 	bl	80001e4 <__adddf3>
 800a274:	4632      	mov	r2, r6
 800a276:	463b      	mov	r3, r7
 800a278:	f7f5 ffb4 	bl	80001e4 <__adddf3>
 800a27c:	2000      	movs	r0, #0
 800a27e:	4632      	mov	r2, r6
 800a280:	463b      	mov	r3, r7
 800a282:	4604      	mov	r4, r0
 800a284:	460d      	mov	r5, r1
 800a286:	f7f5 ffab 	bl	80001e0 <__aeabi_dsub>
 800a28a:	4642      	mov	r2, r8
 800a28c:	464b      	mov	r3, r9
 800a28e:	f7f5 ffa7 	bl	80001e0 <__aeabi_dsub>
 800a292:	ec53 2b18 	vmov	r2, r3, d8
 800a296:	f7f5 ffa3 	bl	80001e0 <__aeabi_dsub>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	4650      	mov	r0, sl
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	e610      	b.n	8009ec6 <__ieee754_pow+0x31e>
 800a2a4:	2401      	movs	r4, #1
 800a2a6:	e6a1      	b.n	8009fec <__ieee754_pow+0x444>
 800a2a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a2f8 <__ieee754_pow+0x750>
 800a2ac:	e617      	b.n	8009ede <__ieee754_pow+0x336>
 800a2ae:	bf00      	nop
 800a2b0:	4a454eef 	.word	0x4a454eef
 800a2b4:	3fca7e28 	.word	0x3fca7e28
 800a2b8:	93c9db65 	.word	0x93c9db65
 800a2bc:	3fcd864a 	.word	0x3fcd864a
 800a2c0:	a91d4101 	.word	0xa91d4101
 800a2c4:	3fd17460 	.word	0x3fd17460
 800a2c8:	518f264d 	.word	0x518f264d
 800a2cc:	3fd55555 	.word	0x3fd55555
 800a2d0:	db6fabff 	.word	0xdb6fabff
 800a2d4:	3fdb6db6 	.word	0x3fdb6db6
 800a2d8:	33333303 	.word	0x33333303
 800a2dc:	3fe33333 	.word	0x3fe33333
 800a2e0:	e0000000 	.word	0xe0000000
 800a2e4:	3feec709 	.word	0x3feec709
 800a2e8:	dc3a03fd 	.word	0xdc3a03fd
 800a2ec:	3feec709 	.word	0x3feec709
 800a2f0:	145b01f5 	.word	0x145b01f5
 800a2f4:	be3e2fe0 	.word	0xbe3e2fe0
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	3ff00000 	.word	0x3ff00000
 800a300:	7ff00000 	.word	0x7ff00000
 800a304:	43400000 	.word	0x43400000
 800a308:	0003988e 	.word	0x0003988e
 800a30c:	000bb679 	.word	0x000bb679
 800a310:	08020ea8 	.word	0x08020ea8
 800a314:	3ff00000 	.word	0x3ff00000
 800a318:	40080000 	.word	0x40080000
 800a31c:	08020ec8 	.word	0x08020ec8
 800a320:	08020eb8 	.word	0x08020eb8
 800a324:	a3b3      	add	r3, pc, #716	; (adr r3, 800a5f4 <__ieee754_pow+0xa4c>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	4640      	mov	r0, r8
 800a32c:	4649      	mov	r1, r9
 800a32e:	f7f5 ff59 	bl	80001e4 <__adddf3>
 800a332:	4622      	mov	r2, r4
 800a334:	ec41 0b1a 	vmov	d10, r0, r1
 800a338:	462b      	mov	r3, r5
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ff4f 	bl	80001e0 <__aeabi_dsub>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	ec51 0b1a 	vmov	r0, r1, d10
 800a34a:	f7f6 fb91 	bl	8000a70 <__aeabi_dcmpgt>
 800a34e:	2800      	cmp	r0, #0
 800a350:	f47f ae04 	bne.w	8009f5c <__ieee754_pow+0x3b4>
 800a354:	4aa2      	ldr	r2, [pc, #648]	; (800a5e0 <__ieee754_pow+0xa38>)
 800a356:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a35a:	4293      	cmp	r3, r2
 800a35c:	f340 8107 	ble.w	800a56e <__ieee754_pow+0x9c6>
 800a360:	151b      	asrs	r3, r3, #20
 800a362:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a366:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a36a:	fa4a fa03 	asr.w	sl, sl, r3
 800a36e:	44da      	add	sl, fp
 800a370:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a374:	489b      	ldr	r0, [pc, #620]	; (800a5e4 <__ieee754_pow+0xa3c>)
 800a376:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a37a:	4108      	asrs	r0, r1
 800a37c:	ea00 030a 	and.w	r3, r0, sl
 800a380:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a384:	f1c1 0114 	rsb	r1, r1, #20
 800a388:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a38c:	fa4a fa01 	asr.w	sl, sl, r1
 800a390:	f1bb 0f00 	cmp.w	fp, #0
 800a394:	f04f 0200 	mov.w	r2, #0
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	bfb8      	it	lt
 800a39e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3a2:	f7f5 ff1d 	bl	80001e0 <__aeabi_dsub>
 800a3a6:	ec41 0b19 	vmov	d9, r0, r1
 800a3aa:	4642      	mov	r2, r8
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	ec51 0b19 	vmov	r0, r1, d9
 800a3b2:	f7f5 ff17 	bl	80001e4 <__adddf3>
 800a3b6:	a37a      	add	r3, pc, #488	; (adr r3, 800a5a0 <__ieee754_pow+0x9f8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	2000      	movs	r0, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	f7f6 f8c5 	bl	8000550 <__aeabi_dmul>
 800a3c6:	ec53 2b19 	vmov	r2, r3, d9
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7f5 ff05 	bl	80001e0 <__aeabi_dsub>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f5 feff 	bl	80001e0 <__aeabi_dsub>
 800a3e2:	a371      	add	r3, pc, #452	; (adr r3, 800a5a8 <__ieee754_pow+0xa00>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f6 f8b2 	bl	8000550 <__aeabi_dmul>
 800a3ec:	a370      	add	r3, pc, #448	; (adr r3, 800a5b0 <__ieee754_pow+0xa08>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	f7f6 f8a9 	bl	8000550 <__aeabi_dmul>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4640      	mov	r0, r8
 800a404:	4649      	mov	r1, r9
 800a406:	f7f5 feed 	bl	80001e4 <__adddf3>
 800a40a:	4604      	mov	r4, r0
 800a40c:	460d      	mov	r5, r1
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f5 fee5 	bl	80001e4 <__adddf3>
 800a41a:	4632      	mov	r2, r6
 800a41c:	463b      	mov	r3, r7
 800a41e:	4680      	mov	r8, r0
 800a420:	4689      	mov	r9, r1
 800a422:	f7f5 fedd 	bl	80001e0 <__aeabi_dsub>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4620      	mov	r0, r4
 800a42c:	4629      	mov	r1, r5
 800a42e:	f7f5 fed7 	bl	80001e0 <__aeabi_dsub>
 800a432:	4642      	mov	r2, r8
 800a434:	4606      	mov	r6, r0
 800a436:	460f      	mov	r7, r1
 800a438:	464b      	mov	r3, r9
 800a43a:	4640      	mov	r0, r8
 800a43c:	4649      	mov	r1, r9
 800a43e:	f7f6 f887 	bl	8000550 <__aeabi_dmul>
 800a442:	a35d      	add	r3, pc, #372	; (adr r3, 800a5b8 <__ieee754_pow+0xa10>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	4604      	mov	r4, r0
 800a44a:	460d      	mov	r5, r1
 800a44c:	f7f6 f880 	bl	8000550 <__aeabi_dmul>
 800a450:	a35b      	add	r3, pc, #364	; (adr r3, 800a5c0 <__ieee754_pow+0xa18>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f7f5 fec3 	bl	80001e0 <__aeabi_dsub>
 800a45a:	4622      	mov	r2, r4
 800a45c:	462b      	mov	r3, r5
 800a45e:	f7f6 f877 	bl	8000550 <__aeabi_dmul>
 800a462:	a359      	add	r3, pc, #356	; (adr r3, 800a5c8 <__ieee754_pow+0xa20>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f5 febc 	bl	80001e4 <__adddf3>
 800a46c:	4622      	mov	r2, r4
 800a46e:	462b      	mov	r3, r5
 800a470:	f7f6 f86e 	bl	8000550 <__aeabi_dmul>
 800a474:	a356      	add	r3, pc, #344	; (adr r3, 800a5d0 <__ieee754_pow+0xa28>)
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	f7f5 feb1 	bl	80001e0 <__aeabi_dsub>
 800a47e:	4622      	mov	r2, r4
 800a480:	462b      	mov	r3, r5
 800a482:	f7f6 f865 	bl	8000550 <__aeabi_dmul>
 800a486:	a354      	add	r3, pc, #336	; (adr r3, 800a5d8 <__ieee754_pow+0xa30>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f7f5 feaa 	bl	80001e4 <__adddf3>
 800a490:	4622      	mov	r2, r4
 800a492:	462b      	mov	r3, r5
 800a494:	f7f6 f85c 	bl	8000550 <__aeabi_dmul>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4640      	mov	r0, r8
 800a49e:	4649      	mov	r1, r9
 800a4a0:	f7f5 fe9e 	bl	80001e0 <__aeabi_dsub>
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	f7f6 f84e 	bl	8000550 <__aeabi_dmul>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	ec41 0b19 	vmov	d9, r0, r1
 800a4ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f5 fe8d 	bl	80001e0 <__aeabi_dsub>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	ec51 0b19 	vmov	r0, r1, d9
 800a4ce:	f7f6 f969 	bl	80007a4 <__aeabi_ddiv>
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	463b      	mov	r3, r7
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f6 f837 	bl	8000550 <__aeabi_dmul>
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	f7f5 fe7d 	bl	80001e4 <__adddf3>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f5 fe75 	bl	80001e0 <__aeabi_dsub>
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	f7f5 fe71 	bl	80001e0 <__aeabi_dsub>
 800a4fe:	460b      	mov	r3, r1
 800a500:	4602      	mov	r2, r0
 800a502:	4939      	ldr	r1, [pc, #228]	; (800a5e8 <__ieee754_pow+0xa40>)
 800a504:	2000      	movs	r0, #0
 800a506:	f7f5 fe6b 	bl	80001e0 <__aeabi_dsub>
 800a50a:	ec41 0b10 	vmov	d0, r0, r1
 800a50e:	ee10 3a90 	vmov	r3, s1
 800a512:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a51a:	da2b      	bge.n	800a574 <__ieee754_pow+0x9cc>
 800a51c:	4650      	mov	r0, sl
 800a51e:	f000 fa7f 	bl	800aa20 <scalbn>
 800a522:	ec51 0b10 	vmov	r0, r1, d0
 800a526:	ec53 2b18 	vmov	r2, r3, d8
 800a52a:	f7ff bbee 	b.w	8009d0a <__ieee754_pow+0x162>
 800a52e:	4b2f      	ldr	r3, [pc, #188]	; (800a5ec <__ieee754_pow+0xa44>)
 800a530:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a534:	429e      	cmp	r6, r3
 800a536:	f77f af0d 	ble.w	800a354 <__ieee754_pow+0x7ac>
 800a53a:	4b2d      	ldr	r3, [pc, #180]	; (800a5f0 <__ieee754_pow+0xa48>)
 800a53c:	440b      	add	r3, r1
 800a53e:	4303      	orrs	r3, r0
 800a540:	d009      	beq.n	800a556 <__ieee754_pow+0x9ae>
 800a542:	ec51 0b18 	vmov	r0, r1, d8
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	f7f6 fa73 	bl	8000a34 <__aeabi_dcmplt>
 800a54e:	3800      	subs	r0, #0
 800a550:	bf18      	it	ne
 800a552:	2001      	movne	r0, #1
 800a554:	e448      	b.n	8009de8 <__ieee754_pow+0x240>
 800a556:	4622      	mov	r2, r4
 800a558:	462b      	mov	r3, r5
 800a55a:	f7f5 fe41 	bl	80001e0 <__aeabi_dsub>
 800a55e:	4642      	mov	r2, r8
 800a560:	464b      	mov	r3, r9
 800a562:	f7f6 fa7b 	bl	8000a5c <__aeabi_dcmpge>
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f aef4 	beq.w	800a354 <__ieee754_pow+0x7ac>
 800a56c:	e7e9      	b.n	800a542 <__ieee754_pow+0x99a>
 800a56e:	f04f 0a00 	mov.w	sl, #0
 800a572:	e71a      	b.n	800a3aa <__ieee754_pow+0x802>
 800a574:	ec51 0b10 	vmov	r0, r1, d0
 800a578:	4619      	mov	r1, r3
 800a57a:	e7d4      	b.n	800a526 <__ieee754_pow+0x97e>
 800a57c:	491a      	ldr	r1, [pc, #104]	; (800a5e8 <__ieee754_pow+0xa40>)
 800a57e:	2000      	movs	r0, #0
 800a580:	f7ff bb31 	b.w	8009be6 <__ieee754_pow+0x3e>
 800a584:	2000      	movs	r0, #0
 800a586:	2100      	movs	r1, #0
 800a588:	f7ff bb2d 	b.w	8009be6 <__ieee754_pow+0x3e>
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7ff bb29 	b.w	8009be6 <__ieee754_pow+0x3e>
 800a594:	9204      	str	r2, [sp, #16]
 800a596:	f7ff bb7b 	b.w	8009c90 <__ieee754_pow+0xe8>
 800a59a:	2300      	movs	r3, #0
 800a59c:	f7ff bb65 	b.w	8009c6a <__ieee754_pow+0xc2>
 800a5a0:	00000000 	.word	0x00000000
 800a5a4:	3fe62e43 	.word	0x3fe62e43
 800a5a8:	fefa39ef 	.word	0xfefa39ef
 800a5ac:	3fe62e42 	.word	0x3fe62e42
 800a5b0:	0ca86c39 	.word	0x0ca86c39
 800a5b4:	be205c61 	.word	0xbe205c61
 800a5b8:	72bea4d0 	.word	0x72bea4d0
 800a5bc:	3e663769 	.word	0x3e663769
 800a5c0:	c5d26bf1 	.word	0xc5d26bf1
 800a5c4:	3ebbbd41 	.word	0x3ebbbd41
 800a5c8:	af25de2c 	.word	0xaf25de2c
 800a5cc:	3f11566a 	.word	0x3f11566a
 800a5d0:	16bebd93 	.word	0x16bebd93
 800a5d4:	3f66c16c 	.word	0x3f66c16c
 800a5d8:	5555553e 	.word	0x5555553e
 800a5dc:	3fc55555 	.word	0x3fc55555
 800a5e0:	3fe00000 	.word	0x3fe00000
 800a5e4:	fff00000 	.word	0xfff00000
 800a5e8:	3ff00000 	.word	0x3ff00000
 800a5ec:	4090cbff 	.word	0x4090cbff
 800a5f0:	3f6f3400 	.word	0x3f6f3400
 800a5f4:	652b82fe 	.word	0x652b82fe
 800a5f8:	3c971547 	.word	0x3c971547
 800a5fc:	00000000 	.word	0x00000000

0800a600 <__ieee754_rem_pio2>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	ed2d 8b02 	vpush	{d8}
 800a608:	ec55 4b10 	vmov	r4, r5, d0
 800a60c:	4bca      	ldr	r3, [pc, #808]	; (800a938 <__ieee754_rem_pio2+0x338>)
 800a60e:	b08b      	sub	sp, #44	; 0x2c
 800a610:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a614:	4598      	cmp	r8, r3
 800a616:	4682      	mov	sl, r0
 800a618:	9502      	str	r5, [sp, #8]
 800a61a:	dc08      	bgt.n	800a62e <__ieee754_rem_pio2+0x2e>
 800a61c:	2200      	movs	r2, #0
 800a61e:	2300      	movs	r3, #0
 800a620:	ed80 0b00 	vstr	d0, [r0]
 800a624:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a628:	f04f 0b00 	mov.w	fp, #0
 800a62c:	e028      	b.n	800a680 <__ieee754_rem_pio2+0x80>
 800a62e:	4bc3      	ldr	r3, [pc, #780]	; (800a93c <__ieee754_rem_pio2+0x33c>)
 800a630:	4598      	cmp	r8, r3
 800a632:	dc78      	bgt.n	800a726 <__ieee754_rem_pio2+0x126>
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	4ec2      	ldr	r6, [pc, #776]	; (800a940 <__ieee754_rem_pio2+0x340>)
 800a638:	2b00      	cmp	r3, #0
 800a63a:	ee10 0a10 	vmov	r0, s0
 800a63e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a900 <__ieee754_rem_pio2+0x300>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	4629      	mov	r1, r5
 800a646:	dd39      	ble.n	800a6bc <__ieee754_rem_pio2+0xbc>
 800a648:	f7f5 fdca 	bl	80001e0 <__aeabi_dsub>
 800a64c:	45b0      	cmp	r8, r6
 800a64e:	4604      	mov	r4, r0
 800a650:	460d      	mov	r5, r1
 800a652:	d01b      	beq.n	800a68c <__ieee754_rem_pio2+0x8c>
 800a654:	a3ac      	add	r3, pc, #688	; (adr r3, 800a908 <__ieee754_rem_pio2+0x308>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f7f5 fdc1 	bl	80001e0 <__aeabi_dsub>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	e9ca 2300 	strd	r2, r3, [sl]
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f5 fdb9 	bl	80001e0 <__aeabi_dsub>
 800a66e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a908 <__ieee754_rem_pio2+0x308>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f7f5 fdb4 	bl	80001e0 <__aeabi_dsub>
 800a678:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a67c:	f04f 0b01 	mov.w	fp, #1
 800a680:	4658      	mov	r0, fp
 800a682:	b00b      	add	sp, #44	; 0x2c
 800a684:	ecbd 8b02 	vpop	{d8}
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a910 <__ieee754_rem_pio2+0x310>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fda5 	bl	80001e0 <__aeabi_dsub>
 800a696:	a3a0      	add	r3, pc, #640	; (adr r3, 800a918 <__ieee754_rem_pio2+0x318>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	4604      	mov	r4, r0
 800a69e:	460d      	mov	r5, r1
 800a6a0:	f7f5 fd9e 	bl	80001e0 <__aeabi_dsub>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	e9ca 2300 	strd	r2, r3, [sl]
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f5 fd96 	bl	80001e0 <__aeabi_dsub>
 800a6b4:	a398      	add	r3, pc, #608	; (adr r3, 800a918 <__ieee754_rem_pio2+0x318>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	e7db      	b.n	800a674 <__ieee754_rem_pio2+0x74>
 800a6bc:	f7f5 fd92 	bl	80001e4 <__adddf3>
 800a6c0:	45b0      	cmp	r8, r6
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	d016      	beq.n	800a6f6 <__ieee754_rem_pio2+0xf6>
 800a6c8:	a38f      	add	r3, pc, #572	; (adr r3, 800a908 <__ieee754_rem_pio2+0x308>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 fd89 	bl	80001e4 <__adddf3>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	e9ca 2300 	strd	r2, r3, [sl]
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7f5 fd7f 	bl	80001e0 <__aeabi_dsub>
 800a6e2:	a389      	add	r3, pc, #548	; (adr r3, 800a908 <__ieee754_rem_pio2+0x308>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fd7c 	bl	80001e4 <__adddf3>
 800a6ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a6f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6f4:	e7c4      	b.n	800a680 <__ieee754_rem_pio2+0x80>
 800a6f6:	a386      	add	r3, pc, #536	; (adr r3, 800a910 <__ieee754_rem_pio2+0x310>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f5 fd72 	bl	80001e4 <__adddf3>
 800a700:	a385      	add	r3, pc, #532	; (adr r3, 800a918 <__ieee754_rem_pio2+0x318>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
 800a70a:	f7f5 fd6b 	bl	80001e4 <__adddf3>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9ca 2300 	strd	r2, r3, [sl]
 800a716:	4620      	mov	r0, r4
 800a718:	4629      	mov	r1, r5
 800a71a:	f7f5 fd61 	bl	80001e0 <__aeabi_dsub>
 800a71e:	a37e      	add	r3, pc, #504	; (adr r3, 800a918 <__ieee754_rem_pio2+0x318>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	e7e0      	b.n	800a6e8 <__ieee754_rem_pio2+0xe8>
 800a726:	4b87      	ldr	r3, [pc, #540]	; (800a944 <__ieee754_rem_pio2+0x344>)
 800a728:	4598      	cmp	r8, r3
 800a72a:	f300 80d8 	bgt.w	800a8de <__ieee754_rem_pio2+0x2de>
 800a72e:	f000 f96d 	bl	800aa0c <fabs>
 800a732:	ec55 4b10 	vmov	r4, r5, d0
 800a736:	ee10 0a10 	vmov	r0, s0
 800a73a:	a379      	add	r3, pc, #484	; (adr r3, 800a920 <__ieee754_rem_pio2+0x320>)
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	4629      	mov	r1, r5
 800a742:	f7f5 ff05 	bl	8000550 <__aeabi_dmul>
 800a746:	4b80      	ldr	r3, [pc, #512]	; (800a948 <__ieee754_rem_pio2+0x348>)
 800a748:	2200      	movs	r2, #0
 800a74a:	f7f5 fd4b 	bl	80001e4 <__adddf3>
 800a74e:	f7f6 f9af 	bl	8000ab0 <__aeabi_d2iz>
 800a752:	4683      	mov	fp, r0
 800a754:	f7f5 fe92 	bl	800047c <__aeabi_i2d>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	ec43 2b18 	vmov	d8, r2, r3
 800a760:	a367      	add	r3, pc, #412	; (adr r3, 800a900 <__ieee754_rem_pio2+0x300>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fef3 	bl	8000550 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	f7f5 fd35 	bl	80001e0 <__aeabi_dsub>
 800a776:	a364      	add	r3, pc, #400	; (adr r3, 800a908 <__ieee754_rem_pio2+0x308>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	4606      	mov	r6, r0
 800a77e:	460f      	mov	r7, r1
 800a780:	ec51 0b18 	vmov	r0, r1, d8
 800a784:	f7f5 fee4 	bl	8000550 <__aeabi_dmul>
 800a788:	f1bb 0f1f 	cmp.w	fp, #31
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	dc0d      	bgt.n	800a7ae <__ieee754_rem_pio2+0x1ae>
 800a792:	4b6e      	ldr	r3, [pc, #440]	; (800a94c <__ieee754_rem_pio2+0x34c>)
 800a794:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79c:	4543      	cmp	r3, r8
 800a79e:	d006      	beq.n	800a7ae <__ieee754_rem_pio2+0x1ae>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	462b      	mov	r3, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f7f5 fd1a 	bl	80001e0 <__aeabi_dsub>
 800a7ac:	e00e      	b.n	800a7cc <__ieee754_rem_pio2+0x1cc>
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f5 fd13 	bl	80001e0 <__aeabi_dsub>
 800a7ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a7be:	9303      	str	r3, [sp, #12]
 800a7c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7c4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a7c8:	2b10      	cmp	r3, #16
 800a7ca:	dc02      	bgt.n	800a7d2 <__ieee754_rem_pio2+0x1d2>
 800a7cc:	e9ca 0100 	strd	r0, r1, [sl]
 800a7d0:	e039      	b.n	800a846 <__ieee754_rem_pio2+0x246>
 800a7d2:	a34f      	add	r3, pc, #316	; (adr r3, 800a910 <__ieee754_rem_pio2+0x310>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	ec51 0b18 	vmov	r0, r1, d8
 800a7dc:	f7f5 feb8 	bl	8000550 <__aeabi_dmul>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fcf8 	bl	80001e0 <__aeabi_dsub>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	f7f5 fcf0 	bl	80001e0 <__aeabi_dsub>
 800a800:	4622      	mov	r2, r4
 800a802:	462b      	mov	r3, r5
 800a804:	f7f5 fcec 	bl	80001e0 <__aeabi_dsub>
 800a808:	a343      	add	r3, pc, #268	; (adr r3, 800a918 <__ieee754_rem_pio2+0x318>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	4604      	mov	r4, r0
 800a810:	460d      	mov	r5, r1
 800a812:	ec51 0b18 	vmov	r0, r1, d8
 800a816:	f7f5 fe9b 	bl	8000550 <__aeabi_dmul>
 800a81a:	4622      	mov	r2, r4
 800a81c:	462b      	mov	r3, r5
 800a81e:	f7f5 fcdf 	bl	80001e0 <__aeabi_dsub>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4604      	mov	r4, r0
 800a828:	460d      	mov	r5, r1
 800a82a:	4640      	mov	r0, r8
 800a82c:	4649      	mov	r1, r9
 800a82e:	f7f5 fcd7 	bl	80001e0 <__aeabi_dsub>
 800a832:	9a03      	ldr	r2, [sp, #12]
 800a834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b31      	cmp	r3, #49	; 0x31
 800a83c:	dc24      	bgt.n	800a888 <__ieee754_rem_pio2+0x288>
 800a83e:	e9ca 0100 	strd	r0, r1, [sl]
 800a842:	4646      	mov	r6, r8
 800a844:	464f      	mov	r7, r9
 800a846:	e9da 8900 	ldrd	r8, r9, [sl]
 800a84a:	4630      	mov	r0, r6
 800a84c:	4642      	mov	r2, r8
 800a84e:	464b      	mov	r3, r9
 800a850:	4639      	mov	r1, r7
 800a852:	f7f5 fcc5 	bl	80001e0 <__aeabi_dsub>
 800a856:	462b      	mov	r3, r5
 800a858:	4622      	mov	r2, r4
 800a85a:	f7f5 fcc1 	bl	80001e0 <__aeabi_dsub>
 800a85e:	9b02      	ldr	r3, [sp, #8]
 800a860:	2b00      	cmp	r3, #0
 800a862:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a866:	f6bf af0b 	bge.w	800a680 <__ieee754_rem_pio2+0x80>
 800a86a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a86e:	f8ca 3004 	str.w	r3, [sl, #4]
 800a872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a876:	f8ca 8000 	str.w	r8, [sl]
 800a87a:	f8ca 0008 	str.w	r0, [sl, #8]
 800a87e:	f8ca 300c 	str.w	r3, [sl, #12]
 800a882:	f1cb 0b00 	rsb	fp, fp, #0
 800a886:	e6fb      	b.n	800a680 <__ieee754_rem_pio2+0x80>
 800a888:	a327      	add	r3, pc, #156	; (adr r3, 800a928 <__ieee754_rem_pio2+0x328>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	ec51 0b18 	vmov	r0, r1, d8
 800a892:	f7f5 fe5d 	bl	8000550 <__aeabi_dmul>
 800a896:	4604      	mov	r4, r0
 800a898:	460d      	mov	r5, r1
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f5 fc9d 	bl	80001e0 <__aeabi_dsub>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460f      	mov	r7, r1
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	f7f5 fc95 	bl	80001e0 <__aeabi_dsub>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	f7f5 fc91 	bl	80001e0 <__aeabi_dsub>
 800a8be:	a31c      	add	r3, pc, #112	; (adr r3, 800a930 <__ieee754_rem_pio2+0x330>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	ec51 0b18 	vmov	r0, r1, d8
 800a8cc:	f7f5 fe40 	bl	8000550 <__aeabi_dmul>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	462b      	mov	r3, r5
 800a8d4:	f7f5 fc84 	bl	80001e0 <__aeabi_dsub>
 800a8d8:	4604      	mov	r4, r0
 800a8da:	460d      	mov	r5, r1
 800a8dc:	e760      	b.n	800a7a0 <__ieee754_rem_pio2+0x1a0>
 800a8de:	4b1c      	ldr	r3, [pc, #112]	; (800a950 <__ieee754_rem_pio2+0x350>)
 800a8e0:	4598      	cmp	r8, r3
 800a8e2:	dd37      	ble.n	800a954 <__ieee754_rem_pio2+0x354>
 800a8e4:	ee10 2a10 	vmov	r2, s0
 800a8e8:	462b      	mov	r3, r5
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7f5 fc77 	bl	80001e0 <__aeabi_dsub>
 800a8f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8f6:	e9ca 0100 	strd	r0, r1, [sl]
 800a8fa:	e695      	b.n	800a628 <__ieee754_rem_pio2+0x28>
 800a8fc:	f3af 8000 	nop.w
 800a900:	54400000 	.word	0x54400000
 800a904:	3ff921fb 	.word	0x3ff921fb
 800a908:	1a626331 	.word	0x1a626331
 800a90c:	3dd0b461 	.word	0x3dd0b461
 800a910:	1a600000 	.word	0x1a600000
 800a914:	3dd0b461 	.word	0x3dd0b461
 800a918:	2e037073 	.word	0x2e037073
 800a91c:	3ba3198a 	.word	0x3ba3198a
 800a920:	6dc9c883 	.word	0x6dc9c883
 800a924:	3fe45f30 	.word	0x3fe45f30
 800a928:	2e000000 	.word	0x2e000000
 800a92c:	3ba3198a 	.word	0x3ba3198a
 800a930:	252049c1 	.word	0x252049c1
 800a934:	397b839a 	.word	0x397b839a
 800a938:	3fe921fb 	.word	0x3fe921fb
 800a93c:	4002d97b 	.word	0x4002d97b
 800a940:	3ff921fb 	.word	0x3ff921fb
 800a944:	413921fb 	.word	0x413921fb
 800a948:	3fe00000 	.word	0x3fe00000
 800a94c:	08020ed8 	.word	0x08020ed8
 800a950:	7fefffff 	.word	0x7fefffff
 800a954:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a958:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a95c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a960:	4620      	mov	r0, r4
 800a962:	460d      	mov	r5, r1
 800a964:	f7f6 f8a4 	bl	8000ab0 <__aeabi_d2iz>
 800a968:	f7f5 fd88 	bl	800047c <__aeabi_i2d>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a978:	f7f5 fc32 	bl	80001e0 <__aeabi_dsub>
 800a97c:	4b21      	ldr	r3, [pc, #132]	; (800aa04 <__ieee754_rem_pio2+0x404>)
 800a97e:	2200      	movs	r2, #0
 800a980:	f7f5 fde6 	bl	8000550 <__aeabi_dmul>
 800a984:	460d      	mov	r5, r1
 800a986:	4604      	mov	r4, r0
 800a988:	f7f6 f892 	bl	8000ab0 <__aeabi_d2iz>
 800a98c:	f7f5 fd76 	bl	800047c <__aeabi_i2d>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a99c:	f7f5 fc20 	bl	80001e0 <__aeabi_dsub>
 800a9a0:	4b18      	ldr	r3, [pc, #96]	; (800aa04 <__ieee754_rem_pio2+0x404>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f7f5 fdd4 	bl	8000550 <__aeabi_dmul>
 800a9a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a9b0:	2703      	movs	r7, #3
 800a9b2:	2400      	movs	r4, #0
 800a9b4:	2500      	movs	r5, #0
 800a9b6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	462b      	mov	r3, r5
 800a9be:	46b9      	mov	r9, r7
 800a9c0:	3f01      	subs	r7, #1
 800a9c2:	f7f6 f82d 	bl	8000a20 <__aeabi_dcmpeq>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d1f5      	bne.n	800a9b6 <__ieee754_rem_pio2+0x3b6>
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <__ieee754_rem_pio2+0x408>)
 800a9cc:	9301      	str	r3, [sp, #4]
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	4651      	mov	r1, sl
 800a9d8:	a804      	add	r0, sp, #16
 800a9da:	f000 f8d1 	bl	800ab80 <__kernel_rem_pio2>
 800a9de:	9b02      	ldr	r3, [sp, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	4683      	mov	fp, r0
 800a9e4:	f6bf ae4c 	bge.w	800a680 <__ieee754_rem_pio2+0x80>
 800a9e8:	e9da 2100 	ldrd	r2, r1, [sl]
 800a9ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f0:	e9ca 2300 	strd	r2, r3, [sl]
 800a9f4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a9f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800aa00:	e73f      	b.n	800a882 <__ieee754_rem_pio2+0x282>
 800aa02:	bf00      	nop
 800aa04:	41700000 	.word	0x41700000
 800aa08:	08020f58 	.word	0x08020f58

0800aa0c <fabs>:
 800aa0c:	ec51 0b10 	vmov	r0, r1, d0
 800aa10:	ee10 2a10 	vmov	r2, s0
 800aa14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa18:	ec43 2b10 	vmov	d0, r2, r3
 800aa1c:	4770      	bx	lr
	...

0800aa20 <scalbn>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	ec55 4b10 	vmov	r4, r5, d0
 800aa26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	b999      	cbnz	r1, 800aa58 <scalbn+0x38>
 800aa30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa34:	4323      	orrs	r3, r4
 800aa36:	d03f      	beq.n	800aab8 <scalbn+0x98>
 800aa38:	4b35      	ldr	r3, [pc, #212]	; (800ab10 <scalbn+0xf0>)
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	ee10 0a10 	vmov	r0, s0
 800aa40:	2200      	movs	r2, #0
 800aa42:	f7f5 fd85 	bl	8000550 <__aeabi_dmul>
 800aa46:	4b33      	ldr	r3, [pc, #204]	; (800ab14 <scalbn+0xf4>)
 800aa48:	429e      	cmp	r6, r3
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	da10      	bge.n	800aa72 <scalbn+0x52>
 800aa50:	a327      	add	r3, pc, #156	; (adr r3, 800aaf0 <scalbn+0xd0>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	e01f      	b.n	800aa98 <scalbn+0x78>
 800aa58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aa5c:	4291      	cmp	r1, r2
 800aa5e:	d10c      	bne.n	800aa7a <scalbn+0x5a>
 800aa60:	ee10 2a10 	vmov	r2, s0
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f5 fbbc 	bl	80001e4 <__adddf3>
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	e022      	b.n	800aab8 <scalbn+0x98>
 800aa72:	460b      	mov	r3, r1
 800aa74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aa78:	3936      	subs	r1, #54	; 0x36
 800aa7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aa7e:	4296      	cmp	r6, r2
 800aa80:	dd0d      	ble.n	800aa9e <scalbn+0x7e>
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	a11c      	add	r1, pc, #112	; (adr r1, 800aaf8 <scalbn+0xd8>)
 800aa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa8a:	da02      	bge.n	800aa92 <scalbn+0x72>
 800aa8c:	a11c      	add	r1, pc, #112	; (adr r1, 800ab00 <scalbn+0xe0>)
 800aa8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa92:	a319      	add	r3, pc, #100	; (adr r3, 800aaf8 <scalbn+0xd8>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fd5a 	bl	8000550 <__aeabi_dmul>
 800aa9c:	e7e6      	b.n	800aa6c <scalbn+0x4c>
 800aa9e:	1872      	adds	r2, r6, r1
 800aaa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aaa4:	428a      	cmp	r2, r1
 800aaa6:	dcec      	bgt.n	800aa82 <scalbn+0x62>
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	dd08      	ble.n	800aabe <scalbn+0x9e>
 800aaac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aab0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aab4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aab8:	ec45 4b10 	vmov	d0, r4, r5
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
 800aabe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aac2:	da08      	bge.n	800aad6 <scalbn+0xb6>
 800aac4:	2d00      	cmp	r5, #0
 800aac6:	a10a      	add	r1, pc, #40	; (adr r1, 800aaf0 <scalbn+0xd0>)
 800aac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aacc:	dac0      	bge.n	800aa50 <scalbn+0x30>
 800aace:	a10e      	add	r1, pc, #56	; (adr r1, 800ab08 <scalbn+0xe8>)
 800aad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aad4:	e7bc      	b.n	800aa50 <scalbn+0x30>
 800aad6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aada:	3236      	adds	r2, #54	; 0x36
 800aadc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aae0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aae4:	4620      	mov	r0, r4
 800aae6:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <scalbn+0xf8>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	e7d5      	b.n	800aa98 <scalbn+0x78>
 800aaec:	f3af 8000 	nop.w
 800aaf0:	c2f8f359 	.word	0xc2f8f359
 800aaf4:	01a56e1f 	.word	0x01a56e1f
 800aaf8:	8800759c 	.word	0x8800759c
 800aafc:	7e37e43c 	.word	0x7e37e43c
 800ab00:	8800759c 	.word	0x8800759c
 800ab04:	fe37e43c 	.word	0xfe37e43c
 800ab08:	c2f8f359 	.word	0xc2f8f359
 800ab0c:	81a56e1f 	.word	0x81a56e1f
 800ab10:	43500000 	.word	0x43500000
 800ab14:	ffff3cb0 	.word	0xffff3cb0
 800ab18:	3c900000 	.word	0x3c900000

0800ab1c <with_errno>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	4604      	mov	r4, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	4616      	mov	r6, r2
 800ab24:	f7fe f9f8 	bl	8008f18 <__errno>
 800ab28:	4629      	mov	r1, r5
 800ab2a:	6006      	str	r6, [r0, #0]
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}

0800ab30 <xflow>:
 800ab30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab32:	4614      	mov	r4, r2
 800ab34:	461d      	mov	r5, r3
 800ab36:	b108      	cbz	r0, 800ab3c <xflow+0xc>
 800ab38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ab40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fd02 	bl	8000550 <__aeabi_dmul>
 800ab4c:	2222      	movs	r2, #34	; 0x22
 800ab4e:	b003      	add	sp, #12
 800ab50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab54:	f7ff bfe2 	b.w	800ab1c <with_errno>

0800ab58 <__math_uflow>:
 800ab58:	b508      	push	{r3, lr}
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ab60:	f7ff ffe6 	bl	800ab30 <xflow>
 800ab64:	ec41 0b10 	vmov	d0, r0, r1
 800ab68:	bd08      	pop	{r3, pc}

0800ab6a <__math_oflow>:
 800ab6a:	b508      	push	{r3, lr}
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ab72:	f7ff ffdd 	bl	800ab30 <xflow>
 800ab76:	ec41 0b10 	vmov	d0, r0, r1
 800ab7a:	bd08      	pop	{r3, pc}
 800ab7c:	0000      	movs	r0, r0
	...

0800ab80 <__kernel_rem_pio2>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	ed2d 8b02 	vpush	{d8}
 800ab88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ab8c:	f112 0f14 	cmn.w	r2, #20
 800ab90:	9306      	str	r3, [sp, #24]
 800ab92:	9104      	str	r1, [sp, #16]
 800ab94:	4bc2      	ldr	r3, [pc, #776]	; (800aea0 <__kernel_rem_pio2+0x320>)
 800ab96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ab98:	9009      	str	r0, [sp, #36]	; 0x24
 800ab9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	9b06      	ldr	r3, [sp, #24]
 800aba2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aba6:	bfa8      	it	ge
 800aba8:	1ed4      	subge	r4, r2, #3
 800abaa:	9305      	str	r3, [sp, #20]
 800abac:	bfb2      	itee	lt
 800abae:	2400      	movlt	r4, #0
 800abb0:	2318      	movge	r3, #24
 800abb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800abb6:	f06f 0317 	mvn.w	r3, #23
 800abba:	fb04 3303 	mla	r3, r4, r3, r3
 800abbe:	eb03 0a02 	add.w	sl, r3, r2
 800abc2:	9b00      	ldr	r3, [sp, #0]
 800abc4:	9a05      	ldr	r2, [sp, #20]
 800abc6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ae90 <__kernel_rem_pio2+0x310>
 800abca:	eb03 0802 	add.w	r8, r3, r2
 800abce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800abd0:	1aa7      	subs	r7, r4, r2
 800abd2:	ae20      	add	r6, sp, #128	; 0x80
 800abd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800abd8:	2500      	movs	r5, #0
 800abda:	4545      	cmp	r5, r8
 800abdc:	dd13      	ble.n	800ac06 <__kernel_rem_pio2+0x86>
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	aa20      	add	r2, sp, #128	; 0x80
 800abe2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800abe6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800abea:	f04f 0800 	mov.w	r8, #0
 800abee:	9b00      	ldr	r3, [sp, #0]
 800abf0:	4598      	cmp	r8, r3
 800abf2:	dc31      	bgt.n	800ac58 <__kernel_rem_pio2+0xd8>
 800abf4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ae90 <__kernel_rem_pio2+0x310>
 800abf8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800abfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac00:	462f      	mov	r7, r5
 800ac02:	2600      	movs	r6, #0
 800ac04:	e01b      	b.n	800ac3e <__kernel_rem_pio2+0xbe>
 800ac06:	42ef      	cmn	r7, r5
 800ac08:	d407      	bmi.n	800ac1a <__kernel_rem_pio2+0x9a>
 800ac0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac0e:	f7f5 fc35 	bl	800047c <__aeabi_i2d>
 800ac12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac16:	3501      	adds	r5, #1
 800ac18:	e7df      	b.n	800abda <__kernel_rem_pio2+0x5a>
 800ac1a:	ec51 0b18 	vmov	r0, r1, d8
 800ac1e:	e7f8      	b.n	800ac12 <__kernel_rem_pio2+0x92>
 800ac20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac28:	f7f5 fc92 	bl	8000550 <__aeabi_dmul>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac34:	f7f5 fad6 	bl	80001e4 <__adddf3>
 800ac38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac3c:	3601      	adds	r6, #1
 800ac3e:	9b05      	ldr	r3, [sp, #20]
 800ac40:	429e      	cmp	r6, r3
 800ac42:	f1a7 0708 	sub.w	r7, r7, #8
 800ac46:	ddeb      	ble.n	800ac20 <__kernel_rem_pio2+0xa0>
 800ac48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac4c:	f108 0801 	add.w	r8, r8, #1
 800ac50:	ecab 7b02 	vstmia	fp!, {d7}
 800ac54:	3508      	adds	r5, #8
 800ac56:	e7ca      	b.n	800abee <__kernel_rem_pio2+0x6e>
 800ac58:	9b00      	ldr	r3, [sp, #0]
 800ac5a:	aa0c      	add	r2, sp, #48	; 0x30
 800ac5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac60:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac62:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ac64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac68:	9c00      	ldr	r4, [sp, #0]
 800ac6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac6c:	00e3      	lsls	r3, r4, #3
 800ac6e:	9308      	str	r3, [sp, #32]
 800ac70:	ab98      	add	r3, sp, #608	; 0x260
 800ac72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ac7a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ac7e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ac80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ac84:	46c3      	mov	fp, r8
 800ac86:	46a1      	mov	r9, r4
 800ac88:	f1b9 0f00 	cmp.w	r9, #0
 800ac8c:	f1a5 0508 	sub.w	r5, r5, #8
 800ac90:	dc77      	bgt.n	800ad82 <__kernel_rem_pio2+0x202>
 800ac92:	ec47 6b10 	vmov	d0, r6, r7
 800ac96:	4650      	mov	r0, sl
 800ac98:	f7ff fec2 	bl	800aa20 <scalbn>
 800ac9c:	ec57 6b10 	vmov	r6, r7, d0
 800aca0:	2200      	movs	r2, #0
 800aca2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aca6:	ee10 0a10 	vmov	r0, s0
 800acaa:	4639      	mov	r1, r7
 800acac:	f7f5 fc50 	bl	8000550 <__aeabi_dmul>
 800acb0:	ec41 0b10 	vmov	d0, r0, r1
 800acb4:	f000 fab4 	bl	800b220 <floor>
 800acb8:	4b7a      	ldr	r3, [pc, #488]	; (800aea4 <__kernel_rem_pio2+0x324>)
 800acba:	ec51 0b10 	vmov	r0, r1, d0
 800acbe:	2200      	movs	r2, #0
 800acc0:	f7f5 fc46 	bl	8000550 <__aeabi_dmul>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fa88 	bl	80001e0 <__aeabi_dsub>
 800acd0:	460f      	mov	r7, r1
 800acd2:	4606      	mov	r6, r0
 800acd4:	f7f5 feec 	bl	8000ab0 <__aeabi_d2iz>
 800acd8:	9002      	str	r0, [sp, #8]
 800acda:	f7f5 fbcf 	bl	800047c <__aeabi_i2d>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4630      	mov	r0, r6
 800ace4:	4639      	mov	r1, r7
 800ace6:	f7f5 fa7b 	bl	80001e0 <__aeabi_dsub>
 800acea:	f1ba 0f00 	cmp.w	sl, #0
 800acee:	4606      	mov	r6, r0
 800acf0:	460f      	mov	r7, r1
 800acf2:	dd6d      	ble.n	800add0 <__kernel_rem_pio2+0x250>
 800acf4:	1e61      	subs	r1, r4, #1
 800acf6:	ab0c      	add	r3, sp, #48	; 0x30
 800acf8:	9d02      	ldr	r5, [sp, #8]
 800acfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acfe:	f1ca 0018 	rsb	r0, sl, #24
 800ad02:	fa43 f200 	asr.w	r2, r3, r0
 800ad06:	4415      	add	r5, r2
 800ad08:	4082      	lsls	r2, r0
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	aa0c      	add	r2, sp, #48	; 0x30
 800ad0e:	9502      	str	r5, [sp, #8]
 800ad10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ad14:	f1ca 0217 	rsb	r2, sl, #23
 800ad18:	fa43 fb02 	asr.w	fp, r3, r2
 800ad1c:	f1bb 0f00 	cmp.w	fp, #0
 800ad20:	dd65      	ble.n	800adee <__kernel_rem_pio2+0x26e>
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	2200      	movs	r2, #0
 800ad26:	3301      	adds	r3, #1
 800ad28:	9302      	str	r3, [sp, #8]
 800ad2a:	4615      	mov	r5, r2
 800ad2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ad30:	4294      	cmp	r4, r2
 800ad32:	f300 809f 	bgt.w	800ae74 <__kernel_rem_pio2+0x2f4>
 800ad36:	f1ba 0f00 	cmp.w	sl, #0
 800ad3a:	dd07      	ble.n	800ad4c <__kernel_rem_pio2+0x1cc>
 800ad3c:	f1ba 0f01 	cmp.w	sl, #1
 800ad40:	f000 80c1 	beq.w	800aec6 <__kernel_rem_pio2+0x346>
 800ad44:	f1ba 0f02 	cmp.w	sl, #2
 800ad48:	f000 80c7 	beq.w	800aeda <__kernel_rem_pio2+0x35a>
 800ad4c:	f1bb 0f02 	cmp.w	fp, #2
 800ad50:	d14d      	bne.n	800adee <__kernel_rem_pio2+0x26e>
 800ad52:	4632      	mov	r2, r6
 800ad54:	463b      	mov	r3, r7
 800ad56:	4954      	ldr	r1, [pc, #336]	; (800aea8 <__kernel_rem_pio2+0x328>)
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f7f5 fa41 	bl	80001e0 <__aeabi_dsub>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	460f      	mov	r7, r1
 800ad62:	2d00      	cmp	r5, #0
 800ad64:	d043      	beq.n	800adee <__kernel_rem_pio2+0x26e>
 800ad66:	4650      	mov	r0, sl
 800ad68:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ae98 <__kernel_rem_pio2+0x318>
 800ad6c:	f7ff fe58 	bl	800aa20 <scalbn>
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	ec53 2b10 	vmov	r2, r3, d0
 800ad78:	f7f5 fa32 	bl	80001e0 <__aeabi_dsub>
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	e035      	b.n	800adee <__kernel_rem_pio2+0x26e>
 800ad82:	4b4a      	ldr	r3, [pc, #296]	; (800aeac <__kernel_rem_pio2+0x32c>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 fbe1 	bl	8000550 <__aeabi_dmul>
 800ad8e:	f7f5 fe8f 	bl	8000ab0 <__aeabi_d2iz>
 800ad92:	f7f5 fb73 	bl	800047c <__aeabi_i2d>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	ec43 2b18 	vmov	d8, r2, r3
 800ad9e:	4b44      	ldr	r3, [pc, #272]	; (800aeb0 <__kernel_rem_pio2+0x330>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	f7f5 fbd5 	bl	8000550 <__aeabi_dmul>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4630      	mov	r0, r6
 800adac:	4639      	mov	r1, r7
 800adae:	f7f5 fa17 	bl	80001e0 <__aeabi_dsub>
 800adb2:	f7f5 fe7d 	bl	8000ab0 <__aeabi_d2iz>
 800adb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adba:	f84b 0b04 	str.w	r0, [fp], #4
 800adbe:	ec51 0b18 	vmov	r0, r1, d8
 800adc2:	f7f5 fa0f 	bl	80001e4 <__adddf3>
 800adc6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	e75b      	b.n	800ac88 <__kernel_rem_pio2+0x108>
 800add0:	d106      	bne.n	800ade0 <__kernel_rem_pio2+0x260>
 800add2:	1e63      	subs	r3, r4, #1
 800add4:	aa0c      	add	r2, sp, #48	; 0x30
 800add6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adda:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800adde:	e79d      	b.n	800ad1c <__kernel_rem_pio2+0x19c>
 800ade0:	4b34      	ldr	r3, [pc, #208]	; (800aeb4 <__kernel_rem_pio2+0x334>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	f7f5 fe3a 	bl	8000a5c <__aeabi_dcmpge>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d140      	bne.n	800ae6e <__kernel_rem_pio2+0x2ee>
 800adec:	4683      	mov	fp, r0
 800adee:	2200      	movs	r2, #0
 800adf0:	2300      	movs	r3, #0
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fe13 	bl	8000a20 <__aeabi_dcmpeq>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	f000 80c1 	beq.w	800af82 <__kernel_rem_pio2+0x402>
 800ae00:	1e65      	subs	r5, r4, #1
 800ae02:	462b      	mov	r3, r5
 800ae04:	2200      	movs	r2, #0
 800ae06:	9900      	ldr	r1, [sp, #0]
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	da6d      	bge.n	800aee8 <__kernel_rem_pio2+0x368>
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	f000 808a 	beq.w	800af26 <__kernel_rem_pio2+0x3a6>
 800ae12:	ab0c      	add	r3, sp, #48	; 0x30
 800ae14:	f1aa 0a18 	sub.w	sl, sl, #24
 800ae18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 80ae 	beq.w	800af7e <__kernel_rem_pio2+0x3fe>
 800ae22:	4650      	mov	r0, sl
 800ae24:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ae98 <__kernel_rem_pio2+0x318>
 800ae28:	f7ff fdfa 	bl	800aa20 <scalbn>
 800ae2c:	1c6b      	adds	r3, r5, #1
 800ae2e:	00da      	lsls	r2, r3, #3
 800ae30:	9205      	str	r2, [sp, #20]
 800ae32:	ec57 6b10 	vmov	r6, r7, d0
 800ae36:	aa70      	add	r2, sp, #448	; 0x1c0
 800ae38:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800aeac <__kernel_rem_pio2+0x32c>
 800ae3c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ae40:	462c      	mov	r4, r5
 800ae42:	f04f 0800 	mov.w	r8, #0
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	f280 80d4 	bge.w	800aff4 <__kernel_rem_pio2+0x474>
 800ae4c:	462c      	mov	r4, r5
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	f2c0 8102 	blt.w	800b058 <__kernel_rem_pio2+0x4d8>
 800ae54:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <__kernel_rem_pio2+0x338>)
 800ae56:	461e      	mov	r6, r3
 800ae58:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae5a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ae5e:	1b2b      	subs	r3, r5, r4
 800ae60:	f04f 0900 	mov.w	r9, #0
 800ae64:	f04f 0a00 	mov.w	sl, #0
 800ae68:	2700      	movs	r7, #0
 800ae6a:	9306      	str	r3, [sp, #24]
 800ae6c:	e0e6      	b.n	800b03c <__kernel_rem_pio2+0x4bc>
 800ae6e:	f04f 0b02 	mov.w	fp, #2
 800ae72:	e756      	b.n	800ad22 <__kernel_rem_pio2+0x1a2>
 800ae74:	f8d8 3000 	ldr.w	r3, [r8]
 800ae78:	bb05      	cbnz	r5, 800aebc <__kernel_rem_pio2+0x33c>
 800ae7a:	b123      	cbz	r3, 800ae86 <__kernel_rem_pio2+0x306>
 800ae7c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae80:	f8c8 3000 	str.w	r3, [r8]
 800ae84:	2301      	movs	r3, #1
 800ae86:	3201      	adds	r2, #1
 800ae88:	f108 0804 	add.w	r8, r8, #4
 800ae8c:	461d      	mov	r5, r3
 800ae8e:	e74f      	b.n	800ad30 <__kernel_rem_pio2+0x1b0>
	...
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	080210a0 	.word	0x080210a0
 800aea4:	40200000 	.word	0x40200000
 800aea8:	3ff00000 	.word	0x3ff00000
 800aeac:	3e700000 	.word	0x3e700000
 800aeb0:	41700000 	.word	0x41700000
 800aeb4:	3fe00000 	.word	0x3fe00000
 800aeb8:	08021060 	.word	0x08021060
 800aebc:	1acb      	subs	r3, r1, r3
 800aebe:	f8c8 3000 	str.w	r3, [r8]
 800aec2:	462b      	mov	r3, r5
 800aec4:	e7df      	b.n	800ae86 <__kernel_rem_pio2+0x306>
 800aec6:	1e62      	subs	r2, r4, #1
 800aec8:	ab0c      	add	r3, sp, #48	; 0x30
 800aeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aece:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aed2:	a90c      	add	r1, sp, #48	; 0x30
 800aed4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aed8:	e738      	b.n	800ad4c <__kernel_rem_pio2+0x1cc>
 800aeda:	1e62      	subs	r2, r4, #1
 800aedc:	ab0c      	add	r3, sp, #48	; 0x30
 800aede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aee6:	e7f4      	b.n	800aed2 <__kernel_rem_pio2+0x352>
 800aee8:	a90c      	add	r1, sp, #48	; 0x30
 800aeea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	430a      	orrs	r2, r1
 800aef2:	e788      	b.n	800ae06 <__kernel_rem_pio2+0x286>
 800aef4:	3301      	adds	r3, #1
 800aef6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aefa:	2900      	cmp	r1, #0
 800aefc:	d0fa      	beq.n	800aef4 <__kernel_rem_pio2+0x374>
 800aefe:	9a08      	ldr	r2, [sp, #32]
 800af00:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800af04:	446a      	add	r2, sp
 800af06:	3a98      	subs	r2, #152	; 0x98
 800af08:	9208      	str	r2, [sp, #32]
 800af0a:	9a06      	ldr	r2, [sp, #24]
 800af0c:	a920      	add	r1, sp, #128	; 0x80
 800af0e:	18a2      	adds	r2, r4, r2
 800af10:	18e3      	adds	r3, r4, r3
 800af12:	f104 0801 	add.w	r8, r4, #1
 800af16:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800af1a:	9302      	str	r3, [sp, #8]
 800af1c:	9b02      	ldr	r3, [sp, #8]
 800af1e:	4543      	cmp	r3, r8
 800af20:	da04      	bge.n	800af2c <__kernel_rem_pio2+0x3ac>
 800af22:	461c      	mov	r4, r3
 800af24:	e6a2      	b.n	800ac6c <__kernel_rem_pio2+0xec>
 800af26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af28:	2301      	movs	r3, #1
 800af2a:	e7e4      	b.n	800aef6 <__kernel_rem_pio2+0x376>
 800af2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af2e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800af32:	f7f5 faa3 	bl	800047c <__aeabi_i2d>
 800af36:	e8e5 0102 	strd	r0, r1, [r5], #8
 800af3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3c:	46ab      	mov	fp, r5
 800af3e:	461c      	mov	r4, r3
 800af40:	f04f 0900 	mov.w	r9, #0
 800af44:	2600      	movs	r6, #0
 800af46:	2700      	movs	r7, #0
 800af48:	9b05      	ldr	r3, [sp, #20]
 800af4a:	4599      	cmp	r9, r3
 800af4c:	dd06      	ble.n	800af5c <__kernel_rem_pio2+0x3dc>
 800af4e:	9b08      	ldr	r3, [sp, #32]
 800af50:	e8e3 6702 	strd	r6, r7, [r3], #8
 800af54:	f108 0801 	add.w	r8, r8, #1
 800af58:	9308      	str	r3, [sp, #32]
 800af5a:	e7df      	b.n	800af1c <__kernel_rem_pio2+0x39c>
 800af5c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af60:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af64:	f7f5 faf4 	bl	8000550 <__aeabi_dmul>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f938 	bl	80001e4 <__adddf3>
 800af74:	f109 0901 	add.w	r9, r9, #1
 800af78:	4606      	mov	r6, r0
 800af7a:	460f      	mov	r7, r1
 800af7c:	e7e4      	b.n	800af48 <__kernel_rem_pio2+0x3c8>
 800af7e:	3d01      	subs	r5, #1
 800af80:	e747      	b.n	800ae12 <__kernel_rem_pio2+0x292>
 800af82:	ec47 6b10 	vmov	d0, r6, r7
 800af86:	f1ca 0000 	rsb	r0, sl, #0
 800af8a:	f7ff fd49 	bl	800aa20 <scalbn>
 800af8e:	ec57 6b10 	vmov	r6, r7, d0
 800af92:	4ba0      	ldr	r3, [pc, #640]	; (800b214 <__kernel_rem_pio2+0x694>)
 800af94:	ee10 0a10 	vmov	r0, s0
 800af98:	2200      	movs	r2, #0
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fd5e 	bl	8000a5c <__aeabi_dcmpge>
 800afa0:	b1f8      	cbz	r0, 800afe2 <__kernel_rem_pio2+0x462>
 800afa2:	4b9d      	ldr	r3, [pc, #628]	; (800b218 <__kernel_rem_pio2+0x698>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	4630      	mov	r0, r6
 800afa8:	4639      	mov	r1, r7
 800afaa:	f7f5 fad1 	bl	8000550 <__aeabi_dmul>
 800afae:	f7f5 fd7f 	bl	8000ab0 <__aeabi_d2iz>
 800afb2:	4680      	mov	r8, r0
 800afb4:	f7f5 fa62 	bl	800047c <__aeabi_i2d>
 800afb8:	4b96      	ldr	r3, [pc, #600]	; (800b214 <__kernel_rem_pio2+0x694>)
 800afba:	2200      	movs	r2, #0
 800afbc:	f7f5 fac8 	bl	8000550 <__aeabi_dmul>
 800afc0:	460b      	mov	r3, r1
 800afc2:	4602      	mov	r2, r0
 800afc4:	4639      	mov	r1, r7
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7f5 f90a 	bl	80001e0 <__aeabi_dsub>
 800afcc:	f7f5 fd70 	bl	8000ab0 <__aeabi_d2iz>
 800afd0:	1c65      	adds	r5, r4, #1
 800afd2:	ab0c      	add	r3, sp, #48	; 0x30
 800afd4:	f10a 0a18 	add.w	sl, sl, #24
 800afd8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afdc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800afe0:	e71f      	b.n	800ae22 <__kernel_rem_pio2+0x2a2>
 800afe2:	4630      	mov	r0, r6
 800afe4:	4639      	mov	r1, r7
 800afe6:	f7f5 fd63 	bl	8000ab0 <__aeabi_d2iz>
 800afea:	ab0c      	add	r3, sp, #48	; 0x30
 800afec:	4625      	mov	r5, r4
 800afee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aff2:	e716      	b.n	800ae22 <__kernel_rem_pio2+0x2a2>
 800aff4:	ab0c      	add	r3, sp, #48	; 0x30
 800aff6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800affa:	f7f5 fa3f 	bl	800047c <__aeabi_i2d>
 800affe:	4632      	mov	r2, r6
 800b000:	463b      	mov	r3, r7
 800b002:	f7f5 faa5 	bl	8000550 <__aeabi_dmul>
 800b006:	4642      	mov	r2, r8
 800b008:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b00c:	464b      	mov	r3, r9
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	f7f5 fa9d 	bl	8000550 <__aeabi_dmul>
 800b016:	3c01      	subs	r4, #1
 800b018:	4606      	mov	r6, r0
 800b01a:	460f      	mov	r7, r1
 800b01c:	e713      	b.n	800ae46 <__kernel_rem_pio2+0x2c6>
 800b01e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b022:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800b026:	f7f5 fa93 	bl	8000550 <__aeabi_dmul>
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4648      	mov	r0, r9
 800b030:	4651      	mov	r1, sl
 800b032:	f7f5 f8d7 	bl	80001e4 <__adddf3>
 800b036:	3701      	adds	r7, #1
 800b038:	4681      	mov	r9, r0
 800b03a:	468a      	mov	sl, r1
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	429f      	cmp	r7, r3
 800b040:	dc02      	bgt.n	800b048 <__kernel_rem_pio2+0x4c8>
 800b042:	9b06      	ldr	r3, [sp, #24]
 800b044:	429f      	cmp	r7, r3
 800b046:	ddea      	ble.n	800b01e <__kernel_rem_pio2+0x49e>
 800b048:	9a06      	ldr	r2, [sp, #24]
 800b04a:	ab48      	add	r3, sp, #288	; 0x120
 800b04c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800b050:	e9c6 9a00 	strd	r9, sl, [r6]
 800b054:	3c01      	subs	r4, #1
 800b056:	e6fa      	b.n	800ae4e <__kernel_rem_pio2+0x2ce>
 800b058:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	dc0b      	bgt.n	800b076 <__kernel_rem_pio2+0x4f6>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dc39      	bgt.n	800b0d6 <__kernel_rem_pio2+0x556>
 800b062:	d05d      	beq.n	800b120 <__kernel_rem_pio2+0x5a0>
 800b064:	9b02      	ldr	r3, [sp, #8]
 800b066:	f003 0007 	and.w	r0, r3, #7
 800b06a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b06e:	ecbd 8b02 	vpop	{d8}
 800b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b076:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b078:	2b03      	cmp	r3, #3
 800b07a:	d1f3      	bne.n	800b064 <__kernel_rem_pio2+0x4e4>
 800b07c:	9b05      	ldr	r3, [sp, #20]
 800b07e:	9500      	str	r5, [sp, #0]
 800b080:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b084:	eb0d 0403 	add.w	r4, sp, r3
 800b088:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800b08c:	46a2      	mov	sl, r4
 800b08e:	9b00      	ldr	r3, [sp, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	f1aa 0a08 	sub.w	sl, sl, #8
 800b096:	dc69      	bgt.n	800b16c <__kernel_rem_pio2+0x5ec>
 800b098:	46aa      	mov	sl, r5
 800b09a:	f1ba 0f01 	cmp.w	sl, #1
 800b09e:	f1a4 0408 	sub.w	r4, r4, #8
 800b0a2:	f300 8083 	bgt.w	800b1ac <__kernel_rem_pio2+0x62c>
 800b0a6:	9c05      	ldr	r4, [sp, #20]
 800b0a8:	ab48      	add	r3, sp, #288	; 0x120
 800b0aa:	441c      	add	r4, r3
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	2d01      	cmp	r5, #1
 800b0b2:	f300 809a 	bgt.w	800b1ea <__kernel_rem_pio2+0x66a>
 800b0b6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800b0ba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b0be:	f1bb 0f00 	cmp.w	fp, #0
 800b0c2:	f040 8098 	bne.w	800b1f6 <__kernel_rem_pio2+0x676>
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	e9c3 7800 	strd	r7, r8, [r3]
 800b0cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b0d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0d4:	e7c6      	b.n	800b064 <__kernel_rem_pio2+0x4e4>
 800b0d6:	9e05      	ldr	r6, [sp, #20]
 800b0d8:	ab48      	add	r3, sp, #288	; 0x120
 800b0da:	441e      	add	r6, r3
 800b0dc:	462c      	mov	r4, r5
 800b0de:	2000      	movs	r0, #0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	2c00      	cmp	r4, #0
 800b0e4:	da33      	bge.n	800b14e <__kernel_rem_pio2+0x5ce>
 800b0e6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ea:	d036      	beq.n	800b15a <__kernel_rem_pio2+0x5da>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0f2:	9c04      	ldr	r4, [sp, #16]
 800b0f4:	e9c4 2300 	strd	r2, r3, [r4]
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b100:	f7f5 f86e 	bl	80001e0 <__aeabi_dsub>
 800b104:	ae4a      	add	r6, sp, #296	; 0x128
 800b106:	2401      	movs	r4, #1
 800b108:	42a5      	cmp	r5, r4
 800b10a:	da29      	bge.n	800b160 <__kernel_rem_pio2+0x5e0>
 800b10c:	f1bb 0f00 	cmp.w	fp, #0
 800b110:	d002      	beq.n	800b118 <__kernel_rem_pio2+0x598>
 800b112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b116:	4619      	mov	r1, r3
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b11e:	e7a1      	b.n	800b064 <__kernel_rem_pio2+0x4e4>
 800b120:	9c05      	ldr	r4, [sp, #20]
 800b122:	ab48      	add	r3, sp, #288	; 0x120
 800b124:	441c      	add	r4, r3
 800b126:	2000      	movs	r0, #0
 800b128:	2100      	movs	r1, #0
 800b12a:	2d00      	cmp	r5, #0
 800b12c:	da09      	bge.n	800b142 <__kernel_rem_pio2+0x5c2>
 800b12e:	f1bb 0f00 	cmp.w	fp, #0
 800b132:	d002      	beq.n	800b13a <__kernel_rem_pio2+0x5ba>
 800b134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b138:	4619      	mov	r1, r3
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	e9c3 0100 	strd	r0, r1, [r3]
 800b140:	e790      	b.n	800b064 <__kernel_rem_pio2+0x4e4>
 800b142:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b146:	f7f5 f84d 	bl	80001e4 <__adddf3>
 800b14a:	3d01      	subs	r5, #1
 800b14c:	e7ed      	b.n	800b12a <__kernel_rem_pio2+0x5aa>
 800b14e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b152:	f7f5 f847 	bl	80001e4 <__adddf3>
 800b156:	3c01      	subs	r4, #1
 800b158:	e7c3      	b.n	800b0e2 <__kernel_rem_pio2+0x562>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	e7c8      	b.n	800b0f2 <__kernel_rem_pio2+0x572>
 800b160:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b164:	f7f5 f83e 	bl	80001e4 <__adddf3>
 800b168:	3401      	adds	r4, #1
 800b16a:	e7cd      	b.n	800b108 <__kernel_rem_pio2+0x588>
 800b16c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b170:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	3b01      	subs	r3, #1
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	4632      	mov	r2, r6
 800b17c:	463b      	mov	r3, r7
 800b17e:	4640      	mov	r0, r8
 800b180:	4649      	mov	r1, r9
 800b182:	f7f5 f82f 	bl	80001e4 <__adddf3>
 800b186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f7f5 f825 	bl	80001e0 <__aeabi_dsub>
 800b196:	4632      	mov	r2, r6
 800b198:	463b      	mov	r3, r7
 800b19a:	f7f5 f823 	bl	80001e4 <__adddf3>
 800b19e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b1a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b1a6:	ed8a 7b00 	vstr	d7, [sl]
 800b1aa:	e770      	b.n	800b08e <__kernel_rem_pio2+0x50e>
 800b1ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b1b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	463b      	mov	r3, r7
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	f7f5 f812 	bl	80001e4 <__adddf3>
 800b1c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 f808 	bl	80001e0 <__aeabi_dsub>
 800b1d0:	4632      	mov	r2, r6
 800b1d2:	463b      	mov	r3, r7
 800b1d4:	f7f5 f806 	bl	80001e4 <__adddf3>
 800b1d8:	ed9d 7b00 	vldr	d7, [sp]
 800b1dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1e0:	ed84 7b00 	vstr	d7, [r4]
 800b1e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b1e8:	e757      	b.n	800b09a <__kernel_rem_pio2+0x51a>
 800b1ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1ee:	f7f4 fff9 	bl	80001e4 <__adddf3>
 800b1f2:	3d01      	subs	r5, #1
 800b1f4:	e75c      	b.n	800b0b0 <__kernel_rem_pio2+0x530>
 800b1f6:	9b04      	ldr	r3, [sp, #16]
 800b1f8:	9a04      	ldr	r2, [sp, #16]
 800b1fa:	601f      	str	r7, [r3, #0]
 800b1fc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b200:	605c      	str	r4, [r3, #4]
 800b202:	609d      	str	r5, [r3, #8]
 800b204:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b208:	60d3      	str	r3, [r2, #12]
 800b20a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b20e:	6110      	str	r0, [r2, #16]
 800b210:	6153      	str	r3, [r2, #20]
 800b212:	e727      	b.n	800b064 <__kernel_rem_pio2+0x4e4>
 800b214:	41700000 	.word	0x41700000
 800b218:	3e700000 	.word	0x3e700000
 800b21c:	00000000 	.word	0x00000000

0800b220 <floor>:
 800b220:	ec51 0b10 	vmov	r0, r1, d0
 800b224:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b230:	2e13      	cmp	r6, #19
 800b232:	ee10 5a10 	vmov	r5, s0
 800b236:	ee10 8a10 	vmov	r8, s0
 800b23a:	460c      	mov	r4, r1
 800b23c:	dc31      	bgt.n	800b2a2 <floor+0x82>
 800b23e:	2e00      	cmp	r6, #0
 800b240:	da14      	bge.n	800b26c <floor+0x4c>
 800b242:	a333      	add	r3, pc, #204	; (adr r3, 800b310 <floor+0xf0>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f4 ffcc 	bl	80001e4 <__adddf3>
 800b24c:	2200      	movs	r2, #0
 800b24e:	2300      	movs	r3, #0
 800b250:	f7f5 fc0e 	bl	8000a70 <__aeabi_dcmpgt>
 800b254:	b138      	cbz	r0, 800b266 <floor+0x46>
 800b256:	2c00      	cmp	r4, #0
 800b258:	da53      	bge.n	800b302 <floor+0xe2>
 800b25a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b25e:	4325      	orrs	r5, r4
 800b260:	d052      	beq.n	800b308 <floor+0xe8>
 800b262:	4c2d      	ldr	r4, [pc, #180]	; (800b318 <floor+0xf8>)
 800b264:	2500      	movs	r5, #0
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	e024      	b.n	800b2b6 <floor+0x96>
 800b26c:	4f2b      	ldr	r7, [pc, #172]	; (800b31c <floor+0xfc>)
 800b26e:	4137      	asrs	r7, r6
 800b270:	ea01 0307 	and.w	r3, r1, r7
 800b274:	4303      	orrs	r3, r0
 800b276:	d01e      	beq.n	800b2b6 <floor+0x96>
 800b278:	a325      	add	r3, pc, #148	; (adr r3, 800b310 <floor+0xf0>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f4 ffb1 	bl	80001e4 <__adddf3>
 800b282:	2200      	movs	r2, #0
 800b284:	2300      	movs	r3, #0
 800b286:	f7f5 fbf3 	bl	8000a70 <__aeabi_dcmpgt>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0eb      	beq.n	800b266 <floor+0x46>
 800b28e:	2c00      	cmp	r4, #0
 800b290:	bfbe      	ittt	lt
 800b292:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b296:	4133      	asrlt	r3, r6
 800b298:	18e4      	addlt	r4, r4, r3
 800b29a:	ea24 0407 	bic.w	r4, r4, r7
 800b29e:	2500      	movs	r5, #0
 800b2a0:	e7e1      	b.n	800b266 <floor+0x46>
 800b2a2:	2e33      	cmp	r6, #51	; 0x33
 800b2a4:	dd0b      	ble.n	800b2be <floor+0x9e>
 800b2a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b2aa:	d104      	bne.n	800b2b6 <floor+0x96>
 800b2ac:	ee10 2a10 	vmov	r2, s0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	f7f4 ff97 	bl	80001e4 <__adddf3>
 800b2b6:	ec41 0b10 	vmov	d0, r0, r1
 800b2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2be:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b2c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b2c6:	40df      	lsrs	r7, r3
 800b2c8:	4238      	tst	r0, r7
 800b2ca:	d0f4      	beq.n	800b2b6 <floor+0x96>
 800b2cc:	a310      	add	r3, pc, #64	; (adr r3, 800b310 <floor+0xf0>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f4 ff87 	bl	80001e4 <__adddf3>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f7f5 fbc9 	bl	8000a70 <__aeabi_dcmpgt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d0c1      	beq.n	800b266 <floor+0x46>
 800b2e2:	2c00      	cmp	r4, #0
 800b2e4:	da0a      	bge.n	800b2fc <floor+0xdc>
 800b2e6:	2e14      	cmp	r6, #20
 800b2e8:	d101      	bne.n	800b2ee <floor+0xce>
 800b2ea:	3401      	adds	r4, #1
 800b2ec:	e006      	b.n	800b2fc <floor+0xdc>
 800b2ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	40b3      	lsls	r3, r6
 800b2f6:	441d      	add	r5, r3
 800b2f8:	45a8      	cmp	r8, r5
 800b2fa:	d8f6      	bhi.n	800b2ea <floor+0xca>
 800b2fc:	ea25 0507 	bic.w	r5, r5, r7
 800b300:	e7b1      	b.n	800b266 <floor+0x46>
 800b302:	2500      	movs	r5, #0
 800b304:	462c      	mov	r4, r5
 800b306:	e7ae      	b.n	800b266 <floor+0x46>
 800b308:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b30c:	e7ab      	b.n	800b266 <floor+0x46>
 800b30e:	bf00      	nop
 800b310:	8800759c 	.word	0x8800759c
 800b314:	7e37e43c 	.word	0x7e37e43c
 800b318:	bff00000 	.word	0xbff00000
 800b31c:	000fffff 	.word	0x000fffff

0800b320 <_init>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	bf00      	nop
 800b324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b326:	bc08      	pop	{r3}
 800b328:	469e      	mov	lr, r3
 800b32a:	4770      	bx	lr

0800b32c <_fini>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr
